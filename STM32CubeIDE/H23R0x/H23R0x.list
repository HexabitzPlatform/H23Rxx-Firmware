
H23R0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a344  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003968  0801a400  0801a400  0002a400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dd68  0801dd68  00030a5c  2**0
                  CONTENTS
  4 .ARM          00000008  0801dd68  0801dd68  0002dd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dd70  0801dd70  00030a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801dd70  0801dd70  0002dd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dd78  0801dd78  0002dd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a5c  20000000  0801dd7c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006568  20000a60  0801e7d8  00030a60  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006fc8  0801e7d8  00036fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a222  00000000  00000000  00030a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009cab  00000000  00000000  0008aca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000207d2  00000000  00000000  00094951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da0  00000000  00000000  000b5128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000024d0  00000000  00000000  000b6ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b722  00000000  00000000  000b9398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ac9c  00000000  00000000  000e4aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f28  00000000  00000000  000ef7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000f66d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000f67a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a60 	.word	0x20000a60
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801a3e8 	.word	0x0801a3e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a64 	.word	0x20000a64
 8000100:	0801a3e8 	.word	0x0801a3e8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fd05 	bl	8001e5c <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc4f 	bl	8001d00 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fcf7 	bl	8001e5c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fced 	bl	8001e5c <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc71 	bl	8001d78 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fc67 	bl	8001d78 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fa43 	bl	800094c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f9c7 	bl	8000864 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa35 	bl	800094c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fa2b 	bl	800094c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f9d5 	bl	80008b4 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f9cb 	bl	80008b4 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f8b6 	bl	80006cc <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	0415      	lsls	r5, r2, #16
 8000570:	0c2d      	lsrs	r5, r5, #16
 8000572:	000f      	movs	r7, r1
 8000574:	0001      	movs	r1, r0
 8000576:	002e      	movs	r6, r5
 8000578:	46c6      	mov	lr, r8
 800057a:	4684      	mov	ip, r0
 800057c:	0400      	lsls	r0, r0, #16
 800057e:	0c14      	lsrs	r4, r2, #16
 8000580:	0c00      	lsrs	r0, r0, #16
 8000582:	0c09      	lsrs	r1, r1, #16
 8000584:	4346      	muls	r6, r0
 8000586:	434d      	muls	r5, r1
 8000588:	4360      	muls	r0, r4
 800058a:	4361      	muls	r1, r4
 800058c:	1940      	adds	r0, r0, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	1824      	adds	r4, r4, r0
 8000592:	b500      	push	{lr}
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2080      	movs	r0, #128	; 0x80
 800059a:	0240      	lsls	r0, r0, #9
 800059c:	4680      	mov	r8, r0
 800059e:	4441      	add	r1, r8
 80005a0:	0c25      	lsrs	r5, r4, #16
 80005a2:	186d      	adds	r5, r5, r1
 80005a4:	4661      	mov	r1, ip
 80005a6:	4359      	muls	r1, r3
 80005a8:	437a      	muls	r2, r7
 80005aa:	0430      	lsls	r0, r6, #16
 80005ac:	1949      	adds	r1, r1, r5
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	0c00      	lsrs	r0, r0, #16
 80005b2:	1820      	adds	r0, r4, r0
 80005b4:	1889      	adds	r1, r1, r2
 80005b6:	bc80      	pop	{r7}
 80005b8:	46b8      	mov	r8, r7
 80005ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005bc <__aeabi_f2uiz>:
 80005bc:	219e      	movs	r1, #158	; 0x9e
 80005be:	b510      	push	{r4, lr}
 80005c0:	05c9      	lsls	r1, r1, #23
 80005c2:	1c04      	adds	r4, r0, #0
 80005c4:	f7ff ffa8 	bl	8000518 <__aeabi_fcmpge>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d103      	bne.n	80005d4 <__aeabi_f2uiz+0x18>
 80005cc:	1c20      	adds	r0, r4, #0
 80005ce:	f000 fce9 	bl	8000fa4 <__aeabi_f2iz>
 80005d2:	bd10      	pop	{r4, pc}
 80005d4:	219e      	movs	r1, #158	; 0x9e
 80005d6:	1c20      	adds	r0, r4, #0
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	f000 fb1b 	bl	8000c14 <__aeabi_fsub>
 80005de:	f000 fce1 	bl	8000fa4 <__aeabi_f2iz>
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	061b      	lsls	r3, r3, #24
 80005e6:	469c      	mov	ip, r3
 80005e8:	4460      	add	r0, ip
 80005ea:	e7f2      	b.n	80005d2 <__aeabi_f2uiz+0x16>

080005ec <__aeabi_d2uiz>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	2200      	movs	r2, #0
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__aeabi_d2uiz+0x38>)
 80005f2:	0004      	movs	r4, r0
 80005f4:	000d      	movs	r5, r1
 80005f6:	f7ff ff55 	bl	80004a4 <__aeabi_dcmpge>
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d104      	bne.n	8000608 <__aeabi_d2uiz+0x1c>
 80005fe:	0020      	movs	r0, r4
 8000600:	0029      	movs	r1, r5
 8000602:	f002 fab7 	bl	8002b74 <__aeabi_d2iz>
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <__aeabi_d2uiz+0x38>)
 800060a:	2200      	movs	r2, #0
 800060c:	0020      	movs	r0, r4
 800060e:	0029      	movs	r1, r5
 8000610:	f001 ff00 	bl	8002414 <__aeabi_dsub>
 8000614:	f002 faae 	bl	8002b74 <__aeabi_d2iz>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	061b      	lsls	r3, r3, #24
 800061c:	469c      	mov	ip, r3
 800061e:	4460      	add	r0, ip
 8000620:	e7f1      	b.n	8000606 <__aeabi_d2uiz+0x1a>
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	41e00000 	.word	0x41e00000

08000628 <__aeabi_d2lz>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	0005      	movs	r5, r0
 800062c:	000c      	movs	r4, r1
 800062e:	2200      	movs	r2, #0
 8000630:	2300      	movs	r3, #0
 8000632:	0028      	movs	r0, r5
 8000634:	0021      	movs	r1, r4
 8000636:	f7ff ff17 	bl	8000468 <__aeabi_dcmplt>
 800063a:	2800      	cmp	r0, #0
 800063c:	d108      	bne.n	8000650 <__aeabi_d2lz+0x28>
 800063e:	0028      	movs	r0, r5
 8000640:	0021      	movs	r1, r4
 8000642:	f000 f80f 	bl	8000664 <__aeabi_d2ulz>
 8000646:	0002      	movs	r2, r0
 8000648:	000b      	movs	r3, r1
 800064a:	0010      	movs	r0, r2
 800064c:	0019      	movs	r1, r3
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	061b      	lsls	r3, r3, #24
 8000654:	18e1      	adds	r1, r4, r3
 8000656:	0028      	movs	r0, r5
 8000658:	f000 f804 	bl	8000664 <__aeabi_d2ulz>
 800065c:	2300      	movs	r3, #0
 800065e:	4242      	negs	r2, r0
 8000660:	418b      	sbcs	r3, r1
 8000662:	e7f2      	b.n	800064a <__aeabi_d2lz+0x22>

08000664 <__aeabi_d2ulz>:
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	2200      	movs	r2, #0
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <__aeabi_d2ulz+0x34>)
 800066a:	000d      	movs	r5, r1
 800066c:	0004      	movs	r4, r0
 800066e:	f001 fc65 	bl	8001f3c <__aeabi_dmul>
 8000672:	f7ff ffbb 	bl	80005ec <__aeabi_d2uiz>
 8000676:	0006      	movs	r6, r0
 8000678:	f002 fae2 	bl	8002c40 <__aeabi_ui2d>
 800067c:	2200      	movs	r2, #0
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <__aeabi_d2ulz+0x38>)
 8000680:	f001 fc5c 	bl	8001f3c <__aeabi_dmul>
 8000684:	0002      	movs	r2, r0
 8000686:	000b      	movs	r3, r1
 8000688:	0020      	movs	r0, r4
 800068a:	0029      	movs	r1, r5
 800068c:	f001 fec2 	bl	8002414 <__aeabi_dsub>
 8000690:	f7ff ffac 	bl	80005ec <__aeabi_d2uiz>
 8000694:	0031      	movs	r1, r6
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	3df00000 	.word	0x3df00000
 800069c:	41f00000 	.word	0x41f00000

080006a0 <__aeabi_l2d>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	0006      	movs	r6, r0
 80006a4:	0008      	movs	r0, r1
 80006a6:	f002 fa9b 	bl	8002be0 <__aeabi_i2d>
 80006aa:	2200      	movs	r2, #0
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <__aeabi_l2d+0x28>)
 80006ae:	f001 fc45 	bl	8001f3c <__aeabi_dmul>
 80006b2:	000d      	movs	r5, r1
 80006b4:	0004      	movs	r4, r0
 80006b6:	0030      	movs	r0, r6
 80006b8:	f002 fac2 	bl	8002c40 <__aeabi_ui2d>
 80006bc:	002b      	movs	r3, r5
 80006be:	0022      	movs	r2, r4
 80006c0:	f000 fccc 	bl	800105c <__aeabi_dadd>
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	41f00000 	.word	0x41f00000

080006cc <__udivmoddi4>:
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	4657      	mov	r7, sl
 80006d0:	464e      	mov	r6, r9
 80006d2:	4645      	mov	r5, r8
 80006d4:	46de      	mov	lr, fp
 80006d6:	b5e0      	push	{r5, r6, r7, lr}
 80006d8:	0004      	movs	r4, r0
 80006da:	000d      	movs	r5, r1
 80006dc:	4692      	mov	sl, r2
 80006de:	4699      	mov	r9, r3
 80006e0:	b083      	sub	sp, #12
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d830      	bhi.n	8000748 <__udivmoddi4+0x7c>
 80006e6:	d02d      	beq.n	8000744 <__udivmoddi4+0x78>
 80006e8:	4649      	mov	r1, r9
 80006ea:	4650      	mov	r0, sl
 80006ec:	f002 fbbc 	bl	8002e68 <__clzdi2>
 80006f0:	0029      	movs	r1, r5
 80006f2:	0006      	movs	r6, r0
 80006f4:	0020      	movs	r0, r4
 80006f6:	f002 fbb7 	bl	8002e68 <__clzdi2>
 80006fa:	1a33      	subs	r3, r6, r0
 80006fc:	4698      	mov	r8, r3
 80006fe:	3b20      	subs	r3, #32
 8000700:	469b      	mov	fp, r3
 8000702:	d433      	bmi.n	800076c <__udivmoddi4+0xa0>
 8000704:	465a      	mov	r2, fp
 8000706:	4653      	mov	r3, sl
 8000708:	4093      	lsls	r3, r2
 800070a:	4642      	mov	r2, r8
 800070c:	001f      	movs	r7, r3
 800070e:	4653      	mov	r3, sl
 8000710:	4093      	lsls	r3, r2
 8000712:	001e      	movs	r6, r3
 8000714:	42af      	cmp	r7, r5
 8000716:	d83a      	bhi.n	800078e <__udivmoddi4+0xc2>
 8000718:	42af      	cmp	r7, r5
 800071a:	d100      	bne.n	800071e <__udivmoddi4+0x52>
 800071c:	e078      	b.n	8000810 <__udivmoddi4+0x144>
 800071e:	465b      	mov	r3, fp
 8000720:	1ba4      	subs	r4, r4, r6
 8000722:	41bd      	sbcs	r5, r7
 8000724:	2b00      	cmp	r3, #0
 8000726:	da00      	bge.n	800072a <__udivmoddi4+0x5e>
 8000728:	e075      	b.n	8000816 <__udivmoddi4+0x14a>
 800072a:	2200      	movs	r2, #0
 800072c:	2300      	movs	r3, #0
 800072e:	9200      	str	r2, [sp, #0]
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	2301      	movs	r3, #1
 8000734:	465a      	mov	r2, fp
 8000736:	4093      	lsls	r3, r2
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	4642      	mov	r2, r8
 800073e:	4093      	lsls	r3, r2
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	e028      	b.n	8000796 <__udivmoddi4+0xca>
 8000744:	4282      	cmp	r2, r0
 8000746:	d9cf      	bls.n	80006e8 <__udivmoddi4+0x1c>
 8000748:	2200      	movs	r2, #0
 800074a:	2300      	movs	r3, #0
 800074c:	9200      	str	r2, [sp, #0]
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <__udivmoddi4+0x8e>
 8000756:	601c      	str	r4, [r3, #0]
 8000758:	605d      	str	r5, [r3, #4]
 800075a:	9800      	ldr	r0, [sp, #0]
 800075c:	9901      	ldr	r1, [sp, #4]
 800075e:	b003      	add	sp, #12
 8000760:	bcf0      	pop	{r4, r5, r6, r7}
 8000762:	46bb      	mov	fp, r7
 8000764:	46b2      	mov	sl, r6
 8000766:	46a9      	mov	r9, r5
 8000768:	46a0      	mov	r8, r4
 800076a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	1a9b      	subs	r3, r3, r2
 8000772:	4652      	mov	r2, sl
 8000774:	40da      	lsrs	r2, r3
 8000776:	4641      	mov	r1, r8
 8000778:	0013      	movs	r3, r2
 800077a:	464a      	mov	r2, r9
 800077c:	408a      	lsls	r2, r1
 800077e:	0017      	movs	r7, r2
 8000780:	4642      	mov	r2, r8
 8000782:	431f      	orrs	r7, r3
 8000784:	4653      	mov	r3, sl
 8000786:	4093      	lsls	r3, r2
 8000788:	001e      	movs	r6, r3
 800078a:	42af      	cmp	r7, r5
 800078c:	d9c4      	bls.n	8000718 <__udivmoddi4+0x4c>
 800078e:	2200      	movs	r2, #0
 8000790:	2300      	movs	r3, #0
 8000792:	9200      	str	r2, [sp, #0]
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	4643      	mov	r3, r8
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0d9      	beq.n	8000750 <__udivmoddi4+0x84>
 800079c:	07fb      	lsls	r3, r7, #31
 800079e:	0872      	lsrs	r2, r6, #1
 80007a0:	431a      	orrs	r2, r3
 80007a2:	4646      	mov	r6, r8
 80007a4:	087b      	lsrs	r3, r7, #1
 80007a6:	e00e      	b.n	80007c6 <__udivmoddi4+0xfa>
 80007a8:	42ab      	cmp	r3, r5
 80007aa:	d101      	bne.n	80007b0 <__udivmoddi4+0xe4>
 80007ac:	42a2      	cmp	r2, r4
 80007ae:	d80c      	bhi.n	80007ca <__udivmoddi4+0xfe>
 80007b0:	1aa4      	subs	r4, r4, r2
 80007b2:	419d      	sbcs	r5, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	1924      	adds	r4, r4, r4
 80007b8:	416d      	adcs	r5, r5
 80007ba:	2100      	movs	r1, #0
 80007bc:	3e01      	subs	r6, #1
 80007be:	1824      	adds	r4, r4, r0
 80007c0:	414d      	adcs	r5, r1
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d006      	beq.n	80007d4 <__udivmoddi4+0x108>
 80007c6:	42ab      	cmp	r3, r5
 80007c8:	d9ee      	bls.n	80007a8 <__udivmoddi4+0xdc>
 80007ca:	3e01      	subs	r6, #1
 80007cc:	1924      	adds	r4, r4, r4
 80007ce:	416d      	adcs	r5, r5
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d1f8      	bne.n	80007c6 <__udivmoddi4+0xfa>
 80007d4:	9800      	ldr	r0, [sp, #0]
 80007d6:	9901      	ldr	r1, [sp, #4]
 80007d8:	465b      	mov	r3, fp
 80007da:	1900      	adds	r0, r0, r4
 80007dc:	4169      	adcs	r1, r5
 80007de:	2b00      	cmp	r3, #0
 80007e0:	db24      	blt.n	800082c <__udivmoddi4+0x160>
 80007e2:	002b      	movs	r3, r5
 80007e4:	465a      	mov	r2, fp
 80007e6:	4644      	mov	r4, r8
 80007e8:	40d3      	lsrs	r3, r2
 80007ea:	002a      	movs	r2, r5
 80007ec:	40e2      	lsrs	r2, r4
 80007ee:	001c      	movs	r4, r3
 80007f0:	465b      	mov	r3, fp
 80007f2:	0015      	movs	r5, r2
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db2a      	blt.n	800084e <__udivmoddi4+0x182>
 80007f8:	0026      	movs	r6, r4
 80007fa:	409e      	lsls	r6, r3
 80007fc:	0033      	movs	r3, r6
 80007fe:	0026      	movs	r6, r4
 8000800:	4647      	mov	r7, r8
 8000802:	40be      	lsls	r6, r7
 8000804:	0032      	movs	r2, r6
 8000806:	1a80      	subs	r0, r0, r2
 8000808:	4199      	sbcs	r1, r3
 800080a:	9000      	str	r0, [sp, #0]
 800080c:	9101      	str	r1, [sp, #4]
 800080e:	e79f      	b.n	8000750 <__udivmoddi4+0x84>
 8000810:	42a3      	cmp	r3, r4
 8000812:	d8bc      	bhi.n	800078e <__udivmoddi4+0xc2>
 8000814:	e783      	b.n	800071e <__udivmoddi4+0x52>
 8000816:	4642      	mov	r2, r8
 8000818:	2320      	movs	r3, #32
 800081a:	2100      	movs	r1, #0
 800081c:	1a9b      	subs	r3, r3, r2
 800081e:	2200      	movs	r2, #0
 8000820:	9100      	str	r1, [sp, #0]
 8000822:	9201      	str	r2, [sp, #4]
 8000824:	2201      	movs	r2, #1
 8000826:	40da      	lsrs	r2, r3
 8000828:	9201      	str	r2, [sp, #4]
 800082a:	e786      	b.n	800073a <__udivmoddi4+0x6e>
 800082c:	4642      	mov	r2, r8
 800082e:	2320      	movs	r3, #32
 8000830:	1a9b      	subs	r3, r3, r2
 8000832:	002a      	movs	r2, r5
 8000834:	4646      	mov	r6, r8
 8000836:	409a      	lsls	r2, r3
 8000838:	0023      	movs	r3, r4
 800083a:	40f3      	lsrs	r3, r6
 800083c:	4644      	mov	r4, r8
 800083e:	4313      	orrs	r3, r2
 8000840:	002a      	movs	r2, r5
 8000842:	40e2      	lsrs	r2, r4
 8000844:	001c      	movs	r4, r3
 8000846:	465b      	mov	r3, fp
 8000848:	0015      	movs	r5, r2
 800084a:	2b00      	cmp	r3, #0
 800084c:	dad4      	bge.n	80007f8 <__udivmoddi4+0x12c>
 800084e:	4642      	mov	r2, r8
 8000850:	002f      	movs	r7, r5
 8000852:	2320      	movs	r3, #32
 8000854:	0026      	movs	r6, r4
 8000856:	4097      	lsls	r7, r2
 8000858:	1a9b      	subs	r3, r3, r2
 800085a:	40de      	lsrs	r6, r3
 800085c:	003b      	movs	r3, r7
 800085e:	4333      	orrs	r3, r6
 8000860:	e7cd      	b.n	80007fe <__udivmoddi4+0x132>
 8000862:	46c0      	nop			; (mov r8, r8)

08000864 <__eqsf2>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	0042      	lsls	r2, r0, #1
 8000868:	024e      	lsls	r6, r1, #9
 800086a:	004c      	lsls	r4, r1, #1
 800086c:	0245      	lsls	r5, r0, #9
 800086e:	0a6d      	lsrs	r5, r5, #9
 8000870:	0e12      	lsrs	r2, r2, #24
 8000872:	0fc3      	lsrs	r3, r0, #31
 8000874:	0a76      	lsrs	r6, r6, #9
 8000876:	0e24      	lsrs	r4, r4, #24
 8000878:	0fc9      	lsrs	r1, r1, #31
 800087a:	2aff      	cmp	r2, #255	; 0xff
 800087c:	d00f      	beq.n	800089e <__eqsf2+0x3a>
 800087e:	2cff      	cmp	r4, #255	; 0xff
 8000880:	d011      	beq.n	80008a6 <__eqsf2+0x42>
 8000882:	2001      	movs	r0, #1
 8000884:	42a2      	cmp	r2, r4
 8000886:	d000      	beq.n	800088a <__eqsf2+0x26>
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	42b5      	cmp	r5, r6
 800088c:	d1fc      	bne.n	8000888 <__eqsf2+0x24>
 800088e:	428b      	cmp	r3, r1
 8000890:	d00d      	beq.n	80008ae <__eqsf2+0x4a>
 8000892:	2a00      	cmp	r2, #0
 8000894:	d1f8      	bne.n	8000888 <__eqsf2+0x24>
 8000896:	0028      	movs	r0, r5
 8000898:	1e45      	subs	r5, r0, #1
 800089a:	41a8      	sbcs	r0, r5
 800089c:	e7f4      	b.n	8000888 <__eqsf2+0x24>
 800089e:	2001      	movs	r0, #1
 80008a0:	2d00      	cmp	r5, #0
 80008a2:	d1f1      	bne.n	8000888 <__eqsf2+0x24>
 80008a4:	e7eb      	b.n	800087e <__eqsf2+0x1a>
 80008a6:	2001      	movs	r0, #1
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	d1ed      	bne.n	8000888 <__eqsf2+0x24>
 80008ac:	e7e9      	b.n	8000882 <__eqsf2+0x1e>
 80008ae:	2000      	movs	r0, #0
 80008b0:	e7ea      	b.n	8000888 <__eqsf2+0x24>
 80008b2:	46c0      	nop			; (mov r8, r8)

080008b4 <__gesf2>:
 80008b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b6:	0042      	lsls	r2, r0, #1
 80008b8:	0246      	lsls	r6, r0, #9
 80008ba:	024d      	lsls	r5, r1, #9
 80008bc:	004c      	lsls	r4, r1, #1
 80008be:	0fc3      	lsrs	r3, r0, #31
 80008c0:	0a76      	lsrs	r6, r6, #9
 80008c2:	0e12      	lsrs	r2, r2, #24
 80008c4:	0a6d      	lsrs	r5, r5, #9
 80008c6:	0e24      	lsrs	r4, r4, #24
 80008c8:	0fc8      	lsrs	r0, r1, #31
 80008ca:	2aff      	cmp	r2, #255	; 0xff
 80008cc:	d01f      	beq.n	800090e <__gesf2+0x5a>
 80008ce:	2cff      	cmp	r4, #255	; 0xff
 80008d0:	d010      	beq.n	80008f4 <__gesf2+0x40>
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d11f      	bne.n	8000916 <__gesf2+0x62>
 80008d6:	4271      	negs	r1, r6
 80008d8:	4171      	adcs	r1, r6
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d101      	bne.n	80008e2 <__gesf2+0x2e>
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d01e      	beq.n	8000920 <__gesf2+0x6c>
 80008e2:	2900      	cmp	r1, #0
 80008e4:	d10e      	bne.n	8000904 <__gesf2+0x50>
 80008e6:	4283      	cmp	r3, r0
 80008e8:	d01e      	beq.n	8000928 <__gesf2+0x74>
 80008ea:	2102      	movs	r1, #2
 80008ec:	1e58      	subs	r0, r3, #1
 80008ee:	4008      	ands	r0, r1
 80008f0:	3801      	subs	r0, #1
 80008f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d126      	bne.n	8000946 <__gesf2+0x92>
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d1f4      	bne.n	80008e6 <__gesf2+0x32>
 80008fc:	4271      	negs	r1, r6
 80008fe:	4171      	adcs	r1, r6
 8000900:	2900      	cmp	r1, #0
 8000902:	d0f0      	beq.n	80008e6 <__gesf2+0x32>
 8000904:	2800      	cmp	r0, #0
 8000906:	d1f4      	bne.n	80008f2 <__gesf2+0x3e>
 8000908:	2001      	movs	r0, #1
 800090a:	4240      	negs	r0, r0
 800090c:	e7f1      	b.n	80008f2 <__gesf2+0x3e>
 800090e:	2e00      	cmp	r6, #0
 8000910:	d119      	bne.n	8000946 <__gesf2+0x92>
 8000912:	2cff      	cmp	r4, #255	; 0xff
 8000914:	d0ee      	beq.n	80008f4 <__gesf2+0x40>
 8000916:	2c00      	cmp	r4, #0
 8000918:	d1e5      	bne.n	80008e6 <__gesf2+0x32>
 800091a:	2d00      	cmp	r5, #0
 800091c:	d1e3      	bne.n	80008e6 <__gesf2+0x32>
 800091e:	e7e4      	b.n	80008ea <__gesf2+0x36>
 8000920:	2000      	movs	r0, #0
 8000922:	2e00      	cmp	r6, #0
 8000924:	d0e5      	beq.n	80008f2 <__gesf2+0x3e>
 8000926:	e7e0      	b.n	80008ea <__gesf2+0x36>
 8000928:	42a2      	cmp	r2, r4
 800092a:	dc05      	bgt.n	8000938 <__gesf2+0x84>
 800092c:	dbea      	blt.n	8000904 <__gesf2+0x50>
 800092e:	42ae      	cmp	r6, r5
 8000930:	d802      	bhi.n	8000938 <__gesf2+0x84>
 8000932:	d3e7      	bcc.n	8000904 <__gesf2+0x50>
 8000934:	2000      	movs	r0, #0
 8000936:	e7dc      	b.n	80008f2 <__gesf2+0x3e>
 8000938:	4241      	negs	r1, r0
 800093a:	4141      	adcs	r1, r0
 800093c:	4248      	negs	r0, r1
 800093e:	2102      	movs	r1, #2
 8000940:	4008      	ands	r0, r1
 8000942:	3801      	subs	r0, #1
 8000944:	e7d5      	b.n	80008f2 <__gesf2+0x3e>
 8000946:	2002      	movs	r0, #2
 8000948:	4240      	negs	r0, r0
 800094a:	e7d2      	b.n	80008f2 <__gesf2+0x3e>

0800094c <__lesf2>:
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	0042      	lsls	r2, r0, #1
 8000950:	0246      	lsls	r6, r0, #9
 8000952:	024d      	lsls	r5, r1, #9
 8000954:	004c      	lsls	r4, r1, #1
 8000956:	0fc3      	lsrs	r3, r0, #31
 8000958:	0a76      	lsrs	r6, r6, #9
 800095a:	0e12      	lsrs	r2, r2, #24
 800095c:	0a6d      	lsrs	r5, r5, #9
 800095e:	0e24      	lsrs	r4, r4, #24
 8000960:	0fc8      	lsrs	r0, r1, #31
 8000962:	2aff      	cmp	r2, #255	; 0xff
 8000964:	d00d      	beq.n	8000982 <__lesf2+0x36>
 8000966:	2cff      	cmp	r4, #255	; 0xff
 8000968:	d00f      	beq.n	800098a <__lesf2+0x3e>
 800096a:	2a00      	cmp	r2, #0
 800096c:	d123      	bne.n	80009b6 <__lesf2+0x6a>
 800096e:	4271      	negs	r1, r6
 8000970:	4171      	adcs	r1, r6
 8000972:	2c00      	cmp	r4, #0
 8000974:	d10f      	bne.n	8000996 <__lesf2+0x4a>
 8000976:	2d00      	cmp	r5, #0
 8000978:	d10d      	bne.n	8000996 <__lesf2+0x4a>
 800097a:	2000      	movs	r0, #0
 800097c:	2e00      	cmp	r6, #0
 800097e:	d014      	beq.n	80009aa <__lesf2+0x5e>
 8000980:	e00d      	b.n	800099e <__lesf2+0x52>
 8000982:	2e00      	cmp	r6, #0
 8000984:	d110      	bne.n	80009a8 <__lesf2+0x5c>
 8000986:	2cff      	cmp	r4, #255	; 0xff
 8000988:	d115      	bne.n	80009b6 <__lesf2+0x6a>
 800098a:	2d00      	cmp	r5, #0
 800098c:	d10c      	bne.n	80009a8 <__lesf2+0x5c>
 800098e:	2a00      	cmp	r2, #0
 8000990:	d103      	bne.n	800099a <__lesf2+0x4e>
 8000992:	4271      	negs	r1, r6
 8000994:	4171      	adcs	r1, r6
 8000996:	2900      	cmp	r1, #0
 8000998:	d108      	bne.n	80009ac <__lesf2+0x60>
 800099a:	4283      	cmp	r3, r0
 800099c:	d010      	beq.n	80009c0 <__lesf2+0x74>
 800099e:	2102      	movs	r1, #2
 80009a0:	1e58      	subs	r0, r3, #1
 80009a2:	4008      	ands	r0, r1
 80009a4:	3801      	subs	r0, #1
 80009a6:	e000      	b.n	80009aa <__lesf2+0x5e>
 80009a8:	2002      	movs	r0, #2
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d1fc      	bne.n	80009aa <__lesf2+0x5e>
 80009b0:	2001      	movs	r0, #1
 80009b2:	4240      	negs	r0, r0
 80009b4:	e7f9      	b.n	80009aa <__lesf2+0x5e>
 80009b6:	2c00      	cmp	r4, #0
 80009b8:	d1ef      	bne.n	800099a <__lesf2+0x4e>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d1ed      	bne.n	800099a <__lesf2+0x4e>
 80009be:	e7ee      	b.n	800099e <__lesf2+0x52>
 80009c0:	42a2      	cmp	r2, r4
 80009c2:	dc05      	bgt.n	80009d0 <__lesf2+0x84>
 80009c4:	dbf2      	blt.n	80009ac <__lesf2+0x60>
 80009c6:	42ae      	cmp	r6, r5
 80009c8:	d802      	bhi.n	80009d0 <__lesf2+0x84>
 80009ca:	d3ef      	bcc.n	80009ac <__lesf2+0x60>
 80009cc:	2000      	movs	r0, #0
 80009ce:	e7ec      	b.n	80009aa <__lesf2+0x5e>
 80009d0:	4241      	negs	r1, r0
 80009d2:	4141      	adcs	r1, r0
 80009d4:	4248      	negs	r0, r1
 80009d6:	2102      	movs	r1, #2
 80009d8:	4008      	ands	r0, r1
 80009da:	3801      	subs	r0, #1
 80009dc:	e7e5      	b.n	80009aa <__lesf2+0x5e>
 80009de:	46c0      	nop			; (mov r8, r8)

080009e0 <__aeabi_fmul>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	4657      	mov	r7, sl
 80009e4:	464e      	mov	r6, r9
 80009e6:	4645      	mov	r5, r8
 80009e8:	46de      	mov	lr, fp
 80009ea:	0244      	lsls	r4, r0, #9
 80009ec:	b5e0      	push	{r5, r6, r7, lr}
 80009ee:	0045      	lsls	r5, r0, #1
 80009f0:	1c0f      	adds	r7, r1, #0
 80009f2:	0a64      	lsrs	r4, r4, #9
 80009f4:	0e2d      	lsrs	r5, r5, #24
 80009f6:	0fc6      	lsrs	r6, r0, #31
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d047      	beq.n	8000a8c <__aeabi_fmul+0xac>
 80009fc:	2dff      	cmp	r5, #255	; 0xff
 80009fe:	d04d      	beq.n	8000a9c <__aeabi_fmul+0xbc>
 8000a00:	2300      	movs	r3, #0
 8000a02:	2080      	movs	r0, #128	; 0x80
 8000a04:	469a      	mov	sl, r3
 8000a06:	469b      	mov	fp, r3
 8000a08:	00e4      	lsls	r4, r4, #3
 8000a0a:	04c0      	lsls	r0, r0, #19
 8000a0c:	4304      	orrs	r4, r0
 8000a0e:	3d7f      	subs	r5, #127	; 0x7f
 8000a10:	0278      	lsls	r0, r7, #9
 8000a12:	0a43      	lsrs	r3, r0, #9
 8000a14:	4699      	mov	r9, r3
 8000a16:	007a      	lsls	r2, r7, #1
 8000a18:	0ffb      	lsrs	r3, r7, #31
 8000a1a:	4698      	mov	r8, r3
 8000a1c:	0e12      	lsrs	r2, r2, #24
 8000a1e:	464b      	mov	r3, r9
 8000a20:	d044      	beq.n	8000aac <__aeabi_fmul+0xcc>
 8000a22:	2aff      	cmp	r2, #255	; 0xff
 8000a24:	d011      	beq.n	8000a4a <__aeabi_fmul+0x6a>
 8000a26:	00d8      	lsls	r0, r3, #3
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	04db      	lsls	r3, r3, #19
 8000a2c:	4303      	orrs	r3, r0
 8000a2e:	4699      	mov	r9, r3
 8000a30:	2000      	movs	r0, #0
 8000a32:	3a7f      	subs	r2, #127	; 0x7f
 8000a34:	18ad      	adds	r5, r5, r2
 8000a36:	4647      	mov	r7, r8
 8000a38:	4653      	mov	r3, sl
 8000a3a:	4077      	eors	r7, r6
 8000a3c:	1c69      	adds	r1, r5, #1
 8000a3e:	2b0f      	cmp	r3, #15
 8000a40:	d83f      	bhi.n	8000ac2 <__aeabi_fmul+0xe2>
 8000a42:	4a72      	ldr	r2, [pc, #456]	; (8000c0c <__aeabi_fmul+0x22c>)
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	58d3      	ldr	r3, [r2, r3]
 8000a48:	469f      	mov	pc, r3
 8000a4a:	35ff      	adds	r5, #255	; 0xff
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_fmul+0x72>
 8000a50:	e079      	b.n	8000b46 <__aeabi_fmul+0x166>
 8000a52:	4652      	mov	r2, sl
 8000a54:	2302      	movs	r3, #2
 8000a56:	431a      	orrs	r2, r3
 8000a58:	4692      	mov	sl, r2
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	e7eb      	b.n	8000a36 <__aeabi_fmul+0x56>
 8000a5e:	4647      	mov	r7, r8
 8000a60:	464c      	mov	r4, r9
 8000a62:	4683      	mov	fp, r0
 8000a64:	465b      	mov	r3, fp
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d028      	beq.n	8000abc <__aeabi_fmul+0xdc>
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fmul+0x90>
 8000a6e:	e0c6      	b.n	8000bfe <__aeabi_fmul+0x21e>
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d14f      	bne.n	8000b14 <__aeabi_fmul+0x134>
 8000a74:	2000      	movs	r0, #0
 8000a76:	2400      	movs	r4, #0
 8000a78:	05c0      	lsls	r0, r0, #23
 8000a7a:	07ff      	lsls	r7, r7, #31
 8000a7c:	4320      	orrs	r0, r4
 8000a7e:	4338      	orrs	r0, r7
 8000a80:	bcf0      	pop	{r4, r5, r6, r7}
 8000a82:	46bb      	mov	fp, r7
 8000a84:	46b2      	mov	sl, r6
 8000a86:	46a9      	mov	r9, r5
 8000a88:	46a0      	mov	r8, r4
 8000a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a8c:	2c00      	cmp	r4, #0
 8000a8e:	d171      	bne.n	8000b74 <__aeabi_fmul+0x194>
 8000a90:	2304      	movs	r3, #4
 8000a92:	469a      	mov	sl, r3
 8000a94:	3b03      	subs	r3, #3
 8000a96:	2500      	movs	r5, #0
 8000a98:	469b      	mov	fp, r3
 8000a9a:	e7b9      	b.n	8000a10 <__aeabi_fmul+0x30>
 8000a9c:	2c00      	cmp	r4, #0
 8000a9e:	d163      	bne.n	8000b68 <__aeabi_fmul+0x188>
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	469a      	mov	sl, r3
 8000aa4:	3b06      	subs	r3, #6
 8000aa6:	25ff      	movs	r5, #255	; 0xff
 8000aa8:	469b      	mov	fp, r3
 8000aaa:	e7b1      	b.n	8000a10 <__aeabi_fmul+0x30>
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d150      	bne.n	8000b52 <__aeabi_fmul+0x172>
 8000ab0:	4652      	mov	r2, sl
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	4692      	mov	sl, r2
 8000ab8:	2001      	movs	r0, #1
 8000aba:	e7bc      	b.n	8000a36 <__aeabi_fmul+0x56>
 8000abc:	20ff      	movs	r0, #255	; 0xff
 8000abe:	2400      	movs	r4, #0
 8000ac0:	e7da      	b.n	8000a78 <__aeabi_fmul+0x98>
 8000ac2:	4648      	mov	r0, r9
 8000ac4:	0c26      	lsrs	r6, r4, #16
 8000ac6:	0424      	lsls	r4, r4, #16
 8000ac8:	0c22      	lsrs	r2, r4, #16
 8000aca:	0404      	lsls	r4, r0, #16
 8000acc:	0c24      	lsrs	r4, r4, #16
 8000ace:	464b      	mov	r3, r9
 8000ad0:	0020      	movs	r0, r4
 8000ad2:	0c1b      	lsrs	r3, r3, #16
 8000ad4:	4350      	muls	r0, r2
 8000ad6:	4374      	muls	r4, r6
 8000ad8:	435a      	muls	r2, r3
 8000ada:	435e      	muls	r6, r3
 8000adc:	1912      	adds	r2, r2, r4
 8000ade:	0c03      	lsrs	r3, r0, #16
 8000ae0:	189b      	adds	r3, r3, r2
 8000ae2:	429c      	cmp	r4, r3
 8000ae4:	d903      	bls.n	8000aee <__aeabi_fmul+0x10e>
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	0252      	lsls	r2, r2, #9
 8000aea:	4694      	mov	ip, r2
 8000aec:	4466      	add	r6, ip
 8000aee:	0400      	lsls	r0, r0, #16
 8000af0:	041a      	lsls	r2, r3, #16
 8000af2:	0c00      	lsrs	r0, r0, #16
 8000af4:	1812      	adds	r2, r2, r0
 8000af6:	0194      	lsls	r4, r2, #6
 8000af8:	1e60      	subs	r0, r4, #1
 8000afa:	4184      	sbcs	r4, r0
 8000afc:	0c1b      	lsrs	r3, r3, #16
 8000afe:	0e92      	lsrs	r2, r2, #26
 8000b00:	199b      	adds	r3, r3, r6
 8000b02:	4314      	orrs	r4, r2
 8000b04:	019b      	lsls	r3, r3, #6
 8000b06:	431c      	orrs	r4, r3
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	d572      	bpl.n	8000bf2 <__aeabi_fmul+0x212>
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	0863      	lsrs	r3, r4, #1
 8000b10:	4004      	ands	r4, r0
 8000b12:	431c      	orrs	r4, r3
 8000b14:	0008      	movs	r0, r1
 8000b16:	307f      	adds	r0, #127	; 0x7f
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	dd3c      	ble.n	8000b96 <__aeabi_fmul+0x1b6>
 8000b1c:	0763      	lsls	r3, r4, #29
 8000b1e:	d004      	beq.n	8000b2a <__aeabi_fmul+0x14a>
 8000b20:	230f      	movs	r3, #15
 8000b22:	4023      	ands	r3, r4
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d000      	beq.n	8000b2a <__aeabi_fmul+0x14a>
 8000b28:	3404      	adds	r4, #4
 8000b2a:	0123      	lsls	r3, r4, #4
 8000b2c:	d503      	bpl.n	8000b36 <__aeabi_fmul+0x156>
 8000b2e:	3180      	adds	r1, #128	; 0x80
 8000b30:	0008      	movs	r0, r1
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <__aeabi_fmul+0x230>)
 8000b34:	401c      	ands	r4, r3
 8000b36:	28fe      	cmp	r0, #254	; 0xfe
 8000b38:	dcc0      	bgt.n	8000abc <__aeabi_fmul+0xdc>
 8000b3a:	01a4      	lsls	r4, r4, #6
 8000b3c:	0a64      	lsrs	r4, r4, #9
 8000b3e:	b2c0      	uxtb	r0, r0
 8000b40:	e79a      	b.n	8000a78 <__aeabi_fmul+0x98>
 8000b42:	0037      	movs	r7, r6
 8000b44:	e78e      	b.n	8000a64 <__aeabi_fmul+0x84>
 8000b46:	4652      	mov	r2, sl
 8000b48:	2303      	movs	r3, #3
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	4692      	mov	sl, r2
 8000b4e:	2003      	movs	r0, #3
 8000b50:	e771      	b.n	8000a36 <__aeabi_fmul+0x56>
 8000b52:	4648      	mov	r0, r9
 8000b54:	f002 f96a 	bl	8002e2c <__clzsi2>
 8000b58:	464a      	mov	r2, r9
 8000b5a:	1f43      	subs	r3, r0, #5
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	1a2d      	subs	r5, r5, r0
 8000b60:	4691      	mov	r9, r2
 8000b62:	2000      	movs	r0, #0
 8000b64:	3d76      	subs	r5, #118	; 0x76
 8000b66:	e766      	b.n	8000a36 <__aeabi_fmul+0x56>
 8000b68:	230c      	movs	r3, #12
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	3b09      	subs	r3, #9
 8000b6e:	25ff      	movs	r5, #255	; 0xff
 8000b70:	469b      	mov	fp, r3
 8000b72:	e74d      	b.n	8000a10 <__aeabi_fmul+0x30>
 8000b74:	0020      	movs	r0, r4
 8000b76:	f002 f959 	bl	8002e2c <__clzsi2>
 8000b7a:	2576      	movs	r5, #118	; 0x76
 8000b7c:	1f43      	subs	r3, r0, #5
 8000b7e:	409c      	lsls	r4, r3
 8000b80:	2300      	movs	r3, #0
 8000b82:	426d      	negs	r5, r5
 8000b84:	469a      	mov	sl, r3
 8000b86:	469b      	mov	fp, r3
 8000b88:	1a2d      	subs	r5, r5, r0
 8000b8a:	e741      	b.n	8000a10 <__aeabi_fmul+0x30>
 8000b8c:	2480      	movs	r4, #128	; 0x80
 8000b8e:	2700      	movs	r7, #0
 8000b90:	20ff      	movs	r0, #255	; 0xff
 8000b92:	03e4      	lsls	r4, r4, #15
 8000b94:	e770      	b.n	8000a78 <__aeabi_fmul+0x98>
 8000b96:	2301      	movs	r3, #1
 8000b98:	1a1b      	subs	r3, r3, r0
 8000b9a:	2b1b      	cmp	r3, #27
 8000b9c:	dd00      	ble.n	8000ba0 <__aeabi_fmul+0x1c0>
 8000b9e:	e769      	b.n	8000a74 <__aeabi_fmul+0x94>
 8000ba0:	319e      	adds	r1, #158	; 0x9e
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	408c      	lsls	r4, r1
 8000ba6:	40d8      	lsrs	r0, r3
 8000ba8:	1e63      	subs	r3, r4, #1
 8000baa:	419c      	sbcs	r4, r3
 8000bac:	4304      	orrs	r4, r0
 8000bae:	0763      	lsls	r3, r4, #29
 8000bb0:	d004      	beq.n	8000bbc <__aeabi_fmul+0x1dc>
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	4023      	ands	r3, r4
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_fmul+0x1dc>
 8000bba:	3404      	adds	r4, #4
 8000bbc:	0163      	lsls	r3, r4, #5
 8000bbe:	d51a      	bpl.n	8000bf6 <__aeabi_fmul+0x216>
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	2400      	movs	r4, #0
 8000bc4:	e758      	b.n	8000a78 <__aeabi_fmul+0x98>
 8000bc6:	2080      	movs	r0, #128	; 0x80
 8000bc8:	03c0      	lsls	r0, r0, #15
 8000bca:	4204      	tst	r4, r0
 8000bcc:	d009      	beq.n	8000be2 <__aeabi_fmul+0x202>
 8000bce:	464b      	mov	r3, r9
 8000bd0:	4203      	tst	r3, r0
 8000bd2:	d106      	bne.n	8000be2 <__aeabi_fmul+0x202>
 8000bd4:	464c      	mov	r4, r9
 8000bd6:	4304      	orrs	r4, r0
 8000bd8:	0264      	lsls	r4, r4, #9
 8000bda:	4647      	mov	r7, r8
 8000bdc:	20ff      	movs	r0, #255	; 0xff
 8000bde:	0a64      	lsrs	r4, r4, #9
 8000be0:	e74a      	b.n	8000a78 <__aeabi_fmul+0x98>
 8000be2:	2080      	movs	r0, #128	; 0x80
 8000be4:	03c0      	lsls	r0, r0, #15
 8000be6:	4304      	orrs	r4, r0
 8000be8:	0264      	lsls	r4, r4, #9
 8000bea:	0037      	movs	r7, r6
 8000bec:	20ff      	movs	r0, #255	; 0xff
 8000bee:	0a64      	lsrs	r4, r4, #9
 8000bf0:	e742      	b.n	8000a78 <__aeabi_fmul+0x98>
 8000bf2:	0029      	movs	r1, r5
 8000bf4:	e78e      	b.n	8000b14 <__aeabi_fmul+0x134>
 8000bf6:	01a4      	lsls	r4, r4, #6
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	0a64      	lsrs	r4, r4, #9
 8000bfc:	e73c      	b.n	8000a78 <__aeabi_fmul+0x98>
 8000bfe:	2080      	movs	r0, #128	; 0x80
 8000c00:	03c0      	lsls	r0, r0, #15
 8000c02:	4304      	orrs	r4, r0
 8000c04:	0264      	lsls	r4, r4, #9
 8000c06:	20ff      	movs	r0, #255	; 0xff
 8000c08:	0a64      	lsrs	r4, r4, #9
 8000c0a:	e735      	b.n	8000a78 <__aeabi_fmul+0x98>
 8000c0c:	0801a410 	.word	0x0801a410
 8000c10:	f7ffffff 	.word	0xf7ffffff

08000c14 <__aeabi_fsub>:
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c16:	4646      	mov	r6, r8
 8000c18:	46d6      	mov	lr, sl
 8000c1a:	464f      	mov	r7, r9
 8000c1c:	0243      	lsls	r3, r0, #9
 8000c1e:	0a5b      	lsrs	r3, r3, #9
 8000c20:	00da      	lsls	r2, r3, #3
 8000c22:	4694      	mov	ip, r2
 8000c24:	024a      	lsls	r2, r1, #9
 8000c26:	b5c0      	push	{r6, r7, lr}
 8000c28:	0044      	lsls	r4, r0, #1
 8000c2a:	0a56      	lsrs	r6, r2, #9
 8000c2c:	1c05      	adds	r5, r0, #0
 8000c2e:	46b0      	mov	r8, r6
 8000c30:	0e24      	lsrs	r4, r4, #24
 8000c32:	004e      	lsls	r6, r1, #1
 8000c34:	0992      	lsrs	r2, r2, #6
 8000c36:	001f      	movs	r7, r3
 8000c38:	0020      	movs	r0, r4
 8000c3a:	4692      	mov	sl, r2
 8000c3c:	0fed      	lsrs	r5, r5, #31
 8000c3e:	0e36      	lsrs	r6, r6, #24
 8000c40:	0fc9      	lsrs	r1, r1, #31
 8000c42:	2eff      	cmp	r6, #255	; 0xff
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fsub+0x34>
 8000c46:	e07f      	b.n	8000d48 <__aeabi_fsub+0x134>
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4051      	eors	r1, r2
 8000c4c:	428d      	cmp	r5, r1
 8000c4e:	d051      	beq.n	8000cf4 <__aeabi_fsub+0xe0>
 8000c50:	1ba2      	subs	r2, r4, r6
 8000c52:	4691      	mov	r9, r2
 8000c54:	2a00      	cmp	r2, #0
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_fsub+0x46>
 8000c58:	e07e      	b.n	8000d58 <__aeabi_fsub+0x144>
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_fsub+0x4c>
 8000c5e:	e099      	b.n	8000d94 <__aeabi_fsub+0x180>
 8000c60:	2cff      	cmp	r4, #255	; 0xff
 8000c62:	d100      	bne.n	8000c66 <__aeabi_fsub+0x52>
 8000c64:	e08c      	b.n	8000d80 <__aeabi_fsub+0x16c>
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	4652      	mov	r2, sl
 8000c6a:	04db      	lsls	r3, r3, #19
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	4692      	mov	sl, r2
 8000c70:	464a      	mov	r2, r9
 8000c72:	2301      	movs	r3, #1
 8000c74:	2a1b      	cmp	r2, #27
 8000c76:	dc08      	bgt.n	8000c8a <__aeabi_fsub+0x76>
 8000c78:	4653      	mov	r3, sl
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	40d3      	lsrs	r3, r2
 8000c7e:	1a89      	subs	r1, r1, r2
 8000c80:	4652      	mov	r2, sl
 8000c82:	408a      	lsls	r2, r1
 8000c84:	1e51      	subs	r1, r2, #1
 8000c86:	418a      	sbcs	r2, r1
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	4662      	mov	r2, ip
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	015a      	lsls	r2, r3, #5
 8000c90:	d400      	bmi.n	8000c94 <__aeabi_fsub+0x80>
 8000c92:	e0f3      	b.n	8000e7c <__aeabi_fsub+0x268>
 8000c94:	019b      	lsls	r3, r3, #6
 8000c96:	099e      	lsrs	r6, r3, #6
 8000c98:	0030      	movs	r0, r6
 8000c9a:	f002 f8c7 	bl	8002e2c <__clzsi2>
 8000c9e:	3805      	subs	r0, #5
 8000ca0:	4086      	lsls	r6, r0
 8000ca2:	4284      	cmp	r4, r0
 8000ca4:	dd00      	ble.n	8000ca8 <__aeabi_fsub+0x94>
 8000ca6:	e0f7      	b.n	8000e98 <__aeabi_fsub+0x284>
 8000ca8:	0032      	movs	r2, r6
 8000caa:	1b04      	subs	r4, r0, r4
 8000cac:	2020      	movs	r0, #32
 8000cae:	3401      	adds	r4, #1
 8000cb0:	40e2      	lsrs	r2, r4
 8000cb2:	1b04      	subs	r4, r0, r4
 8000cb4:	40a6      	lsls	r6, r4
 8000cb6:	0033      	movs	r3, r6
 8000cb8:	1e5e      	subs	r6, r3, #1
 8000cba:	41b3      	sbcs	r3, r6
 8000cbc:	2400      	movs	r4, #0
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	075a      	lsls	r2, r3, #29
 8000cc2:	d004      	beq.n	8000cce <__aeabi_fsub+0xba>
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	2a04      	cmp	r2, #4
 8000cca:	d000      	beq.n	8000cce <__aeabi_fsub+0xba>
 8000ccc:	3304      	adds	r3, #4
 8000cce:	015a      	lsls	r2, r3, #5
 8000cd0:	d400      	bmi.n	8000cd4 <__aeabi_fsub+0xc0>
 8000cd2:	e0d6      	b.n	8000e82 <__aeabi_fsub+0x26e>
 8000cd4:	1c62      	adds	r2, r4, #1
 8000cd6:	2cfe      	cmp	r4, #254	; 0xfe
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0xc8>
 8000cda:	e0da      	b.n	8000e92 <__aeabi_fsub+0x27e>
 8000cdc:	019b      	lsls	r3, r3, #6
 8000cde:	0a5f      	lsrs	r7, r3, #9
 8000ce0:	b2d0      	uxtb	r0, r2
 8000ce2:	05c0      	lsls	r0, r0, #23
 8000ce4:	4338      	orrs	r0, r7
 8000ce6:	07ed      	lsls	r5, r5, #31
 8000ce8:	4328      	orrs	r0, r5
 8000cea:	bce0      	pop	{r5, r6, r7}
 8000cec:	46ba      	mov	sl, r7
 8000cee:	46b1      	mov	r9, r6
 8000cf0:	46a8      	mov	r8, r5
 8000cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf4:	1ba2      	subs	r2, r4, r6
 8000cf6:	4691      	mov	r9, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	dd63      	ble.n	8000dc4 <__aeabi_fsub+0x1b0>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_fsub+0xee>
 8000d00:	e099      	b.n	8000e36 <__aeabi_fsub+0x222>
 8000d02:	2cff      	cmp	r4, #255	; 0xff
 8000d04:	d03c      	beq.n	8000d80 <__aeabi_fsub+0x16c>
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	4652      	mov	r2, sl
 8000d0a:	04db      	lsls	r3, r3, #19
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	4692      	mov	sl, r2
 8000d10:	464a      	mov	r2, r9
 8000d12:	2301      	movs	r3, #1
 8000d14:	2a1b      	cmp	r2, #27
 8000d16:	dc08      	bgt.n	8000d2a <__aeabi_fsub+0x116>
 8000d18:	4653      	mov	r3, sl
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	40d3      	lsrs	r3, r2
 8000d1e:	1a89      	subs	r1, r1, r2
 8000d20:	4652      	mov	r2, sl
 8000d22:	408a      	lsls	r2, r1
 8000d24:	1e51      	subs	r1, r2, #1
 8000d26:	418a      	sbcs	r2, r1
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	015a      	lsls	r2, r3, #5
 8000d2e:	d400      	bmi.n	8000d32 <__aeabi_fsub+0x11e>
 8000d30:	e0a4      	b.n	8000e7c <__aeabi_fsub+0x268>
 8000d32:	3401      	adds	r4, #1
 8000d34:	2cff      	cmp	r4, #255	; 0xff
 8000d36:	d100      	bne.n	8000d3a <__aeabi_fsub+0x126>
 8000d38:	e0ab      	b.n	8000e92 <__aeabi_fsub+0x27e>
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4997      	ldr	r1, [pc, #604]	; (8000f9c <__aeabi_fsub+0x388>)
 8000d3e:	401a      	ands	r2, r3
 8000d40:	085b      	lsrs	r3, r3, #1
 8000d42:	400b      	ands	r3, r1
 8000d44:	4313      	orrs	r3, r2
 8000d46:	e7bb      	b.n	8000cc0 <__aeabi_fsub+0xac>
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d032      	beq.n	8000db2 <__aeabi_fsub+0x19e>
 8000d4c:	428d      	cmp	r5, r1
 8000d4e:	d035      	beq.n	8000dbc <__aeabi_fsub+0x1a8>
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	4252      	negs	r2, r2
 8000d54:	4691      	mov	r9, r2
 8000d56:	44a1      	add	r9, r4
 8000d58:	464a      	mov	r2, r9
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d051      	beq.n	8000e02 <__aeabi_fsub+0x1ee>
 8000d5e:	1b30      	subs	r0, r6, r4
 8000d60:	2c00      	cmp	r4, #0
 8000d62:	d000      	beq.n	8000d66 <__aeabi_fsub+0x152>
 8000d64:	e09c      	b.n	8000ea0 <__aeabi_fsub+0x28c>
 8000d66:	4663      	mov	r3, ip
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_fsub+0x15a>
 8000d6c:	e0df      	b.n	8000f2e <__aeabi_fsub+0x31a>
 8000d6e:	3801      	subs	r0, #1
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d100      	bne.n	8000d76 <__aeabi_fsub+0x162>
 8000d74:	e0f7      	b.n	8000f66 <__aeabi_fsub+0x352>
 8000d76:	2eff      	cmp	r6, #255	; 0xff
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fsub+0x168>
 8000d7a:	e099      	b.n	8000eb0 <__aeabi_fsub+0x29c>
 8000d7c:	000d      	movs	r5, r1
 8000d7e:	4643      	mov	r3, r8
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d100      	bne.n	8000d86 <__aeabi_fsub+0x172>
 8000d84:	e085      	b.n	8000e92 <__aeabi_fsub+0x27e>
 8000d86:	2780      	movs	r7, #128	; 0x80
 8000d88:	03ff      	lsls	r7, r7, #15
 8000d8a:	431f      	orrs	r7, r3
 8000d8c:	027f      	lsls	r7, r7, #9
 8000d8e:	20ff      	movs	r0, #255	; 0xff
 8000d90:	0a7f      	lsrs	r7, r7, #9
 8000d92:	e7a6      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000d94:	4652      	mov	r2, sl
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d074      	beq.n	8000e84 <__aeabi_fsub+0x270>
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4252      	negs	r2, r2
 8000d9e:	4690      	mov	r8, r2
 8000da0:	44c1      	add	r9, r8
 8000da2:	464a      	mov	r2, r9
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	d100      	bne.n	8000daa <__aeabi_fsub+0x196>
 8000da8:	e0c8      	b.n	8000f3c <__aeabi_fsub+0x328>
 8000daa:	2cff      	cmp	r4, #255	; 0xff
 8000dac:	d000      	beq.n	8000db0 <__aeabi_fsub+0x19c>
 8000dae:	e75f      	b.n	8000c70 <__aeabi_fsub+0x5c>
 8000db0:	e7e6      	b.n	8000d80 <__aeabi_fsub+0x16c>
 8000db2:	2201      	movs	r2, #1
 8000db4:	4051      	eors	r1, r2
 8000db6:	42a9      	cmp	r1, r5
 8000db8:	d000      	beq.n	8000dbc <__aeabi_fsub+0x1a8>
 8000dba:	e749      	b.n	8000c50 <__aeabi_fsub+0x3c>
 8000dbc:	22ff      	movs	r2, #255	; 0xff
 8000dbe:	4252      	negs	r2, r2
 8000dc0:	4691      	mov	r9, r2
 8000dc2:	44a1      	add	r9, r4
 8000dc4:	464a      	mov	r2, r9
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d043      	beq.n	8000e52 <__aeabi_fsub+0x23e>
 8000dca:	1b31      	subs	r1, r6, r4
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_fsub+0x1be>
 8000dd0:	e08c      	b.n	8000eec <__aeabi_fsub+0x2d8>
 8000dd2:	2eff      	cmp	r6, #255	; 0xff
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_fsub+0x1c4>
 8000dd6:	e092      	b.n	8000efe <__aeabi_fsub+0x2ea>
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	4662      	mov	r2, ip
 8000ddc:	04db      	lsls	r3, r3, #19
 8000dde:	431a      	orrs	r2, r3
 8000de0:	4694      	mov	ip, r2
 8000de2:	2301      	movs	r3, #1
 8000de4:	291b      	cmp	r1, #27
 8000de6:	dc09      	bgt.n	8000dfc <__aeabi_fsub+0x1e8>
 8000de8:	2020      	movs	r0, #32
 8000dea:	4663      	mov	r3, ip
 8000dec:	4662      	mov	r2, ip
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	1a41      	subs	r1, r0, r1
 8000df2:	408a      	lsls	r2, r1
 8000df4:	0011      	movs	r1, r2
 8000df6:	1e48      	subs	r0, r1, #1
 8000df8:	4181      	sbcs	r1, r0
 8000dfa:	430b      	orrs	r3, r1
 8000dfc:	0034      	movs	r4, r6
 8000dfe:	4453      	add	r3, sl
 8000e00:	e794      	b.n	8000d2c <__aeabi_fsub+0x118>
 8000e02:	22fe      	movs	r2, #254	; 0xfe
 8000e04:	1c66      	adds	r6, r4, #1
 8000e06:	4232      	tst	r2, r6
 8000e08:	d164      	bne.n	8000ed4 <__aeabi_fsub+0x2c0>
 8000e0a:	2c00      	cmp	r4, #0
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_fsub+0x1fc>
 8000e0e:	e082      	b.n	8000f16 <__aeabi_fsub+0x302>
 8000e10:	4663      	mov	r3, ip
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fsub+0x204>
 8000e16:	e0ab      	b.n	8000f70 <__aeabi_fsub+0x35c>
 8000e18:	4653      	mov	r3, sl
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_fsub+0x20c>
 8000e1e:	e760      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000e20:	4663      	mov	r3, ip
 8000e22:	4652      	mov	r2, sl
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	015a      	lsls	r2, r3, #5
 8000e28:	d400      	bmi.n	8000e2c <__aeabi_fsub+0x218>
 8000e2a:	e0aa      	b.n	8000f82 <__aeabi_fsub+0x36e>
 8000e2c:	4663      	mov	r3, ip
 8000e2e:	4652      	mov	r2, sl
 8000e30:	000d      	movs	r5, r1
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	e744      	b.n	8000cc0 <__aeabi_fsub+0xac>
 8000e36:	4652      	mov	r2, sl
 8000e38:	2a00      	cmp	r2, #0
 8000e3a:	d023      	beq.n	8000e84 <__aeabi_fsub+0x270>
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4252      	negs	r2, r2
 8000e40:	4690      	mov	r8, r2
 8000e42:	44c1      	add	r9, r8
 8000e44:	464a      	mov	r2, r9
 8000e46:	2a00      	cmp	r2, #0
 8000e48:	d075      	beq.n	8000f36 <__aeabi_fsub+0x322>
 8000e4a:	2cff      	cmp	r4, #255	; 0xff
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_fsub+0x23c>
 8000e4e:	e75f      	b.n	8000d10 <__aeabi_fsub+0xfc>
 8000e50:	e796      	b.n	8000d80 <__aeabi_fsub+0x16c>
 8000e52:	26fe      	movs	r6, #254	; 0xfe
 8000e54:	3401      	adds	r4, #1
 8000e56:	4226      	tst	r6, r4
 8000e58:	d153      	bne.n	8000f02 <__aeabi_fsub+0x2ee>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d172      	bne.n	8000f44 <__aeabi_fsub+0x330>
 8000e5e:	4663      	mov	r3, ip
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d100      	bne.n	8000e66 <__aeabi_fsub+0x252>
 8000e64:	e093      	b.n	8000f8e <__aeabi_fsub+0x37a>
 8000e66:	4653      	mov	r3, sl
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_fsub+0x25a>
 8000e6c:	e739      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000e6e:	4463      	add	r3, ip
 8000e70:	2400      	movs	r4, #0
 8000e72:	015a      	lsls	r2, r3, #5
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_fsub+0x268>
 8000e76:	4a4a      	ldr	r2, [pc, #296]	; (8000fa0 <__aeabi_fsub+0x38c>)
 8000e78:	3401      	adds	r4, #1
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	075a      	lsls	r2, r3, #29
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_fsub+0x26e>
 8000e80:	e720      	b.n	8000cc4 <__aeabi_fsub+0xb0>
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	2cff      	cmp	r4, #255	; 0xff
 8000e86:	d100      	bne.n	8000e8a <__aeabi_fsub+0x276>
 8000e88:	e77a      	b.n	8000d80 <__aeabi_fsub+0x16c>
 8000e8a:	025b      	lsls	r3, r3, #9
 8000e8c:	0a5f      	lsrs	r7, r3, #9
 8000e8e:	b2e0      	uxtb	r0, r4
 8000e90:	e727      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000e92:	20ff      	movs	r0, #255	; 0xff
 8000e94:	2700      	movs	r7, #0
 8000e96:	e724      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000e98:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <__aeabi_fsub+0x38c>)
 8000e9a:	1a24      	subs	r4, r4, r0
 8000e9c:	4033      	ands	r3, r6
 8000e9e:	e70f      	b.n	8000cc0 <__aeabi_fsub+0xac>
 8000ea0:	2eff      	cmp	r6, #255	; 0xff
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x292>
 8000ea4:	e76a      	b.n	8000d7c <__aeabi_fsub+0x168>
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	4662      	mov	r2, ip
 8000eaa:	04db      	lsls	r3, r3, #19
 8000eac:	431a      	orrs	r2, r3
 8000eae:	4694      	mov	ip, r2
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	281b      	cmp	r0, #27
 8000eb4:	dc09      	bgt.n	8000eca <__aeabi_fsub+0x2b6>
 8000eb6:	2420      	movs	r4, #32
 8000eb8:	4663      	mov	r3, ip
 8000eba:	4662      	mov	r2, ip
 8000ebc:	40c3      	lsrs	r3, r0
 8000ebe:	1a20      	subs	r0, r4, r0
 8000ec0:	4082      	lsls	r2, r0
 8000ec2:	0010      	movs	r0, r2
 8000ec4:	1e44      	subs	r4, r0, #1
 8000ec6:	41a0      	sbcs	r0, r4
 8000ec8:	4303      	orrs	r3, r0
 8000eca:	4652      	mov	r2, sl
 8000ecc:	000d      	movs	r5, r1
 8000ece:	0034      	movs	r4, r6
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	e6dc      	b.n	8000c8e <__aeabi_fsub+0x7a>
 8000ed4:	4663      	mov	r3, ip
 8000ed6:	4652      	mov	r2, sl
 8000ed8:	1a9e      	subs	r6, r3, r2
 8000eda:	0173      	lsls	r3, r6, #5
 8000edc:	d417      	bmi.n	8000f0e <__aeabi_fsub+0x2fa>
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_fsub+0x2d0>
 8000ee2:	e6d9      	b.n	8000c98 <__aeabi_fsub+0x84>
 8000ee4:	2500      	movs	r5, #0
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	2700      	movs	r7, #0
 8000eea:	e6fa      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000eec:	4663      	mov	r3, ip
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d044      	beq.n	8000f7c <__aeabi_fsub+0x368>
 8000ef2:	3901      	subs	r1, #1
 8000ef4:	2900      	cmp	r1, #0
 8000ef6:	d04c      	beq.n	8000f92 <__aeabi_fsub+0x37e>
 8000ef8:	2eff      	cmp	r6, #255	; 0xff
 8000efa:	d000      	beq.n	8000efe <__aeabi_fsub+0x2ea>
 8000efc:	e771      	b.n	8000de2 <__aeabi_fsub+0x1ce>
 8000efe:	4643      	mov	r3, r8
 8000f00:	e73e      	b.n	8000d80 <__aeabi_fsub+0x16c>
 8000f02:	2cff      	cmp	r4, #255	; 0xff
 8000f04:	d0c5      	beq.n	8000e92 <__aeabi_fsub+0x27e>
 8000f06:	4652      	mov	r2, sl
 8000f08:	4462      	add	r2, ip
 8000f0a:	0853      	lsrs	r3, r2, #1
 8000f0c:	e7b6      	b.n	8000e7c <__aeabi_fsub+0x268>
 8000f0e:	4663      	mov	r3, ip
 8000f10:	000d      	movs	r5, r1
 8000f12:	1ad6      	subs	r6, r2, r3
 8000f14:	e6c0      	b.n	8000c98 <__aeabi_fsub+0x84>
 8000f16:	4662      	mov	r2, ip
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	d116      	bne.n	8000f4a <__aeabi_fsub+0x336>
 8000f1c:	4653      	mov	r3, sl
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fsub+0x310>
 8000f22:	e72b      	b.n	8000d7c <__aeabi_fsub+0x168>
 8000f24:	2780      	movs	r7, #128	; 0x80
 8000f26:	2500      	movs	r5, #0
 8000f28:	20ff      	movs	r0, #255	; 0xff
 8000f2a:	03ff      	lsls	r7, r7, #15
 8000f2c:	e6d9      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000f2e:	000d      	movs	r5, r1
 8000f30:	4643      	mov	r3, r8
 8000f32:	0034      	movs	r4, r6
 8000f34:	e7a6      	b.n	8000e84 <__aeabi_fsub+0x270>
 8000f36:	4653      	mov	r3, sl
 8000f38:	4463      	add	r3, ip
 8000f3a:	e6f7      	b.n	8000d2c <__aeabi_fsub+0x118>
 8000f3c:	4663      	mov	r3, ip
 8000f3e:	4652      	mov	r2, sl
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	e6a4      	b.n	8000c8e <__aeabi_fsub+0x7a>
 8000f44:	4662      	mov	r2, ip
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	d0d9      	beq.n	8000efe <__aeabi_fsub+0x2ea>
 8000f4a:	4652      	mov	r2, sl
 8000f4c:	2a00      	cmp	r2, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_fsub+0x33e>
 8000f50:	e716      	b.n	8000d80 <__aeabi_fsub+0x16c>
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	03d2      	lsls	r2, r2, #15
 8000f56:	4213      	tst	r3, r2
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x348>
 8000f5a:	e711      	b.n	8000d80 <__aeabi_fsub+0x16c>
 8000f5c:	4640      	mov	r0, r8
 8000f5e:	4210      	tst	r0, r2
 8000f60:	d000      	beq.n	8000f64 <__aeabi_fsub+0x350>
 8000f62:	e70d      	b.n	8000d80 <__aeabi_fsub+0x16c>
 8000f64:	e70a      	b.n	8000d7c <__aeabi_fsub+0x168>
 8000f66:	4652      	mov	r2, sl
 8000f68:	000d      	movs	r5, r1
 8000f6a:	0034      	movs	r4, r6
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	e68e      	b.n	8000c8e <__aeabi_fsub+0x7a>
 8000f70:	4653      	mov	r3, sl
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d008      	beq.n	8000f88 <__aeabi_fsub+0x374>
 8000f76:	000d      	movs	r5, r1
 8000f78:	4647      	mov	r7, r8
 8000f7a:	e6b2      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000f7c:	4643      	mov	r3, r8
 8000f7e:	0034      	movs	r4, r6
 8000f80:	e780      	b.n	8000e84 <__aeabi_fsub+0x270>
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d000      	beq.n	8000f88 <__aeabi_fsub+0x374>
 8000f86:	e779      	b.n	8000e7c <__aeabi_fsub+0x268>
 8000f88:	2500      	movs	r5, #0
 8000f8a:	2700      	movs	r7, #0
 8000f8c:	e6a9      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000f8e:	4647      	mov	r7, r8
 8000f90:	e6a7      	b.n	8000ce2 <__aeabi_fsub+0xce>
 8000f92:	4653      	mov	r3, sl
 8000f94:	0034      	movs	r4, r6
 8000f96:	4463      	add	r3, ip
 8000f98:	e6c8      	b.n	8000d2c <__aeabi_fsub+0x118>
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	7dffffff 	.word	0x7dffffff
 8000fa0:	fbffffff 	.word	0xfbffffff

08000fa4 <__aeabi_f2iz>:
 8000fa4:	0241      	lsls	r1, r0, #9
 8000fa6:	0042      	lsls	r2, r0, #1
 8000fa8:	0fc3      	lsrs	r3, r0, #31
 8000faa:	0a49      	lsrs	r1, r1, #9
 8000fac:	2000      	movs	r0, #0
 8000fae:	0e12      	lsrs	r2, r2, #24
 8000fb0:	2a7e      	cmp	r2, #126	; 0x7e
 8000fb2:	d903      	bls.n	8000fbc <__aeabi_f2iz+0x18>
 8000fb4:	2a9d      	cmp	r2, #157	; 0x9d
 8000fb6:	d902      	bls.n	8000fbe <__aeabi_f2iz+0x1a>
 8000fb8:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <__aeabi_f2iz+0x3c>)
 8000fba:	1898      	adds	r0, r3, r2
 8000fbc:	4770      	bx	lr
 8000fbe:	2080      	movs	r0, #128	; 0x80
 8000fc0:	0400      	lsls	r0, r0, #16
 8000fc2:	4301      	orrs	r1, r0
 8000fc4:	2a95      	cmp	r2, #149	; 0x95
 8000fc6:	dc07      	bgt.n	8000fd8 <__aeabi_f2iz+0x34>
 8000fc8:	2096      	movs	r0, #150	; 0x96
 8000fca:	1a82      	subs	r2, r0, r2
 8000fcc:	40d1      	lsrs	r1, r2
 8000fce:	4248      	negs	r0, r1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f3      	bne.n	8000fbc <__aeabi_f2iz+0x18>
 8000fd4:	0008      	movs	r0, r1
 8000fd6:	e7f1      	b.n	8000fbc <__aeabi_f2iz+0x18>
 8000fd8:	3a96      	subs	r2, #150	; 0x96
 8000fda:	4091      	lsls	r1, r2
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_f2iz+0x2a>
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	7fffffff 	.word	0x7fffffff

08000fe4 <__aeabi_ui2f>:
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	1e05      	subs	r5, r0, #0
 8000fe8:	d00e      	beq.n	8001008 <__aeabi_ui2f+0x24>
 8000fea:	f001 ff1f 	bl	8002e2c <__clzsi2>
 8000fee:	239e      	movs	r3, #158	; 0x9e
 8000ff0:	0004      	movs	r4, r0
 8000ff2:	1a1b      	subs	r3, r3, r0
 8000ff4:	2b96      	cmp	r3, #150	; 0x96
 8000ff6:	dc0c      	bgt.n	8001012 <__aeabi_ui2f+0x2e>
 8000ff8:	2808      	cmp	r0, #8
 8000ffa:	dd01      	ble.n	8001000 <__aeabi_ui2f+0x1c>
 8000ffc:	3c08      	subs	r4, #8
 8000ffe:	40a5      	lsls	r5, r4
 8001000:	026d      	lsls	r5, r5, #9
 8001002:	0a6d      	lsrs	r5, r5, #9
 8001004:	b2d8      	uxtb	r0, r3
 8001006:	e001      	b.n	800100c <__aeabi_ui2f+0x28>
 8001008:	2000      	movs	r0, #0
 800100a:	2500      	movs	r5, #0
 800100c:	05c0      	lsls	r0, r0, #23
 800100e:	4328      	orrs	r0, r5
 8001010:	bd70      	pop	{r4, r5, r6, pc}
 8001012:	2b99      	cmp	r3, #153	; 0x99
 8001014:	dd09      	ble.n	800102a <__aeabi_ui2f+0x46>
 8001016:	0002      	movs	r2, r0
 8001018:	0029      	movs	r1, r5
 800101a:	321b      	adds	r2, #27
 800101c:	4091      	lsls	r1, r2
 800101e:	1e4a      	subs	r2, r1, #1
 8001020:	4191      	sbcs	r1, r2
 8001022:	2205      	movs	r2, #5
 8001024:	1a12      	subs	r2, r2, r0
 8001026:	40d5      	lsrs	r5, r2
 8001028:	430d      	orrs	r5, r1
 800102a:	2c05      	cmp	r4, #5
 800102c:	dd01      	ble.n	8001032 <__aeabi_ui2f+0x4e>
 800102e:	1f62      	subs	r2, r4, #5
 8001030:	4095      	lsls	r5, r2
 8001032:	0029      	movs	r1, r5
 8001034:	4e08      	ldr	r6, [pc, #32]	; (8001058 <__aeabi_ui2f+0x74>)
 8001036:	4031      	ands	r1, r6
 8001038:	076a      	lsls	r2, r5, #29
 800103a:	d009      	beq.n	8001050 <__aeabi_ui2f+0x6c>
 800103c:	200f      	movs	r0, #15
 800103e:	4028      	ands	r0, r5
 8001040:	2804      	cmp	r0, #4
 8001042:	d005      	beq.n	8001050 <__aeabi_ui2f+0x6c>
 8001044:	3104      	adds	r1, #4
 8001046:	014a      	lsls	r2, r1, #5
 8001048:	d502      	bpl.n	8001050 <__aeabi_ui2f+0x6c>
 800104a:	239f      	movs	r3, #159	; 0x9f
 800104c:	4031      	ands	r1, r6
 800104e:	1b1b      	subs	r3, r3, r4
 8001050:	0189      	lsls	r1, r1, #6
 8001052:	0a4d      	lsrs	r5, r1, #9
 8001054:	b2d8      	uxtb	r0, r3
 8001056:	e7d9      	b.n	800100c <__aeabi_ui2f+0x28>
 8001058:	fbffffff 	.word	0xfbffffff

0800105c <__aeabi_dadd>:
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	464f      	mov	r7, r9
 8001060:	46d6      	mov	lr, sl
 8001062:	4646      	mov	r6, r8
 8001064:	000d      	movs	r5, r1
 8001066:	0001      	movs	r1, r0
 8001068:	0018      	movs	r0, r3
 800106a:	b5c0      	push	{r6, r7, lr}
 800106c:	0017      	movs	r7, r2
 800106e:	032b      	lsls	r3, r5, #12
 8001070:	0a5a      	lsrs	r2, r3, #9
 8001072:	0f4b      	lsrs	r3, r1, #29
 8001074:	4313      	orrs	r3, r2
 8001076:	00ca      	lsls	r2, r1, #3
 8001078:	4691      	mov	r9, r2
 800107a:	0302      	lsls	r2, r0, #12
 800107c:	006e      	lsls	r6, r5, #1
 800107e:	0041      	lsls	r1, r0, #1
 8001080:	0a52      	lsrs	r2, r2, #9
 8001082:	0fec      	lsrs	r4, r5, #31
 8001084:	0f7d      	lsrs	r5, r7, #29
 8001086:	4315      	orrs	r5, r2
 8001088:	0d76      	lsrs	r6, r6, #21
 800108a:	0d49      	lsrs	r1, r1, #21
 800108c:	0fc0      	lsrs	r0, r0, #31
 800108e:	4682      	mov	sl, r0
 8001090:	46ac      	mov	ip, r5
 8001092:	00ff      	lsls	r7, r7, #3
 8001094:	1a72      	subs	r2, r6, r1
 8001096:	4284      	cmp	r4, r0
 8001098:	d100      	bne.n	800109c <__aeabi_dadd+0x40>
 800109a:	e098      	b.n	80011ce <__aeabi_dadd+0x172>
 800109c:	2a00      	cmp	r2, #0
 800109e:	dc00      	bgt.n	80010a2 <__aeabi_dadd+0x46>
 80010a0:	e081      	b.n	80011a6 <__aeabi_dadd+0x14a>
 80010a2:	2900      	cmp	r1, #0
 80010a4:	d100      	bne.n	80010a8 <__aeabi_dadd+0x4c>
 80010a6:	e0b6      	b.n	8001216 <__aeabi_dadd+0x1ba>
 80010a8:	49c9      	ldr	r1, [pc, #804]	; (80013d0 <__aeabi_dadd+0x374>)
 80010aa:	428e      	cmp	r6, r1
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dadd+0x54>
 80010ae:	e172      	b.n	8001396 <__aeabi_dadd+0x33a>
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0028      	movs	r0, r5
 80010b4:	0409      	lsls	r1, r1, #16
 80010b6:	4308      	orrs	r0, r1
 80010b8:	4684      	mov	ip, r0
 80010ba:	2a38      	cmp	r2, #56	; 0x38
 80010bc:	dd00      	ble.n	80010c0 <__aeabi_dadd+0x64>
 80010be:	e15e      	b.n	800137e <__aeabi_dadd+0x322>
 80010c0:	2a1f      	cmp	r2, #31
 80010c2:	dd00      	ble.n	80010c6 <__aeabi_dadd+0x6a>
 80010c4:	e1ee      	b.n	80014a4 <__aeabi_dadd+0x448>
 80010c6:	2020      	movs	r0, #32
 80010c8:	0039      	movs	r1, r7
 80010ca:	4665      	mov	r5, ip
 80010cc:	1a80      	subs	r0, r0, r2
 80010ce:	4087      	lsls	r7, r0
 80010d0:	40d1      	lsrs	r1, r2
 80010d2:	4085      	lsls	r5, r0
 80010d4:	430d      	orrs	r5, r1
 80010d6:	0039      	movs	r1, r7
 80010d8:	1e4f      	subs	r7, r1, #1
 80010da:	41b9      	sbcs	r1, r7
 80010dc:	4667      	mov	r7, ip
 80010de:	40d7      	lsrs	r7, r2
 80010e0:	4329      	orrs	r1, r5
 80010e2:	1bdb      	subs	r3, r3, r7
 80010e4:	464a      	mov	r2, r9
 80010e6:	1a55      	subs	r5, r2, r1
 80010e8:	45a9      	cmp	r9, r5
 80010ea:	4189      	sbcs	r1, r1
 80010ec:	4249      	negs	r1, r1
 80010ee:	1a5b      	subs	r3, r3, r1
 80010f0:	4698      	mov	r8, r3
 80010f2:	4643      	mov	r3, r8
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	d400      	bmi.n	80010fa <__aeabi_dadd+0x9e>
 80010f8:	e0cc      	b.n	8001294 <__aeabi_dadd+0x238>
 80010fa:	4643      	mov	r3, r8
 80010fc:	025b      	lsls	r3, r3, #9
 80010fe:	0a5b      	lsrs	r3, r3, #9
 8001100:	4698      	mov	r8, r3
 8001102:	4643      	mov	r3, r8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d100      	bne.n	800110a <__aeabi_dadd+0xae>
 8001108:	e12c      	b.n	8001364 <__aeabi_dadd+0x308>
 800110a:	4640      	mov	r0, r8
 800110c:	f001 fe8e 	bl	8002e2c <__clzsi2>
 8001110:	0001      	movs	r1, r0
 8001112:	3908      	subs	r1, #8
 8001114:	2220      	movs	r2, #32
 8001116:	0028      	movs	r0, r5
 8001118:	4643      	mov	r3, r8
 800111a:	1a52      	subs	r2, r2, r1
 800111c:	408b      	lsls	r3, r1
 800111e:	40d0      	lsrs	r0, r2
 8001120:	408d      	lsls	r5, r1
 8001122:	4303      	orrs	r3, r0
 8001124:	428e      	cmp	r6, r1
 8001126:	dd00      	ble.n	800112a <__aeabi_dadd+0xce>
 8001128:	e117      	b.n	800135a <__aeabi_dadd+0x2fe>
 800112a:	1b8e      	subs	r6, r1, r6
 800112c:	1c72      	adds	r2, r6, #1
 800112e:	2a1f      	cmp	r2, #31
 8001130:	dd00      	ble.n	8001134 <__aeabi_dadd+0xd8>
 8001132:	e1a7      	b.n	8001484 <__aeabi_dadd+0x428>
 8001134:	2120      	movs	r1, #32
 8001136:	0018      	movs	r0, r3
 8001138:	002e      	movs	r6, r5
 800113a:	1a89      	subs	r1, r1, r2
 800113c:	408d      	lsls	r5, r1
 800113e:	4088      	lsls	r0, r1
 8001140:	40d6      	lsrs	r6, r2
 8001142:	40d3      	lsrs	r3, r2
 8001144:	1e69      	subs	r1, r5, #1
 8001146:	418d      	sbcs	r5, r1
 8001148:	4330      	orrs	r0, r6
 800114a:	4698      	mov	r8, r3
 800114c:	2600      	movs	r6, #0
 800114e:	4305      	orrs	r5, r0
 8001150:	076b      	lsls	r3, r5, #29
 8001152:	d009      	beq.n	8001168 <__aeabi_dadd+0x10c>
 8001154:	230f      	movs	r3, #15
 8001156:	402b      	ands	r3, r5
 8001158:	2b04      	cmp	r3, #4
 800115a:	d005      	beq.n	8001168 <__aeabi_dadd+0x10c>
 800115c:	1d2b      	adds	r3, r5, #4
 800115e:	42ab      	cmp	r3, r5
 8001160:	41ad      	sbcs	r5, r5
 8001162:	426d      	negs	r5, r5
 8001164:	44a8      	add	r8, r5
 8001166:	001d      	movs	r5, r3
 8001168:	4643      	mov	r3, r8
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	d400      	bmi.n	8001170 <__aeabi_dadd+0x114>
 800116e:	e094      	b.n	800129a <__aeabi_dadd+0x23e>
 8001170:	4b97      	ldr	r3, [pc, #604]	; (80013d0 <__aeabi_dadd+0x374>)
 8001172:	1c72      	adds	r2, r6, #1
 8001174:	429a      	cmp	r2, r3
 8001176:	d100      	bne.n	800117a <__aeabi_dadd+0x11e>
 8001178:	e09d      	b.n	80012b6 <__aeabi_dadd+0x25a>
 800117a:	4641      	mov	r1, r8
 800117c:	4b95      	ldr	r3, [pc, #596]	; (80013d4 <__aeabi_dadd+0x378>)
 800117e:	08ed      	lsrs	r5, r5, #3
 8001180:	4019      	ands	r1, r3
 8001182:	000b      	movs	r3, r1
 8001184:	0552      	lsls	r2, r2, #21
 8001186:	0749      	lsls	r1, r1, #29
 8001188:	025b      	lsls	r3, r3, #9
 800118a:	4329      	orrs	r1, r5
 800118c:	0b1b      	lsrs	r3, r3, #12
 800118e:	0d52      	lsrs	r2, r2, #21
 8001190:	0512      	lsls	r2, r2, #20
 8001192:	4313      	orrs	r3, r2
 8001194:	07e4      	lsls	r4, r4, #31
 8001196:	4323      	orrs	r3, r4
 8001198:	0008      	movs	r0, r1
 800119a:	0019      	movs	r1, r3
 800119c:	bce0      	pop	{r5, r6, r7}
 800119e:	46ba      	mov	sl, r7
 80011a0:	46b1      	mov	r9, r6
 80011a2:	46a8      	mov	r8, r5
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	d043      	beq.n	8001232 <__aeabi_dadd+0x1d6>
 80011aa:	1b8a      	subs	r2, r1, r6
 80011ac:	2e00      	cmp	r6, #0
 80011ae:	d000      	beq.n	80011b2 <__aeabi_dadd+0x156>
 80011b0:	e12a      	b.n	8001408 <__aeabi_dadd+0x3ac>
 80011b2:	464c      	mov	r4, r9
 80011b4:	431c      	orrs	r4, r3
 80011b6:	d100      	bne.n	80011ba <__aeabi_dadd+0x15e>
 80011b8:	e1d1      	b.n	800155e <__aeabi_dadd+0x502>
 80011ba:	1e54      	subs	r4, r2, #1
 80011bc:	2a01      	cmp	r2, #1
 80011be:	d100      	bne.n	80011c2 <__aeabi_dadd+0x166>
 80011c0:	e21f      	b.n	8001602 <__aeabi_dadd+0x5a6>
 80011c2:	4d83      	ldr	r5, [pc, #524]	; (80013d0 <__aeabi_dadd+0x374>)
 80011c4:	42aa      	cmp	r2, r5
 80011c6:	d100      	bne.n	80011ca <__aeabi_dadd+0x16e>
 80011c8:	e272      	b.n	80016b0 <__aeabi_dadd+0x654>
 80011ca:	0022      	movs	r2, r4
 80011cc:	e123      	b.n	8001416 <__aeabi_dadd+0x3ba>
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	dc00      	bgt.n	80011d4 <__aeabi_dadd+0x178>
 80011d2:	e098      	b.n	8001306 <__aeabi_dadd+0x2aa>
 80011d4:	2900      	cmp	r1, #0
 80011d6:	d042      	beq.n	800125e <__aeabi_dadd+0x202>
 80011d8:	497d      	ldr	r1, [pc, #500]	; (80013d0 <__aeabi_dadd+0x374>)
 80011da:	428e      	cmp	r6, r1
 80011dc:	d100      	bne.n	80011e0 <__aeabi_dadd+0x184>
 80011de:	e0da      	b.n	8001396 <__aeabi_dadd+0x33a>
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0028      	movs	r0, r5
 80011e4:	0409      	lsls	r1, r1, #16
 80011e6:	4308      	orrs	r0, r1
 80011e8:	4684      	mov	ip, r0
 80011ea:	2a38      	cmp	r2, #56	; 0x38
 80011ec:	dd00      	ble.n	80011f0 <__aeabi_dadd+0x194>
 80011ee:	e129      	b.n	8001444 <__aeabi_dadd+0x3e8>
 80011f0:	2a1f      	cmp	r2, #31
 80011f2:	dc00      	bgt.n	80011f6 <__aeabi_dadd+0x19a>
 80011f4:	e187      	b.n	8001506 <__aeabi_dadd+0x4aa>
 80011f6:	0011      	movs	r1, r2
 80011f8:	4665      	mov	r5, ip
 80011fa:	3920      	subs	r1, #32
 80011fc:	40cd      	lsrs	r5, r1
 80011fe:	2a20      	cmp	r2, #32
 8001200:	d004      	beq.n	800120c <__aeabi_dadd+0x1b0>
 8001202:	2040      	movs	r0, #64	; 0x40
 8001204:	4661      	mov	r1, ip
 8001206:	1a82      	subs	r2, r0, r2
 8001208:	4091      	lsls	r1, r2
 800120a:	430f      	orrs	r7, r1
 800120c:	0039      	movs	r1, r7
 800120e:	1e4f      	subs	r7, r1, #1
 8001210:	41b9      	sbcs	r1, r7
 8001212:	430d      	orrs	r5, r1
 8001214:	e11b      	b.n	800144e <__aeabi_dadd+0x3f2>
 8001216:	0029      	movs	r1, r5
 8001218:	4339      	orrs	r1, r7
 800121a:	d100      	bne.n	800121e <__aeabi_dadd+0x1c2>
 800121c:	e0b5      	b.n	800138a <__aeabi_dadd+0x32e>
 800121e:	1e51      	subs	r1, r2, #1
 8001220:	2a01      	cmp	r2, #1
 8001222:	d100      	bne.n	8001226 <__aeabi_dadd+0x1ca>
 8001224:	e1ab      	b.n	800157e <__aeabi_dadd+0x522>
 8001226:	486a      	ldr	r0, [pc, #424]	; (80013d0 <__aeabi_dadd+0x374>)
 8001228:	4282      	cmp	r2, r0
 800122a:	d100      	bne.n	800122e <__aeabi_dadd+0x1d2>
 800122c:	e1b2      	b.n	8001594 <__aeabi_dadd+0x538>
 800122e:	000a      	movs	r2, r1
 8001230:	e743      	b.n	80010ba <__aeabi_dadd+0x5e>
 8001232:	4969      	ldr	r1, [pc, #420]	; (80013d8 <__aeabi_dadd+0x37c>)
 8001234:	1c75      	adds	r5, r6, #1
 8001236:	420d      	tst	r5, r1
 8001238:	d000      	beq.n	800123c <__aeabi_dadd+0x1e0>
 800123a:	e0cf      	b.n	80013dc <__aeabi_dadd+0x380>
 800123c:	2e00      	cmp	r6, #0
 800123e:	d000      	beq.n	8001242 <__aeabi_dadd+0x1e6>
 8001240:	e193      	b.n	800156a <__aeabi_dadd+0x50e>
 8001242:	4649      	mov	r1, r9
 8001244:	4319      	orrs	r1, r3
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x1ee>
 8001248:	e1d1      	b.n	80015ee <__aeabi_dadd+0x592>
 800124a:	4661      	mov	r1, ip
 800124c:	4339      	orrs	r1, r7
 800124e:	d000      	beq.n	8001252 <__aeabi_dadd+0x1f6>
 8001250:	e1e3      	b.n	800161a <__aeabi_dadd+0x5be>
 8001252:	4649      	mov	r1, r9
 8001254:	0758      	lsls	r0, r3, #29
 8001256:	08c9      	lsrs	r1, r1, #3
 8001258:	4301      	orrs	r1, r0
 800125a:	08db      	lsrs	r3, r3, #3
 800125c:	e026      	b.n	80012ac <__aeabi_dadd+0x250>
 800125e:	0029      	movs	r1, r5
 8001260:	4339      	orrs	r1, r7
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x20a>
 8001264:	e091      	b.n	800138a <__aeabi_dadd+0x32e>
 8001266:	1e51      	subs	r1, r2, #1
 8001268:	2a01      	cmp	r2, #1
 800126a:	d005      	beq.n	8001278 <__aeabi_dadd+0x21c>
 800126c:	4858      	ldr	r0, [pc, #352]	; (80013d0 <__aeabi_dadd+0x374>)
 800126e:	4282      	cmp	r2, r0
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x218>
 8001272:	e18f      	b.n	8001594 <__aeabi_dadd+0x538>
 8001274:	000a      	movs	r2, r1
 8001276:	e7b8      	b.n	80011ea <__aeabi_dadd+0x18e>
 8001278:	003d      	movs	r5, r7
 800127a:	444d      	add	r5, r9
 800127c:	454d      	cmp	r5, r9
 800127e:	4189      	sbcs	r1, r1
 8001280:	4463      	add	r3, ip
 8001282:	4698      	mov	r8, r3
 8001284:	4249      	negs	r1, r1
 8001286:	4488      	add	r8, r1
 8001288:	4643      	mov	r3, r8
 800128a:	2602      	movs	r6, #2
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	d500      	bpl.n	8001292 <__aeabi_dadd+0x236>
 8001290:	e0eb      	b.n	800146a <__aeabi_dadd+0x40e>
 8001292:	3e01      	subs	r6, #1
 8001294:	076b      	lsls	r3, r5, #29
 8001296:	d000      	beq.n	800129a <__aeabi_dadd+0x23e>
 8001298:	e75c      	b.n	8001154 <__aeabi_dadd+0xf8>
 800129a:	4643      	mov	r3, r8
 800129c:	08e9      	lsrs	r1, r5, #3
 800129e:	075a      	lsls	r2, r3, #29
 80012a0:	4311      	orrs	r1, r2
 80012a2:	0032      	movs	r2, r6
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	484a      	ldr	r0, [pc, #296]	; (80013d0 <__aeabi_dadd+0x374>)
 80012a8:	4282      	cmp	r2, r0
 80012aa:	d021      	beq.n	80012f0 <__aeabi_dadd+0x294>
 80012ac:	031b      	lsls	r3, r3, #12
 80012ae:	0552      	lsls	r2, r2, #21
 80012b0:	0b1b      	lsrs	r3, r3, #12
 80012b2:	0d52      	lsrs	r2, r2, #21
 80012b4:	e76c      	b.n	8001190 <__aeabi_dadd+0x134>
 80012b6:	2300      	movs	r3, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	e769      	b.n	8001190 <__aeabi_dadd+0x134>
 80012bc:	002a      	movs	r2, r5
 80012be:	433a      	orrs	r2, r7
 80012c0:	d069      	beq.n	8001396 <__aeabi_dadd+0x33a>
 80012c2:	464a      	mov	r2, r9
 80012c4:	0758      	lsls	r0, r3, #29
 80012c6:	08d1      	lsrs	r1, r2, #3
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	031b      	lsls	r3, r3, #12
 80012ce:	4308      	orrs	r0, r1
 80012d0:	421a      	tst	r2, r3
 80012d2:	d007      	beq.n	80012e4 <__aeabi_dadd+0x288>
 80012d4:	0029      	movs	r1, r5
 80012d6:	08ed      	lsrs	r5, r5, #3
 80012d8:	421d      	tst	r5, r3
 80012da:	d103      	bne.n	80012e4 <__aeabi_dadd+0x288>
 80012dc:	002a      	movs	r2, r5
 80012de:	08ff      	lsrs	r7, r7, #3
 80012e0:	0748      	lsls	r0, r1, #29
 80012e2:	4338      	orrs	r0, r7
 80012e4:	0f43      	lsrs	r3, r0, #29
 80012e6:	00c1      	lsls	r1, r0, #3
 80012e8:	075b      	lsls	r3, r3, #29
 80012ea:	08c9      	lsrs	r1, r1, #3
 80012ec:	4319      	orrs	r1, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	000a      	movs	r2, r1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0x29c>
 80012f6:	e213      	b.n	8001720 <__aeabi_dadd+0x6c4>
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	0312      	lsls	r2, r2, #12
 80012fc:	4313      	orrs	r3, r2
 80012fe:	031b      	lsls	r3, r3, #12
 8001300:	4a33      	ldr	r2, [pc, #204]	; (80013d0 <__aeabi_dadd+0x374>)
 8001302:	0b1b      	lsrs	r3, r3, #12
 8001304:	e744      	b.n	8001190 <__aeabi_dadd+0x134>
 8001306:	2a00      	cmp	r2, #0
 8001308:	d04b      	beq.n	80013a2 <__aeabi_dadd+0x346>
 800130a:	1b8a      	subs	r2, r1, r6
 800130c:	2e00      	cmp	r6, #0
 800130e:	d100      	bne.n	8001312 <__aeabi_dadd+0x2b6>
 8001310:	e0e7      	b.n	80014e2 <__aeabi_dadd+0x486>
 8001312:	482f      	ldr	r0, [pc, #188]	; (80013d0 <__aeabi_dadd+0x374>)
 8001314:	4281      	cmp	r1, r0
 8001316:	d100      	bne.n	800131a <__aeabi_dadd+0x2be>
 8001318:	e195      	b.n	8001646 <__aeabi_dadd+0x5ea>
 800131a:	2080      	movs	r0, #128	; 0x80
 800131c:	0400      	lsls	r0, r0, #16
 800131e:	4303      	orrs	r3, r0
 8001320:	2a38      	cmp	r2, #56	; 0x38
 8001322:	dd00      	ble.n	8001326 <__aeabi_dadd+0x2ca>
 8001324:	e143      	b.n	80015ae <__aeabi_dadd+0x552>
 8001326:	2a1f      	cmp	r2, #31
 8001328:	dd00      	ble.n	800132c <__aeabi_dadd+0x2d0>
 800132a:	e1db      	b.n	80016e4 <__aeabi_dadd+0x688>
 800132c:	2020      	movs	r0, #32
 800132e:	001d      	movs	r5, r3
 8001330:	464e      	mov	r6, r9
 8001332:	1a80      	subs	r0, r0, r2
 8001334:	4085      	lsls	r5, r0
 8001336:	40d6      	lsrs	r6, r2
 8001338:	4335      	orrs	r5, r6
 800133a:	464e      	mov	r6, r9
 800133c:	4086      	lsls	r6, r0
 800133e:	0030      	movs	r0, r6
 8001340:	40d3      	lsrs	r3, r2
 8001342:	1e46      	subs	r6, r0, #1
 8001344:	41b0      	sbcs	r0, r6
 8001346:	449c      	add	ip, r3
 8001348:	4305      	orrs	r5, r0
 800134a:	19ed      	adds	r5, r5, r7
 800134c:	42bd      	cmp	r5, r7
 800134e:	419b      	sbcs	r3, r3
 8001350:	425b      	negs	r3, r3
 8001352:	4463      	add	r3, ip
 8001354:	4698      	mov	r8, r3
 8001356:	000e      	movs	r6, r1
 8001358:	e07f      	b.n	800145a <__aeabi_dadd+0x3fe>
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <__aeabi_dadd+0x378>)
 800135c:	1a76      	subs	r6, r6, r1
 800135e:	4013      	ands	r3, r2
 8001360:	4698      	mov	r8, r3
 8001362:	e6f5      	b.n	8001150 <__aeabi_dadd+0xf4>
 8001364:	0028      	movs	r0, r5
 8001366:	f001 fd61 	bl	8002e2c <__clzsi2>
 800136a:	0001      	movs	r1, r0
 800136c:	3118      	adds	r1, #24
 800136e:	291f      	cmp	r1, #31
 8001370:	dc00      	bgt.n	8001374 <__aeabi_dadd+0x318>
 8001372:	e6cf      	b.n	8001114 <__aeabi_dadd+0xb8>
 8001374:	002b      	movs	r3, r5
 8001376:	3808      	subs	r0, #8
 8001378:	4083      	lsls	r3, r0
 800137a:	2500      	movs	r5, #0
 800137c:	e6d2      	b.n	8001124 <__aeabi_dadd+0xc8>
 800137e:	4662      	mov	r2, ip
 8001380:	433a      	orrs	r2, r7
 8001382:	0011      	movs	r1, r2
 8001384:	1e4f      	subs	r7, r1, #1
 8001386:	41b9      	sbcs	r1, r7
 8001388:	e6ac      	b.n	80010e4 <__aeabi_dadd+0x88>
 800138a:	4649      	mov	r1, r9
 800138c:	0758      	lsls	r0, r3, #29
 800138e:	08c9      	lsrs	r1, r1, #3
 8001390:	4301      	orrs	r1, r0
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	e787      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001396:	4649      	mov	r1, r9
 8001398:	075a      	lsls	r2, r3, #29
 800139a:	08c9      	lsrs	r1, r1, #3
 800139c:	4311      	orrs	r1, r2
 800139e:	08db      	lsrs	r3, r3, #3
 80013a0:	e7a6      	b.n	80012f0 <__aeabi_dadd+0x294>
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <__aeabi_dadd+0x37c>)
 80013a4:	1c70      	adds	r0, r6, #1
 80013a6:	4208      	tst	r0, r1
 80013a8:	d000      	beq.n	80013ac <__aeabi_dadd+0x350>
 80013aa:	e0bb      	b.n	8001524 <__aeabi_dadd+0x4c8>
 80013ac:	2e00      	cmp	r6, #0
 80013ae:	d000      	beq.n	80013b2 <__aeabi_dadd+0x356>
 80013b0:	e114      	b.n	80015dc <__aeabi_dadd+0x580>
 80013b2:	4649      	mov	r1, r9
 80013b4:	4319      	orrs	r1, r3
 80013b6:	d100      	bne.n	80013ba <__aeabi_dadd+0x35e>
 80013b8:	e175      	b.n	80016a6 <__aeabi_dadd+0x64a>
 80013ba:	0029      	movs	r1, r5
 80013bc:	4339      	orrs	r1, r7
 80013be:	d000      	beq.n	80013c2 <__aeabi_dadd+0x366>
 80013c0:	e17e      	b.n	80016c0 <__aeabi_dadd+0x664>
 80013c2:	4649      	mov	r1, r9
 80013c4:	0758      	lsls	r0, r3, #29
 80013c6:	08c9      	lsrs	r1, r1, #3
 80013c8:	4301      	orrs	r1, r0
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	e76e      	b.n	80012ac <__aeabi_dadd+0x250>
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	000007ff 	.word	0x000007ff
 80013d4:	ff7fffff 	.word	0xff7fffff
 80013d8:	000007fe 	.word	0x000007fe
 80013dc:	4649      	mov	r1, r9
 80013de:	1bcd      	subs	r5, r1, r7
 80013e0:	4661      	mov	r1, ip
 80013e2:	1a58      	subs	r0, r3, r1
 80013e4:	45a9      	cmp	r9, r5
 80013e6:	4189      	sbcs	r1, r1
 80013e8:	4249      	negs	r1, r1
 80013ea:	4688      	mov	r8, r1
 80013ec:	0001      	movs	r1, r0
 80013ee:	4640      	mov	r0, r8
 80013f0:	1a09      	subs	r1, r1, r0
 80013f2:	4688      	mov	r8, r1
 80013f4:	0209      	lsls	r1, r1, #8
 80013f6:	d500      	bpl.n	80013fa <__aeabi_dadd+0x39e>
 80013f8:	e0a6      	b.n	8001548 <__aeabi_dadd+0x4ec>
 80013fa:	4641      	mov	r1, r8
 80013fc:	4329      	orrs	r1, r5
 80013fe:	d000      	beq.n	8001402 <__aeabi_dadd+0x3a6>
 8001400:	e67f      	b.n	8001102 <__aeabi_dadd+0xa6>
 8001402:	2300      	movs	r3, #0
 8001404:	2400      	movs	r4, #0
 8001406:	e751      	b.n	80012ac <__aeabi_dadd+0x250>
 8001408:	4cc7      	ldr	r4, [pc, #796]	; (8001728 <__aeabi_dadd+0x6cc>)
 800140a:	42a1      	cmp	r1, r4
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x3b4>
 800140e:	e0c7      	b.n	80015a0 <__aeabi_dadd+0x544>
 8001410:	2480      	movs	r4, #128	; 0x80
 8001412:	0424      	lsls	r4, r4, #16
 8001414:	4323      	orrs	r3, r4
 8001416:	2a38      	cmp	r2, #56	; 0x38
 8001418:	dc54      	bgt.n	80014c4 <__aeabi_dadd+0x468>
 800141a:	2a1f      	cmp	r2, #31
 800141c:	dd00      	ble.n	8001420 <__aeabi_dadd+0x3c4>
 800141e:	e0cc      	b.n	80015ba <__aeabi_dadd+0x55e>
 8001420:	2420      	movs	r4, #32
 8001422:	4648      	mov	r0, r9
 8001424:	1aa4      	subs	r4, r4, r2
 8001426:	001d      	movs	r5, r3
 8001428:	464e      	mov	r6, r9
 800142a:	40a0      	lsls	r0, r4
 800142c:	40d6      	lsrs	r6, r2
 800142e:	40a5      	lsls	r5, r4
 8001430:	0004      	movs	r4, r0
 8001432:	40d3      	lsrs	r3, r2
 8001434:	4662      	mov	r2, ip
 8001436:	4335      	orrs	r5, r6
 8001438:	1e66      	subs	r6, r4, #1
 800143a:	41b4      	sbcs	r4, r6
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	469c      	mov	ip, r3
 8001440:	4325      	orrs	r5, r4
 8001442:	e044      	b.n	80014ce <__aeabi_dadd+0x472>
 8001444:	4662      	mov	r2, ip
 8001446:	433a      	orrs	r2, r7
 8001448:	0015      	movs	r5, r2
 800144a:	1e6f      	subs	r7, r5, #1
 800144c:	41bd      	sbcs	r5, r7
 800144e:	444d      	add	r5, r9
 8001450:	454d      	cmp	r5, r9
 8001452:	4189      	sbcs	r1, r1
 8001454:	4249      	negs	r1, r1
 8001456:	4688      	mov	r8, r1
 8001458:	4498      	add	r8, r3
 800145a:	4643      	mov	r3, r8
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	d400      	bmi.n	8001462 <__aeabi_dadd+0x406>
 8001460:	e718      	b.n	8001294 <__aeabi_dadd+0x238>
 8001462:	4bb1      	ldr	r3, [pc, #708]	; (8001728 <__aeabi_dadd+0x6cc>)
 8001464:	3601      	adds	r6, #1
 8001466:	429e      	cmp	r6, r3
 8001468:	d049      	beq.n	80014fe <__aeabi_dadd+0x4a2>
 800146a:	4642      	mov	r2, r8
 800146c:	4baf      	ldr	r3, [pc, #700]	; (800172c <__aeabi_dadd+0x6d0>)
 800146e:	2101      	movs	r1, #1
 8001470:	401a      	ands	r2, r3
 8001472:	0013      	movs	r3, r2
 8001474:	086a      	lsrs	r2, r5, #1
 8001476:	400d      	ands	r5, r1
 8001478:	4315      	orrs	r5, r2
 800147a:	07d9      	lsls	r1, r3, #31
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	4698      	mov	r8, r3
 8001480:	430d      	orrs	r5, r1
 8001482:	e665      	b.n	8001150 <__aeabi_dadd+0xf4>
 8001484:	0018      	movs	r0, r3
 8001486:	3e1f      	subs	r6, #31
 8001488:	40f0      	lsrs	r0, r6
 800148a:	2a20      	cmp	r2, #32
 800148c:	d003      	beq.n	8001496 <__aeabi_dadd+0x43a>
 800148e:	2140      	movs	r1, #64	; 0x40
 8001490:	1a8a      	subs	r2, r1, r2
 8001492:	4093      	lsls	r3, r2
 8001494:	431d      	orrs	r5, r3
 8001496:	1e69      	subs	r1, r5, #1
 8001498:	418d      	sbcs	r5, r1
 800149a:	2300      	movs	r3, #0
 800149c:	2600      	movs	r6, #0
 800149e:	4698      	mov	r8, r3
 80014a0:	4305      	orrs	r5, r0
 80014a2:	e6f7      	b.n	8001294 <__aeabi_dadd+0x238>
 80014a4:	0011      	movs	r1, r2
 80014a6:	4665      	mov	r5, ip
 80014a8:	3920      	subs	r1, #32
 80014aa:	40cd      	lsrs	r5, r1
 80014ac:	2a20      	cmp	r2, #32
 80014ae:	d004      	beq.n	80014ba <__aeabi_dadd+0x45e>
 80014b0:	2040      	movs	r0, #64	; 0x40
 80014b2:	4661      	mov	r1, ip
 80014b4:	1a82      	subs	r2, r0, r2
 80014b6:	4091      	lsls	r1, r2
 80014b8:	430f      	orrs	r7, r1
 80014ba:	0039      	movs	r1, r7
 80014bc:	1e4f      	subs	r7, r1, #1
 80014be:	41b9      	sbcs	r1, r7
 80014c0:	4329      	orrs	r1, r5
 80014c2:	e60f      	b.n	80010e4 <__aeabi_dadd+0x88>
 80014c4:	464a      	mov	r2, r9
 80014c6:	4313      	orrs	r3, r2
 80014c8:	001d      	movs	r5, r3
 80014ca:	1e6b      	subs	r3, r5, #1
 80014cc:	419d      	sbcs	r5, r3
 80014ce:	1b7d      	subs	r5, r7, r5
 80014d0:	42af      	cmp	r7, r5
 80014d2:	419b      	sbcs	r3, r3
 80014d4:	4662      	mov	r2, ip
 80014d6:	425b      	negs	r3, r3
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	4698      	mov	r8, r3
 80014dc:	4654      	mov	r4, sl
 80014de:	000e      	movs	r6, r1
 80014e0:	e607      	b.n	80010f2 <__aeabi_dadd+0x96>
 80014e2:	4648      	mov	r0, r9
 80014e4:	4318      	orrs	r0, r3
 80014e6:	d100      	bne.n	80014ea <__aeabi_dadd+0x48e>
 80014e8:	e0b3      	b.n	8001652 <__aeabi_dadd+0x5f6>
 80014ea:	1e50      	subs	r0, r2, #1
 80014ec:	2a01      	cmp	r2, #1
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dadd+0x496>
 80014f0:	e10d      	b.n	800170e <__aeabi_dadd+0x6b2>
 80014f2:	4d8d      	ldr	r5, [pc, #564]	; (8001728 <__aeabi_dadd+0x6cc>)
 80014f4:	42aa      	cmp	r2, r5
 80014f6:	d100      	bne.n	80014fa <__aeabi_dadd+0x49e>
 80014f8:	e0a5      	b.n	8001646 <__aeabi_dadd+0x5ea>
 80014fa:	0002      	movs	r2, r0
 80014fc:	e710      	b.n	8001320 <__aeabi_dadd+0x2c4>
 80014fe:	0032      	movs	r2, r6
 8001500:	2300      	movs	r3, #0
 8001502:	2100      	movs	r1, #0
 8001504:	e644      	b.n	8001190 <__aeabi_dadd+0x134>
 8001506:	2120      	movs	r1, #32
 8001508:	0038      	movs	r0, r7
 800150a:	1a89      	subs	r1, r1, r2
 800150c:	4665      	mov	r5, ip
 800150e:	408f      	lsls	r7, r1
 8001510:	408d      	lsls	r5, r1
 8001512:	40d0      	lsrs	r0, r2
 8001514:	1e79      	subs	r1, r7, #1
 8001516:	418f      	sbcs	r7, r1
 8001518:	4305      	orrs	r5, r0
 800151a:	433d      	orrs	r5, r7
 800151c:	4667      	mov	r7, ip
 800151e:	40d7      	lsrs	r7, r2
 8001520:	19db      	adds	r3, r3, r7
 8001522:	e794      	b.n	800144e <__aeabi_dadd+0x3f2>
 8001524:	4a80      	ldr	r2, [pc, #512]	; (8001728 <__aeabi_dadd+0x6cc>)
 8001526:	4290      	cmp	r0, r2
 8001528:	d100      	bne.n	800152c <__aeabi_dadd+0x4d0>
 800152a:	e0ec      	b.n	8001706 <__aeabi_dadd+0x6aa>
 800152c:	0039      	movs	r1, r7
 800152e:	4449      	add	r1, r9
 8001530:	4549      	cmp	r1, r9
 8001532:	4192      	sbcs	r2, r2
 8001534:	4463      	add	r3, ip
 8001536:	4252      	negs	r2, r2
 8001538:	189b      	adds	r3, r3, r2
 800153a:	07dd      	lsls	r5, r3, #31
 800153c:	0849      	lsrs	r1, r1, #1
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	4698      	mov	r8, r3
 8001542:	0006      	movs	r6, r0
 8001544:	430d      	orrs	r5, r1
 8001546:	e6a5      	b.n	8001294 <__aeabi_dadd+0x238>
 8001548:	464a      	mov	r2, r9
 800154a:	1abd      	subs	r5, r7, r2
 800154c:	42af      	cmp	r7, r5
 800154e:	4189      	sbcs	r1, r1
 8001550:	4662      	mov	r2, ip
 8001552:	4249      	negs	r1, r1
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	1a5b      	subs	r3, r3, r1
 8001558:	4698      	mov	r8, r3
 800155a:	4654      	mov	r4, sl
 800155c:	e5d1      	b.n	8001102 <__aeabi_dadd+0xa6>
 800155e:	076c      	lsls	r4, r5, #29
 8001560:	08f9      	lsrs	r1, r7, #3
 8001562:	4321      	orrs	r1, r4
 8001564:	08eb      	lsrs	r3, r5, #3
 8001566:	0004      	movs	r4, r0
 8001568:	e69d      	b.n	80012a6 <__aeabi_dadd+0x24a>
 800156a:	464a      	mov	r2, r9
 800156c:	431a      	orrs	r2, r3
 800156e:	d175      	bne.n	800165c <__aeabi_dadd+0x600>
 8001570:	4661      	mov	r1, ip
 8001572:	4339      	orrs	r1, r7
 8001574:	d114      	bne.n	80015a0 <__aeabi_dadd+0x544>
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	2400      	movs	r4, #0
 800157a:	031b      	lsls	r3, r3, #12
 800157c:	e6bc      	b.n	80012f8 <__aeabi_dadd+0x29c>
 800157e:	464a      	mov	r2, r9
 8001580:	1bd5      	subs	r5, r2, r7
 8001582:	45a9      	cmp	r9, r5
 8001584:	4189      	sbcs	r1, r1
 8001586:	4662      	mov	r2, ip
 8001588:	4249      	negs	r1, r1
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	1a5b      	subs	r3, r3, r1
 800158e:	4698      	mov	r8, r3
 8001590:	2601      	movs	r6, #1
 8001592:	e5ae      	b.n	80010f2 <__aeabi_dadd+0x96>
 8001594:	464a      	mov	r2, r9
 8001596:	08d1      	lsrs	r1, r2, #3
 8001598:	075a      	lsls	r2, r3, #29
 800159a:	4311      	orrs	r1, r2
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	e6a7      	b.n	80012f0 <__aeabi_dadd+0x294>
 80015a0:	4663      	mov	r3, ip
 80015a2:	08f9      	lsrs	r1, r7, #3
 80015a4:	075a      	lsls	r2, r3, #29
 80015a6:	4654      	mov	r4, sl
 80015a8:	4311      	orrs	r1, r2
 80015aa:	08db      	lsrs	r3, r3, #3
 80015ac:	e6a0      	b.n	80012f0 <__aeabi_dadd+0x294>
 80015ae:	464a      	mov	r2, r9
 80015b0:	4313      	orrs	r3, r2
 80015b2:	001d      	movs	r5, r3
 80015b4:	1e6b      	subs	r3, r5, #1
 80015b6:	419d      	sbcs	r5, r3
 80015b8:	e6c7      	b.n	800134a <__aeabi_dadd+0x2ee>
 80015ba:	0014      	movs	r4, r2
 80015bc:	001e      	movs	r6, r3
 80015be:	3c20      	subs	r4, #32
 80015c0:	40e6      	lsrs	r6, r4
 80015c2:	2a20      	cmp	r2, #32
 80015c4:	d005      	beq.n	80015d2 <__aeabi_dadd+0x576>
 80015c6:	2440      	movs	r4, #64	; 0x40
 80015c8:	1aa2      	subs	r2, r4, r2
 80015ca:	4093      	lsls	r3, r2
 80015cc:	464a      	mov	r2, r9
 80015ce:	431a      	orrs	r2, r3
 80015d0:	4691      	mov	r9, r2
 80015d2:	464d      	mov	r5, r9
 80015d4:	1e6b      	subs	r3, r5, #1
 80015d6:	419d      	sbcs	r5, r3
 80015d8:	4335      	orrs	r5, r6
 80015da:	e778      	b.n	80014ce <__aeabi_dadd+0x472>
 80015dc:	464a      	mov	r2, r9
 80015de:	431a      	orrs	r2, r3
 80015e0:	d000      	beq.n	80015e4 <__aeabi_dadd+0x588>
 80015e2:	e66b      	b.n	80012bc <__aeabi_dadd+0x260>
 80015e4:	076b      	lsls	r3, r5, #29
 80015e6:	08f9      	lsrs	r1, r7, #3
 80015e8:	4319      	orrs	r1, r3
 80015ea:	08eb      	lsrs	r3, r5, #3
 80015ec:	e680      	b.n	80012f0 <__aeabi_dadd+0x294>
 80015ee:	4661      	mov	r1, ip
 80015f0:	4339      	orrs	r1, r7
 80015f2:	d054      	beq.n	800169e <__aeabi_dadd+0x642>
 80015f4:	4663      	mov	r3, ip
 80015f6:	08f9      	lsrs	r1, r7, #3
 80015f8:	075c      	lsls	r4, r3, #29
 80015fa:	4321      	orrs	r1, r4
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	0004      	movs	r4, r0
 8001600:	e654      	b.n	80012ac <__aeabi_dadd+0x250>
 8001602:	464a      	mov	r2, r9
 8001604:	1abd      	subs	r5, r7, r2
 8001606:	42af      	cmp	r7, r5
 8001608:	4189      	sbcs	r1, r1
 800160a:	4662      	mov	r2, ip
 800160c:	4249      	negs	r1, r1
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	1a5b      	subs	r3, r3, r1
 8001612:	4698      	mov	r8, r3
 8001614:	0004      	movs	r4, r0
 8001616:	2601      	movs	r6, #1
 8001618:	e56b      	b.n	80010f2 <__aeabi_dadd+0x96>
 800161a:	464a      	mov	r2, r9
 800161c:	1bd5      	subs	r5, r2, r7
 800161e:	45a9      	cmp	r9, r5
 8001620:	4189      	sbcs	r1, r1
 8001622:	4662      	mov	r2, ip
 8001624:	4249      	negs	r1, r1
 8001626:	1a9a      	subs	r2, r3, r2
 8001628:	1a52      	subs	r2, r2, r1
 800162a:	4690      	mov	r8, r2
 800162c:	0212      	lsls	r2, r2, #8
 800162e:	d532      	bpl.n	8001696 <__aeabi_dadd+0x63a>
 8001630:	464a      	mov	r2, r9
 8001632:	1abd      	subs	r5, r7, r2
 8001634:	42af      	cmp	r7, r5
 8001636:	4189      	sbcs	r1, r1
 8001638:	4662      	mov	r2, ip
 800163a:	4249      	negs	r1, r1
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	1a5b      	subs	r3, r3, r1
 8001640:	4698      	mov	r8, r3
 8001642:	0004      	movs	r4, r0
 8001644:	e584      	b.n	8001150 <__aeabi_dadd+0xf4>
 8001646:	4663      	mov	r3, ip
 8001648:	08f9      	lsrs	r1, r7, #3
 800164a:	075a      	lsls	r2, r3, #29
 800164c:	4311      	orrs	r1, r2
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	e64e      	b.n	80012f0 <__aeabi_dadd+0x294>
 8001652:	08f9      	lsrs	r1, r7, #3
 8001654:	0768      	lsls	r0, r5, #29
 8001656:	4301      	orrs	r1, r0
 8001658:	08eb      	lsrs	r3, r5, #3
 800165a:	e624      	b.n	80012a6 <__aeabi_dadd+0x24a>
 800165c:	4662      	mov	r2, ip
 800165e:	433a      	orrs	r2, r7
 8001660:	d100      	bne.n	8001664 <__aeabi_dadd+0x608>
 8001662:	e698      	b.n	8001396 <__aeabi_dadd+0x33a>
 8001664:	464a      	mov	r2, r9
 8001666:	08d1      	lsrs	r1, r2, #3
 8001668:	075a      	lsls	r2, r3, #29
 800166a:	4311      	orrs	r1, r2
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	031b      	lsls	r3, r3, #12
 8001672:	421a      	tst	r2, r3
 8001674:	d008      	beq.n	8001688 <__aeabi_dadd+0x62c>
 8001676:	4660      	mov	r0, ip
 8001678:	08c5      	lsrs	r5, r0, #3
 800167a:	421d      	tst	r5, r3
 800167c:	d104      	bne.n	8001688 <__aeabi_dadd+0x62c>
 800167e:	4654      	mov	r4, sl
 8001680:	002a      	movs	r2, r5
 8001682:	08f9      	lsrs	r1, r7, #3
 8001684:	0743      	lsls	r3, r0, #29
 8001686:	4319      	orrs	r1, r3
 8001688:	0f4b      	lsrs	r3, r1, #29
 800168a:	00c9      	lsls	r1, r1, #3
 800168c:	075b      	lsls	r3, r3, #29
 800168e:	08c9      	lsrs	r1, r1, #3
 8001690:	4319      	orrs	r1, r3
 8001692:	0013      	movs	r3, r2
 8001694:	e62c      	b.n	80012f0 <__aeabi_dadd+0x294>
 8001696:	4641      	mov	r1, r8
 8001698:	4329      	orrs	r1, r5
 800169a:	d000      	beq.n	800169e <__aeabi_dadd+0x642>
 800169c:	e5fa      	b.n	8001294 <__aeabi_dadd+0x238>
 800169e:	2300      	movs	r3, #0
 80016a0:	000a      	movs	r2, r1
 80016a2:	2400      	movs	r4, #0
 80016a4:	e602      	b.n	80012ac <__aeabi_dadd+0x250>
 80016a6:	076b      	lsls	r3, r5, #29
 80016a8:	08f9      	lsrs	r1, r7, #3
 80016aa:	4319      	orrs	r1, r3
 80016ac:	08eb      	lsrs	r3, r5, #3
 80016ae:	e5fd      	b.n	80012ac <__aeabi_dadd+0x250>
 80016b0:	4663      	mov	r3, ip
 80016b2:	08f9      	lsrs	r1, r7, #3
 80016b4:	075b      	lsls	r3, r3, #29
 80016b6:	4319      	orrs	r1, r3
 80016b8:	4663      	mov	r3, ip
 80016ba:	0004      	movs	r4, r0
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	e617      	b.n	80012f0 <__aeabi_dadd+0x294>
 80016c0:	003d      	movs	r5, r7
 80016c2:	444d      	add	r5, r9
 80016c4:	4463      	add	r3, ip
 80016c6:	454d      	cmp	r5, r9
 80016c8:	4189      	sbcs	r1, r1
 80016ca:	4698      	mov	r8, r3
 80016cc:	4249      	negs	r1, r1
 80016ce:	4488      	add	r8, r1
 80016d0:	4643      	mov	r3, r8
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	d400      	bmi.n	80016d8 <__aeabi_dadd+0x67c>
 80016d6:	e5dd      	b.n	8001294 <__aeabi_dadd+0x238>
 80016d8:	4642      	mov	r2, r8
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <__aeabi_dadd+0x6d0>)
 80016dc:	2601      	movs	r6, #1
 80016de:	401a      	ands	r2, r3
 80016e0:	4690      	mov	r8, r2
 80016e2:	e5d7      	b.n	8001294 <__aeabi_dadd+0x238>
 80016e4:	0010      	movs	r0, r2
 80016e6:	001e      	movs	r6, r3
 80016e8:	3820      	subs	r0, #32
 80016ea:	40c6      	lsrs	r6, r0
 80016ec:	2a20      	cmp	r2, #32
 80016ee:	d005      	beq.n	80016fc <__aeabi_dadd+0x6a0>
 80016f0:	2040      	movs	r0, #64	; 0x40
 80016f2:	1a82      	subs	r2, r0, r2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	464a      	mov	r2, r9
 80016f8:	431a      	orrs	r2, r3
 80016fa:	4691      	mov	r9, r2
 80016fc:	464d      	mov	r5, r9
 80016fe:	1e6b      	subs	r3, r5, #1
 8001700:	419d      	sbcs	r5, r3
 8001702:	4335      	orrs	r5, r6
 8001704:	e621      	b.n	800134a <__aeabi_dadd+0x2ee>
 8001706:	0002      	movs	r2, r0
 8001708:	2300      	movs	r3, #0
 800170a:	2100      	movs	r1, #0
 800170c:	e540      	b.n	8001190 <__aeabi_dadd+0x134>
 800170e:	464a      	mov	r2, r9
 8001710:	19d5      	adds	r5, r2, r7
 8001712:	42bd      	cmp	r5, r7
 8001714:	4189      	sbcs	r1, r1
 8001716:	4463      	add	r3, ip
 8001718:	4698      	mov	r8, r3
 800171a:	4249      	negs	r1, r1
 800171c:	4488      	add	r8, r1
 800171e:	e5b3      	b.n	8001288 <__aeabi_dadd+0x22c>
 8001720:	2100      	movs	r1, #0
 8001722:	4a01      	ldr	r2, [pc, #4]	; (8001728 <__aeabi_dadd+0x6cc>)
 8001724:	000b      	movs	r3, r1
 8001726:	e533      	b.n	8001190 <__aeabi_dadd+0x134>
 8001728:	000007ff 	.word	0x000007ff
 800172c:	ff7fffff 	.word	0xff7fffff

08001730 <__aeabi_ddiv>:
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	4657      	mov	r7, sl
 8001734:	464e      	mov	r6, r9
 8001736:	4645      	mov	r5, r8
 8001738:	46de      	mov	lr, fp
 800173a:	b5e0      	push	{r5, r6, r7, lr}
 800173c:	4681      	mov	r9, r0
 800173e:	0005      	movs	r5, r0
 8001740:	030c      	lsls	r4, r1, #12
 8001742:	0048      	lsls	r0, r1, #1
 8001744:	4692      	mov	sl, r2
 8001746:	001f      	movs	r7, r3
 8001748:	b085      	sub	sp, #20
 800174a:	0b24      	lsrs	r4, r4, #12
 800174c:	0d40      	lsrs	r0, r0, #21
 800174e:	0fce      	lsrs	r6, r1, #31
 8001750:	2800      	cmp	r0, #0
 8001752:	d059      	beq.n	8001808 <__aeabi_ddiv+0xd8>
 8001754:	4b87      	ldr	r3, [pc, #540]	; (8001974 <__aeabi_ddiv+0x244>)
 8001756:	4298      	cmp	r0, r3
 8001758:	d100      	bne.n	800175c <__aeabi_ddiv+0x2c>
 800175a:	e098      	b.n	800188e <__aeabi_ddiv+0x15e>
 800175c:	0f6b      	lsrs	r3, r5, #29
 800175e:	00e4      	lsls	r4, r4, #3
 8001760:	431c      	orrs	r4, r3
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	041b      	lsls	r3, r3, #16
 8001766:	4323      	orrs	r3, r4
 8001768:	4698      	mov	r8, r3
 800176a:	4b83      	ldr	r3, [pc, #524]	; (8001978 <__aeabi_ddiv+0x248>)
 800176c:	00ed      	lsls	r5, r5, #3
 800176e:	469b      	mov	fp, r3
 8001770:	2300      	movs	r3, #0
 8001772:	4699      	mov	r9, r3
 8001774:	4483      	add	fp, r0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	033c      	lsls	r4, r7, #12
 800177a:	007b      	lsls	r3, r7, #1
 800177c:	4650      	mov	r0, sl
 800177e:	0b24      	lsrs	r4, r4, #12
 8001780:	0d5b      	lsrs	r3, r3, #21
 8001782:	0fff      	lsrs	r7, r7, #31
 8001784:	2b00      	cmp	r3, #0
 8001786:	d067      	beq.n	8001858 <__aeabi_ddiv+0x128>
 8001788:	4a7a      	ldr	r2, [pc, #488]	; (8001974 <__aeabi_ddiv+0x244>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d018      	beq.n	80017c0 <__aeabi_ddiv+0x90>
 800178e:	497a      	ldr	r1, [pc, #488]	; (8001978 <__aeabi_ddiv+0x248>)
 8001790:	0f42      	lsrs	r2, r0, #29
 8001792:	468c      	mov	ip, r1
 8001794:	00e4      	lsls	r4, r4, #3
 8001796:	4659      	mov	r1, fp
 8001798:	4314      	orrs	r4, r2
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	4463      	add	r3, ip
 800179e:	0412      	lsls	r2, r2, #16
 80017a0:	1acb      	subs	r3, r1, r3
 80017a2:	4314      	orrs	r4, r2
 80017a4:	469b      	mov	fp, r3
 80017a6:	00c2      	lsls	r2, r0, #3
 80017a8:	2000      	movs	r0, #0
 80017aa:	0033      	movs	r3, r6
 80017ac:	407b      	eors	r3, r7
 80017ae:	469a      	mov	sl, r3
 80017b0:	464b      	mov	r3, r9
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	d900      	bls.n	80017b8 <__aeabi_ddiv+0x88>
 80017b6:	e0ef      	b.n	8001998 <__aeabi_ddiv+0x268>
 80017b8:	4970      	ldr	r1, [pc, #448]	; (800197c <__aeabi_ddiv+0x24c>)
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	58cb      	ldr	r3, [r1, r3]
 80017be:	469f      	mov	pc, r3
 80017c0:	4b6f      	ldr	r3, [pc, #444]	; (8001980 <__aeabi_ddiv+0x250>)
 80017c2:	4652      	mov	r2, sl
 80017c4:	469c      	mov	ip, r3
 80017c6:	4322      	orrs	r2, r4
 80017c8:	44e3      	add	fp, ip
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d000      	beq.n	80017d0 <__aeabi_ddiv+0xa0>
 80017ce:	e095      	b.n	80018fc <__aeabi_ddiv+0x1cc>
 80017d0:	4649      	mov	r1, r9
 80017d2:	2302      	movs	r3, #2
 80017d4:	4319      	orrs	r1, r3
 80017d6:	4689      	mov	r9, r1
 80017d8:	2400      	movs	r4, #0
 80017da:	2002      	movs	r0, #2
 80017dc:	e7e5      	b.n	80017aa <__aeabi_ddiv+0x7a>
 80017de:	2300      	movs	r3, #0
 80017e0:	2400      	movs	r4, #0
 80017e2:	2500      	movs	r5, #0
 80017e4:	4652      	mov	r2, sl
 80017e6:	051b      	lsls	r3, r3, #20
 80017e8:	4323      	orrs	r3, r4
 80017ea:	07d2      	lsls	r2, r2, #31
 80017ec:	4313      	orrs	r3, r2
 80017ee:	0028      	movs	r0, r5
 80017f0:	0019      	movs	r1, r3
 80017f2:	b005      	add	sp, #20
 80017f4:	bcf0      	pop	{r4, r5, r6, r7}
 80017f6:	46bb      	mov	fp, r7
 80017f8:	46b2      	mov	sl, r6
 80017fa:	46a9      	mov	r9, r5
 80017fc:	46a0      	mov	r8, r4
 80017fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001800:	2400      	movs	r4, #0
 8001802:	2500      	movs	r5, #0
 8001804:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <__aeabi_ddiv+0x244>)
 8001806:	e7ed      	b.n	80017e4 <__aeabi_ddiv+0xb4>
 8001808:	464b      	mov	r3, r9
 800180a:	4323      	orrs	r3, r4
 800180c:	4698      	mov	r8, r3
 800180e:	d100      	bne.n	8001812 <__aeabi_ddiv+0xe2>
 8001810:	e089      	b.n	8001926 <__aeabi_ddiv+0x1f6>
 8001812:	2c00      	cmp	r4, #0
 8001814:	d100      	bne.n	8001818 <__aeabi_ddiv+0xe8>
 8001816:	e1e0      	b.n	8001bda <__aeabi_ddiv+0x4aa>
 8001818:	0020      	movs	r0, r4
 800181a:	f001 fb07 	bl	8002e2c <__clzsi2>
 800181e:	0001      	movs	r1, r0
 8001820:	0002      	movs	r2, r0
 8001822:	390b      	subs	r1, #11
 8001824:	231d      	movs	r3, #29
 8001826:	1a5b      	subs	r3, r3, r1
 8001828:	4649      	mov	r1, r9
 800182a:	0010      	movs	r0, r2
 800182c:	40d9      	lsrs	r1, r3
 800182e:	3808      	subs	r0, #8
 8001830:	4084      	lsls	r4, r0
 8001832:	000b      	movs	r3, r1
 8001834:	464d      	mov	r5, r9
 8001836:	4323      	orrs	r3, r4
 8001838:	4698      	mov	r8, r3
 800183a:	4085      	lsls	r5, r0
 800183c:	4851      	ldr	r0, [pc, #324]	; (8001984 <__aeabi_ddiv+0x254>)
 800183e:	033c      	lsls	r4, r7, #12
 8001840:	1a83      	subs	r3, r0, r2
 8001842:	469b      	mov	fp, r3
 8001844:	2300      	movs	r3, #0
 8001846:	4699      	mov	r9, r3
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	007b      	lsls	r3, r7, #1
 800184c:	4650      	mov	r0, sl
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	0d5b      	lsrs	r3, r3, #21
 8001852:	0fff      	lsrs	r7, r7, #31
 8001854:	2b00      	cmp	r3, #0
 8001856:	d197      	bne.n	8001788 <__aeabi_ddiv+0x58>
 8001858:	4652      	mov	r2, sl
 800185a:	4322      	orrs	r2, r4
 800185c:	d055      	beq.n	800190a <__aeabi_ddiv+0x1da>
 800185e:	2c00      	cmp	r4, #0
 8001860:	d100      	bne.n	8001864 <__aeabi_ddiv+0x134>
 8001862:	e1ca      	b.n	8001bfa <__aeabi_ddiv+0x4ca>
 8001864:	0020      	movs	r0, r4
 8001866:	f001 fae1 	bl	8002e2c <__clzsi2>
 800186a:	0002      	movs	r2, r0
 800186c:	3a0b      	subs	r2, #11
 800186e:	231d      	movs	r3, #29
 8001870:	0001      	movs	r1, r0
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	4652      	mov	r2, sl
 8001876:	3908      	subs	r1, #8
 8001878:	40da      	lsrs	r2, r3
 800187a:	408c      	lsls	r4, r1
 800187c:	4314      	orrs	r4, r2
 800187e:	4652      	mov	r2, sl
 8001880:	408a      	lsls	r2, r1
 8001882:	4b41      	ldr	r3, [pc, #260]	; (8001988 <__aeabi_ddiv+0x258>)
 8001884:	4458      	add	r0, fp
 8001886:	469b      	mov	fp, r3
 8001888:	4483      	add	fp, r0
 800188a:	2000      	movs	r0, #0
 800188c:	e78d      	b.n	80017aa <__aeabi_ddiv+0x7a>
 800188e:	464b      	mov	r3, r9
 8001890:	4323      	orrs	r3, r4
 8001892:	4698      	mov	r8, r3
 8001894:	d140      	bne.n	8001918 <__aeabi_ddiv+0x1e8>
 8001896:	2308      	movs	r3, #8
 8001898:	4699      	mov	r9, r3
 800189a:	3b06      	subs	r3, #6
 800189c:	2500      	movs	r5, #0
 800189e:	4683      	mov	fp, r0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	e769      	b.n	8001778 <__aeabi_ddiv+0x48>
 80018a4:	46b2      	mov	sl, r6
 80018a6:	9b00      	ldr	r3, [sp, #0]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d0a9      	beq.n	8001800 <__aeabi_ddiv+0xd0>
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d100      	bne.n	80018b2 <__aeabi_ddiv+0x182>
 80018b0:	e211      	b.n	8001cd6 <__aeabi_ddiv+0x5a6>
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d093      	beq.n	80017de <__aeabi_ddiv+0xae>
 80018b6:	4a35      	ldr	r2, [pc, #212]	; (800198c <__aeabi_ddiv+0x25c>)
 80018b8:	445a      	add	r2, fp
 80018ba:	2a00      	cmp	r2, #0
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_ddiv+0x190>
 80018be:	e13c      	b.n	8001b3a <__aeabi_ddiv+0x40a>
 80018c0:	076b      	lsls	r3, r5, #29
 80018c2:	d000      	beq.n	80018c6 <__aeabi_ddiv+0x196>
 80018c4:	e1a7      	b.n	8001c16 <__aeabi_ddiv+0x4e6>
 80018c6:	08ed      	lsrs	r5, r5, #3
 80018c8:	4643      	mov	r3, r8
 80018ca:	01db      	lsls	r3, r3, #7
 80018cc:	d506      	bpl.n	80018dc <__aeabi_ddiv+0x1ac>
 80018ce:	4642      	mov	r2, r8
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <__aeabi_ddiv+0x260>)
 80018d2:	401a      	ands	r2, r3
 80018d4:	4690      	mov	r8, r2
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	00d2      	lsls	r2, r2, #3
 80018da:	445a      	add	r2, fp
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <__aeabi_ddiv+0x264>)
 80018de:	429a      	cmp	r2, r3
 80018e0:	dc8e      	bgt.n	8001800 <__aeabi_ddiv+0xd0>
 80018e2:	4643      	mov	r3, r8
 80018e4:	0552      	lsls	r2, r2, #21
 80018e6:	0758      	lsls	r0, r3, #29
 80018e8:	025c      	lsls	r4, r3, #9
 80018ea:	4305      	orrs	r5, r0
 80018ec:	0b24      	lsrs	r4, r4, #12
 80018ee:	0d53      	lsrs	r3, r2, #21
 80018f0:	e778      	b.n	80017e4 <__aeabi_ddiv+0xb4>
 80018f2:	46ba      	mov	sl, r7
 80018f4:	46a0      	mov	r8, r4
 80018f6:	0015      	movs	r5, r2
 80018f8:	9000      	str	r0, [sp, #0]
 80018fa:	e7d4      	b.n	80018a6 <__aeabi_ddiv+0x176>
 80018fc:	464a      	mov	r2, r9
 80018fe:	2303      	movs	r3, #3
 8001900:	431a      	orrs	r2, r3
 8001902:	4691      	mov	r9, r2
 8001904:	2003      	movs	r0, #3
 8001906:	4652      	mov	r2, sl
 8001908:	e74f      	b.n	80017aa <__aeabi_ddiv+0x7a>
 800190a:	4649      	mov	r1, r9
 800190c:	2301      	movs	r3, #1
 800190e:	4319      	orrs	r1, r3
 8001910:	4689      	mov	r9, r1
 8001912:	2400      	movs	r4, #0
 8001914:	2001      	movs	r0, #1
 8001916:	e748      	b.n	80017aa <__aeabi_ddiv+0x7a>
 8001918:	230c      	movs	r3, #12
 800191a:	4699      	mov	r9, r3
 800191c:	3b09      	subs	r3, #9
 800191e:	46a0      	mov	r8, r4
 8001920:	4683      	mov	fp, r0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	e728      	b.n	8001778 <__aeabi_ddiv+0x48>
 8001926:	2304      	movs	r3, #4
 8001928:	4699      	mov	r9, r3
 800192a:	2300      	movs	r3, #0
 800192c:	469b      	mov	fp, r3
 800192e:	3301      	adds	r3, #1
 8001930:	2500      	movs	r5, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	e720      	b.n	8001778 <__aeabi_ddiv+0x48>
 8001936:	2300      	movs	r3, #0
 8001938:	2480      	movs	r4, #128	; 0x80
 800193a:	469a      	mov	sl, r3
 800193c:	2500      	movs	r5, #0
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <__aeabi_ddiv+0x244>)
 8001940:	0324      	lsls	r4, r4, #12
 8001942:	e74f      	b.n	80017e4 <__aeabi_ddiv+0xb4>
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	4641      	mov	r1, r8
 8001948:	031b      	lsls	r3, r3, #12
 800194a:	4219      	tst	r1, r3
 800194c:	d008      	beq.n	8001960 <__aeabi_ddiv+0x230>
 800194e:	421c      	tst	r4, r3
 8001950:	d106      	bne.n	8001960 <__aeabi_ddiv+0x230>
 8001952:	431c      	orrs	r4, r3
 8001954:	0324      	lsls	r4, r4, #12
 8001956:	46ba      	mov	sl, r7
 8001958:	0015      	movs	r5, r2
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <__aeabi_ddiv+0x244>)
 800195c:	0b24      	lsrs	r4, r4, #12
 800195e:	e741      	b.n	80017e4 <__aeabi_ddiv+0xb4>
 8001960:	2480      	movs	r4, #128	; 0x80
 8001962:	4643      	mov	r3, r8
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	431c      	orrs	r4, r3
 8001968:	0324      	lsls	r4, r4, #12
 800196a:	46b2      	mov	sl, r6
 800196c:	4b01      	ldr	r3, [pc, #4]	; (8001974 <__aeabi_ddiv+0x244>)
 800196e:	0b24      	lsrs	r4, r4, #12
 8001970:	e738      	b.n	80017e4 <__aeabi_ddiv+0xb4>
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	000007ff 	.word	0x000007ff
 8001978:	fffffc01 	.word	0xfffffc01
 800197c:	0801a450 	.word	0x0801a450
 8001980:	fffff801 	.word	0xfffff801
 8001984:	fffffc0d 	.word	0xfffffc0d
 8001988:	000003f3 	.word	0x000003f3
 800198c:	000003ff 	.word	0x000003ff
 8001990:	feffffff 	.word	0xfeffffff
 8001994:	000007fe 	.word	0x000007fe
 8001998:	4544      	cmp	r4, r8
 800199a:	d200      	bcs.n	800199e <__aeabi_ddiv+0x26e>
 800199c:	e116      	b.n	8001bcc <__aeabi_ddiv+0x49c>
 800199e:	d100      	bne.n	80019a2 <__aeabi_ddiv+0x272>
 80019a0:	e111      	b.n	8001bc6 <__aeabi_ddiv+0x496>
 80019a2:	2301      	movs	r3, #1
 80019a4:	425b      	negs	r3, r3
 80019a6:	469c      	mov	ip, r3
 80019a8:	002e      	movs	r6, r5
 80019aa:	4640      	mov	r0, r8
 80019ac:	2500      	movs	r5, #0
 80019ae:	44e3      	add	fp, ip
 80019b0:	0223      	lsls	r3, r4, #8
 80019b2:	0e14      	lsrs	r4, r2, #24
 80019b4:	431c      	orrs	r4, r3
 80019b6:	0c1b      	lsrs	r3, r3, #16
 80019b8:	4699      	mov	r9, r3
 80019ba:	0423      	lsls	r3, r4, #16
 80019bc:	0c1f      	lsrs	r7, r3, #16
 80019be:	0212      	lsls	r2, r2, #8
 80019c0:	4649      	mov	r1, r9
 80019c2:	9200      	str	r2, [sp, #0]
 80019c4:	9701      	str	r7, [sp, #4]
 80019c6:	f7fe fc49 	bl	800025c <__aeabi_uidivmod>
 80019ca:	0002      	movs	r2, r0
 80019cc:	437a      	muls	r2, r7
 80019ce:	040b      	lsls	r3, r1, #16
 80019d0:	0c31      	lsrs	r1, r6, #16
 80019d2:	4680      	mov	r8, r0
 80019d4:	4319      	orrs	r1, r3
 80019d6:	428a      	cmp	r2, r1
 80019d8:	d90b      	bls.n	80019f2 <__aeabi_ddiv+0x2c2>
 80019da:	2301      	movs	r3, #1
 80019dc:	425b      	negs	r3, r3
 80019de:	469c      	mov	ip, r3
 80019e0:	1909      	adds	r1, r1, r4
 80019e2:	44e0      	add	r8, ip
 80019e4:	428c      	cmp	r4, r1
 80019e6:	d804      	bhi.n	80019f2 <__aeabi_ddiv+0x2c2>
 80019e8:	428a      	cmp	r2, r1
 80019ea:	d902      	bls.n	80019f2 <__aeabi_ddiv+0x2c2>
 80019ec:	1e83      	subs	r3, r0, #2
 80019ee:	4698      	mov	r8, r3
 80019f0:	1909      	adds	r1, r1, r4
 80019f2:	1a88      	subs	r0, r1, r2
 80019f4:	4649      	mov	r1, r9
 80019f6:	f7fe fc31 	bl	800025c <__aeabi_uidivmod>
 80019fa:	0409      	lsls	r1, r1, #16
 80019fc:	468c      	mov	ip, r1
 80019fe:	0431      	lsls	r1, r6, #16
 8001a00:	4666      	mov	r6, ip
 8001a02:	9a01      	ldr	r2, [sp, #4]
 8001a04:	0c09      	lsrs	r1, r1, #16
 8001a06:	4342      	muls	r2, r0
 8001a08:	0003      	movs	r3, r0
 8001a0a:	4331      	orrs	r1, r6
 8001a0c:	428a      	cmp	r2, r1
 8001a0e:	d904      	bls.n	8001a1a <__aeabi_ddiv+0x2ea>
 8001a10:	1909      	adds	r1, r1, r4
 8001a12:	3b01      	subs	r3, #1
 8001a14:	428c      	cmp	r4, r1
 8001a16:	d800      	bhi.n	8001a1a <__aeabi_ddiv+0x2ea>
 8001a18:	e111      	b.n	8001c3e <__aeabi_ddiv+0x50e>
 8001a1a:	1a89      	subs	r1, r1, r2
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	9e00      	ldr	r6, [sp, #0]
 8001a20:	0412      	lsls	r2, r2, #16
 8001a22:	431a      	orrs	r2, r3
 8001a24:	0c33      	lsrs	r3, r6, #16
 8001a26:	001f      	movs	r7, r3
 8001a28:	0c10      	lsrs	r0, r2, #16
 8001a2a:	4690      	mov	r8, r2
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	0413      	lsls	r3, r2, #16
 8001a30:	0432      	lsls	r2, r6, #16
 8001a32:	0c16      	lsrs	r6, r2, #16
 8001a34:	0032      	movs	r2, r6
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	435a      	muls	r2, r3
 8001a3a:	9603      	str	r6, [sp, #12]
 8001a3c:	437b      	muls	r3, r7
 8001a3e:	4346      	muls	r6, r0
 8001a40:	4378      	muls	r0, r7
 8001a42:	0c17      	lsrs	r7, r2, #16
 8001a44:	46bc      	mov	ip, r7
 8001a46:	199b      	adds	r3, r3, r6
 8001a48:	4463      	add	r3, ip
 8001a4a:	429e      	cmp	r6, r3
 8001a4c:	d903      	bls.n	8001a56 <__aeabi_ddiv+0x326>
 8001a4e:	2680      	movs	r6, #128	; 0x80
 8001a50:	0276      	lsls	r6, r6, #9
 8001a52:	46b4      	mov	ip, r6
 8001a54:	4460      	add	r0, ip
 8001a56:	0c1e      	lsrs	r6, r3, #16
 8001a58:	1830      	adds	r0, r6, r0
 8001a5a:	0416      	lsls	r6, r2, #16
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	0c36      	lsrs	r6, r6, #16
 8001a60:	199e      	adds	r6, r3, r6
 8001a62:	4281      	cmp	r1, r0
 8001a64:	d200      	bcs.n	8001a68 <__aeabi_ddiv+0x338>
 8001a66:	e09c      	b.n	8001ba2 <__aeabi_ddiv+0x472>
 8001a68:	d100      	bne.n	8001a6c <__aeabi_ddiv+0x33c>
 8001a6a:	e097      	b.n	8001b9c <__aeabi_ddiv+0x46c>
 8001a6c:	1bae      	subs	r6, r5, r6
 8001a6e:	1a09      	subs	r1, r1, r0
 8001a70:	42b5      	cmp	r5, r6
 8001a72:	4180      	sbcs	r0, r0
 8001a74:	4240      	negs	r0, r0
 8001a76:	1a08      	subs	r0, r1, r0
 8001a78:	4284      	cmp	r4, r0
 8001a7a:	d100      	bne.n	8001a7e <__aeabi_ddiv+0x34e>
 8001a7c:	e111      	b.n	8001ca2 <__aeabi_ddiv+0x572>
 8001a7e:	4649      	mov	r1, r9
 8001a80:	f7fe fbec 	bl	800025c <__aeabi_uidivmod>
 8001a84:	9a01      	ldr	r2, [sp, #4]
 8001a86:	040b      	lsls	r3, r1, #16
 8001a88:	4342      	muls	r2, r0
 8001a8a:	0c31      	lsrs	r1, r6, #16
 8001a8c:	0005      	movs	r5, r0
 8001a8e:	4319      	orrs	r1, r3
 8001a90:	428a      	cmp	r2, r1
 8001a92:	d907      	bls.n	8001aa4 <__aeabi_ddiv+0x374>
 8001a94:	1909      	adds	r1, r1, r4
 8001a96:	3d01      	subs	r5, #1
 8001a98:	428c      	cmp	r4, r1
 8001a9a:	d803      	bhi.n	8001aa4 <__aeabi_ddiv+0x374>
 8001a9c:	428a      	cmp	r2, r1
 8001a9e:	d901      	bls.n	8001aa4 <__aeabi_ddiv+0x374>
 8001aa0:	1e85      	subs	r5, r0, #2
 8001aa2:	1909      	adds	r1, r1, r4
 8001aa4:	1a88      	subs	r0, r1, r2
 8001aa6:	4649      	mov	r1, r9
 8001aa8:	f7fe fbd8 	bl	800025c <__aeabi_uidivmod>
 8001aac:	0409      	lsls	r1, r1, #16
 8001aae:	468c      	mov	ip, r1
 8001ab0:	0431      	lsls	r1, r6, #16
 8001ab2:	4666      	mov	r6, ip
 8001ab4:	9a01      	ldr	r2, [sp, #4]
 8001ab6:	0c09      	lsrs	r1, r1, #16
 8001ab8:	4342      	muls	r2, r0
 8001aba:	0003      	movs	r3, r0
 8001abc:	4331      	orrs	r1, r6
 8001abe:	428a      	cmp	r2, r1
 8001ac0:	d907      	bls.n	8001ad2 <__aeabi_ddiv+0x3a2>
 8001ac2:	1909      	adds	r1, r1, r4
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	428c      	cmp	r4, r1
 8001ac8:	d803      	bhi.n	8001ad2 <__aeabi_ddiv+0x3a2>
 8001aca:	428a      	cmp	r2, r1
 8001acc:	d901      	bls.n	8001ad2 <__aeabi_ddiv+0x3a2>
 8001ace:	1e83      	subs	r3, r0, #2
 8001ad0:	1909      	adds	r1, r1, r4
 8001ad2:	9e03      	ldr	r6, [sp, #12]
 8001ad4:	1a89      	subs	r1, r1, r2
 8001ad6:	0032      	movs	r2, r6
 8001ad8:	042d      	lsls	r5, r5, #16
 8001ada:	431d      	orrs	r5, r3
 8001adc:	9f02      	ldr	r7, [sp, #8]
 8001ade:	042b      	lsls	r3, r5, #16
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	435a      	muls	r2, r3
 8001ae4:	437b      	muls	r3, r7
 8001ae6:	469c      	mov	ip, r3
 8001ae8:	0c28      	lsrs	r0, r5, #16
 8001aea:	4346      	muls	r6, r0
 8001aec:	0c13      	lsrs	r3, r2, #16
 8001aee:	44b4      	add	ip, r6
 8001af0:	4463      	add	r3, ip
 8001af2:	4378      	muls	r0, r7
 8001af4:	429e      	cmp	r6, r3
 8001af6:	d903      	bls.n	8001b00 <__aeabi_ddiv+0x3d0>
 8001af8:	2680      	movs	r6, #128	; 0x80
 8001afa:	0276      	lsls	r6, r6, #9
 8001afc:	46b4      	mov	ip, r6
 8001afe:	4460      	add	r0, ip
 8001b00:	0c1e      	lsrs	r6, r3, #16
 8001b02:	0412      	lsls	r2, r2, #16
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	0c12      	lsrs	r2, r2, #16
 8001b08:	1830      	adds	r0, r6, r0
 8001b0a:	189b      	adds	r3, r3, r2
 8001b0c:	4281      	cmp	r1, r0
 8001b0e:	d306      	bcc.n	8001b1e <__aeabi_ddiv+0x3ee>
 8001b10:	d002      	beq.n	8001b18 <__aeabi_ddiv+0x3e8>
 8001b12:	2301      	movs	r3, #1
 8001b14:	431d      	orrs	r5, r3
 8001b16:	e6ce      	b.n	80018b6 <__aeabi_ddiv+0x186>
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_ddiv+0x3ee>
 8001b1c:	e6cb      	b.n	80018b6 <__aeabi_ddiv+0x186>
 8001b1e:	1861      	adds	r1, r4, r1
 8001b20:	1e6e      	subs	r6, r5, #1
 8001b22:	42a1      	cmp	r1, r4
 8001b24:	d200      	bcs.n	8001b28 <__aeabi_ddiv+0x3f8>
 8001b26:	e0a4      	b.n	8001c72 <__aeabi_ddiv+0x542>
 8001b28:	4281      	cmp	r1, r0
 8001b2a:	d200      	bcs.n	8001b2e <__aeabi_ddiv+0x3fe>
 8001b2c:	e0c9      	b.n	8001cc2 <__aeabi_ddiv+0x592>
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_ddiv+0x402>
 8001b30:	e0d9      	b.n	8001ce6 <__aeabi_ddiv+0x5b6>
 8001b32:	0035      	movs	r5, r6
 8001b34:	e7ed      	b.n	8001b12 <__aeabi_ddiv+0x3e2>
 8001b36:	2501      	movs	r5, #1
 8001b38:	426d      	negs	r5, r5
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	1a89      	subs	r1, r1, r2
 8001b3e:	2938      	cmp	r1, #56	; 0x38
 8001b40:	dd00      	ble.n	8001b44 <__aeabi_ddiv+0x414>
 8001b42:	e64c      	b.n	80017de <__aeabi_ddiv+0xae>
 8001b44:	291f      	cmp	r1, #31
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_ddiv+0x41a>
 8001b48:	e07f      	b.n	8001c4a <__aeabi_ddiv+0x51a>
 8001b4a:	231f      	movs	r3, #31
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	1a9a      	subs	r2, r3, r2
 8001b50:	4643      	mov	r3, r8
 8001b52:	40d3      	lsrs	r3, r2
 8001b54:	2920      	cmp	r1, #32
 8001b56:	d004      	beq.n	8001b62 <__aeabi_ddiv+0x432>
 8001b58:	4644      	mov	r4, r8
 8001b5a:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <__aeabi_ddiv+0x5c0>)
 8001b5c:	445a      	add	r2, fp
 8001b5e:	4094      	lsls	r4, r2
 8001b60:	4325      	orrs	r5, r4
 8001b62:	1e6a      	subs	r2, r5, #1
 8001b64:	4195      	sbcs	r5, r2
 8001b66:	2207      	movs	r2, #7
 8001b68:	432b      	orrs	r3, r5
 8001b6a:	0015      	movs	r5, r2
 8001b6c:	2400      	movs	r4, #0
 8001b6e:	401d      	ands	r5, r3
 8001b70:	421a      	tst	r2, r3
 8001b72:	d100      	bne.n	8001b76 <__aeabi_ddiv+0x446>
 8001b74:	e0a1      	b.n	8001cba <__aeabi_ddiv+0x58a>
 8001b76:	220f      	movs	r2, #15
 8001b78:	2400      	movs	r4, #0
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	2a04      	cmp	r2, #4
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0x452>
 8001b80:	e098      	b.n	8001cb4 <__aeabi_ddiv+0x584>
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	429a      	cmp	r2, r3
 8001b86:	419b      	sbcs	r3, r3
 8001b88:	425b      	negs	r3, r3
 8001b8a:	18e4      	adds	r4, r4, r3
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	0222      	lsls	r2, r4, #8
 8001b90:	d400      	bmi.n	8001b94 <__aeabi_ddiv+0x464>
 8001b92:	e08f      	b.n	8001cb4 <__aeabi_ddiv+0x584>
 8001b94:	2301      	movs	r3, #1
 8001b96:	2400      	movs	r4, #0
 8001b98:	2500      	movs	r5, #0
 8001b9a:	e623      	b.n	80017e4 <__aeabi_ddiv+0xb4>
 8001b9c:	42b5      	cmp	r5, r6
 8001b9e:	d300      	bcc.n	8001ba2 <__aeabi_ddiv+0x472>
 8001ba0:	e764      	b.n	8001a6c <__aeabi_ddiv+0x33c>
 8001ba2:	4643      	mov	r3, r8
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	9b00      	ldr	r3, [sp, #0]
 8001ba8:	469c      	mov	ip, r3
 8001baa:	4465      	add	r5, ip
 8001bac:	001f      	movs	r7, r3
 8001bae:	429d      	cmp	r5, r3
 8001bb0:	419b      	sbcs	r3, r3
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	191b      	adds	r3, r3, r4
 8001bb6:	18c9      	adds	r1, r1, r3
 8001bb8:	428c      	cmp	r4, r1
 8001bba:	d23a      	bcs.n	8001c32 <__aeabi_ddiv+0x502>
 8001bbc:	4288      	cmp	r0, r1
 8001bbe:	d863      	bhi.n	8001c88 <__aeabi_ddiv+0x558>
 8001bc0:	d060      	beq.n	8001c84 <__aeabi_ddiv+0x554>
 8001bc2:	4690      	mov	r8, r2
 8001bc4:	e752      	b.n	8001a6c <__aeabi_ddiv+0x33c>
 8001bc6:	42aa      	cmp	r2, r5
 8001bc8:	d900      	bls.n	8001bcc <__aeabi_ddiv+0x49c>
 8001bca:	e6ea      	b.n	80019a2 <__aeabi_ddiv+0x272>
 8001bcc:	4643      	mov	r3, r8
 8001bce:	07de      	lsls	r6, r3, #31
 8001bd0:	0858      	lsrs	r0, r3, #1
 8001bd2:	086b      	lsrs	r3, r5, #1
 8001bd4:	431e      	orrs	r6, r3
 8001bd6:	07ed      	lsls	r5, r5, #31
 8001bd8:	e6ea      	b.n	80019b0 <__aeabi_ddiv+0x280>
 8001bda:	4648      	mov	r0, r9
 8001bdc:	f001 f926 	bl	8002e2c <__clzsi2>
 8001be0:	0001      	movs	r1, r0
 8001be2:	0002      	movs	r2, r0
 8001be4:	3115      	adds	r1, #21
 8001be6:	3220      	adds	r2, #32
 8001be8:	291c      	cmp	r1, #28
 8001bea:	dc00      	bgt.n	8001bee <__aeabi_ddiv+0x4be>
 8001bec:	e61a      	b.n	8001824 <__aeabi_ddiv+0xf4>
 8001bee:	464b      	mov	r3, r9
 8001bf0:	3808      	subs	r0, #8
 8001bf2:	4083      	lsls	r3, r0
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	4698      	mov	r8, r3
 8001bf8:	e620      	b.n	800183c <__aeabi_ddiv+0x10c>
 8001bfa:	f001 f917 	bl	8002e2c <__clzsi2>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	001a      	movs	r2, r3
 8001c02:	3215      	adds	r2, #21
 8001c04:	3020      	adds	r0, #32
 8001c06:	2a1c      	cmp	r2, #28
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_ddiv+0x4dc>
 8001c0a:	e630      	b.n	800186e <__aeabi_ddiv+0x13e>
 8001c0c:	4654      	mov	r4, sl
 8001c0e:	3b08      	subs	r3, #8
 8001c10:	2200      	movs	r2, #0
 8001c12:	409c      	lsls	r4, r3
 8001c14:	e635      	b.n	8001882 <__aeabi_ddiv+0x152>
 8001c16:	230f      	movs	r3, #15
 8001c18:	402b      	ands	r3, r5
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_ddiv+0x4f0>
 8001c1e:	e652      	b.n	80018c6 <__aeabi_ddiv+0x196>
 8001c20:	2305      	movs	r3, #5
 8001c22:	425b      	negs	r3, r3
 8001c24:	42ab      	cmp	r3, r5
 8001c26:	419b      	sbcs	r3, r3
 8001c28:	3504      	adds	r5, #4
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	08ed      	lsrs	r5, r5, #3
 8001c2e:	4498      	add	r8, r3
 8001c30:	e64a      	b.n	80018c8 <__aeabi_ddiv+0x198>
 8001c32:	428c      	cmp	r4, r1
 8001c34:	d1c5      	bne.n	8001bc2 <__aeabi_ddiv+0x492>
 8001c36:	42af      	cmp	r7, r5
 8001c38:	d9c0      	bls.n	8001bbc <__aeabi_ddiv+0x48c>
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	e716      	b.n	8001a6c <__aeabi_ddiv+0x33c>
 8001c3e:	428a      	cmp	r2, r1
 8001c40:	d800      	bhi.n	8001c44 <__aeabi_ddiv+0x514>
 8001c42:	e6ea      	b.n	8001a1a <__aeabi_ddiv+0x2ea>
 8001c44:	1e83      	subs	r3, r0, #2
 8001c46:	1909      	adds	r1, r1, r4
 8001c48:	e6e7      	b.n	8001a1a <__aeabi_ddiv+0x2ea>
 8001c4a:	4a2a      	ldr	r2, [pc, #168]	; (8001cf4 <__aeabi_ddiv+0x5c4>)
 8001c4c:	0028      	movs	r0, r5
 8001c4e:	445a      	add	r2, fp
 8001c50:	4643      	mov	r3, r8
 8001c52:	4095      	lsls	r5, r2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	40c8      	lsrs	r0, r1
 8001c58:	1e6a      	subs	r2, r5, #1
 8001c5a:	4195      	sbcs	r5, r2
 8001c5c:	4644      	mov	r4, r8
 8001c5e:	4303      	orrs	r3, r0
 8001c60:	432b      	orrs	r3, r5
 8001c62:	40cc      	lsrs	r4, r1
 8001c64:	075a      	lsls	r2, r3, #29
 8001c66:	d092      	beq.n	8001b8e <__aeabi_ddiv+0x45e>
 8001c68:	220f      	movs	r2, #15
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	2a04      	cmp	r2, #4
 8001c6e:	d188      	bne.n	8001b82 <__aeabi_ddiv+0x452>
 8001c70:	e78d      	b.n	8001b8e <__aeabi_ddiv+0x45e>
 8001c72:	0035      	movs	r5, r6
 8001c74:	4281      	cmp	r1, r0
 8001c76:	d000      	beq.n	8001c7a <__aeabi_ddiv+0x54a>
 8001c78:	e74b      	b.n	8001b12 <__aeabi_ddiv+0x3e2>
 8001c7a:	9a00      	ldr	r2, [sp, #0]
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d000      	beq.n	8001c82 <__aeabi_ddiv+0x552>
 8001c80:	e747      	b.n	8001b12 <__aeabi_ddiv+0x3e2>
 8001c82:	e618      	b.n	80018b6 <__aeabi_ddiv+0x186>
 8001c84:	42ae      	cmp	r6, r5
 8001c86:	d99c      	bls.n	8001bc2 <__aeabi_ddiv+0x492>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	469c      	mov	ip, r3
 8001c8e:	9b00      	ldr	r3, [sp, #0]
 8001c90:	44e0      	add	r8, ip
 8001c92:	469c      	mov	ip, r3
 8001c94:	4465      	add	r5, ip
 8001c96:	429d      	cmp	r5, r3
 8001c98:	419b      	sbcs	r3, r3
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	191b      	adds	r3, r3, r4
 8001c9e:	18c9      	adds	r1, r1, r3
 8001ca0:	e6e4      	b.n	8001a6c <__aeabi_ddiv+0x33c>
 8001ca2:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <__aeabi_ddiv+0x5c8>)
 8001ca4:	445a      	add	r2, fp
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	dc00      	bgt.n	8001cac <__aeabi_ddiv+0x57c>
 8001caa:	e744      	b.n	8001b36 <__aeabi_ddiv+0x406>
 8001cac:	2301      	movs	r3, #1
 8001cae:	2500      	movs	r5, #0
 8001cb0:	4498      	add	r8, r3
 8001cb2:	e609      	b.n	80018c8 <__aeabi_ddiv+0x198>
 8001cb4:	0765      	lsls	r5, r4, #29
 8001cb6:	0264      	lsls	r4, r4, #9
 8001cb8:	0b24      	lsrs	r4, r4, #12
 8001cba:	08db      	lsrs	r3, r3, #3
 8001cbc:	431d      	orrs	r5, r3
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e590      	b.n	80017e4 <__aeabi_ddiv+0xb4>
 8001cc2:	9e00      	ldr	r6, [sp, #0]
 8001cc4:	3d02      	subs	r5, #2
 8001cc6:	0072      	lsls	r2, r6, #1
 8001cc8:	42b2      	cmp	r2, r6
 8001cca:	41bf      	sbcs	r7, r7
 8001ccc:	427f      	negs	r7, r7
 8001cce:	193c      	adds	r4, r7, r4
 8001cd0:	1909      	adds	r1, r1, r4
 8001cd2:	9200      	str	r2, [sp, #0]
 8001cd4:	e7ce      	b.n	8001c74 <__aeabi_ddiv+0x544>
 8001cd6:	2480      	movs	r4, #128	; 0x80
 8001cd8:	4643      	mov	r3, r8
 8001cda:	0324      	lsls	r4, r4, #12
 8001cdc:	431c      	orrs	r4, r3
 8001cde:	0324      	lsls	r4, r4, #12
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <__aeabi_ddiv+0x5cc>)
 8001ce2:	0b24      	lsrs	r4, r4, #12
 8001ce4:	e57e      	b.n	80017e4 <__aeabi_ddiv+0xb4>
 8001ce6:	9a00      	ldr	r2, [sp, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d3ea      	bcc.n	8001cc2 <__aeabi_ddiv+0x592>
 8001cec:	0035      	movs	r5, r6
 8001cee:	e7c4      	b.n	8001c7a <__aeabi_ddiv+0x54a>
 8001cf0:	0000043e 	.word	0x0000043e
 8001cf4:	0000041e 	.word	0x0000041e
 8001cf8:	000003ff 	.word	0x000003ff
 8001cfc:	000007ff 	.word	0x000007ff

08001d00 <__eqdf2>:
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	464f      	mov	r7, r9
 8001d04:	4646      	mov	r6, r8
 8001d06:	46d6      	mov	lr, sl
 8001d08:	4694      	mov	ip, r2
 8001d0a:	4691      	mov	r9, r2
 8001d0c:	031a      	lsls	r2, r3, #12
 8001d0e:	0b12      	lsrs	r2, r2, #12
 8001d10:	4d18      	ldr	r5, [pc, #96]	; (8001d74 <__eqdf2+0x74>)
 8001d12:	b5c0      	push	{r6, r7, lr}
 8001d14:	004c      	lsls	r4, r1, #1
 8001d16:	030f      	lsls	r7, r1, #12
 8001d18:	4692      	mov	sl, r2
 8001d1a:	005a      	lsls	r2, r3, #1
 8001d1c:	0006      	movs	r6, r0
 8001d1e:	4680      	mov	r8, r0
 8001d20:	0b3f      	lsrs	r7, r7, #12
 8001d22:	2001      	movs	r0, #1
 8001d24:	0d64      	lsrs	r4, r4, #21
 8001d26:	0fc9      	lsrs	r1, r1, #31
 8001d28:	0d52      	lsrs	r2, r2, #21
 8001d2a:	0fdb      	lsrs	r3, r3, #31
 8001d2c:	42ac      	cmp	r4, r5
 8001d2e:	d00a      	beq.n	8001d46 <__eqdf2+0x46>
 8001d30:	42aa      	cmp	r2, r5
 8001d32:	d003      	beq.n	8001d3c <__eqdf2+0x3c>
 8001d34:	4294      	cmp	r4, r2
 8001d36:	d101      	bne.n	8001d3c <__eqdf2+0x3c>
 8001d38:	4557      	cmp	r7, sl
 8001d3a:	d00d      	beq.n	8001d58 <__eqdf2+0x58>
 8001d3c:	bce0      	pop	{r5, r6, r7}
 8001d3e:	46ba      	mov	sl, r7
 8001d40:	46b1      	mov	r9, r6
 8001d42:	46a8      	mov	r8, r5
 8001d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d46:	003d      	movs	r5, r7
 8001d48:	4335      	orrs	r5, r6
 8001d4a:	d1f7      	bne.n	8001d3c <__eqdf2+0x3c>
 8001d4c:	42a2      	cmp	r2, r4
 8001d4e:	d1f5      	bne.n	8001d3c <__eqdf2+0x3c>
 8001d50:	4652      	mov	r2, sl
 8001d52:	4665      	mov	r5, ip
 8001d54:	432a      	orrs	r2, r5
 8001d56:	d1f1      	bne.n	8001d3c <__eqdf2+0x3c>
 8001d58:	2001      	movs	r0, #1
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d1ee      	bne.n	8001d3c <__eqdf2+0x3c>
 8001d5e:	4299      	cmp	r1, r3
 8001d60:	d006      	beq.n	8001d70 <__eqdf2+0x70>
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d1ea      	bne.n	8001d3c <__eqdf2+0x3c>
 8001d66:	433e      	orrs	r6, r7
 8001d68:	0030      	movs	r0, r6
 8001d6a:	1e46      	subs	r6, r0, #1
 8001d6c:	41b0      	sbcs	r0, r6
 8001d6e:	e7e5      	b.n	8001d3c <__eqdf2+0x3c>
 8001d70:	2000      	movs	r0, #0
 8001d72:	e7e3      	b.n	8001d3c <__eqdf2+0x3c>
 8001d74:	000007ff 	.word	0x000007ff

08001d78 <__gedf2>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	464e      	mov	r6, r9
 8001d7c:	4645      	mov	r5, r8
 8001d7e:	4657      	mov	r7, sl
 8001d80:	46de      	mov	lr, fp
 8001d82:	0004      	movs	r4, r0
 8001d84:	0018      	movs	r0, r3
 8001d86:	b5e0      	push	{r5, r6, r7, lr}
 8001d88:	0016      	movs	r6, r2
 8001d8a:	031b      	lsls	r3, r3, #12
 8001d8c:	0b1b      	lsrs	r3, r3, #12
 8001d8e:	4d32      	ldr	r5, [pc, #200]	; (8001e58 <__gedf2+0xe0>)
 8001d90:	030f      	lsls	r7, r1, #12
 8001d92:	004a      	lsls	r2, r1, #1
 8001d94:	4699      	mov	r9, r3
 8001d96:	0043      	lsls	r3, r0, #1
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	46b0      	mov	r8, r6
 8001d9c:	0b3f      	lsrs	r7, r7, #12
 8001d9e:	0d52      	lsrs	r2, r2, #21
 8001da0:	0fc9      	lsrs	r1, r1, #31
 8001da2:	0d5b      	lsrs	r3, r3, #21
 8001da4:	0fc0      	lsrs	r0, r0, #31
 8001da6:	42aa      	cmp	r2, r5
 8001da8:	d029      	beq.n	8001dfe <__gedf2+0x86>
 8001daa:	42ab      	cmp	r3, r5
 8001dac:	d018      	beq.n	8001de0 <__gedf2+0x68>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d12a      	bne.n	8001e08 <__gedf2+0x90>
 8001db2:	433c      	orrs	r4, r7
 8001db4:	46a3      	mov	fp, r4
 8001db6:	4265      	negs	r5, r4
 8001db8:	4165      	adcs	r5, r4
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <__gedf2+0x4c>
 8001dbe:	464c      	mov	r4, r9
 8001dc0:	4326      	orrs	r6, r4
 8001dc2:	d027      	beq.n	8001e14 <__gedf2+0x9c>
 8001dc4:	2d00      	cmp	r5, #0
 8001dc6:	d115      	bne.n	8001df4 <__gedf2+0x7c>
 8001dc8:	4281      	cmp	r1, r0
 8001dca:	d028      	beq.n	8001e1e <__gedf2+0xa6>
 8001dcc:	2002      	movs	r0, #2
 8001dce:	3901      	subs	r1, #1
 8001dd0:	4008      	ands	r0, r1
 8001dd2:	3801      	subs	r0, #1
 8001dd4:	bcf0      	pop	{r4, r5, r6, r7}
 8001dd6:	46bb      	mov	fp, r7
 8001dd8:	46b2      	mov	sl, r6
 8001dda:	46a9      	mov	r9, r5
 8001ddc:	46a0      	mov	r8, r4
 8001dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de0:	464d      	mov	r5, r9
 8001de2:	432e      	orrs	r6, r5
 8001de4:	d12f      	bne.n	8001e46 <__gedf2+0xce>
 8001de6:	2a00      	cmp	r2, #0
 8001de8:	d1ee      	bne.n	8001dc8 <__gedf2+0x50>
 8001dea:	433c      	orrs	r4, r7
 8001dec:	4265      	negs	r5, r4
 8001dee:	4165      	adcs	r5, r4
 8001df0:	2d00      	cmp	r5, #0
 8001df2:	d0e9      	beq.n	8001dc8 <__gedf2+0x50>
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d1ed      	bne.n	8001dd4 <__gedf2+0x5c>
 8001df8:	2001      	movs	r0, #1
 8001dfa:	4240      	negs	r0, r0
 8001dfc:	e7ea      	b.n	8001dd4 <__gedf2+0x5c>
 8001dfe:	003d      	movs	r5, r7
 8001e00:	4325      	orrs	r5, r4
 8001e02:	d120      	bne.n	8001e46 <__gedf2+0xce>
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d0eb      	beq.n	8001de0 <__gedf2+0x68>
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1dd      	bne.n	8001dc8 <__gedf2+0x50>
 8001e0c:	464c      	mov	r4, r9
 8001e0e:	4326      	orrs	r6, r4
 8001e10:	d1da      	bne.n	8001dc8 <__gedf2+0x50>
 8001e12:	e7db      	b.n	8001dcc <__gedf2+0x54>
 8001e14:	465b      	mov	r3, fp
 8001e16:	2000      	movs	r0, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0db      	beq.n	8001dd4 <__gedf2+0x5c>
 8001e1c:	e7d6      	b.n	8001dcc <__gedf2+0x54>
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	dc0a      	bgt.n	8001e38 <__gedf2+0xc0>
 8001e22:	dbe7      	blt.n	8001df4 <__gedf2+0x7c>
 8001e24:	454f      	cmp	r7, r9
 8001e26:	d8d1      	bhi.n	8001dcc <__gedf2+0x54>
 8001e28:	d010      	beq.n	8001e4c <__gedf2+0xd4>
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	454f      	cmp	r7, r9
 8001e2e:	d2d1      	bcs.n	8001dd4 <__gedf2+0x5c>
 8001e30:	2900      	cmp	r1, #0
 8001e32:	d0e1      	beq.n	8001df8 <__gedf2+0x80>
 8001e34:	0008      	movs	r0, r1
 8001e36:	e7cd      	b.n	8001dd4 <__gedf2+0x5c>
 8001e38:	4243      	negs	r3, r0
 8001e3a:	4158      	adcs	r0, r3
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	4240      	negs	r0, r0
 8001e40:	4018      	ands	r0, r3
 8001e42:	3801      	subs	r0, #1
 8001e44:	e7c6      	b.n	8001dd4 <__gedf2+0x5c>
 8001e46:	2002      	movs	r0, #2
 8001e48:	4240      	negs	r0, r0
 8001e4a:	e7c3      	b.n	8001dd4 <__gedf2+0x5c>
 8001e4c:	45c4      	cmp	ip, r8
 8001e4e:	d8bd      	bhi.n	8001dcc <__gedf2+0x54>
 8001e50:	2000      	movs	r0, #0
 8001e52:	45c4      	cmp	ip, r8
 8001e54:	d2be      	bcs.n	8001dd4 <__gedf2+0x5c>
 8001e56:	e7eb      	b.n	8001e30 <__gedf2+0xb8>
 8001e58:	000007ff 	.word	0x000007ff

08001e5c <__ledf2>:
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5e:	464e      	mov	r6, r9
 8001e60:	4645      	mov	r5, r8
 8001e62:	4657      	mov	r7, sl
 8001e64:	46de      	mov	lr, fp
 8001e66:	0004      	movs	r4, r0
 8001e68:	0018      	movs	r0, r3
 8001e6a:	b5e0      	push	{r5, r6, r7, lr}
 8001e6c:	0016      	movs	r6, r2
 8001e6e:	031b      	lsls	r3, r3, #12
 8001e70:	0b1b      	lsrs	r3, r3, #12
 8001e72:	4d31      	ldr	r5, [pc, #196]	; (8001f38 <__ledf2+0xdc>)
 8001e74:	030f      	lsls	r7, r1, #12
 8001e76:	004a      	lsls	r2, r1, #1
 8001e78:	4699      	mov	r9, r3
 8001e7a:	0043      	lsls	r3, r0, #1
 8001e7c:	46a4      	mov	ip, r4
 8001e7e:	46b0      	mov	r8, r6
 8001e80:	0b3f      	lsrs	r7, r7, #12
 8001e82:	0d52      	lsrs	r2, r2, #21
 8001e84:	0fc9      	lsrs	r1, r1, #31
 8001e86:	0d5b      	lsrs	r3, r3, #21
 8001e88:	0fc0      	lsrs	r0, r0, #31
 8001e8a:	42aa      	cmp	r2, r5
 8001e8c:	d011      	beq.n	8001eb2 <__ledf2+0x56>
 8001e8e:	42ab      	cmp	r3, r5
 8001e90:	d014      	beq.n	8001ebc <__ledf2+0x60>
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d12f      	bne.n	8001ef6 <__ledf2+0x9a>
 8001e96:	433c      	orrs	r4, r7
 8001e98:	46a3      	mov	fp, r4
 8001e9a:	4265      	negs	r5, r4
 8001e9c:	4165      	adcs	r5, r4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d114      	bne.n	8001ecc <__ledf2+0x70>
 8001ea2:	464c      	mov	r4, r9
 8001ea4:	4326      	orrs	r6, r4
 8001ea6:	d111      	bne.n	8001ecc <__ledf2+0x70>
 8001ea8:	465b      	mov	r3, fp
 8001eaa:	2000      	movs	r0, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d017      	beq.n	8001ee0 <__ledf2+0x84>
 8001eb0:	e010      	b.n	8001ed4 <__ledf2+0x78>
 8001eb2:	003d      	movs	r5, r7
 8001eb4:	4325      	orrs	r5, r4
 8001eb6:	d112      	bne.n	8001ede <__ledf2+0x82>
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d11c      	bne.n	8001ef6 <__ledf2+0x9a>
 8001ebc:	464d      	mov	r5, r9
 8001ebe:	432e      	orrs	r6, r5
 8001ec0:	d10d      	bne.n	8001ede <__ledf2+0x82>
 8001ec2:	2a00      	cmp	r2, #0
 8001ec4:	d104      	bne.n	8001ed0 <__ledf2+0x74>
 8001ec6:	433c      	orrs	r4, r7
 8001ec8:	4265      	negs	r5, r4
 8001eca:	4165      	adcs	r5, r4
 8001ecc:	2d00      	cmp	r5, #0
 8001ece:	d10d      	bne.n	8001eec <__ledf2+0x90>
 8001ed0:	4281      	cmp	r1, r0
 8001ed2:	d016      	beq.n	8001f02 <__ledf2+0xa6>
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	3901      	subs	r1, #1
 8001ed8:	4008      	ands	r0, r1
 8001eda:	3801      	subs	r0, #1
 8001edc:	e000      	b.n	8001ee0 <__ledf2+0x84>
 8001ede:	2002      	movs	r0, #2
 8001ee0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ee2:	46bb      	mov	fp, r7
 8001ee4:	46b2      	mov	sl, r6
 8001ee6:	46a9      	mov	r9, r5
 8001ee8:	46a0      	mov	r8, r4
 8001eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d1f7      	bne.n	8001ee0 <__ledf2+0x84>
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	4240      	negs	r0, r0
 8001ef4:	e7f4      	b.n	8001ee0 <__ledf2+0x84>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ea      	bne.n	8001ed0 <__ledf2+0x74>
 8001efa:	464c      	mov	r4, r9
 8001efc:	4326      	orrs	r6, r4
 8001efe:	d1e7      	bne.n	8001ed0 <__ledf2+0x74>
 8001f00:	e7e8      	b.n	8001ed4 <__ledf2+0x78>
 8001f02:	429a      	cmp	r2, r3
 8001f04:	dd06      	ble.n	8001f14 <__ledf2+0xb8>
 8001f06:	4243      	negs	r3, r0
 8001f08:	4158      	adcs	r0, r3
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	4240      	negs	r0, r0
 8001f0e:	4018      	ands	r0, r3
 8001f10:	3801      	subs	r0, #1
 8001f12:	e7e5      	b.n	8001ee0 <__ledf2+0x84>
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dbe9      	blt.n	8001eec <__ledf2+0x90>
 8001f18:	454f      	cmp	r7, r9
 8001f1a:	d8db      	bhi.n	8001ed4 <__ledf2+0x78>
 8001f1c:	d006      	beq.n	8001f2c <__ledf2+0xd0>
 8001f1e:	2000      	movs	r0, #0
 8001f20:	454f      	cmp	r7, r9
 8001f22:	d2dd      	bcs.n	8001ee0 <__ledf2+0x84>
 8001f24:	2900      	cmp	r1, #0
 8001f26:	d0e3      	beq.n	8001ef0 <__ledf2+0x94>
 8001f28:	0008      	movs	r0, r1
 8001f2a:	e7d9      	b.n	8001ee0 <__ledf2+0x84>
 8001f2c:	45c4      	cmp	ip, r8
 8001f2e:	d8d1      	bhi.n	8001ed4 <__ledf2+0x78>
 8001f30:	2000      	movs	r0, #0
 8001f32:	45c4      	cmp	ip, r8
 8001f34:	d2d4      	bcs.n	8001ee0 <__ledf2+0x84>
 8001f36:	e7f5      	b.n	8001f24 <__ledf2+0xc8>
 8001f38:	000007ff 	.word	0x000007ff

08001f3c <__aeabi_dmul>:
 8001f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3e:	4657      	mov	r7, sl
 8001f40:	464e      	mov	r6, r9
 8001f42:	4645      	mov	r5, r8
 8001f44:	46de      	mov	lr, fp
 8001f46:	b5e0      	push	{r5, r6, r7, lr}
 8001f48:	4698      	mov	r8, r3
 8001f4a:	030c      	lsls	r4, r1, #12
 8001f4c:	004b      	lsls	r3, r1, #1
 8001f4e:	0006      	movs	r6, r0
 8001f50:	4692      	mov	sl, r2
 8001f52:	b087      	sub	sp, #28
 8001f54:	0b24      	lsrs	r4, r4, #12
 8001f56:	0d5b      	lsrs	r3, r3, #21
 8001f58:	0fcf      	lsrs	r7, r1, #31
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d06c      	beq.n	8002038 <__aeabi_dmul+0xfc>
 8001f5e:	4add      	ldr	r2, [pc, #884]	; (80022d4 <__aeabi_dmul+0x398>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dmul+0x2a>
 8001f64:	e086      	b.n	8002074 <__aeabi_dmul+0x138>
 8001f66:	0f42      	lsrs	r2, r0, #29
 8001f68:	00e4      	lsls	r4, r4, #3
 8001f6a:	4314      	orrs	r4, r2
 8001f6c:	2280      	movs	r2, #128	; 0x80
 8001f6e:	0412      	lsls	r2, r2, #16
 8001f70:	4314      	orrs	r4, r2
 8001f72:	4ad9      	ldr	r2, [pc, #868]	; (80022d8 <__aeabi_dmul+0x39c>)
 8001f74:	00c5      	lsls	r5, r0, #3
 8001f76:	4694      	mov	ip, r2
 8001f78:	4463      	add	r3, ip
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	4699      	mov	r9, r3
 8001f80:	469b      	mov	fp, r3
 8001f82:	4643      	mov	r3, r8
 8001f84:	4642      	mov	r2, r8
 8001f86:	031e      	lsls	r6, r3, #12
 8001f88:	0fd2      	lsrs	r2, r2, #31
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4650      	mov	r0, sl
 8001f8e:	4690      	mov	r8, r2
 8001f90:	0b36      	lsrs	r6, r6, #12
 8001f92:	0d5b      	lsrs	r3, r3, #21
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dmul+0x5c>
 8001f96:	e078      	b.n	800208a <__aeabi_dmul+0x14e>
 8001f98:	4ace      	ldr	r2, [pc, #824]	; (80022d4 <__aeabi_dmul+0x398>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01d      	beq.n	8001fda <__aeabi_dmul+0x9e>
 8001f9e:	49ce      	ldr	r1, [pc, #824]	; (80022d8 <__aeabi_dmul+0x39c>)
 8001fa0:	0f42      	lsrs	r2, r0, #29
 8001fa2:	468c      	mov	ip, r1
 8001fa4:	9900      	ldr	r1, [sp, #0]
 8001fa6:	4463      	add	r3, ip
 8001fa8:	00f6      	lsls	r6, r6, #3
 8001faa:	468c      	mov	ip, r1
 8001fac:	4316      	orrs	r6, r2
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	449c      	add	ip, r3
 8001fb2:	0412      	lsls	r2, r2, #16
 8001fb4:	4663      	mov	r3, ip
 8001fb6:	4316      	orrs	r6, r2
 8001fb8:	00c2      	lsls	r2, r0, #3
 8001fba:	2000      	movs	r0, #0
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	9900      	ldr	r1, [sp, #0]
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	3101      	adds	r1, #1
 8001fc4:	468c      	mov	ip, r1
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	407b      	eors	r3, r7
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	290f      	cmp	r1, #15
 8001fce:	d900      	bls.n	8001fd2 <__aeabi_dmul+0x96>
 8001fd0:	e07e      	b.n	80020d0 <__aeabi_dmul+0x194>
 8001fd2:	4bc2      	ldr	r3, [pc, #776]	; (80022dc <__aeabi_dmul+0x3a0>)
 8001fd4:	0089      	lsls	r1, r1, #2
 8001fd6:	5859      	ldr	r1, [r3, r1]
 8001fd8:	468f      	mov	pc, r1
 8001fda:	4652      	mov	r2, sl
 8001fdc:	9b00      	ldr	r3, [sp, #0]
 8001fde:	4332      	orrs	r2, r6
 8001fe0:	d000      	beq.n	8001fe4 <__aeabi_dmul+0xa8>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dmul+0x356>
 8001fe4:	49bb      	ldr	r1, [pc, #748]	; (80022d4 <__aeabi_dmul+0x398>)
 8001fe6:	2600      	movs	r6, #0
 8001fe8:	468c      	mov	ip, r1
 8001fea:	4463      	add	r3, ip
 8001fec:	4649      	mov	r1, r9
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	4319      	orrs	r1, r3
 8001ff4:	4689      	mov	r9, r1
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	e7e1      	b.n	8001fbe <__aeabi_dmul+0x82>
 8001ffa:	4643      	mov	r3, r8
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	0034      	movs	r4, r6
 8002000:	0015      	movs	r5, r2
 8002002:	4683      	mov	fp, r0
 8002004:	465b      	mov	r3, fp
 8002006:	2b02      	cmp	r3, #2
 8002008:	d05e      	beq.n	80020c8 <__aeabi_dmul+0x18c>
 800200a:	2b03      	cmp	r3, #3
 800200c:	d100      	bne.n	8002010 <__aeabi_dmul+0xd4>
 800200e:	e1f3      	b.n	80023f8 <__aeabi_dmul+0x4bc>
 8002010:	2b01      	cmp	r3, #1
 8002012:	d000      	beq.n	8002016 <__aeabi_dmul+0xda>
 8002014:	e118      	b.n	8002248 <__aeabi_dmul+0x30c>
 8002016:	2200      	movs	r2, #0
 8002018:	2400      	movs	r4, #0
 800201a:	2500      	movs	r5, #0
 800201c:	9b01      	ldr	r3, [sp, #4]
 800201e:	0512      	lsls	r2, r2, #20
 8002020:	4322      	orrs	r2, r4
 8002022:	07db      	lsls	r3, r3, #31
 8002024:	431a      	orrs	r2, r3
 8002026:	0028      	movs	r0, r5
 8002028:	0011      	movs	r1, r2
 800202a:	b007      	add	sp, #28
 800202c:	bcf0      	pop	{r4, r5, r6, r7}
 800202e:	46bb      	mov	fp, r7
 8002030:	46b2      	mov	sl, r6
 8002032:	46a9      	mov	r9, r5
 8002034:	46a0      	mov	r8, r4
 8002036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002038:	0025      	movs	r5, r4
 800203a:	4305      	orrs	r5, r0
 800203c:	d100      	bne.n	8002040 <__aeabi_dmul+0x104>
 800203e:	e141      	b.n	80022c4 <__aeabi_dmul+0x388>
 8002040:	2c00      	cmp	r4, #0
 8002042:	d100      	bne.n	8002046 <__aeabi_dmul+0x10a>
 8002044:	e1ad      	b.n	80023a2 <__aeabi_dmul+0x466>
 8002046:	0020      	movs	r0, r4
 8002048:	f000 fef0 	bl	8002e2c <__clzsi2>
 800204c:	0001      	movs	r1, r0
 800204e:	0002      	movs	r2, r0
 8002050:	390b      	subs	r1, #11
 8002052:	231d      	movs	r3, #29
 8002054:	0010      	movs	r0, r2
 8002056:	1a5b      	subs	r3, r3, r1
 8002058:	0031      	movs	r1, r6
 800205a:	0035      	movs	r5, r6
 800205c:	3808      	subs	r0, #8
 800205e:	4084      	lsls	r4, r0
 8002060:	40d9      	lsrs	r1, r3
 8002062:	4085      	lsls	r5, r0
 8002064:	430c      	orrs	r4, r1
 8002066:	489e      	ldr	r0, [pc, #632]	; (80022e0 <__aeabi_dmul+0x3a4>)
 8002068:	1a83      	subs	r3, r0, r2
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2300      	movs	r3, #0
 800206e:	4699      	mov	r9, r3
 8002070:	469b      	mov	fp, r3
 8002072:	e786      	b.n	8001f82 <__aeabi_dmul+0x46>
 8002074:	0005      	movs	r5, r0
 8002076:	4325      	orrs	r5, r4
 8002078:	d000      	beq.n	800207c <__aeabi_dmul+0x140>
 800207a:	e11c      	b.n	80022b6 <__aeabi_dmul+0x37a>
 800207c:	2208      	movs	r2, #8
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2302      	movs	r3, #2
 8002082:	2400      	movs	r4, #0
 8002084:	4691      	mov	r9, r2
 8002086:	469b      	mov	fp, r3
 8002088:	e77b      	b.n	8001f82 <__aeabi_dmul+0x46>
 800208a:	4652      	mov	r2, sl
 800208c:	4332      	orrs	r2, r6
 800208e:	d100      	bne.n	8002092 <__aeabi_dmul+0x156>
 8002090:	e10a      	b.n	80022a8 <__aeabi_dmul+0x36c>
 8002092:	2e00      	cmp	r6, #0
 8002094:	d100      	bne.n	8002098 <__aeabi_dmul+0x15c>
 8002096:	e176      	b.n	8002386 <__aeabi_dmul+0x44a>
 8002098:	0030      	movs	r0, r6
 800209a:	f000 fec7 	bl	8002e2c <__clzsi2>
 800209e:	0002      	movs	r2, r0
 80020a0:	3a0b      	subs	r2, #11
 80020a2:	231d      	movs	r3, #29
 80020a4:	0001      	movs	r1, r0
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	4652      	mov	r2, sl
 80020aa:	3908      	subs	r1, #8
 80020ac:	40da      	lsrs	r2, r3
 80020ae:	408e      	lsls	r6, r1
 80020b0:	4316      	orrs	r6, r2
 80020b2:	4652      	mov	r2, sl
 80020b4:	408a      	lsls	r2, r1
 80020b6:	9b00      	ldr	r3, [sp, #0]
 80020b8:	4989      	ldr	r1, [pc, #548]	; (80022e0 <__aeabi_dmul+0x3a4>)
 80020ba:	1a18      	subs	r0, r3, r0
 80020bc:	0003      	movs	r3, r0
 80020be:	468c      	mov	ip, r1
 80020c0:	4463      	add	r3, ip
 80020c2:	2000      	movs	r0, #0
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	e77a      	b.n	8001fbe <__aeabi_dmul+0x82>
 80020c8:	2400      	movs	r4, #0
 80020ca:	2500      	movs	r5, #0
 80020cc:	4a81      	ldr	r2, [pc, #516]	; (80022d4 <__aeabi_dmul+0x398>)
 80020ce:	e7a5      	b.n	800201c <__aeabi_dmul+0xe0>
 80020d0:	0c2f      	lsrs	r7, r5, #16
 80020d2:	042d      	lsls	r5, r5, #16
 80020d4:	0c2d      	lsrs	r5, r5, #16
 80020d6:	002b      	movs	r3, r5
 80020d8:	0c11      	lsrs	r1, r2, #16
 80020da:	0412      	lsls	r2, r2, #16
 80020dc:	0c12      	lsrs	r2, r2, #16
 80020de:	4353      	muls	r3, r2
 80020e0:	4698      	mov	r8, r3
 80020e2:	0013      	movs	r3, r2
 80020e4:	0028      	movs	r0, r5
 80020e6:	437b      	muls	r3, r7
 80020e8:	4699      	mov	r9, r3
 80020ea:	4348      	muls	r0, r1
 80020ec:	4448      	add	r0, r9
 80020ee:	4683      	mov	fp, r0
 80020f0:	4640      	mov	r0, r8
 80020f2:	000b      	movs	r3, r1
 80020f4:	0c00      	lsrs	r0, r0, #16
 80020f6:	4682      	mov	sl, r0
 80020f8:	4658      	mov	r0, fp
 80020fa:	437b      	muls	r3, r7
 80020fc:	4450      	add	r0, sl
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	4581      	cmp	r9, r0
 8002102:	d906      	bls.n	8002112 <__aeabi_dmul+0x1d6>
 8002104:	469a      	mov	sl, r3
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	025b      	lsls	r3, r3, #9
 800210a:	4699      	mov	r9, r3
 800210c:	44ca      	add	sl, r9
 800210e:	4653      	mov	r3, sl
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	0c03      	lsrs	r3, r0, #16
 8002114:	469b      	mov	fp, r3
 8002116:	4643      	mov	r3, r8
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	0400      	lsls	r0, r0, #16
 800211c:	0c1b      	lsrs	r3, r3, #16
 800211e:	4698      	mov	r8, r3
 8002120:	0003      	movs	r3, r0
 8002122:	4443      	add	r3, r8
 8002124:	9304      	str	r3, [sp, #16]
 8002126:	0c33      	lsrs	r3, r6, #16
 8002128:	4699      	mov	r9, r3
 800212a:	002b      	movs	r3, r5
 800212c:	0436      	lsls	r6, r6, #16
 800212e:	0c36      	lsrs	r6, r6, #16
 8002130:	4373      	muls	r3, r6
 8002132:	4698      	mov	r8, r3
 8002134:	0033      	movs	r3, r6
 8002136:	437b      	muls	r3, r7
 8002138:	469a      	mov	sl, r3
 800213a:	464b      	mov	r3, r9
 800213c:	435d      	muls	r5, r3
 800213e:	435f      	muls	r7, r3
 8002140:	4643      	mov	r3, r8
 8002142:	4455      	add	r5, sl
 8002144:	0c18      	lsrs	r0, r3, #16
 8002146:	1940      	adds	r0, r0, r5
 8002148:	4582      	cmp	sl, r0
 800214a:	d903      	bls.n	8002154 <__aeabi_dmul+0x218>
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	469a      	mov	sl, r3
 8002152:	4457      	add	r7, sl
 8002154:	0c05      	lsrs	r5, r0, #16
 8002156:	19eb      	adds	r3, r5, r7
 8002158:	9305      	str	r3, [sp, #20]
 800215a:	4643      	mov	r3, r8
 800215c:	041d      	lsls	r5, r3, #16
 800215e:	0c2d      	lsrs	r5, r5, #16
 8002160:	0400      	lsls	r0, r0, #16
 8002162:	1940      	adds	r0, r0, r5
 8002164:	0c25      	lsrs	r5, r4, #16
 8002166:	0424      	lsls	r4, r4, #16
 8002168:	0c24      	lsrs	r4, r4, #16
 800216a:	0027      	movs	r7, r4
 800216c:	4357      	muls	r7, r2
 800216e:	436a      	muls	r2, r5
 8002170:	4690      	mov	r8, r2
 8002172:	002a      	movs	r2, r5
 8002174:	0c3b      	lsrs	r3, r7, #16
 8002176:	469a      	mov	sl, r3
 8002178:	434a      	muls	r2, r1
 800217a:	4361      	muls	r1, r4
 800217c:	4441      	add	r1, r8
 800217e:	4451      	add	r1, sl
 8002180:	4483      	add	fp, r0
 8002182:	4588      	cmp	r8, r1
 8002184:	d903      	bls.n	800218e <__aeabi_dmul+0x252>
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	025b      	lsls	r3, r3, #9
 800218a:	4698      	mov	r8, r3
 800218c:	4442      	add	r2, r8
 800218e:	043f      	lsls	r7, r7, #16
 8002190:	0c0b      	lsrs	r3, r1, #16
 8002192:	0c3f      	lsrs	r7, r7, #16
 8002194:	0409      	lsls	r1, r1, #16
 8002196:	19c9      	adds	r1, r1, r7
 8002198:	0027      	movs	r7, r4
 800219a:	4698      	mov	r8, r3
 800219c:	464b      	mov	r3, r9
 800219e:	4377      	muls	r7, r6
 80021a0:	435c      	muls	r4, r3
 80021a2:	436e      	muls	r6, r5
 80021a4:	435d      	muls	r5, r3
 80021a6:	0c3b      	lsrs	r3, r7, #16
 80021a8:	4699      	mov	r9, r3
 80021aa:	19a4      	adds	r4, r4, r6
 80021ac:	444c      	add	r4, r9
 80021ae:	4442      	add	r2, r8
 80021b0:	9503      	str	r5, [sp, #12]
 80021b2:	42a6      	cmp	r6, r4
 80021b4:	d904      	bls.n	80021c0 <__aeabi_dmul+0x284>
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	025b      	lsls	r3, r3, #9
 80021ba:	4698      	mov	r8, r3
 80021bc:	4445      	add	r5, r8
 80021be:	9503      	str	r5, [sp, #12]
 80021c0:	9b02      	ldr	r3, [sp, #8]
 80021c2:	043f      	lsls	r7, r7, #16
 80021c4:	445b      	add	r3, fp
 80021c6:	001e      	movs	r6, r3
 80021c8:	4283      	cmp	r3, r0
 80021ca:	4180      	sbcs	r0, r0
 80021cc:	0423      	lsls	r3, r4, #16
 80021ce:	4698      	mov	r8, r3
 80021d0:	9b05      	ldr	r3, [sp, #20]
 80021d2:	0c3f      	lsrs	r7, r7, #16
 80021d4:	4447      	add	r7, r8
 80021d6:	4698      	mov	r8, r3
 80021d8:	1876      	adds	r6, r6, r1
 80021da:	428e      	cmp	r6, r1
 80021dc:	4189      	sbcs	r1, r1
 80021de:	4447      	add	r7, r8
 80021e0:	4240      	negs	r0, r0
 80021e2:	183d      	adds	r5, r7, r0
 80021e4:	46a8      	mov	r8, r5
 80021e6:	4693      	mov	fp, r2
 80021e8:	4249      	negs	r1, r1
 80021ea:	468a      	mov	sl, r1
 80021ec:	44c3      	add	fp, r8
 80021ee:	429f      	cmp	r7, r3
 80021f0:	41bf      	sbcs	r7, r7
 80021f2:	4580      	cmp	r8, r0
 80021f4:	4180      	sbcs	r0, r0
 80021f6:	9b03      	ldr	r3, [sp, #12]
 80021f8:	44da      	add	sl, fp
 80021fa:	4698      	mov	r8, r3
 80021fc:	4653      	mov	r3, sl
 80021fe:	4240      	negs	r0, r0
 8002200:	427f      	negs	r7, r7
 8002202:	4307      	orrs	r7, r0
 8002204:	0c24      	lsrs	r4, r4, #16
 8002206:	4593      	cmp	fp, r2
 8002208:	4192      	sbcs	r2, r2
 800220a:	458a      	cmp	sl, r1
 800220c:	4189      	sbcs	r1, r1
 800220e:	193f      	adds	r7, r7, r4
 8002210:	0ddc      	lsrs	r4, r3, #23
 8002212:	9b04      	ldr	r3, [sp, #16]
 8002214:	0275      	lsls	r5, r6, #9
 8002216:	431d      	orrs	r5, r3
 8002218:	1e68      	subs	r0, r5, #1
 800221a:	4185      	sbcs	r5, r0
 800221c:	4653      	mov	r3, sl
 800221e:	4252      	negs	r2, r2
 8002220:	4249      	negs	r1, r1
 8002222:	430a      	orrs	r2, r1
 8002224:	18bf      	adds	r7, r7, r2
 8002226:	4447      	add	r7, r8
 8002228:	0df6      	lsrs	r6, r6, #23
 800222a:	027f      	lsls	r7, r7, #9
 800222c:	4335      	orrs	r5, r6
 800222e:	025a      	lsls	r2, r3, #9
 8002230:	433c      	orrs	r4, r7
 8002232:	4315      	orrs	r5, r2
 8002234:	01fb      	lsls	r3, r7, #7
 8002236:	d400      	bmi.n	800223a <__aeabi_dmul+0x2fe>
 8002238:	e0c1      	b.n	80023be <__aeabi_dmul+0x482>
 800223a:	2101      	movs	r1, #1
 800223c:	086a      	lsrs	r2, r5, #1
 800223e:	400d      	ands	r5, r1
 8002240:	4315      	orrs	r5, r2
 8002242:	07e2      	lsls	r2, r4, #31
 8002244:	4315      	orrs	r5, r2
 8002246:	0864      	lsrs	r4, r4, #1
 8002248:	4926      	ldr	r1, [pc, #152]	; (80022e4 <__aeabi_dmul+0x3a8>)
 800224a:	4461      	add	r1, ip
 800224c:	2900      	cmp	r1, #0
 800224e:	dd56      	ble.n	80022fe <__aeabi_dmul+0x3c2>
 8002250:	076b      	lsls	r3, r5, #29
 8002252:	d009      	beq.n	8002268 <__aeabi_dmul+0x32c>
 8002254:	220f      	movs	r2, #15
 8002256:	402a      	ands	r2, r5
 8002258:	2a04      	cmp	r2, #4
 800225a:	d005      	beq.n	8002268 <__aeabi_dmul+0x32c>
 800225c:	1d2a      	adds	r2, r5, #4
 800225e:	42aa      	cmp	r2, r5
 8002260:	41ad      	sbcs	r5, r5
 8002262:	426d      	negs	r5, r5
 8002264:	1964      	adds	r4, r4, r5
 8002266:	0015      	movs	r5, r2
 8002268:	01e3      	lsls	r3, r4, #7
 800226a:	d504      	bpl.n	8002276 <__aeabi_dmul+0x33a>
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	4a1e      	ldr	r2, [pc, #120]	; (80022e8 <__aeabi_dmul+0x3ac>)
 8002270:	00c9      	lsls	r1, r1, #3
 8002272:	4014      	ands	r4, r2
 8002274:	4461      	add	r1, ip
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <__aeabi_dmul+0x3b0>)
 8002278:	4291      	cmp	r1, r2
 800227a:	dd00      	ble.n	800227e <__aeabi_dmul+0x342>
 800227c:	e724      	b.n	80020c8 <__aeabi_dmul+0x18c>
 800227e:	0762      	lsls	r2, r4, #29
 8002280:	08ed      	lsrs	r5, r5, #3
 8002282:	0264      	lsls	r4, r4, #9
 8002284:	0549      	lsls	r1, r1, #21
 8002286:	4315      	orrs	r5, r2
 8002288:	0b24      	lsrs	r4, r4, #12
 800228a:	0d4a      	lsrs	r2, r1, #21
 800228c:	e6c6      	b.n	800201c <__aeabi_dmul+0xe0>
 800228e:	9701      	str	r7, [sp, #4]
 8002290:	e6b8      	b.n	8002004 <__aeabi_dmul+0xc8>
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <__aeabi_dmul+0x398>)
 8002294:	2003      	movs	r0, #3
 8002296:	4694      	mov	ip, r2
 8002298:	4463      	add	r3, ip
 800229a:	464a      	mov	r2, r9
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2303      	movs	r3, #3
 80022a0:	431a      	orrs	r2, r3
 80022a2:	4691      	mov	r9, r2
 80022a4:	4652      	mov	r2, sl
 80022a6:	e68a      	b.n	8001fbe <__aeabi_dmul+0x82>
 80022a8:	4649      	mov	r1, r9
 80022aa:	2301      	movs	r3, #1
 80022ac:	4319      	orrs	r1, r3
 80022ae:	4689      	mov	r9, r1
 80022b0:	2600      	movs	r6, #0
 80022b2:	2001      	movs	r0, #1
 80022b4:	e683      	b.n	8001fbe <__aeabi_dmul+0x82>
 80022b6:	220c      	movs	r2, #12
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2303      	movs	r3, #3
 80022bc:	0005      	movs	r5, r0
 80022be:	4691      	mov	r9, r2
 80022c0:	469b      	mov	fp, r3
 80022c2:	e65e      	b.n	8001f82 <__aeabi_dmul+0x46>
 80022c4:	2304      	movs	r3, #4
 80022c6:	4699      	mov	r9, r3
 80022c8:	2300      	movs	r3, #0
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	2400      	movs	r4, #0
 80022d0:	469b      	mov	fp, r3
 80022d2:	e656      	b.n	8001f82 <__aeabi_dmul+0x46>
 80022d4:	000007ff 	.word	0x000007ff
 80022d8:	fffffc01 	.word	0xfffffc01
 80022dc:	0801a490 	.word	0x0801a490
 80022e0:	fffffc0d 	.word	0xfffffc0d
 80022e4:	000003ff 	.word	0x000003ff
 80022e8:	feffffff 	.word	0xfeffffff
 80022ec:	000007fe 	.word	0x000007fe
 80022f0:	2300      	movs	r3, #0
 80022f2:	2480      	movs	r4, #128	; 0x80
 80022f4:	2500      	movs	r5, #0
 80022f6:	4a44      	ldr	r2, [pc, #272]	; (8002408 <__aeabi_dmul+0x4cc>)
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	0324      	lsls	r4, r4, #12
 80022fc:	e68e      	b.n	800201c <__aeabi_dmul+0xe0>
 80022fe:	2001      	movs	r0, #1
 8002300:	1a40      	subs	r0, r0, r1
 8002302:	2838      	cmp	r0, #56	; 0x38
 8002304:	dd00      	ble.n	8002308 <__aeabi_dmul+0x3cc>
 8002306:	e686      	b.n	8002016 <__aeabi_dmul+0xda>
 8002308:	281f      	cmp	r0, #31
 800230a:	dd5b      	ble.n	80023c4 <__aeabi_dmul+0x488>
 800230c:	221f      	movs	r2, #31
 800230e:	0023      	movs	r3, r4
 8002310:	4252      	negs	r2, r2
 8002312:	1a51      	subs	r1, r2, r1
 8002314:	40cb      	lsrs	r3, r1
 8002316:	0019      	movs	r1, r3
 8002318:	2820      	cmp	r0, #32
 800231a:	d003      	beq.n	8002324 <__aeabi_dmul+0x3e8>
 800231c:	4a3b      	ldr	r2, [pc, #236]	; (800240c <__aeabi_dmul+0x4d0>)
 800231e:	4462      	add	r2, ip
 8002320:	4094      	lsls	r4, r2
 8002322:	4325      	orrs	r5, r4
 8002324:	1e6a      	subs	r2, r5, #1
 8002326:	4195      	sbcs	r5, r2
 8002328:	002a      	movs	r2, r5
 800232a:	430a      	orrs	r2, r1
 800232c:	2107      	movs	r1, #7
 800232e:	000d      	movs	r5, r1
 8002330:	2400      	movs	r4, #0
 8002332:	4015      	ands	r5, r2
 8002334:	4211      	tst	r1, r2
 8002336:	d05b      	beq.n	80023f0 <__aeabi_dmul+0x4b4>
 8002338:	210f      	movs	r1, #15
 800233a:	2400      	movs	r4, #0
 800233c:	4011      	ands	r1, r2
 800233e:	2904      	cmp	r1, #4
 8002340:	d053      	beq.n	80023ea <__aeabi_dmul+0x4ae>
 8002342:	1d11      	adds	r1, r2, #4
 8002344:	4291      	cmp	r1, r2
 8002346:	4192      	sbcs	r2, r2
 8002348:	4252      	negs	r2, r2
 800234a:	18a4      	adds	r4, r4, r2
 800234c:	000a      	movs	r2, r1
 800234e:	0223      	lsls	r3, r4, #8
 8002350:	d54b      	bpl.n	80023ea <__aeabi_dmul+0x4ae>
 8002352:	2201      	movs	r2, #1
 8002354:	2400      	movs	r4, #0
 8002356:	2500      	movs	r5, #0
 8002358:	e660      	b.n	800201c <__aeabi_dmul+0xe0>
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	031b      	lsls	r3, r3, #12
 800235e:	421c      	tst	r4, r3
 8002360:	d009      	beq.n	8002376 <__aeabi_dmul+0x43a>
 8002362:	421e      	tst	r6, r3
 8002364:	d107      	bne.n	8002376 <__aeabi_dmul+0x43a>
 8002366:	4333      	orrs	r3, r6
 8002368:	031c      	lsls	r4, r3, #12
 800236a:	4643      	mov	r3, r8
 800236c:	0015      	movs	r5, r2
 800236e:	0b24      	lsrs	r4, r4, #12
 8002370:	4a25      	ldr	r2, [pc, #148]	; (8002408 <__aeabi_dmul+0x4cc>)
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	e652      	b.n	800201c <__aeabi_dmul+0xe0>
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	0312      	lsls	r2, r2, #12
 800237a:	4314      	orrs	r4, r2
 800237c:	0324      	lsls	r4, r4, #12
 800237e:	4a22      	ldr	r2, [pc, #136]	; (8002408 <__aeabi_dmul+0x4cc>)
 8002380:	0b24      	lsrs	r4, r4, #12
 8002382:	9701      	str	r7, [sp, #4]
 8002384:	e64a      	b.n	800201c <__aeabi_dmul+0xe0>
 8002386:	f000 fd51 	bl	8002e2c <__clzsi2>
 800238a:	0003      	movs	r3, r0
 800238c:	001a      	movs	r2, r3
 800238e:	3215      	adds	r2, #21
 8002390:	3020      	adds	r0, #32
 8002392:	2a1c      	cmp	r2, #28
 8002394:	dc00      	bgt.n	8002398 <__aeabi_dmul+0x45c>
 8002396:	e684      	b.n	80020a2 <__aeabi_dmul+0x166>
 8002398:	4656      	mov	r6, sl
 800239a:	3b08      	subs	r3, #8
 800239c:	2200      	movs	r2, #0
 800239e:	409e      	lsls	r6, r3
 80023a0:	e689      	b.n	80020b6 <__aeabi_dmul+0x17a>
 80023a2:	f000 fd43 	bl	8002e2c <__clzsi2>
 80023a6:	0001      	movs	r1, r0
 80023a8:	0002      	movs	r2, r0
 80023aa:	3115      	adds	r1, #21
 80023ac:	3220      	adds	r2, #32
 80023ae:	291c      	cmp	r1, #28
 80023b0:	dc00      	bgt.n	80023b4 <__aeabi_dmul+0x478>
 80023b2:	e64e      	b.n	8002052 <__aeabi_dmul+0x116>
 80023b4:	0034      	movs	r4, r6
 80023b6:	3808      	subs	r0, #8
 80023b8:	2500      	movs	r5, #0
 80023ba:	4084      	lsls	r4, r0
 80023bc:	e653      	b.n	8002066 <__aeabi_dmul+0x12a>
 80023be:	9b00      	ldr	r3, [sp, #0]
 80023c0:	469c      	mov	ip, r3
 80023c2:	e741      	b.n	8002248 <__aeabi_dmul+0x30c>
 80023c4:	4912      	ldr	r1, [pc, #72]	; (8002410 <__aeabi_dmul+0x4d4>)
 80023c6:	0022      	movs	r2, r4
 80023c8:	4461      	add	r1, ip
 80023ca:	002e      	movs	r6, r5
 80023cc:	408d      	lsls	r5, r1
 80023ce:	408a      	lsls	r2, r1
 80023d0:	40c6      	lsrs	r6, r0
 80023d2:	1e69      	subs	r1, r5, #1
 80023d4:	418d      	sbcs	r5, r1
 80023d6:	4332      	orrs	r2, r6
 80023d8:	432a      	orrs	r2, r5
 80023da:	40c4      	lsrs	r4, r0
 80023dc:	0753      	lsls	r3, r2, #29
 80023de:	d0b6      	beq.n	800234e <__aeabi_dmul+0x412>
 80023e0:	210f      	movs	r1, #15
 80023e2:	4011      	ands	r1, r2
 80023e4:	2904      	cmp	r1, #4
 80023e6:	d1ac      	bne.n	8002342 <__aeabi_dmul+0x406>
 80023e8:	e7b1      	b.n	800234e <__aeabi_dmul+0x412>
 80023ea:	0765      	lsls	r5, r4, #29
 80023ec:	0264      	lsls	r4, r4, #9
 80023ee:	0b24      	lsrs	r4, r4, #12
 80023f0:	08d2      	lsrs	r2, r2, #3
 80023f2:	4315      	orrs	r5, r2
 80023f4:	2200      	movs	r2, #0
 80023f6:	e611      	b.n	800201c <__aeabi_dmul+0xe0>
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	0312      	lsls	r2, r2, #12
 80023fc:	4314      	orrs	r4, r2
 80023fe:	0324      	lsls	r4, r4, #12
 8002400:	4a01      	ldr	r2, [pc, #4]	; (8002408 <__aeabi_dmul+0x4cc>)
 8002402:	0b24      	lsrs	r4, r4, #12
 8002404:	e60a      	b.n	800201c <__aeabi_dmul+0xe0>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	000007ff 	.word	0x000007ff
 800240c:	0000043e 	.word	0x0000043e
 8002410:	0000041e 	.word	0x0000041e

08002414 <__aeabi_dsub>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	4657      	mov	r7, sl
 8002418:	464e      	mov	r6, r9
 800241a:	4645      	mov	r5, r8
 800241c:	46de      	mov	lr, fp
 800241e:	0004      	movs	r4, r0
 8002420:	b5e0      	push	{r5, r6, r7, lr}
 8002422:	001f      	movs	r7, r3
 8002424:	0010      	movs	r0, r2
 8002426:	030b      	lsls	r3, r1, #12
 8002428:	0f62      	lsrs	r2, r4, #29
 800242a:	004e      	lsls	r6, r1, #1
 800242c:	0fcd      	lsrs	r5, r1, #31
 800242e:	0a5b      	lsrs	r3, r3, #9
 8002430:	0339      	lsls	r1, r7, #12
 8002432:	4313      	orrs	r3, r2
 8002434:	0a49      	lsrs	r1, r1, #9
 8002436:	00e2      	lsls	r2, r4, #3
 8002438:	0f44      	lsrs	r4, r0, #29
 800243a:	4321      	orrs	r1, r4
 800243c:	4cc2      	ldr	r4, [pc, #776]	; (8002748 <__aeabi_dsub+0x334>)
 800243e:	4691      	mov	r9, r2
 8002440:	4692      	mov	sl, r2
 8002442:	00c0      	lsls	r0, r0, #3
 8002444:	007a      	lsls	r2, r7, #1
 8002446:	4680      	mov	r8, r0
 8002448:	0d76      	lsrs	r6, r6, #21
 800244a:	0d52      	lsrs	r2, r2, #21
 800244c:	0fff      	lsrs	r7, r7, #31
 800244e:	42a2      	cmp	r2, r4
 8002450:	d100      	bne.n	8002454 <__aeabi_dsub+0x40>
 8002452:	e0b4      	b.n	80025be <__aeabi_dsub+0x1aa>
 8002454:	2401      	movs	r4, #1
 8002456:	4067      	eors	r7, r4
 8002458:	46bb      	mov	fp, r7
 800245a:	42bd      	cmp	r5, r7
 800245c:	d100      	bne.n	8002460 <__aeabi_dsub+0x4c>
 800245e:	e088      	b.n	8002572 <__aeabi_dsub+0x15e>
 8002460:	1ab4      	subs	r4, r6, r2
 8002462:	46a4      	mov	ip, r4
 8002464:	2c00      	cmp	r4, #0
 8002466:	dc00      	bgt.n	800246a <__aeabi_dsub+0x56>
 8002468:	e0b2      	b.n	80025d0 <__aeabi_dsub+0x1bc>
 800246a:	2a00      	cmp	r2, #0
 800246c:	d100      	bne.n	8002470 <__aeabi_dsub+0x5c>
 800246e:	e0c5      	b.n	80025fc <__aeabi_dsub+0x1e8>
 8002470:	4ab5      	ldr	r2, [pc, #724]	; (8002748 <__aeabi_dsub+0x334>)
 8002472:	4296      	cmp	r6, r2
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x64>
 8002476:	e28b      	b.n	8002990 <__aeabi_dsub+0x57c>
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	0412      	lsls	r2, r2, #16
 800247c:	4311      	orrs	r1, r2
 800247e:	4662      	mov	r2, ip
 8002480:	2a38      	cmp	r2, #56	; 0x38
 8002482:	dd00      	ble.n	8002486 <__aeabi_dsub+0x72>
 8002484:	e1a1      	b.n	80027ca <__aeabi_dsub+0x3b6>
 8002486:	2a1f      	cmp	r2, #31
 8002488:	dd00      	ble.n	800248c <__aeabi_dsub+0x78>
 800248a:	e216      	b.n	80028ba <__aeabi_dsub+0x4a6>
 800248c:	2720      	movs	r7, #32
 800248e:	000c      	movs	r4, r1
 8002490:	1abf      	subs	r7, r7, r2
 8002492:	40bc      	lsls	r4, r7
 8002494:	0002      	movs	r2, r0
 8002496:	46a0      	mov	r8, r4
 8002498:	4664      	mov	r4, ip
 800249a:	40b8      	lsls	r0, r7
 800249c:	40e2      	lsrs	r2, r4
 800249e:	4644      	mov	r4, r8
 80024a0:	4314      	orrs	r4, r2
 80024a2:	0002      	movs	r2, r0
 80024a4:	1e50      	subs	r0, r2, #1
 80024a6:	4182      	sbcs	r2, r0
 80024a8:	4660      	mov	r0, ip
 80024aa:	40c1      	lsrs	r1, r0
 80024ac:	4322      	orrs	r2, r4
 80024ae:	1a5b      	subs	r3, r3, r1
 80024b0:	4649      	mov	r1, r9
 80024b2:	1a8c      	subs	r4, r1, r2
 80024b4:	45a1      	cmp	r9, r4
 80024b6:	4192      	sbcs	r2, r2
 80024b8:	4252      	negs	r2, r2
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	4698      	mov	r8, r3
 80024be:	4643      	mov	r3, r8
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	d400      	bmi.n	80024c6 <__aeabi_dsub+0xb2>
 80024c4:	e117      	b.n	80026f6 <__aeabi_dsub+0x2e2>
 80024c6:	4643      	mov	r3, r8
 80024c8:	025b      	lsls	r3, r3, #9
 80024ca:	0a5b      	lsrs	r3, r3, #9
 80024cc:	4698      	mov	r8, r3
 80024ce:	4643      	mov	r3, r8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d100      	bne.n	80024d6 <__aeabi_dsub+0xc2>
 80024d4:	e16c      	b.n	80027b0 <__aeabi_dsub+0x39c>
 80024d6:	4640      	mov	r0, r8
 80024d8:	f000 fca8 	bl	8002e2c <__clzsi2>
 80024dc:	0002      	movs	r2, r0
 80024de:	3a08      	subs	r2, #8
 80024e0:	2120      	movs	r1, #32
 80024e2:	0020      	movs	r0, r4
 80024e4:	4643      	mov	r3, r8
 80024e6:	1a89      	subs	r1, r1, r2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	40c8      	lsrs	r0, r1
 80024ec:	4094      	lsls	r4, r2
 80024ee:	4303      	orrs	r3, r0
 80024f0:	4296      	cmp	r6, r2
 80024f2:	dd00      	ble.n	80024f6 <__aeabi_dsub+0xe2>
 80024f4:	e157      	b.n	80027a6 <__aeabi_dsub+0x392>
 80024f6:	1b96      	subs	r6, r2, r6
 80024f8:	1c71      	adds	r1, r6, #1
 80024fa:	291f      	cmp	r1, #31
 80024fc:	dd00      	ble.n	8002500 <__aeabi_dsub+0xec>
 80024fe:	e1cb      	b.n	8002898 <__aeabi_dsub+0x484>
 8002500:	2220      	movs	r2, #32
 8002502:	0018      	movs	r0, r3
 8002504:	0026      	movs	r6, r4
 8002506:	1a52      	subs	r2, r2, r1
 8002508:	4094      	lsls	r4, r2
 800250a:	4090      	lsls	r0, r2
 800250c:	40ce      	lsrs	r6, r1
 800250e:	40cb      	lsrs	r3, r1
 8002510:	1e62      	subs	r2, r4, #1
 8002512:	4194      	sbcs	r4, r2
 8002514:	4330      	orrs	r0, r6
 8002516:	4698      	mov	r8, r3
 8002518:	2600      	movs	r6, #0
 800251a:	4304      	orrs	r4, r0
 800251c:	0763      	lsls	r3, r4, #29
 800251e:	d009      	beq.n	8002534 <__aeabi_dsub+0x120>
 8002520:	230f      	movs	r3, #15
 8002522:	4023      	ands	r3, r4
 8002524:	2b04      	cmp	r3, #4
 8002526:	d005      	beq.n	8002534 <__aeabi_dsub+0x120>
 8002528:	1d23      	adds	r3, r4, #4
 800252a:	42a3      	cmp	r3, r4
 800252c:	41a4      	sbcs	r4, r4
 800252e:	4264      	negs	r4, r4
 8002530:	44a0      	add	r8, r4
 8002532:	001c      	movs	r4, r3
 8002534:	4643      	mov	r3, r8
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	d400      	bmi.n	800253c <__aeabi_dsub+0x128>
 800253a:	e0df      	b.n	80026fc <__aeabi_dsub+0x2e8>
 800253c:	4b82      	ldr	r3, [pc, #520]	; (8002748 <__aeabi_dsub+0x334>)
 800253e:	3601      	adds	r6, #1
 8002540:	429e      	cmp	r6, r3
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0x132>
 8002544:	e0fb      	b.n	800273e <__aeabi_dsub+0x32a>
 8002546:	4642      	mov	r2, r8
 8002548:	4b80      	ldr	r3, [pc, #512]	; (800274c <__aeabi_dsub+0x338>)
 800254a:	08e4      	lsrs	r4, r4, #3
 800254c:	401a      	ands	r2, r3
 800254e:	0013      	movs	r3, r2
 8002550:	0571      	lsls	r1, r6, #21
 8002552:	0752      	lsls	r2, r2, #29
 8002554:	025b      	lsls	r3, r3, #9
 8002556:	4322      	orrs	r2, r4
 8002558:	0b1b      	lsrs	r3, r3, #12
 800255a:	0d49      	lsrs	r1, r1, #21
 800255c:	0509      	lsls	r1, r1, #20
 800255e:	07ed      	lsls	r5, r5, #31
 8002560:	4319      	orrs	r1, r3
 8002562:	4329      	orrs	r1, r5
 8002564:	0010      	movs	r0, r2
 8002566:	bcf0      	pop	{r4, r5, r6, r7}
 8002568:	46bb      	mov	fp, r7
 800256a:	46b2      	mov	sl, r6
 800256c:	46a9      	mov	r9, r5
 800256e:	46a0      	mov	r8, r4
 8002570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002572:	1ab4      	subs	r4, r6, r2
 8002574:	46a4      	mov	ip, r4
 8002576:	2c00      	cmp	r4, #0
 8002578:	dd58      	ble.n	800262c <__aeabi_dsub+0x218>
 800257a:	2a00      	cmp	r2, #0
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x16c>
 800257e:	e09e      	b.n	80026be <__aeabi_dsub+0x2aa>
 8002580:	4a71      	ldr	r2, [pc, #452]	; (8002748 <__aeabi_dsub+0x334>)
 8002582:	4296      	cmp	r6, r2
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x174>
 8002586:	e13b      	b.n	8002800 <__aeabi_dsub+0x3ec>
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	0412      	lsls	r2, r2, #16
 800258c:	4311      	orrs	r1, r2
 800258e:	4662      	mov	r2, ip
 8002590:	2a38      	cmp	r2, #56	; 0x38
 8002592:	dd00      	ble.n	8002596 <__aeabi_dsub+0x182>
 8002594:	e0c1      	b.n	800271a <__aeabi_dsub+0x306>
 8002596:	2a1f      	cmp	r2, #31
 8002598:	dc00      	bgt.n	800259c <__aeabi_dsub+0x188>
 800259a:	e1bb      	b.n	8002914 <__aeabi_dsub+0x500>
 800259c:	000c      	movs	r4, r1
 800259e:	3a20      	subs	r2, #32
 80025a0:	40d4      	lsrs	r4, r2
 80025a2:	0022      	movs	r2, r4
 80025a4:	4664      	mov	r4, ip
 80025a6:	2c20      	cmp	r4, #32
 80025a8:	d004      	beq.n	80025b4 <__aeabi_dsub+0x1a0>
 80025aa:	2740      	movs	r7, #64	; 0x40
 80025ac:	1b3f      	subs	r7, r7, r4
 80025ae:	40b9      	lsls	r1, r7
 80025b0:	4308      	orrs	r0, r1
 80025b2:	4680      	mov	r8, r0
 80025b4:	4644      	mov	r4, r8
 80025b6:	1e61      	subs	r1, r4, #1
 80025b8:	418c      	sbcs	r4, r1
 80025ba:	4314      	orrs	r4, r2
 80025bc:	e0b1      	b.n	8002722 <__aeabi_dsub+0x30e>
 80025be:	000c      	movs	r4, r1
 80025c0:	4304      	orrs	r4, r0
 80025c2:	d02a      	beq.n	800261a <__aeabi_dsub+0x206>
 80025c4:	46bb      	mov	fp, r7
 80025c6:	42bd      	cmp	r5, r7
 80025c8:	d02d      	beq.n	8002626 <__aeabi_dsub+0x212>
 80025ca:	4c61      	ldr	r4, [pc, #388]	; (8002750 <__aeabi_dsub+0x33c>)
 80025cc:	46a4      	mov	ip, r4
 80025ce:	44b4      	add	ip, r6
 80025d0:	4664      	mov	r4, ip
 80025d2:	2c00      	cmp	r4, #0
 80025d4:	d05c      	beq.n	8002690 <__aeabi_dsub+0x27c>
 80025d6:	1b94      	subs	r4, r2, r6
 80025d8:	46a4      	mov	ip, r4
 80025da:	2e00      	cmp	r6, #0
 80025dc:	d000      	beq.n	80025e0 <__aeabi_dsub+0x1cc>
 80025de:	e115      	b.n	800280c <__aeabi_dsub+0x3f8>
 80025e0:	464d      	mov	r5, r9
 80025e2:	431d      	orrs	r5, r3
 80025e4:	d100      	bne.n	80025e8 <__aeabi_dsub+0x1d4>
 80025e6:	e1c3      	b.n	8002970 <__aeabi_dsub+0x55c>
 80025e8:	1e65      	subs	r5, r4, #1
 80025ea:	2c01      	cmp	r4, #1
 80025ec:	d100      	bne.n	80025f0 <__aeabi_dsub+0x1dc>
 80025ee:	e20c      	b.n	8002a0a <__aeabi_dsub+0x5f6>
 80025f0:	4e55      	ldr	r6, [pc, #340]	; (8002748 <__aeabi_dsub+0x334>)
 80025f2:	42b4      	cmp	r4, r6
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dsub+0x1e4>
 80025f6:	e1f8      	b.n	80029ea <__aeabi_dsub+0x5d6>
 80025f8:	46ac      	mov	ip, r5
 80025fa:	e10e      	b.n	800281a <__aeabi_dsub+0x406>
 80025fc:	000a      	movs	r2, r1
 80025fe:	4302      	orrs	r2, r0
 8002600:	d100      	bne.n	8002604 <__aeabi_dsub+0x1f0>
 8002602:	e136      	b.n	8002872 <__aeabi_dsub+0x45e>
 8002604:	0022      	movs	r2, r4
 8002606:	3a01      	subs	r2, #1
 8002608:	2c01      	cmp	r4, #1
 800260a:	d100      	bne.n	800260e <__aeabi_dsub+0x1fa>
 800260c:	e1c6      	b.n	800299c <__aeabi_dsub+0x588>
 800260e:	4c4e      	ldr	r4, [pc, #312]	; (8002748 <__aeabi_dsub+0x334>)
 8002610:	45a4      	cmp	ip, r4
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x202>
 8002614:	e0f4      	b.n	8002800 <__aeabi_dsub+0x3ec>
 8002616:	4694      	mov	ip, r2
 8002618:	e731      	b.n	800247e <__aeabi_dsub+0x6a>
 800261a:	2401      	movs	r4, #1
 800261c:	4067      	eors	r7, r4
 800261e:	46bb      	mov	fp, r7
 8002620:	42bd      	cmp	r5, r7
 8002622:	d000      	beq.n	8002626 <__aeabi_dsub+0x212>
 8002624:	e71c      	b.n	8002460 <__aeabi_dsub+0x4c>
 8002626:	4c4a      	ldr	r4, [pc, #296]	; (8002750 <__aeabi_dsub+0x33c>)
 8002628:	46a4      	mov	ip, r4
 800262a:	44b4      	add	ip, r6
 800262c:	4664      	mov	r4, ip
 800262e:	2c00      	cmp	r4, #0
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x220>
 8002632:	e0cf      	b.n	80027d4 <__aeabi_dsub+0x3c0>
 8002634:	1b94      	subs	r4, r2, r6
 8002636:	46a4      	mov	ip, r4
 8002638:	2e00      	cmp	r6, #0
 800263a:	d100      	bne.n	800263e <__aeabi_dsub+0x22a>
 800263c:	e15c      	b.n	80028f8 <__aeabi_dsub+0x4e4>
 800263e:	4e42      	ldr	r6, [pc, #264]	; (8002748 <__aeabi_dsub+0x334>)
 8002640:	42b2      	cmp	r2, r6
 8002642:	d100      	bne.n	8002646 <__aeabi_dsub+0x232>
 8002644:	e1ec      	b.n	8002a20 <__aeabi_dsub+0x60c>
 8002646:	2680      	movs	r6, #128	; 0x80
 8002648:	0436      	lsls	r6, r6, #16
 800264a:	4333      	orrs	r3, r6
 800264c:	4664      	mov	r4, ip
 800264e:	2c38      	cmp	r4, #56	; 0x38
 8002650:	dd00      	ble.n	8002654 <__aeabi_dsub+0x240>
 8002652:	e1b3      	b.n	80029bc <__aeabi_dsub+0x5a8>
 8002654:	2c1f      	cmp	r4, #31
 8002656:	dd00      	ble.n	800265a <__aeabi_dsub+0x246>
 8002658:	e238      	b.n	8002acc <__aeabi_dsub+0x6b8>
 800265a:	2620      	movs	r6, #32
 800265c:	1b36      	subs	r6, r6, r4
 800265e:	001c      	movs	r4, r3
 8002660:	40b4      	lsls	r4, r6
 8002662:	464f      	mov	r7, r9
 8002664:	46a0      	mov	r8, r4
 8002666:	4664      	mov	r4, ip
 8002668:	40e7      	lsrs	r7, r4
 800266a:	4644      	mov	r4, r8
 800266c:	433c      	orrs	r4, r7
 800266e:	464f      	mov	r7, r9
 8002670:	40b7      	lsls	r7, r6
 8002672:	003e      	movs	r6, r7
 8002674:	1e77      	subs	r7, r6, #1
 8002676:	41be      	sbcs	r6, r7
 8002678:	4334      	orrs	r4, r6
 800267a:	4666      	mov	r6, ip
 800267c:	40f3      	lsrs	r3, r6
 800267e:	18c9      	adds	r1, r1, r3
 8002680:	1824      	adds	r4, r4, r0
 8002682:	4284      	cmp	r4, r0
 8002684:	419b      	sbcs	r3, r3
 8002686:	425b      	negs	r3, r3
 8002688:	4698      	mov	r8, r3
 800268a:	0016      	movs	r6, r2
 800268c:	4488      	add	r8, r1
 800268e:	e04e      	b.n	800272e <__aeabi_dsub+0x31a>
 8002690:	4a30      	ldr	r2, [pc, #192]	; (8002754 <__aeabi_dsub+0x340>)
 8002692:	1c74      	adds	r4, r6, #1
 8002694:	4214      	tst	r4, r2
 8002696:	d000      	beq.n	800269a <__aeabi_dsub+0x286>
 8002698:	e0d6      	b.n	8002848 <__aeabi_dsub+0x434>
 800269a:	464a      	mov	r2, r9
 800269c:	431a      	orrs	r2, r3
 800269e:	2e00      	cmp	r6, #0
 80026a0:	d000      	beq.n	80026a4 <__aeabi_dsub+0x290>
 80026a2:	e15b      	b.n	800295c <__aeabi_dsub+0x548>
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	d100      	bne.n	80026aa <__aeabi_dsub+0x296>
 80026a8:	e1a5      	b.n	80029f6 <__aeabi_dsub+0x5e2>
 80026aa:	000a      	movs	r2, r1
 80026ac:	4302      	orrs	r2, r0
 80026ae:	d000      	beq.n	80026b2 <__aeabi_dsub+0x29e>
 80026b0:	e1bb      	b.n	8002a2a <__aeabi_dsub+0x616>
 80026b2:	464a      	mov	r2, r9
 80026b4:	0759      	lsls	r1, r3, #29
 80026b6:	08d2      	lsrs	r2, r2, #3
 80026b8:	430a      	orrs	r2, r1
 80026ba:	08db      	lsrs	r3, r3, #3
 80026bc:	e027      	b.n	800270e <__aeabi_dsub+0x2fa>
 80026be:	000a      	movs	r2, r1
 80026c0:	4302      	orrs	r2, r0
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x2b2>
 80026c4:	e174      	b.n	80029b0 <__aeabi_dsub+0x59c>
 80026c6:	0022      	movs	r2, r4
 80026c8:	3a01      	subs	r2, #1
 80026ca:	2c01      	cmp	r4, #1
 80026cc:	d005      	beq.n	80026da <__aeabi_dsub+0x2c6>
 80026ce:	4c1e      	ldr	r4, [pc, #120]	; (8002748 <__aeabi_dsub+0x334>)
 80026d0:	45a4      	cmp	ip, r4
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dsub+0x2c2>
 80026d4:	e094      	b.n	8002800 <__aeabi_dsub+0x3ec>
 80026d6:	4694      	mov	ip, r2
 80026d8:	e759      	b.n	800258e <__aeabi_dsub+0x17a>
 80026da:	4448      	add	r0, r9
 80026dc:	4548      	cmp	r0, r9
 80026de:	4192      	sbcs	r2, r2
 80026e0:	185b      	adds	r3, r3, r1
 80026e2:	4698      	mov	r8, r3
 80026e4:	0004      	movs	r4, r0
 80026e6:	4252      	negs	r2, r2
 80026e8:	4490      	add	r8, r2
 80026ea:	4643      	mov	r3, r8
 80026ec:	2602      	movs	r6, #2
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	d500      	bpl.n	80026f4 <__aeabi_dsub+0x2e0>
 80026f2:	e0c4      	b.n	800287e <__aeabi_dsub+0x46a>
 80026f4:	3e01      	subs	r6, #1
 80026f6:	0763      	lsls	r3, r4, #29
 80026f8:	d000      	beq.n	80026fc <__aeabi_dsub+0x2e8>
 80026fa:	e711      	b.n	8002520 <__aeabi_dsub+0x10c>
 80026fc:	4643      	mov	r3, r8
 80026fe:	46b4      	mov	ip, r6
 8002700:	0759      	lsls	r1, r3, #29
 8002702:	08e2      	lsrs	r2, r4, #3
 8002704:	430a      	orrs	r2, r1
 8002706:	08db      	lsrs	r3, r3, #3
 8002708:	490f      	ldr	r1, [pc, #60]	; (8002748 <__aeabi_dsub+0x334>)
 800270a:	458c      	cmp	ip, r1
 800270c:	d040      	beq.n	8002790 <__aeabi_dsub+0x37c>
 800270e:	4661      	mov	r1, ip
 8002710:	031b      	lsls	r3, r3, #12
 8002712:	0549      	lsls	r1, r1, #21
 8002714:	0b1b      	lsrs	r3, r3, #12
 8002716:	0d49      	lsrs	r1, r1, #21
 8002718:	e720      	b.n	800255c <__aeabi_dsub+0x148>
 800271a:	4301      	orrs	r1, r0
 800271c:	000c      	movs	r4, r1
 800271e:	1e61      	subs	r1, r4, #1
 8002720:	418c      	sbcs	r4, r1
 8002722:	444c      	add	r4, r9
 8002724:	454c      	cmp	r4, r9
 8002726:	4192      	sbcs	r2, r2
 8002728:	4252      	negs	r2, r2
 800272a:	4690      	mov	r8, r2
 800272c:	4498      	add	r8, r3
 800272e:	4643      	mov	r3, r8
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	d5e0      	bpl.n	80026f6 <__aeabi_dsub+0x2e2>
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <__aeabi_dsub+0x334>)
 8002736:	3601      	adds	r6, #1
 8002738:	429e      	cmp	r6, r3
 800273a:	d000      	beq.n	800273e <__aeabi_dsub+0x32a>
 800273c:	e09f      	b.n	800287e <__aeabi_dsub+0x46a>
 800273e:	0031      	movs	r1, r6
 8002740:	2300      	movs	r3, #0
 8002742:	2200      	movs	r2, #0
 8002744:	e70a      	b.n	800255c <__aeabi_dsub+0x148>
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	000007ff 	.word	0x000007ff
 800274c:	ff7fffff 	.word	0xff7fffff
 8002750:	fffff801 	.word	0xfffff801
 8002754:	000007fe 	.word	0x000007fe
 8002758:	2a00      	cmp	r2, #0
 800275a:	d100      	bne.n	800275e <__aeabi_dsub+0x34a>
 800275c:	e160      	b.n	8002a20 <__aeabi_dsub+0x60c>
 800275e:	000a      	movs	r2, r1
 8002760:	4302      	orrs	r2, r0
 8002762:	d04d      	beq.n	8002800 <__aeabi_dsub+0x3ec>
 8002764:	464a      	mov	r2, r9
 8002766:	075c      	lsls	r4, r3, #29
 8002768:	08d2      	lsrs	r2, r2, #3
 800276a:	4322      	orrs	r2, r4
 800276c:	2480      	movs	r4, #128	; 0x80
 800276e:	08db      	lsrs	r3, r3, #3
 8002770:	0324      	lsls	r4, r4, #12
 8002772:	4223      	tst	r3, r4
 8002774:	d007      	beq.n	8002786 <__aeabi_dsub+0x372>
 8002776:	08ce      	lsrs	r6, r1, #3
 8002778:	4226      	tst	r6, r4
 800277a:	d104      	bne.n	8002786 <__aeabi_dsub+0x372>
 800277c:	465d      	mov	r5, fp
 800277e:	0033      	movs	r3, r6
 8002780:	08c2      	lsrs	r2, r0, #3
 8002782:	0749      	lsls	r1, r1, #29
 8002784:	430a      	orrs	r2, r1
 8002786:	0f51      	lsrs	r1, r2, #29
 8002788:	00d2      	lsls	r2, r2, #3
 800278a:	08d2      	lsrs	r2, r2, #3
 800278c:	0749      	lsls	r1, r1, #29
 800278e:	430a      	orrs	r2, r1
 8002790:	0011      	movs	r1, r2
 8002792:	4319      	orrs	r1, r3
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x384>
 8002796:	e1c8      	b.n	8002b2a <__aeabi_dsub+0x716>
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	0309      	lsls	r1, r1, #12
 800279c:	430b      	orrs	r3, r1
 800279e:	031b      	lsls	r3, r3, #12
 80027a0:	49d5      	ldr	r1, [pc, #852]	; (8002af8 <__aeabi_dsub+0x6e4>)
 80027a2:	0b1b      	lsrs	r3, r3, #12
 80027a4:	e6da      	b.n	800255c <__aeabi_dsub+0x148>
 80027a6:	49d5      	ldr	r1, [pc, #852]	; (8002afc <__aeabi_dsub+0x6e8>)
 80027a8:	1ab6      	subs	r6, r6, r2
 80027aa:	400b      	ands	r3, r1
 80027ac:	4698      	mov	r8, r3
 80027ae:	e6b5      	b.n	800251c <__aeabi_dsub+0x108>
 80027b0:	0020      	movs	r0, r4
 80027b2:	f000 fb3b 	bl	8002e2c <__clzsi2>
 80027b6:	0002      	movs	r2, r0
 80027b8:	3218      	adds	r2, #24
 80027ba:	2a1f      	cmp	r2, #31
 80027bc:	dc00      	bgt.n	80027c0 <__aeabi_dsub+0x3ac>
 80027be:	e68f      	b.n	80024e0 <__aeabi_dsub+0xcc>
 80027c0:	0023      	movs	r3, r4
 80027c2:	3808      	subs	r0, #8
 80027c4:	4083      	lsls	r3, r0
 80027c6:	2400      	movs	r4, #0
 80027c8:	e692      	b.n	80024f0 <__aeabi_dsub+0xdc>
 80027ca:	4308      	orrs	r0, r1
 80027cc:	0002      	movs	r2, r0
 80027ce:	1e50      	subs	r0, r2, #1
 80027d0:	4182      	sbcs	r2, r0
 80027d2:	e66d      	b.n	80024b0 <__aeabi_dsub+0x9c>
 80027d4:	4cca      	ldr	r4, [pc, #808]	; (8002b00 <__aeabi_dsub+0x6ec>)
 80027d6:	1c72      	adds	r2, r6, #1
 80027d8:	4222      	tst	r2, r4
 80027da:	d000      	beq.n	80027de <__aeabi_dsub+0x3ca>
 80027dc:	e0ad      	b.n	800293a <__aeabi_dsub+0x526>
 80027de:	464a      	mov	r2, r9
 80027e0:	431a      	orrs	r2, r3
 80027e2:	2e00      	cmp	r6, #0
 80027e4:	d1b8      	bne.n	8002758 <__aeabi_dsub+0x344>
 80027e6:	2a00      	cmp	r2, #0
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x3d8>
 80027ea:	e158      	b.n	8002a9e <__aeabi_dsub+0x68a>
 80027ec:	000a      	movs	r2, r1
 80027ee:	4302      	orrs	r2, r0
 80027f0:	d000      	beq.n	80027f4 <__aeabi_dsub+0x3e0>
 80027f2:	e159      	b.n	8002aa8 <__aeabi_dsub+0x694>
 80027f4:	464a      	mov	r2, r9
 80027f6:	0759      	lsls	r1, r3, #29
 80027f8:	08d2      	lsrs	r2, r2, #3
 80027fa:	430a      	orrs	r2, r1
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	e786      	b.n	800270e <__aeabi_dsub+0x2fa>
 8002800:	464a      	mov	r2, r9
 8002802:	0759      	lsls	r1, r3, #29
 8002804:	08d2      	lsrs	r2, r2, #3
 8002806:	430a      	orrs	r2, r1
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	e7c1      	b.n	8002790 <__aeabi_dsub+0x37c>
 800280c:	4dba      	ldr	r5, [pc, #744]	; (8002af8 <__aeabi_dsub+0x6e4>)
 800280e:	42aa      	cmp	r2, r5
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x400>
 8002812:	e11e      	b.n	8002a52 <__aeabi_dsub+0x63e>
 8002814:	2580      	movs	r5, #128	; 0x80
 8002816:	042d      	lsls	r5, r5, #16
 8002818:	432b      	orrs	r3, r5
 800281a:	4664      	mov	r4, ip
 800281c:	2c38      	cmp	r4, #56	; 0x38
 800281e:	dc5d      	bgt.n	80028dc <__aeabi_dsub+0x4c8>
 8002820:	2c1f      	cmp	r4, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x412>
 8002824:	e0d0      	b.n	80029c8 <__aeabi_dsub+0x5b4>
 8002826:	2520      	movs	r5, #32
 8002828:	4667      	mov	r7, ip
 800282a:	1b2d      	subs	r5, r5, r4
 800282c:	464e      	mov	r6, r9
 800282e:	001c      	movs	r4, r3
 8002830:	40fe      	lsrs	r6, r7
 8002832:	40ac      	lsls	r4, r5
 8002834:	4334      	orrs	r4, r6
 8002836:	464e      	mov	r6, r9
 8002838:	40ae      	lsls	r6, r5
 800283a:	0035      	movs	r5, r6
 800283c:	40fb      	lsrs	r3, r7
 800283e:	1e6e      	subs	r6, r5, #1
 8002840:	41b5      	sbcs	r5, r6
 8002842:	1ac9      	subs	r1, r1, r3
 8002844:	432c      	orrs	r4, r5
 8002846:	e04e      	b.n	80028e6 <__aeabi_dsub+0x4d2>
 8002848:	464a      	mov	r2, r9
 800284a:	1a14      	subs	r4, r2, r0
 800284c:	45a1      	cmp	r9, r4
 800284e:	4192      	sbcs	r2, r2
 8002850:	4252      	negs	r2, r2
 8002852:	4690      	mov	r8, r2
 8002854:	1a5f      	subs	r7, r3, r1
 8002856:	003a      	movs	r2, r7
 8002858:	4647      	mov	r7, r8
 800285a:	1bd2      	subs	r2, r2, r7
 800285c:	4690      	mov	r8, r2
 800285e:	0212      	lsls	r2, r2, #8
 8002860:	d500      	bpl.n	8002864 <__aeabi_dsub+0x450>
 8002862:	e08b      	b.n	800297c <__aeabi_dsub+0x568>
 8002864:	4642      	mov	r2, r8
 8002866:	4322      	orrs	r2, r4
 8002868:	d000      	beq.n	800286c <__aeabi_dsub+0x458>
 800286a:	e630      	b.n	80024ce <__aeabi_dsub+0xba>
 800286c:	2300      	movs	r3, #0
 800286e:	2500      	movs	r5, #0
 8002870:	e74d      	b.n	800270e <__aeabi_dsub+0x2fa>
 8002872:	464a      	mov	r2, r9
 8002874:	0759      	lsls	r1, r3, #29
 8002876:	08d2      	lsrs	r2, r2, #3
 8002878:	430a      	orrs	r2, r1
 800287a:	08db      	lsrs	r3, r3, #3
 800287c:	e744      	b.n	8002708 <__aeabi_dsub+0x2f4>
 800287e:	4642      	mov	r2, r8
 8002880:	4b9e      	ldr	r3, [pc, #632]	; (8002afc <__aeabi_dsub+0x6e8>)
 8002882:	0861      	lsrs	r1, r4, #1
 8002884:	401a      	ands	r2, r3
 8002886:	0013      	movs	r3, r2
 8002888:	2201      	movs	r2, #1
 800288a:	4014      	ands	r4, r2
 800288c:	430c      	orrs	r4, r1
 800288e:	07da      	lsls	r2, r3, #31
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	4698      	mov	r8, r3
 8002894:	4314      	orrs	r4, r2
 8002896:	e641      	b.n	800251c <__aeabi_dsub+0x108>
 8002898:	001a      	movs	r2, r3
 800289a:	3e1f      	subs	r6, #31
 800289c:	40f2      	lsrs	r2, r6
 800289e:	0016      	movs	r6, r2
 80028a0:	2920      	cmp	r1, #32
 80028a2:	d003      	beq.n	80028ac <__aeabi_dsub+0x498>
 80028a4:	2240      	movs	r2, #64	; 0x40
 80028a6:	1a51      	subs	r1, r2, r1
 80028a8:	408b      	lsls	r3, r1
 80028aa:	431c      	orrs	r4, r3
 80028ac:	1e62      	subs	r2, r4, #1
 80028ae:	4194      	sbcs	r4, r2
 80028b0:	2300      	movs	r3, #0
 80028b2:	4334      	orrs	r4, r6
 80028b4:	4698      	mov	r8, r3
 80028b6:	2600      	movs	r6, #0
 80028b8:	e71d      	b.n	80026f6 <__aeabi_dsub+0x2e2>
 80028ba:	000c      	movs	r4, r1
 80028bc:	3a20      	subs	r2, #32
 80028be:	40d4      	lsrs	r4, r2
 80028c0:	0022      	movs	r2, r4
 80028c2:	4664      	mov	r4, ip
 80028c4:	2c20      	cmp	r4, #32
 80028c6:	d004      	beq.n	80028d2 <__aeabi_dsub+0x4be>
 80028c8:	2740      	movs	r7, #64	; 0x40
 80028ca:	1b3f      	subs	r7, r7, r4
 80028cc:	40b9      	lsls	r1, r7
 80028ce:	4308      	orrs	r0, r1
 80028d0:	4680      	mov	r8, r0
 80028d2:	4644      	mov	r4, r8
 80028d4:	1e61      	subs	r1, r4, #1
 80028d6:	418c      	sbcs	r4, r1
 80028d8:	4322      	orrs	r2, r4
 80028da:	e5e9      	b.n	80024b0 <__aeabi_dsub+0x9c>
 80028dc:	464c      	mov	r4, r9
 80028de:	4323      	orrs	r3, r4
 80028e0:	001c      	movs	r4, r3
 80028e2:	1e63      	subs	r3, r4, #1
 80028e4:	419c      	sbcs	r4, r3
 80028e6:	1b04      	subs	r4, r0, r4
 80028e8:	42a0      	cmp	r0, r4
 80028ea:	419b      	sbcs	r3, r3
 80028ec:	425b      	negs	r3, r3
 80028ee:	1acb      	subs	r3, r1, r3
 80028f0:	4698      	mov	r8, r3
 80028f2:	465d      	mov	r5, fp
 80028f4:	0016      	movs	r6, r2
 80028f6:	e5e2      	b.n	80024be <__aeabi_dsub+0xaa>
 80028f8:	464e      	mov	r6, r9
 80028fa:	431e      	orrs	r6, r3
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x4ec>
 80028fe:	e0ae      	b.n	8002a5e <__aeabi_dsub+0x64a>
 8002900:	1e66      	subs	r6, r4, #1
 8002902:	2c01      	cmp	r4, #1
 8002904:	d100      	bne.n	8002908 <__aeabi_dsub+0x4f4>
 8002906:	e0fd      	b.n	8002b04 <__aeabi_dsub+0x6f0>
 8002908:	4f7b      	ldr	r7, [pc, #492]	; (8002af8 <__aeabi_dsub+0x6e4>)
 800290a:	42bc      	cmp	r4, r7
 800290c:	d100      	bne.n	8002910 <__aeabi_dsub+0x4fc>
 800290e:	e107      	b.n	8002b20 <__aeabi_dsub+0x70c>
 8002910:	46b4      	mov	ip, r6
 8002912:	e69b      	b.n	800264c <__aeabi_dsub+0x238>
 8002914:	4664      	mov	r4, ip
 8002916:	2220      	movs	r2, #32
 8002918:	1b12      	subs	r2, r2, r4
 800291a:	000c      	movs	r4, r1
 800291c:	4094      	lsls	r4, r2
 800291e:	0007      	movs	r7, r0
 8002920:	4090      	lsls	r0, r2
 8002922:	46a0      	mov	r8, r4
 8002924:	4664      	mov	r4, ip
 8002926:	1e42      	subs	r2, r0, #1
 8002928:	4190      	sbcs	r0, r2
 800292a:	4662      	mov	r2, ip
 800292c:	40e7      	lsrs	r7, r4
 800292e:	4644      	mov	r4, r8
 8002930:	40d1      	lsrs	r1, r2
 8002932:	433c      	orrs	r4, r7
 8002934:	4304      	orrs	r4, r0
 8002936:	185b      	adds	r3, r3, r1
 8002938:	e6f3      	b.n	8002722 <__aeabi_dsub+0x30e>
 800293a:	4c6f      	ldr	r4, [pc, #444]	; (8002af8 <__aeabi_dsub+0x6e4>)
 800293c:	42a2      	cmp	r2, r4
 800293e:	d100      	bne.n	8002942 <__aeabi_dsub+0x52e>
 8002940:	e0d5      	b.n	8002aee <__aeabi_dsub+0x6da>
 8002942:	4448      	add	r0, r9
 8002944:	185b      	adds	r3, r3, r1
 8002946:	4548      	cmp	r0, r9
 8002948:	4189      	sbcs	r1, r1
 800294a:	4249      	negs	r1, r1
 800294c:	185b      	adds	r3, r3, r1
 800294e:	07dc      	lsls	r4, r3, #31
 8002950:	0840      	lsrs	r0, r0, #1
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	4698      	mov	r8, r3
 8002956:	0016      	movs	r6, r2
 8002958:	4304      	orrs	r4, r0
 800295a:	e6cc      	b.n	80026f6 <__aeabi_dsub+0x2e2>
 800295c:	2a00      	cmp	r2, #0
 800295e:	d000      	beq.n	8002962 <__aeabi_dsub+0x54e>
 8002960:	e082      	b.n	8002a68 <__aeabi_dsub+0x654>
 8002962:	000a      	movs	r2, r1
 8002964:	4302      	orrs	r2, r0
 8002966:	d140      	bne.n	80029ea <__aeabi_dsub+0x5d6>
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	2500      	movs	r5, #0
 800296c:	031b      	lsls	r3, r3, #12
 800296e:	e713      	b.n	8002798 <__aeabi_dsub+0x384>
 8002970:	074b      	lsls	r3, r1, #29
 8002972:	08c2      	lsrs	r2, r0, #3
 8002974:	431a      	orrs	r2, r3
 8002976:	465d      	mov	r5, fp
 8002978:	08cb      	lsrs	r3, r1, #3
 800297a:	e6c5      	b.n	8002708 <__aeabi_dsub+0x2f4>
 800297c:	464a      	mov	r2, r9
 800297e:	1a84      	subs	r4, r0, r2
 8002980:	42a0      	cmp	r0, r4
 8002982:	4192      	sbcs	r2, r2
 8002984:	1acb      	subs	r3, r1, r3
 8002986:	4252      	negs	r2, r2
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	4698      	mov	r8, r3
 800298c:	465d      	mov	r5, fp
 800298e:	e59e      	b.n	80024ce <__aeabi_dsub+0xba>
 8002990:	464a      	mov	r2, r9
 8002992:	0759      	lsls	r1, r3, #29
 8002994:	08d2      	lsrs	r2, r2, #3
 8002996:	430a      	orrs	r2, r1
 8002998:	08db      	lsrs	r3, r3, #3
 800299a:	e6f9      	b.n	8002790 <__aeabi_dsub+0x37c>
 800299c:	464a      	mov	r2, r9
 800299e:	1a14      	subs	r4, r2, r0
 80029a0:	45a1      	cmp	r9, r4
 80029a2:	4192      	sbcs	r2, r2
 80029a4:	1a5b      	subs	r3, r3, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	4698      	mov	r8, r3
 80029ac:	2601      	movs	r6, #1
 80029ae:	e586      	b.n	80024be <__aeabi_dsub+0xaa>
 80029b0:	464a      	mov	r2, r9
 80029b2:	0759      	lsls	r1, r3, #29
 80029b4:	08d2      	lsrs	r2, r2, #3
 80029b6:	430a      	orrs	r2, r1
 80029b8:	08db      	lsrs	r3, r3, #3
 80029ba:	e6a5      	b.n	8002708 <__aeabi_dsub+0x2f4>
 80029bc:	464c      	mov	r4, r9
 80029be:	4323      	orrs	r3, r4
 80029c0:	001c      	movs	r4, r3
 80029c2:	1e63      	subs	r3, r4, #1
 80029c4:	419c      	sbcs	r4, r3
 80029c6:	e65b      	b.n	8002680 <__aeabi_dsub+0x26c>
 80029c8:	4665      	mov	r5, ip
 80029ca:	001e      	movs	r6, r3
 80029cc:	3d20      	subs	r5, #32
 80029ce:	40ee      	lsrs	r6, r5
 80029d0:	2c20      	cmp	r4, #32
 80029d2:	d005      	beq.n	80029e0 <__aeabi_dsub+0x5cc>
 80029d4:	2540      	movs	r5, #64	; 0x40
 80029d6:	1b2d      	subs	r5, r5, r4
 80029d8:	40ab      	lsls	r3, r5
 80029da:	464c      	mov	r4, r9
 80029dc:	431c      	orrs	r4, r3
 80029de:	46a2      	mov	sl, r4
 80029e0:	4654      	mov	r4, sl
 80029e2:	1e63      	subs	r3, r4, #1
 80029e4:	419c      	sbcs	r4, r3
 80029e6:	4334      	orrs	r4, r6
 80029e8:	e77d      	b.n	80028e6 <__aeabi_dsub+0x4d2>
 80029ea:	074b      	lsls	r3, r1, #29
 80029ec:	08c2      	lsrs	r2, r0, #3
 80029ee:	431a      	orrs	r2, r3
 80029f0:	465d      	mov	r5, fp
 80029f2:	08cb      	lsrs	r3, r1, #3
 80029f4:	e6cc      	b.n	8002790 <__aeabi_dsub+0x37c>
 80029f6:	000a      	movs	r2, r1
 80029f8:	4302      	orrs	r2, r0
 80029fa:	d100      	bne.n	80029fe <__aeabi_dsub+0x5ea>
 80029fc:	e736      	b.n	800286c <__aeabi_dsub+0x458>
 80029fe:	074b      	lsls	r3, r1, #29
 8002a00:	08c2      	lsrs	r2, r0, #3
 8002a02:	431a      	orrs	r2, r3
 8002a04:	465d      	mov	r5, fp
 8002a06:	08cb      	lsrs	r3, r1, #3
 8002a08:	e681      	b.n	800270e <__aeabi_dsub+0x2fa>
 8002a0a:	464a      	mov	r2, r9
 8002a0c:	1a84      	subs	r4, r0, r2
 8002a0e:	42a0      	cmp	r0, r4
 8002a10:	4192      	sbcs	r2, r2
 8002a12:	1acb      	subs	r3, r1, r3
 8002a14:	4252      	negs	r2, r2
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	4698      	mov	r8, r3
 8002a1a:	465d      	mov	r5, fp
 8002a1c:	2601      	movs	r6, #1
 8002a1e:	e54e      	b.n	80024be <__aeabi_dsub+0xaa>
 8002a20:	074b      	lsls	r3, r1, #29
 8002a22:	08c2      	lsrs	r2, r0, #3
 8002a24:	431a      	orrs	r2, r3
 8002a26:	08cb      	lsrs	r3, r1, #3
 8002a28:	e6b2      	b.n	8002790 <__aeabi_dsub+0x37c>
 8002a2a:	464a      	mov	r2, r9
 8002a2c:	1a14      	subs	r4, r2, r0
 8002a2e:	45a1      	cmp	r9, r4
 8002a30:	4192      	sbcs	r2, r2
 8002a32:	1a5f      	subs	r7, r3, r1
 8002a34:	4252      	negs	r2, r2
 8002a36:	1aba      	subs	r2, r7, r2
 8002a38:	4690      	mov	r8, r2
 8002a3a:	0212      	lsls	r2, r2, #8
 8002a3c:	d56b      	bpl.n	8002b16 <__aeabi_dsub+0x702>
 8002a3e:	464a      	mov	r2, r9
 8002a40:	1a84      	subs	r4, r0, r2
 8002a42:	42a0      	cmp	r0, r4
 8002a44:	4192      	sbcs	r2, r2
 8002a46:	1acb      	subs	r3, r1, r3
 8002a48:	4252      	negs	r2, r2
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	4698      	mov	r8, r3
 8002a4e:	465d      	mov	r5, fp
 8002a50:	e564      	b.n	800251c <__aeabi_dsub+0x108>
 8002a52:	074b      	lsls	r3, r1, #29
 8002a54:	08c2      	lsrs	r2, r0, #3
 8002a56:	431a      	orrs	r2, r3
 8002a58:	465d      	mov	r5, fp
 8002a5a:	08cb      	lsrs	r3, r1, #3
 8002a5c:	e698      	b.n	8002790 <__aeabi_dsub+0x37c>
 8002a5e:	074b      	lsls	r3, r1, #29
 8002a60:	08c2      	lsrs	r2, r0, #3
 8002a62:	431a      	orrs	r2, r3
 8002a64:	08cb      	lsrs	r3, r1, #3
 8002a66:	e64f      	b.n	8002708 <__aeabi_dsub+0x2f4>
 8002a68:	000a      	movs	r2, r1
 8002a6a:	4302      	orrs	r2, r0
 8002a6c:	d090      	beq.n	8002990 <__aeabi_dsub+0x57c>
 8002a6e:	464a      	mov	r2, r9
 8002a70:	075c      	lsls	r4, r3, #29
 8002a72:	08d2      	lsrs	r2, r2, #3
 8002a74:	4314      	orrs	r4, r2
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	08db      	lsrs	r3, r3, #3
 8002a7a:	0312      	lsls	r2, r2, #12
 8002a7c:	4213      	tst	r3, r2
 8002a7e:	d008      	beq.n	8002a92 <__aeabi_dsub+0x67e>
 8002a80:	08ce      	lsrs	r6, r1, #3
 8002a82:	4216      	tst	r6, r2
 8002a84:	d105      	bne.n	8002a92 <__aeabi_dsub+0x67e>
 8002a86:	08c0      	lsrs	r0, r0, #3
 8002a88:	0749      	lsls	r1, r1, #29
 8002a8a:	4308      	orrs	r0, r1
 8002a8c:	0004      	movs	r4, r0
 8002a8e:	465d      	mov	r5, fp
 8002a90:	0033      	movs	r3, r6
 8002a92:	0f61      	lsrs	r1, r4, #29
 8002a94:	00e2      	lsls	r2, r4, #3
 8002a96:	0749      	lsls	r1, r1, #29
 8002a98:	08d2      	lsrs	r2, r2, #3
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	e678      	b.n	8002790 <__aeabi_dsub+0x37c>
 8002a9e:	074b      	lsls	r3, r1, #29
 8002aa0:	08c2      	lsrs	r2, r0, #3
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	08cb      	lsrs	r3, r1, #3
 8002aa6:	e632      	b.n	800270e <__aeabi_dsub+0x2fa>
 8002aa8:	4448      	add	r0, r9
 8002aaa:	185b      	adds	r3, r3, r1
 8002aac:	4548      	cmp	r0, r9
 8002aae:	4192      	sbcs	r2, r2
 8002ab0:	4698      	mov	r8, r3
 8002ab2:	4252      	negs	r2, r2
 8002ab4:	4490      	add	r8, r2
 8002ab6:	4643      	mov	r3, r8
 8002ab8:	0004      	movs	r4, r0
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	d400      	bmi.n	8002ac0 <__aeabi_dsub+0x6ac>
 8002abe:	e61a      	b.n	80026f6 <__aeabi_dsub+0x2e2>
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <__aeabi_dsub+0x6e8>)
 8002ac4:	2601      	movs	r6, #1
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	4690      	mov	r8, r2
 8002aca:	e614      	b.n	80026f6 <__aeabi_dsub+0x2e2>
 8002acc:	4666      	mov	r6, ip
 8002ace:	001f      	movs	r7, r3
 8002ad0:	3e20      	subs	r6, #32
 8002ad2:	40f7      	lsrs	r7, r6
 8002ad4:	2c20      	cmp	r4, #32
 8002ad6:	d005      	beq.n	8002ae4 <__aeabi_dsub+0x6d0>
 8002ad8:	2640      	movs	r6, #64	; 0x40
 8002ada:	1b36      	subs	r6, r6, r4
 8002adc:	40b3      	lsls	r3, r6
 8002ade:	464c      	mov	r4, r9
 8002ae0:	431c      	orrs	r4, r3
 8002ae2:	46a2      	mov	sl, r4
 8002ae4:	4654      	mov	r4, sl
 8002ae6:	1e63      	subs	r3, r4, #1
 8002ae8:	419c      	sbcs	r4, r3
 8002aea:	433c      	orrs	r4, r7
 8002aec:	e5c8      	b.n	8002680 <__aeabi_dsub+0x26c>
 8002aee:	0011      	movs	r1, r2
 8002af0:	2300      	movs	r3, #0
 8002af2:	2200      	movs	r2, #0
 8002af4:	e532      	b.n	800255c <__aeabi_dsub+0x148>
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	000007ff 	.word	0x000007ff
 8002afc:	ff7fffff 	.word	0xff7fffff
 8002b00:	000007fe 	.word	0x000007fe
 8002b04:	464a      	mov	r2, r9
 8002b06:	1814      	adds	r4, r2, r0
 8002b08:	4284      	cmp	r4, r0
 8002b0a:	4192      	sbcs	r2, r2
 8002b0c:	185b      	adds	r3, r3, r1
 8002b0e:	4698      	mov	r8, r3
 8002b10:	4252      	negs	r2, r2
 8002b12:	4490      	add	r8, r2
 8002b14:	e5e9      	b.n	80026ea <__aeabi_dsub+0x2d6>
 8002b16:	4642      	mov	r2, r8
 8002b18:	4322      	orrs	r2, r4
 8002b1a:	d100      	bne.n	8002b1e <__aeabi_dsub+0x70a>
 8002b1c:	e6a6      	b.n	800286c <__aeabi_dsub+0x458>
 8002b1e:	e5ea      	b.n	80026f6 <__aeabi_dsub+0x2e2>
 8002b20:	074b      	lsls	r3, r1, #29
 8002b22:	08c2      	lsrs	r2, r0, #3
 8002b24:	431a      	orrs	r2, r3
 8002b26:	08cb      	lsrs	r3, r1, #3
 8002b28:	e632      	b.n	8002790 <__aeabi_dsub+0x37c>
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	4901      	ldr	r1, [pc, #4]	; (8002b34 <__aeabi_dsub+0x720>)
 8002b2e:	0013      	movs	r3, r2
 8002b30:	e514      	b.n	800255c <__aeabi_dsub+0x148>
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	000007ff 	.word	0x000007ff

08002b38 <__aeabi_dcmpun>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	0005      	movs	r5, r0
 8002b3c:	480c      	ldr	r0, [pc, #48]	; (8002b70 <__aeabi_dcmpun+0x38>)
 8002b3e:	030c      	lsls	r4, r1, #12
 8002b40:	0016      	movs	r6, r2
 8002b42:	0049      	lsls	r1, r1, #1
 8002b44:	031a      	lsls	r2, r3, #12
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	0b24      	lsrs	r4, r4, #12
 8002b4a:	0d49      	lsrs	r1, r1, #21
 8002b4c:	0b12      	lsrs	r2, r2, #12
 8002b4e:	0d5b      	lsrs	r3, r3, #21
 8002b50:	4281      	cmp	r1, r0
 8002b52:	d008      	beq.n	8002b66 <__aeabi_dcmpun+0x2e>
 8002b54:	4906      	ldr	r1, [pc, #24]	; (8002b70 <__aeabi_dcmpun+0x38>)
 8002b56:	2000      	movs	r0, #0
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	d103      	bne.n	8002b64 <__aeabi_dcmpun+0x2c>
 8002b5c:	4332      	orrs	r2, r6
 8002b5e:	0010      	movs	r0, r2
 8002b60:	1e42      	subs	r2, r0, #1
 8002b62:	4190      	sbcs	r0, r2
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
 8002b66:	2001      	movs	r0, #1
 8002b68:	432c      	orrs	r4, r5
 8002b6a:	d1fb      	bne.n	8002b64 <__aeabi_dcmpun+0x2c>
 8002b6c:	e7f2      	b.n	8002b54 <__aeabi_dcmpun+0x1c>
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	000007ff 	.word	0x000007ff

08002b74 <__aeabi_d2iz>:
 8002b74:	000a      	movs	r2, r1
 8002b76:	b530      	push	{r4, r5, lr}
 8002b78:	4c13      	ldr	r4, [pc, #76]	; (8002bc8 <__aeabi_d2iz+0x54>)
 8002b7a:	0053      	lsls	r3, r2, #1
 8002b7c:	0309      	lsls	r1, r1, #12
 8002b7e:	0005      	movs	r5, r0
 8002b80:	0b09      	lsrs	r1, r1, #12
 8002b82:	2000      	movs	r0, #0
 8002b84:	0d5b      	lsrs	r3, r3, #21
 8002b86:	0fd2      	lsrs	r2, r2, #31
 8002b88:	42a3      	cmp	r3, r4
 8002b8a:	dd04      	ble.n	8002b96 <__aeabi_d2iz+0x22>
 8002b8c:	480f      	ldr	r0, [pc, #60]	; (8002bcc <__aeabi_d2iz+0x58>)
 8002b8e:	4283      	cmp	r3, r0
 8002b90:	dd02      	ble.n	8002b98 <__aeabi_d2iz+0x24>
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <__aeabi_d2iz+0x5c>)
 8002b94:	18d0      	adds	r0, r2, r3
 8002b96:	bd30      	pop	{r4, r5, pc}
 8002b98:	2080      	movs	r0, #128	; 0x80
 8002b9a:	0340      	lsls	r0, r0, #13
 8002b9c:	4301      	orrs	r1, r0
 8002b9e:	480d      	ldr	r0, [pc, #52]	; (8002bd4 <__aeabi_d2iz+0x60>)
 8002ba0:	1ac0      	subs	r0, r0, r3
 8002ba2:	281f      	cmp	r0, #31
 8002ba4:	dd08      	ble.n	8002bb8 <__aeabi_d2iz+0x44>
 8002ba6:	480c      	ldr	r0, [pc, #48]	; (8002bd8 <__aeabi_d2iz+0x64>)
 8002ba8:	1ac3      	subs	r3, r0, r3
 8002baa:	40d9      	lsrs	r1, r3
 8002bac:	000b      	movs	r3, r1
 8002bae:	4258      	negs	r0, r3
 8002bb0:	2a00      	cmp	r2, #0
 8002bb2:	d1f0      	bne.n	8002b96 <__aeabi_d2iz+0x22>
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	e7ee      	b.n	8002b96 <__aeabi_d2iz+0x22>
 8002bb8:	4c08      	ldr	r4, [pc, #32]	; (8002bdc <__aeabi_d2iz+0x68>)
 8002bba:	40c5      	lsrs	r5, r0
 8002bbc:	46a4      	mov	ip, r4
 8002bbe:	4463      	add	r3, ip
 8002bc0:	4099      	lsls	r1, r3
 8002bc2:	000b      	movs	r3, r1
 8002bc4:	432b      	orrs	r3, r5
 8002bc6:	e7f2      	b.n	8002bae <__aeabi_d2iz+0x3a>
 8002bc8:	000003fe 	.word	0x000003fe
 8002bcc:	0000041d 	.word	0x0000041d
 8002bd0:	7fffffff 	.word	0x7fffffff
 8002bd4:	00000433 	.word	0x00000433
 8002bd8:	00000413 	.word	0x00000413
 8002bdc:	fffffbed 	.word	0xfffffbed

08002be0 <__aeabi_i2d>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	2800      	cmp	r0, #0
 8002be4:	d016      	beq.n	8002c14 <__aeabi_i2d+0x34>
 8002be6:	17c3      	asrs	r3, r0, #31
 8002be8:	18c5      	adds	r5, r0, r3
 8002bea:	405d      	eors	r5, r3
 8002bec:	0fc4      	lsrs	r4, r0, #31
 8002bee:	0028      	movs	r0, r5
 8002bf0:	f000 f91c 	bl	8002e2c <__clzsi2>
 8002bf4:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <__aeabi_i2d+0x5c>)
 8002bf6:	1a12      	subs	r2, r2, r0
 8002bf8:	280a      	cmp	r0, #10
 8002bfa:	dc16      	bgt.n	8002c2a <__aeabi_i2d+0x4a>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	002e      	movs	r6, r5
 8002c00:	3315      	adds	r3, #21
 8002c02:	409e      	lsls	r6, r3
 8002c04:	230b      	movs	r3, #11
 8002c06:	1a18      	subs	r0, r3, r0
 8002c08:	40c5      	lsrs	r5, r0
 8002c0a:	0553      	lsls	r3, r2, #21
 8002c0c:	032d      	lsls	r5, r5, #12
 8002c0e:	0b2d      	lsrs	r5, r5, #12
 8002c10:	0d5b      	lsrs	r3, r3, #21
 8002c12:	e003      	b.n	8002c1c <__aeabi_i2d+0x3c>
 8002c14:	2400      	movs	r4, #0
 8002c16:	2300      	movs	r3, #0
 8002c18:	2500      	movs	r5, #0
 8002c1a:	2600      	movs	r6, #0
 8002c1c:	051b      	lsls	r3, r3, #20
 8002c1e:	432b      	orrs	r3, r5
 8002c20:	07e4      	lsls	r4, r4, #31
 8002c22:	4323      	orrs	r3, r4
 8002c24:	0030      	movs	r0, r6
 8002c26:	0019      	movs	r1, r3
 8002c28:	bd70      	pop	{r4, r5, r6, pc}
 8002c2a:	380b      	subs	r0, #11
 8002c2c:	4085      	lsls	r5, r0
 8002c2e:	0553      	lsls	r3, r2, #21
 8002c30:	032d      	lsls	r5, r5, #12
 8002c32:	2600      	movs	r6, #0
 8002c34:	0b2d      	lsrs	r5, r5, #12
 8002c36:	0d5b      	lsrs	r3, r3, #21
 8002c38:	e7f0      	b.n	8002c1c <__aeabi_i2d+0x3c>
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	0000041e 	.word	0x0000041e

08002c40 <__aeabi_ui2d>:
 8002c40:	b510      	push	{r4, lr}
 8002c42:	1e04      	subs	r4, r0, #0
 8002c44:	d010      	beq.n	8002c68 <__aeabi_ui2d+0x28>
 8002c46:	f000 f8f1 	bl	8002e2c <__clzsi2>
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <__aeabi_ui2d+0x48>)
 8002c4c:	1a1b      	subs	r3, r3, r0
 8002c4e:	280a      	cmp	r0, #10
 8002c50:	dc11      	bgt.n	8002c76 <__aeabi_ui2d+0x36>
 8002c52:	220b      	movs	r2, #11
 8002c54:	0021      	movs	r1, r4
 8002c56:	1a12      	subs	r2, r2, r0
 8002c58:	40d1      	lsrs	r1, r2
 8002c5a:	3015      	adds	r0, #21
 8002c5c:	030a      	lsls	r2, r1, #12
 8002c5e:	055b      	lsls	r3, r3, #21
 8002c60:	4084      	lsls	r4, r0
 8002c62:	0b12      	lsrs	r2, r2, #12
 8002c64:	0d5b      	lsrs	r3, r3, #21
 8002c66:	e001      	b.n	8002c6c <__aeabi_ui2d+0x2c>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	051b      	lsls	r3, r3, #20
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	0020      	movs	r0, r4
 8002c72:	0019      	movs	r1, r3
 8002c74:	bd10      	pop	{r4, pc}
 8002c76:	0022      	movs	r2, r4
 8002c78:	380b      	subs	r0, #11
 8002c7a:	4082      	lsls	r2, r0
 8002c7c:	055b      	lsls	r3, r3, #21
 8002c7e:	0312      	lsls	r2, r2, #12
 8002c80:	2400      	movs	r4, #0
 8002c82:	0b12      	lsrs	r2, r2, #12
 8002c84:	0d5b      	lsrs	r3, r3, #21
 8002c86:	e7f1      	b.n	8002c6c <__aeabi_ui2d+0x2c>
 8002c88:	0000041e 	.word	0x0000041e

08002c8c <__aeabi_f2d>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	0043      	lsls	r3, r0, #1
 8002c90:	0246      	lsls	r6, r0, #9
 8002c92:	0fc4      	lsrs	r4, r0, #31
 8002c94:	20fe      	movs	r0, #254	; 0xfe
 8002c96:	0e1b      	lsrs	r3, r3, #24
 8002c98:	1c59      	adds	r1, r3, #1
 8002c9a:	0a75      	lsrs	r5, r6, #9
 8002c9c:	4208      	tst	r0, r1
 8002c9e:	d00c      	beq.n	8002cba <__aeabi_f2d+0x2e>
 8002ca0:	22e0      	movs	r2, #224	; 0xe0
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4694      	mov	ip, r2
 8002ca6:	076d      	lsls	r5, r5, #29
 8002ca8:	0b36      	lsrs	r6, r6, #12
 8002caa:	4463      	add	r3, ip
 8002cac:	051b      	lsls	r3, r3, #20
 8002cae:	4333      	orrs	r3, r6
 8002cb0:	07e4      	lsls	r4, r4, #31
 8002cb2:	4323      	orrs	r3, r4
 8002cb4:	0028      	movs	r0, r5
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	bd70      	pop	{r4, r5, r6, pc}
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d114      	bne.n	8002ce8 <__aeabi_f2d+0x5c>
 8002cbe:	2d00      	cmp	r5, #0
 8002cc0:	d01b      	beq.n	8002cfa <__aeabi_f2d+0x6e>
 8002cc2:	0028      	movs	r0, r5
 8002cc4:	f000 f8b2 	bl	8002e2c <__clzsi2>
 8002cc8:	280a      	cmp	r0, #10
 8002cca:	dc1c      	bgt.n	8002d06 <__aeabi_f2d+0x7a>
 8002ccc:	230b      	movs	r3, #11
 8002cce:	002a      	movs	r2, r5
 8002cd0:	1a1b      	subs	r3, r3, r0
 8002cd2:	40da      	lsrs	r2, r3
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	3315      	adds	r3, #21
 8002cd8:	409d      	lsls	r5, r3
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <__aeabi_f2d+0x88>)
 8002cdc:	0312      	lsls	r2, r2, #12
 8002cde:	1a1b      	subs	r3, r3, r0
 8002ce0:	055b      	lsls	r3, r3, #21
 8002ce2:	0b16      	lsrs	r6, r2, #12
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	e7e1      	b.n	8002cac <__aeabi_f2d+0x20>
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	d009      	beq.n	8002d00 <__aeabi_f2d+0x74>
 8002cec:	0b32      	lsrs	r2, r6, #12
 8002cee:	2680      	movs	r6, #128	; 0x80
 8002cf0:	0336      	lsls	r6, r6, #12
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <__aeabi_f2d+0x8c>)
 8002cf4:	076d      	lsls	r5, r5, #29
 8002cf6:	4316      	orrs	r6, r2
 8002cf8:	e7d8      	b.n	8002cac <__aeabi_f2d+0x20>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2600      	movs	r6, #0
 8002cfe:	e7d5      	b.n	8002cac <__aeabi_f2d+0x20>
 8002d00:	2600      	movs	r6, #0
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <__aeabi_f2d+0x8c>)
 8002d04:	e7d2      	b.n	8002cac <__aeabi_f2d+0x20>
 8002d06:	0003      	movs	r3, r0
 8002d08:	002a      	movs	r2, r5
 8002d0a:	3b0b      	subs	r3, #11
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	2500      	movs	r5, #0
 8002d10:	e7e3      	b.n	8002cda <__aeabi_f2d+0x4e>
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	00000389 	.word	0x00000389
 8002d18:	000007ff 	.word	0x000007ff

08002d1c <__aeabi_d2f>:
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	004b      	lsls	r3, r1, #1
 8002d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d22:	0308      	lsls	r0, r1, #12
 8002d24:	0d5b      	lsrs	r3, r3, #21
 8002d26:	4e3d      	ldr	r6, [pc, #244]	; (8002e1c <__aeabi_d2f+0x100>)
 8002d28:	0fcc      	lsrs	r4, r1, #31
 8002d2a:	0a40      	lsrs	r0, r0, #9
 8002d2c:	0f51      	lsrs	r1, r2, #29
 8002d2e:	1c5f      	adds	r7, r3, #1
 8002d30:	4308      	orrs	r0, r1
 8002d32:	00d5      	lsls	r5, r2, #3
 8002d34:	4237      	tst	r7, r6
 8002d36:	d00a      	beq.n	8002d4e <__aeabi_d2f+0x32>
 8002d38:	4939      	ldr	r1, [pc, #228]	; (8002e20 <__aeabi_d2f+0x104>)
 8002d3a:	185e      	adds	r6, r3, r1
 8002d3c:	2efe      	cmp	r6, #254	; 0xfe
 8002d3e:	dd16      	ble.n	8002d6e <__aeabi_d2f+0x52>
 8002d40:	23ff      	movs	r3, #255	; 0xff
 8002d42:	2100      	movs	r1, #0
 8002d44:	05db      	lsls	r3, r3, #23
 8002d46:	430b      	orrs	r3, r1
 8002d48:	07e0      	lsls	r0, r4, #31
 8002d4a:	4318      	orrs	r0, r3
 8002d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <__aeabi_d2f+0x44>
 8002d52:	4328      	orrs	r0, r5
 8002d54:	d027      	beq.n	8002da6 <__aeabi_d2f+0x8a>
 8002d56:	2105      	movs	r1, #5
 8002d58:	0189      	lsls	r1, r1, #6
 8002d5a:	0a49      	lsrs	r1, r1, #9
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e7f1      	b.n	8002d44 <__aeabi_d2f+0x28>
 8002d60:	4305      	orrs	r5, r0
 8002d62:	d0ed      	beq.n	8002d40 <__aeabi_d2f+0x24>
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	03c9      	lsls	r1, r1, #15
 8002d68:	23ff      	movs	r3, #255	; 0xff
 8002d6a:	4301      	orrs	r1, r0
 8002d6c:	e7ea      	b.n	8002d44 <__aeabi_d2f+0x28>
 8002d6e:	2e00      	cmp	r6, #0
 8002d70:	dd1c      	ble.n	8002dac <__aeabi_d2f+0x90>
 8002d72:	0192      	lsls	r2, r2, #6
 8002d74:	0011      	movs	r1, r2
 8002d76:	1e4a      	subs	r2, r1, #1
 8002d78:	4191      	sbcs	r1, r2
 8002d7a:	00c0      	lsls	r0, r0, #3
 8002d7c:	0f6d      	lsrs	r5, r5, #29
 8002d7e:	4301      	orrs	r1, r0
 8002d80:	4329      	orrs	r1, r5
 8002d82:	074b      	lsls	r3, r1, #29
 8002d84:	d048      	beq.n	8002e18 <__aeabi_d2f+0xfc>
 8002d86:	230f      	movs	r3, #15
 8002d88:	400b      	ands	r3, r1
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d000      	beq.n	8002d90 <__aeabi_d2f+0x74>
 8002d8e:	3104      	adds	r1, #4
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	04db      	lsls	r3, r3, #19
 8002d94:	400b      	ands	r3, r1
 8002d96:	d03f      	beq.n	8002e18 <__aeabi_d2f+0xfc>
 8002d98:	1c72      	adds	r2, r6, #1
 8002d9a:	2efe      	cmp	r6, #254	; 0xfe
 8002d9c:	d0d0      	beq.n	8002d40 <__aeabi_d2f+0x24>
 8002d9e:	0189      	lsls	r1, r1, #6
 8002da0:	0a49      	lsrs	r1, r1, #9
 8002da2:	b2d3      	uxtb	r3, r2
 8002da4:	e7ce      	b.n	8002d44 <__aeabi_d2f+0x28>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	e7cb      	b.n	8002d44 <__aeabi_d2f+0x28>
 8002dac:	0032      	movs	r2, r6
 8002dae:	3217      	adds	r2, #23
 8002db0:	db22      	blt.n	8002df8 <__aeabi_d2f+0xdc>
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	221e      	movs	r2, #30
 8002db6:	0409      	lsls	r1, r1, #16
 8002db8:	4308      	orrs	r0, r1
 8002dba:	1b92      	subs	r2, r2, r6
 8002dbc:	2a1f      	cmp	r2, #31
 8002dbe:	dd1d      	ble.n	8002dfc <__aeabi_d2f+0xe0>
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	4249      	negs	r1, r1
 8002dc4:	1b8e      	subs	r6, r1, r6
 8002dc6:	0001      	movs	r1, r0
 8002dc8:	40f1      	lsrs	r1, r6
 8002dca:	000e      	movs	r6, r1
 8002dcc:	2a20      	cmp	r2, #32
 8002dce:	d004      	beq.n	8002dda <__aeabi_d2f+0xbe>
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <__aeabi_d2f+0x108>)
 8002dd2:	4694      	mov	ip, r2
 8002dd4:	4463      	add	r3, ip
 8002dd6:	4098      	lsls	r0, r3
 8002dd8:	4305      	orrs	r5, r0
 8002dda:	0029      	movs	r1, r5
 8002ddc:	1e4d      	subs	r5, r1, #1
 8002dde:	41a9      	sbcs	r1, r5
 8002de0:	4331      	orrs	r1, r6
 8002de2:	2600      	movs	r6, #0
 8002de4:	074b      	lsls	r3, r1, #29
 8002de6:	d1ce      	bne.n	8002d86 <__aeabi_d2f+0x6a>
 8002de8:	2080      	movs	r0, #128	; 0x80
 8002dea:	000b      	movs	r3, r1
 8002dec:	04c0      	lsls	r0, r0, #19
 8002dee:	2201      	movs	r2, #1
 8002df0:	4003      	ands	r3, r0
 8002df2:	4201      	tst	r1, r0
 8002df4:	d1d3      	bne.n	8002d9e <__aeabi_d2f+0x82>
 8002df6:	e7af      	b.n	8002d58 <__aeabi_d2f+0x3c>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e7ac      	b.n	8002d56 <__aeabi_d2f+0x3a>
 8002dfc:	490a      	ldr	r1, [pc, #40]	; (8002e28 <__aeabi_d2f+0x10c>)
 8002dfe:	468c      	mov	ip, r1
 8002e00:	0029      	movs	r1, r5
 8002e02:	4463      	add	r3, ip
 8002e04:	40d1      	lsrs	r1, r2
 8002e06:	409d      	lsls	r5, r3
 8002e08:	000a      	movs	r2, r1
 8002e0a:	0029      	movs	r1, r5
 8002e0c:	4098      	lsls	r0, r3
 8002e0e:	1e4d      	subs	r5, r1, #1
 8002e10:	41a9      	sbcs	r1, r5
 8002e12:	4301      	orrs	r1, r0
 8002e14:	4311      	orrs	r1, r2
 8002e16:	e7e4      	b.n	8002de2 <__aeabi_d2f+0xc6>
 8002e18:	0033      	movs	r3, r6
 8002e1a:	e79d      	b.n	8002d58 <__aeabi_d2f+0x3c>
 8002e1c:	000007fe 	.word	0x000007fe
 8002e20:	fffffc80 	.word	0xfffffc80
 8002e24:	fffffca2 	.word	0xfffffca2
 8002e28:	fffffc82 	.word	0xfffffc82

08002e2c <__clzsi2>:
 8002e2c:	211c      	movs	r1, #28
 8002e2e:	2301      	movs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	4298      	cmp	r0, r3
 8002e34:	d301      	bcc.n	8002e3a <__clzsi2+0xe>
 8002e36:	0c00      	lsrs	r0, r0, #16
 8002e38:	3910      	subs	r1, #16
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	4298      	cmp	r0, r3
 8002e3e:	d301      	bcc.n	8002e44 <__clzsi2+0x18>
 8002e40:	0a00      	lsrs	r0, r0, #8
 8002e42:	3908      	subs	r1, #8
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	4298      	cmp	r0, r3
 8002e48:	d301      	bcc.n	8002e4e <__clzsi2+0x22>
 8002e4a:	0900      	lsrs	r0, r0, #4
 8002e4c:	3904      	subs	r1, #4
 8002e4e:	a202      	add	r2, pc, #8	; (adr r2, 8002e58 <__clzsi2+0x2c>)
 8002e50:	5c10      	ldrb	r0, [r2, r0]
 8002e52:	1840      	adds	r0, r0, r1
 8002e54:	4770      	bx	lr
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	02020304 	.word	0x02020304
 8002e5c:	01010101 	.word	0x01010101
	...

08002e68 <__clzdi2>:
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	2900      	cmp	r1, #0
 8002e6c:	d103      	bne.n	8002e76 <__clzdi2+0xe>
 8002e6e:	f7ff ffdd 	bl	8002e2c <__clzsi2>
 8002e72:	3020      	adds	r0, #32
 8002e74:	e002      	b.n	8002e7c <__clzdi2+0x14>
 8002e76:	1c08      	adds	r0, r1, #0
 8002e78:	f7ff ffd8 	bl	8002e2c <__clzsi2>
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)

08002e80 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e82:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002e84:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <LoadROtopology+0x94>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002e8a:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <LoadROtopology+0x98>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d011      	beq.n	8002eb4 <LoadROtopology+0x34>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002e90:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002e92:	d017      	beq.n	8002ec4 <LoadROtopology+0x44>
		N =(uint8_t )(temp >> 8);
 8002e94:	4921      	ldr	r1, [pc, #132]	; (8002f1c <LoadROtopology+0x9c>)
 8002e96:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002e98:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <LoadROtopology+0xa0>)
 8002e9a:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <LoadROtopology+0x9c>)
 8002e9e:	7818      	ldrb	r0, [r3, #0]
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d035      	beq.n	8002f10 <LoadROtopology+0x90>
 8002ea4:	2601      	movs	r6, #1
	uint16_t add =2, temp =0;
 8002ea6:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ea8:	466b      	mov	r3, sp
 8002eaa:	1dd9      	adds	r1, r3, #7
 8002eac:	2300      	movs	r3, #0
 8002eae:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002eb0:	4d1c      	ldr	r5, [pc, #112]	; (8002f24 <LoadROtopology+0xa4>)
 8002eb2:	e00f      	b.n	8002ed4 <LoadROtopology+0x54>
		N =1;
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <LoadROtopology+0x9c>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <LoadROtopology+0xa0>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002ec0:	20fa      	movs	r0, #250	; 0xfa
 8002ec2:	e025      	b.n	8002f10 <LoadROtopology+0x90>
			N =1;
 8002ec4:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <LoadROtopology+0x9c>)
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	7011      	strb	r1, [r2, #0]
 8002eca:	e7e5      	b.n	8002e98 <LoadROtopology+0x18>
		for(uint8_t i =1; i <= N; i++){
 8002ecc:	3601      	adds	r6, #1
 8002ece:	b2f6      	uxtb	r6, r6
 8002ed0:	4286      	cmp	r6, r0
 8002ed2:	d81c      	bhi.n	8002f0e <LoadROtopology+0x8e>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ed4:	4663      	mov	r3, ip
 8002ed6:	700b      	strb	r3, [r1, #0]
 8002ed8:	780b      	ldrb	r3, [r1, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b0a      	cmp	r3, #10
 8002ede:	d8f5      	bhi.n	8002ecc <LoadROtopology+0x4c>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002ee0:	1e73      	subs	r3, r6, #1
 8002ee2:	009c      	lsls	r4, r3, #2
 8002ee4:	18e4      	adds	r4, r4, r3
 8002ee6:	0064      	lsls	r4, r4, #1
 8002ee8:	18e4      	adds	r4, r4, r3
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <LoadROtopology+0x94>)
 8002eec:	18d7      	adds	r7, r2, r3
 8002eee:	780b      	ldrb	r3, [r1, #0]
 8002ef0:	883f      	ldrh	r7, [r7, #0]
 8002ef2:	191b      	adds	r3, r3, r4
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002ef8:	3202      	adds	r2, #2
 8002efa:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002efc:	780b      	ldrb	r3, [r1, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	700b      	strb	r3, [r1, #0]
 8002f04:	780b      	ldrb	r3, [r1, #0]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b0a      	cmp	r3, #10
 8002f0a:	d9ee      	bls.n	8002eea <LoadROtopology+0x6a>
 8002f0c:	e7de      	b.n	8002ecc <LoadROtopology+0x4c>
			}
		}
	}
	
	return result;
 8002f0e:	2000      	movs	r0, #0
}
 8002f10:	b003      	add	sp, #12
 8002f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f14:	0801d800 	.word	0x0801d800
 8002f18:	0000ffff 	.word	0x0000ffff
 8002f1c:	2000001c 	.word	0x2000001c
 8002f20:	2000107e 	.word	0x2000107e
 8002f24:	20000a80 	.word	0x20000a80

08002f28 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <LoadEEportsDir+0x3c>)
 8002f2c:	781d      	ldrb	r5, [r3, #0]
 8002f2e:	2d00      	cmp	r5, #0
 8002f30:	d016      	beq.n	8002f60 <LoadEEportsDir+0x38>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002f32:	490d      	ldr	r1, [pc, #52]	; (8002f68 <LoadEEportsDir+0x40>)
 8002f34:	2002      	movs	r0, #2
 8002f36:	f004 fd17 	bl	8007968 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002f3a:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002f3c:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002f3e:	4e09      	ldr	r6, [pc, #36]	; (8002f64 <LoadEEportsDir+0x3c>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002f40:	4f09      	ldr	r7, [pc, #36]	; (8002f68 <LoadEEportsDir+0x40>)
	for(uint8_t i =1; i <= N; i++){
 8002f42:	3401      	adds	r4, #1
 8002f44:	b2e4      	uxtb	r4, r4
 8002f46:	7833      	ldrb	r3, [r6, #0]
 8002f48:	42a3      	cmp	r3, r4
 8002f4a:	d309      	bcc.n	8002f60 <LoadEEportsDir+0x38>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002f4c:	1e61      	subs	r1, r4, #1
 8002f4e:	0049      	lsls	r1, r1, #1
 8002f50:	19c9      	adds	r1, r1, r7
 8002f52:	1c60      	adds	r0, r4, #1
 8002f54:	f004 fd08 	bl	8007968 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002f58:	2c19      	cmp	r4, #25
 8002f5a:	d9f2      	bls.n	8002f42 <LoadEEportsDir+0x1a>
			result =BOS_ERR_EEPROM;
 8002f5c:	250a      	movs	r5, #10
 8002f5e:	e7f0      	b.n	8002f42 <LoadEEportsDir+0x1a>
	}
	
	return result;
}
 8002f60:	0028      	movs	r0, r5
 8002f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f64:	2000001c 	.word	0x2000001c
 8002f68:	20006f24 	.word	0x20006f24

08002f6c <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6e:	46de      	mov	lr, fp
 8002f70:	4657      	mov	r7, sl
 8002f72:	464e      	mov	r6, r9
 8002f74:	4645      	mov	r5, r8
 8002f76:	b5e0      	push	{r5, r6, r7, lr}
 8002f78:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002f7a:	466b      	mov	r3, sp
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	80da      	strh	r2, [r3, #6]
 8002f80:	2721      	movs	r7, #33	; 0x21
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002f82:	2300      	movs	r3, #0
 8002f84:	4698      	mov	r8, r3
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <LoadEEalias+0x84>)
 8002f88:	469b      	mov	fp, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002f8a:	469a      	mov	sl, r3
 8002f8c:	e010      	b.n	8002fb0 <LoadEEalias+0x44>
 8002f8e:	464b      	mov	r3, r9
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	444b      	add	r3, r9
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4453      	add	r3, sl
 8002f98:	2200      	movs	r2, #0
 8002f9a:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002f9c:	4643      	mov	r3, r8
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	4698      	mov	r8, r3
 8002fa4:	3705      	adds	r7, #5
 8002fa6:	b2bf      	uxth	r7, r7
 8002fa8:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <LoadEEalias+0x88>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	4543      	cmp	r3, r8
 8002fae:	d317      	bcc.n	8002fe0 <LoadEEalias+0x74>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002fb0:	1f7c      	subs	r4, r7, #5
 8002fb2:	b2a4      	uxth	r4, r4
 8002fb4:	4643      	mov	r3, r8
 8002fb6:	009d      	lsls	r5, r3, #2
 8002fb8:	4445      	add	r5, r8
 8002fba:	006d      	lsls	r5, r5, #1
 8002fbc:	445d      	add	r5, fp
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002fbe:	466b      	mov	r3, sp
 8002fc0:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002fc2:	46c1      	mov	r9, r8
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002fc4:	0031      	movs	r1, r6
 8002fc6:	0020      	movs	r0, r4
 8002fc8:	f004 fcce 	bl	8007968 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002fcc:	8833      	ldrh	r3, [r6, #0]
 8002fce:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	702b      	strb	r3, [r5, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002fd4:	3401      	adds	r4, #1
 8002fd6:	b2a4      	uxth	r4, r4
 8002fd8:	3502      	adds	r5, #2
 8002fda:	42a7      	cmp	r7, r4
 8002fdc:	d1f2      	bne.n	8002fc4 <LoadEEalias+0x58>
 8002fde:	e7d6      	b.n	8002f8e <LoadEEalias+0x22>
	}
	
	return result;
}
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	b003      	add	sp, #12
 8002fe4:	bcf0      	pop	{r4, r5, r6, r7}
 8002fe6:	46bb      	mov	fp, r7
 8002fe8:	46b2      	mov	sl, r6
 8002fea:	46a9      	mov	r9, r5
 8002fec:	46a0      	mov	r8, r4
 8002fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff0:	20000f70 	.word	0x20000f70
 8002ff4:	2000001c 	.word	0x2000001c

08002ff8 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffa:	46d6      	mov	lr, sl
 8002ffc:	464f      	mov	r7, r9
 8002ffe:	4646      	mov	r6, r8
 8003000:	b5c0      	push	{r6, r7, lr}
 8003002:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003004:	466b      	mov	r3, sp
 8003006:	2200      	movs	r2, #0
 8003008:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 800300a:	4b23      	ldr	r3, [pc, #140]	; (8003098 <LoadEEgroup+0xa0>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01d      	beq.n	800304e <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8003012:	2400      	movs	r4, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8003014:	4e21      	ldr	r6, [pc, #132]	; (800309c <LoadEEgroup+0xa4>)
	for(i =0; i < N; i++)			// N modules
 8003016:	4d20      	ldr	r5, [pc, #128]	; (8003098 <LoadEEgroup+0xa0>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8003018:	b2e1      	uxtb	r1, r4
 800301a:	0049      	lsls	r1, r1, #1
 800301c:	1871      	adds	r1, r6, r1
 800301e:	0020      	movs	r0, r4
 8003020:	30cb      	adds	r0, #203	; 0xcb
 8003022:	b280      	uxth	r0, r0
 8003024:	f004 fca0 	bl	8007968 <EE_ReadVariable>
		add++;
 8003028:	1c63      	adds	r3, r4, #1
 800302a:	b29c      	uxth	r4, r3
	for(i =0; i < N; i++)			// N modules
 800302c:	782a      	ldrb	r2, [r5, #0]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	429a      	cmp	r2, r3
 8003032:	d8f1      	bhi.n	8003018 <LoadEEgroup+0x20>
	}
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <LoadEEgroup+0xa8>)
 8003036:	4699      	mov	r9, r3
 8003038:	0027      	movs	r7, r4
 800303a:	379e      	adds	r7, #158	; 0x9e
 800303c:	b2bf      	uxth	r7, r7
 800303e:	34d0      	adds	r4, #208	; 0xd0
 8003040:	b2a3      	uxth	r3, r4
 8003042:	4698      	mov	r8, r3
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003044:	466b      	mov	r3, sp
 8003046:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003048:	2300      	movs	r3, #0
 800304a:	469a      	mov	sl, r3
 800304c:	e00b      	b.n	8003066 <LoadEEgroup+0x6e>
	uint16_t add =0, temp =0;
 800304e:	2400      	movs	r4, #0
 8003050:	e7f0      	b.n	8003034 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003052:	464b      	mov	r3, r9
 8003054:	4652      	mov	r2, sl
 8003056:	725a      	strb	r2, [r3, #9]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8003058:	230a      	movs	r3, #10
 800305a:	469c      	mov	ip, r3
 800305c:	44e1      	add	r9, ip
 800305e:	3705      	adds	r7, #5
 8003060:	b2bf      	uxth	r7, r7
 8003062:	4547      	cmp	r7, r8
 8003064:	d010      	beq.n	8003088 <LoadEEgroup+0x90>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003066:	1f7c      	subs	r4, r7, #5
 8003068:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 800306a:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 800306c:	0031      	movs	r1, r6
 800306e:	0020      	movs	r0, r4
 8003070:	f004 fc7a 	bl	8007968 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8003074:	8833      	ldrh	r3, [r6, #0]
 8003076:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	702b      	strb	r3, [r5, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800307c:	3401      	adds	r4, #1
 800307e:	b2a4      	uxth	r4, r4
 8003080:	3502      	adds	r5, #2
 8003082:	42bc      	cmp	r4, r7
 8003084:	d1f2      	bne.n	800306c <LoadEEgroup+0x74>
 8003086:	e7e4      	b.n	8003052 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8003088:	2000      	movs	r0, #0
 800308a:	b002      	add	sp, #8
 800308c:	bce0      	pop	{r5, r6, r7}
 800308e:	46ba      	mov	sl, r7
 8003090:	46b1      	mov	r9, r6
 8003092:	46a8      	mov	r8, r5
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	2000001c 	.word	0x2000001c
 800309c:	20000ec8 	.word	0x20000ec8
 80030a0:	20000e64 	.word	0x20000e64

080030a4 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80030a8:	210e      	movs	r1, #14
 80030aa:	4469      	add	r1, sp
 80030ac:	2300      	movs	r3, #0
 80030ae:	800b      	strh	r3, [r1, #0]
 80030b0:	aa03      	add	r2, sp, #12
 80030b2:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80030b4:	20e4      	movs	r0, #228	; 0xe4
 80030b6:	f004 fc57 	bl	8007968 <EE_ReadVariable>
	uint8_t direction =0;
 80030ba:	2500      	movs	r5, #0
	if(!status1){
 80030bc:	2800      	cmp	r0, #0
 80030be:	d102      	bne.n	80030c6 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 80030c0:	230e      	movs	r3, #14
 80030c2:	446b      	add	r3, sp
 80030c4:	781d      	ldrb	r5, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80030c6:	210e      	movs	r1, #14
 80030c8:	4469      	add	r1, sp
 80030ca:	20e5      	movs	r0, #229	; 0xe5
 80030cc:	f004 fc4c 	bl	8007968 <EE_ReadVariable>
 80030d0:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80030d2:	a903      	add	r1, sp, #12
 80030d4:	20e6      	movs	r0, #230	; 0xe6
 80030d6:	f004 fc47 	bl	8007968 <EE_ReadVariable>
	if(!status1 && !status2){
 80030da:	4304      	orrs	r4, r0
 80030dc:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 80030de:	2600      	movs	r6, #0
	if(!status1 && !status2){
 80030e0:	2c00      	cmp	r4, #0
 80030e2:	d106      	bne.n	80030f2 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 80030e4:	230e      	movs	r3, #14
 80030e6:	446b      	add	r3, sp
 80030e8:	881e      	ldrh	r6, [r3, #0]
 80030ea:	0436      	lsls	r6, r6, #16
 80030ec:	ab03      	add	r3, sp, #12
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 80030f2:	210e      	movs	r1, #14
 80030f4:	4469      	add	r1, sp
 80030f6:	20e7      	movs	r0, #231	; 0xe7
 80030f8:	f004 fc36 	bl	8007968 <EE_ReadVariable>
 80030fc:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 80030fe:	a903      	add	r1, sp, #12
 8003100:	20e8      	movs	r0, #232	; 0xe8
 8003102:	f004 fc31 	bl	8007968 <EE_ReadVariable>
	if(!status1 && !status2){
 8003106:	4320      	orrs	r0, r4
 8003108:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 800310a:	2400      	movs	r4, #0
	if(!status1 && !status2){
 800310c:	2800      	cmp	r0, #0
 800310e:	d106      	bne.n	800311e <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003110:	230e      	movs	r3, #14
 8003112:	446b      	add	r3, sp
 8003114:	881c      	ldrh	r4, [r3, #0]
 8003116:	0424      	lsls	r4, r4, #16
 8003118:	ab03      	add	r3, sp, #12
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 800311e:	210e      	movs	r1, #14
 8003120:	4469      	add	r1, sp
 8003122:	20e9      	movs	r0, #233	; 0xe9
 8003124:	f004 fc20 	bl	8007968 <EE_ReadVariable>
	if(!status1){
 8003128:	2800      	cmp	r0, #0
 800312a:	d107      	bne.n	800313c <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 800312c:	230e      	movs	r3, #14
 800312e:	446b      	add	r3, sp
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	0a19      	lsrs	r1, r3, #8
 8003134:	4a28      	ldr	r2, [pc, #160]	; (80031d8 <LoadEEstreams+0x134>)
 8003136:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8003138:	4a28      	ldr	r2, [pc, #160]	; (80031dc <LoadEEstreams+0x138>)
 800313a:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800313c:	210e      	movs	r1, #14
 800313e:	4469      	add	r1, sp
 8003140:	20ea      	movs	r0, #234	; 0xea
 8003142:	f004 fc11 	bl	8007968 <EE_ReadVariable>
	if(!status1){
 8003146:	2800      	cmp	r0, #0
 8003148:	d107      	bne.n	800315a <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 800314a:	230e      	movs	r3, #14
 800314c:	446b      	add	r3, sp
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	0a19      	lsrs	r1, r3, #8
 8003152:	4a23      	ldr	r2, [pc, #140]	; (80031e0 <LoadEEstreams+0x13c>)
 8003154:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8003156:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <LoadEEstreams+0x140>)
 8003158:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 800315a:	210e      	movs	r1, #14
 800315c:	4469      	add	r1, sp
 800315e:	20eb      	movs	r0, #235	; 0xeb
 8003160:	f004 fc02 	bl	8007968 <EE_ReadVariable>
	if(!status1){
 8003164:	2800      	cmp	r0, #0
 8003166:	d107      	bne.n	8003178 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003168:	230e      	movs	r3, #14
 800316a:	446b      	add	r3, sp
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	0a19      	lsrs	r1, r3, #8
 8003170:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <LoadEEstreams+0x144>)
 8003172:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003174:	4a1d      	ldr	r2, [pc, #116]	; (80031ec <LoadEEstreams+0x148>)
 8003176:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <LoadEEstreams+0x134>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <LoadEEstreams+0xe4>
 8003180:	4a16      	ldr	r2, [pc, #88]	; (80031dc <LoadEEstreams+0x138>)
 8003182:	7812      	ldrb	r2, [r2, #0]
 8003184:	2a00      	cmp	r2, #0
 8003186:	d112      	bne.n	80031ae <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <LoadEEstreams+0x13c>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <LoadEEstreams+0xf4>
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <LoadEEstreams+0x140>)
 8003192:	7812      	ldrb	r2, [r2, #0]
 8003194:	2a00      	cmp	r2, #0
 8003196:	d111      	bne.n	80031bc <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <LoadEEstreams+0x144>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <LoadEEstreams+0x104>
 80031a0:	4a12      	ldr	r2, [pc, #72]	; (80031ec <LoadEEstreams+0x148>)
 80031a2:	7812      	ldrb	r2, [r2, #0]
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	d110      	bne.n	80031ca <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 80031a8:	2000      	movs	r0, #0
 80031aa:	b004      	add	sp, #16
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 80031ae:	9200      	str	r2, [sp, #0]
 80031b0:	0022      	movs	r2, r4
 80031b2:	0031      	movs	r1, r6
 80031b4:	0028      	movs	r0, r5
 80031b6:	f006 f88b 	bl	80092d0 <SetupDMAStreams>
 80031ba:	e7e5      	b.n	8003188 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80031bc:	9200      	str	r2, [sp, #0]
 80031be:	0022      	movs	r2, r4
 80031c0:	0031      	movs	r1, r6
 80031c2:	0028      	movs	r0, r5
 80031c4:	f006 f884 	bl	80092d0 <SetupDMAStreams>
 80031c8:	e7e6      	b.n	8003198 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 80031ca:	9200      	str	r2, [sp, #0]
 80031cc:	0022      	movs	r2, r4
 80031ce:	0031      	movs	r1, r6
 80031d0:	0028      	movs	r0, r5
 80031d2:	f006 f87d 	bl	80092d0 <SetupDMAStreams>
 80031d6:	e7e7      	b.n	80031a8 <LoadEEstreams+0x104>
 80031d8:	20001152 	.word	0x20001152
 80031dc:	20000e61 	.word	0x20000e61
 80031e0:	20001153 	.word	0x20001153
 80031e4:	20000e62 	.word	0x20000e62
 80031e8:	20001154 	.word	0x20001154
 80031ec:	20000e63 	.word	0x20000e63

080031f0 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 80031f0:	b510      	push	{r4, lr}
 80031f2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80031f4:	208a      	movs	r0, #138	; 0x8a
 80031f6:	466b      	mov	r3, sp
 80031f8:	1d99      	adds	r1, r3, #6
 80031fa:	0040      	lsls	r0, r0, #1
 80031fc:	f004 fbb4 	bl	8007968 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003200:	2800      	cmp	r0, #0
 8003202:	d000      	beq.n	8003206 <LoadEEparams+0x16>
 8003204:	e064      	b.n	80032d0 <LoadEEparams+0xe0>
		BOS.response =(uint8_t )temp1;
 8003206:	466b      	mov	r3, sp
 8003208:	3306      	adds	r3, #6
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	4a46      	ldr	r2, [pc, #280]	; (8003328 <LoadEEparams+0x138>)
 800320e:	7193      	strb	r3, [r2, #6]
		BOS.trace =(traceOptions_t )(temp1 >> 8);
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	71d3      	strb	r3, [r2, #7]
		BOS.response =BOS_default.response;
		BOS.trace =BOS_default.trace;
	}
	
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003214:	2016      	movs	r0, #22
 8003216:	466b      	mov	r3, sp
 8003218:	1d99      	adds	r1, r3, #6
 800321a:	30ff      	adds	r0, #255	; 0xff
 800321c:	f004 fba4 	bl	8007968 <EE_ReadVariable>
	if(!status1)
 8003220:	2800      	cmp	r0, #0
 8003222:	d15c      	bne.n	80032de <LoadEEparams+0xee>
		BOS.buttons.debounce =temp1;
 8003224:	466b      	mov	r3, sp
 8003226:	88da      	ldrh	r2, [r3, #6]
 8003228:	4b3f      	ldr	r3, [pc, #252]	; (8003328 <LoadEEparams+0x138>)
 800322a:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800322c:	208b      	movs	r0, #139	; 0x8b
 800322e:	466b      	mov	r3, sp
 8003230:	1d99      	adds	r1, r3, #6
 8003232:	0040      	lsls	r0, r0, #1
 8003234:	f004 fb98 	bl	8007968 <EE_ReadVariable>
	if(!status1)
 8003238:	2800      	cmp	r0, #0
 800323a:	d153      	bne.n	80032e4 <LoadEEparams+0xf4>
		BOS.buttons.singleClickTime =temp1;
 800323c:	466b      	mov	r3, sp
 800323e:	88da      	ldrh	r2, [r3, #6]
 8003240:	4b39      	ldr	r3, [pc, #228]	; (8003328 <LoadEEparams+0x138>)
 8003242:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003244:	2018      	movs	r0, #24
 8003246:	466b      	mov	r3, sp
 8003248:	1d99      	adds	r1, r3, #6
 800324a:	30ff      	adds	r0, #255	; 0xff
 800324c:	f004 fb8c 	bl	8007968 <EE_ReadVariable>
	if(!status1){
 8003250:	2800      	cmp	r0, #0
 8003252:	d14a      	bne.n	80032ea <LoadEEparams+0xfa>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003254:	466b      	mov	r3, sp
 8003256:	3306      	adds	r3, #6
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	4a33      	ldr	r2, [pc, #204]	; (8003328 <LoadEEparams+0x138>)
 800325c:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003262:	208c      	movs	r0, #140	; 0x8c
 8003264:	466b      	mov	r3, sp
 8003266:	1d99      	adds	r1, r3, #6
 8003268:	0040      	lsls	r0, r0, #1
 800326a:	f004 fb7d 	bl	8007968 <EE_ReadVariable>
 800326e:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003270:	201a      	movs	r0, #26
 8003272:	a901      	add	r1, sp, #4
 8003274:	30ff      	adds	r0, #255	; 0xff
 8003276:	f004 fb77 	bl	8007968 <EE_ReadVariable>
	if(!status1 && !status2){
 800327a:	4304      	orrs	r4, r0
 800327c:	b2a4      	uxth	r4, r4
 800327e:	2c00      	cmp	r4, #0
 8003280:	d13a      	bne.n	80032f8 <LoadEEparams+0x108>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003282:	ab01      	add	r3, sp, #4
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	466a      	mov	r2, sp
 800328a:	3206      	adds	r2, #6
 800328c:	8812      	ldrh	r2, [r2, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	4a25      	ldr	r2, [pc, #148]	; (8003328 <LoadEEparams+0x138>)
 8003292:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003294:	208d      	movs	r0, #141	; 0x8d
 8003296:	466b      	mov	r3, sp
 8003298:	1d99      	adds	r1, r3, #6
 800329a:	0040      	lsls	r0, r0, #1
 800329c:	f004 fb64 	bl	8007968 <EE_ReadVariable>
	if(!status1){
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d137      	bne.n	8003314 <LoadEEparams+0x124>
		BOS.daylightsaving =(int8_t )temp1;
 80032a4:	466b      	mov	r3, sp
 80032a6:	3306      	adds	r3, #6
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <LoadEEparams+0x138>)
 80032ac:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80032b2:	201c      	movs	r0, #28
 80032b4:	466b      	mov	r3, sp
 80032b6:	1d99      	adds	r1, r3, #6
 80032b8:	30ff      	adds	r0, #255	; 0xff
 80032ba:	f004 fb55 	bl	8007968 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80032be:	2800      	cmp	r0, #0
 80032c0:	d12e      	bne.n	8003320 <LoadEEparams+0x130>
		BOS.disableCLI =(uint8_t )temp1;
 80032c2:	466b      	mov	r3, sp
 80032c4:	799a      	ldrb	r2, [r3, #6]
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <LoadEEparams+0x138>)
 80032c8:	76da      	strb	r2, [r3, #27]
	else{
		BOS.disableCLI =BOS_default.disableCLI;
	}
	
	return result;
}
 80032ca:	2000      	movs	r0, #0
 80032cc:	b002      	add	sp, #8
 80032ce:	bd10      	pop	{r4, pc}
		BOS.response =BOS_default.response;
 80032d0:	4b15      	ldr	r3, [pc, #84]	; (8003328 <LoadEEparams+0x138>)
 80032d2:	4a16      	ldr	r2, [pc, #88]	; (800332c <LoadEEparams+0x13c>)
 80032d4:	7991      	ldrb	r1, [r2, #6]
 80032d6:	7199      	strb	r1, [r3, #6]
		BOS.trace =BOS_default.trace;
 80032d8:	79d2      	ldrb	r2, [r2, #7]
 80032da:	71da      	strb	r2, [r3, #7]
 80032dc:	e79a      	b.n	8003214 <LoadEEparams+0x24>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <LoadEEparams+0x13c>)
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	e7a1      	b.n	8003228 <LoadEEparams+0x38>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <LoadEEparams+0x13c>)
 80032e6:	885a      	ldrh	r2, [r3, #2]
 80032e8:	e7aa      	b.n	8003240 <LoadEEparams+0x50>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <LoadEEparams+0x138>)
 80032ec:	4a0f      	ldr	r2, [pc, #60]	; (800332c <LoadEEparams+0x13c>)
 80032ee:	7911      	ldrb	r1, [r2, #4]
 80032f0:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80032f2:	7952      	ldrb	r2, [r2, #5]
 80032f4:	715a      	strb	r2, [r3, #5]
 80032f6:	e7b4      	b.n	8003262 <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <LoadEEparams+0x140>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d004      	beq.n	800330a <LoadEEparams+0x11a>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <LoadEEparams+0x138>)
 8003302:	22e1      	movs	r2, #225	; 0xe1
 8003304:	0252      	lsls	r2, r2, #9
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	e7c4      	b.n	8003294 <LoadEEparams+0xa4>
		BOS.clibaudrate =BOS_default.clibaudrate;
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <LoadEEparams+0x13c>)
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <LoadEEparams+0x138>)
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	e7bf      	b.n	8003294 <LoadEEparams+0xa4>
		BOS.hourformat =24;
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <LoadEEparams+0x138>)
 8003316:	2218      	movs	r2, #24
 8003318:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 800331a:	2200      	movs	r2, #0
 800331c:	731a      	strb	r2, [r3, #12]
 800331e:	e7c8      	b.n	80032b2 <LoadEEparams+0xc2>
		BOS.disableCLI =BOS_default.disableCLI;
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <LoadEEparams+0x13c>)
 8003322:	7eda      	ldrb	r2, [r3, #27]
 8003324:	e7cf      	b.n	80032c6 <LoadEEparams+0xd6>
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	20006aa8 	.word	0x20006aa8
 800332c:	20000000 	.word	0x20000000
 8003330:	20000a7e 	.word	0x20000a7e

08003334 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003336:	46ce      	mov	lr, r9
 8003338:	4647      	mov	r7, r8
 800333a:	b580      	push	{r7, lr}
 800333c:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 800333e:	231e      	movs	r3, #30
 8003340:	446b      	add	r3, sp
 8003342:	2200      	movs	r2, #0
 8003344:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003346:	4e36      	ldr	r6, [pc, #216]	; (8003420 <LoadEEbuttons+0xec>)
	uint16_t temp16 =0, status1 =0;
 8003348:	24ec      	movs	r4, #236	; 0xec
 800334a:	2501      	movs	r5, #1
 800334c:	270f      	movs	r7, #15
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800334e:	2301      	movs	r3, #1
 8003350:	4698      	mov	r8, r3
 8003352:	e04c      	b.n	80033ee <LoadEEbuttons+0xba>
				button[i + 1].type =temp8 & 0x0F;
 8003354:	72b2      	strb	r2, [r6, #10]
				button[i + 1].events =(uint8_t )temp16;
 8003356:	7473      	strb	r3, [r6, #17]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003358:	00a8      	lsls	r0, r5, #2
 800335a:	b283      	uxth	r3, r0
 800335c:	4699      	mov	r9, r3
 800335e:	0018      	movs	r0, r3
 8003360:	30e9      	adds	r0, #233	; 0xe9
 8003362:	b280      	uxth	r0, r0
 8003364:	231e      	movs	r3, #30
 8003366:	446b      	add	r3, sp
 8003368:	0019      	movs	r1, r3
 800336a:	f004 fafd 	bl	8007968 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800336e:	466b      	mov	r3, sp
 8003370:	8bdb      	ldrh	r3, [r3, #30]
 8003372:	0a1a      	lsrs	r2, r3, #8
 8003374:	72f2      	strb	r2, [r6, #11]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003376:	73b3      	strb	r3, [r6, #14]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003378:	4648      	mov	r0, r9
 800337a:	30ea      	adds	r0, #234	; 0xea
 800337c:	b280      	uxth	r0, r0
 800337e:	231e      	movs	r3, #30
 8003380:	446b      	add	r3, sp
 8003382:	0019      	movs	r1, r3
 8003384:	f004 faf0 	bl	8007968 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003388:	466b      	mov	r3, sp
 800338a:	8bdb      	ldrh	r3, [r3, #30]
 800338c:	0a1a      	lsrs	r2, r3, #8
 800338e:	7332      	strb	r2, [r6, #12]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003390:	73f3      	strb	r3, [r6, #15]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003392:	4648      	mov	r0, r9
 8003394:	30eb      	adds	r0, #235	; 0xeb
 8003396:	b280      	uxth	r0, r0
 8003398:	231e      	movs	r3, #30
 800339a:	446b      	add	r3, sp
 800339c:	0019      	movs	r1, r3
 800339e:	f004 fae3 	bl	8007968 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80033a2:	466b      	mov	r3, sp
 80033a4:	8bdb      	ldrh	r3, [r3, #30]
 80033a6:	0a1a      	lsrs	r2, r3, #8
 80033a8:	7372      	strb	r2, [r6, #13]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80033aa:	7433      	strb	r3, [r6, #16]
				AddPortButton(button[i + 1].type,i + 1);
 80033ac:	b2eb      	uxtb	r3, r5
 80033ae:	7ab0      	ldrb	r0, [r6, #10]
 80033b0:	4699      	mov	r9, r3
 80033b2:	0019      	movs	r1, r3
 80033b4:	f004 fff4 	bl	80083a0 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80033b8:	7c71      	ldrb	r1, [r6, #17]
 80033ba:	7af3      	ldrb	r3, [r6, #11]
 80033bc:	104a      	asrs	r2, r1, #1
 80033be:	4640      	mov	r0, r8
 80033c0:	4002      	ands	r2, r0
 80033c2:	4001      	ands	r1, r0
 80033c4:	2000      	movs	r0, #0
 80033c6:	9005      	str	r0, [sp, #20]
 80033c8:	7c30      	ldrb	r0, [r6, #16]
 80033ca:	9004      	str	r0, [sp, #16]
 80033cc:	7bf0      	ldrb	r0, [r6, #15]
 80033ce:	9003      	str	r0, [sp, #12]
 80033d0:	7bb0      	ldrb	r0, [r6, #14]
 80033d2:	9002      	str	r0, [sp, #8]
 80033d4:	7b70      	ldrb	r0, [r6, #13]
 80033d6:	9001      	str	r0, [sp, #4]
 80033d8:	7b30      	ldrb	r0, [r6, #12]
 80033da:	9000      	str	r0, [sp, #0]
 80033dc:	4648      	mov	r0, r9
 80033de:	f005 f8f9 	bl	80085d4 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80033e2:	3501      	adds	r5, #1
 80033e4:	3404      	adds	r4, #4
 80033e6:	b2a4      	uxth	r4, r4
 80033e8:	3609      	adds	r6, #9
 80033ea:	2d08      	cmp	r5, #8
 80033ec:	d012      	beq.n	8003414 <LoadEEbuttons+0xe0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80033ee:	231e      	movs	r3, #30
 80033f0:	446b      	add	r3, sp
 80033f2:	0019      	movs	r1, r3
 80033f4:	0020      	movs	r0, r4
 80033f6:	f004 fab7 	bl	8007968 <EE_ReadVariable>
		if(!status1)									// This variable exists
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d1f1      	bne.n	80033e2 <LoadEEbuttons+0xae>
			temp8 =(uint8_t )(temp16 >> 8);
 80033fe:	466b      	mov	r3, sp
 8003400:	8bdb      	ldrh	r3, [r3, #30]
 8003402:	0a19      	lsrs	r1, r3, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003404:	0b1a      	lsrs	r2, r3, #12
 8003406:	42aa      	cmp	r2, r5
 8003408:	d1eb      	bne.n	80033e2 <LoadEEbuttons+0xae>
 800340a:	003a      	movs	r2, r7
 800340c:	400a      	ands	r2, r1
 800340e:	420f      	tst	r7, r1
 8003410:	d0e7      	beq.n	80033e2 <LoadEEbuttons+0xae>
 8003412:	e79f      	b.n	8003354 <LoadEEbuttons+0x20>
			}
		}
	}
	
	return result;
}
 8003414:	2000      	movs	r0, #0
 8003416:	b009      	add	sp, #36	; 0x24
 8003418:	bcc0      	pop	{r6, r7}
 800341a:	46b9      	mov	r9, r7
 800341c:	46b0      	mov	r8, r6
 800341e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003420:	20001524 	.word	0x20001524

08003424 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	46de      	mov	lr, fp
 8003428:	4657      	mov	r7, sl
 800342a:	464e      	mov	r6, r9
 800342c:	4645      	mov	r5, r8
 800342e:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003430:	2032      	movs	r0, #50	; 0x32
 8003432:	f010 fcb7 	bl	8013da4 <malloc>
 8003436:	4680      	mov	r8, r0
	if(snipBuffer == NULL)
 8003438:	2800      	cmp	r0, #0
 800343a:	d06c      	beq.n	8003516 <LoadROsnippets+0xf2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800343c:	4b38      	ldr	r3, [pc, #224]	; (8003520 <LoadROsnippets+0xfc>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2bfe      	cmp	r3, #254	; 0xfe
 8003442:	d16a      	bne.n	800351a <LoadROsnippets+0xf6>
 8003444:	4b37      	ldr	r3, [pc, #220]	; (8003524 <LoadROsnippets+0x100>)
 8003446:	4699      	mov	r9, r3
	int currentAdd = RO_MID_ADDRESS;
 8003448:	4c35      	ldr	r4, [pc, #212]	; (8003520 <LoadROsnippets+0xfc>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800344a:	2301      	movs	r3, #1
 800344c:	4443      	add	r3, r8
 800344e:	469a      	mov	sl, r3
 8003450:	e026      	b.n	80034a0 <LoadROsnippets+0x7c>
		memset(snipBuffer,0,sizeof(snippet_t));
		i =0;
 8003452:	2500      	movs	r5, #0
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
			snipBuffer[i] =*(uint8_t* )currentAdd;
			++currentAdd;
			++i;
		}
		if(snipBuffer[i - 1] != 0)
 8003454:	4643      	mov	r3, r8
 8003456:	195b      	adds	r3, r3, r5
 8003458:	3b01      	subs	r3, #1
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <LoadROsnippets+0x40>
			++i;	// String termination char was not recorded, then add one
 8003460:	3501      	adds	r5, #1
 8003462:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd =(char* )malloc(i);
 8003464:	0028      	movs	r0, r5
 8003466:	f010 fc9d 	bl	8013da4 <malloc>
 800346a:	465b      	mov	r3, fp
 800346c:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 800346e:	2800      	cmp	r0, #0
 8003470:	d03d      	beq.n	80034ee <LoadROsnippets+0xca>
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003472:	002a      	movs	r2, r5
 8003474:	4641      	mov	r1, r8
 8003476:	f010 fecb 	bl	8014210 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800347a:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <LoadROsnippets+0x104>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	3301      	adds	r3, #1
 8003480:	4a29      	ldr	r2, [pc, #164]	; (8003528 <LoadROsnippets+0x104>)
 8003482:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003484:	002a      	movs	r2, r5
 8003486:	2100      	movs	r1, #0
 8003488:	4640      	mov	r0, r8
 800348a:	f010 feca 	bl	8014222 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 800348e:	783b      	ldrb	r3, [r7, #0]
 8003490:	2bfe      	cmp	r3, #254	; 0xfe
 8003492:	d136      	bne.n	8003502 <LoadROsnippets+0xde>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003494:	3bea      	subs	r3, #234	; 0xea
 8003496:	469c      	mov	ip, r3
 8003498:	44e1      	add	r9, ip
 800349a:	4b24      	ldr	r3, [pc, #144]	; (800352c <LoadROsnippets+0x108>)
 800349c:	4599      	cmp	r9, r3
 800349e:	d030      	beq.n	8003502 <LoadROsnippets+0xde>
		for(i =0; i < sizeof(snippet_t); i++)
 80034a0:	0021      	movs	r1, r4
 80034a2:	3114      	adds	r1, #20
BOS_Status LoadROsnippets(void){
 80034a4:	0023      	movs	r3, r4
 80034a6:	4642      	mov	r2, r8
 80034a8:	1b16      	subs	r6, r2, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	54f2      	strb	r2, [r6, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 80034ae:	3301      	adds	r3, #1
 80034b0:	428b      	cmp	r3, r1
 80034b2:	d1fa      	bne.n	80034aa <LoadROsnippets+0x86>
 80034b4:	3414      	adds	r4, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80034b6:	46cb      	mov	fp, r9
 80034b8:	2214      	movs	r2, #20
 80034ba:	4651      	mov	r1, sl
 80034bc:	4648      	mov	r0, r9
 80034be:	f010 fea7 	bl	8014210 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 80034c2:	2214      	movs	r2, #20
 80034c4:	2100      	movs	r1, #0
 80034c6:	4640      	mov	r0, r8
 80034c8:	f010 feab 	bl	8014222 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80034cc:	0027      	movs	r7, r4
 80034ce:	7823      	ldrb	r3, [r4, #0]
 80034d0:	2bfd      	cmp	r3, #253	; 0xfd
 80034d2:	d8be      	bhi.n	8003452 <LoadROsnippets+0x2e>
		i =0;
 80034d4:	2500      	movs	r5, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80034d6:	3e14      	subs	r6, #20
 80034d8:	5533      	strb	r3, [r6, r4]
			++currentAdd;
 80034da:	3401      	adds	r4, #1
			++i;
 80034dc:	3501      	adds	r5, #1
 80034de:	b2ed      	uxtb	r5, r5
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80034e0:	0027      	movs	r7, r4
 80034e2:	7823      	ldrb	r3, [r4, #0]
 80034e4:	2bfd      	cmp	r3, #253	; 0xfd
 80034e6:	d8b5      	bhi.n	8003454 <LoadROsnippets+0x30>
 80034e8:	2d32      	cmp	r5, #50	; 0x32
 80034ea:	d1f5      	bne.n	80034d8 <LoadROsnippets+0xb4>
 80034ec:	e7b2      	b.n	8003454 <LoadROsnippets+0x30>
			memset(&snippets[s],0,sizeof(snippet_t));
 80034ee:	2214      	movs	r2, #20
 80034f0:	2100      	movs	r1, #0
 80034f2:	4658      	mov	r0, fp
 80034f4:	f010 fe95 	bl	8014222 <memset>
			free(snipBuffer);
 80034f8:	4640      	mov	r0, r8
 80034fa:	f010 fc5d 	bl	8013db8 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80034fe:	200e      	movs	r0, #14
 8003500:	e003      	b.n	800350a <LoadROsnippets+0xe6>
			break;
	}
	
	free(snipBuffer);
 8003502:	4640      	mov	r0, r8
 8003504:	f010 fc58 	bl	8013db8 <free>
	return BOS_OK;
 8003508:	2000      	movs	r0, #0
}
 800350a:	bcf0      	pop	{r4, r5, r6, r7}
 800350c:	46bb      	mov	fp, r7
 800350e:	46b2      	mov	sl, r6
 8003510:	46a9      	mov	r9, r5
 8003512:	46a0      	mov	r8, r4
 8003514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 8003516:	20fb      	movs	r0, #251	; 0xfb
 8003518:	e7f7      	b.n	800350a <LoadROsnippets+0xe6>
		return BOS_ERROR;
 800351a:	20ff      	movs	r0, #255	; 0xff
 800351c:	e7f5      	b.n	800350a <LoadROsnippets+0xe6>
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	0801dc00 	.word	0x0801dc00
 8003524:	20006ac4 	.word	0x20006ac4
 8003528:	20001227 	.word	0x20001227
 800352c:	20006b28 	.word	0x20006b28

08003530 <LoadEEvars>:
void LoadEEvars(void){
 8003530:	b510      	push	{r4, lr}
	LoadROtopology();
 8003532:	f7ff fca5 	bl	8002e80 <LoadROtopology>
	LoadEEportsDir();
 8003536:	f7ff fcf7 	bl	8002f28 <LoadEEportsDir>
	LoadEEalias();
 800353a:	f7ff fd17 	bl	8002f6c <LoadEEalias>
	LoadEEgroup();
 800353e:	f7ff fd5b 	bl	8002ff8 <LoadEEgroup>
	LoadEEstreams();
 8003542:	f7ff fdaf 	bl	80030a4 <LoadEEstreams>
	LoadEEparams();
 8003546:	f7ff fe53 	bl	80031f0 <LoadEEparams>
	LoadEEbuttons();
 800354a:	f7ff fef3 	bl	8003334 <LoadEEbuttons>
	LoadROsnippets();
 800354e:	f7ff ff69 	bl	8003424 <LoadROsnippets>
}
 8003552:	bd10      	pop	{r4, pc}

08003554 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <SaveEEportsDir+0x3c>)
 8003558:	781d      	ldrb	r5, [r3, #0]
 800355a:	2d00      	cmp	r5, #0
 800355c:	d016      	beq.n	800358c <SaveEEportsDir+0x38>
 800355e:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003560:	2500      	movs	r5, #0
		if(arrayPortsDir[i - 1])
 8003562:	4f0c      	ldr	r7, [pc, #48]	; (8003594 <SaveEEportsDir+0x40>)
	for(uint8_t i =1; i <= N; i++){
 8003564:	001e      	movs	r6, r3
 8003566:	e008      	b.n	800357a <SaveEEportsDir+0x26>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003568:	1c60      	adds	r0, r4, #1
 800356a:	f004 fa29 	bl	80079c0 <EE_WriteVariable>
 800356e:	e009      	b.n	8003584 <SaveEEportsDir+0x30>
	for(uint8_t i =1; i <= N; i++){
 8003570:	3401      	adds	r4, #1
 8003572:	b2e4      	uxtb	r4, r4
 8003574:	7833      	ldrb	r3, [r6, #0]
 8003576:	42a3      	cmp	r3, r4
 8003578:	d308      	bcc.n	800358c <SaveEEportsDir+0x38>
		if(arrayPortsDir[i - 1])
 800357a:	1e63      	subs	r3, r4, #1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	5bd9      	ldrh	r1, [r3, r7]
 8003580:	2900      	cmp	r1, #0
 8003582:	d1f1      	bne.n	8003568 <SaveEEportsDir+0x14>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003584:	2c19      	cmp	r4, #25
 8003586:	d9f3      	bls.n	8003570 <SaveEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8003588:	250a      	movs	r5, #10
 800358a:	e7f1      	b.n	8003570 <SaveEEportsDir+0x1c>
	}
	
	return result;
}
 800358c:	0028      	movs	r0, r5
 800358e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003590:	2000001c 	.word	0x2000001c
 8003594:	20006f24 	.word	0x20006f24

08003598 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	46de      	mov	lr, fp
 800359c:	464f      	mov	r7, r9
 800359e:	4646      	mov	r6, r8
 80035a0:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80035a2:	2500      	movs	r5, #0
	uint16_t add =0, temp =0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	4699      	mov	r9, r3
	    {
		if(moduleAlias[i][0]){
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <SaveEEalias+0x7c>)
 80035aa:	469b      	mov	fp, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80035ac:	4f1a      	ldr	r7, [pc, #104]	; (8003618 <SaveEEalias+0x80>)
 80035ae:	e004      	b.n	80035ba <SaveEEalias+0x22>
 80035b0:	3501      	adds	r5, #1
 80035b2:	b2ed      	uxtb	r5, r5
 80035b4:	783b      	ldrb	r3, [r7, #0]
 80035b6:	42ab      	cmp	r3, r5
 80035b8:	d325      	bcc.n	8003606 <SaveEEalias+0x6e>
		if(moduleAlias[i][0]){
 80035ba:	00ab      	lsls	r3, r5, #2
 80035bc:	195b      	adds	r3, r3, r5
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	465a      	mov	r2, fp
 80035c2:	5c9b      	ldrb	r3, [r3, r2]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f3      	beq.n	80035b0 <SaveEEalias+0x18>
 80035c8:	00ae      	lsls	r6, r5, #2
 80035ca:	1976      	adds	r6, r6, r5
 80035cc:	0076      	lsls	r6, r6, #1
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <SaveEEalias+0x7c>)
 80035d0:	469c      	mov	ip, r3
 80035d2:	4466      	add	r6, ip
 80035d4:	464c      	mov	r4, r9
 80035d6:	341c      	adds	r4, #28
 80035d8:	b2a4      	uxth	r4, r4
 80035da:	464b      	mov	r3, r9
 80035dc:	3321      	adds	r3, #33	; 0x21
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4698      	mov	r8, r3
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80035e2:	7833      	ldrb	r3, [r6, #0]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	7871      	ldrb	r1, [r6, #1]
 80035e8:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80035ea:	b289      	uxth	r1, r1
 80035ec:	0020      	movs	r0, r4
 80035ee:	f004 f9e7 	bl	80079c0 <EE_WriteVariable>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80035f2:	3602      	adds	r6, #2
 80035f4:	3401      	adds	r4, #1
 80035f6:	b2a4      	uxth	r4, r4
 80035f8:	45a0      	cmp	r8, r4
 80035fa:	d1f2      	bne.n	80035e2 <SaveEEalias+0x4a>
 80035fc:	464b      	mov	r3, r9
 80035fe:	3305      	adds	r3, #5
 8003600:	b29b      	uxth	r3, r3
 8003602:	4699      	mov	r9, r3
 8003604:	e7d4      	b.n	80035b0 <SaveEEalias+0x18>
			}
		}
	}
	
	return result;
}
 8003606:	2000      	movs	r0, #0
 8003608:	bce0      	pop	{r5, r6, r7}
 800360a:	46bb      	mov	fp, r7
 800360c:	46b1      	mov	r9, r6
 800360e:	46a8      	mov	r8, r5
 8003610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20000f70 	.word	0x20000f70
 8003618:	2000001c 	.word	0x2000001c

0800361c <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	46de      	mov	lr, fp
 8003620:	4657      	mov	r7, sl
 8003622:	464e      	mov	r6, r9
 8003624:	4645      	mov	r5, r8
 8003626:	b5e0      	push	{r5, r6, r7, lr}
 8003628:	000f      	movs	r7, r1
 800362a:	0016      	movs	r6, r2
 800362c:	001c      	movs	r4, r3
 800362e:	ab0a      	add	r3, sp, #40	; 0x28
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	469b      	mov	fp, r3
 8003634:	ab0b      	add	r3, sp, #44	; 0x2c
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	469a      	mov	sl, r3
 800363a:	ab0c      	add	r3, sp, #48	; 0x30
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	4699      	mov	r9, r3
 8003640:	ab0d      	add	r3, sp, #52	; 0x34
 8003642:	781d      	ldrb	r5, [r3, #0]
 8003644:	ab0e      	add	r3, sp, #56	; 0x38
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800364a:	0001      	movs	r1, r0
 800364c:	20e4      	movs	r0, #228	; 0xe4
 800364e:	f004 f9b7 	bl	80079c0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003652:	0a39      	lsrs	r1, r7, #8
 8003654:	b289      	uxth	r1, r1
 8003656:	20e5      	movs	r0, #229	; 0xe5
 8003658:	f004 f9b2 	bl	80079c0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800365c:	b2b9      	uxth	r1, r7
 800365e:	20e6      	movs	r0, #230	; 0xe6
 8003660:	f004 f9ae 	bl	80079c0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003664:	0a31      	lsrs	r1, r6, #8
 8003666:	b289      	uxth	r1, r1
 8003668:	20e7      	movs	r0, #231	; 0xe7
 800366a:	f004 f9a9 	bl	80079c0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800366e:	b2b1      	uxth	r1, r6
 8003670:	20e8      	movs	r0, #232	; 0xe8
 8003672:	f004 f9a5 	bl	80079c0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003676:	0224      	lsls	r4, r4, #8
 8003678:	445c      	add	r4, fp
 800367a:	b2a1      	uxth	r1, r4
 800367c:	20e9      	movs	r0, #233	; 0xe9
 800367e:	f004 f99f 	bl	80079c0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003682:	4653      	mov	r3, sl
 8003684:	0219      	lsls	r1, r3, #8
 8003686:	4449      	add	r1, r9
 8003688:	b289      	uxth	r1, r1
 800368a:	20ea      	movs	r0, #234	; 0xea
 800368c:	f004 f998 	bl	80079c0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003690:	022d      	lsls	r5, r5, #8
 8003692:	4445      	add	r5, r8
 8003694:	b2a9      	uxth	r1, r5
 8003696:	20eb      	movs	r0, #235	; 0xeb
 8003698:	f004 f992 	bl	80079c0 <EE_WriteVariable>
	
	return result;
}
 800369c:	2000      	movs	r0, #0
 800369e:	bcf0      	pop	{r4, r5, r6, r7}
 80036a0:	46bb      	mov	fp, r7
 80036a2:	46b2      	mov	sl, r6
 80036a4:	46a9      	mov	r9, r5
 80036a6:	46a0      	mov	r8, r4
 80036a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036ac <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 80036ac:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 5) | (uint16_t )BOS.response);
 80036ae:	4c1a      	ldr	r4, [pc, #104]	; (8003718 <SaveEEparams+0x6c>)
 80036b0:	79e3      	ldrb	r3, [r4, #7]
 80036b2:	015b      	lsls	r3, r3, #5
 80036b4:	79a1      	ldrb	r1, [r4, #6]
 80036b6:	4319      	orrs	r1, r3
 80036b8:	208a      	movs	r0, #138	; 0x8a
 80036ba:	0040      	lsls	r0, r0, #1
 80036bc:	f004 f980 	bl	80079c0 <EE_WriteVariable>
	
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80036c0:	8821      	ldrh	r1, [r4, #0]
 80036c2:	2016      	movs	r0, #22
 80036c4:	30ff      	adds	r0, #255	; 0xff
 80036c6:	f004 f97b 	bl	80079c0 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80036ca:	8861      	ldrh	r1, [r4, #2]
 80036cc:	208b      	movs	r0, #139	; 0x8b
 80036ce:	0040      	lsls	r0, r0, #1
 80036d0:	f004 f976 	bl	80079c0 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80036d4:	7963      	ldrb	r3, [r4, #5]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	7b21      	ldrb	r1, [r4, #12]
 80036da:	4319      	orrs	r1, r3
 80036dc:	2018      	movs	r0, #24
 80036de:	30ff      	adds	r0, #255	; 0xff
 80036e0:	f004 f96e 	bl	80079c0 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80036e4:	8921      	ldrh	r1, [r4, #8]
 80036e6:	208c      	movs	r0, #140	; 0x8c
 80036e8:	0040      	lsls	r0, r0, #1
 80036ea:	f004 f969 	bl	80079c0 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80036ee:	8961      	ldrh	r1, [r4, #10]
 80036f0:	201a      	movs	r0, #26
 80036f2:	30ff      	adds	r0, #255	; 0xff
 80036f4:	f004 f964 	bl	80079c0 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80036f8:	7b63      	ldrb	r3, [r4, #13]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	7921      	ldrb	r1, [r4, #4]
 80036fe:	4319      	orrs	r1, r3
 8003700:	208d      	movs	r0, #141	; 0x8d
 8003702:	0040      	lsls	r0, r0, #1
 8003704:	f004 f95c 	bl	80079c0 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003708:	7ee1      	ldrb	r1, [r4, #27]
 800370a:	201c      	movs	r0, #28
 800370c:	30ff      	adds	r0, #255	; 0xff
 800370e:	f004 f957 	bl	80079c0 <EE_WriteVariable>
	
	return result;
}
 8003712:	2000      	movs	r0, #0
 8003714:	bd10      	pop	{r4, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	20006aa8 	.word	0x20006aa8

0800371c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 800371e:	2234      	movs	r2, #52	; 0x34
 8003720:	2100      	movs	r1, #0
 8003722:	4810      	ldr	r0, [pc, #64]	; (8003764 <ClearEEportsDir+0x48>)
 8003724:	f010 fd7d 	bl	8014222 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <ClearEEportsDir+0x4c>)
 800372a:	781d      	ldrb	r5, [r3, #0]
 800372c:	2d00      	cmp	r5, #0
 800372e:	d016      	beq.n	800375e <ClearEEportsDir+0x42>
 8003730:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003732:	2500      	movs	r5, #0
		if(arrayPortsDir[i - 1])
 8003734:	4f0b      	ldr	r7, [pc, #44]	; (8003764 <ClearEEportsDir+0x48>)
	for(uint8_t i =1; i <= N; i++){
 8003736:	001e      	movs	r6, r3
 8003738:	e008      	b.n	800374c <ClearEEportsDir+0x30>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800373a:	1c60      	adds	r0, r4, #1
 800373c:	f004 f940 	bl	80079c0 <EE_WriteVariable>
 8003740:	e009      	b.n	8003756 <ClearEEportsDir+0x3a>
	for(uint8_t i =1; i <= N; i++){
 8003742:	3401      	adds	r4, #1
 8003744:	b2e4      	uxtb	r4, r4
 8003746:	7833      	ldrb	r3, [r6, #0]
 8003748:	42a3      	cmp	r3, r4
 800374a:	d308      	bcc.n	800375e <ClearEEportsDir+0x42>
		if(arrayPortsDir[i - 1])
 800374c:	1e63      	subs	r3, r4, #1
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	5bd9      	ldrh	r1, [r3, r7]
 8003752:	2900      	cmp	r1, #0
 8003754:	d1f1      	bne.n	800373a <ClearEEportsDir+0x1e>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003756:	2c19      	cmp	r4, #25
 8003758:	d9f3      	bls.n	8003742 <ClearEEportsDir+0x26>
			result =BOS_ERR_EEPROM;
 800375a:	250a      	movs	r5, #10
 800375c:	e7f1      	b.n	8003742 <ClearEEportsDir+0x26>
	}
	
	return result;
}
 800375e:	0028      	movs	r0, r5
 8003760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	20006f24 	.word	0x20006f24
 8003768:	2000001c 	.word	0x2000001c

0800376c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 800376c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <EE_FormatForFactoryReset+0x20>)
 8003770:	4a07      	ldr	r2, [pc, #28]	; (8003790 <EE_FormatForFactoryReset+0x24>)
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d100      	bne.n	800377a <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
		}
	}
	
}
 8003778:	bd10      	pop	{r4, pc}
		if(EE_Format() == HAL_OK){
 800377a:	f004 f9d1 	bl	8007b20 <EE_Format>
 800377e:	2800      	cmp	r0, #0
 8003780:	d1fa      	bne.n	8003778 <EE_FormatForFactoryReset+0xc>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003782:	4b03      	ldr	r3, [pc, #12]	; (8003790 <EE_FormatForFactoryReset+0x24>)
 8003784:	4a01      	ldr	r2, [pc, #4]	; (800378c <EE_FormatForFactoryReset+0x20>)
 8003786:	601a      	str	r2, [r3, #0]
}
 8003788:	e7f6      	b.n	8003778 <EE_FormatForFactoryReset+0xc>
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	beefdead 	.word	0xbeefdead
 8003790:	20007ff0 	.word	0x20007ff0

08003794 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003794:	b530      	push	{r4, r5, lr}
 8003796:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003798:	ab04      	add	r3, sp, #16
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	ab07      	add	r3, sp, #28
 800379e:	2212      	movs	r2, #18
 80037a0:	446a      	add	r2, sp
 80037a2:	a908      	add	r1, sp, #32
 80037a4:	2001      	movs	r0, #1
 80037a6:	f00a f819 	bl	800d7dc <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80037aa:	ac03      	add	r4, sp, #12
 80037ac:	9400      	str	r4, [sp, #0]
 80037ae:	ab05      	add	r3, sp, #20
 80037b0:	220e      	movs	r2, #14
 80037b2:	446a      	add	r2, sp
 80037b4:	a906      	add	r1, sp, #24
 80037b6:	2002      	movs	r0, #2
 80037b8:	f00a f810 	bl	800d7dc <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037bc:	2301      	movs	r3, #1
 80037be:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2500      	movs	r5, #0
 80037c2:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80037c4:	466b      	mov	r3, sp
 80037c6:	8a5b      	ldrh	r3, [r3, #18]
 80037c8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80037ca:	a909      	add	r1, sp, #36	; 0x24
 80037cc:	9808      	ldr	r0, [sp, #32]
 80037ce:	f00e fba9 	bl	8011f24 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037d2:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037d4:	2302      	movs	r3, #2
 80037d6:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80037d8:	8823      	ldrh	r3, [r4, #0]
 80037da:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80037dc:	a909      	add	r1, sp, #36	; 0x24
 80037de:	9805      	ldr	r0, [sp, #20]
 80037e0:	f00e fba0 	bl	8011f24 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80037e4:	466b      	mov	r3, sp
 80037e6:	8a59      	ldrh	r1, [r3, #18]
 80037e8:	2200      	movs	r2, #0
 80037ea:	9808      	ldr	r0, [sp, #32]
 80037ec:	f00e fd1e 	bl	801222c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80037f0:	2005      	movs	r0, #5
 80037f2:	f00a fb99 	bl	800df28 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80037f6:	8821      	ldrh	r1, [r4, #0]
 80037f8:	9805      	ldr	r0, [sp, #20]
 80037fa:	f00e fd11 	bl	8012220 <HAL_GPIO_ReadPin>
 80037fe:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003800:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <IsLowerCLIbaud+0x76>
}
 8003806:	b00f      	add	sp, #60	; 0x3c
 8003808:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800380a:	3312      	adds	r3, #18
 800380c:	446b      	add	r3, sp
 800380e:	8819      	ldrh	r1, [r3, #0]
 8003810:	2201      	movs	r2, #1
 8003812:	9808      	ldr	r0, [sp, #32]
 8003814:	f00e fd0a 	bl	801222c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003818:	2005      	movs	r0, #5
 800381a:	f00a fb85 	bl	800df28 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 800381e:	ab03      	add	r3, sp, #12
 8003820:	8819      	ldrh	r1, [r3, #0]
 8003822:	9805      	ldr	r0, [sp, #20]
 8003824:	f00e fcfc 	bl	8012220 <HAL_GPIO_ReadPin>
 8003828:	3801      	subs	r0, #1
 800382a:	4243      	negs	r3, r0
 800382c:	4158      	adcs	r0, r3
			return 1;
 800382e:	b2c0      	uxtb	r0, r0
 8003830:	e7e9      	b.n	8003806 <IsLowerCLIbaud+0x72>

08003832 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8003832:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8003834:	f00a fd5e 	bl	800e2f4 <GetUart>
 8003838:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 800383a:	23e1      	movs	r3, #225	; 0xe1
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	015b      	lsls	r3, r3, #5
 800384a:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800384c:	f010 f918 	bl	8013a80 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8003850:	6822      	ldr	r2, [r4, #0]
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	2120      	movs	r1, #32
 8003856:	430b      	orrs	r3, r1
 8003858:	6013      	str	r3, [r2, #0]
}
 800385a:	bd10      	pop	{r4, pc}

0800385c <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 800385c:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <IsModuleParameter+0x14>)
 8003860:	6899      	ldr	r1, [r3, #8]
 8003862:	f7fc fc4f 	bl	8000104 <strcmp>
 8003866:	4243      	negs	r3, r0
 8003868:	4158      	adcs	r0, r3
 800386a:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 800386c:	bd10      	pop	{r4, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	20000084 	.word	0x20000084

08003874 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	0005      	movs	r5, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003878:	491b      	ldr	r1, [pc, #108]	; (80038e8 <IsMathOperator+0x74>)
 800387a:	f7fc fc43 	bl	8000104 <strcmp>
 800387e:	0006      	movs	r6, r0
 8003880:	2706      	movs	r7, #6
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003882:	4c1a      	ldr	r4, [pc, #104]	; (80038ec <IsMathOperator+0x78>)
		if(!strcmp(string,"="))
 8003884:	2e00      	cmp	r6, #0
 8003886:	d023      	beq.n	80038d0 <IsMathOperator+0x5c>
		else if(!strcmp(string,">"))
 8003888:	0021      	movs	r1, r4
 800388a:	0028      	movs	r0, r5
 800388c:	f7fc fc3a 	bl	8000104 <strcmp>
 8003890:	2800      	cmp	r0, #0
 8003892:	d01f      	beq.n	80038d4 <IsMathOperator+0x60>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003894:	4916      	ldr	r1, [pc, #88]	; (80038f0 <IsMathOperator+0x7c>)
 8003896:	0028      	movs	r0, r5
 8003898:	f7fc fc34 	bl	8000104 <strcmp>
 800389c:	2800      	cmp	r0, #0
 800389e:	d01b      	beq.n	80038d8 <IsMathOperator+0x64>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80038a0:	4914      	ldr	r1, [pc, #80]	; (80038f4 <IsMathOperator+0x80>)
 80038a2:	0028      	movs	r0, r5
 80038a4:	f7fc fc2e 	bl	8000104 <strcmp>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d017      	beq.n	80038dc <IsMathOperator+0x68>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80038ac:	4912      	ldr	r1, [pc, #72]	; (80038f8 <IsMathOperator+0x84>)
 80038ae:	0028      	movs	r0, r5
 80038b0:	f7fc fc28 	bl	8000104 <strcmp>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d013      	beq.n	80038e0 <IsMathOperator+0x6c>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80038b8:	4910      	ldr	r1, [pc, #64]	; (80038fc <IsMathOperator+0x88>)
 80038ba:	0028      	movs	r0, r5
 80038bc:	f7fc fc22 	bl	8000104 <strcmp>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d00f      	beq.n	80038e4 <IsMathOperator+0x70>
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80038c4:	3f01      	subs	r7, #1
 80038c6:	b2ff      	uxtb	r7, r7
 80038c8:	2f00      	cmp	r7, #0
 80038ca:	d1db      	bne.n	8003884 <IsMathOperator+0x10>
			return MATH_NOT_EQUAL;
	}
	return 0;
}
 80038cc:	0038      	movs	r0, r7
 80038ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 80038d0:	2701      	movs	r7, #1
 80038d2:	e7fb      	b.n	80038cc <IsMathOperator+0x58>
			return MATH_GREATER;
 80038d4:	2702      	movs	r7, #2
 80038d6:	e7f9      	b.n	80038cc <IsMathOperator+0x58>
			return MATH_SMALLER;
 80038d8:	2703      	movs	r7, #3
 80038da:	e7f7      	b.n	80038cc <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 80038dc:	2704      	movs	r7, #4
 80038de:	e7f5      	b.n	80038cc <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 80038e0:	2705      	movs	r7, #5
 80038e2:	e7f3      	b.n	80038cc <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 80038e4:	2706      	movs	r7, #6
 80038e6:	e7f1      	b.n	80038cc <IsMathOperator+0x58>
 80038e8:	0801a4d0 	.word	0x0801a4d0
 80038ec:	0801a4d4 	.word	0x0801a4d4
 80038f0:	0801a4d8 	.word	0x0801a4d8
 80038f4:	0801a4dc 	.word	0x0801a4dc
 80038f8:	0801a4e0 	.word	0x0801a4e0
 80038fc:	0801a4e4 	.word	0x0801a4e4

08003900 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003902:	b083      	sub	sp, #12
 8003904:	0007      	movs	r7, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003906:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003908:	4d0e      	ldr	r5, [pc, #56]	; (8003944 <ExploreNeighbors+0x44>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800390a:	2603      	movs	r6, #3
 800390c:	e003      	b.n	8003916 <ExploreNeighbors+0x16>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 800390e:	3401      	adds	r4, #1
 8003910:	b2e4      	uxtb	r4, r4
 8003912:	2c07      	cmp	r4, #7
 8003914:	d012      	beq.n	800393c <ExploreNeighbors+0x3c>
		if(port != ignore){
 8003916:	42a7      	cmp	r7, r4
 8003918:	d0f9      	beq.n	800390e <ExploreNeighbors+0xe>
			messageParams[0] =(uint8_t )(myPN >> 8);
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <ExploreNeighbors+0x48>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	0a1a      	lsrs	r2, r3, #8
 8003920:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 8003922:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 8003924:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003926:	9600      	str	r6, [sp, #0]
 8003928:	230a      	movs	r3, #10
 800392a:	2200      	movs	r2, #0
 800392c:	2100      	movs	r1, #0
 800392e:	0020      	movs	r0, r4
 8003930:	f005 fdec 	bl	800950c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003934:	200a      	movs	r0, #10
 8003936:	f00a fe2e 	bl	800e596 <osDelay>
 800393a:	e7e8      	b.n	800390e <ExploreNeighbors+0xe>
		}
	}
	
	return result;
}
 800393c:	2000      	movs	r0, #0
 800393e:	b003      	add	sp, #12
 8003940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	20000f40 	.word	0x20000f40
 8003948:	20000050 	.word	0x20000050

0800394c <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src){
 800394c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394e:	46de      	mov	lr, fp
 8003950:	4657      	mov	r7, sl
 8003952:	464e      	mov	r6, r9
 8003954:	4645      	mov	r5, r8
 8003956:	b5e0      	push	{r5, r6, r7, lr}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 800395c:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <FindBroadcastRoutes+0x130>)
 800395e:	781d      	ldrb	r5, [r3, #0]
 8003960:	1deb      	adds	r3, r5, #7
 8003962:	08db      	lsrs	r3, r3, #3
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	466a      	mov	r2, sp
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	469d      	mov	sp, r3
 800396c:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 800396e:	2d00      	cmp	r5, #0
 8003970:	d009      	beq.n	8003986 <FindBroadcastRoutes+0x3a>
 8003972:	4a43      	ldr	r2, [pc, #268]	; (8003a80 <FindBroadcastRoutes+0x134>)
 8003974:	2300      	movs	r3, #0
		modules[m] =0;
 8003976:	2100      	movs	r1, #0
 8003978:	54e1      	strb	r1, [r4, r3]
		bcastRoutes[m] =0;
 800397a:	8011      	strh	r1, [r2, #0]
	for(m =0; m < N; m++){
 800397c:	3301      	adds	r3, #1
 800397e:	3202      	adds	r2, #2
 8003980:	b2de      	uxtb	r6, r3
 8003982:	42b5      	cmp	r5, r6
 8003984:	d8f8      	bhi.n	8003978 <FindBroadcastRoutes+0x2c>
	}
	modules[src - 1] =++level;					// Tag the source
 8003986:	3801      	subs	r0, #1
 8003988:	2301      	movs	r3, #1
 800398a:	5423      	strb	r3, [r4, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= NumOfPorts; p++){
 800398c:	2216      	movs	r2, #22
 800398e:	4342      	muls	r2, r0
 8003990:	4b3c      	ldr	r3, [pc, #240]	; (8003a84 <FindBroadcastRoutes+0x138>)
 8003992:	18d2      	adds	r2, r2, r3
	modules[src - 1] =++level;					// Tag the source
 8003994:	2100      	movs	r1, #0
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003996:	4e3a      	ldr	r6, [pc, #232]	; (8003a80 <FindBroadcastRoutes+0x134>)
 8003998:	0040      	lsls	r0, r0, #1
 800399a:	2301      	movs	r3, #1
 800399c:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 800399e:	3301      	adds	r3, #1
 80039a0:	469c      	mov	ip, r3
 80039a2:	607d      	str	r5, [r7, #4]
 80039a4:	46a3      	mov	fp, r4
 80039a6:	e003      	b.n	80039b0 <FindBroadcastRoutes+0x64>
	for(p =1; p <= NumOfPorts; p++){
 80039a8:	3101      	adds	r1, #1
 80039aa:	3202      	adds	r2, #2
 80039ac:	2906      	cmp	r1, #6
 80039ae:	d011      	beq.n	80039d4 <FindBroadcastRoutes+0x88>
		if(array[src - 1][p]){
 80039b0:	8853      	ldrh	r3, [r2, #2]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f8      	beq.n	80039a8 <FindBroadcastRoutes+0x5c>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80039b6:	5b85      	ldrh	r5, [r0, r6]
 80039b8:	46a9      	mov	r9, r5
 80039ba:	4645      	mov	r5, r8
 80039bc:	408d      	lsls	r5, r1
 80039be:	46aa      	mov	sl, r5
 80039c0:	464d      	mov	r5, r9
 80039c2:	4654      	mov	r4, sl
 80039c4:	4325      	orrs	r5, r4
 80039c6:	5385      	strh	r5, [r0, r6]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	445b      	add	r3, fp
 80039cc:	3b01      	subs	r3, #1
 80039ce:	4664      	mov	r4, ip
 80039d0:	701c      	strb	r4, [r3, #0]
 80039d2:	e7e9      	b.n	80039a8 <FindBroadcastRoutes+0x5c>
 80039d4:	687d      	ldr	r5, [r7, #4]
 80039d6:	465c      	mov	r4, fp
	++level;												// Move one level
 80039d8:	2302      	movs	r3, #2
 80039da:	4699      	mov	r9, r3
	
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do{
		untaged =0;								// Reset the untaged counter
		++level;											// Move one level
 80039dc:	464b      	mov	r3, r9
 80039de:	3301      	adds	r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	4699      	mov	r9, r3
		
		for(m =0; m < N; m++)					// Scan all modules in the list
 80039e4:	2d00      	cmp	r5, #0
 80039e6:	d040      	beq.n	8003a6a <FindBroadcastRoutes+0x11e>
 80039e8:	4826      	ldr	r0, [pc, #152]	; (8003a84 <FindBroadcastRoutes+0x138>)
 80039ea:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 80039ec:	2600      	movs	r6, #0
		    {
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80039ee:	2301      	movs	r3, #1
 80039f0:	425b      	negs	r3, r3
 80039f2:	444b      	add	r3, r9
 80039f4:	46b4      	mov	ip, r6
 80039f6:	001e      	movs	r6, r3
 80039f8:	e02a      	b.n	8003a50 <FindBroadcastRoutes+0x104>
			{
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
 80039fa:	3101      	adds	r1, #1
 80039fc:	2907      	cmp	r1, #7
 80039fe:	d01f      	beq.n	8003a40 <FindBroadcastRoutes+0xf4>
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003a00:	004b      	lsls	r3, r1, #1
 8003a02:	5ac3      	ldrh	r3, [r0, r3]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f8      	beq.n	80039fa <FindBroadcastRoutes+0xae>
 8003a08:	08db      	lsrs	r3, r3, #3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	5ce5      	ldrb	r5, [r4, r3]
 8003a0e:	2d00      	cmp	r5, #0
 8003a10:	d1f3      	bne.n	80039fa <FindBroadcastRoutes+0xae>
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a12:	1e4d      	subs	r5, r1, #1
 8003a14:	46aa      	mov	sl, r5
 8003a16:	2501      	movs	r5, #1
 8003a18:	4656      	mov	r6, sl
 8003a1a:	40b5      	lsls	r5, r6
 8003a1c:	46aa      	mov	sl, r5
 8003a1e:	4d18      	ldr	r5, [pc, #96]	; (8003a80 <FindBroadcastRoutes+0x134>)
 8003a20:	5b55      	ldrh	r5, [r2, r5]
 8003a22:	46ab      	mov	fp, r5
 8003a24:	4655      	mov	r5, sl
 8003a26:	465e      	mov	r6, fp
 8003a28:	4335      	orrs	r5, r6
 8003a2a:	46aa      	mov	sl, r5
 8003a2c:	4d14      	ldr	r5, [pc, #80]	; (8003a80 <FindBroadcastRoutes+0x134>)
 8003a2e:	4656      	mov	r6, sl
 8003a30:	5356      	strh	r6, [r2, r5]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003a32:	464d      	mov	r5, r9
 8003a34:	54e5      	strb	r5, [r4, r3]
						++untaged;
 8003a36:	4663      	mov	r3, ip
 8003a38:	3301      	adds	r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	469c      	mov	ip, r3
 8003a3e:	e7dc      	b.n	80039fa <FindBroadcastRoutes+0xae>
 8003a40:	4642      	mov	r2, r8
 8003a42:	687d      	ldr	r5, [r7, #4]
 8003a44:	683e      	ldr	r6, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a46:	3201      	adds	r2, #1
 8003a48:	3016      	adds	r0, #22
 8003a4a:	b2d3      	uxtb	r3, r2
 8003a4c:	429d      	cmp	r5, r3
 8003a4e:	d909      	bls.n	8003a64 <FindBroadcastRoutes+0x118>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a50:	5ca3      	ldrb	r3, [r4, r2]
 8003a52:	42b3      	cmp	r3, r6
 8003a54:	d1f7      	bne.n	8003a46 <FindBroadcastRoutes+0xfa>
 8003a56:	0053      	lsls	r3, r2, #1
 8003a58:	2101      	movs	r1, #1
 8003a5a:	607d      	str	r5, [r7, #4]
 8003a5c:	4690      	mov	r8, r2
 8003a5e:	603e      	str	r6, [r7, #0]
 8003a60:	001a      	movs	r2, r3
 8003a62:	e7cd      	b.n	8003a00 <FindBroadcastRoutes+0xb4>
 8003a64:	4666      	mov	r6, ip
					}
				}
			}
		}
	} while(untaged);
 8003a66:	2e00      	cmp	r6, #0
 8003a68:	d1b8      	bne.n	80039dc <FindBroadcastRoutes+0x90>
	
	return result;
}
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b003      	add	sp, #12
 8003a70:	bcf0      	pop	{r4, r5, r6, r7}
 8003a72:	46bb      	mov	fp, r7
 8003a74:	46b2      	mov	sl, r6
 8003a76:	46a9      	mov	r9, r5
 8003a78:	46a0      	mov	r8, r4
 8003a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a7c:	2000001c 	.word	0x2000001c
 8003a80:	20000cc0 	.word	0x20000cc0
 8003a84:	20000a80 	.word	0x20000a80

08003a88 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8a:	0005      	movs	r5, r0
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003a8c:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003a8e:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d100      	bne.n	8003a96 <minArr+0xe>
		smallest =arr[0];
 8003a94:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <minArr+0x38>)
 8003a98:	781e      	ldrb	r6, [r3, #0]
 8003a9a:	2e00      	cmp	r6, #0
 8003a9c:	dd0e      	ble.n	8003abc <minArr+0x34>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	e002      	b.n	8003aaa <minArr+0x22>
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	42b3      	cmp	r3, r6
 8003aa8:	da09      	bge.n	8003abe <minArr+0x36>
		if((arr[i] < smallest) && !Q[i]){
 8003aaa:	5cea      	ldrb	r2, [r5, r3]
 8003aac:	42a2      	cmp	r2, r4
 8003aae:	d2f9      	bcs.n	8003aa4 <minArr+0x1c>
 8003ab0:	5ccf      	ldrb	r7, [r1, r3]
 8003ab2:	2f00      	cmp	r7, #0
 8003ab4:	d1f6      	bne.n	8003aa4 <minArr+0x1c>
			smallest =arr[i];
			index =i;
 8003ab6:	b2d8      	uxtb	r0, r3
			smallest =arr[i];
 8003ab8:	0014      	movs	r4, r2
 8003aba:	e7f3      	b.n	8003aa4 <minArr+0x1c>
	for(int i =0; i < N; i++){
 8003abc:	2000      	movs	r0, #0
		}
	}
	
	return index;
}
 8003abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ac0:	2000001c 	.word	0x2000001c

08003ac4 <QnotEmpty>:

/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	0001      	movs	r1, r0
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <QnotEmpty+0x20>)
 8003aca:	781c      	ldrb	r4, [r3, #0]
 8003acc:	2c00      	cmp	r4, #0
 8003ace:	dd07      	ble.n	8003ae0 <QnotEmpty+0x1c>
 8003ad0:	2300      	movs	r3, #0
	char temp =1;
 8003ad2:	2001      	movs	r0, #1
		temp &=Q[i];
 8003ad4:	5cca      	ldrb	r2, [r1, r3]
 8003ad6:	4010      	ands	r0, r2
	for(int i =0; i < N; i++){
 8003ad8:	3301      	adds	r3, #1
 8003ada:	42a3      	cmp	r3, r4
 8003adc:	dbfa      	blt.n	8003ad4 <QnotEmpty+0x10>
	}
	
	return temp;
}
 8003ade:	bd10      	pop	{r4, pc}
	char temp =1;
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	e7fc      	b.n	8003ade <QnotEmpty+0x1a>
 8003ae4:	2000001c 	.word	0x2000001c

08003ae8 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aea:	46de      	mov	lr, fp
 8003aec:	4657      	mov	r7, sl
 8003aee:	464e      	mov	r6, r9
 8003af0:	4645      	mov	r5, r8
 8003af2:	b5e0      	push	{r5, r6, r7, lr}
 8003af4:	b091      	sub	sp, #68	; 0x44
 8003af6:	0006      	movs	r6, r0
 8003af8:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};		// All nodes initially in Q (unvisited nodes)
 8003afa:	2400      	movs	r4, #0
 8003afc:	9403      	str	r4, [sp, #12]
 8003afe:	222e      	movs	r2, #46	; 0x2e
 8003b00:	2100      	movs	r1, #0
 8003b02:	a804      	add	r0, sp, #16
 8003b04:	f010 fb8d 	bl	8014222 <memset>
	memset(route,0,sizeof(route));
 8003b08:	221a      	movs	r2, #26
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4858      	ldr	r0, [pc, #352]	; (8003c70 <FindRoute+0x188>)
 8003b0e:	f010 fb88 	bl	8014222 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b12:	0035      	movs	r5, r6
 8003b14:	1e70      	subs	r0, r6, #1
 8003b16:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <FindRoute+0x18c>)
 8003b18:	541c      	strb	r4, [r3, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b1a:	4b57      	ldr	r3, [pc, #348]	; (8003c78 <FindRoute+0x190>)
 8003b1c:	541c      	strb	r4, [r3, r0]
	for(int col =1; col <= 6; col++){
 8003b1e:	2616      	movs	r6, #22
 8003b20:	4370      	muls	r0, r6
 8003b22:	4e56      	ldr	r6, [pc, #344]	; (8003c7c <FindRoute+0x194>)
 8003b24:	1981      	adds	r1, r0, r6
 8003b26:	9101      	str	r1, [sp, #4]
 8003b28:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b2a:	4653      	mov	r3, sl
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	e002      	b.n	8003b36 <FindRoute+0x4e>
	for(int col =1; col <= 6; col++){
 8003b30:	3001      	adds	r0, #1
 8003b32:	2807      	cmp	r0, #7
 8003b34:	d010      	beq.n	8003b58 <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b36:	0043      	lsls	r3, r0, #1
 8003b38:	5acb      	ldrh	r3, [r1, r3]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f8      	beq.n	8003b30 <FindRoute+0x48>
 8003b3e:	08db      	lsrs	r3, r3, #3
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d1f5      	bne.n	8003b30 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003b44:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <FindRoute+0x18c>)
 8003b46:	4453      	add	r3, sl
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003b4e:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <FindRoute+0x188>)
 8003b50:	4652      	mov	r2, sl
 8003b52:	701a      	strb	r2, [r3, #0]
			return col;
 8003b54:	b2c0      	uxtb	r0, r0
 8003b56:	e083      	b.n	8003c60 <FindRoute+0x178>
	for(int i =1; i <= N; i++){
 8003b58:	4b49      	ldr	r3, [pc, #292]	; (8003c80 <FindRoute+0x198>)
 8003b5a:	7819      	ldrb	r1, [r3, #0]
 8003b5c:	2900      	cmp	r1, #0
 8003b5e:	dd14      	ble.n	8003b8a <FindRoute+0xa2>
 8003b60:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b62:	4a44      	ldr	r2, [pc, #272]	; (8003c74 <FindRoute+0x18c>)
 8003b64:	1e54      	subs	r4, r2, #1
 8003b66:	22ff      	movs	r2, #255	; 0xff
 8003b68:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b6a:	4a43      	ldr	r2, [pc, #268]	; (8003c78 <FindRoute+0x190>)
 8003b6c:	1e50      	subs	r0, r2, #1
 8003b6e:	2200      	movs	r2, #0
 8003b70:	4694      	mov	ip, r2
 8003b72:	e002      	b.n	8003b7a <FindRoute+0x92>
	for(int i =1; i <= N; i++){
 8003b74:	3301      	adds	r3, #1
 8003b76:	428b      	cmp	r3, r1
 8003b78:	dc07      	bgt.n	8003b8a <FindRoute+0xa2>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003b7a:	429d      	cmp	r5, r3
 8003b7c:	d0fa      	beq.n	8003b74 <FindRoute+0x8c>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b7e:	4642      	mov	r2, r8
 8003b80:	54e2      	strb	r2, [r4, r3]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b82:	181a      	adds	r2, r3, r0
 8003b84:	4666      	mov	r6, ip
 8003b86:	7016      	strb	r6, [r2, #0]
 8003b88:	e7f4      	b.n	8003b74 <FindRoute+0x8c>
	uint8_t u =0;
 8003b8a:	2400      	movs	r4, #0
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <FindRoute+0x194>)
 8003b8e:	4698      	mov	r8, r3
 8003b90:	230c      	movs	r3, #12
 8003b92:	4443      	add	r3, r8
 8003b94:	4699      	mov	r9, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003b96:	4d37      	ldr	r5, [pc, #220]	; (8003c74 <FindRoute+0x18c>)
 8003b98:	46d3      	mov	fp, sl
	while(!QnotEmpty(Q)){
 8003b9a:	a803      	add	r0, sp, #12
 8003b9c:	f7ff ff92 	bl	8003ac4 <QnotEmpty>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d12e      	bne.n	8003c02 <FindRoute+0x11a>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003ba4:	a903      	add	r1, sp, #12
 8003ba6:	4833      	ldr	r0, [pc, #204]	; (8003c74 <FindRoute+0x18c>)
 8003ba8:	f7ff ff6e 	bl	8003a88 <minArr>
 8003bac:	3001      	adds	r0, #1
 8003bae:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003bb0:	455c      	cmp	r4, fp
 8003bb2:	d00b      	beq.n	8003bcc <FindRoute+0xe4>
			Q[u - 1] =1;									// Remove u from Q
 8003bb4:	1e67      	subs	r7, r4, #1
 8003bb6:	ab03      	add	r3, sp, #12
 8003bb8:	2201      	movs	r2, #1
 8003bba:	55da      	strb	r2, [r3, r7]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003bbc:	2016      	movs	r0, #22
 8003bbe:	4378      	muls	r0, r7
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	18c1      	adds	r1, r0, r3
 8003bc4:	4448      	add	r0, r9
				if(!Q[v - 1])								// v is still in Q
 8003bc6:	aa03      	add	r2, sp, #12
 8003bc8:	46ba      	mov	sl, r7
 8003bca:	e005      	b.n	8003bd8 <FindRoute+0xf0>
 8003bcc:	46da      	mov	sl, fp
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003bce:	465c      	mov	r4, fp
 8003bd0:	e018      	b.n	8003c04 <FindRoute+0x11c>
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003bd2:	3102      	adds	r1, #2
 8003bd4:	4281      	cmp	r1, r0
 8003bd6:	d0e0      	beq.n	8003b9a <FindRoute+0xb2>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003bd8:	884b      	ldrh	r3, [r1, #2]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f9      	beq.n	8003bd2 <FindRoute+0xea>
				v =(array[u - 1][n] >> 3);
 8003bde:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	5cd6      	ldrb	r6, [r2, r3]
 8003be6:	2e00      	cmp	r6, #0
 8003be8:	d1f3      	bne.n	8003bd2 <FindRoute+0xea>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003bea:	4656      	mov	r6, sl
 8003bec:	5dae      	ldrb	r6, [r5, r6]
 8003bee:	3601      	adds	r6, #1
 8003bf0:	b2f6      	uxtb	r6, r6
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003bf2:	5cef      	ldrb	r7, [r5, r3]
 8003bf4:	42b7      	cmp	r7, r6
 8003bf6:	d9ec      	bls.n	8003bd2 <FindRoute+0xea>
						routeDist[v - 1] =alt;
 8003bf8:	4f1e      	ldr	r7, [pc, #120]	; (8003c74 <FindRoute+0x18c>)
 8003bfa:	54fe      	strb	r6, [r7, r3]
						routePrev[v - 1] =u;
 8003bfc:	4e1e      	ldr	r6, [pc, #120]	; (8003c78 <FindRoute+0x190>)
 8003bfe:	54f4      	strb	r4, [r6, r3]
 8003c00:	e7e7      	b.n	8003bd2 <FindRoute+0xea>
 8003c02:	46da      	mov	sl, fp
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c04:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <FindRoute+0x190>)
 8003c06:	191b      	adds	r3, r3, r4
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	7819      	ldrb	r1, [r3, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2900      	cmp	r1, #0
 8003c10:	d00d      	beq.n	8003c2e <FindRoute+0x146>
		route[j++] =u;          			// Push the vertex onto the stack
 8003c12:	4d17      	ldr	r5, [pc, #92]	; (8003c70 <FindRoute+0x188>)
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c14:	4818      	ldr	r0, [pc, #96]	; (8003c78 <FindRoute+0x190>)
 8003c16:	e000      	b.n	8003c1a <FindRoute+0x132>
 8003c18:	0011      	movs	r1, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	54ac      	strb	r4, [r5, r2]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c22:	1842      	adds	r2, r0, r1
 8003c24:	3a01      	subs	r2, #1
 8003c26:	7812      	ldrb	r2, [r2, #0]
 8003c28:	000c      	movs	r4, r1
 8003c2a:	2a00      	cmp	r2, #0
 8003c2c:	d1f4      	bne.n	8003c18 <FindRoute+0x130>
	for(int col =1; col <= 6; col++){
 8003c2e:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003c30:	4c0f      	ldr	r4, [pc, #60]	; (8003c70 <FindRoute+0x188>)
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <FindRoute+0x18c>)
 8003c34:	4453      	add	r3, sl
 8003c36:	001f      	movs	r7, r3
 8003c38:	3f01      	subs	r7, #1
 8003c3a:	9901      	ldr	r1, [sp, #4]
 8003c3c:	e002      	b.n	8003c44 <FindRoute+0x15c>
	for(int col =1; col <= 6; col++){
 8003c3e:	3001      	adds	r0, #1
 8003c40:	2807      	cmp	r0, #7
 8003c42:	d00c      	beq.n	8003c5e <FindRoute+0x176>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003c44:	0043      	lsls	r3, r0, #1
 8003c46:	5acb      	ldrh	r3, [r1, r3]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f8      	beq.n	8003c3e <FindRoute+0x156>
 8003c4c:	783a      	ldrb	r2, [r7, #0]
 8003c4e:	18a2      	adds	r2, r4, r2
 8003c50:	3a01      	subs	r2, #1
 8003c52:	7812      	ldrb	r2, [r2, #0]
 8003c54:	08db      	lsrs	r3, r3, #3
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d1f1      	bne.n	8003c3e <FindRoute+0x156>
			return col;
 8003c5a:	b2c0      	uxtb	r0, r0
 8003c5c:	e000      	b.n	8003c60 <FindRoute+0x178>
	return 0;
 8003c5e:	2000      	movs	r0, #0
}
 8003c60:	b011      	add	sp, #68	; 0x44
 8003c62:	bcf0      	pop	{r4, r5, r6, r7}
 8003c64:	46bb      	mov	fp, r7
 8003c66:	46b2      	mov	sl, r6
 8003c68:	46a9      	mov	r9, r5
 8003c6a:	46a0      	mov	r8, r4
 8003c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	20006bac 	.word	0x20006bac
 8003c74:	2000111c 	.word	0x2000111c
 8003c78:	20001138 	.word	0x20001138
 8003c7c:	20000a80 	.word	0x20000a80
 8003c80:	2000001c 	.word	0x2000001c

08003c84 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c86:	46ce      	mov	lr, r9
 8003c88:	4647      	mov	r7, r8
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	4680      	mov	r8, r0
 8003c90:	000d      	movs	r5, r1
 8003c92:	0016      	movs	r6, r2
 8003c94:	001f      	movs	r7, r3
	myOutport =FindRoute(myID,dst);
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <remoteBootloaderUpdate+0xec>)
 8003c98:	7818      	ldrb	r0, [r3, #0]
 8003c9a:	f7ff ff25 	bl	8003ae8 <FindRoute>
 8003c9e:	0004      	movs	r4, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003ca0:	2f00      	cmp	r7, #0
 8003ca2:	d024      	beq.n	8003cee <remoteBootloaderUpdate+0x6a>
 8003ca4:	4b32      	ldr	r3, [pc, #200]	; (8003d70 <remoteBootloaderUpdate+0xec>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	42ab      	cmp	r3, r5
 8003caa:	d05e      	beq.n	8003d6a <remoteBootloaderUpdate+0xe6>
	uint8_t myOutport =0, lastModule =0;
 8003cac:	2200      	movs	r2, #0
 8003cae:	4691      	mov	r9, r2
	if(src == myID){
 8003cb0:	4543      	cmp	r3, r8
 8003cb2:	d050      	beq.n	8003d56 <remoteBootloaderUpdate+0xd2>
	SetupPortForRemoteBootloaderUpdate(inport);
 8003cb4:	0030      	movs	r0, r6
 8003cb6:	f7ff fdbc 	bl	8003832 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003cba:	0020      	movs	r0, r4
 8003cbc:	f7ff fdb9 	bl	8003832 <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003cc0:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <remoteBootloaderUpdate+0xec>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	454b      	cmp	r3, r9
 8003cc6:	d03f      	beq.n	8003d48 <remoteBootloaderUpdate+0xc4>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003cc8:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <remoteBootloaderUpdate+0xec>)
 8003cca:	7819      	ldrb	r1, [r3, #0]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9303      	str	r3, [sp, #12]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	9302      	str	r3, [sp, #8]
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	3303      	adds	r3, #3
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	000b      	movs	r3, r1
 8003cdc:	0022      	movs	r2, r4
 8003cde:	0030      	movs	r0, r6
 8003ce0:	f005 fe62 	bl	80099a8 <StartScastDMAStream>
}
 8003ce4:	b005      	add	sp, #20
 8003ce6:	bcc0      	pop	{r6, r7}
 8003ce8:	46b9      	mov	r9, r7
 8003cea:	46b0      	mov	r8, r6
 8003cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(NumberOfHops(dst)== 1)
 8003cee:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <remoteBootloaderUpdate+0xf0>)
 8003cf0:	195b      	adds	r3, r3, r5
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	2a01      	cmp	r2, #1
 8003cf8:	d022      	beq.n	8003d40 <remoteBootloaderUpdate+0xbc>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003cfa:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <remoteBootloaderUpdate+0xf4>)
 8003cfc:	189b      	adds	r3, r3, r2
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	4699      	mov	r9, r3
	if(src == myID){
 8003d04:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <remoteBootloaderUpdate+0xec>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	4543      	cmp	r3, r8
 8003d0a:	d1d3      	bne.n	8003cb4 <remoteBootloaderUpdate+0x30>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003d0c:	f00a fd66 	bl	800e7dc <FreeRTOS_CLIGetOutputBuffer>
 8003d10:	4680      	mov	r8, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <remoteBootloaderUpdate+0xf8>)
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	002a      	movs	r2, r5
 8003d18:	f010 fc78 	bl	801460c <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003d1c:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <remoteBootloaderUpdate+0xfc>)
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	4640      	mov	r0, r8
 8003d22:	f010 fc93 	bl	801464c <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003d26:	4640      	mov	r0, r8
 8003d28:	f7fc f9f6 	bl	8000118 <strlen>
 8003d2c:	b282      	uxth	r2, r0
 8003d2e:	2332      	movs	r3, #50	; 0x32
 8003d30:	4641      	mov	r1, r8
 8003d32:	0030      	movs	r0, r6
 8003d34:	f00a fb2c 	bl	800e390 <writePxITMutex>
		Delay_ms(100);
 8003d38:	2064      	movs	r0, #100	; 0x64
 8003d3a:	f00c fdef 	bl	801091c <HAL_Delay>
 8003d3e:	e7b9      	b.n	8003cb4 <remoteBootloaderUpdate+0x30>
		lastModule = myID;
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <remoteBootloaderUpdate+0xec>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	4699      	mov	r9, r3
 8003d46:	e7dd      	b.n	8003d04 <remoteBootloaderUpdate+0x80>
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003d48:	0020      	movs	r0, r4
 8003d4a:	f00a fad3 	bl	800e2f4 <GetUart>
 8003d4e:	2101      	movs	r1, #1
 8003d50:	f00a fb6c 	bl	800e42c <SwapUartPins>
 8003d54:	e7b8      	b.n	8003cc8 <remoteBootloaderUpdate+0x44>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003d56:	f00a fd41 	bl	800e7dc <FreeRTOS_CLIGetOutputBuffer>
 8003d5a:	4680      	mov	r8, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <remoteBootloaderUpdate+0x100>)
 8003d5e:	6819      	ldr	r1, [r3, #0]
 8003d60:	003b      	movs	r3, r7
 8003d62:	002a      	movs	r2, r5
 8003d64:	f010 fc52 	bl	801460c <sprintf>
 8003d68:	e7d8      	b.n	8003d1c <remoteBootloaderUpdate+0x98>
		lastModule =myID;
 8003d6a:	46a9      	mov	r9, r5
		myOutport =outport;
 8003d6c:	003c      	movs	r4, r7
 8003d6e:	e79f      	b.n	8003cb0 <remoteBootloaderUpdate+0x2c>
 8003d70:	2000107e 	.word	0x2000107e
 8003d74:	2000111c 	.word	0x2000111c
 8003d78:	20006bac 	.word	0x20006bac
 8003d7c:	20000078 	.word	0x20000078
 8003d80:	20000080 	.word	0x20000080
 8003d84:	2000007c 	.word	0x2000007c

08003d88 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d8a:	46de      	mov	lr, fp
 8003d8c:	4657      	mov	r7, sl
 8003d8e:	464e      	mov	r6, r9
 8003d90:	4645      	mov	r5, r8
 8003d92:	b5e0      	push	{r5, r6, r7, lr}
 8003d94:	b083      	sub	sp, #12
 8003d96:	0007      	movs	r7, r0
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003d98:	4c59      	ldr	r4, [pc, #356]	; (8003f00 <DisplayTopology+0x178>)
 8003d9a:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <DisplayTopology+0x17c>)
 8003d9c:	0022      	movs	r2, r4
 8003d9e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003da0:	c223      	stmia	r2!, {r0, r1, r5}
 8003da2:	6819      	ldr	r1, [r3, #0]
 8003da4:	6011      	str	r1, [r2, #0]
 8003da6:	889b      	ldrh	r3, [r3, #4]
 8003da8:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003daa:	0020      	movs	r0, r4
 8003dac:	f7fc f9b4 	bl	8000118 <strlen>
 8003db0:	b282      	uxth	r2, r0
 8003db2:	2301      	movs	r3, #1
 8003db4:	425b      	negs	r3, r3
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	3333      	adds	r3, #51	; 0x33
 8003dba:	0021      	movs	r1, r4
 8003dbc:	0038      	movs	r0, r7
 8003dbe:	f00a fabb 	bl	800e338 <writePxMutex>
 8003dc2:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003dc4:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <DisplayTopology+0x180>)
 8003dc6:	4698      	mov	r8, r3
 8003dc8:	4d4d      	ldr	r5, [pc, #308]	; (8003f00 <DisplayTopology+0x178>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dca:	2601      	movs	r6, #1
 8003dcc:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003dce:	0022      	movs	r2, r4
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	0028      	movs	r0, r5
 8003dd4:	f010 fc1a 	bl	801460c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dd8:	0028      	movs	r0, r5
 8003dda:	f7fc f99d 	bl	8000118 <strlen>
 8003dde:	b282      	uxth	r2, r0
 8003de0:	9600      	str	r6, [sp, #0]
 8003de2:	2332      	movs	r3, #50	; 0x32
 8003de4:	0029      	movs	r1, r5
 8003de6:	0038      	movs	r0, r7
 8003de8:	f00a faa6 	bl	800e338 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003dec:	3401      	adds	r4, #1
 8003dee:	2c07      	cmp	r4, #7
 8003df0:	d1ed      	bne.n	8003dce <DisplayTopology+0x46>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003df2:	2301      	movs	r3, #1
 8003df4:	425b      	negs	r3, r3
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	3333      	adds	r3, #51	; 0x33
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	4943      	ldr	r1, [pc, #268]	; (8003f0c <DisplayTopology+0x184>)
 8003dfe:	0038      	movs	r0, r7
 8003e00:	f00a fa9a 	bl	800e338 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003e04:	4b42      	ldr	r3, [pc, #264]	; (8003f10 <DisplayTopology+0x188>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d069      	beq.n	8003ee0 <DisplayTopology+0x158>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003e10:	4b40      	ldr	r3, [pc, #256]	; (8003f14 <DisplayTopology+0x18c>)
 8003e12:	469a      	mov	sl, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e14:	2601      	movs	r6, #1
 8003e16:	4276      	negs	r6, r6
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003e18:	4b3f      	ldr	r3, [pc, #252]	; (8003f18 <DisplayTopology+0x190>)
 8003e1a:	4699      	mov	r9, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003e1c:	46b8      	mov	r8, r7
 8003e1e:	e02b      	b.n	8003e78 <DisplayTopology+0xf0>
 8003e20:	2307      	movs	r3, #7
 8003e22:	4013      	ands	r3, r2
 8003e24:	08d2      	lsrs	r2, r2, #3
 8003e26:	493d      	ldr	r1, [pc, #244]	; (8003f1c <DisplayTopology+0x194>)
 8003e28:	4835      	ldr	r0, [pc, #212]	; (8003f00 <DisplayTopology+0x178>)
 8003e2a:	f010 fbef 	bl	801460c <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e2e:	4d34      	ldr	r5, [pc, #208]	; (8003f00 <DisplayTopology+0x178>)
 8003e30:	0028      	movs	r0, r5
 8003e32:	f7fc f971 	bl	8000118 <strlen>
 8003e36:	b282      	uxth	r2, r0
 8003e38:	9600      	str	r6, [sp, #0]
 8003e3a:	2332      	movs	r3, #50	; 0x32
 8003e3c:	0029      	movs	r1, r5
 8003e3e:	4640      	mov	r0, r8
 8003e40:	f00a fa7a 	bl	800e338 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003e44:	3402      	adds	r4, #2
 8003e46:	42bc      	cmp	r4, r7
 8003e48:	d007      	beq.n	8003e5a <DisplayTopology+0xd2>
			if(!array[row][col])
 8003e4a:	8862      	ldrh	r2, [r4, #2]
 8003e4c:	2a00      	cmp	r2, #0
 8003e4e:	d1e7      	bne.n	8003e20 <DisplayTopology+0x98>
				sprintf(pcUserMessage,"%d\t",0);
 8003e50:	4933      	ldr	r1, [pc, #204]	; (8003f20 <DisplayTopology+0x198>)
 8003e52:	482b      	ldr	r0, [pc, #172]	; (8003f00 <DisplayTopology+0x178>)
 8003e54:	f010 fbda 	bl	801460c <sprintf>
 8003e58:	e7e9      	b.n	8003e2e <DisplayTopology+0xa6>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003e5a:	9600      	str	r6, [sp, #0]
 8003e5c:	2332      	movs	r3, #50	; 0x32
 8003e5e:	2202      	movs	r2, #2
 8003e60:	4930      	ldr	r1, [pc, #192]	; (8003f24 <DisplayTopology+0x19c>)
 8003e62:	4640      	mov	r0, r8
 8003e64:	f00a fa68 	bl	800e338 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003e68:	465b      	mov	r3, fp
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	469b      	mov	fp, r3
 8003e70:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <DisplayTopology+0x188>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	455b      	cmp	r3, fp
 8003e76:	d932      	bls.n	8003ede <DisplayTopology+0x156>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003e78:	465b      	mov	r3, fp
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	4c20      	ldr	r4, [pc, #128]	; (8003f00 <DisplayTopology+0x178>)
 8003e7e:	4651      	mov	r1, sl
 8003e80:	0020      	movs	r0, r4
 8003e82:	f010 fbc3 	bl	801460c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e86:	0020      	movs	r0, r4
 8003e88:	f7fc f946 	bl	8000118 <strlen>
 8003e8c:	b282      	uxth	r2, r0
 8003e8e:	9600      	str	r6, [sp, #0]
 8003e90:	2332      	movs	r3, #50	; 0x32
 8003e92:	0021      	movs	r1, r4
 8003e94:	4640      	mov	r0, r8
 8003e96:	f00a fa4f 	bl	800e338 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003e9a:	2716      	movs	r7, #22
 8003e9c:	465b      	mov	r3, fp
 8003e9e:	435f      	muls	r7, r3
 8003ea0:	464b      	mov	r3, r9
 8003ea2:	5afb      	ldrh	r3, [r7, r3]
 8003ea4:	0059      	lsls	r1, r3, #1
 8003ea6:	18c9      	adds	r1, r1, r3
 8003ea8:	0049      	lsls	r1, r1, #1
 8003eaa:	4b1f      	ldr	r3, [pc, #124]	; (8003f28 <DisplayTopology+0x1a0>)
 8003eac:	18c9      	adds	r1, r1, r3
 8003eae:	2205      	movs	r2, #5
 8003eb0:	0020      	movs	r0, r4
 8003eb2:	f010 fbff 	bl	80146b4 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003eb6:	9600      	str	r6, [sp, #0]
 8003eb8:	2332      	movs	r3, #50	; 0x32
 8003eba:	2205      	movs	r2, #5
 8003ebc:	0021      	movs	r1, r4
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	f00a fa3a 	bl	800e338 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003ec4:	9600      	str	r6, [sp, #0]
 8003ec6:	2332      	movs	r3, #50	; 0x32
 8003ec8:	2201      	movs	r2, #1
 8003eca:	4918      	ldr	r1, [pc, #96]	; (8003f2c <DisplayTopology+0x1a4>)
 8003ecc:	4640      	mov	r0, r8
 8003ece:	f00a fa33 	bl	800e338 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	18fc      	adds	r4, r7, r3
 8003ed6:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <DisplayTopology+0x1a8>)
 8003ed8:	469c      	mov	ip, r3
 8003eda:	4467      	add	r7, ip
 8003edc:	e7b5      	b.n	8003e4a <DisplayTopology+0xc2>
 8003ede:	4647      	mov	r7, r8
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	425b      	negs	r3, r3
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	3333      	adds	r3, #51	; 0x33
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4912      	ldr	r1, [pc, #72]	; (8003f34 <DisplayTopology+0x1ac>)
 8003eec:	0038      	movs	r0, r7
 8003eee:	f00a fa23 	bl	800e338 <writePxMutex>
}
 8003ef2:	b003      	add	sp, #12
 8003ef4:	bcf0      	pop	{r4, r5, r6, r7}
 8003ef6:	46bb      	mov	fp, r7
 8003ef8:	46b2      	mov	sl, r6
 8003efa:	46a9      	mov	r9, r5
 8003efc:	46a0      	mov	r8, r4
 8003efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f00:	200010b0 	.word	0x200010b0
 8003f04:	0801a4e8 	.word	0x0801a4e8
 8003f08:	0801a4fc 	.word	0x0801a4fc
 8003f0c:	0801b27c 	.word	0x0801b27c
 8003f10:	2000001c 	.word	0x2000001c
 8003f14:	0801a504 	.word	0x0801a504
 8003f18:	20000a80 	.word	0x20000a80
 8003f1c:	0801a514 	.word	0x0801a514
 8003f20:	0801a510 	.word	0x0801a510
 8003f24:	0801a620 	.word	0x0801a620
 8003f28:	0801a9b0 	.word	0x0801a9b0
 8003f2c:	0801a4f8 	.word	0x0801a4f8
 8003f30:	20000a8c 	.word	0x20000a8c
 8003f34:	0801bcb4 	.word	0x0801bcb4

08003f38 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3a:	46d6      	mov	lr, sl
 8003f3c:	464f      	mov	r7, r9
 8003f3e:	4646      	mov	r6, r8
 8003f40:	b5c0      	push	{r6, r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	4680      	mov	r8, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003f46:	4c31      	ldr	r4, [pc, #196]	; (800400c <DisplayPortsDir+0xd4>)
 8003f48:	4b31      	ldr	r3, [pc, #196]	; (8004010 <DisplayPortsDir+0xd8>)
 8003f4a:	0022      	movs	r2, r4
 8003f4c:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003f4e:	c223      	stmia	r2!, {r0, r1, r5}
 8003f50:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003f52:	c223      	stmia	r2!, {r0, r1, r5}
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f58:	0020      	movs	r0, r4
 8003f5a:	f7fc f8dd 	bl	8000118 <strlen>
 8003f5e:	b282      	uxth	r2, r0
 8003f60:	2301      	movs	r3, #1
 8003f62:	425b      	negs	r3, r3
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	3333      	adds	r3, #51	; 0x33
 8003f68:	0021      	movs	r1, r4
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	f00a f9e4 	bl	800e338 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003f70:	4b28      	ldr	r3, [pc, #160]	; (8004014 <DisplayPortsDir+0xdc>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2701      	movs	r7, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02c      	beq.n	8003fd4 <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f7a:	4e27      	ldr	r6, [pc, #156]	; (8004018 <DisplayPortsDir+0xe0>)
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003f7c:	4b27      	ldr	r3, [pc, #156]	; (800401c <DisplayPortsDir+0xe4>)
 8003f7e:	4699      	mov	r9, r3
 8003f80:	e024      	b.n	8003fcc <DisplayPortsDir+0x94>
 8003f82:	4b22      	ldr	r3, [pc, #136]	; (800400c <DisplayPortsDir+0xd4>)
 8003f84:	469a      	mov	sl, r3
 8003f86:	0023      	movs	r3, r4
 8003f88:	003a      	movs	r2, r7
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4650      	mov	r0, sl
 8003f8e:	f010 fb3d 	bl	801460c <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003f92:	4650      	mov	r0, sl
 8003f94:	f7fc f8c0 	bl	8000118 <strlen>
 8003f98:	b282      	uxth	r2, r0
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	425b      	negs	r3, r3
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	3333      	adds	r3, #51	; 0x33
 8003fa2:	4651      	mov	r1, sl
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	f00a f9c7 	bl	800e338 <writePxMutex>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003faa:	2c0a      	cmp	r4, #10
 8003fac:	d008      	beq.n	8003fc0 <DisplayPortsDir+0x88>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003fae:	0021      	movs	r1, r4
 8003fb0:	3401      	adds	r4, #1
 8003fb2:	5baa      	ldrh	r2, [r5, r6]
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	410b      	asrs	r3, r1
 8003fba:	4213      	tst	r3, r2
 8003fbc:	d0f5      	beq.n	8003faa <DisplayPortsDir+0x72>
 8003fbe:	e7e0      	b.n	8003f82 <DisplayPortsDir+0x4a>
	for(uint8_t i =1; i <= N; i++){
 8003fc0:	3701      	adds	r7, #1
 8003fc2:	b2ff      	uxtb	r7, r7
 8003fc4:	4b13      	ldr	r3, [pc, #76]	; (8004014 <DisplayPortsDir+0xdc>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	42bb      	cmp	r3, r7
 8003fca:	d303      	bcc.n	8003fd4 <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8003fcc:	2400      	movs	r4, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003fce:	1e7d      	subs	r5, r7, #1
 8003fd0:	006d      	lsls	r5, r5, #1
 8003fd2:	e7ec      	b.n	8003fae <DisplayPortsDir+0x76>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003fd4:	4c0d      	ldr	r4, [pc, #52]	; (800400c <DisplayPortsDir+0xd4>)
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <DisplayPortsDir+0xe8>)
 8003fd8:	0022      	movs	r2, r4
 8003fda:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003fdc:	c223      	stmia	r2!, {r0, r1, r5}
 8003fde:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003fe0:	c223      	stmia	r2!, {r0, r1, r5}
 8003fe2:	cb03      	ldmia	r3!, {r0, r1}
 8003fe4:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fe6:	0020      	movs	r0, r4
 8003fe8:	f7fc f896 	bl	8000118 <strlen>
 8003fec:	b282      	uxth	r2, r0
 8003fee:	2301      	movs	r3, #1
 8003ff0:	425b      	negs	r3, r3
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	3333      	adds	r3, #51	; 0x33
 8003ff6:	0021      	movs	r1, r4
 8003ff8:	4640      	mov	r0, r8
 8003ffa:	f00a f99d 	bl	800e338 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003ffe:	b002      	add	sp, #8
 8004000:	bce0      	pop	{r5, r6, r7}
 8004002:	46ba      	mov	sl, r7
 8004004:	46b1      	mov	r9, r6
 8004006:	46a8      	mov	r8, r5
 8004008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	200010b0 	.word	0x200010b0
 8004010:	0801a51c 	.word	0x0801a51c
 8004014:	2000001c 	.word	0x2000001c
 8004018:	20006f24 	.word	0x20006f24
 800401c:	0801a538 	.word	0x0801a538
 8004020:	0801a54c 	.word	0x0801a54c

08004024 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004026:	46d6      	mov	lr, sl
 8004028:	464f      	mov	r7, r9
 800402a:	4646      	mov	r6, r8
 800402c:	b5c0      	push	{r6, r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	4680      	mov	r8, r0
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004032:	f00a fbd3 	bl	800e7dc <FreeRTOS_CLIGetOutputBuffer>
 8004036:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8004038:	2300      	movs	r3, #0
 800403a:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 800403c:	4b91      	ldr	r3, [pc, #580]	; (8004284 <DisplayModuleStatus+0x260>)
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	4d91      	ldr	r5, [pc, #580]	; (8004288 <DisplayModuleStatus+0x264>)
 8004042:	4992      	ldr	r1, [pc, #584]	; (800428c <DisplayModuleStatus+0x268>)
 8004044:	0028      	movs	r0, r5
 8004046:	f010 fae1 	bl	801460c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800404a:	0029      	movs	r1, r5
 800404c:	0020      	movs	r0, r4
 800404e:	f010 fafd 	bl	801464c <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8004052:	4b8f      	ldr	r3, [pc, #572]	; (8004290 <DisplayModuleStatus+0x26c>)
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	498f      	ldr	r1, [pc, #572]	; (8004294 <DisplayModuleStatus+0x270>)
 8004058:	0028      	movs	r0, r5
 800405a:	f010 fad7 	bl	801460c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800405e:	0029      	movs	r1, r5
 8004060:	0020      	movs	r0, r4
 8004062:	f010 faf3 	bl	801464c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8004066:	2305      	movs	r3, #5
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	3b03      	subs	r3, #3
 800406c:	2200      	movs	r2, #0
 800406e:	498a      	ldr	r1, [pc, #552]	; (8004298 <DisplayModuleStatus+0x274>)
 8004070:	0028      	movs	r0, r5
 8004072:	f010 facb 	bl	801460c <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8004076:	0029      	movs	r1, r5
 8004078:	0020      	movs	r0, r4
 800407a:	f010 fae7 	bl	801464c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 800407e:	4a87      	ldr	r2, [pc, #540]	; (800429c <DisplayModuleStatus+0x278>)
 8004080:	4987      	ldr	r1, [pc, #540]	; (80042a0 <DisplayModuleStatus+0x27c>)
 8004082:	0028      	movs	r0, r5
 8004084:	f010 fac2 	bl	801460c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004088:	0029      	movs	r1, r5
 800408a:	0020      	movs	r0, r4
 800408c:	f010 fade 	bl	801464c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8004090:	4a84      	ldr	r2, [pc, #528]	; (80042a4 <DisplayModuleStatus+0x280>)
 8004092:	4985      	ldr	r1, [pc, #532]	; (80042a8 <DisplayModuleStatus+0x284>)
 8004094:	0028      	movs	r0, r5
 8004096:	f010 fab9 	bl	801460c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800409a:	0029      	movs	r1, r5
 800409c:	0020      	movs	r0, r4
 800409e:	f010 fad5 	bl	801464c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80040a2:	4b82      	ldr	r3, [pc, #520]	; (80042ac <DisplayModuleStatus+0x288>)
 80040a4:	002a      	movs	r2, r5
 80040a6:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040a8:	c243      	stmia	r2!, {r0, r1, r6}
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	6011      	str	r1, [r2, #0]
 80040ae:	8899      	ldrh	r1, [r3, #4]
 80040b0:	8091      	strh	r1, [r2, #4]
 80040b2:	799b      	ldrb	r3, [r3, #6]
 80040b4:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 80040b6:	0029      	movs	r1, r5
 80040b8:	0020      	movs	r0, r4
 80040ba:	f010 fac7 	bl	801464c <strcat>
 80040be:	2501      	movs	r5, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 80040c0:	4b7b      	ldr	r3, [pc, #492]	; (80042b0 <DisplayModuleStatus+0x28c>)
 80040c2:	4699      	mov	r9, r3
 80040c4:	4f70      	ldr	r7, [pc, #448]	; (8004288 <DisplayModuleStatus+0x264>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 80040c6:	4b7b      	ldr	r3, [pc, #492]	; (80042b4 <DisplayModuleStatus+0x290>)
 80040c8:	469a      	mov	sl, r3
 80040ca:	e00e      	b.n	80040ea <DisplayModuleStatus+0xc6>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 80040cc:	4b6e      	ldr	r3, [pc, #440]	; (8004288 <DisplayModuleStatus+0x264>)
 80040ce:	4a7a      	ldr	r2, [pc, #488]	; (80042b8 <DisplayModuleStatus+0x294>)
 80040d0:	6811      	ldr	r1, [r2, #0]
 80040d2:	6019      	str	r1, [r3, #0]
 80040d4:	8891      	ldrh	r1, [r2, #4]
 80040d6:	8099      	strh	r1, [r3, #4]
 80040d8:	7992      	ldrb	r2, [r2, #6]
 80040da:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 80040dc:	496a      	ldr	r1, [pc, #424]	; (8004288 <DisplayModuleStatus+0x264>)
 80040de:	0020      	movs	r0, r4
 80040e0:	f010 fab4 	bl	801464c <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80040e4:	3501      	adds	r5, #1
 80040e6:	2d07      	cmp	r5, #7
 80040e8:	d039      	beq.n	800415e <DisplayModuleStatus+0x13a>
		sprintf(pcUserMessage,"P%d: ",i);
 80040ea:	002a      	movs	r2, r5
 80040ec:	4649      	mov	r1, r9
 80040ee:	0038      	movs	r0, r7
 80040f0:	f010 fa8c 	bl	801460c <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 80040f4:	0039      	movs	r1, r7
 80040f6:	0020      	movs	r0, r4
 80040f8:	f010 faa8 	bl	801464c <strcat>
		switch(portStatus[i]){
 80040fc:	4653      	mov	r3, sl
 80040fe:	5ceb      	ldrb	r3, [r5, r3]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d8eb      	bhi.n	80040dc <DisplayModuleStatus+0xb8>
 8004104:	4653      	mov	r3, sl
 8004106:	5ceb      	ldrb	r3, [r5, r3]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4a6c      	ldr	r2, [pc, #432]	; (80042bc <DisplayModuleStatus+0x298>)
 800410c:	58d3      	ldr	r3, [r2, r3]
 800410e:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004110:	495d      	ldr	r1, [pc, #372]	; (8004288 <DisplayModuleStatus+0x264>)
 8004112:	4b6b      	ldr	r3, [pc, #428]	; (80042c0 <DisplayModuleStatus+0x29c>)
 8004114:	000a      	movs	r2, r1
 8004116:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004118:	c243      	stmia	r2!, {r0, r1, r6}
 800411a:	cb03      	ldmia	r3!, {r0, r1}
 800411c:	c203      	stmia	r2!, {r0, r1}
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	7013      	strb	r3, [r2, #0]
				break;
 8004122:	e7db      	b.n	80040dc <DisplayModuleStatus+0xb8>
				sprintf(pcUserMessage,"Streaming\n\r");
 8004124:	4a58      	ldr	r2, [pc, #352]	; (8004288 <DisplayModuleStatus+0x264>)
 8004126:	4b67      	ldr	r3, [pc, #412]	; (80042c4 <DisplayModuleStatus+0x2a0>)
 8004128:	cb43      	ldmia	r3!, {r0, r1, r6}
 800412a:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 800412c:	e7d6      	b.n	80040dc <DisplayModuleStatus+0xb8>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800412e:	4956      	ldr	r1, [pc, #344]	; (8004288 <DisplayModuleStatus+0x264>)
 8004130:	4b65      	ldr	r3, [pc, #404]	; (80042c8 <DisplayModuleStatus+0x2a4>)
 8004132:	000a      	movs	r2, r1
 8004134:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004136:	c243      	stmia	r2!, {r0, r1, r6}
 8004138:	cb43      	ldmia	r3!, {r0, r1, r6}
 800413a:	c243      	stmia	r2!, {r0, r1, r6}
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	8013      	strh	r3, [r2, #0]
				break;
 8004140:	e7cc      	b.n	80040dc <DisplayModuleStatus+0xb8>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004142:	4951      	ldr	r1, [pc, #324]	; (8004288 <DisplayModuleStatus+0x264>)
 8004144:	4b61      	ldr	r3, [pc, #388]	; (80042cc <DisplayModuleStatus+0x2a8>)
 8004146:	000a      	movs	r2, r1
 8004148:	cb43      	ldmia	r3!, {r0, r1, r6}
 800414a:	c243      	stmia	r2!, {r0, r1, r6}
 800414c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800414e:	c243      	stmia	r2!, {r0, r1, r6}
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	6011      	str	r1, [r2, #0]
 8004154:	8899      	ldrh	r1, [r3, #4]
 8004156:	8091      	strh	r1, [r2, #4]
 8004158:	799b      	ldrb	r3, [r3, #6]
 800415a:	7193      	strb	r3, [r2, #6]
				break;
 800415c:	e7be      	b.n	80040dc <DisplayModuleStatus+0xb8>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800415e:	494a      	ldr	r1, [pc, #296]	; (8004288 <DisplayModuleStatus+0x264>)
 8004160:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <DisplayModuleStatus+0x2ac>)
 8004162:	000a      	movs	r2, r1
 8004164:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004166:	c261      	stmia	r2!, {r0, r5, r6}
 8004168:	cb61      	ldmia	r3!, {r0, r5, r6}
 800416a:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800416c:	0020      	movs	r0, r4
 800416e:	f010 fa6d 	bl	801464c <strcat>
	for(char i =1; i <= 6; i++){
 8004172:	4e58      	ldr	r6, [pc, #352]	; (80042d4 <DisplayModuleStatus+0x2b0>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004174:	2701      	movs	r7, #1
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004176:	4d44      	ldr	r5, [pc, #272]	; (8004288 <DisplayModuleStatus+0x264>)
 8004178:	e00e      	b.n	8004198 <DisplayModuleStatus+0x174>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 800417a:	4b43      	ldr	r3, [pc, #268]	; (8004288 <DisplayModuleStatus+0x264>)
 800417c:	469a      	mov	sl, r3
 800417e:	003a      	movs	r2, r7
 8004180:	4955      	ldr	r1, [pc, #340]	; (80042d8 <DisplayModuleStatus+0x2b4>)
 8004182:	0018      	movs	r0, r3
 8004184:	f010 fa42 	bl	801460c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004188:	4651      	mov	r1, sl
 800418a:	0020      	movs	r0, r4
 800418c:	f010 fa5e 	bl	801464c <strcat>
	for(char i =1; i <= 6; i++){
 8004190:	3701      	adds	r7, #1
 8004192:	3638      	adds	r6, #56	; 0x38
 8004194:	2f07      	cmp	r7, #7
 8004196:	d017      	beq.n	80041c8 <DisplayModuleStatus+0x1a4>
		if(streamDMA[i - 1].Instance == 0){
 8004198:	6833      	ldr	r3, [r6, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ed      	beq.n	800417a <DisplayModuleStatus+0x156>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800419e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80041a0:	f008 f9fa 	bl	800c598 <GetPort>
 80041a4:	4682      	mov	sl, r0
 80041a6:	00bb      	lsls	r3, r7, #2
 80041a8:	4a4c      	ldr	r2, [pc, #304]	; (80042dc <DisplayModuleStatus+0x2b8>)
 80041aa:	58d0      	ldr	r0, [r2, r3]
 80041ac:	f008 f9f4 	bl	800c598 <GetPort>
 80041b0:	9000      	str	r0, [sp, #0]
 80041b2:	4653      	mov	r3, sl
 80041b4:	003a      	movs	r2, r7
 80041b6:	494a      	ldr	r1, [pc, #296]	; (80042e0 <DisplayModuleStatus+0x2bc>)
 80041b8:	0028      	movs	r0, r5
 80041ba:	f010 fa27 	bl	801460c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80041be:	0029      	movs	r1, r5
 80041c0:	0020      	movs	r0, r4
 80041c2:	f010 fa43 	bl	801464c <strcat>
 80041c6:	e7e3      	b.n	8004190 <DisplayModuleStatus+0x16c>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80041c8:	0020      	movs	r0, r4
 80041ca:	f7fb ffa5 	bl	8000118 <strlen>
 80041ce:	1820      	adds	r0, r4, r0
 80041d0:	2203      	movs	r2, #3
 80041d2:	4944      	ldr	r1, [pc, #272]	; (80042e4 <DisplayModuleStatus+0x2c0>)
 80041d4:	f010 f81c 	bl	8014210 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80041d8:	0020      	movs	r0, r4
 80041da:	f7fb ff9d 	bl	8000118 <strlen>
 80041de:	1820      	adds	r0, r4, r0
 80041e0:	221d      	movs	r2, #29
 80041e2:	4941      	ldr	r1, [pc, #260]	; (80042e8 <DisplayModuleStatus+0x2c4>)
 80041e4:	f010 f814 	bl	8014210 <memcpy>
	temp =strlen((char* )pcOutputString);
 80041e8:	0020      	movs	r0, r4
 80041ea:	f7fb ff95 	bl	8000118 <strlen>
 80041ee:	4681      	mov	r9, r0
 80041f0:	2500      	movs	r5, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80041f2:	4e3e      	ldr	r6, [pc, #248]	; (80042ec <DisplayModuleStatus+0x2c8>)
 80041f4:	4f23      	ldr	r7, [pc, #140]	; (8004284 <DisplayModuleStatus+0x260>)
 80041f6:	e00c      	b.n	8004212 <DisplayModuleStatus+0x1ee>
		{
			sprintf(pcUserMessage,"P%d ",p);
 80041f8:	4b23      	ldr	r3, [pc, #140]	; (8004288 <DisplayModuleStatus+0x264>)
 80041fa:	469a      	mov	sl, r3
 80041fc:	002a      	movs	r2, r5
 80041fe:	493c      	ldr	r1, [pc, #240]	; (80042f0 <DisplayModuleStatus+0x2cc>)
 8004200:	0018      	movs	r0, r3
 8004202:	f010 fa03 	bl	801460c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004206:	4651      	mov	r1, sl
 8004208:	0020      	movs	r0, r4
 800420a:	f010 fa1f 	bl	801464c <strcat>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800420e:	2d06      	cmp	r5, #6
 8004210:	d00b      	beq.n	800422a <DisplayModuleStatus+0x206>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004212:	0029      	movs	r1, r5
 8004214:	3501      	adds	r5, #1
 8004216:	783b      	ldrb	r3, [r7, #0]
 8004218:	3b01      	subs	r3, #1
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	5b9a      	ldrh	r2, [r3, r6]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	410b      	asrs	r3, r1
 8004224:	4213      	tst	r3, r2
 8004226:	d0f2      	beq.n	800420e <DisplayModuleStatus+0x1ea>
 8004228:	e7e6      	b.n	80041f8 <DisplayModuleStatus+0x1d4>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 800422a:	0020      	movs	r0, r4
 800422c:	f7fb ff74 	bl	8000118 <strlen>
 8004230:	464b      	mov	r3, r9
 8004232:	041e      	lsls	r6, r3, #16
 8004234:	0c36      	lsrs	r6, r6, #16
 8004236:	42b0      	cmp	r0, r6
 8004238:	d010      	beq.n	800425c <DisplayModuleStatus+0x238>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 800423a:	0020      	movs	r0, r4
 800423c:	f7fb ff6c 	bl	8000118 <strlen>
 8004240:	1820      	adds	r0, r4, r0
 8004242:	2203      	movs	r2, #3
 8004244:	4927      	ldr	r1, [pc, #156]	; (80042e4 <DisplayModuleStatus+0x2c0>)
 8004246:	f00f ffe3 	bl	8014210 <memcpy>
	
	/* Display output */
	if(port)
 800424a:	4643      	mov	r3, r8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <DisplayModuleStatus+0x244>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 8004250:	b002      	add	sp, #8
 8004252:	bce0      	pop	{r5, r6, r7}
 8004254:	46ba      	mov	sl, r7
 8004256:	46b1      	mov	r9, r6
 8004258:	46a8      	mov	r8, r5
 800425a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 800425c:	1820      	adds	r0, r4, r0
 800425e:	2205      	movs	r2, #5
 8004260:	4924      	ldr	r1, [pc, #144]	; (80042f4 <DisplayModuleStatus+0x2d0>)
 8004262:	f00f ffd5 	bl	8014210 <memcpy>
 8004266:	e7e8      	b.n	800423a <DisplayModuleStatus+0x216>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004268:	0020      	movs	r0, r4
 800426a:	f7fb ff55 	bl	8000118 <strlen>
 800426e:	b282      	uxth	r2, r0
 8004270:	2301      	movs	r3, #1
 8004272:	425b      	negs	r3, r3
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	3333      	adds	r3, #51	; 0x33
 8004278:	0021      	movs	r1, r4
 800427a:	4640      	mov	r0, r8
 800427c:	f00a f85c 	bl	800e338 <writePxMutex>
}
 8004280:	e7e6      	b.n	8004250 <DisplayModuleStatus+0x22c>
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	2000107e 	.word	0x2000107e
 8004288:	200010b0 	.word	0x200010b0
 800428c:	0801a56c 	.word	0x0801a56c
 8004290:	20000a7f 	.word	0x20000a7f
 8004294:	0801a588 	.word	0x0801a588
 8004298:	0801a5a4 	.word	0x0801a5a4
 800429c:	0801a5c4 	.word	0x0801a5c4
 80042a0:	0801a5d0 	.word	0x0801a5d0
 80042a4:	0801a5e8 	.word	0x0801a5e8
 80042a8:	0801a5f4 	.word	0x0801a5f4
 80042ac:	0801a610 	.word	0x0801a610
 80042b0:	0801a624 	.word	0x0801a624
 80042b4:	20001100 	.word	0x20001100
 80042b8:	0801a62c 	.word	0x0801a62c
 80042bc:	0801a728 	.word	0x0801a728
 80042c0:	0801a634 	.word	0x0801a634
 80042c4:	0801a64c 	.word	0x0801a64c
 80042c8:	0801a658 	.word	0x0801a658
 80042cc:	0801a674 	.word	0x0801a674
 80042d0:	0801a694 	.word	0x0801a694
 80042d4:	20001a78 	.word	0x20001a78
 80042d8:	0801a6ac 	.word	0x0801a6ac
 80042dc:	200014ac 	.word	0x200014ac
 80042e0:	0801a6c8 	.word	0x0801a6c8
 80042e4:	0801a620 	.word	0x0801a620
 80042e8:	0801a6f8 	.word	0x0801a6f8
 80042ec:	20006f24 	.word	0x20006f24
 80042f0:	0801a718 	.word	0x0801a718
 80042f4:	0801a720 	.word	0x0801a720

080042f8 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 80042f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fa:	46c6      	mov	lr, r8
 80042fc:	b500      	push	{lr}
 80042fe:	0006      	movs	r6, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004300:	4929      	ldr	r1, [pc, #164]	; (80043a8 <GetID+0xb0>)
 8004302:	f7fb feff 	bl	8000104 <strcmp>
 8004306:	2800      	cmp	r0, #0
 8004308:	d010      	beq.n	800432c <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 800430a:	4928      	ldr	r1, [pc, #160]	; (80043ac <GetID+0xb4>)
 800430c:	0030      	movs	r0, r6
 800430e:	f7fb fef9 	bl	8000104 <strcmp>
 8004312:	2800      	cmp	r0, #0
 8004314:	d045      	beq.n	80043a2 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004316:	7833      	ldrb	r3, [r6, #0]
 8004318:	4698      	mov	r8, r3
 800431a:	2b23      	cmp	r3, #35	; 0x23
 800431c:	d00b      	beq.n	8004336 <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <GetID+0xb8>)
 8004320:	781f      	ldrb	r7, [r3, #0]
 8004322:	2f00      	cmp	r7, #0
 8004324:	d02a      	beq.n	800437c <GetID+0x84>
 8004326:	4d23      	ldr	r5, [pc, #140]	; (80043b4 <GetID+0xbc>)
 8004328:	2400      	movs	r4, #0
 800432a:	e01c      	b.n	8004366 <GetID+0x6e>
		return myID;
 800432c:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <GetID+0xc0>)
 800432e:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004330:	bc80      	pop	{r7}
 8004332:	46b8      	mov	r8, r7
 8004334:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 8004336:	1c70      	adds	r0, r6, #1
 8004338:	f00f fd09 	bl	8013d4e <atol>
 800433c:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <GetID+0x52>
 8004342:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <GetID+0xb8>)
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d206      	bcs.n	8004358 <GetID+0x60>
		else if(id == myID)
 800434a:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <GetID+0xc0>)
 800434c:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 800434e:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004350:	429a      	cmp	r2, r3
 8004352:	d1ed      	bne.n	8004330 <GetID+0x38>
			return myID;
 8004354:	b218      	sxth	r0, r3
 8004356:	e7eb      	b.n	8004330 <GetID+0x38>
			return id;
 8004358:	b218      	sxth	r0, r3
 800435a:	e7e9      	b.n	8004330 <GetID+0x38>
		for(i =0; i < N; i++){
 800435c:	3401      	adds	r4, #1
 800435e:	b2e4      	uxtb	r4, r4
 8004360:	350a      	adds	r5, #10
 8004362:	42bc      	cmp	r4, r7
 8004364:	d00a      	beq.n	800437c <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004366:	0029      	movs	r1, r5
 8004368:	0030      	movs	r0, r6
 800436a:	f7fb fecb 	bl	8000104 <strcmp>
 800436e:	2800      	cmp	r0, #0
 8004370:	d1f4      	bne.n	800435c <GetID+0x64>
 8004372:	4643      	mov	r3, r8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f1      	beq.n	800435c <GetID+0x64>
				return (i);
 8004378:	b220      	sxth	r0, r4
 800437a:	e7d9      	b.n	8004330 <GetID+0x38>
 800437c:	4f0f      	ldr	r7, [pc, #60]	; (80043bc <GetID+0xc4>)
		for(i =0; i < N; i++){
 800437e:	2500      	movs	r5, #0
			if(!strcmp(string,groupAlias[i]))
 8004380:	0039      	movs	r1, r7
 8004382:	0030      	movs	r0, r6
 8004384:	f7fb febe 	bl	8000104 <strcmp>
 8004388:	2800      	cmp	r0, #0
 800438a:	d005      	beq.n	8004398 <GetID+0xa0>
		for(i =0; i < MaxNumOfGroups; i++){
 800438c:	3501      	adds	r5, #1
 800438e:	370a      	adds	r7, #10
 8004390:	2d0a      	cmp	r5, #10
 8004392:	d1f5      	bne.n	8004380 <GetID+0x88>
		return BOS_ERR_WrongName;
 8004394:	2064      	movs	r0, #100	; 0x64
 8004396:	e7cb      	b.n	8004330 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 8004398:	022c      	lsls	r4, r5, #8
 800439a:	20fe      	movs	r0, #254	; 0xfe
 800439c:	4320      	orrs	r0, r4
 800439e:	b200      	sxth	r0, r0
 80043a0:	e7c6      	b.n	8004330 <GetID+0x38>
		return BOS_BROADCAST;
 80043a2:	20ff      	movs	r0, #255	; 0xff
 80043a4:	e7c4      	b.n	8004330 <GetID+0x38>
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	0801a73c 	.word	0x0801a73c
 80043ac:	0801a740 	.word	0x0801a740
 80043b0:	2000001c 	.word	0x2000001c
 80043b4:	20000f70 	.word	0x20000f70
 80043b8:	2000107e 	.word	0x2000107e
 80043bc:	20000e64 	.word	0x20000e64

080043c0 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80043c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c2:	b083      	sub	sp, #12
 80043c4:	9001      	str	r0, [sp, #4]
 80043c6:	000e      	movs	r6, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
 80043c8:	4c28      	ldr	r4, [pc, #160]	; (800446c <NameModule+0xac>)
 80043ca:	0025      	movs	r5, r4
 80043cc:	3510      	adds	r5, #16
		if(!strcmp(alias,BOSkeywords[i]))
 80043ce:	0021      	movs	r1, r4
 80043d0:	0030      	movs	r0, r6
 80043d2:	f7fb fe97 	bl	8000104 <strcmp>
 80043d6:	2800      	cmp	r0, #0
 80043d8:	d03f      	beq.n	800445a <NameModule+0x9a>
	for(i =0; i < NumOfKeywords; i++){
 80043da:	3404      	adds	r4, #4
 80043dc:	42ac      	cmp	r4, r5
 80043de:	d1f6      	bne.n	80043ce <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <NameModule+0xb0>)
 80043e2:	781f      	ldrb	r7, [r3, #0]
 80043e4:	2f01      	cmp	r7, #1
 80043e6:	dd0b      	ble.n	8004400 <NameModule+0x40>
 80043e8:	4c22      	ldr	r4, [pc, #136]	; (8004474 <NameModule+0xb4>)
 80043ea:	2501      	movs	r5, #1
		if(!strcmp(alias,moduleAlias[i]))
 80043ec:	0021      	movs	r1, r4
 80043ee:	0030      	movs	r0, r6
 80043f0:	f7fb fe88 	bl	8000104 <strcmp>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d032      	beq.n	800445e <NameModule+0x9e>
	for(i =1; i < N; i++){
 80043f8:	3501      	adds	r5, #1
 80043fa:	340a      	adds	r4, #10
 80043fc:	42bd      	cmp	r5, r7
 80043fe:	dbf5      	blt.n	80043ec <NameModule+0x2c>
 8004400:	4c1d      	ldr	r4, [pc, #116]	; (8004478 <NameModule+0xb8>)
 8004402:	0025      	movs	r5, r4
 8004404:	3564      	adds	r5, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 8004406:	0021      	movs	r1, r4
 8004408:	0030      	movs	r0, r6
 800440a:	f7fb fe7b 	bl	8000104 <strcmp>
 800440e:	2800      	cmp	r0, #0
 8004410:	d028      	beq.n	8004464 <NameModule+0xa4>
	for(i =0; i < MaxNumOfGroups; i++){
 8004412:	340a      	adds	r4, #10
 8004414:	42ac      	cmp	r4, r5
 8004416:	d1f6      	bne.n	8004406 <NameModule+0x46>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004418:	4c18      	ldr	r4, [pc, #96]	; (800447c <NameModule+0xbc>)
 800441a:	4b19      	ldr	r3, [pc, #100]	; (8004480 <NameModule+0xc0>)
 800441c:	601c      	str	r4, [r3, #0]
 800441e:	001f      	movs	r7, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004424:	0028      	movs	r0, r5
 8004426:	f7fb fe77 	bl	8000118 <strlen>
 800442a:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800442c:	0029      	movs	r1, r5
 800442e:	0030      	movs	r0, r6
 8004430:	f010 f92f 	bl	8014692 <strncmp>
 8004434:	2800      	cmp	r0, #0
 8004436:	d017      	beq.n	8004468 <NameModule+0xa8>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004438:	6864      	ldr	r4, [r4, #4]
 800443a:	603c      	str	r4, [r7, #0]
 800443c:	2c00      	cmp	r4, #0
 800443e:	d1ef      	bne.n	8004420 <NameModule+0x60>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 8004440:	9b01      	ldr	r3, [sp, #4]
 8004442:	0098      	lsls	r0, r3, #2
 8004444:	469c      	mov	ip, r3
 8004446:	4460      	add	r0, ip
 8004448:	0040      	lsls	r0, r0, #1
 800444a:	4f0e      	ldr	r7, [pc, #56]	; (8004484 <NameModule+0xc4>)
 800444c:	19c0      	adds	r0, r0, r7
 800444e:	0031      	movs	r1, r6
 8004450:	f010 f917 	bl	8014682 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 8004454:	f7ff f8a0 	bl	8003598 <SaveEEalias>
	
	return result;
 8004458:	e002      	b.n	8004460 <NameModule+0xa0>
			return BOS_ERR_Keyword;
 800445a:	2006      	movs	r0, #6
 800445c:	e000      	b.n	8004460 <NameModule+0xa0>
			return BOS_ERR_ExistingAlias;
 800445e:	2007      	movs	r0, #7
}
 8004460:	b003      	add	sp, #12
 8004462:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8004464:	2007      	movs	r0, #7
 8004466:	e7fb      	b.n	8004460 <NameModule+0xa0>
			return BOS_ERR_ExistingCmd;
 8004468:	2008      	movs	r0, #8
 800446a:	e7f9      	b.n	8004460 <NameModule+0xa0>
 800446c:	0801a98c 	.word	0x0801a98c
 8004470:	2000001c 	.word	0x2000001c
 8004474:	20000f7a 	.word	0x20000f7a
 8004478:	20000e64 	.word	0x20000e64
 800447c:	20000098 	.word	0x20000098
 8004480:	20001108 	.word	0x20001108
 8004484:	20000f70 	.word	0x20000f70

08004488 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448a:	46ce      	mov	lr, r9
 800448c:	b500      	push	{lr}
 800448e:	b082      	sub	sp, #8
 8004490:	9001      	str	r0, [sp, #4]
 8004492:	000e      	movs	r6, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004494:	4f36      	ldr	r7, [pc, #216]	; (8004570 <AddModuleToGroup+0xe8>)
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004496:	003d      	movs	r5, r7
	for(i =0; i < MaxNumOfGroups; i++){
 8004498:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800449a:	0029      	movs	r1, r5
 800449c:	0030      	movs	r0, r6
 800449e:	f7fb fe31 	bl	8000104 <strcmp>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d047      	beq.n	8004536 <AddModuleToGroup+0xae>
	for(i =0; i < MaxNumOfGroups; i++){
 80044a6:	3401      	adds	r4, #1
 80044a8:	350a      	adds	r5, #10
 80044aa:	2c0a      	cmp	r4, #10
 80044ac:	d1f5      	bne.n	800449a <AddModuleToGroup+0x12>
 80044ae:	4c31      	ldr	r4, [pc, #196]	; (8004574 <AddModuleToGroup+0xec>)
 80044b0:	0025      	movs	r5, r4
 80044b2:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80044b4:	0021      	movs	r1, r4
 80044b6:	0030      	movs	r0, r6
 80044b8:	f7fb fe24 	bl	8000104 <strcmp>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d050      	beq.n	8004562 <AddModuleToGroup+0xda>
	for(j =0; j < NumOfKeywords; j++){
 80044c0:	3404      	adds	r4, #4
 80044c2:	42ac      	cmp	r4, r5
 80044c4:	d1f6      	bne.n	80044b4 <AddModuleToGroup+0x2c>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80044c6:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <AddModuleToGroup+0xf0>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	4699      	mov	r9, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	dd0b      	ble.n	80044e8 <AddModuleToGroup+0x60>
 80044d0:	4c2a      	ldr	r4, [pc, #168]	; (800457c <AddModuleToGroup+0xf4>)
 80044d2:	2501      	movs	r5, #1
		if(!strcmp(group,moduleAlias[j]))
 80044d4:	0021      	movs	r1, r4
 80044d6:	0030      	movs	r0, r6
 80044d8:	f7fb fe14 	bl	8000104 <strcmp>
 80044dc:	2800      	cmp	r0, #0
 80044de:	d042      	beq.n	8004566 <AddModuleToGroup+0xde>
	for(j =1; j < N; j++){
 80044e0:	3501      	adds	r5, #1
 80044e2:	340a      	adds	r4, #10
 80044e4:	454d      	cmp	r5, r9
 80044e6:	dbf5      	blt.n	80044d4 <AddModuleToGroup+0x4c>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80044e8:	4c25      	ldr	r4, [pc, #148]	; (8004580 <AddModuleToGroup+0xf8>)
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <AddModuleToGroup+0xfc>)
 80044ec:	601c      	str	r4, [r3, #0]
 80044ee:	4699      	mov	r9, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80044f4:	0028      	movs	r0, r5
 80044f6:	f7fb fe0f 	bl	8000118 <strlen>
 80044fa:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80044fc:	0029      	movs	r1, r5
 80044fe:	0030      	movs	r0, r6
 8004500:	f010 f8c7 	bl	8014692 <strncmp>
 8004504:	2800      	cmp	r0, #0
 8004506:	d030      	beq.n	800456a <AddModuleToGroup+0xe2>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004508:	6864      	ldr	r4, [r4, #4]
 800450a:	464b      	mov	r3, r9
 800450c:	601c      	str	r4, [r3, #0]
 800450e:	2c00      	cmp	r4, #0
 8004510:	d1ee      	bne.n	80044f0 <AddModuleToGroup+0x68>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 8004512:	783b      	ldrb	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01b      	beq.n	8004550 <AddModuleToGroup+0xc8>
	for(i =0; i < MaxNumOfGroups; i++){
 8004518:	3401      	adds	r4, #1
 800451a:	370a      	adds	r7, #10
 800451c:	2c0a      	cmp	r4, #10
 800451e:	d1f8      	bne.n	8004512 <AddModuleToGroup+0x8a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 8004520:	9f01      	ldr	r7, [sp, #4]
 8004522:	3f01      	subs	r7, #1
 8004524:	4918      	ldr	r1, [pc, #96]	; (8004588 <AddModuleToGroup+0x100>)
 8004526:	007f      	lsls	r7, r7, #1
 8004528:	2201      	movs	r2, #1
 800452a:	40a2      	lsls	r2, r4
 800452c:	5a7b      	ldrh	r3, [r7, r1]
 800452e:	4313      	orrs	r3, r2
 8004530:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 8004532:	2000      	movs	r0, #0
 8004534:	e008      	b.n	8004548 <AddModuleToGroup+0xc0>
			groupModules[module - 1] |=(0x0001 << i);
 8004536:	9f01      	ldr	r7, [sp, #4]
 8004538:	3f01      	subs	r7, #1
 800453a:	4913      	ldr	r1, [pc, #76]	; (8004588 <AddModuleToGroup+0x100>)
 800453c:	007f      	lsls	r7, r7, #1
 800453e:	2201      	movs	r2, #1
 8004540:	40a2      	lsls	r2, r4
 8004542:	5a7b      	ldrh	r3, [r7, r1]
 8004544:	4313      	orrs	r3, r2
 8004546:	527b      	strh	r3, [r7, r1]
}
 8004548:	b002      	add	sp, #8
 800454a:	bc80      	pop	{r7}
 800454c:	46b9      	mov	r9, r7
 800454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(groupAlias[i],group);
 8004550:	00a0      	lsls	r0, r4, #2
 8004552:	1900      	adds	r0, r0, r4
 8004554:	0040      	lsls	r0, r0, #1
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <AddModuleToGroup+0xe8>)
 8004558:	1818      	adds	r0, r3, r0
 800455a:	0031      	movs	r1, r6
 800455c:	f010 f891 	bl	8014682 <strcpy>
			break;
 8004560:	e7de      	b.n	8004520 <AddModuleToGroup+0x98>
			return BOS_ERR_Keyword;
 8004562:	2006      	movs	r0, #6
 8004564:	e7f0      	b.n	8004548 <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingAlias;
 8004566:	2007      	movs	r0, #7
 8004568:	e7ee      	b.n	8004548 <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingCmd;
 800456a:	2008      	movs	r0, #8
 800456c:	e7ec      	b.n	8004548 <AddModuleToGroup+0xc0>
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	20000e64 	.word	0x20000e64
 8004574:	0801a98c 	.word	0x0801a98c
 8004578:	2000001c 	.word	0x2000001c
 800457c:	20000f7a 	.word	0x20000f7a
 8004580:	20000098 	.word	0x20000098
 8004584:	2000110c 	.word	0x2000110c
 8004588:	20000ec8 	.word	0x20000ec8

0800458c <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	46de      	mov	lr, fp
 8004590:	4657      	mov	r7, sl
 8004592:	464e      	mov	r6, r9
 8004594:	4645      	mov	r5, r8
 8004596:	b5e0      	push	{r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 8004598:	4b23      	ldr	r3, [pc, #140]	; (8004628 <ReadPortsDir+0x9c>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	4699      	mov	r9, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d03a      	beq.n	8004618 <ReadPortsDir+0x8c>
 80045a2:	2501      	movs	r5, #1
	BOS_Status result =BOS_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	4699      	mov	r9, r3
		if(i != myID){
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <ReadPortsDir+0xa0>)
 80045aa:	4698      	mov	r8, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 80045ac:	469b      	mov	fp, r3
 80045ae:	4f20      	ldr	r7, [pc, #128]	; (8004630 <ReadPortsDir+0xa4>)
			if(responseStatus != BOS_OK){
 80045b0:	4b20      	ldr	r3, [pc, #128]	; (8004634 <ReadPortsDir+0xa8>)
 80045b2:	469a      	mov	sl, r3
 80045b4:	e01d      	b.n	80045f2 <ReadPortsDir+0x66>
 80045b6:	2400      	movs	r4, #0
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80045b8:	2680      	movs	r6, #128	; 0x80
 80045ba:	0236      	lsls	r6, r6, #8
 80045bc:	e002      	b.n	80045c4 <ReadPortsDir+0x38>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80045be:	3401      	adds	r4, #1
 80045c0:	2c06      	cmp	r4, #6
 80045c2:	d010      	beq.n	80045e6 <ReadPortsDir+0x5a>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80045c4:	1c60      	adds	r0, r4, #1
 80045c6:	b2c0      	uxtb	r0, r0
 80045c8:	f009 fe94 	bl	800e2f4 <GetUart>
 80045cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80045ce:	42b3      	cmp	r3, r6
 80045d0:	d1f5      	bne.n	80045be <ReadPortsDir+0x32>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 80045d2:	465b      	mov	r3, fp
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	5bda      	ldrh	r2, [r3, r7]
 80045dc:	0031      	movs	r1, r6
 80045de:	4121      	asrs	r1, r4
 80045e0:	430a      	orrs	r2, r1
 80045e2:	53da      	strh	r2, [r3, r7]
 80045e4:	e7eb      	b.n	80045be <ReadPortsDir+0x32>
	for(uint8_t i =1; i <= N; i++){
 80045e6:	3501      	adds	r5, #1
 80045e8:	b2ed      	uxtb	r5, r5
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <ReadPortsDir+0x9c>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	42ab      	cmp	r3, r5
 80045f0:	d312      	bcc.n	8004618 <ReadPortsDir+0x8c>
		if(i != myID){
 80045f2:	4643      	mov	r3, r8
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	42ab      	cmp	r3, r5
 80045f8:	d0dd      	beq.n	80045b6 <ReadPortsDir+0x2a>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 80045fa:	2200      	movs	r2, #0
 80045fc:	2113      	movs	r1, #19
 80045fe:	0028      	movs	r0, r5
 8004600:	f005 f9ac 	bl	800995c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004604:	2032      	movs	r0, #50	; 0x32
 8004606:	f009 fc8f 	bl	800df28 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 800460a:	4653      	mov	r3, sl
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0e9      	beq.n	80045e6 <ReadPortsDir+0x5a>
				result =BOS_ERR_NoResponse;
 8004612:	2302      	movs	r3, #2
 8004614:	4699      	mov	r9, r3
 8004616:	e7e6      	b.n	80045e6 <ReadPortsDir+0x5a>
			}
		}
	}
	
	return result;
}
 8004618:	4648      	mov	r0, r9
 800461a:	bcf0      	pop	{r4, r5, r6, r7}
 800461c:	46bb      	mov	fp, r7
 800461e:	46b2      	mov	sl, r6
 8004620:	46a9      	mov	r9, r5
 8004622:	46a0      	mov	r8, r4
 8004624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	2000001c 	.word	0x2000001c
 800462c:	2000107e 	.word	0x2000107e
 8004630:	20006f24 	.word	0x20006f24
 8004634:	20001118 	.word	0x20001118

08004638 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	2400      	movs	r4, #0
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800463c:	4f0f      	ldr	r7, [pc, #60]	; (800467c <UpdateMyPortsDir+0x44>)
 800463e:	4e10      	ldr	r6, [pc, #64]	; (8004680 <UpdateMyPortsDir+0x48>)
 8004640:	2580      	movs	r5, #128	; 0x80
 8004642:	022d      	lsls	r5, r5, #8
 8004644:	e007      	b.n	8004656 <UpdateMyPortsDir+0x1e>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004646:	f009 fe55 	bl	800e2f4 <GetUart>
 800464a:	2101      	movs	r1, #1
 800464c:	f009 feee 	bl	800e42c <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004650:	3401      	adds	r4, #1
 8004652:	2c06      	cmp	r4, #6
 8004654:	d00f      	beq.n	8004676 <UpdateMyPortsDir+0x3e>
 8004656:	1c60      	adds	r0, r4, #1
 8004658:	b2c0      	uxtb	r0, r0
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800465a:	7833      	ldrb	r3, [r6, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	5bdb      	ldrh	r3, [r3, r7]
 8004662:	002a      	movs	r2, r5
 8004664:	4122      	asrs	r2, r4
 8004666:	421a      	tst	r2, r3
 8004668:	d1ed      	bne.n	8004646 <UpdateMyPortsDir+0xe>
			SwapUartPins(GetUart(p),NORMAL);
 800466a:	f009 fe43 	bl	800e2f4 <GetUart>
 800466e:	2100      	movs	r1, #0
 8004670:	f009 fedc 	bl	800e42c <SwapUartPins>
 8004674:	e7ec      	b.n	8004650 <UpdateMyPortsDir+0x18>
		}
	}
	
	return result;
}
 8004676:	2000      	movs	r0, #0
 8004678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	20006f24 	.word	0x20006f24
 8004680:	2000107e 	.word	0x2000107e

08004684 <BOS_Init>:
void BOS_Init(void){
 8004684:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8004686:	f009 fb07 	bl	800dc98 <RTC_Init>
	GetTimeDate();
 800468a:	f009 fba5 	bl	800ddd8 <GetTimeDate>
	EE_Init();
 800468e:	f003 faab 	bl	8007be8 <EE_Init>
	GPIO_Init();
 8004692:	f009 f859 	bl	800d748 <GPIO_Init>
	DMA_Init();
 8004696:	f007 ffd1 	bl	800c63c <DMA_Init>
	TIM_USEC_Init();
 800469a:	f009 fbd1 	bl	800de40 <TIM_USEC_Init>
	CRC_Init();
 800469e:	f008 ffff 	bl	800d6a0 <CRC_Init>
	TIM_MSEC_Init();
 80046a2:	f009 fbff 	bl	800dea4 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80046a6:	f009 f905 	bl	800d8b4 <IsFactoryReset>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d11a      	bne.n	80046e4 <BOS_Init+0x60>
	if(IsLowerCLIbaud()){
 80046ae:	f7ff f871 	bl	8003794 <IsLowerCLIbaud>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d021      	beq.n	80046fa <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 80046b6:	4b36      	ldr	r3, [pc, #216]	; (8004790 <BOS_Init+0x10c>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80046bc:	2032      	movs	r0, #50	; 0x32
 80046be:	f009 fc33 	bl	800df28 <StartMilliDelay>
		Module_Peripheral_Init();
 80046c2:	f007 fe6b 	bl	800c39c <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80046c6:	4b33      	ldr	r3, [pc, #204]	; (8004794 <BOS_Init+0x110>)
 80046c8:	22e1      	movs	r2, #225	; 0xe1
 80046ca:	0252      	lsls	r2, r2, #9
 80046cc:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80046ce:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 80046d0:	001d      	movs	r5, r3
 80046d2:	68a9      	ldr	r1, [r5, #8]
 80046d4:	0020      	movs	r0, r4
 80046d6:	f009 fe9f 	bl	800e418 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80046da:	3401      	adds	r4, #1
 80046dc:	b2e4      	uxtb	r4, r4
 80046de:	2c07      	cmp	r4, #7
 80046e0:	d1f7      	bne.n	80046d2 <BOS_Init+0x4e>
 80046e2:	e00f      	b.n	8004704 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 80046e4:	f7ff f842 	bl	800376c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046e8:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046ec:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <BOS_Init+0x114>)
 80046ee:	4a2b      	ldr	r2, [pc, #172]	; (800479c <BOS_Init+0x118>)
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	e7fd      	b.n	80046f6 <BOS_Init+0x72>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80046fa:	2032      	movs	r0, #50	; 0x32
 80046fc:	f009 fc14 	bl	800df28 <StartMilliDelay>
		Module_Peripheral_Init();
 8004700:	f007 fe4c 	bl	800c39c <Module_Peripheral_Init>
	LoadEEvars();
 8004704:	f7fe ff14 	bl	8003530 <LoadEEvars>
	UpdateMyPortsDir();
 8004708:	f7ff ff96 	bl	8004638 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 800470c:	f008 fc04 	bl	800cf18 <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 8004710:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <BOS_Init+0x11c>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d117      	bne.n	8004748 <BOS_Init+0xc4>
		IND_ON();
 8004718:	2580      	movs	r5, #128	; 0x80
 800471a:	012d      	lsls	r5, r5, #4
 800471c:	2490      	movs	r4, #144	; 0x90
 800471e:	05e4      	lsls	r4, r4, #23
 8004720:	2201      	movs	r2, #1
 8004722:	0029      	movs	r1, r5
 8004724:	0020      	movs	r0, r4
 8004726:	f00d fd81 	bl	801222c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 800472a:	20fa      	movs	r0, #250	; 0xfa
 800472c:	0040      	lsls	r0, r0, #1
 800472e:	f009 fbfb 	bl	800df28 <StartMilliDelay>
 8004732:	2200      	movs	r2, #0
 8004734:	0029      	movs	r1, r5
 8004736:	0020      	movs	r0, r4
 8004738:	f00d fd78 	bl	801222c <HAL_GPIO_WritePin>
	ResetUartORE();
 800473c:	f003 f88e 	bl	800785c <ResetUartORE>
	BOS_initialized =1;
 8004740:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <BOS_Init+0x120>)
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
}
 8004746:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 8004748:	2580      	movs	r5, #128	; 0x80
 800474a:	012d      	lsls	r5, r5, #4
 800474c:	2490      	movs	r4, #144	; 0x90
 800474e:	05e4      	lsls	r4, r4, #23
 8004750:	2201      	movs	r2, #1
 8004752:	0029      	movs	r1, r5
 8004754:	0020      	movs	r0, r4
 8004756:	f00d fd69 	bl	801222c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800475a:	20fa      	movs	r0, #250	; 0xfa
 800475c:	0040      	lsls	r0, r0, #1
 800475e:	f009 fbe3 	bl	800df28 <StartMilliDelay>
		IND_OFF();
 8004762:	2200      	movs	r2, #0
 8004764:	0029      	movs	r1, r5
 8004766:	0020      	movs	r0, r4
 8004768:	f00d fd60 	bl	801222c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800476c:	2064      	movs	r0, #100	; 0x64
 800476e:	f009 fbdb 	bl	800df28 <StartMilliDelay>
		IND_ON();
 8004772:	2201      	movs	r2, #1
 8004774:	0029      	movs	r1, r5
 8004776:	0020      	movs	r0, r4
 8004778:	f00d fd58 	bl	801222c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800477c:	2064      	movs	r0, #100	; 0x64
 800477e:	f009 fbd3 	bl	800df28 <StartMilliDelay>
		IND_OFF();
 8004782:	2200      	movs	r2, #0
 8004784:	0029      	movs	r1, r5
 8004786:	0020      	movs	r0, r4
 8004788:	f00d fd50 	bl	801222c <HAL_GPIO_WritePin>
 800478c:	e7d6      	b.n	800473c <BOS_Init+0xb8>
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	20000a7e 	.word	0x20000a7e
 8004794:	20006aa8 	.word	0x20006aa8
 8004798:	e000ed00 	.word	0xe000ed00
 800479c:	05fa0004 	.word	0x05fa0004
 80047a0:	2000107e 	.word	0x2000107e
 80047a4:	20000a7d 	.word	0x20000a7d

080047a8 <Module_Init>:
void Module_Init(void){
 80047a8:	b510      	push	{r4, lr}
	HAL_Init();
 80047aa:	f00c f899 	bl	80108e0 <HAL_Init>
	SystemClock_Config();
 80047ae:	f006 ffd7 	bl	800b760 <SystemClock_Config>
	BOS_Init();
 80047b2:	f7ff ff67 	bl	8004684 <BOS_Init>
	MX_FREERTOS_Init();
 80047b6:	f003 fc43 	bl	8008040 <MX_FREERTOS_Init>
	osKernelStart();
 80047ba:	f009 fee7 	bl	800e58c <osKernelStart>
}
 80047be:	bd10      	pop	{r4, pc}

080047c0 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 80047c0:	b510      	push	{r4, lr}
 80047c2:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 80047c4:	201e      	movs	r0, #30
 80047c6:	f00f faed 	bl	8013da4 <malloc>
 80047ca:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 80047cc:	221e      	movs	r2, #30
 80047ce:	2100      	movs	r1, #0
 80047d0:	f00f fd27 	bl	8014222 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 80047d4:	4908      	ldr	r1, [pc, #32]	; (80047f8 <GetDateString+0x38>)
 80047d6:	7d8b      	ldrb	r3, [r1, #22]
 80047d8:	7d0a      	ldrb	r2, [r1, #20]
 80047da:	3a01      	subs	r2, #1
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	4807      	ldr	r0, [pc, #28]	; (80047fc <GetDateString+0x3c>)
 80047e0:	5812      	ldr	r2, [r2, r0]
 80047e2:	8b08      	ldrh	r0, [r1, #24]
 80047e4:	9001      	str	r0, [sp, #4]
 80047e6:	7d49      	ldrb	r1, [r1, #21]
 80047e8:	9100      	str	r1, [sp, #0]
 80047ea:	4905      	ldr	r1, [pc, #20]	; (8004800 <GetDateString+0x40>)
 80047ec:	0020      	movs	r0, r4
 80047ee:	f00f ff0d 	bl	801460c <sprintf>
	return buffer;
}
 80047f2:	0020      	movs	r0, r4
 80047f4:	b002      	add	sp, #8
 80047f6:	bd10      	pop	{r4, pc}
 80047f8:	20006aa8 	.word	0x20006aa8
 80047fc:	0801aa48 	.word	0x0801aa48
 8004800:	0801a99c 	.word	0x0801a99c

08004804 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004804:	b500      	push	{lr}
 8004806:	b085      	sub	sp, #20
 8004808:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <Bridge+0x24>)
 800480c:	7819      	ldrb	r1, [r3, #0]
 800480e:	2301      	movs	r3, #1
 8004810:	9303      	str	r3, [sp, #12]
 8004812:	3b02      	subs	r3, #2
 8004814:	9302      	str	r3, [sp, #8]
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	3303      	adds	r3, #3
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	000b      	movs	r3, r1
 800481e:	f005 f8c3 	bl	80099a8 <StartScastDMAStream>
}
 8004822:	b005      	add	sp, #20
 8004824:	bd00      	pop	{pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	2000107e 	.word	0x2000107e

0800482c <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800482c:	b530      	push	{r4, r5, lr}
 800482e:	b087      	sub	sp, #28
 8004830:	0005      	movs	r5, r0
 8004832:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004834:	2300      	movs	r3, #0
 8004836:	9304      	str	r3, [sp, #16]
 8004838:	9303      	str	r3, [sp, #12]
 800483a:	9302      	str	r3, [sp, #8]
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2200      	movs	r2, #0
 8004842:	2100      	movs	r1, #0
 8004844:	2000      	movs	r0, #0
 8004846:	f7fe fee9 	bl	800361c <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800484a:	1e6a      	subs	r2, r5, #1
 800484c:	00d3      	lsls	r3, r2, #3
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <Unbridge+0x78>)
 8004854:	589b      	ldr	r3, [r3, r2]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d014      	beq.n	8004884 <Unbridge+0x58>
 800485a:	1e62      	subs	r2, r4, #1
 800485c:	00d3      	lsls	r3, r2, #3
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <Unbridge+0x78>)
 8004864:	589b      	ldr	r3, [r3, r2]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 800486a:	0028      	movs	r0, r5
 800486c:	f002 ff66 	bl	800773c <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004870:	2000      	movs	r0, #0
 8004872:	e013      	b.n	800489c <Unbridge+0x70>
		SwitchStreamDMAToMsg(port1);
 8004874:	0028      	movs	r0, r5
 8004876:	f002 ff61 	bl	800773c <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800487a:	0020      	movs	r0, r4
 800487c:	f002 ff5e 	bl	800773c <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004880:	2000      	movs	r0, #0
 8004882:	e00b      	b.n	800489c <Unbridge+0x70>
	}
	else if(streamDMA[port2 - 1].Instance != 0){
 8004884:	1e62      	subs	r2, r4, #1
 8004886:	00d3      	lsls	r3, r2, #3
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4a05      	ldr	r2, [pc, #20]	; (80048a4 <Unbridge+0x78>)
 800488e:	589b      	ldr	r3, [r3, r2]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 8004894:	0020      	movs	r0, r4
 8004896:	f002 ff51 	bl	800773c <SwitchStreamDMAToMsg>
		return BOS_OK;
 800489a:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 800489c:	b007      	add	sp, #28
 800489e:	bd30      	pop	{r4, r5, pc}
		return BOS_ERR_WrongValue;
 80048a0:	2068      	movs	r0, #104	; 0x68
 80048a2:	e7fb      	b.n	800489c <Unbridge+0x70>
 80048a4:	20001a78 	.word	0x20001a78

080048a8 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 80048a8:	b530      	push	{r4, r5, lr}
	for(int i =0; string[i]; i++){
 80048aa:	7803      	ldrb	r3, [r0, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00f      	beq.n	80048d0 <StringToLowerCase+0x28>
		string[i] =tolower(string[i]);
 80048b0:	4d08      	ldr	r5, [pc, #32]	; (80048d4 <StringToLowerCase+0x2c>)
 80048b2:	2403      	movs	r4, #3
 80048b4:	e004      	b.n	80048c0 <StringToLowerCase+0x18>
 80048b6:	7001      	strb	r1, [r0, #0]
	for(int i =0; string[i]; i++){
 80048b8:	3001      	adds	r0, #1
 80048ba:	7803      	ldrb	r3, [r0, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <StringToLowerCase+0x28>
		string[i] =tolower(string[i]);
 80048c0:	5cea      	ldrb	r2, [r5, r3]
 80048c2:	4022      	ands	r2, r4
 80048c4:	0019      	movs	r1, r3
 80048c6:	2a01      	cmp	r2, #1
 80048c8:	d1f5      	bne.n	80048b6 <StringToLowerCase+0xe>
 80048ca:	3320      	adds	r3, #32
 80048cc:	0019      	movs	r1, r3
 80048ce:	e7f2      	b.n	80048b6 <StringToLowerCase+0xe>
	}
}
 80048d0:	bd30      	pop	{r4, r5, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	0801d905 	.word	0x0801d905

080048d8 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80048d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048da:	46ce      	mov	lr, r9
 80048dc:	4647      	mov	r7, r8
 80048de:	b580      	push	{r7, lr}
 80048e0:	b089      	sub	sp, #36	; 0x24
 80048e2:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048e4:	4bde      	ldr	r3, [pc, #888]	; (8004c60 <ParseSnippetCondition+0x388>)
 80048e6:	781c      	ldrb	r4, [r3, #0]
 80048e8:	2c05      	cmp	r4, #5
 80048ea:	d100      	bne.n	80048ee <ParseSnippetCondition+0x16>
 80048ec:	e21a      	b.n	8004d24 <ParseSnippetCondition+0x44c>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80048ee:	49dd      	ldr	r1, [pc, #884]	; (8004c64 <ParseSnippetCondition+0x38c>)
 80048f0:	00a3      	lsls	r3, r4, #2
 80048f2:	191a      	adds	r2, r3, r4
 80048f4:	0092      	lsls	r2, r2, #2
 80048f6:	2000      	movs	r0, #0
 80048f8:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 80048fa:	191a      	adds	r2, r3, r4
 80048fc:	0092      	lsls	r2, r2, #2
 80048fe:	188a      	adds	r2, r1, r2
 8004900:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004902:	1918      	adds	r0, r3, r4
 8004904:	0080      	lsls	r0, r0, #2
 8004906:	3002      	adds	r0, #2
 8004908:	1840      	adds	r0, r0, r1
 800490a:	2204      	movs	r2, #4
 800490c:	2100      	movs	r1, #0
 800490e:	f00f fc88 	bl	8014222 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004912:	782b      	ldrb	r3, [r5, #0]
 8004914:	2b62      	cmp	r3, #98	; 0x62
 8004916:	d102      	bne.n	800491e <ParseSnippetCondition+0x46>
 8004918:	78ab      	ldrb	r3, [r5, #2]
 800491a:	2b2e      	cmp	r3, #46	; 0x2e
 800491c:	d032      	beq.n	8004984 <ParseSnippetCondition+0xac>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 800491e:	4cd2      	ldr	r4, [pc, #840]	; (8004c68 <ParseSnippetCondition+0x390>)
 8004920:	0029      	movs	r1, r5
 8004922:	0020      	movs	r0, r4
 8004924:	f00f fead 	bl	8014682 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004928:	4dd0      	ldr	r5, [pc, #832]	; (8004c6c <ParseSnippetCondition+0x394>)
 800492a:	0029      	movs	r1, r5
 800492c:	0020      	movs	r0, r4
 800492e:	f010 fd1f 	bl	8015370 <strtok>
 8004932:	0004      	movs	r4, r0
		secondPart =strtok( NULL," ");
 8004934:	0029      	movs	r1, r5
 8004936:	2000      	movs	r0, #0
 8004938:	f010 fd1a 	bl	8015370 <strtok>
 800493c:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 800493e:	0029      	movs	r1, r5
 8004940:	2000      	movs	r0, #0
 8004942:	f010 fd15 	bl	8015370 <strtok>
 8004946:	0005      	movs	r5, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004948:	2c00      	cmp	r4, #0
 800494a:	d100      	bne.n	800494e <ParseSnippetCondition+0x76>
 800494c:	e1ec      	b.n	8004d28 <ParseSnippetCondition+0x450>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 800494e:	0020      	movs	r0, r4
 8004950:	f7fe ff84 	bl	800385c <IsModuleParameter>
 8004954:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004956:	d100      	bne.n	800495a <ParseSnippetCondition+0x82>
 8004958:	e194      	b.n	8004c84 <ParseSnippetCondition+0x3ac>
 800495a:	2e00      	cmp	r6, #0
 800495c:	d000      	beq.n	8004960 <ParseSnippetCondition+0x88>
 800495e:	e193      	b.n	8004c88 <ParseSnippetCondition+0x3b0>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 8004960:	3667      	adds	r6, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004962:	2d00      	cmp	r5, #0
 8004964:	d000      	beq.n	8004968 <ParseSnippetCondition+0x90>
 8004966:	e1ba      	b.n	8004cde <ParseSnippetCondition+0x406>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004968:	4dbd      	ldr	r5, [pc, #756]	; (8004c60 <ParseSnippetCondition+0x388>)
 800496a:	782b      	ldrb	r3, [r5, #0]
 800496c:	49bd      	ldr	r1, [pc, #756]	; (8004c64 <ParseSnippetCondition+0x38c>)
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	18d0      	adds	r0, r2, r3
 8004972:	0080      	lsls	r0, r0, #2
 8004974:	3e65      	subs	r6, #101	; 0x65
 8004976:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004978:	180a      	adds	r2, r1, r0
 800497a:	70d4      	strb	r4, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800497c:	3301      	adds	r3, #1
 800497e:	702b      	strb	r3, [r5, #0]
				return BOS_OK;
 8004980:	2600      	movs	r6, #0
 8004982:	e1ac      	b.n	8004cde <ParseSnippetCondition+0x406>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004984:	786f      	ldrb	r7, [r5, #1]
 8004986:	3f30      	subs	r7, #48	; 0x30
 8004988:	b2ff      	uxtb	r7, r7
	BOS_Status status =BOS_OK;
 800498a:	2600      	movs	r6, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 800498c:	2f06      	cmp	r7, #6
 800498e:	d900      	bls.n	8004992 <ParseSnippetCondition+0xba>
 8004990:	e1a5      	b.n	8004cde <ParseSnippetCondition+0x406>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004992:	4ab4      	ldr	r2, [pc, #720]	; (8004c64 <ParseSnippetCondition+0x38c>)
 8004994:	00a3      	lsls	r3, r4, #2
 8004996:	1919      	adds	r1, r3, r4
 8004998:	0089      	lsls	r1, r1, #2
 800499a:	2001      	movs	r0, #1
 800499c:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 800499e:	1853      	adds	r3, r2, r1
 80049a0:	2200      	movs	r2, #0
 80049a2:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80049a4:	709f      	strb	r7, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80049a6:	1cee      	adds	r6, r5, #3
 80049a8:	3207      	adds	r2, #7
 80049aa:	49b1      	ldr	r1, [pc, #708]	; (8004c70 <ParseSnippetCondition+0x398>)
 80049ac:	0030      	movs	r0, r6
 80049ae:	f00f fe70 	bl	8014692 <strncmp>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d124      	bne.n	8004a00 <ParseSnippetCondition+0x128>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 80049b6:	00a3      	lsls	r3, r4, #2
 80049b8:	191c      	adds	r4, r3, r4
 80049ba:	00a4      	lsls	r4, r4, #2
 80049bc:	4ba9      	ldr	r3, [pc, #676]	; (8004c64 <ParseSnippetCondition+0x38c>)
 80049be:	191c      	adds	r4, r3, r4
 80049c0:	2305      	movs	r3, #5
 80049c2:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 80049c4:	00fa      	lsls	r2, r7, #3
 80049c6:	19d2      	adds	r2, r2, r7
 80049c8:	4baa      	ldr	r3, [pc, #680]	; (8004c74 <ParseSnippetCondition+0x39c>)
 80049ca:	189b      	adds	r3, r3, r2
 80049cc:	7a1b      	ldrb	r3, [r3, #8]
 80049ce:	2201      	movs	r2, #1
 80049d0:	0016      	movs	r6, r2
 80049d2:	401e      	ands	r6, r3
 80049d4:	421a      	tst	r2, r3
 80049d6:	d005      	beq.n	80049e4 <ParseSnippetCondition+0x10c>
				status =BOS_OK;
 80049d8:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80049da:	4aa1      	ldr	r2, [pc, #644]	; (8004c60 <ParseSnippetCondition+0x388>)
 80049dc:	7813      	ldrb	r3, [r2, #0]
 80049de:	3301      	adds	r3, #1
 80049e0:	7013      	strb	r3, [r2, #0]
 80049e2:	e17c      	b.n	8004cde <ParseSnippetCondition+0x406>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049e4:	2301      	movs	r3, #1
 80049e6:	9305      	str	r3, [sp, #20]
 80049e8:	2300      	movs	r3, #0
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	9303      	str	r3, [sp, #12]
 80049ee:	9302      	str	r3, [sp, #8]
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2101      	movs	r1, #1
 80049f8:	0038      	movs	r0, r7
 80049fa:	f003 fdeb 	bl	80085d4 <SetButtonEvents>
 80049fe:	e7ec      	b.n	80049da <ParseSnippetCondition+0x102>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004a00:	220e      	movs	r2, #14
 8004a02:	499d      	ldr	r1, [pc, #628]	; (8004c78 <ParseSnippetCondition+0x3a0>)
 8004a04:	0030      	movs	r0, r6
 8004a06:	f00f fe44 	bl	8014692 <strncmp>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d120      	bne.n	8004a50 <ParseSnippetCondition+0x178>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004a0e:	00a3      	lsls	r3, r4, #2
 8004a10:	191c      	adds	r4, r3, r4
 8004a12:	00a4      	lsls	r4, r4, #2
 8004a14:	4b93      	ldr	r3, [pc, #588]	; (8004c64 <ParseSnippetCondition+0x38c>)
 8004a16:	191c      	adds	r4, r3, r4
 8004a18:	2306      	movs	r3, #6
 8004a1a:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004a1c:	00fa      	lsls	r2, r7, #3
 8004a1e:	19d2      	adds	r2, r2, r7
 8004a20:	4b94      	ldr	r3, [pc, #592]	; (8004c74 <ParseSnippetCondition+0x39c>)
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	7a1b      	ldrb	r3, [r3, #8]
 8004a26:	2202      	movs	r2, #2
 8004a28:	0016      	movs	r6, r2
 8004a2a:	401e      	ands	r6, r3
 8004a2c:	421a      	tst	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <ParseSnippetCondition+0x15c>
				status =BOS_OK;
 8004a30:	2600      	movs	r6, #0
 8004a32:	e7d2      	b.n	80049da <ParseSnippetCondition+0x102>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a34:	2301      	movs	r3, #1
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9304      	str	r3, [sp, #16]
 8004a3c:	9303      	str	r3, [sp, #12]
 8004a3e:	9302      	str	r3, [sp, #8]
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	3a01      	subs	r2, #1
 8004a46:	2100      	movs	r1, #0
 8004a48:	0038      	movs	r0, r7
 8004a4a:	f003 fdc3 	bl	80085d4 <SetButtonEvents>
 8004a4e:	e7c4      	b.n	80049da <ParseSnippetCondition+0x102>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004a50:	220c      	movs	r2, #12
 8004a52:	498a      	ldr	r1, [pc, #552]	; (8004c7c <ParseSnippetCondition+0x3a4>)
 8004a54:	0030      	movs	r0, r6
 8004a56:	f00f fe1c 	bl	8014692 <strncmp>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d17b      	bne.n	8004b56 <ParseSnippetCondition+0x27e>
				if(!button[port].pressedX1Sec){
 8004a5e:	00fa      	lsls	r2, r7, #3
 8004a60:	19d2      	adds	r2, r2, r7
 8004a62:	4b84      	ldr	r3, [pc, #528]	; (8004c74 <ParseSnippetCondition+0x39c>)
 8004a64:	189b      	adds	r3, r3, r2
 8004a66:	789e      	ldrb	r6, [r3, #2]
 8004a68:	2e00      	cmp	r6, #0
 8004a6a:	d00f      	beq.n	8004a8c <ParseSnippetCondition+0x1b4>
				else if(!button[port].pressedX2Sec){
 8004a6c:	00fa      	lsls	r2, r7, #3
 8004a6e:	19d2      	adds	r2, r2, r7
 8004a70:	4b80      	ldr	r3, [pc, #512]	; (8004c74 <ParseSnippetCondition+0x39c>)
 8004a72:	189b      	adds	r3, r3, r2
 8004a74:	78de      	ldrb	r6, [r3, #3]
 8004a76:	2e00      	cmp	r6, #0
 8004a78:	d029      	beq.n	8004ace <ParseSnippetCondition+0x1f6>
				else if(!button[port].pressedX3Sec){
 8004a7a:	00fa      	lsls	r2, r7, #3
 8004a7c:	19d2      	adds	r2, r2, r7
 8004a7e:	4b7d      	ldr	r3, [pc, #500]	; (8004c74 <ParseSnippetCondition+0x39c>)
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	791e      	ldrb	r6, [r3, #4]
 8004a84:	2e00      	cmp	r6, #0
 8004a86:	d044      	beq.n	8004b12 <ParseSnippetCondition+0x23a>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004a88:	260c      	movs	r6, #12
 8004a8a:	e7a6      	b.n	80049da <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004a8c:	4b75      	ldr	r3, [pc, #468]	; (8004c64 <ParseSnippetCondition+0x38c>)
 8004a8e:	4698      	mov	r8, r3
 8004a90:	00a3      	lsls	r3, r4, #2
 8004a92:	191b      	adds	r3, r3, r4
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4443      	add	r3, r8
 8004a98:	2209      	movs	r2, #9
 8004a9a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	300f      	adds	r0, #15
 8004aa0:	f00f f94f 	bl	8013d42 <atoi>
 8004aa4:	b2c3      	uxtb	r3, r0
 8004aa6:	4a6e      	ldr	r2, [pc, #440]	; (8004c60 <ParseSnippetCondition+0x388>)
 8004aa8:	7811      	ldrb	r1, [r2, #0]
 8004aaa:	008a      	lsls	r2, r1, #2
 8004aac:	1852      	adds	r2, r2, r1
 8004aae:	0092      	lsls	r2, r2, #2
 8004ab0:	4442      	add	r2, r8
 8004ab2:	7113      	strb	r3, [r2, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	9205      	str	r2, [sp, #20]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	9204      	str	r2, [sp, #16]
 8004abc:	9203      	str	r2, [sp, #12]
 8004abe:	9202      	str	r2, [sp, #8]
 8004ac0:	9201      	str	r2, [sp, #4]
 8004ac2:	9200      	str	r2, [sp, #0]
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	0038      	movs	r0, r7
 8004ac8:	f003 fd84 	bl	80085d4 <SetButtonEvents>
					status =BOS_OK;
 8004acc:	e785      	b.n	80049da <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004ace:	4b65      	ldr	r3, [pc, #404]	; (8004c64 <ParseSnippetCondition+0x38c>)
 8004ad0:	4698      	mov	r8, r3
 8004ad2:	00a3      	lsls	r3, r4, #2
 8004ad4:	191b      	adds	r3, r3, r4
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4443      	add	r3, r8
 8004ada:	220a      	movs	r2, #10
 8004adc:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004ade:	0028      	movs	r0, r5
 8004ae0:	300f      	adds	r0, #15
 8004ae2:	f00f f92e 	bl	8013d42 <atoi>
 8004ae6:	b2c0      	uxtb	r0, r0
 8004ae8:	4b5d      	ldr	r3, [pc, #372]	; (8004c60 <ParseSnippetCondition+0x388>)
 8004aea:	781a      	ldrb	r2, [r3, #0]
 8004aec:	0093      	lsls	r3, r2, #2
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4443      	add	r3, r8
 8004af4:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004af6:	2301      	movs	r3, #1
 8004af8:	9305      	str	r3, [sp, #20]
 8004afa:	2300      	movs	r3, #0
 8004afc:	9304      	str	r3, [sp, #16]
 8004afe:	9303      	str	r3, [sp, #12]
 8004b00:	9302      	str	r3, [sp, #8]
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	9000      	str	r0, [sp, #0]
 8004b06:	2200      	movs	r2, #0
 8004b08:	2100      	movs	r1, #0
 8004b0a:	0038      	movs	r0, r7
 8004b0c:	f003 fd62 	bl	80085d4 <SetButtonEvents>
					status =BOS_OK;
 8004b10:	e763      	b.n	80049da <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004b12:	4b54      	ldr	r3, [pc, #336]	; (8004c64 <ParseSnippetCondition+0x38c>)
 8004b14:	4698      	mov	r8, r3
 8004b16:	00a3      	lsls	r3, r4, #2
 8004b18:	191b      	adds	r3, r3, r4
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4443      	add	r3, r8
 8004b1e:	220b      	movs	r2, #11
 8004b20:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b22:	0028      	movs	r0, r5
 8004b24:	300f      	adds	r0, #15
 8004b26:	f00f f90c 	bl	8013d42 <atoi>
 8004b2a:	b2c0      	uxtb	r0, r0
 8004b2c:	4b4c      	ldr	r3, [pc, #304]	; (8004c60 <ParseSnippetCondition+0x388>)
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	0093      	lsls	r3, r2, #2
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4443      	add	r3, r8
 8004b38:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	9305      	str	r3, [sp, #20]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9304      	str	r3, [sp, #16]
 8004b42:	9303      	str	r3, [sp, #12]
 8004b44:	9302      	str	r3, [sp, #8]
 8004b46:	9001      	str	r0, [sp, #4]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	0038      	movs	r0, r7
 8004b50:	f003 fd40 	bl	80085d4 <SetButtonEvents>
					status =BOS_OK;
 8004b54:	e741      	b.n	80049da <ParseSnippetCondition+0x102>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004b56:	220d      	movs	r2, #13
 8004b58:	4949      	ldr	r1, [pc, #292]	; (8004c80 <ParseSnippetCondition+0x3a8>)
 8004b5a:	0030      	movs	r0, r6
 8004b5c:	f00f fd99 	bl	8014692 <strncmp>
	BOS_Status status =BOS_OK;
 8004b60:	2600      	movs	r6, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d000      	beq.n	8004b68 <ParseSnippetCondition+0x290>
 8004b66:	e738      	b.n	80049da <ParseSnippetCondition+0x102>
				if(!button[port].releasedY1Sec){
 8004b68:	00fa      	lsls	r2, r7, #3
 8004b6a:	19d2      	adds	r2, r2, r7
 8004b6c:	4b41      	ldr	r3, [pc, #260]	; (8004c74 <ParseSnippetCondition+0x39c>)
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	795e      	ldrb	r6, [r3, #5]
 8004b72:	2e00      	cmp	r6, #0
 8004b74:	d00f      	beq.n	8004b96 <ParseSnippetCondition+0x2be>
				else if(!button[port].releasedY2Sec){
 8004b76:	00fa      	lsls	r2, r7, #3
 8004b78:	19d2      	adds	r2, r2, r7
 8004b7a:	4b3e      	ldr	r3, [pc, #248]	; (8004c74 <ParseSnippetCondition+0x39c>)
 8004b7c:	189b      	adds	r3, r3, r2
 8004b7e:	799e      	ldrb	r6, [r3, #6]
 8004b80:	2e00      	cmp	r6, #0
 8004b82:	d02a      	beq.n	8004bda <ParseSnippetCondition+0x302>
				else if(!button[port].releasedY3Sec){
 8004b84:	00fa      	lsls	r2, r7, #3
 8004b86:	19d2      	adds	r2, r2, r7
 8004b88:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <ParseSnippetCondition+0x39c>)
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	79de      	ldrb	r6, [r3, #7]
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	d044      	beq.n	8004c1c <ParseSnippetCondition+0x344>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004b92:	260d      	movs	r6, #13
 8004b94:	e721      	b.n	80049da <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004b96:	4b33      	ldr	r3, [pc, #204]	; (8004c64 <ParseSnippetCondition+0x38c>)
 8004b98:	4698      	mov	r8, r3
 8004b9a:	00a3      	lsls	r3, r4, #2
 8004b9c:	191b      	adds	r3, r3, r4
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4443      	add	r3, r8
 8004ba2:	220c      	movs	r2, #12
 8004ba4:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004ba6:	0028      	movs	r0, r5
 8004ba8:	3010      	adds	r0, #16
 8004baa:	f00f f8ca 	bl	8013d42 <atoi>
 8004bae:	b2c0      	uxtb	r0, r0
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <ParseSnippetCondition+0x388>)
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	0093      	lsls	r3, r2, #2
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4443      	add	r3, r8
 8004bbc:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	9305      	str	r3, [sp, #20]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9304      	str	r3, [sp, #16]
 8004bc6:	9303      	str	r3, [sp, #12]
 8004bc8:	9002      	str	r0, [sp, #8]
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	0038      	movs	r0, r7
 8004bd4:	f003 fcfe 	bl	80085d4 <SetButtonEvents>
					status =BOS_OK;
 8004bd8:	e6ff      	b.n	80049da <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004bda:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <ParseSnippetCondition+0x38c>)
 8004bdc:	4698      	mov	r8, r3
 8004bde:	2314      	movs	r3, #20
 8004be0:	4699      	mov	r9, r3
 8004be2:	435c      	muls	r4, r3
 8004be4:	4444      	add	r4, r8
 8004be6:	3b07      	subs	r3, #7
 8004be8:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004bea:	0028      	movs	r0, r5
 8004bec:	3010      	adds	r0, #16
 8004bee:	f00f f8a8 	bl	8013d42 <atoi>
 8004bf2:	b2c0      	uxtb	r0, r0
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <ParseSnippetCondition+0x388>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	464a      	mov	r2, r9
 8004bfa:	4353      	muls	r3, r2
 8004bfc:	4443      	add	r3, r8
 8004bfe:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c00:	2301      	movs	r3, #1
 8004c02:	9305      	str	r3, [sp, #20]
 8004c04:	2100      	movs	r1, #0
 8004c06:	9104      	str	r1, [sp, #16]
 8004c08:	9003      	str	r0, [sp, #12]
 8004c0a:	9102      	str	r1, [sp, #8]
 8004c0c:	9101      	str	r1, [sp, #4]
 8004c0e:	9100      	str	r1, [sp, #0]
 8004c10:	000b      	movs	r3, r1
 8004c12:	000a      	movs	r2, r1
 8004c14:	0038      	movs	r0, r7
 8004c16:	f003 fcdd 	bl	80085d4 <SetButtonEvents>
					status =BOS_OK;
 8004c1a:	e6de      	b.n	80049da <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004c1c:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <ParseSnippetCondition+0x38c>)
 8004c1e:	4698      	mov	r8, r3
 8004c20:	2314      	movs	r3, #20
 8004c22:	4699      	mov	r9, r3
 8004c24:	435c      	muls	r4, r3
 8004c26:	4444      	add	r4, r8
 8004c28:	3b06      	subs	r3, #6
 8004c2a:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c2c:	0028      	movs	r0, r5
 8004c2e:	3010      	adds	r0, #16
 8004c30:	f00f f887 	bl	8013d42 <atoi>
 8004c34:	b2c0      	uxtb	r0, r0
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <ParseSnippetCondition+0x388>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	464a      	mov	r2, r9
 8004c3c:	4353      	muls	r3, r2
 8004c3e:	4443      	add	r3, r8
 8004c40:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004c42:	2301      	movs	r3, #1
 8004c44:	9305      	str	r3, [sp, #20]
 8004c46:	9004      	str	r0, [sp, #16]
 8004c48:	2100      	movs	r1, #0
 8004c4a:	9103      	str	r1, [sp, #12]
 8004c4c:	9102      	str	r1, [sp, #8]
 8004c4e:	9101      	str	r1, [sp, #4]
 8004c50:	9100      	str	r1, [sp, #0]
 8004c52:	000b      	movs	r3, r1
 8004c54:	000a      	movs	r2, r1
 8004c56:	0038      	movs	r0, r7
 8004c58:	f003 fcbc 	bl	80085d4 <SetButtonEvents>
					status =BOS_OK;
 8004c5c:	e6bd      	b.n	80049da <ParseSnippetCondition+0x102>
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	20001227 	.word	0x20001227
 8004c64:	20006ac4 	.word	0x20006ac4
 8004c68:	2000118c 	.word	0x2000118c
 8004c6c:	0801a628 	.word	0x0801a628
 8004c70:	0801b2b0 	.word	0x0801b2b0
 8004c74:	20001524 	.word	0x20001524
 8004c78:	0801aa64 	.word	0x0801aa64
 8004c7c:	0801aa74 	.word	0x0801aa74
 8004c80:	0801aa84 	.word	0x0801aa84
			else if(secondPart != NULL && thirdPart != NULL){
 8004c84:	2e00      	cmp	r6, #0
 8004c86:	d051      	beq.n	8004d2c <ParseSnippetCondition+0x454>
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	d051      	beq.n	8004d30 <ParseSnippetCondition+0x458>
				modPar2 =IsModuleParameter(thirdPart);
 8004c8c:	0028      	movs	r0, r5
 8004c8e:	f7fe fde5 	bl	800385c <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d029      	beq.n	8004cea <ParseSnippetCondition+0x412>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004c96:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <ParseSnippetCondition+0x460>)
 8004c98:	781d      	ldrb	r5, [r3, #0]
 8004c9a:	4a28      	ldr	r2, [pc, #160]	; (8004d3c <ParseSnippetCondition+0x464>)
 8004c9c:	00ab      	lsls	r3, r5, #2
 8004c9e:	1959      	adds	r1, r3, r5
 8004ca0:	0089      	lsls	r1, r1, #2
 8004ca2:	2704      	movs	r7, #4
 8004ca4:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004ca6:	1959      	adds	r1, r3, r5
 8004ca8:	0089      	lsls	r1, r1, #2
 8004caa:	1851      	adds	r1, r2, r1
 8004cac:	70cc      	strb	r4, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004cae:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004cb0:	4c21      	ldr	r4, [pc, #132]	; (8004d38 <ParseSnippetCondition+0x460>)
 8004cb2:	7825      	ldrb	r5, [r4, #0]
 8004cb4:	0030      	movs	r0, r6
 8004cb6:	f7fe fddd 	bl	8003874 <IsMathOperator>
 8004cba:	4a20      	ldr	r2, [pc, #128]	; (8004d3c <ParseSnippetCondition+0x464>)
 8004cbc:	00ab      	lsls	r3, r5, #2
 8004cbe:	195b      	adds	r3, r3, r5
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	18d3      	adds	r3, r2, r3
 8004cc4:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004cc6:	7821      	ldrb	r1, [r4, #0]
 8004cc8:	008b      	lsls	r3, r1, #2
 8004cca:	185b      	adds	r3, r3, r1
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	18d3      	adds	r3, r2, r3
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d02e      	beq.n	8004d34 <ParseSnippetCondition+0x45c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004cd6:	3101      	adds	r1, #1
 8004cd8:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <ParseSnippetCondition+0x460>)
 8004cda:	7019      	strb	r1, [r3, #0]
				return BOS_OK;
 8004cdc:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004cde:	0030      	movs	r0, r6
 8004ce0:	b009      	add	sp, #36	; 0x24
 8004ce2:	bcc0      	pop	{r6, r7}
 8004ce4:	46b9      	mov	r9, r7
 8004ce6:	46b0      	mov	r8, r6
 8004ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004cea:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <ParseSnippetCondition+0x460>)
 8004cec:	4698      	mov	r8, r3
 8004cee:	781a      	ldrb	r2, [r3, #0]
 8004cf0:	4f12      	ldr	r7, [pc, #72]	; (8004d3c <ParseSnippetCondition+0x464>)
 8004cf2:	0093      	lsls	r3, r2, #2
 8004cf4:	1899      	adds	r1, r3, r2
 8004cf6:	0089      	lsls	r1, r1, #2
 8004cf8:	2003      	movs	r0, #3
 8004cfa:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cfc:	187b      	adds	r3, r7, r1
 8004cfe:	70dc      	strb	r4, [r3, #3]
					float constant =atof(thirdPart);
 8004d00:	0028      	movs	r0, r5
 8004d02:	f00f f819 	bl	8013d38 <atof>
 8004d06:	f7fe f809 	bl	8002d1c <__aeabi_d2f>
 8004d0a:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004d0c:	4643      	mov	r3, r8
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	0098      	lsls	r0, r3, #2
 8004d12:	18c0      	adds	r0, r0, r3
 8004d14:	0080      	lsls	r0, r0, #2
 8004d16:	3006      	adds	r0, #6
 8004d18:	19c0      	adds	r0, r0, r7
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	a907      	add	r1, sp, #28
 8004d1e:	f00f fa77 	bl	8014210 <memcpy>
 8004d22:	e7c5      	b.n	8004cb0 <ParseSnippetCondition+0x3d8>
		return BOS_ERR_SNIP_MEM_FULL;
 8004d24:	260e      	movs	r6, #14
 8004d26:	e7da      	b.n	8004cde <ParseSnippetCondition+0x406>
			return BOS_ERR_WrongParam;
 8004d28:	2667      	movs	r6, #103	; 0x67
 8004d2a:	e7d8      	b.n	8004cde <ParseSnippetCondition+0x406>
				return BOS_ERR_WrongParam;
 8004d2c:	2667      	movs	r6, #103	; 0x67
 8004d2e:	e7d6      	b.n	8004cde <ParseSnippetCondition+0x406>
 8004d30:	2667      	movs	r6, #103	; 0x67
 8004d32:	e7d4      	b.n	8004cde <ParseSnippetCondition+0x406>
					return BOS_ERR_WrongParam;
 8004d34:	2667      	movs	r6, #103	; 0x67
 8004d36:	e7d2      	b.n	8004cde <ParseSnippetCondition+0x406>
 8004d38:	20001227 	.word	0x20001227
 8004d3c:	20006ac4 	.word	0x20006ac4

08004d40 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	000c      	movs	r4, r1
	switch(code){
 8004d44:	2802      	cmp	r0, #2
 8004d46:	d017      	beq.n	8004d78 <AddSnippet+0x38>
 8004d48:	2803      	cmp	r0, #3
 8004d4a:	d003      	beq.n	8004d54 <AddSnippet+0x14>
 8004d4c:	2801      	cmp	r0, #1
 8004d4e:	d00f      	beq.n	8004d70 <AddSnippet+0x30>
 8004d50:	2000      	movs	r0, #0
}
 8004d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets - 1].state = true;
 8004d54:	4b35      	ldr	r3, [pc, #212]	; (8004e2c <AddSnippet+0xec>)
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	3a01      	subs	r2, #1
 8004d5a:	0093      	lsls	r3, r2, #2
 8004d5c:	189b      	adds	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4a33      	ldr	r2, [pc, #204]	; (8004e30 <AddSnippet+0xf0>)
 8004d62:	18d3      	adds	r3, r2, r3
 8004d64:	2201      	movs	r2, #1
 8004d66:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004d68:	f006 fd52 	bl	800b810 <SaveToRO>
	return BOS_OK;
 8004d6c:	2000      	movs	r0, #0
			break;
 8004d6e:	e7f0      	b.n	8004d52 <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 8004d70:	0008      	movs	r0, r1
 8004d72:	f7ff fdb1 	bl	80048d8 <ParseSnippetCondition>
 8004d76:	e7ec      	b.n	8004d52 <AddSnippet+0x12>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004d78:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <AddSnippet+0xec>)
 8004d7a:	781d      	ldrb	r5, [r3, #0]
 8004d7c:	3d01      	subs	r5, #1
 8004d7e:	00ab      	lsls	r3, r5, #2
 8004d80:	195b      	adds	r3, r3, r5
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <AddSnippet+0xf0>)
 8004d86:	18d3      	adds	r3, r2, r3
 8004d88:	68de      	ldr	r6, [r3, #12]
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	d032      	beq.n	8004df4 <AddSnippet+0xb4>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004d8e:	0030      	movs	r0, r6
 8004d90:	f7fb f9c2 	bl	8000118 <strlen>
 8004d94:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004d96:	0020      	movs	r0, r4
 8004d98:	f7fb f9be 	bl	8000118 <strlen>
 8004d9c:	1839      	adds	r1, r7, r0
 8004d9e:	3102      	adds	r1, #2
 8004da0:	0030      	movs	r0, r6
 8004da2:	f00f fa71 	bl	8014288 <realloc>
 8004da6:	4e22      	ldr	r6, [pc, #136]	; (8004e30 <AddSnippet+0xf0>)
 8004da8:	00ab      	lsls	r3, r5, #2
 8004daa:	195d      	adds	r5, r3, r5
 8004dac:	00ad      	lsls	r5, r5, #2
 8004dae:	1975      	adds	r5, r6, r5
 8004db0:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004db2:	4d1e      	ldr	r5, [pc, #120]	; (8004e2c <AddSnippet+0xec>)
 8004db4:	782a      	ldrb	r2, [r5, #0]
 8004db6:	3a01      	subs	r2, #1
 8004db8:	0093      	lsls	r3, r2, #2
 8004dba:	189b      	adds	r3, r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	18f3      	adds	r3, r6, r3
 8004dc0:	1c7a      	adds	r2, r7, #1
 8004dc2:	68d8      	ldr	r0, [r3, #12]
 8004dc4:	1880      	adds	r0, r0, r2
 8004dc6:	0021      	movs	r1, r4
 8004dc8:	f00f fc5b 	bl	8014682 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004dcc:	782a      	ldrb	r2, [r5, #0]
 8004dce:	3a01      	subs	r2, #1
 8004dd0:	0093      	lsls	r3, r2, #2
 8004dd2:	189b      	adds	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	18f3      	adds	r3, r6, r3
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	2213      	movs	r2, #19
 8004ddc:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004dde:	782a      	ldrb	r2, [r5, #0]
 8004de0:	3a01      	subs	r2, #1
 8004de2:	0093      	lsls	r3, r2, #2
 8004de4:	189b      	adds	r3, r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	18f6      	adds	r6, r6, r3
 8004dea:	68f3      	ldr	r3, [r6, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d012      	beq.n	8004e16 <AddSnippet+0xd6>
	return BOS_OK;
 8004df0:	2000      	movs	r0, #0
 8004df2:	e7ae      	b.n	8004d52 <AddSnippet+0x12>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004df4:	0008      	movs	r0, r1
 8004df6:	f7fb f98f 	bl	8000118 <strlen>
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f00e ffd2 	bl	8013da4 <malloc>
 8004e00:	00ab      	lsls	r3, r5, #2
 8004e02:	195d      	adds	r5, r3, r5
 8004e04:	00ad      	lsls	r5, r5, #2
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <AddSnippet+0xf0>)
 8004e08:	195d      	adds	r5, r3, r5
 8004e0a:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004e0c:	0021      	movs	r1, r4
 8004e0e:	f00f fc38 	bl	8014682 <strcpy>
	return BOS_OK;
 8004e12:	2000      	movs	r0, #0
 8004e14:	e79d      	b.n	8004d52 <AddSnippet+0x12>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004e16:	0090      	lsls	r0, r2, #2
 8004e18:	1880      	adds	r0, r0, r2
 8004e1a:	0080      	lsls	r0, r0, #2
 8004e1c:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <AddSnippet+0xf0>)
 8004e1e:	1880      	adds	r0, r0, r2
 8004e20:	2214      	movs	r2, #20
 8004e22:	2100      	movs	r1, #0
 8004e24:	f00f f9fd 	bl	8014222 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004e28:	200e      	movs	r0, #14
 8004e2a:	e792      	b.n	8004d52 <AddSnippet+0x12>
 8004e2c:	20001227 	.word	0x20001227
 8004e30:	20006ac4 	.word	0x20006ac4

08004e34 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e36:	46de      	mov	lr, fp
 8004e38:	4657      	mov	r7, sl
 8004e3a:	464e      	mov	r6, r9
 8004e3c:	4645      	mov	r5, r8
 8004e3e:	b5e0      	push	{r5, r6, r7, lr}
 8004e40:	b08b      	sub	sp, #44	; 0x2c
 8004e42:	9004      	str	r0, [sp, #16]
 8004e44:	9103      	str	r1, [sp, #12]
 8004e46:	0015      	movs	r5, r2
 8004e48:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9307      	str	r3, [sp, #28]
 8004e4e:	2205      	movs	r2, #5
 8004e50:	2100      	movs	r1, #0
 8004e52:	a808      	add	r0, sp, #32
 8004e54:	f00f f9e5 	bl	8014222 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004e58:	4bd8      	ldr	r3, [pc, #864]	; (80051bc <CLI_CommandParser+0x388>)
 8004e5a:	4699      	mov	r9, r3
 8004e5c:	e129      	b.n	80050b2 <CLI_CommandParser+0x27e>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004e5e:	1ce9      	adds	r1, r5, #3
 8004e60:	3001      	adds	r0, #1
 8004e62:	f7ff ff6d 	bl	8004d40 <AddSnippet>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d105      	bne.n	8004e76 <CLI_CommandParser+0x42>
				recordSnippet = SNIPPET_COMMANDS;
 8004e6a:	4bd4      	ldr	r3, [pc, #848]	; (80051bc <CLI_CommandParser+0x388>)
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004e70:	230d      	movs	r3, #13
 8004e72:	7023      	strb	r3, [r4, #0]
 8004e74:	e027      	b.n	8004ec6 <CLI_CommandParser+0x92>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e76:	2252      	movs	r2, #82	; 0x52
 8004e78:	49d1      	ldr	r1, [pc, #836]	; (80051c0 <CLI_CommandParser+0x38c>)
 8004e7a:	0020      	movs	r0, r4
 8004e7c:	f00f f9c8 	bl	8014210 <memcpy>
				recordSnippet =0;
 8004e80:	4bce      	ldr	r3, [pc, #824]	; (80051bc <CLI_CommandParser+0x388>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e01e      	b.n	8004ec6 <CLI_CommandParser+0x92>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004e88:	2206      	movs	r2, #6
 8004e8a:	49ce      	ldr	r1, [pc, #824]	; (80051c4 <CLI_CommandParser+0x390>)
 8004e8c:	0028      	movs	r0, r5
 8004e8e:	f00f fc00 	bl	8014692 <strncmp>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d00b      	beq.n	8004eae <CLI_CommandParser+0x7a>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004e96:	2e02      	cmp	r6, #2
 8004e98:	d000      	beq.n	8004e9c <CLI_CommandParser+0x68>
 8004e9a:	e11a      	b.n	80050d2 <CLI_CommandParser+0x29e>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004e9c:	0029      	movs	r1, r5
 8004e9e:	2002      	movs	r0, #2
 8004ea0:	f7ff ff4e 	bl	8004d40 <AddSnippet>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d124      	bne.n	8004ef2 <CLI_CommandParser+0xbe>
				pcOutputString[0] ='\r';
 8004ea8:	230d      	movs	r3, #13
 8004eaa:	7023      	strb	r3, [r4, #0]
 8004eac:	e00b      	b.n	8004ec6 <CLI_CommandParser+0x92>
			recordSnippet =0;
 8004eae:	4bc3      	ldr	r3, [pc, #780]	; (80051bc <CLI_CommandParser+0x388>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004eb4:	49c4      	ldr	r1, [pc, #784]	; (80051c8 <CLI_CommandParser+0x394>)
 8004eb6:	3003      	adds	r0, #3
 8004eb8:	f7ff ff42 	bl	8004d40 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004ebc:	2241      	movs	r2, #65	; 0x41
 8004ebe:	49c3      	ldr	r1, [pc, #780]	; (80051cc <CLI_CommandParser+0x398>)
 8004ec0:	0020      	movs	r0, r4
 8004ec2:	f00f f9a5 	bl	8014210 <memcpy>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004ec6:	7823      	ldrb	r3, [r4, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d100      	bne.n	8004ece <CLI_CommandParser+0x9a>
 8004ecc:	e1a8      	b.n	8005220 <CLI_CommandParser+0x3ec>
 8004ece:	9b03      	ldr	r3, [sp, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d100      	bne.n	8004ed6 <CLI_CommandParser+0xa2>
 8004ed4:	e1bf      	b.n	8005256 <CLI_CommandParser+0x422>
 8004ed6:	2700      	movs	r7, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004ed8:	0020      	movs	r0, r4
 8004eda:	f7fb f91d 	bl	8000118 <strlen>
 8004ede:	b282      	uxth	r2, r0
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	425b      	negs	r3, r3
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	3333      	adds	r3, #51	; 0x33
 8004ee8:	0021      	movs	r1, r4
 8004eea:	9804      	ldr	r0, [sp, #16]
 8004eec:	f009 fa24 	bl	800e338 <writePxMutex>
 8004ef0:	e0d4      	b.n	800509c <CLI_CommandParser+0x268>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004ef2:	2252      	movs	r2, #82	; 0x52
 8004ef4:	49b2      	ldr	r1, [pc, #712]	; (80051c0 <CLI_CommandParser+0x38c>)
 8004ef6:	0020      	movs	r0, r4
 8004ef8:	f00f f98a 	bl	8014210 <memcpy>
 8004efc:	e7e3      	b.n	8004ec6 <CLI_CommandParser+0x92>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004efe:	2299      	movs	r2, #153	; 0x99
 8004f00:	1c70      	adds	r0, r6, #1
 8004f02:	0092      	lsls	r2, r2, #2
 8004f04:	0021      	movs	r1, r4
 8004f06:	f009 fbdf 	bl	800e6c8 <FreeRTOS_CLIProcessCommand>
 8004f0a:	0007      	movs	r7, r0
 8004f0c:	e0c2      	b.n	8005094 <CLI_CommandParser+0x260>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004f0e:	2227      	movs	r2, #39	; 0x27
 8004f10:	49af      	ldr	r1, [pc, #700]	; (80051d0 <CLI_CommandParser+0x39c>)
 8004f12:	0020      	movs	r0, r4
 8004f14:	f00f f97c 	bl	8014210 <memcpy>
					xReturned = pdFALSE;
 8004f18:	e7d5      	b.n	8004ec6 <CLI_CommandParser+0x92>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004f1a:	2225      	movs	r2, #37	; 0x25
 8004f1c:	49ad      	ldr	r1, [pc, #692]	; (80051d4 <CLI_CommandParser+0x3a0>)
 8004f1e:	0020      	movs	r0, r4
 8004f20:	f00f f976 	bl	8014210 <memcpy>
					xReturned = pdFALSE;
 8004f24:	e7cf      	b.n	8004ec6 <CLI_CommandParser+0x92>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f26:	221a      	movs	r2, #26
 8004f28:	2100      	movs	r1, #0
 8004f2a:	48ab      	ldr	r0, [pc, #684]	; (80051d8 <CLI_CommandParser+0x3a4>)
 8004f2c:	f00f f979 	bl	8014222 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f30:	3601      	adds	r6, #1
 8004f32:	0028      	movs	r0, r5
 8004f34:	f7fb f8f0 	bl	8000118 <strlen>
 8004f38:	0007      	movs	r7, r0
 8004f3a:	a807      	add	r0, sp, #28
 8004f3c:	f7fb f8ec 	bl	8000118 <strlen>
 8004f40:	3f01      	subs	r7, #1
 8004f42:	1a3a      	subs	r2, r7, r0
 8004f44:	0031      	movs	r1, r6
 8004f46:	48a5      	ldr	r0, [pc, #660]	; (80051dc <CLI_CommandParser+0x3a8>)
 8004f48:	f00f fbb4 	bl	80146b4 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f4c:	0028      	movs	r0, r5
 8004f4e:	f7fb f8e3 	bl	8000118 <strlen>
 8004f52:	0007      	movs	r7, r0
 8004f54:	a807      	add	r0, sp, #28
 8004f56:	f7fb f8df 	bl	8000118 <strlen>
 8004f5a:	1a3b      	subs	r3, r7, r0
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2217      	movs	r2, #23
 8004f60:	21ff      	movs	r1, #255	; 0xff
 8004f62:	4640      	mov	r0, r8
 8004f64:	f004 fcd2 	bl	800990c <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f68:	2299      	movs	r2, #153	; 0x99
 8004f6a:	0092      	lsls	r2, r2, #2
 8004f6c:	0021      	movs	r1, r4
 8004f6e:	0030      	movs	r0, r6
 8004f70:	f009 fbaa 	bl	800e6c8 <FreeRTOS_CLIProcessCommand>
 8004f74:	0007      	movs	r7, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f76:	0020      	movs	r0, r4
 8004f78:	f7fb f8ce 	bl	8000118 <strlen>
 8004f7c:	1820      	adds	r0, r4, r0
 8004f7e:	221d      	movs	r2, #29
 8004f80:	4997      	ldr	r1, [pc, #604]	; (80051e0 <CLI_CommandParser+0x3ac>)
 8004f82:	f00f f945 	bl	8014210 <memcpy>
 8004f86:	e085      	b.n	8005094 <CLI_CommandParser+0x260>
					group =id >> 8;
 8004f88:	9b05      	ldr	r3, [sp, #20]
 8004f8a:	1218      	asrs	r0, r3, #8
 8004f8c:	b2c3      	uxtb	r3, r0
 8004f8e:	469a      	mov	sl, r3
 8004f90:	4b94      	ldr	r3, [pc, #592]	; (80051e4 <CLI_CommandParser+0x3b0>)
 8004f92:	469b      	mov	fp, r3
 8004f94:	4652      	mov	r2, sl
 8004f96:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f98:	221a      	movs	r2, #26
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	488e      	ldr	r0, [pc, #568]	; (80051d8 <CLI_CommandParser+0x3a4>)
 8004f9e:	f00f f940 	bl	8014222 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004fa2:	1c73      	adds	r3, r6, #1
 8004fa4:	9305      	str	r3, [sp, #20]
 8004fa6:	0028      	movs	r0, r5
 8004fa8:	f7fb f8b6 	bl	8000118 <strlen>
 8004fac:	0006      	movs	r6, r0
 8004fae:	a807      	add	r0, sp, #28
 8004fb0:	f7fb f8b2 	bl	8000118 <strlen>
 8004fb4:	3e01      	subs	r6, #1
 8004fb6:	1a32      	subs	r2, r6, r0
 8004fb8:	9905      	ldr	r1, [sp, #20]
 8004fba:	4888      	ldr	r0, [pc, #544]	; (80051dc <CLI_CommandParser+0x3a8>)
 8004fbc:	f00f fb7a 	bl	80146b4 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004fc0:	0028      	movs	r0, r5
 8004fc2:	f7fb f8a9 	bl	8000118 <strlen>
 8004fc6:	0006      	movs	r6, r0
 8004fc8:	a807      	add	r0, sp, #28
 8004fca:	f7fb f8a5 	bl	8000118 <strlen>
 8004fce:	1a33      	subs	r3, r6, r0
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2217      	movs	r2, #23
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	f004 fc98 	bl	800990c <BroadcastMessage>
					if(InGroup(myID,group))
 8004fdc:	4b82      	ldr	r3, [pc, #520]	; (80051e8 <CLI_CommandParser+0x3b4>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	4a81      	ldr	r2, [pc, #516]	; (80051ec <CLI_CommandParser+0x3b8>)
 8004fe6:	5a9b      	ldrh	r3, [r3, r2]
 8004fe8:	465a      	mov	r2, fp
 8004fea:	7812      	ldrb	r2, [r2, #0]
 8004fec:	4113      	asrs	r3, r2
 8004fee:	07db      	lsls	r3, r3, #31
 8004ff0:	d406      	bmi.n	8005000 <CLI_CommandParser+0x1cc>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004ff2:	ab07      	add	r3, sp, #28
 8004ff4:	0022      	movs	r2, r4
 8004ff6:	497e      	ldr	r1, [pc, #504]	; (80051f0 <CLI_CommandParser+0x3bc>)
 8004ff8:	0020      	movs	r0, r4
 8004ffa:	f00f fb07 	bl	801460c <sprintf>
 8004ffe:	e049      	b.n	8005094 <CLI_CommandParser+0x260>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005000:	2299      	movs	r2, #153	; 0x99
 8005002:	0092      	lsls	r2, r2, #2
 8005004:	0021      	movs	r1, r4
 8005006:	9805      	ldr	r0, [sp, #20]
 8005008:	f009 fb5e 	bl	800e6c8 <FreeRTOS_CLIProcessCommand>
 800500c:	0007      	movs	r7, r0
 800500e:	e7f0      	b.n	8004ff2 <CLI_CommandParser+0x1be>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005010:	0028      	movs	r0, r5
 8005012:	f7fb f881 	bl	8000118 <strlen>
 8005016:	0007      	movs	r7, r0
 8005018:	a807      	add	r0, sp, #28
 800501a:	f7fb f87d 	bl	8000118 <strlen>
 800501e:	3f01      	subs	r7, #1
 8005020:	1a3a      	subs	r2, r7, r0
 8005022:	0031      	movs	r1, r6
 8005024:	486d      	ldr	r0, [pc, #436]	; (80051dc <CLI_CommandParser+0x3a8>)
 8005026:	f00f fb45 	bl	80146b4 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 800502a:	0028      	movs	r0, r5
 800502c:	f7fb f874 	bl	8000118 <strlen>
 8005030:	0006      	movs	r6, r0
 8005032:	a807      	add	r0, sp, #28
 8005034:	f7fb f870 	bl	8000118 <strlen>
 8005038:	3e01      	subs	r6, #1
 800503a:	1a36      	subs	r6, r6, r0
 800503c:	b2b2      	uxth	r2, r6
 800503e:	2117      	movs	r1, #23
 8005040:	4650      	mov	r0, sl
 8005042:	f004 fc8b 	bl	800995c <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005046:	9a05      	ldr	r2, [sp, #20]
 8005048:	496a      	ldr	r1, [pc, #424]	; (80051f4 <CLI_CommandParser+0x3c0>)
 800504a:	0020      	movs	r0, r4
 800504c:	f00f fade 	bl	801460c <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005050:	7823      	ldrb	r3, [r4, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <CLI_CommandParser+0x228>
 8005056:	9b03      	ldr	r3, [sp, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d108      	bne.n	800506e <CLI_CommandParser+0x23a>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800505c:	0020      	movs	r0, r4
 800505e:	f7fb f85b 	bl	8000118 <strlen>
 8005062:	0002      	movs	r2, r0
 8005064:	2100      	movs	r1, #0
 8005066:	0020      	movs	r0, r4
 8005068:	f00f f8db 	bl	8014222 <memset>
 800506c:	e07c      	b.n	8005168 <CLI_CommandParser+0x334>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 800506e:	0020      	movs	r0, r4
 8005070:	f7fb f852 	bl	8000118 <strlen>
 8005074:	b282      	uxth	r2, r0
 8005076:	2301      	movs	r3, #1
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	3331      	adds	r3, #49	; 0x31
 800507c:	0021      	movs	r1, r4
 800507e:	9804      	ldr	r0, [sp, #16]
 8005080:	f009 f95a 	bl	800e338 <writePxMutex>
 8005084:	e7ea      	b.n	800505c <CLI_CommandParser+0x228>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005086:	2299      	movs	r2, #153	; 0x99
 8005088:	0092      	lsls	r2, r2, #2
 800508a:	0021      	movs	r1, r4
 800508c:	0028      	movs	r0, r5
 800508e:	f009 fb1b 	bl	800e6c8 <FreeRTOS_CLIProcessCommand>
 8005092:	0007      	movs	r7, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005094:	7823      	ldrb	r3, [r4, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d000      	beq.n	800509c <CLI_CommandParser+0x268>
 800509a:	e07f      	b.n	800519c <CLI_CommandParser+0x368>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800509c:	0020      	movs	r0, r4
 800509e:	f7fb f83b 	bl	8000118 <strlen>
 80050a2:	0002      	movs	r2, r0
 80050a4:	2100      	movs	r1, #0
 80050a6:	0020      	movs	r0, r4
 80050a8:	f00f f8bb 	bl	8014222 <memset>
	} while(xReturned != pdFALSE);
 80050ac:	2f00      	cmp	r7, #0
 80050ae:	d100      	bne.n	80050b2 <CLI_CommandParser+0x27e>
 80050b0:	e0be      	b.n	8005230 <CLI_CommandParser+0x3fc>
		StringToLowerCase((char* )cInputString);
 80050b2:	0028      	movs	r0, r5
 80050b4:	f7ff fbf8 	bl	80048a8 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 80050b8:	464b      	mov	r3, r9
 80050ba:	781e      	ldrb	r6, [r3, #0]
 80050bc:	2e00      	cmp	r6, #0
 80050be:	d000      	beq.n	80050c2 <CLI_CommandParser+0x28e>
 80050c0:	e6e2      	b.n	8004e88 <CLI_CommandParser+0x54>
 80050c2:	2203      	movs	r2, #3
 80050c4:	494c      	ldr	r1, [pc, #304]	; (80051f8 <CLI_CommandParser+0x3c4>)
 80050c6:	0028      	movs	r0, r5
 80050c8:	f00f fae3 	bl	8014692 <strncmp>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d100      	bne.n	80050d2 <CLI_CommandParser+0x29e>
 80050d0:	e6c5      	b.n	8004e5e <CLI_CommandParser+0x2a>
			loc =strchr((char* )cInputString,'.');
 80050d2:	212e      	movs	r1, #46	; 0x2e
 80050d4:	0028      	movs	r0, r5
 80050d6:	f00f fac6 	bl	8014666 <strchr>
 80050da:	1e06      	subs	r6, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 80050dc:	d0d3      	beq.n	8005086 <CLI_CommandParser+0x252>
 80050de:	3803      	subs	r0, #3
 80050e0:	2203      	movs	r2, #3
 80050e2:	4946      	ldr	r1, [pc, #280]	; (80051fc <CLI_CommandParser+0x3c8>)
 80050e4:	f00f fad5 	bl	8014692 <strncmp>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d0cc      	beq.n	8005086 <CLI_CommandParser+0x252>
 80050ec:	7873      	ldrb	r3, [r6, #1]
 80050ee:	4a44      	ldr	r2, [pc, #272]	; (8005200 <CLI_CommandParser+0x3cc>)
 80050f0:	5cd3      	ldrb	r3, [r2, r3]
 80050f2:	075b      	lsls	r3, r3, #29
 80050f4:	d4c7      	bmi.n	8005086 <CLI_CommandParser+0x252>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 80050f6:	1b72      	subs	r2, r6, r5
 80050f8:	0029      	movs	r1, r5
 80050fa:	a807      	add	r0, sp, #28
 80050fc:	f00f fada 	bl	80146b4 <strncpy>
				id =GetID(idString);
 8005100:	a807      	add	r0, sp, #28
 8005102:	f7ff f8f9 	bl	80042f8 <GetID>
 8005106:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8005108:	4a37      	ldr	r2, [pc, #220]	; (80051e8 <CLI_CommandParser+0x3b4>)
 800510a:	7812      	ldrb	r2, [r2, #0]
 800510c:	4690      	mov	r8, r2
 800510e:	4290      	cmp	r0, r2
 8005110:	d100      	bne.n	8005114 <CLI_CommandParser+0x2e0>
 8005112:	e6f4      	b.n	8004efe <CLI_CommandParser+0xca>
				else if(id == BOS_ERR_WrongName){
 8005114:	2864      	cmp	r0, #100	; 0x64
 8005116:	d100      	bne.n	800511a <CLI_CommandParser+0x2e6>
 8005118:	e6f9      	b.n	8004f0e <CLI_CommandParser+0xda>
				else if(id == BOS_ERR_WrongID){
 800511a:	2866      	cmp	r0, #102	; 0x66
 800511c:	d100      	bne.n	8005120 <CLI_CommandParser+0x2ec>
 800511e:	e6fc      	b.n	8004f1a <CLI_CommandParser+0xe6>
				else if(id == BOS_BROADCAST){
 8005120:	28ff      	cmp	r0, #255	; 0xff
 8005122:	d100      	bne.n	8005126 <CLI_CommandParser+0x2f2>
 8005124:	e6ff      	b.n	8004f26 <CLI_CommandParser+0xf2>
				else if((uint8_t )id == BOS_MULTICAST){
 8005126:	466b      	mov	r3, sp
 8005128:	7d1b      	ldrb	r3, [r3, #20]
 800512a:	469a      	mov	sl, r3
 800512c:	2bfe      	cmp	r3, #254	; 0xfe
 800512e:	d100      	bne.n	8005132 <CLI_CommandParser+0x2fe>
 8005130:	e72a      	b.n	8004f88 <CLI_CommandParser+0x154>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8005132:	3601      	adds	r6, #1
 8005134:	2206      	movs	r2, #6
 8005136:	4933      	ldr	r1, [pc, #204]	; (8005204 <CLI_CommandParser+0x3d0>)
 8005138:	0030      	movs	r0, r6
 800513a:	f00f faaa 	bl	8014692 <strncmp>
 800513e:	2800      	cmp	r0, #0
 8005140:	d000      	beq.n	8005144 <CLI_CommandParser+0x310>
 8005142:	e765      	b.n	8005010 <CLI_CommandParser+0x1dc>
						BOS.response = BOS_RESPONSE_NONE;
 8005144:	4b30      	ldr	r3, [pc, #192]	; (8005208 <CLI_CommandParser+0x3d4>)
 8005146:	2200      	movs	r2, #0
 8005148:	719a      	strb	r2, [r3, #6]
						SendMessageToModule(id,CODE_UPDATE,0);
 800514a:	2119      	movs	r1, #25
 800514c:	4650      	mov	r0, sl
 800514e:	f004 fc05 	bl	800995c <SendMessageToModule>
						osDelay(100);
 8005152:	2064      	movs	r0, #100	; 0x64
 8005154:	f009 fa1f 	bl	800e596 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8005158:	4b2c      	ldr	r3, [pc, #176]	; (800520c <CLI_CommandParser+0x3d8>)
 800515a:	781a      	ldrb	r2, [r3, #0]
 800515c:	4b22      	ldr	r3, [pc, #136]	; (80051e8 <CLI_CommandParser+0x3b4>)
 800515e:	7818      	ldrb	r0, [r3, #0]
 8005160:	2300      	movs	r3, #0
 8005162:	4651      	mov	r1, sl
 8005164:	f7fe fd8e 	bl	8003c84 <remoteBootloaderUpdate>
					if(BOS.response == BOS_RESPONSE_ALL){
 8005168:	4b27      	ldr	r3, [pc, #156]	; (8005208 <CLI_CommandParser+0x3d4>)
 800516a:	799b      	ldrb	r3, [r3, #6]
 800516c:	2b60      	cmp	r3, #96	; 0x60
 800516e:	d000      	beq.n	8005172 <CLI_CommandParser+0x33e>
 8005170:	e6a9      	b.n	8004ec6 <CLI_CommandParser+0x92>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8005172:	21fa      	movs	r1, #250	; 0xfa
 8005174:	0089      	lsls	r1, r1, #2
 8005176:	2001      	movs	r0, #1
 8005178:	f00a ff7a 	bl	8010070 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 800517c:	4b24      	ldr	r3, [pc, #144]	; (8005210 <CLI_CommandParser+0x3dc>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d100      	bne.n	8005186 <CLI_CommandParser+0x352>
 8005184:	e69f      	b.n	8004ec6 <CLI_CommandParser+0x92>
							++timedoutMsg;
 8005186:	4a23      	ldr	r2, [pc, #140]	; (8005214 <CLI_CommandParser+0x3e0>)
 8005188:	8813      	ldrh	r3, [r2, #0]
 800518a:	3301      	adds	r3, #1
 800518c:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 800518e:	9b05      	ldr	r3, [sp, #20]
 8005190:	0022      	movs	r2, r4
 8005192:	4921      	ldr	r1, [pc, #132]	; (8005218 <CLI_CommandParser+0x3e4>)
 8005194:	0020      	movs	r0, r4
 8005196:	f00f fa39 	bl	801460c <sprintf>
 800519a:	e694      	b.n	8004ec6 <CLI_CommandParser+0x92>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 800519c:	9b03      	ldr	r3, [sp, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d100      	bne.n	80051a4 <CLI_CommandParser+0x370>
 80051a2:	e77b      	b.n	800509c <CLI_CommandParser+0x268>
 80051a4:	e698      	b.n	8004ed8 <CLI_CommandParser+0xa4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80051a6:	2301      	movs	r3, #1
 80051a8:	425b      	negs	r3, r3
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	3333      	adds	r3, #51	; 0x33
 80051ae:	2238      	movs	r2, #56	; 0x38
 80051b0:	491a      	ldr	r1, [pc, #104]	; (800521c <CLI_CommandParser+0x3e8>)
 80051b2:	9804      	ldr	r0, [sp, #16]
 80051b4:	f009 f8c0 	bl	800e338 <writePxMutex>
}
 80051b8:	e046      	b.n	8005248 <CLI_CommandParser+0x414>
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	20001254 	.word	0x20001254
 80051c0:	0801aa98 	.word	0x0801aa98
 80051c4:	0801aaec 	.word	0x0801aaec
 80051c8:	0801a500 	.word	0x0801a500
 80051cc:	0801aaf4 	.word	0x0801aaf4
 80051d0:	0801ab3c 	.word	0x0801ab3c
 80051d4:	0801ab64 	.word	0x0801ab64
 80051d8:	20000cf4 	.word	0x20000cf4
 80051dc:	20000f40 	.word	0x20000f40
 80051e0:	0801ab8c 	.word	0x0801ab8c
 80051e4:	20001226 	.word	0x20001226
 80051e8:	2000107e 	.word	0x2000107e
 80051ec:	20000ec8 	.word	0x20000ec8
 80051f0:	0801abac 	.word	0x0801abac
 80051f4:	0801abe0 	.word	0x0801abe0
 80051f8:	0801aa94 	.word	0x0801aa94
 80051fc:	0801ab38 	.word	0x0801ab38
 8005200:	0801d905 	.word	0x0801d905
 8005204:	0801abd8 	.word	0x0801abd8
 8005208:	20006aa8 	.word	0x20006aa8
 800520c:	20000a7f 	.word	0x20000a7f
 8005210:	20001118 	.word	0x20001118
 8005214:	200017a2 	.word	0x200017a2
 8005218:	0801ac04 	.word	0x0801ac04
 800521c:	0801ac24 	.word	0x0801ac24
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005220:	0020      	movs	r0, r4
 8005222:	f7fa ff79 	bl	8000118 <strlen>
 8005226:	0002      	movs	r2, r0
 8005228:	2100      	movs	r1, #0
 800522a:	0020      	movs	r0, r4
 800522c:	f00e fff9 	bl	8014222 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8005230:	2209      	movs	r2, #9
 8005232:	2100      	movs	r1, #0
 8005234:	a807      	add	r0, sp, #28
 8005236:	f00e fff4 	bl	8014222 <memset>
	if(!recordSnippet && enableOutput)
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <CLI_CommandParser+0x434>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <CLI_CommandParser+0x414>
 8005242:	9b03      	ldr	r3, [sp, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1ae      	bne.n	80051a6 <CLI_CommandParser+0x372>
}
 8005248:	b00b      	add	sp, #44	; 0x2c
 800524a:	bcf0      	pop	{r4, r5, r6, r7}
 800524c:	46bb      	mov	fp, r7
 800524e:	46b2      	mov	sl, r6
 8005250:	46a9      	mov	r9, r5
 8005252:	46a0      	mov	r8, r4
 8005254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005256:	0020      	movs	r0, r4
 8005258:	f7fa ff5e 	bl	8000118 <strlen>
 800525c:	0002      	movs	r2, r0
 800525e:	2100      	movs	r1, #0
 8005260:	0020      	movs	r0, r4
 8005262:	f00e ffde 	bl	8014222 <memset>
	} while(xReturned != pdFALSE);
 8005266:	e7e3      	b.n	8005230 <CLI_CommandParser+0x3fc>
 8005268:	20001254 	.word	0x20001254

0800526c <prvCLITask>:
void prvCLITask(void *pvParameters){
 800526c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526e:	46d6      	mov	lr, sl
 8005270:	464f      	mov	r7, r9
 8005272:	4646      	mov	r6, r8
 8005274:	b5c0      	push	{r6, r7, lr}
 8005276:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005278:	2101      	movs	r1, #1
 800527a:	4249      	negs	r1, r1
 800527c:	2001      	movs	r0, #1
 800527e:	f00a fef7 	bl	8010070 <ulTaskNotifyTake>
	cRxedChar ='\0';
 8005282:	230f      	movs	r3, #15
 8005284:	446b      	add	r3, sp
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800528a:	f009 faa7 	bl	800e7dc <FreeRTOS_CLIGetOutputBuffer>
 800528e:	4682      	mov	sl, r0
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005290:	23e1      	movs	r3, #225	; 0xe1
 8005292:	031b      	lsls	r3, r3, #12
 8005294:	4a58      	ldr	r2, [pc, #352]	; (80053f8 <prvCLITask+0x18c>)
 8005296:	6892      	ldr	r2, [r2, #8]
 8005298:	429a      	cmp	r2, r3
 800529a:	d00f      	beq.n	80052bc <prvCLITask+0x50>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800529c:	2401      	movs	r4, #1
			if(port != PcPort)
 800529e:	4e57      	ldr	r6, [pc, #348]	; (80053fc <prvCLITask+0x190>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80052a0:	001d      	movs	r5, r3
 80052a2:	e003      	b.n	80052ac <prvCLITask+0x40>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80052a4:	3401      	adds	r4, #1
 80052a6:	b2e4      	uxtb	r4, r4
 80052a8:	2c07      	cmp	r4, #7
 80052aa:	d007      	beq.n	80052bc <prvCLITask+0x50>
			if(port != PcPort)
 80052ac:	7833      	ldrb	r3, [r6, #0]
 80052ae:	42a3      	cmp	r3, r4
 80052b0:	d0f8      	beq.n	80052a4 <prvCLITask+0x38>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80052b2:	0029      	movs	r1, r5
 80052b4:	0020      	movs	r0, r4
 80052b6:	f009 f8af 	bl	800e418 <UpdateBaudrate>
 80052ba:	e7f3      	b.n	80052a4 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 80052bc:	4b50      	ldr	r3, [pc, #320]	; (8005400 <prvCLITask+0x194>)
 80052be:	881a      	ldrh	r2, [r3, #0]
 80052c0:	0053      	lsls	r3, r2, #1
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	4a4f      	ldr	r2, [pc, #316]	; (8005404 <prvCLITask+0x198>)
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	4a4f      	ldr	r2, [pc, #316]	; (8005408 <prvCLITask+0x19c>)
 80052cc:	7812      	ldrb	r2, [r2, #0]
 80052ce:	4c4f      	ldr	r4, [pc, #316]	; (800540c <prvCLITask+0x1a0>)
 80052d0:	4d4a      	ldr	r5, [pc, #296]	; (80053fc <prvCLITask+0x190>)
 80052d2:	7829      	ldrb	r1, [r5, #0]
 80052d4:	9100      	str	r1, [sp, #0]
 80052d6:	494e      	ldr	r1, [pc, #312]	; (8005410 <prvCLITask+0x1a4>)
 80052d8:	0020      	movs	r0, r4
 80052da:	f00f f997 	bl	801460c <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80052de:	22a4      	movs	r2, #164	; 0xa4
 80052e0:	7828      	ldrb	r0, [r5, #0]
 80052e2:	230a      	movs	r3, #10
 80052e4:	0092      	lsls	r2, r2, #2
 80052e6:	494b      	ldr	r1, [pc, #300]	; (8005414 <prvCLITask+0x1a8>)
 80052e8:	f009 f852 	bl	800e390 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 80052ec:	0020      	movs	r0, r4
 80052ee:	f7fa ff13 	bl	8000118 <strlen>
 80052f2:	b282      	uxth	r2, r0
 80052f4:	7828      	ldrb	r0, [r5, #0]
 80052f6:	230a      	movs	r3, #10
 80052f8:	0021      	movs	r1, r4
 80052fa:	f009 f849 	bl	800e390 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 80052fe:	2300      	movs	r3, #0
 8005300:	4698      	mov	r8, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005302:	4b45      	ldr	r3, [pc, #276]	; (8005418 <prvCLITask+0x1ac>)
 8005304:	4699      	mov	r9, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8005306:	001f      	movs	r7, r3
 8005308:	e05c      	b.n	80053c4 <prvCLITask+0x158>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 800530a:	200f      	movs	r0, #15
 800530c:	4468      	add	r0, sp
 800530e:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005310:	0198      	lsls	r0, r3, #6
 8005312:	4a42      	ldr	r2, [pc, #264]	; (800541c <prvCLITask+0x1b0>)
 8005314:	1812      	adds	r2, r2, r0
 8005316:	2000      	movs	r0, #0
 8005318:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort - 1] =chr;
 800531a:	4a3f      	ldr	r2, [pc, #252]	; (8005418 <prvCLITask+0x1ac>)
 800531c:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 800531e:	240f      	movs	r4, #15
 8005320:	446c      	add	r4, sp
 8005322:	4b36      	ldr	r3, [pc, #216]	; (80053fc <prvCLITask+0x190>)
 8005324:	7818      	ldrb	r0, [r3, #0]
 8005326:	230a      	movs	r3, #10
 8005328:	2201      	movs	r2, #1
 800532a:	0021      	movs	r1, r4
 800532c:	f009 f830 	bl	800e390 <writePxITMutex>
		if(cRxedChar == '\r'){
 8005330:	7823      	ldrb	r3, [r4, #0]
 8005332:	2b0d      	cmp	r3, #13
 8005334:	d027      	beq.n	8005386 <prvCLITask+0x11a>
			if(cRxedChar == '\n'){
 8005336:	2b0a      	cmp	r3, #10
 8005338:	d042      	beq.n	80053c0 <prvCLITask+0x154>
			else if(cRxedChar == '\b'){
 800533a:	2b08      	cmp	r3, #8
 800533c:	d051      	beq.n	80053e2 <prvCLITask+0x176>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 800533e:	001a      	movs	r2, r3
 8005340:	3a20      	subs	r2, #32
 8005342:	2a5e      	cmp	r2, #94	; 0x5e
 8005344:	d83c      	bhi.n	80053c0 <prvCLITask+0x154>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005346:	4642      	mov	r2, r8
 8005348:	2a31      	cmp	r2, #49	; 0x31
 800534a:	dc39      	bgt.n	80053c0 <prvCLITask+0x154>
						cInputString[cInputIndex] =cRxedChar;
 800534c:	4a34      	ldr	r2, [pc, #208]	; (8005420 <prvCLITask+0x1b4>)
 800534e:	4641      	mov	r1, r8
 8005350:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005352:	4643      	mov	r3, r8
 8005354:	3301      	adds	r3, #1
 8005356:	b25b      	sxtb	r3, r3
 8005358:	4698      	mov	r8, r3
 800535a:	e031      	b.n	80053c0 <prvCLITask+0x154>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800535c:	2200      	movs	r2, #0
 800535e:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8005360:	f00b f962 	bl	8010628 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005364:	3c3e      	subs	r4, #62	; 0x3e
			if(UARTRxBuf[PcPort - 1][chr]){
 8005366:	7833      	ldrb	r3, [r6, #0]
 8005368:	3b01      	subs	r3, #1
 800536a:	019a      	lsls	r2, r3, #6
 800536c:	18aa      	adds	r2, r5, r2
 800536e:	5d12      	ldrb	r2, [r2, r4]
 8005370:	2a00      	cmp	r2, #0
 8005372:	d1ca      	bne.n	800530a <prvCLITask+0x9e>
			if(chr == MSG_RX_BUF_SIZE - 1){
 8005374:	2c3f      	cmp	r4, #63	; 0x3f
 8005376:	d0f1      	beq.n	800535c <prvCLITask+0xf0>
			taskYIELD();
 8005378:	f00b f956 	bl	8010628 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800537c:	3401      	adds	r4, #1
 800537e:	b2a4      	uxth	r4, r4
 8005380:	2c3f      	cmp	r4, #63	; 0x3f
 8005382:	d9f0      	bls.n	8005366 <prvCLITask+0xfa>
 8005384:	e7cb      	b.n	800531e <prvCLITask+0xb2>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005386:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <prvCLITask+0x190>)
 8005388:	7818      	ldrb	r0, [r3, #0]
 800538a:	230a      	movs	r3, #10
 800538c:	2202      	movs	r2, #2
 800538e:	4925      	ldr	r1, [pc, #148]	; (8005424 <prvCLITask+0x1b8>)
 8005390:	f008 fffe 	bl	800e390 <writePxITMutex>
			if(cInputIndex == 0){
 8005394:	4643      	mov	r3, r8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01e      	beq.n	80053d8 <prvCLITask+0x16c>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800539a:	4c21      	ldr	r4, [pc, #132]	; (8005420 <prvCLITask+0x1b4>)
 800539c:	4b17      	ldr	r3, [pc, #92]	; (80053fc <prvCLITask+0x190>)
 800539e:	7818      	ldrb	r0, [r3, #0]
 80053a0:	4653      	mov	r3, sl
 80053a2:	0022      	movs	r2, r4
 80053a4:	2101      	movs	r1, #1
 80053a6:	f7ff fd45 	bl	8004e34 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 80053aa:	0021      	movs	r1, r4
 80053ac:	481e      	ldr	r0, [pc, #120]	; (8005428 <prvCLITask+0x1bc>)
 80053ae:	f00f f968 	bl	8014682 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80053b2:	2232      	movs	r2, #50	; 0x32
 80053b4:	2100      	movs	r1, #0
 80053b6:	0020      	movs	r0, r4
 80053b8:	f00e ff33 	bl	8014222 <memset>
			cInputIndex =0;
 80053bc:	2300      	movs	r3, #0
 80053be:	4698      	mov	r8, r3
		taskYIELD();
 80053c0:	f00b f932 	bl	8010628 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <prvCLITask+0x190>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	444b      	add	r3, r9
 80053ca:	3b01      	subs	r3, #1
 80053cc:	781c      	ldrb	r4, [r3, #0]
 80053ce:	2c3f      	cmp	r4, #63	; 0x3f
 80053d0:	d8a5      	bhi.n	800531e <prvCLITask+0xb2>
			if(UARTRxBuf[PcPort - 1][chr]){
 80053d2:	4e0a      	ldr	r6, [pc, #40]	; (80053fc <prvCLITask+0x190>)
 80053d4:	4d11      	ldr	r5, [pc, #68]	; (800541c <prvCLITask+0x1b0>)
 80053d6:	e7c6      	b.n	8005366 <prvCLITask+0xfa>
				strcpy((char* )cInputString,(char* )cLastInputString);
 80053d8:	4913      	ldr	r1, [pc, #76]	; (8005428 <prvCLITask+0x1bc>)
 80053da:	4811      	ldr	r0, [pc, #68]	; (8005420 <prvCLITask+0x1b4>)
 80053dc:	f00f f951 	bl	8014682 <strcpy>
 80053e0:	e7db      	b.n	800539a <prvCLITask+0x12e>
				if(cInputIndex > 0){
 80053e2:	4643      	mov	r3, r8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	ddeb      	ble.n	80053c0 <prvCLITask+0x154>
					cInputIndex--;
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b25b      	sxtb	r3, r3
 80053ec:	4698      	mov	r8, r3
					cInputString[cInputIndex] ='\0';
 80053ee:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <prvCLITask+0x1b4>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	4641      	mov	r1, r8
 80053f4:	545a      	strb	r2, [r3, r1]
 80053f6:	e7e3      	b.n	80053c0 <prvCLITask+0x154>
 80053f8:	20006aa8 	.word	0x20006aa8
 80053fc:	20000a7f 	.word	0x20000a7f
 8005400:	20000050 	.word	0x20000050
 8005404:	0801a9b0 	.word	0x0801a9b0
 8005408:	2000107e 	.word	0x2000107e
 800540c:	20001228 	.word	0x20001228
 8005410:	0801ac60 	.word	0x0801ac60
 8005414:	0801ac8c 	.word	0x0801ac8c
 8005418:	20001458 	.word	0x20001458
 800541c:	200012d8 	.word	0x200012d8
 8005420:	20001158 	.word	0x20001158
 8005424:	0801c4c0 	.word	0x0801c4c0
 8005428:	200011f4 	.word	0x200011f4

0800542c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005430:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <ParseSnippetCommand+0x78>)
 8005432:	781a      	ldrb	r2, [r3, #0]
 8005434:	3a01      	subs	r2, #1
 8005436:	0093      	lsls	r3, r2, #2
 8005438:	189b      	adds	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <ParseSnippetCommand+0x7c>)
 800543e:	18d3      	adds	r3, r2, r3
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d02c      	beq.n	80054a0 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005446:	4b19      	ldr	r3, [pc, #100]	; (80054ac <ParseSnippetCommand+0x80>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d014      	beq.n	8005478 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800544e:	4b17      	ldr	r3, [pc, #92]	; (80054ac <ParseSnippetCommand+0x80>)
 8005450:	681e      	ldr	r6, [r3, #0]
 8005452:	7833      	ldrb	r3, [r6, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005458:	2113      	movs	r1, #19
 800545a:	0030      	movs	r0, r6
 800545c:	f00f f903 	bl	8014666 <strchr>
 8005460:	1e05      	subs	r5, r0, #0
	if(ptrEnd != NULL){
 8005462:	d011      	beq.n	8005488 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005464:	1b82      	subs	r2, r0, r6
 8005466:	0031      	movs	r1, r6
 8005468:	0020      	movs	r0, r4
 800546a:	f00f f923 	bl	80146b4 <strncpy>
		ptrStart =ptrEnd + 1;
 800546e:	3501      	adds	r5, #1
 8005470:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <ParseSnippetCommand+0x80>)
 8005472:	601d      	str	r5, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005474:	2001      	movs	r0, #1
}
 8005476:	bd70      	pop	{r4, r5, r6, pc}
		ptrStart =snippetBuffer;
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <ParseSnippetCommand+0x80>)
 800547a:	6018      	str	r0, [r3, #0]
 800547c:	e7e7      	b.n	800544e <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800547e:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <ParseSnippetCommand+0x80>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
		return false;
 8005484:	2000      	movs	r0, #0
 8005486:	e7f6      	b.n	8005476 <ParseSnippetCommand+0x4a>
		strcpy((char* )cliBuffer,ptrStart);
 8005488:	0031      	movs	r1, r6
 800548a:	0020      	movs	r0, r4
 800548c:	f00f f8f9 	bl	8014682 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005490:	0020      	movs	r0, r4
 8005492:	f7fa fe41 	bl	8000118 <strlen>
 8005496:	1836      	adds	r6, r6, r0
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <ParseSnippetCommand+0x80>)
 800549a:	601e      	str	r6, [r3, #0]
	return true;
 800549c:	2001      	movs	r0, #1
 800549e:	e7ea      	b.n	8005476 <ParseSnippetCommand+0x4a>
		return false;
 80054a0:	2000      	movs	r0, #0
 80054a2:	e7e8      	b.n	8005476 <ParseSnippetCommand+0x4a>
 80054a4:	20001227 	.word	0x20001227
 80054a8:	20006ac4 	.word	0x20006ac4
 80054ac:	20001250 	.word	0x20001250

080054b0 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 80054b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b2:	b083      	sub	sp, #12
 80054b4:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80054b6:	0083      	lsls	r3, r0, #2
 80054b8:	181b      	adds	r3, r3, r0
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4a3e      	ldr	r2, [pc, #248]	; (80055b8 <CheckSnippetCondition+0x108>)
 80054be:	5c9b      	ldrb	r3, [r3, r2]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d021      	beq.n	8005508 <CheckSnippetCondition+0x58>
 80054c4:	2000      	movs	r0, #0
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d130      	bne.n	800552c <CheckSnippetCondition+0x7c>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80054ca:	4d3b      	ldr	r5, [pc, #236]	; (80055b8 <CheckSnippetCondition+0x108>)
 80054cc:	00a6      	lsls	r6, r4, #2
 80054ce:	1933      	adds	r3, r6, r4
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	18eb      	adds	r3, r5, r3
 80054d4:	78da      	ldrb	r2, [r3, #3]
 80054d6:	3a01      	subs	r2, #1
 80054d8:	0053      	lsls	r3, r2, #1
 80054da:	189b      	adds	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4a37      	ldr	r2, [pc, #220]	; (80055bc <CheckSnippetCondition+0x10c>)
 80054e0:	589b      	ldr	r3, [r3, r2]
 80054e2:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80054e4:	1931      	adds	r1, r6, r4
 80054e6:	0089      	lsls	r1, r1, #2
 80054e8:	3106      	adds	r1, #6
 80054ea:	1949      	adds	r1, r1, r5
 80054ec:	2204      	movs	r2, #4
 80054ee:	a801      	add	r0, sp, #4
 80054f0:	f00e fe8e 	bl	8014210 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 80054f4:	1936      	adds	r6, r6, r4
 80054f6:	00b6      	lsls	r6, r6, #2
 80054f8:	19ad      	adds	r5, r5, r6
 80054fa:	786b      	ldrb	r3, [r5, #1]
 80054fc:	2b06      	cmp	r3, #6
 80054fe:	d853      	bhi.n	80055a8 <CheckSnippetCondition+0xf8>
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4a2f      	ldr	r2, [pc, #188]	; (80055c0 <CheckSnippetCondition+0x110>)
 8005504:	58d3      	ldr	r3, [r2, r3]
 8005506:	469f      	mov	pc, r3
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005508:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <CheckSnippetCondition+0x108>)
 800550a:	0080      	lsls	r0, r0, #2
 800550c:	1903      	adds	r3, r0, r4
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	18d3      	adds	r3, r2, r3
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005512:	7899      	ldrb	r1, [r3, #2]
 8005514:	00cb      	lsls	r3, r1, #3
 8005516:	185b      	adds	r3, r3, r1
 8005518:	1900      	adds	r0, r0, r4
 800551a:	0080      	lsls	r0, r0, #2
 800551c:	1812      	adds	r2, r2, r0
 800551e:	4929      	ldr	r1, [pc, #164]	; (80055c4 <CheckSnippetCondition+0x114>)
 8005520:	5c58      	ldrb	r0, [r3, r1]
 8005522:	78d3      	ldrb	r3, [r2, #3]
 8005524:	1ac0      	subs	r0, r0, r3
 8005526:	4243      	negs	r3, r0
 8005528:	4158      	adcs	r0, r3
 800552a:	b2c0      	uxtb	r0, r0
		default:
			break;
	}
	
	return false;
}
 800552c:	b003      	add	sp, #12
 800552e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if(flt1 == flt2)
 8005530:	1c39      	adds	r1, r7, #0
 8005532:	9801      	ldr	r0, [sp, #4]
 8005534:	f7fa ffcc 	bl	80004d0 <__aeabi_fcmpeq>
 8005538:	1e43      	subs	r3, r0, #1
 800553a:	4198      	sbcs	r0, r3
 800553c:	e7f6      	b.n	800552c <CheckSnippetCondition+0x7c>
					if(flt1 > flt2)
 800553e:	1c39      	adds	r1, r7, #0
 8005540:	9801      	ldr	r0, [sp, #4]
 8005542:	f7fa ffcb 	bl	80004dc <__aeabi_fcmplt>
 8005546:	1e43      	subs	r3, r0, #1
 8005548:	4198      	sbcs	r0, r3
 800554a:	e7ef      	b.n	800552c <CheckSnippetCondition+0x7c>
					if(flt1 < flt2 && flt1 != 0.0f)
 800554c:	1c39      	adds	r1, r7, #0
 800554e:	9801      	ldr	r0, [sp, #4]
 8005550:	f7fa ffd8 	bl	8000504 <__aeabi_fcmpgt>
 8005554:	2800      	cmp	r0, #0
 8005556:	d029      	beq.n	80055ac <CheckSnippetCondition+0xfc>
 8005558:	2100      	movs	r1, #0
 800555a:	1c38      	adds	r0, r7, #0
 800555c:	f7fa ffb8 	bl	80004d0 <__aeabi_fcmpeq>
 8005560:	4243      	negs	r3, r0
 8005562:	4158      	adcs	r0, r3
 8005564:	e7e2      	b.n	800552c <CheckSnippetCondition+0x7c>
					if(flt1 >= flt2)
 8005566:	1c39      	adds	r1, r7, #0
 8005568:	9801      	ldr	r0, [sp, #4]
 800556a:	f7fa ffc1 	bl	80004f0 <__aeabi_fcmple>
 800556e:	1e43      	subs	r3, r0, #1
 8005570:	4198      	sbcs	r0, r3
 8005572:	e7db      	b.n	800552c <CheckSnippetCondition+0x7c>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005574:	1c39      	adds	r1, r7, #0
 8005576:	9801      	ldr	r0, [sp, #4]
 8005578:	f7fa ffce 	bl	8000518 <__aeabi_fcmpge>
 800557c:	2800      	cmp	r0, #0
 800557e:	d017      	beq.n	80055b0 <CheckSnippetCondition+0x100>
 8005580:	2100      	movs	r1, #0
 8005582:	1c38      	adds	r0, r7, #0
 8005584:	f7fa ffa4 	bl	80004d0 <__aeabi_fcmpeq>
 8005588:	4243      	negs	r3, r0
 800558a:	4158      	adcs	r0, r3
 800558c:	e7ce      	b.n	800552c <CheckSnippetCondition+0x7c>
					if(flt1 != flt2 && flt1 != 0.0f)
 800558e:	1c39      	adds	r1, r7, #0
 8005590:	9801      	ldr	r0, [sp, #4]
 8005592:	f7fa ff9d 	bl	80004d0 <__aeabi_fcmpeq>
 8005596:	2800      	cmp	r0, #0
 8005598:	d10c      	bne.n	80055b4 <CheckSnippetCondition+0x104>
 800559a:	2100      	movs	r1, #0
 800559c:	1c38      	adds	r0, r7, #0
 800559e:	f7fa ff97 	bl	80004d0 <__aeabi_fcmpeq>
 80055a2:	4243      	negs	r3, r0
 80055a4:	4158      	adcs	r0, r3
 80055a6:	e7c1      	b.n	800552c <CheckSnippetCondition+0x7c>
			switch(snippets[index].cond.mathOperator){
 80055a8:	2000      	movs	r0, #0
 80055aa:	e7bf      	b.n	800552c <CheckSnippetCondition+0x7c>
	return false;
 80055ac:	2000      	movs	r0, #0
 80055ae:	e7bd      	b.n	800552c <CheckSnippetCondition+0x7c>
 80055b0:	2000      	movs	r0, #0
 80055b2:	e7bb      	b.n	800552c <CheckSnippetCondition+0x7c>
 80055b4:	2000      	movs	r0, #0
 80055b6:	e7b9      	b.n	800552c <CheckSnippetCondition+0x7c>
 80055b8:	20006ac4 	.word	0x20006ac4
 80055bc:	20000084 	.word	0x20000084
 80055c0:	0801af20 	.word	0x0801af20
 80055c4:	20001524 	.word	0x20001524

080055c8 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	46ce      	mov	lr, r9
 80055cc:	4647      	mov	r7, r8
 80055ce:	b580      	push	{r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80055d0:	f009 f904 	bl	800e7dc <FreeRTOS_CLIGetOutputBuffer>
 80055d4:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80055d6:	4b20      	ldr	r3, [pc, #128]	; (8005658 <ExecuteSnippet+0x90>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d036      	beq.n	800564c <ExecuteSnippet+0x84>
 80055de:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 80055e0:	4f1e      	ldr	r7, [pc, #120]	; (800565c <ExecuteSnippet+0x94>)
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80055e2:	4b1f      	ldr	r3, [pc, #124]	; (8005660 <ExecuteSnippet+0x98>)
 80055e4:	4698      	mov	r8, r3
 80055e6:	e01a      	b.n	800561e <ExecuteSnippet+0x56>
 80055e8:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <ExecuteSnippet+0x9c>)
 80055ea:	7818      	ldrb	r0, [r3, #0]
 80055ec:	0033      	movs	r3, r6
 80055ee:	4642      	mov	r2, r8
 80055f0:	2100      	movs	r1, #0
 80055f2:	f7ff fc1f 	bl	8004e34 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80055f6:	0030      	movs	r0, r6
 80055f8:	f7fa fd8e 	bl	8000118 <strlen>
 80055fc:	0002      	movs	r2, r0
 80055fe:	2100      	movs	r1, #0
 8005600:	0030      	movs	r0, r6
 8005602:	f00e fe0e 	bl	8014222 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005606:	4649      	mov	r1, r9
 8005608:	68e8      	ldr	r0, [r5, #12]
 800560a:	f7ff ff0f 	bl	800542c <ParseSnippetCommand>
 800560e:	2800      	cmp	r0, #0
 8005610:	d1ea      	bne.n	80055e8 <ExecuteSnippet+0x20>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005612:	3401      	adds	r4, #1
 8005614:	b2a4      	uxth	r4, r4
 8005616:	4b10      	ldr	r3, [pc, #64]	; (8005658 <ExecuteSnippet+0x90>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	42a3      	cmp	r3, r4
 800561c:	d916      	bls.n	800564c <ExecuteSnippet+0x84>
		if(snippets[s].state)								// Check for activated Snippets
 800561e:	00a3      	lsls	r3, r4, #2
 8005620:	191b      	adds	r3, r3, r4
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	7c1b      	ldrb	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f2      	beq.n	8005612 <ExecuteSnippet+0x4a>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800562c:	b2e0      	uxtb	r0, r4
 800562e:	f7ff ff3f 	bl	80054b0 <CheckSnippetCondition>
 8005632:	2800      	cmp	r0, #0
 8005634:	d0ed      	beq.n	8005612 <ExecuteSnippet+0x4a>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005636:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <ExecuteSnippet+0xa0>)
 8005638:	2220      	movs	r2, #32
 800563a:	719a      	strb	r2, [r3, #6]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800563c:	4b08      	ldr	r3, [pc, #32]	; (8005660 <ExecuteSnippet+0x98>)
 800563e:	4699      	mov	r9, r3
 8005640:	00a3      	lsls	r3, r4, #2
 8005642:	191d      	adds	r5, r3, r4
 8005644:	00ad      	lsls	r5, r5, #2
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <ExecuteSnippet+0x94>)
 8005648:	195d      	adds	r5, r3, r5
 800564a:	e7dc      	b.n	8005606 <ExecuteSnippet+0x3e>
			}
		}
	}
	
	return result;
}
 800564c:	2000      	movs	r0, #0
 800564e:	bcc0      	pop	{r6, r7}
 8005650:	46b9      	mov	r9, r7
 8005652:	46b0      	mov	r8, r6
 8005654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	20001227 	.word	0x20001227
 800565c:	20006ac4 	.word	0x20006ac4
 8005660:	200011c0 	.word	0x200011c0
 8005664:	20000a7f 	.word	0x20000a7f
 8005668:	20006aa8 	.word	0x20006aa8

0800566c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800566c:	2000      	movs	r0, #0
 800566e:	4770      	bx	lr

08005670 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	0004      	movs	r4, r0
 8005676:	0015      	movs	r5, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005678:	2300      	movs	r3, #0
 800567a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800567c:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800567e:	2800      	cmp	r0, #0
 8005680:	d015      	beq.n	80056ae <setBaudrateCommand+0x3e>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005682:	aa01      	add	r2, sp, #4
 8005684:	2101      	movs	r1, #1
 8005686:	0028      	movs	r0, r5
 8005688:	f009 f8ac 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800568c:	2300      	movs	r3, #0
 800568e:	56c3      	ldrsb	r3, [r0, r3]
 8005690:	2b70      	cmp	r3, #112	; 0x70
 8005692:	d00e      	beq.n	80056b2 <setBaudrateCommand+0x42>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005694:	466a      	mov	r2, sp
 8005696:	2102      	movs	r1, #2
 8005698:	0028      	movs	r0, r5
 800569a:	f009 f8a3 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 800569e:	f00e fb56 	bl	8013d4e <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80056a2:	2213      	movs	r2, #19
 80056a4:	4910      	ldr	r1, [pc, #64]	; (80056e8 <setBaudrateCommand+0x78>)
 80056a6:	0020      	movs	r0, r4
 80056a8:	f00e fdb2 	bl	8014210 <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 80056ac:	e018      	b.n	80056e0 <setBaudrateCommand+0x70>
	configASSERT(pcWriteBuffer);
 80056ae:	b672      	cpsid	i
 80056b0:	e7fe      	b.n	80056b0 <setBaudrateCommand+0x40>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056b2:	3001      	adds	r0, #1
 80056b4:	f00e fb4b 	bl	8013d4e <atol>
 80056b8:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056ba:	466a      	mov	r2, sp
 80056bc:	2102      	movs	r1, #2
 80056be:	0028      	movs	r0, r5
 80056c0:	f009 f890 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80056c4:	f00e fb43 	bl	8013d4e <atol>
 80056c8:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 80056ca:	b2f0      	uxtb	r0, r6
 80056cc:	0029      	movs	r1, r5
 80056ce:	f008 fea3 	bl	800e418 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80056d2:	23ff      	movs	r3, #255	; 0xff
 80056d4:	4033      	ands	r3, r6
 80056d6:	002a      	movs	r2, r5
 80056d8:	4904      	ldr	r1, [pc, #16]	; (80056ec <setBaudrateCommand+0x7c>)
 80056da:	0020      	movs	r0, r4
 80056dc:	f00e ff96 	bl	801460c <sprintf>
}
 80056e0:	2000      	movs	r0, #0
 80056e2:	b002      	add	sp, #8
 80056e4:	bd70      	pop	{r4, r5, r6, pc}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	0801af64 	.word	0x0801af64
 80056ec:	0801af3c 	.word	0x0801af3c

080056f0 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056f0:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d006      	beq.n	8005704 <flashsizeCommand+0x14>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80056f6:	4b04      	ldr	r3, [pc, #16]	; (8005708 <flashsizeCommand+0x18>)
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	4904      	ldr	r1, [pc, #16]	; (800570c <flashsizeCommand+0x1c>)
 80056fc:	f00e ff86 	bl	801460c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005700:	2000      	movs	r0, #0
 8005702:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005704:	b672      	cpsid	i
 8005706:	e7fe      	b.n	8005706 <flashsizeCommand+0x16>
 8005708:	1ffff7cc 	.word	0x1ffff7cc
 800570c:	0801af78 	.word	0x0801af78

08005710 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005710:	b510      	push	{r4, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	0004      	movs	r4, r0
 8005716:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005718:	2300      	movs	r3, #0
 800571a:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 800571c:	2300      	movs	r3, #0
 800571e:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005720:	2c00      	cmp	r4, #0
 8005722:	d00f      	beq.n	8005744 <GetReadPrecentageCommand+0x34>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005724:	aa01      	add	r2, sp, #4
 8005726:	2101      	movs	r1, #1
 8005728:	f009 f85c 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800572c:	7803      	ldrb	r3, [r0, #0]
 800572e:	3b32      	subs	r3, #50	; 0x32
 8005730:	2b01      	cmp	r3, #1
 8005732:	d909      	bls.n	8005748 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005734:	2215      	movs	r2, #21
 8005736:	490c      	ldr	r1, [pc, #48]	; (8005768 <GetReadPrecentageCommand+0x58>)
 8005738:	0020      	movs	r0, r4
 800573a:	f00e fd69 	bl	8014210 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 800573e:	2000      	movs	r0, #0
 8005740:	b002      	add	sp, #8
 8005742:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005744:	b672      	cpsid	i
 8005746:	e7fe      	b.n	8005746 <GetReadPrecentageCommand+0x36>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005748:	f00e fb01 	bl	8013d4e <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 800574c:	b2c0      	uxtb	r0, r0
 800574e:	4669      	mov	r1, sp
 8005750:	f003 fa40 	bl	8008bd4 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005754:	9800      	ldr	r0, [sp, #0]
 8005756:	f7fd fa99 	bl	8002c8c <__aeabi_f2d>
 800575a:	0002      	movs	r2, r0
 800575c:	000b      	movs	r3, r1
 800575e:	4903      	ldr	r1, [pc, #12]	; (800576c <GetReadPrecentageCommand+0x5c>)
 8005760:	0020      	movs	r0, r4
 8005762:	f00e ff53 	bl	801460c <sprintf>
 8005766:	e7ea      	b.n	800573e <GetReadPrecentageCommand+0x2e>
 8005768:	0801afbc 	.word	0x0801afbc
 800576c:	0801af98 	.word	0x0801af98

08005770 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005770:	b510      	push	{r4, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005776:	2300      	movs	r3, #0
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800577c:	2800      	cmp	r0, #0
 800577e:	d013      	beq.n	80057a8 <ReadVrefCommand+0x38>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005780:	4669      	mov	r1, sp
 8005782:	a801      	add	r0, sp, #4
 8005784:	f003 f964 	bl	8008a50 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005788:	a901      	add	r1, sp, #4
 800578a:	0020      	movs	r0, r4
 800578c:	f00e ff79 	bl	8014682 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005790:	9800      	ldr	r0, [sp, #0]
 8005792:	f7fd fa7b 	bl	8002c8c <__aeabi_f2d>
 8005796:	0002      	movs	r2, r0
 8005798:	000b      	movs	r3, r1
 800579a:	4904      	ldr	r1, [pc, #16]	; (80057ac <ReadVrefCommand+0x3c>)
 800579c:	0020      	movs	r0, r4
 800579e:	f00e ff35 	bl	801460c <sprintf>
}
 80057a2:	2000      	movs	r0, #0
 80057a4:	b002      	add	sp, #8
 80057a6:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80057a8:	b672      	cpsid	i
 80057aa:	e7fe      	b.n	80057aa <ReadVrefCommand+0x3a>
 80057ac:	0801afd4 	.word	0x0801afd4

080057b0 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057b0:	b510      	push	{r4, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80057bc:	2800      	cmp	r0, #0
 80057be:	d013      	beq.n	80057e8 <ReadTempCommand+0x38>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80057c0:	4669      	mov	r1, sp
 80057c2:	a801      	add	r0, sp, #4
 80057c4:	f003 f944 	bl	8008a50 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80057c8:	a901      	add	r1, sp, #4
 80057ca:	0020      	movs	r0, r4
 80057cc:	f00e ff59 	bl	8014682 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80057d0:	9801      	ldr	r0, [sp, #4]
 80057d2:	f7fd fa5b 	bl	8002c8c <__aeabi_f2d>
 80057d6:	0002      	movs	r2, r0
 80057d8:	000b      	movs	r3, r1
 80057da:	4904      	ldr	r1, [pc, #16]	; (80057ec <ReadTempCommand+0x3c>)
 80057dc:	0020      	movs	r0, r4
 80057de:	f00e ff15 	bl	801460c <sprintf>
}
 80057e2:	2000      	movs	r0, #0
 80057e4:	b002      	add	sp, #8
 80057e6:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80057e8:	b672      	cpsid	i
 80057ea:	e7fe      	b.n	80057ea <ReadTempCommand+0x3a>
 80057ec:	0801affc 	.word	0x0801affc

080057f0 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	0004      	movs	r4, r0
 80057f6:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80057fc:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80057fe:	2300      	movs	r3, #0
 8005800:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005802:	2800      	cmp	r0, #0
 8005804:	d017      	beq.n	8005836 <ADCReadCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005806:	aa03      	add	r2, sp, #12
 8005808:	2101      	movs	r1, #1
 800580a:	0030      	movs	r0, r6
 800580c:	f008 ffea 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8005810:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005812:	aa02      	add	r2, sp, #8
 8005814:	2102      	movs	r1, #2
 8005816:	0030      	movs	r0, r6
 8005818:	f008 ffe4 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 800581c:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800581e:	782b      	ldrb	r3, [r5, #0]
 8005820:	3b32      	subs	r3, #50	; 0x32
 8005822:	2b01      	cmp	r3, #1
 8005824:	d909      	bls.n	800583a <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005826:	2215      	movs	r2, #21
 8005828:	491a      	ldr	r1, [pc, #104]	; (8005894 <ADCReadCommand+0xa4>)
 800582a:	0020      	movs	r0, r4
 800582c:	f00e fcf0 	bl	8014210 <memcpy>
}
 8005830:	2000      	movs	r0, #0
 8005832:	b004      	add	sp, #16
 8005834:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8005836:	b672      	cpsid	i
 8005838:	e7fe      	b.n	8005838 <ADCReadCommand+0x48>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800583a:	0028      	movs	r0, r5
 800583c:	f00e fa87 	bl	8013d4e <atol>
 8005840:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005842:	4915      	ldr	r1, [pc, #84]	; (8005898 <ADCReadCommand+0xa8>)
 8005844:	0030      	movs	r0, r6
 8005846:	f7fa fc5d 	bl	8000104 <strcmp>
 800584a:	2800      	cmp	r0, #0
 800584c:	d005      	beq.n	800585a <ADCReadCommand+0x6a>
 800584e:	4913      	ldr	r1, [pc, #76]	; (800589c <ADCReadCommand+0xac>)
 8005850:	0030      	movs	r0, r6
 8005852:	f7fa fc57 	bl	8000104 <strcmp>
 8005856:	2800      	cmp	r0, #0
 8005858:	d116      	bne.n	8005888 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 800585a:	4e0f      	ldr	r6, [pc, #60]	; (8005898 <ADCReadCommand+0xa8>)
 800585c:	0031      	movs	r1, r6
 800585e:	0028      	movs	r0, r5
 8005860:	f003 fa82 	bl	8008d68 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005864:	aa01      	add	r2, sp, #4
 8005866:	0031      	movs	r1, r6
 8005868:	0028      	movs	r0, r5
 800586a:	f003 faab 	bl	8008dc4 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800586e:	a901      	add	r1, sp, #4
 8005870:	0020      	movs	r0, r4
 8005872:	f00e ff06 	bl	8014682 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005876:	9801      	ldr	r0, [sp, #4]
 8005878:	f7fa fea0 	bl	80005bc <__aeabi_f2uiz>
 800587c:	b282      	uxth	r2, r0
 800587e:	4908      	ldr	r1, [pc, #32]	; (80058a0 <ADCReadCommand+0xb0>)
 8005880:	0020      	movs	r0, r4
 8005882:	f00e fec3 	bl	801460c <sprintf>
 8005886:	e7d3      	b.n	8005830 <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005888:	2212      	movs	r2, #18
 800588a:	4906      	ldr	r1, [pc, #24]	; (80058a4 <ADCReadCommand+0xb4>)
 800588c:	0020      	movs	r0, r4
 800588e:	f00e fcbf 	bl	8014210 <memcpy>
 8005892:	e7cd      	b.n	8005830 <ADCReadCommand+0x40>
 8005894:	0801afbc 	.word	0x0801afbc
 8005898:	0801b020 	.word	0x0801b020
 800589c:	0801b024 	.word	0x0801b024
 80058a0:	0801b02c 	.word	0x0801b02c
 80058a4:	0801b03c 	.word	0x0801b03c

080058a8 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058aa:	46d6      	mov	lr, sl
 80058ac:	464f      	mov	r7, r9
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b085      	sub	sp, #20
 80058b2:	0004      	movs	r4, r0
 80058b4:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80058ba:	4b63      	ldr	r3, [pc, #396]	; (8005a48 <testportCommand+0x1a0>)
 80058bc:	781a      	ldrb	r2, [r3, #0]
 80058be:	ab02      	add	r3, sp, #8
 80058c0:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 80058c2:	2c00      	cmp	r4, #0
 80058c4:	d012      	beq.n	80058ec <testportCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058c6:	aa03      	add	r2, sp, #12
 80058c8:	2101      	movs	r1, #1
 80058ca:	f008 ff8b 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 80058ce:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80058d0:	495e      	ldr	r1, [pc, #376]	; (8005a4c <testportCommand+0x1a4>)
 80058d2:	f7fa fc17 	bl	8000104 <strcmp>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d174      	bne.n	80059c4 <testportCommand+0x11c>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 80058da:	4b5d      	ldr	r3, [pc, #372]	; (8005a50 <testportCommand+0x1a8>)
 80058dc:	781a      	ldrb	r2, [r3, #0]
 80058de:	4b5d      	ldr	r3, [pc, #372]	; (8005a54 <testportCommand+0x1ac>)
 80058e0:	189b      	adds	r3, r3, r2
 80058e2:	3b01      	subs	r3, #1
 80058e4:	781f      	ldrb	r7, [r3, #0]
 80058e6:	2501      	movs	r5, #1
			if(PcPort != ports){
 80058e8:	4e59      	ldr	r6, [pc, #356]	; (8005a50 <testportCommand+0x1a8>)
 80058ea:	e03e      	b.n	800596a <testportCommand+0xc2>
	configASSERT(pcWriteBuffer);
 80058ec:	b672      	cpsid	i
 80058ee:	e7fe      	b.n	80058ee <testportCommand+0x46>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80058f0:	002a      	movs	r2, r5
 80058f2:	4959      	ldr	r1, [pc, #356]	; (8005a58 <testportCommand+0x1b0>)
 80058f4:	0020      	movs	r0, r4
 80058f6:	f00e fe89 	bl	801460c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80058fa:	0020      	movs	r0, r4
 80058fc:	f7fa fc0c 	bl	8000118 <strlen>
 8005900:	b282      	uxth	r2, r0
 8005902:	4b53      	ldr	r3, [pc, #332]	; (8005a50 <testportCommand+0x1a8>)
 8005904:	7818      	ldrb	r0, [r3, #0]
 8005906:	2364      	movs	r3, #100	; 0x64
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	3b5a      	subs	r3, #90	; 0x5a
 800590c:	0021      	movs	r1, r4
 800590e:	f008 fd13 	bl	800e338 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005912:	2254      	movs	r2, #84	; 0x54
 8005914:	4951      	ldr	r1, [pc, #324]	; (8005a5c <testportCommand+0x1b4>)
 8005916:	0020      	movs	r0, r4
 8005918:	f00e fc7a 	bl	8014210 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800591c:	0020      	movs	r0, r4
 800591e:	f7fa fbfb 	bl	8000118 <strlen>
 8005922:	b282      	uxth	r2, r0
 8005924:	4b4a      	ldr	r3, [pc, #296]	; (8005a50 <testportCommand+0x1a8>)
 8005926:	7818      	ldrb	r0, [r3, #0]
 8005928:	2364      	movs	r3, #100	; 0x64
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	3b5a      	subs	r3, #90	; 0x5a
 800592e:	0021      	movs	r1, r4
 8005930:	f008 fd02 	bl	800e338 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005934:	3701      	adds	r7, #1
 8005936:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <testportCommand+0x1a8>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	3b01      	subs	r3, #1
 800593c:	019b      	lsls	r3, r3, #6
 800593e:	4a48      	ldr	r2, [pc, #288]	; (8005a60 <testportCommand+0x1b8>)
 8005940:	18d3      	adds	r3, r2, r3
 8005942:	5ddb      	ldrb	r3, [r3, r7]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10d      	bne.n	8005964 <testportCommand+0xbc>
 8005948:	4692      	mov	sl, r2
 800594a:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <testportCommand+0x1a8>)
 800594c:	4699      	mov	r9, r3
					Delay_ms(1);
 800594e:	2001      	movs	r0, #1
 8005950:	f00a ffe4 	bl	801091c <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005954:	464b      	mov	r3, r9
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	3b01      	subs	r3, #1
 800595a:	019b      	lsls	r3, r3, #6
 800595c:	4453      	add	r3, sl
 800595e:	5ddb      	ldrb	r3, [r3, r7]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f4      	beq.n	800594e <testportCommand+0xa6>
		for(ports =1; ports <= NumOfPorts; ports++){
 8005964:	3501      	adds	r5, #1
 8005966:	2d07      	cmp	r5, #7
 8005968:	d035      	beq.n	80059d6 <testportCommand+0x12e>
 800596a:	b2eb      	uxtb	r3, r5
 800596c:	4699      	mov	r9, r3
			if(PcPort != ports){
 800596e:	7833      	ldrb	r3, [r6, #0]
 8005970:	454b      	cmp	r3, r9
 8005972:	d0f7      	beq.n	8005964 <testportCommand+0xbc>
				WriteVaule[0] =rand();
 8005974:	f00e fc6e 	bl	8014254 <rand>
 8005978:	466b      	mov	r3, sp
 800597a:	7218      	strb	r0, [r3, #8]
				writePxMutex(ports,WriteVaule,1,10,100);
 800597c:	2364      	movs	r3, #100	; 0x64
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	3b5a      	subs	r3, #90	; 0x5a
 8005982:	2201      	movs	r2, #1
 8005984:	a902      	add	r1, sp, #8
 8005986:	4648      	mov	r0, r9
 8005988:	f008 fcd6 	bl	800e338 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800598c:	4648      	mov	r0, r9
 800598e:	f008 fcb1 	bl	800e2f4 <GetUart>
 8005992:	6803      	ldr	r3, [r0, #0]
 8005994:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005996:	466a      	mov	r2, sp
 8005998:	7a12      	ldrb	r2, [r2, #8]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	429a      	cmp	r2, r3
 800599e:	d0a7      	beq.n	80058f0 <testportCommand+0x48>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 80059a0:	002a      	movs	r2, r5
 80059a2:	4930      	ldr	r1, [pc, #192]	; (8005a64 <testportCommand+0x1bc>)
 80059a4:	0020      	movs	r0, r4
 80059a6:	f00e fe31 	bl	801460c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80059aa:	0020      	movs	r0, r4
 80059ac:	f7fa fbb4 	bl	8000118 <strlen>
 80059b0:	b282      	uxth	r2, r0
 80059b2:	4b27      	ldr	r3, [pc, #156]	; (8005a50 <testportCommand+0x1a8>)
 80059b4:	7818      	ldrb	r0, [r3, #0]
 80059b6:	2364      	movs	r3, #100	; 0x64
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	3b5a      	subs	r3, #90	; 0x5a
 80059bc:	0021      	movs	r1, r4
 80059be:	f008 fcbb 	bl	800e338 <writePxMutex>
 80059c2:	e7a6      	b.n	8005912 <testportCommand+0x6a>
	else if(pcParameterString1[0] == 'p'){
 80059c4:	2300      	movs	r3, #0
 80059c6:	56eb      	ldrsb	r3, [r5, r3]
 80059c8:	2b70      	cmp	r3, #112	; 0x70
 80059ca:	d00a      	beq.n	80059e2 <testportCommand+0x13a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059cc:	220f      	movs	r2, #15
 80059ce:	4926      	ldr	r1, [pc, #152]	; (8005a68 <testportCommand+0x1c0>)
 80059d0:	0020      	movs	r0, r4
 80059d2:	f00e fc1d 	bl	8014210 <memcpy>
}
 80059d6:	2000      	movs	r0, #0
 80059d8:	b005      	add	sp, #20
 80059da:	bcc0      	pop	{r6, r7}
 80059dc:	46ba      	mov	sl, r7
 80059de:	46b1      	mov	r9, r6
 80059e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059e2:	1c68      	adds	r0, r5, #1
 80059e4:	f00e f9b3 	bl	8013d4e <atol>
 80059e8:	0005      	movs	r5, r0
 80059ea:	b2c6      	uxtb	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 80059ec:	1e73      	subs	r3, r6, #1
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d905      	bls.n	80059fe <testportCommand+0x156>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80059f2:	221b      	movs	r2, #27
 80059f4:	491d      	ldr	r1, [pc, #116]	; (8005a6c <testportCommand+0x1c4>)
 80059f6:	0020      	movs	r0, r4
 80059f8:	f00e fc0a 	bl	8014210 <memcpy>
	return pdFALSE;
 80059fc:	e7eb      	b.n	80059d6 <testportCommand+0x12e>
				WriteVaule[0] =rand();
 80059fe:	f00e fc29 	bl	8014254 <rand>
 8005a02:	466b      	mov	r3, sp
 8005a04:	7218      	strb	r0, [r3, #8]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a06:	2364      	movs	r3, #100	; 0x64
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	3b32      	subs	r3, #50	; 0x32
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	a902      	add	r1, sp, #8
 8005a10:	0030      	movs	r0, r6
 8005a12:	f008 fc91 	bl	800e338 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005a16:	0030      	movs	r0, r6
 8005a18:	f008 fc6c 	bl	800e2f4 <GetUart>
 8005a1c:	6803      	ldr	r3, [r0, #0]
 8005a1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 8005a20:	466a      	mov	r2, sp
 8005a22:	7a12      	ldrb	r2, [r2, #8]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d006      	beq.n	8005a38 <testportCommand+0x190>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005a2a:	22ff      	movs	r2, #255	; 0xff
 8005a2c:	402a      	ands	r2, r5
 8005a2e:	490d      	ldr	r1, [pc, #52]	; (8005a64 <testportCommand+0x1bc>)
 8005a30:	0020      	movs	r0, r4
 8005a32:	f00e fdeb 	bl	801460c <sprintf>
 8005a36:	e7ce      	b.n	80059d6 <testportCommand+0x12e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005a38:	22ff      	movs	r2, #255	; 0xff
 8005a3a:	402a      	ands	r2, r5
 8005a3c:	4906      	ldr	r1, [pc, #24]	; (8005a58 <testportCommand+0x1b0>)
 8005a3e:	0020      	movs	r0, r4
 8005a40:	f00e fde4 	bl	801460c <sprintf>
 8005a44:	e7c7      	b.n	80059d6 <testportCommand+0x12e>
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	0801b100 	.word	0x0801b100
 8005a4c:	0801a740 	.word	0x0801a740
 8005a50:	20000a7f 	.word	0x20000a7f
 8005a54:	20001458 	.word	0x20001458
 8005a58:	0801b050 	.word	0x0801b050
 8005a5c:	0801b080 	.word	0x0801b080
 8005a60:	200012d8 	.word	0x200012d8
 8005a64:	0801b06c 	.word	0x0801b06c
 8005a68:	0801b0d4 	.word	0x0801b0d4
 8005a6c:	0801b0e4 	.word	0x0801b0e4

08005a70 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a72:	b083      	sub	sp, #12
 8005a74:	0004      	movs	r4, r0
 8005a76:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d017      	beq.n	8005ab2 <unbridgeCommand+0x42>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a82:	aa01      	add	r2, sp, #4
 8005a84:	2101      	movs	r1, #1
 8005a86:	0028      	movs	r0, r5
 8005a88:	f008 feac 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	56c3      	ldrsb	r3, [r0, r3]
 8005a90:	2b70      	cmp	r3, #112	; 0x70
 8005a92:	d010      	beq.n	8005ab6 <unbridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a94:	466a      	mov	r2, sp
 8005a96:	2102      	movs	r1, #2
 8005a98:	0028      	movs	r0, r5
 8005a9a:	f008 fea3 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	56c3      	ldrsb	r3, [r0, r3]
 8005aa2:	2b70      	cmp	r3, #112	; 0x70
 8005aa4:	d028      	beq.n	8005af8 <unbridgeCommand+0x88>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005aa6:	220f      	movs	r2, #15
 8005aa8:	491a      	ldr	r1, [pc, #104]	; (8005b14 <unbridgeCommand+0xa4>)
 8005aaa:	0020      	movs	r0, r4
 8005aac:	f00e fbb0 	bl	8014210 <memcpy>
 8005ab0:	e02d      	b.n	8005b0e <unbridgeCommand+0x9e>
	configASSERT(pcWriteBuffer);
 8005ab2:	b672      	cpsid	i
 8005ab4:	e7fe      	b.n	8005ab4 <unbridgeCommand+0x44>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f00e f949 	bl	8013d4e <atol>
 8005abc:	0006      	movs	r6, r0
 8005abe:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ac0:	466a      	mov	r2, sp
 8005ac2:	2102      	movs	r1, #2
 8005ac4:	0028      	movs	r0, r5
 8005ac6:	f008 fe8d 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005aca:	2300      	movs	r3, #0
 8005acc:	56c3      	ldrsb	r3, [r0, r3]
 8005ace:	2b70      	cmp	r3, #112	; 0x70
 8005ad0:	d1e9      	bne.n	8005aa6 <unbridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f00e f93b 	bl	8013d4e <atol>
 8005ad8:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 8005ada:	b2c1      	uxtb	r1, r0
 8005adc:	0038      	movs	r0, r7
 8005ade:	f7fe fea5 	bl	800482c <Unbridge>
	if(result == BOS_OK)
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d10c      	bne.n	8005b00 <unbridgeCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005ae6:	22ff      	movs	r2, #255	; 0xff
 8005ae8:	002b      	movs	r3, r5
 8005aea:	4013      	ands	r3, r2
 8005aec:	4032      	ands	r2, r6
 8005aee:	490a      	ldr	r1, [pc, #40]	; (8005b18 <unbridgeCommand+0xa8>)
 8005af0:	0020      	movs	r0, r4
 8005af2:	f00e fd8b 	bl	801460c <sprintf>
 8005af6:	e00a      	b.n	8005b0e <unbridgeCommand+0x9e>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005af8:	3001      	adds	r0, #1
 8005afa:	f00e f928 	bl	8013d4e <atol>
	else if(result == BOS_ERR_WrongParam)
 8005afe:	e7d2      	b.n	8005aa6 <unbridgeCommand+0x36>
 8005b00:	2867      	cmp	r0, #103	; 0x67
 8005b02:	d0d0      	beq.n	8005aa6 <unbridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005b04:	2219      	movs	r2, #25
 8005b06:	4905      	ldr	r1, [pc, #20]	; (8005b1c <unbridgeCommand+0xac>)
 8005b08:	0020      	movs	r0, r4
 8005b0a:	f00e fb81 	bl	8014210 <memcpy>
}
 8005b0e:	2000      	movs	r0, #0
 8005b10:	b003      	add	sp, #12
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b14:	0801b0d4 	.word	0x0801b0d4
 8005b18:	0801b104 	.word	0x0801b104
 8005b1c:	0801b124 	.word	0x0801b124

08005b20 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b22:	b083      	sub	sp, #12
 8005b24:	0004      	movs	r4, r0
 8005b26:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d017      	beq.n	8005b62 <bridgeCommand+0x42>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b32:	aa01      	add	r2, sp, #4
 8005b34:	2101      	movs	r1, #1
 8005b36:	0028      	movs	r0, r5
 8005b38:	f008 fe54 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	56c3      	ldrsb	r3, [r0, r3]
 8005b40:	2b70      	cmp	r3, #112	; 0x70
 8005b42:	d010      	beq.n	8005b66 <bridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b44:	466a      	mov	r2, sp
 8005b46:	2102      	movs	r1, #2
 8005b48:	0028      	movs	r0, r5
 8005b4a:	f008 fe4b 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b4e:	2300      	movs	r3, #0
 8005b50:	56c3      	ldrsb	r3, [r0, r3]
 8005b52:	2b70      	cmp	r3, #112	; 0x70
 8005b54:	d028      	beq.n	8005ba8 <bridgeCommand+0x88>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b56:	220f      	movs	r2, #15
 8005b58:	491a      	ldr	r1, [pc, #104]	; (8005bc4 <bridgeCommand+0xa4>)
 8005b5a:	0020      	movs	r0, r4
 8005b5c:	f00e fb58 	bl	8014210 <memcpy>
 8005b60:	e02d      	b.n	8005bbe <bridgeCommand+0x9e>
	configASSERT(pcWriteBuffer);
 8005b62:	b672      	cpsid	i
 8005b64:	e7fe      	b.n	8005b64 <bridgeCommand+0x44>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b66:	3001      	adds	r0, #1
 8005b68:	f00e f8f1 	bl	8013d4e <atol>
 8005b6c:	0006      	movs	r6, r0
 8005b6e:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b70:	466a      	mov	r2, sp
 8005b72:	2102      	movs	r1, #2
 8005b74:	0028      	movs	r0, r5
 8005b76:	f008 fe35 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	56c3      	ldrsb	r3, [r0, r3]
 8005b7e:	2b70      	cmp	r3, #112	; 0x70
 8005b80:	d1e9      	bne.n	8005b56 <bridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b82:	3001      	adds	r0, #1
 8005b84:	f00e f8e3 	bl	8013d4e <atol>
 8005b88:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005b8a:	b2c1      	uxtb	r1, r0
 8005b8c:	0038      	movs	r0, r7
 8005b8e:	f7fe fe39 	bl	8004804 <Bridge>
	if(result == BOS_OK)
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d10c      	bne.n	8005bb0 <bridgeCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005b96:	22ff      	movs	r2, #255	; 0xff
 8005b98:	002b      	movs	r3, r5
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	4032      	ands	r2, r6
 8005b9e:	490a      	ldr	r1, [pc, #40]	; (8005bc8 <bridgeCommand+0xa8>)
 8005ba0:	0020      	movs	r0, r4
 8005ba2:	f00e fd33 	bl	801460c <sprintf>
 8005ba6:	e00a      	b.n	8005bbe <bridgeCommand+0x9e>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f00e f8d0 	bl	8013d4e <atol>
	else if(result == BOS_ERR_WrongParam)
 8005bae:	e7d2      	b.n	8005b56 <bridgeCommand+0x36>
 8005bb0:	2867      	cmp	r0, #103	; 0x67
 8005bb2:	d0d0      	beq.n	8005b56 <bridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005bb4:	2217      	movs	r2, #23
 8005bb6:	4905      	ldr	r1, [pc, #20]	; (8005bcc <bridgeCommand+0xac>)
 8005bb8:	0020      	movs	r0, r4
 8005bba:	f00e fb29 	bl	8014210 <memcpy>
}
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	b003      	add	sp, #12
 8005bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bc4:	0801b0d4 	.word	0x0801b0d4
 8005bc8:	0801b140 	.word	0x0801b140
 8005bcc:	0801b164 	.word	0x0801b164

08005bd0 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd2:	46de      	mov	lr, fp
 8005bd4:	4657      	mov	r7, sl
 8005bd6:	464e      	mov	r6, r9
 8005bd8:	4645      	mov	r5, r8
 8005bda:	b5e0      	push	{r5, r6, r7, lr}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	0007      	movs	r7, r0
 8005be0:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005be6:	2f00      	cmp	r7, #0
 8005be8:	d013      	beq.n	8005c12 <delSnipCommand+0x42>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bea:	aa01      	add	r2, sp, #4
 8005bec:	2101      	movs	r1, #1
 8005bee:	f008 fdf9 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005bf2:	f00e f8a6 	bl	8013d42 <atoi>
 8005bf6:	4681      	mov	r9, r0
 8005bf8:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 8005bfa:	2d00      	cmp	r5, #0
 8005bfc:	d003      	beq.n	8005c06 <delSnipCommand+0x36>
 8005bfe:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <delSnipCommand+0xf4>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	d207      	bcs.n	8005c16 <delSnipCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c06:	2223      	movs	r2, #35	; 0x23
 8005c08:	492f      	ldr	r1, [pc, #188]	; (8005cc8 <delSnipCommand+0xf8>)
 8005c0a:	0038      	movs	r0, r7
 8005c0c:	f00e fb00 	bl	8014210 <memcpy>
	return pdFALSE;
 8005c10:	e04f      	b.n	8005cb2 <delSnipCommand+0xe2>
	configASSERT(pcWriteBuffer);
 8005c12:	b672      	cpsid	i
 8005c14:	e7fe      	b.n	8005c14 <delSnipCommand+0x44>
		snippets[index - 1].cond.conditionType =0;
 8005c16:	24ff      	movs	r4, #255	; 0xff
 8005c18:	4004      	ands	r4, r0
 8005c1a:	3c01      	subs	r4, #1
 8005c1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <delSnipCommand+0xfc>)
 8005c1e:	4698      	mov	r8, r3
 8005c20:	00a6      	lsls	r6, r4, #2
 8005c22:	1933      	adds	r3, r6, r4
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	2200      	movs	r2, #0
 8005c28:	4692      	mov	sl, r2
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	4651      	mov	r1, sl
 8005c2e:	5499      	strb	r1, [r3, r2]
		snippets[index - 1].cond.mathOperator =0;
 8005c30:	1933      	adds	r3, r6, r4
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4443      	add	r3, r8
 8005c36:	469b      	mov	fp, r3
 8005c38:	4652      	mov	r2, sl
 8005c3a:	7059      	strb	r1, [r3, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005c3c:	1930      	adds	r0, r6, r4
 8005c3e:	0080      	lsls	r0, r0, #2
 8005c40:	3002      	adds	r0, #2
 8005c42:	4440      	add	r0, r8
 8005c44:	3204      	adds	r2, #4
 8005c46:	f00e faec 	bl	8014222 <memset>
		snippets[index - 1].state = false;
 8005c4a:	465b      	mov	r3, fp
 8005c4c:	4652      	mov	r2, sl
 8005c4e:	741a      	strb	r2, [r3, #16]
		free(snippets[index - 1].cmd);
 8005c50:	68d8      	ldr	r0, [r3, #12]
 8005c52:	f00e f8b1 	bl	8013db8 <free>
		snippets[index - 1].cmd = NULL;
 8005c56:	465c      	mov	r4, fp
 8005c58:	4653      	mov	r3, sl
 8005c5a:	60e3      	str	r3, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005c5c:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <delSnipCommand+0xf4>)
 8005c5e:	781e      	ldrb	r6, [r3, #0]
 8005c60:	42b5      	cmp	r5, r6
 8005c62:	d21c      	bcs.n	8005c9e <delSnipCommand+0xce>
 8005c64:	20ff      	movs	r0, #255	; 0xff
 8005c66:	464b      	mov	r3, r9
 8005c68:	4018      	ands	r0, r3
 8005c6a:	0084      	lsls	r4, r0, #2
 8005c6c:	1824      	adds	r4, r4, r0
 8005c6e:	00a4      	lsls	r4, r4, #2
 8005c70:	4b16      	ldr	r3, [pc, #88]	; (8005ccc <delSnipCommand+0xfc>)
 8005c72:	18e4      	adds	r4, r4, r3
 8005c74:	e004      	b.n	8005c80 <delSnipCommand+0xb0>
 8005c76:	3501      	adds	r5, #1
 8005c78:	b2ed      	uxtb	r5, r5
 8005c7a:	3414      	adds	r4, #20
 8005c7c:	42b5      	cmp	r5, r6
 8005c7e:	d00e      	beq.n	8005c9e <delSnipCommand+0xce>
			if(snippets[s].cond.conditionType){
 8005c80:	7823      	ldrb	r3, [r4, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0f7      	beq.n	8005c76 <delSnipCommand+0xa6>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005c86:	2214      	movs	r2, #20
 8005c88:	0021      	movs	r1, r4
 8005c8a:	0020      	movs	r0, r4
 8005c8c:	3814      	subs	r0, #20
 8005c8e:	f00e fabf 	bl	8014210 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005c92:	2214      	movs	r2, #20
 8005c94:	2100      	movs	r1, #0
 8005c96:	0020      	movs	r0, r4
 8005c98:	f00e fac3 	bl	8014222 <memset>
 8005c9c:	e7eb      	b.n	8005c76 <delSnipCommand+0xa6>
		--numOfRecordedSnippets;
 8005c9e:	3e01      	subs	r6, #1
 8005ca0:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <delSnipCommand+0xf4>)
 8005ca2:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8005ca4:	f005 fdb4 	bl	800b810 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005ca8:	2236      	movs	r2, #54	; 0x36
 8005caa:	4909      	ldr	r1, [pc, #36]	; (8005cd0 <delSnipCommand+0x100>)
 8005cac:	0038      	movs	r0, r7
 8005cae:	f00e faaf 	bl	8014210 <memcpy>
}
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	b003      	add	sp, #12
 8005cb6:	bcf0      	pop	{r4, r5, r6, r7}
 8005cb8:	46bb      	mov	fp, r7
 8005cba:	46b2      	mov	sl, r6
 8005cbc:	46a9      	mov	r9, r5
 8005cbe:	46a0      	mov	r8, r4
 8005cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	20001227 	.word	0x20001227
 8005cc8:	0801b1b4 	.word	0x0801b1b4
 8005ccc:	20006ac4 	.word	0x20006ac4
 8005cd0:	0801b17c 	.word	0x0801b17c

08005cd4 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	0004      	movs	r4, r0
 8005cda:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005ce0:	2c00      	cmp	r4, #0
 8005ce2:	d014      	beq.n	8005d0e <pauseSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ce4:	aa01      	add	r2, sp, #4
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	f008 fd7c 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005cec:	f00e f829 	bl	8013d42 <atoi>
 8005cf0:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <pauseSnipCommand+0x2a>
 8005cf6:	4a10      	ldr	r2, [pc, #64]	; (8005d38 <pauseSnipCommand+0x64>)
 8005cf8:	7812      	ldrb	r2, [r2, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d209      	bcs.n	8005d12 <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005cfe:	2223      	movs	r2, #35	; 0x23
 8005d00:	490e      	ldr	r1, [pc, #56]	; (8005d3c <pauseSnipCommand+0x68>)
 8005d02:	0020      	movs	r0, r4
 8005d04:	f00e fa84 	bl	8014210 <memcpy>
}
 8005d08:	2000      	movs	r0, #0
 8005d0a:	b002      	add	sp, #8
 8005d0c:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005d0e:	b672      	cpsid	i
 8005d10:	e7fe      	b.n	8005d10 <pauseSnipCommand+0x3c>
		snippets[index - 1].state = false;
 8005d12:	23ff      	movs	r3, #255	; 0xff
 8005d14:	4003      	ands	r3, r0
 8005d16:	3b01      	subs	r3, #1
 8005d18:	009a      	lsls	r2, r3, #2
 8005d1a:	18d3      	adds	r3, r2, r3
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4a08      	ldr	r2, [pc, #32]	; (8005d40 <pauseSnipCommand+0x6c>)
 8005d20:	18d3      	adds	r3, r2, r3
 8005d22:	2200      	movs	r2, #0
 8005d24:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005d26:	f005 fd73 	bl	800b810 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005d2a:	2235      	movs	r2, #53	; 0x35
 8005d2c:	4905      	ldr	r1, [pc, #20]	; (8005d44 <pauseSnipCommand+0x70>)
 8005d2e:	0020      	movs	r0, r4
 8005d30:	f00e fa6e 	bl	8014210 <memcpy>
 8005d34:	e7e8      	b.n	8005d08 <pauseSnipCommand+0x34>
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	20001227 	.word	0x20001227
 8005d3c:	0801b1b4 	.word	0x0801b1b4
 8005d40:	20006ac4 	.word	0x20006ac4
 8005d44:	0801b1d8 	.word	0x0801b1d8

08005d48 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	0004      	movs	r4, r0
 8005d4e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005d54:	2c00      	cmp	r4, #0
 8005d56:	d014      	beq.n	8005d82 <actSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d58:	aa01      	add	r2, sp, #4
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	f008 fd42 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d60:	f00d ffef 	bl	8013d42 <atoi>
 8005d64:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <actSnipCommand+0x2a>
 8005d6a:	4a10      	ldr	r2, [pc, #64]	; (8005dac <actSnipCommand+0x64>)
 8005d6c:	7812      	ldrb	r2, [r2, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d209      	bcs.n	8005d86 <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d72:	2223      	movs	r2, #35	; 0x23
 8005d74:	490e      	ldr	r1, [pc, #56]	; (8005db0 <actSnipCommand+0x68>)
 8005d76:	0020      	movs	r0, r4
 8005d78:	f00e fa4a 	bl	8014210 <memcpy>
}
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	b002      	add	sp, #8
 8005d80:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005d82:	b672      	cpsid	i
 8005d84:	e7fe      	b.n	8005d84 <actSnipCommand+0x3c>
		snippets[index - 1].state = true;
 8005d86:	23ff      	movs	r3, #255	; 0xff
 8005d88:	4003      	ands	r3, r0
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	009a      	lsls	r2, r3, #2
 8005d8e:	18d3      	adds	r3, r2, r3
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <actSnipCommand+0x6c>)
 8005d94:	18d3      	adds	r3, r2, r3
 8005d96:	2201      	movs	r2, #1
 8005d98:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005d9a:	f005 fd39 	bl	800b810 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005d9e:	2238      	movs	r2, #56	; 0x38
 8005da0:	4905      	ldr	r1, [pc, #20]	; (8005db8 <actSnipCommand+0x70>)
 8005da2:	0020      	movs	r0, r4
 8005da4:	f00e fa34 	bl	8014210 <memcpy>
 8005da8:	e7e8      	b.n	8005d7c <actSnipCommand+0x34>
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	20001227 	.word	0x20001227
 8005db0:	0801b1b4 	.word	0x0801b1b4
 8005db4:	20006ac4 	.word	0x20006ac4
 8005db8:	0801b210 	.word	0x0801b210

08005dbc <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dbe:	46de      	mov	lr, fp
 8005dc0:	4657      	mov	r7, sl
 8005dc2:	464e      	mov	r6, r9
 8005dc4:	4645      	mov	r5, r8
 8005dc6:	b5e0      	push	{r5, r6, r7, lr}
 8005dc8:	b08b      	sub	sp, #44	; 0x2c
 8005dca:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005dcc:	aa06      	add	r2, sp, #24
 8005dce:	4b80      	ldr	r3, [pc, #512]	; (8005fd0 <snipCommand+0x214>)
 8005dd0:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005dd2:	c223      	stmia	r2!, {r0, r1, r5}
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005dd8:	2c00      	cmp	r4, #0
 8005dda:	d013      	beq.n	8005e04 <snipCommand+0x48>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005ddc:	4b7d      	ldr	r3, [pc, #500]	; (8005fd4 <snipCommand+0x218>)
 8005dde:	7818      	ldrb	r0, [r3, #0]
 8005de0:	2301      	movs	r3, #1
 8005de2:	425b      	negs	r3, r3
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	3333      	adds	r3, #51	; 0x33
 8005de8:	2237      	movs	r2, #55	; 0x37
 8005dea:	497b      	ldr	r1, [pc, #492]	; (8005fd8 <snipCommand+0x21c>)
 8005dec:	f008 faa4 	bl	800e338 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005df0:	4b7a      	ldr	r3, [pc, #488]	; (8005fdc <snipCommand+0x220>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d100      	bne.n	8005dfa <snipCommand+0x3e>
 8005df8:	e0dd      	b.n	8005fb6 <snipCommand+0x1fa>
 8005dfa:	2700      	movs	r7, #0
		if(snippets[s].cond.conditionType)
 8005dfc:	4b78      	ldr	r3, [pc, #480]	; (8005fe0 <snipCommand+0x224>)
 8005dfe:	4698      	mov	r8, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005e00:	4d78      	ldr	r5, [pc, #480]	; (8005fe4 <snipCommand+0x228>)
 8005e02:	e0c3      	b.n	8005f8c <snipCommand+0x1d0>
	configASSERT(pcWriteBuffer);
 8005e04:	b672      	cpsid	i
 8005e06:	e7fe      	b.n	8005e06 <snipCommand+0x4a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005e08:	4b75      	ldr	r3, [pc, #468]	; (8005fe0 <snipCommand+0x224>)
 8005e0a:	469b      	mov	fp, r3
 8005e0c:	00b3      	lsls	r3, r6, #2
 8005e0e:	4699      	mov	r9, r3
 8005e10:	199b      	adds	r3, r3, r6
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	445b      	add	r3, fp
 8005e16:	7c1a      	ldrb	r2, [r3, #16]
 8005e18:	00d3      	lsls	r3, r2, #3
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	aa06      	add	r2, sp, #24
 8005e1e:	4694      	mov	ip, r2
 8005e20:	4463      	add	r3, ip
 8005e22:	003a      	movs	r2, r7
 8005e24:	4970      	ldr	r1, [pc, #448]	; (8005fe8 <snipCommand+0x22c>)
 8005e26:	0020      	movs	r0, r4
 8005e28:	f00e fbf0 	bl	801460c <sprintf>
		switch(snippets[s].cond.conditionType){
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	199b      	adds	r3, r3, r6
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	465a      	mov	r2, fp
 8005e34:	5c9b      	ldrb	r3, [r3, r2]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d11c      	bne.n	8005e74 <snipCommand+0xb8>
				switch(snippets[s].cond.buffer1[1]){
 8005e3a:	00b3      	lsls	r3, r6, #2
 8005e3c:	199b      	adds	r3, r3, r6
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4a67      	ldr	r2, [pc, #412]	; (8005fe0 <snipCommand+0x224>)
 8005e42:	18d3      	adds	r3, r2, r3
 8005e44:	78db      	ldrb	r3, [r3, #3]
 8005e46:	2b0b      	cmp	r3, #11
 8005e48:	d842      	bhi.n	8005ed0 <snipCommand+0x114>
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d861      	bhi.n	8005f12 <snipCommand+0x156>
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d051      	beq.n	8005ef6 <snipCommand+0x13a>
 8005e52:	2b06      	cmp	r3, #6
 8005e54:	d000      	beq.n	8005e58 <snipCommand+0x9c>
 8005e56:	e0a5      	b.n	8005fa4 <snipCommand+0x1e8>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005e58:	00b3      	lsls	r3, r6, #2
 8005e5a:	199e      	adds	r6, r3, r6
 8005e5c:	00b6      	lsls	r6, r6, #2
 8005e5e:	4b60      	ldr	r3, [pc, #384]	; (8005fe0 <snipCommand+0x224>)
 8005e60:	199e      	adds	r6, r3, r6
 8005e62:	78b3      	ldrb	r3, [r6, #2]
 8005e64:	68f2      	ldr	r2, [r6, #12]
 8005e66:	9200      	str	r2, [sp, #0]
 8005e68:	0022      	movs	r2, r4
 8005e6a:	4960      	ldr	r1, [pc, #384]	; (8005fec <snipCommand+0x230>)
 8005e6c:	0020      	movs	r0, r4
 8005e6e:	f00e fbcd 	bl	801460c <sprintf>
						break;
 8005e72:	e097      	b.n	8005fa4 <snipCommand+0x1e8>
		switch(snippets[s].cond.conditionType){
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d000      	beq.n	8005e7a <snipCommand+0xbe>
 8005e78:	e094      	b.n	8005fa4 <snipCommand+0x1e8>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005e7a:	00b1      	lsls	r1, r6, #2
 8005e7c:	1989      	adds	r1, r1, r6
 8005e7e:	0089      	lsls	r1, r1, #2
 8005e80:	3106      	adds	r1, #6
 8005e82:	4b57      	ldr	r3, [pc, #348]	; (8005fe0 <snipCommand+0x224>)
 8005e84:	4699      	mov	r9, r3
 8005e86:	4449      	add	r1, r9
 8005e88:	2204      	movs	r2, #4
 8005e8a:	a805      	add	r0, sp, #20
 8005e8c:	f00e f9c0 	bl	8014210 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005e90:	00b3      	lsls	r3, r6, #2
 8005e92:	199e      	adds	r6, r3, r6
 8005e94:	00b6      	lsls	r6, r6, #2
 8005e96:	444e      	add	r6, r9
 8005e98:	78f2      	ldrb	r2, [r6, #3]
 8005e9a:	3a01      	subs	r2, #1
 8005e9c:	0053      	lsls	r3, r2, #1
 8005e9e:	189b      	adds	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4a53      	ldr	r2, [pc, #332]	; (8005ff0 <snipCommand+0x234>)
 8005ea4:	18d3      	adds	r3, r2, r3
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	4699      	mov	r9, r3
 8005eaa:	9805      	ldr	r0, [sp, #20]
 8005eac:	f7fc feee 	bl	8002c8c <__aeabi_f2d>
 8005eb0:	9002      	str	r0, [sp, #8]
 8005eb2:	9103      	str	r1, [sp, #12]
 8005eb4:	7873      	ldrb	r3, [r6, #1]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	005a      	lsls	r2, r3, #1
 8005eba:	18d2      	adds	r2, r2, r3
 8005ebc:	4b4d      	ldr	r3, [pc, #308]	; (8005ff4 <snipCommand+0x238>)
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	0022      	movs	r2, r4
 8005ec6:	494c      	ldr	r1, [pc, #304]	; (8005ff8 <snipCommand+0x23c>)
 8005ec8:	0020      	movs	r0, r4
 8005eca:	f00e fb9f 	bl	801460c <sprintf>
				break;
 8005ece:	e069      	b.n	8005fa4 <snipCommand+0x1e8>
 8005ed0:	3b0c      	subs	r3, #12
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d866      	bhi.n	8005fa4 <snipCommand+0x1e8>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005ed6:	00b2      	lsls	r2, r6, #2
 8005ed8:	1996      	adds	r6, r2, r6
 8005eda:	00b6      	lsls	r6, r6, #2
 8005edc:	4a40      	ldr	r2, [pc, #256]	; (8005fe0 <snipCommand+0x224>)
 8005ede:	1992      	adds	r2, r2, r6
 8005ee0:	7893      	ldrb	r3, [r2, #2]
 8005ee2:	68d1      	ldr	r1, [r2, #12]
 8005ee4:	9101      	str	r1, [sp, #4]
 8005ee6:	7912      	ldrb	r2, [r2, #4]
 8005ee8:	9200      	str	r2, [sp, #0]
 8005eea:	0022      	movs	r2, r4
 8005eec:	4943      	ldr	r1, [pc, #268]	; (8005ffc <snipCommand+0x240>)
 8005eee:	0020      	movs	r0, r4
 8005ef0:	f00e fb8c 	bl	801460c <sprintf>
						break;
 8005ef4:	e056      	b.n	8005fa4 <snipCommand+0x1e8>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005ef6:	00b3      	lsls	r3, r6, #2
 8005ef8:	199e      	adds	r6, r3, r6
 8005efa:	00b6      	lsls	r6, r6, #2
 8005efc:	4b38      	ldr	r3, [pc, #224]	; (8005fe0 <snipCommand+0x224>)
 8005efe:	199e      	adds	r6, r3, r6
 8005f00:	78b3      	ldrb	r3, [r6, #2]
 8005f02:	68f2      	ldr	r2, [r6, #12]
 8005f04:	9200      	str	r2, [sp, #0]
 8005f06:	0022      	movs	r2, r4
 8005f08:	493d      	ldr	r1, [pc, #244]	; (8006000 <snipCommand+0x244>)
 8005f0a:	0020      	movs	r0, r4
 8005f0c:	f00e fb7e 	bl	801460c <sprintf>
						break;
 8005f10:	e048      	b.n	8005fa4 <snipCommand+0x1e8>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f12:	00b2      	lsls	r2, r6, #2
 8005f14:	1996      	adds	r6, r2, r6
 8005f16:	00b6      	lsls	r6, r6, #2
 8005f18:	4a31      	ldr	r2, [pc, #196]	; (8005fe0 <snipCommand+0x224>)
 8005f1a:	1992      	adds	r2, r2, r6
 8005f1c:	7893      	ldrb	r3, [r2, #2]
 8005f1e:	68d1      	ldr	r1, [r2, #12]
 8005f20:	9101      	str	r1, [sp, #4]
 8005f22:	7912      	ldrb	r2, [r2, #4]
 8005f24:	9200      	str	r2, [sp, #0]
 8005f26:	0022      	movs	r2, r4
 8005f28:	4936      	ldr	r1, [pc, #216]	; (8006004 <snipCommand+0x248>)
 8005f2a:	0020      	movs	r0, r4
 8005f2c:	f00e fb6e 	bl	801460c <sprintf>
						break;
 8005f30:	e038      	b.n	8005fa4 <snipCommand+0x1e8>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005f32:	002b      	movs	r3, r5
 8005f34:	0022      	movs	r2, r4
 8005f36:	4934      	ldr	r1, [pc, #208]	; (8006008 <snipCommand+0x24c>)
 8005f38:	0020      	movs	r0, r4
 8005f3a:	f00e fb67 	bl	801460c <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005f3e:	0028      	movs	r0, r5
 8005f40:	f7fa f8ea 	bl	8000118 <strlen>
 8005f44:	0002      	movs	r2, r0
 8005f46:	2100      	movs	r1, #0
 8005f48:	0028      	movs	r0, r5
 8005f4a:	f00e f96a 	bl	8014222 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005f4e:	4649      	mov	r1, r9
 8005f50:	68f0      	ldr	r0, [r6, #12]
 8005f52:	f7ff fa6b 	bl	800542c <ParseSnippetCommand>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d1eb      	bne.n	8005f32 <snipCommand+0x176>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005f5a:	0020      	movs	r0, r4
 8005f5c:	f7fa f8dc 	bl	8000118 <strlen>
 8005f60:	1820      	adds	r0, r4, r0
 8005f62:	220c      	movs	r2, #12
 8005f64:	4929      	ldr	r1, [pc, #164]	; (800600c <snipCommand+0x250>)
 8005f66:	f00e f953 	bl	8014210 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005f6a:	0020      	movs	r0, r4
 8005f6c:	f7fa f8d4 	bl	8000118 <strlen>
 8005f70:	b282      	uxth	r2, r0
 8005f72:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <snipCommand+0x218>)
 8005f74:	7818      	ldrb	r0, [r3, #0]
 8005f76:	2301      	movs	r3, #1
 8005f78:	425b      	negs	r3, r3
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	3333      	adds	r3, #51	; 0x33
 8005f7e:	0021      	movs	r1, r4
 8005f80:	f008 f9da 	bl	800e338 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <snipCommand+0x220>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	42bb      	cmp	r3, r7
 8005f8a:	d914      	bls.n	8005fb6 <snipCommand+0x1fa>
 8005f8c:	003e      	movs	r6, r7
 8005f8e:	3701      	adds	r7, #1
 8005f90:	b2ff      	uxtb	r7, r7
		if(snippets[s].cond.conditionType)
 8005f92:	46b2      	mov	sl, r6
 8005f94:	00b3      	lsls	r3, r6, #2
 8005f96:	199b      	adds	r3, r3, r6
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4642      	mov	r2, r8
 8005f9c:	5c9b      	ldrb	r3, [r3, r2]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d000      	beq.n	8005fa4 <snipCommand+0x1e8>
 8005fa2:	e731      	b.n	8005e08 <snipCommand+0x4c>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <snipCommand+0x228>)
 8005fa6:	4699      	mov	r9, r3
 8005fa8:	4653      	mov	r3, sl
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4453      	add	r3, sl
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4e0b      	ldr	r6, [pc, #44]	; (8005fe0 <snipCommand+0x224>)
 8005fb2:	18f6      	adds	r6, r6, r3
 8005fb4:	e7cb      	b.n	8005f4e <snipCommand+0x192>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005fb6:	22b5      	movs	r2, #181	; 0xb5
 8005fb8:	4915      	ldr	r1, [pc, #84]	; (8006010 <snipCommand+0x254>)
 8005fba:	0020      	movs	r0, r4
 8005fbc:	f00e f928 	bl	8014210 <memcpy>
}
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	b00b      	add	sp, #44	; 0x2c
 8005fc4:	bcf0      	pop	{r4, r5, r6, r7}
 8005fc6:	46bb      	mov	fp, r7
 8005fc8:	46b2      	mov	sl, r6
 8005fca:	46a9      	mov	r9, r5
 8005fcc:	46a0      	mov	r8, r4
 8005fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd0:	0801a400 	.word	0x0801a400
 8005fd4:	20000a7f 	.word	0x20000a7f
 8005fd8:	0801b248 	.word	0x0801b248
 8005fdc:	20001227 	.word	0x20001227
 8005fe0:	20006ac4 	.word	0x20006ac4
 8005fe4:	20001258 	.word	0x20001258
 8005fe8:	0801b280 	.word	0x0801b280
 8005fec:	0801b2a0 	.word	0x0801b2a0
 8005ff0:	20000084 	.word	0x20000084
 8005ff4:	0801cc60 	.word	0x0801cc60
 8005ff8:	0801b2ec 	.word	0x0801b2ec
 8005ffc:	0801b2d0 	.word	0x0801b2d0
 8006000:	0801b28c 	.word	0x0801b28c
 8006004:	0801b2b8 	.word	0x0801b2b8
 8006008:	0801b2fc 	.word	0x0801b2fc
 800600c:	0801b304 	.word	0x0801b304
 8006010:	0801b310 	.word	0x0801b310

08006014 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006014:	b510      	push	{r4, lr}
 8006016:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006018:	d00c      	beq.n	8006034 <idcodeCommand+0x20>
	dev =HAL_GetDEVID();
 800601a:	f00a fc93 	bl	8010944 <HAL_GetDEVID>
	switch(dev){
 800601e:	0403      	lsls	r3, r0, #16
 8006020:	0c1b      	lsrs	r3, r3, #16
 8006022:	4a1c      	ldr	r2, [pc, #112]	; (8006094 <idcodeCommand+0x80>)
 8006024:	4694      	mov	ip, r2
 8006026:	4463      	add	r3, ip
 8006028:	2b08      	cmp	r3, #8
 800602a:	d82c      	bhi.n	8006086 <idcodeCommand+0x72>
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4a1a      	ldr	r2, [pc, #104]	; (8006098 <idcodeCommand+0x84>)
 8006030:	58d3      	ldr	r3, [r2, r3]
 8006032:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 8006034:	b672      	cpsid	i
 8006036:	e7fe      	b.n	8006036 <idcodeCommand+0x22>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8006038:	4a18      	ldr	r2, [pc, #96]	; (800609c <idcodeCommand+0x88>)
 800603a:	4919      	ldr	r1, [pc, #100]	; (80060a0 <idcodeCommand+0x8c>)
 800603c:	0020      	movs	r0, r4
 800603e:	f00e fae5 	bl	801460c <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8006042:	f00a fc79 	bl	8010938 <HAL_GetREVID>
 8006046:	0b03      	lsrs	r3, r0, #12
 8006048:	0022      	movs	r2, r4
 800604a:	4916      	ldr	r1, [pc, #88]	; (80060a4 <idcodeCommand+0x90>)
 800604c:	0020      	movs	r0, r4
 800604e:	f00e fadd 	bl	801460c <sprintf>
}
 8006052:	2000      	movs	r0, #0
 8006054:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8006056:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <idcodeCommand+0x94>)
 8006058:	4911      	ldr	r1, [pc, #68]	; (80060a0 <idcodeCommand+0x8c>)
 800605a:	0020      	movs	r0, r4
 800605c:	f00e fad6 	bl	801460c <sprintf>
			break;
 8006060:	e7ef      	b.n	8006042 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8006062:	4a12      	ldr	r2, [pc, #72]	; (80060ac <idcodeCommand+0x98>)
 8006064:	490e      	ldr	r1, [pc, #56]	; (80060a0 <idcodeCommand+0x8c>)
 8006066:	0020      	movs	r0, r4
 8006068:	f00e fad0 	bl	801460c <sprintf>
			break;
 800606c:	e7e9      	b.n	8006042 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 800606e:	4a10      	ldr	r2, [pc, #64]	; (80060b0 <idcodeCommand+0x9c>)
 8006070:	490b      	ldr	r1, [pc, #44]	; (80060a0 <idcodeCommand+0x8c>)
 8006072:	0020      	movs	r0, r4
 8006074:	f00e faca 	bl	801460c <sprintf>
			break;
 8006078:	e7e3      	b.n	8006042 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 800607a:	4a0e      	ldr	r2, [pc, #56]	; (80060b4 <idcodeCommand+0xa0>)
 800607c:	4908      	ldr	r1, [pc, #32]	; (80060a0 <idcodeCommand+0x8c>)
 800607e:	0020      	movs	r0, r4
 8006080:	f00e fac4 	bl	801460c <sprintf>
			break;
 8006084:	e7dd      	b.n	8006042 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8006086:	4a0c      	ldr	r2, [pc, #48]	; (80060b8 <idcodeCommand+0xa4>)
 8006088:	4905      	ldr	r1, [pc, #20]	; (80060a0 <idcodeCommand+0x8c>)
 800608a:	0020      	movs	r0, r4
 800608c:	f00e fabe 	bl	801460c <sprintf>
			break;
 8006090:	e7d7      	b.n	8006042 <idcodeCommand+0x2e>
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	fffffbc0 	.word	0xfffffbc0
 8006098:	0801b438 	.word	0x0801b438
 800609c:	0801b3c8 	.word	0x0801b3c8
 80060a0:	0801b3d4 	.word	0x0801b3d4
 80060a4:	0801b420 	.word	0x0801b420
 80060a8:	0801b3e8 	.word	0x0801b3e8
 80060ac:	0801b3f4 	.word	0x0801b3f4
 80060b0:	0801b400 	.word	0x0801b400
 80060b4:	0801b40c 	.word	0x0801b40c
 80060b8:	0801b418 	.word	0x0801b418

080060bc <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80060c0:	d023      	beq.n	800610a <uuidCommand+0x4e>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 80060c2:	220e      	movs	r2, #14
 80060c4:	4912      	ldr	r1, [pc, #72]	; (8006110 <uuidCommand+0x54>)
 80060c6:	f00e f8a3 	bl	8014210 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 80060ca:	4b12      	ldr	r3, [pc, #72]	; (8006114 <uuidCommand+0x58>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4d12      	ldr	r5, [pc, #72]	; (8006118 <uuidCommand+0x5c>)
 80060d0:	0022      	movs	r2, r4
 80060d2:	0029      	movs	r1, r5
 80060d4:	0020      	movs	r0, r4
 80060d6:	f00e fa99 	bl	801460c <sprintf>
 80060da:	4b10      	ldr	r3, [pc, #64]	; (800611c <uuidCommand+0x60>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	0022      	movs	r2, r4
 80060e0:	0029      	movs	r1, r5
 80060e2:	0020      	movs	r0, r4
 80060e4:	f00e fa92 	bl	801460c <sprintf>
 80060e8:	4b0d      	ldr	r3, [pc, #52]	; (8006120 <uuidCommand+0x64>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	0022      	movs	r2, r4
 80060ee:	0029      	movs	r1, r5
 80060f0:	0020      	movs	r0, r4
 80060f2:	f00e fa8b 	bl	801460c <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 80060f6:	0020      	movs	r0, r4
 80060f8:	f7fa f80e 	bl	8000118 <strlen>
 80060fc:	1820      	adds	r0, r4, r0
 80060fe:	2203      	movs	r2, #3
 8006100:	4908      	ldr	r1, [pc, #32]	; (8006124 <uuidCommand+0x68>)
 8006102:	f00e f885 	bl	8014210 <memcpy>
}
 8006106:	2000      	movs	r0, #0
 8006108:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 800610a:	b672      	cpsid	i
 800610c:	e7fe      	b.n	800610c <uuidCommand+0x50>
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	0801b45c 	.word	0x0801b45c
 8006114:	1ffff7ac 	.word	0x1ffff7ac
 8006118:	0801b46c 	.word	0x0801b46c
 800611c:	1ffff7b0 	.word	0x1ffff7b0
 8006120:	1ffff7b4 	.word	0x1ffff7b4
 8006124:	0801c4c0 	.word	0x0801c4c0

08006128 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006128:	b510      	push	{r4, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800612e:	d00a      	beq.n	8006146 <timeCommand+0x1e>
	GetTimeDate();
 8006130:	f007 fe52 	bl	800ddd8 <GetTimeDate>
	if(BOS.hourformat == 24)
 8006134:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <timeCommand+0x80>)
 8006136:	7b5b      	ldrb	r3, [r3, #13]
 8006138:	2b18      	cmp	r3, #24
 800613a:	d006      	beq.n	800614a <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 800613c:	2b0c      	cmp	r3, #12
 800613e:	d010      	beq.n	8006162 <timeCommand+0x3a>
}
 8006140:	2000      	movs	r0, #0
 8006142:	b004      	add	sp, #16
 8006144:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8006146:	b672      	cpsid	i
 8006148:	e7fe      	b.n	8006148 <timeCommand+0x20>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 800614a:	4917      	ldr	r1, [pc, #92]	; (80061a8 <timeCommand+0x80>)
 800614c:	7c4b      	ldrb	r3, [r1, #17]
 800614e:	7c8a      	ldrb	r2, [r1, #18]
 8006150:	89c8      	ldrh	r0, [r1, #14]
 8006152:	9001      	str	r0, [sp, #4]
 8006154:	7c09      	ldrb	r1, [r1, #16]
 8006156:	9100      	str	r1, [sp, #0]
 8006158:	4914      	ldr	r1, [pc, #80]	; (80061ac <timeCommand+0x84>)
 800615a:	0020      	movs	r0, r4
 800615c:	f00e fa56 	bl	801460c <sprintf>
 8006160:	e7ee      	b.n	8006140 <timeCommand+0x18>
		if(BOS.time.ampm == RTC_AM)
 8006162:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <timeCommand+0x80>)
 8006164:	7cdb      	ldrb	r3, [r3, #19]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d00f      	beq.n	800618a <timeCommand+0x62>
		else if(BOS.time.ampm == RTC_PM)
 800616a:	2b02      	cmp	r3, #2
 800616c:	d1e8      	bne.n	8006140 <timeCommand+0x18>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800616e:	490e      	ldr	r1, [pc, #56]	; (80061a8 <timeCommand+0x80>)
 8006170:	7c4b      	ldrb	r3, [r1, #17]
 8006172:	7c8a      	ldrb	r2, [r1, #18]
 8006174:	480e      	ldr	r0, [pc, #56]	; (80061b0 <timeCommand+0x88>)
 8006176:	9002      	str	r0, [sp, #8]
 8006178:	89c8      	ldrh	r0, [r1, #14]
 800617a:	9001      	str	r0, [sp, #4]
 800617c:	7c09      	ldrb	r1, [r1, #16]
 800617e:	9100      	str	r1, [sp, #0]
 8006180:	490c      	ldr	r1, [pc, #48]	; (80061b4 <timeCommand+0x8c>)
 8006182:	0020      	movs	r0, r4
 8006184:	f00e fa42 	bl	801460c <sprintf>
 8006188:	e7da      	b.n	8006140 <timeCommand+0x18>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800618a:	4907      	ldr	r1, [pc, #28]	; (80061a8 <timeCommand+0x80>)
 800618c:	7c4b      	ldrb	r3, [r1, #17]
 800618e:	7c8a      	ldrb	r2, [r1, #18]
 8006190:	4809      	ldr	r0, [pc, #36]	; (80061b8 <timeCommand+0x90>)
 8006192:	9002      	str	r0, [sp, #8]
 8006194:	89c8      	ldrh	r0, [r1, #14]
 8006196:	9001      	str	r0, [sp, #4]
 8006198:	7c09      	ldrb	r1, [r1, #16]
 800619a:	9100      	str	r1, [sp, #0]
 800619c:	4905      	ldr	r1, [pc, #20]	; (80061b4 <timeCommand+0x8c>)
 800619e:	0020      	movs	r0, r4
 80061a0:	f00e fa34 	bl	801460c <sprintf>
 80061a4:	e7cc      	b.n	8006140 <timeCommand+0x18>
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	20006aa8 	.word	0x20006aa8
 80061ac:	0801b474 	.word	0x0801b474
 80061b0:	0801b4cc 	.word	0x0801b4cc
 80061b4:	0801b49c 	.word	0x0801b49c
 80061b8:	0801b4c8 	.word	0x0801b4c8

080061bc <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061bc:	b510      	push	{r4, lr}
 80061be:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80061c0:	d00a      	beq.n	80061d8 <dateCommand+0x1c>
	GetTimeDate();
 80061c2:	f007 fe09 	bl	800ddd8 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80061c6:	f7fe fafb 	bl	80047c0 <GetDateString>
 80061ca:	0002      	movs	r2, r0
 80061cc:	4903      	ldr	r1, [pc, #12]	; (80061dc <dateCommand+0x20>)
 80061ce:	0020      	movs	r0, r4
 80061d0:	f00e fa1c 	bl	801460c <sprintf>
}
 80061d4:	2000      	movs	r0, #0
 80061d6:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80061d8:	b672      	cpsid	i
 80061da:	e7fe      	b.n	80061da <dateCommand+0x1e>
 80061dc:	0801b4d0 	.word	0x0801b4d0

080061e0 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e2:	46c6      	mov	lr, r8
 80061e4:	b500      	push	{lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	0004      	movs	r4, r0
 80061ea:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80061f2:	2800      	cmp	r0, #0
 80061f4:	d026      	beq.n	8006244 <getCommand+0x64>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061f6:	aa01      	add	r2, sp, #4
 80061f8:	2101      	movs	r1, #1
 80061fa:	0028      	movs	r0, r5
 80061fc:	f008 faf2 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006200:	0006      	movs	r6, r0
 8006202:	4b74      	ldr	r3, [pc, #464]	; (80063d4 <getCommand+0x1f4>)
 8006204:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006206:	2204      	movs	r2, #4
 8006208:	4973      	ldr	r1, [pc, #460]	; (80063d8 <getCommand+0x1f8>)
 800620a:	f00e fa42 	bl	8014692 <strncmp>
 800620e:	2800      	cmp	r0, #0
 8006210:	d000      	beq.n	8006214 <getCommand+0x34>
 8006212:	e092      	b.n	800633a <getCommand+0x15a>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006214:	1d37      	adds	r7, r6, #4
 8006216:	9b01      	ldr	r3, [sp, #4]
 8006218:	1f1d      	subs	r5, r3, #4
 800621a:	002a      	movs	r2, r5
 800621c:	496f      	ldr	r1, [pc, #444]	; (80063dc <getCommand+0x1fc>)
 800621e:	0038      	movs	r0, r7
 8006220:	f00e fa37 	bl	8014692 <strncmp>
 8006224:	2800      	cmp	r0, #0
 8006226:	d121      	bne.n	800626c <getCommand+0x8c>
			if(BOS.response == BOS_RESPONSE_ALL)
 8006228:	4b6d      	ldr	r3, [pc, #436]	; (80063e0 <getCommand+0x200>)
 800622a:	799b      	ldrb	r3, [r3, #6]
 800622c:	2b60      	cmp	r3, #96	; 0x60
 800622e:	d00b      	beq.n	8006248 <getCommand+0x68>
			else if(BOS.response == BOS_RESPONSE_MSG)
 8006230:	2b20      	cmp	r3, #32
 8006232:	d00f      	beq.n	8006254 <getCommand+0x74>
			else if(BOS.response == BOS_RESPONSE_NONE)
 8006234:	2b00      	cmp	r3, #0
 8006236:	d013      	beq.n	8006260 <getCommand+0x80>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006238:	0032      	movs	r2, r6
 800623a:	496a      	ldr	r1, [pc, #424]	; (80063e4 <getCommand+0x204>)
 800623c:	0020      	movs	r0, r4
 800623e:	f00e f9e5 	bl	801460c <sprintf>
 8006242:	e086      	b.n	8006352 <getCommand+0x172>
	configASSERT(pcWriteBuffer);
 8006244:	b672      	cpsid	i
 8006246:	e7fe      	b.n	8006246 <getCommand+0x66>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006248:	4a67      	ldr	r2, [pc, #412]	; (80063e8 <getCommand+0x208>)
 800624a:	4968      	ldr	r1, [pc, #416]	; (80063ec <getCommand+0x20c>)
 800624c:	0020      	movs	r0, r4
 800624e:	f00e f9dd 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 8006252:	e07e      	b.n	8006352 <getCommand+0x172>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8006254:	4a66      	ldr	r2, [pc, #408]	; (80063f0 <getCommand+0x210>)
 8006256:	4965      	ldr	r1, [pc, #404]	; (80063ec <getCommand+0x20c>)
 8006258:	0020      	movs	r0, r4
 800625a:	f00e f9d7 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 800625e:	e078      	b.n	8006352 <getCommand+0x172>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8006260:	4a64      	ldr	r2, [pc, #400]	; (80063f4 <getCommand+0x214>)
 8006262:	4962      	ldr	r1, [pc, #392]	; (80063ec <getCommand+0x20c>)
 8006264:	0020      	movs	r0, r4
 8006266:	f00e f9d1 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 800626a:	e072      	b.n	8006352 <getCommand+0x172>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800626c:	002a      	movs	r2, r5
 800626e:	4962      	ldr	r1, [pc, #392]	; (80063f8 <getCommand+0x218>)
 8006270:	0038      	movs	r0, r7
 8006272:	f00e fa0e 	bl	8014692 <strncmp>
 8006276:	2800      	cmp	r0, #0
 8006278:	d119      	bne.n	80062ae <getCommand+0xce>
			if(BOS.trace == TRACE_BOTH)
 800627a:	4b59      	ldr	r3, [pc, #356]	; (80063e0 <getCommand+0x200>)
 800627c:	79db      	ldrb	r3, [r3, #7]
 800627e:	2b03      	cmp	r3, #3
 8006280:	d009      	beq.n	8006296 <getCommand+0xb6>
			else if(BOS.trace == TRACE_MESSAGE)
 8006282:	2b01      	cmp	r3, #1
 8006284:	d00d      	beq.n	80062a2 <getCommand+0xc2>
			else if(BOS.trace == TRACE_NONE)
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1d6      	bne.n	8006238 <getCommand+0x58>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800628a:	4a5a      	ldr	r2, [pc, #360]	; (80063f4 <getCommand+0x214>)
 800628c:	4957      	ldr	r1, [pc, #348]	; (80063ec <getCommand+0x20c>)
 800628e:	0020      	movs	r0, r4
 8006290:	f00e f9bc 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 8006294:	e05d      	b.n	8006352 <getCommand+0x172>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006296:	4a54      	ldr	r2, [pc, #336]	; (80063e8 <getCommand+0x208>)
 8006298:	4954      	ldr	r1, [pc, #336]	; (80063ec <getCommand+0x20c>)
 800629a:	0020      	movs	r0, r4
 800629c:	f00e f9b6 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 80062a0:	e057      	b.n	8006352 <getCommand+0x172>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80062a2:	4a53      	ldr	r2, [pc, #332]	; (80063f0 <getCommand+0x210>)
 80062a4:	4951      	ldr	r1, [pc, #324]	; (80063ec <getCommand+0x20c>)
 80062a6:	0020      	movs	r0, r4
 80062a8:	f00e f9b0 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 80062ac:	e051      	b.n	8006352 <getCommand+0x172>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80062ae:	002a      	movs	r2, r5
 80062b0:	4952      	ldr	r1, [pc, #328]	; (80063fc <getCommand+0x21c>)
 80062b2:	0038      	movs	r0, r7
 80062b4:	f00e f9ed 	bl	8014692 <strncmp>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d022      	beq.n	8006302 <getCommand+0x122>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80062bc:	002a      	movs	r2, r5
 80062be:	4950      	ldr	r1, [pc, #320]	; (8006400 <getCommand+0x220>)
 80062c0:	0038      	movs	r0, r7
 80062c2:	f00e f9e6 	bl	8014692 <strncmp>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d022      	beq.n	8006310 <getCommand+0x130>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80062ca:	002a      	movs	r2, r5
 80062cc:	494d      	ldr	r1, [pc, #308]	; (8006404 <getCommand+0x224>)
 80062ce:	0038      	movs	r0, r7
 80062d0:	f00e f9df 	bl	8014692 <strncmp>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d022      	beq.n	800631e <getCommand+0x13e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80062d8:	002a      	movs	r2, r5
 80062da:	494b      	ldr	r1, [pc, #300]	; (8006408 <getCommand+0x228>)
 80062dc:	0038      	movs	r0, r7
 80062de:	f00e f9d8 	bl	8014692 <strncmp>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d022      	beq.n	800632c <getCommand+0x14c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80062e6:	002a      	movs	r2, r5
 80062e8:	4948      	ldr	r1, [pc, #288]	; (800640c <getCommand+0x22c>)
 80062ea:	0038      	movs	r0, r7
 80062ec:	f00e f9d1 	bl	8014692 <strncmp>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d129      	bne.n	8006348 <getCommand+0x168>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 80062f4:	4b3a      	ldr	r3, [pc, #232]	; (80063e0 <getCommand+0x200>)
 80062f6:	795a      	ldrb	r2, [r3, #5]
 80062f8:	4945      	ldr	r1, [pc, #276]	; (8006410 <getCommand+0x230>)
 80062fa:	0020      	movs	r0, r4
 80062fc:	f00e f986 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 8006300:	e027      	b.n	8006352 <getCommand+0x172>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006302:	4b37      	ldr	r3, [pc, #220]	; (80063e0 <getCommand+0x200>)
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	4942      	ldr	r1, [pc, #264]	; (8006410 <getCommand+0x230>)
 8006308:	0020      	movs	r0, r4
 800630a:	f00e f97f 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 800630e:	e020      	b.n	8006352 <getCommand+0x172>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006310:	4b33      	ldr	r3, [pc, #204]	; (80063e0 <getCommand+0x200>)
 8006312:	881a      	ldrh	r2, [r3, #0]
 8006314:	493e      	ldr	r1, [pc, #248]	; (8006410 <getCommand+0x230>)
 8006316:	0020      	movs	r0, r4
 8006318:	f00e f978 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 800631c:	e019      	b.n	8006352 <getCommand+0x172>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 800631e:	4b30      	ldr	r3, [pc, #192]	; (80063e0 <getCommand+0x200>)
 8006320:	885a      	ldrh	r2, [r3, #2]
 8006322:	493b      	ldr	r1, [pc, #236]	; (8006410 <getCommand+0x230>)
 8006324:	0020      	movs	r0, r4
 8006326:	f00e f971 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 800632a:	e012      	b.n	8006352 <getCommand+0x172>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 800632c:	4b2c      	ldr	r3, [pc, #176]	; (80063e0 <getCommand+0x200>)
 800632e:	791a      	ldrb	r2, [r3, #4]
 8006330:	4937      	ldr	r1, [pc, #220]	; (8006410 <getCommand+0x230>)
 8006332:	0020      	movs	r0, r4
 8006334:	f00e f96a 	bl	801460c <sprintf>
	if(result == BOS_ERR_WrongParam)
 8006338:	e00b      	b.n	8006352 <getCommand+0x172>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 800633a:	2205      	movs	r2, #5
 800633c:	4935      	ldr	r1, [pc, #212]	; (8006414 <getCommand+0x234>)
 800633e:	0030      	movs	r0, r6
 8006340:	f00e f9a7 	bl	8014692 <strncmp>
 8006344:	2800      	cmp	r0, #0
 8006346:	d009      	beq.n	800635c <getCommand+0x17c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006348:	2213      	movs	r2, #19
 800634a:	4933      	ldr	r1, [pc, #204]	; (8006418 <getCommand+0x238>)
 800634c:	0020      	movs	r0, r4
 800634e:	f00d ff5f 	bl	8014210 <memcpy>
}
 8006352:	2000      	movs	r0, #0
 8006354:	b002      	add	sp, #8
 8006356:	bc80      	pop	{r7}
 8006358:	46b8      	mov	r8, r7
 800635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800635c:	466a      	mov	r2, sp
 800635e:	2102      	movs	r1, #2
 8006360:	0028      	movs	r0, r5
 8006362:	f008 fa3f 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006366:	0006      	movs	r6, r0
		for(i =0; i < MaxNumOfGroups; i++){
 8006368:	4f2c      	ldr	r7, [pc, #176]	; (800641c <getCommand+0x23c>)
 800636a:	2500      	movs	r5, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 800636c:	0039      	movs	r1, r7
 800636e:	0030      	movs	r0, r6
 8006370:	f7f9 fec8 	bl	8000104 <strcmp>
 8006374:	2800      	cmp	r0, #0
 8006376:	d01c      	beq.n	80063b2 <getCommand+0x1d2>
		for(i =0; i < MaxNumOfGroups; i++){
 8006378:	3501      	adds	r5, #1
 800637a:	b2ed      	uxtb	r5, r5
 800637c:	370a      	adds	r7, #10
 800637e:	2d0a      	cmp	r5, #10
 8006380:	d1f4      	bne.n	800636c <getCommand+0x18c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006382:	0032      	movs	r2, r6
 8006384:	4926      	ldr	r1, [pc, #152]	; (8006420 <getCommand+0x240>)
 8006386:	0020      	movs	r0, r4
 8006388:	f00e f940 	bl	801460c <sprintf>
			return pdFALSE;
 800638c:	e7e1      	b.n	8006352 <getCommand+0x172>
			for(j =1; j <= N; j++)						// N modules
 800638e:	3501      	adds	r5, #1
 8006390:	b2ed      	uxtb	r5, r5
 8006392:	783b      	ldrb	r3, [r7, #0]
 8006394:	42ab      	cmp	r3, r5
 8006396:	d3dc      	bcc.n	8006352 <getCommand+0x172>
				if(InGroup(j,i)){
 8006398:	1e6b      	subs	r3, r5, #1
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4642      	mov	r2, r8
 800639e:	5a9b      	ldrh	r3, [r3, r2]
 80063a0:	421e      	tst	r6, r3
 80063a2:	d0f4      	beq.n	800638e <getCommand+0x1ae>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80063a4:	002b      	movs	r3, r5
 80063a6:	0022      	movs	r2, r4
 80063a8:	491e      	ldr	r1, [pc, #120]	; (8006424 <getCommand+0x244>)
 80063aa:	0020      	movs	r0, r4
 80063ac:	f00e f92e 	bl	801460c <sprintf>
 80063b0:	e7ed      	b.n	800638e <getCommand+0x1ae>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80063b2:	0032      	movs	r2, r6
 80063b4:	491c      	ldr	r1, [pc, #112]	; (8006428 <getCommand+0x248>)
 80063b6:	0020      	movs	r0, r4
 80063b8:	f00e f928 	bl	801460c <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80063bc:	4b1b      	ldr	r3, [pc, #108]	; (800642c <getCommand+0x24c>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0c6      	beq.n	8006352 <getCommand+0x172>
 80063c4:	2601      	movs	r6, #1
 80063c6:	40ae      	lsls	r6, r5
 80063c8:	2501      	movs	r5, #1
				if(InGroup(j,i)){
 80063ca:	4b19      	ldr	r3, [pc, #100]	; (8006430 <getCommand+0x250>)
 80063cc:	4698      	mov	r8, r3
			for(j =1; j <= N; j++)						// N modules
 80063ce:	4f17      	ldr	r7, [pc, #92]	; (800642c <getCommand+0x24c>)
 80063d0:	e7e2      	b.n	8006398 <getCommand+0x1b8>
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	2000129c 	.word	0x2000129c
 80063d8:	0801b4e8 	.word	0x0801b4e8
 80063dc:	0801b4f0 	.word	0x0801b4f0
 80063e0:	20006aa8 	.word	0x20006aa8
 80063e4:	0801b584 	.word	0x0801b584
 80063e8:	0801a740 	.word	0x0801a740
 80063ec:	0801a608 	.word	0x0801a608
 80063f0:	0801b4fc 	.word	0x0801b4fc
 80063f4:	0801b500 	.word	0x0801b500
 80063f8:	0801b508 	.word	0x0801b508
 80063fc:	0801b510 	.word	0x0801b510
 8006400:	0801b51c 	.word	0x0801b51c
 8006404:	0801b528 	.word	0x0801b528
 8006408:	0801b538 	.word	0x0801b538
 800640c:	0801b54c 	.word	0x0801b54c
 8006410:	0801abfc 	.word	0x0801abfc
 8006414:	0801b560 	.word	0x0801b560
 8006418:	0801b570 	.word	0x0801b570
 800641c:	20000e64 	.word	0x20000e64
 8006420:	0801b5a4 	.word	0x0801b5a4
 8006424:	0801b568 	.word	0x0801b568
 8006428:	0801b5c0 	.word	0x0801b5c0
 800642c:	2000001c 	.word	0x2000001c
 8006430:	20000ec8 	.word	0x20000ec8

08006434 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	0004      	movs	r4, r0
 800643a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800643c:	2300      	movs	r3, #0
 800643e:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006440:	2c00      	cmp	r4, #0
 8006442:	d01a      	beq.n	800647a <defaultCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006444:	aa01      	add	r2, sp, #4
 8006446:	2101      	movs	r1, #1
 8006448:	f008 f9cc 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 800644c:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800644e:	9e01      	ldr	r6, [sp, #4]
 8006450:	0032      	movs	r2, r6
 8006452:	491f      	ldr	r1, [pc, #124]	; (80064d0 <defaultCommand+0x9c>)
 8006454:	f00e f91d 	bl	8014692 <strncmp>
 8006458:	2800      	cmp	r0, #0
 800645a:	d010      	beq.n	800647e <defaultCommand+0x4a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 800645c:	0032      	movs	r2, r6
 800645e:	491d      	ldr	r1, [pc, #116]	; (80064d4 <defaultCommand+0xa0>)
 8006460:	0028      	movs	r0, r5
 8006462:	f00e f916 	bl	8014692 <strncmp>
 8006466:	2800      	cmp	r0, #0
 8006468:	d01a      	beq.n	80064a0 <defaultCommand+0x6c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800646a:	220f      	movs	r2, #15
 800646c:	491a      	ldr	r1, [pc, #104]	; (80064d8 <defaultCommand+0xa4>)
 800646e:	0020      	movs	r0, r4
 8006470:	f00d fece 	bl	8014210 <memcpy>
}
 8006474:	2000      	movs	r0, #0
 8006476:	b002      	add	sp, #8
 8006478:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 800647a:	b672      	cpsid	i
 800647c:	e7fe      	b.n	800647c <defaultCommand+0x48>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800647e:	4917      	ldr	r1, [pc, #92]	; (80064dc <defaultCommand+0xa8>)
 8006480:	4b17      	ldr	r3, [pc, #92]	; (80064e0 <defaultCommand+0xac>)
 8006482:	000a      	movs	r2, r1
 8006484:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006486:	c223      	stmia	r2!, {r0, r1, r5}
 8006488:	cb23      	ldmia	r3!, {r0, r1, r5}
 800648a:	c223      	stmia	r2!, {r0, r1, r5}
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006490:	f7fd f90c 	bl	80036ac <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006494:	2227      	movs	r2, #39	; 0x27
 8006496:	4913      	ldr	r1, [pc, #76]	; (80064e4 <defaultCommand+0xb0>)
 8006498:	0020      	movs	r0, r4
 800649a:	f00d feb9 	bl	8014210 <memcpy>
	if(result == BOS_ERR_WrongValue)
 800649e:	e7e9      	b.n	8006474 <defaultCommand+0x40>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 80064a0:	2200      	movs	r2, #0
 80064a2:	2116      	movs	r1, #22
 80064a4:	20ff      	movs	r0, #255	; 0xff
 80064a6:	f003 fa59 	bl	800995c <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80064aa:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <defaultCommand+0xb4>)
 80064ac:	2202      	movs	r2, #2
 80064ae:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80064b0:	2064      	movs	r0, #100	; 0x64
 80064b2:	f008 f870 	bl	800e596 <osDelay>
		ClearEEportsDir();
 80064b6:	f7fd f931 	bl	800371c <ClearEEportsDir>
		ClearROtopology();
 80064ba:	f005 fac7 	bl	800ba4c <ClearROtopology>
		osDelay(100);
 80064be:	2064      	movs	r0, #100	; 0x64
 80064c0:	f008 f869 	bl	800e596 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 80064c4:	2240      	movs	r2, #64	; 0x40
 80064c6:	4909      	ldr	r1, [pc, #36]	; (80064ec <defaultCommand+0xb8>)
 80064c8:	0020      	movs	r0, r4
 80064ca:	f00d fea1 	bl	8014210 <memcpy>
	if(result == BOS_ERR_WrongValue)
 80064ce:	e7d1      	b.n	8006474 <defaultCommand+0x40>
 80064d0:	0801b5d4 	.word	0x0801b5d4
 80064d4:	0801b604 	.word	0x0801b604
 80064d8:	0801b60c 	.word	0x0801b60c
 80064dc:	20006aa8 	.word	0x20006aa8
 80064e0:	20000000 	.word	0x20000000
 80064e4:	0801b5dc 	.word	0x0801b5dc
 80064e8:	20000efc 	.word	0x20000efc
 80064ec:	0801b61c 	.word	0x0801b61c

080064f0 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80064f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f2:	46d6      	mov	lr, sl
 80064f4:	464f      	mov	r7, r9
 80064f6:	4646      	mov	r6, r8
 80064f8:	b5c0      	push	{r6, r7, lr}
 80064fa:	b08e      	sub	sp, #56	; 0x38
 80064fc:	4682      	mov	sl, r0
 80064fe:	0014      	movs	r4, r2
 8006500:	2700      	movs	r7, #0
 8006502:	2600      	movs	r6, #0
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006504:	970d      	str	r7, [sp, #52]	; 0x34
 8006506:	970c      	str	r7, [sp, #48]	; 0x30
 8006508:	970b      	str	r7, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 800650a:	970a      	str	r7, [sp, #40]	; 0x28
 800650c:	9709      	str	r7, [sp, #36]	; 0x24
	configASSERT(pcWriteBuffer);
 800650e:	2800      	cmp	r0, #0
 8006510:	d023      	beq.n	800655a <setCommand+0x6a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006512:	aa0d      	add	r2, sp, #52	; 0x34
 8006514:	2101      	movs	r1, #1
 8006516:	0020      	movs	r0, r4
 8006518:	f008 f964 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 800651c:	0005      	movs	r5, r0
 800651e:	4bd6      	ldr	r3, [pc, #856]	; (8006878 <setCommand+0x388>)
 8006520:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006522:	2204      	movs	r2, #4
 8006524:	49d5      	ldr	r1, [pc, #852]	; (800687c <setCommand+0x38c>)
 8006526:	f00e f8b4 	bl	8014692 <strncmp>
 800652a:	2800      	cmp	r0, #0
 800652c:	d017      	beq.n	800655e <setCommand+0x6e>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800652e:	2204      	movs	r2, #4
 8006530:	49d3      	ldr	r1, [pc, #844]	; (8006880 <setCommand+0x390>)
 8006532:	0028      	movs	r0, r5
 8006534:	f00e f8ad 	bl	8014692 <strncmp>
 8006538:	2800      	cmp	r0, #0
 800653a:	d100      	bne.n	800653e <setCommand+0x4e>
 800653c:	e15b      	b.n	80067f6 <setCommand+0x306>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800653e:	2204      	movs	r2, #4
 8006540:	49d0      	ldr	r1, [pc, #832]	; (8006884 <setCommand+0x394>)
 8006542:	0028      	movs	r0, r5
 8006544:	f00e f8a5 	bl	8014692 <strncmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	d100      	bne.n	800654e <setCommand+0x5e>
 800654c:	e1f8      	b.n	8006940 <setCommand+0x450>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800654e:	2213      	movs	r2, #19
 8006550:	49cd      	ldr	r1, [pc, #820]	; (8006888 <setCommand+0x398>)
 8006552:	4650      	mov	r0, sl
 8006554:	f00d fe5c 	bl	8014210 <memcpy>
 8006558:	e33c      	b.n	8006bd4 <setCommand+0x6e4>
	configASSERT(pcWriteBuffer);
 800655a:	b672      	cpsid	i
 800655c:	e7fe      	b.n	800655c <setCommand+0x6c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800655e:	aa0c      	add	r2, sp, #48	; 0x30
 8006560:	2102      	movs	r1, #2
 8006562:	0020      	movs	r0, r4
 8006564:	f008 f93e 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006568:	0004      	movs	r4, r0
 800656a:	4bc8      	ldr	r3, [pc, #800]	; (800688c <setCommand+0x39c>)
 800656c:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800656e:	4bc2      	ldr	r3, [pc, #776]	; (8006878 <setCommand+0x388>)
 8006570:	681d      	ldr	r5, [r3, #0]
 8006572:	3504      	adds	r5, #4
 8006574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006576:	1f1e      	subs	r6, r3, #4
 8006578:	0032      	movs	r2, r6
 800657a:	49c5      	ldr	r1, [pc, #788]	; (8006890 <setCommand+0x3a0>)
 800657c:	0028      	movs	r0, r5
 800657e:	f00e f888 	bl	8014692 <strncmp>
 8006582:	2800      	cmp	r0, #0
 8006584:	d150      	bne.n	8006628 <setCommand+0x138>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006588:	002a      	movs	r2, r5
 800658a:	49c2      	ldr	r1, [pc, #776]	; (8006894 <setCommand+0x3a4>)
 800658c:	0020      	movs	r0, r4
 800658e:	f00e f880 	bl	8014692 <strncmp>
 8006592:	2800      	cmp	r0, #0
 8006594:	d01a      	beq.n	80065cc <setCommand+0xdc>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006596:	002a      	movs	r2, r5
 8006598:	49bf      	ldr	r1, [pc, #764]	; (8006898 <setCommand+0x3a8>)
 800659a:	0020      	movs	r0, r4
 800659c:	f00e f879 	bl	8014692 <strncmp>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d01f      	beq.n	80065e4 <setCommand+0xf4>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80065a4:	002a      	movs	r2, r5
 80065a6:	49bd      	ldr	r1, [pc, #756]	; (800689c <setCommand+0x3ac>)
 80065a8:	0020      	movs	r0, r4
 80065aa:	f00e f872 	bl	8014692 <strncmp>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d024      	beq.n	80065fc <setCommand+0x10c>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80065b2:	002a      	movs	r2, r5
 80065b4:	49ba      	ldr	r1, [pc, #744]	; (80068a0 <setCommand+0x3b0>)
 80065b6:	0020      	movs	r0, r4
 80065b8:	f00e f86b 	bl	8014692 <strncmp>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d029      	beq.n	8006614 <setCommand+0x124>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80065c0:	220f      	movs	r2, #15
 80065c2:	49b8      	ldr	r1, [pc, #736]	; (80068a4 <setCommand+0x3b4>)
 80065c4:	4650      	mov	r0, sl
 80065c6:	f00d fe23 	bl	8014210 <memcpy>
 80065ca:	e303      	b.n	8006bd4 <setCommand+0x6e4>
				BOS.response = BOS_RESPONSE_ALL;
 80065cc:	4bb6      	ldr	r3, [pc, #728]	; (80068a8 <setCommand+0x3b8>)
 80065ce:	2260      	movs	r2, #96	; 0x60
 80065d0:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80065d2:	79d9      	ldrb	r1, [r3, #7]
 80065d4:	0209      	lsls	r1, r1, #8
 80065d6:	2360      	movs	r3, #96	; 0x60
 80065d8:	4319      	orrs	r1, r3
 80065da:	308a      	adds	r0, #138	; 0x8a
 80065dc:	0040      	lsls	r0, r0, #1
 80065de:	f001 f9ef 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 80065e2:	e1a1      	b.n	8006928 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_MSG;
 80065e4:	4bb0      	ldr	r3, [pc, #704]	; (80068a8 <setCommand+0x3b8>)
 80065e6:	2220      	movs	r2, #32
 80065e8:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80065ea:	79d9      	ldrb	r1, [r3, #7]
 80065ec:	0209      	lsls	r1, r1, #8
 80065ee:	2320      	movs	r3, #32
 80065f0:	4319      	orrs	r1, r3
 80065f2:	308a      	adds	r0, #138	; 0x8a
 80065f4:	0040      	lsls	r0, r0, #1
 80065f6:	f001 f9e3 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 80065fa:	e195      	b.n	8006928 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_CLI;
 80065fc:	4baa      	ldr	r3, [pc, #680]	; (80068a8 <setCommand+0x3b8>)
 80065fe:	2240      	movs	r2, #64	; 0x40
 8006600:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006602:	79d9      	ldrb	r1, [r3, #7]
 8006604:	0209      	lsls	r1, r1, #8
 8006606:	2340      	movs	r3, #64	; 0x40
 8006608:	4319      	orrs	r1, r3
 800660a:	308a      	adds	r0, #138	; 0x8a
 800660c:	0040      	lsls	r0, r0, #1
 800660e:	f001 f9d7 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 8006612:	e189      	b.n	8006928 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_NONE;
 8006614:	4ba4      	ldr	r3, [pc, #656]	; (80068a8 <setCommand+0x3b8>)
 8006616:	2200      	movs	r2, #0
 8006618:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800661a:	79d9      	ldrb	r1, [r3, #7]
 800661c:	0209      	lsls	r1, r1, #8
 800661e:	308a      	adds	r0, #138	; 0x8a
 8006620:	0040      	lsls	r0, r0, #1
 8006622:	f001 f9cd 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 8006626:	e17f      	b.n	8006928 <setCommand+0x438>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006628:	0032      	movs	r2, r6
 800662a:	49a0      	ldr	r1, [pc, #640]	; (80068ac <setCommand+0x3bc>)
 800662c:	0028      	movs	r0, r5
 800662e:	f00e f830 	bl	8014692 <strncmp>
 8006632:	2800      	cmp	r0, #0
 8006634:	d149      	bne.n	80066ca <setCommand+0x1da>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006638:	002a      	movs	r2, r5
 800663a:	4996      	ldr	r1, [pc, #600]	; (8006894 <setCommand+0x3a4>)
 800663c:	0020      	movs	r0, r4
 800663e:	f00e f828 	bl	8014692 <strncmp>
 8006642:	2800      	cmp	r0, #0
 8006644:	d01d      	beq.n	8006682 <setCommand+0x192>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006646:	002a      	movs	r2, r5
 8006648:	4993      	ldr	r1, [pc, #588]	; (8006898 <setCommand+0x3a8>)
 800664a:	0020      	movs	r0, r4
 800664c:	f00e f821 	bl	8014692 <strncmp>
 8006650:	2800      	cmp	r0, #0
 8006652:	d022      	beq.n	800669a <setCommand+0x1aa>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006654:	002a      	movs	r2, r5
 8006656:	498e      	ldr	r1, [pc, #568]	; (8006890 <setCommand+0x3a0>)
 8006658:	0020      	movs	r0, r4
 800665a:	f00e f81a 	bl	8014692 <strncmp>
 800665e:	2800      	cmp	r0, #0
 8006660:	d027      	beq.n	80066b2 <setCommand+0x1c2>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006662:	002a      	movs	r2, r5
 8006664:	498e      	ldr	r1, [pc, #568]	; (80068a0 <setCommand+0x3b0>)
 8006666:	0020      	movs	r0, r4
 8006668:	f00e f813 	bl	8014692 <strncmp>
 800666c:	2800      	cmp	r0, #0
 800666e:	d1a7      	bne.n	80065c0 <setCommand+0xd0>
				BOS.trace =TRACE_NONE;
 8006670:	4b8d      	ldr	r3, [pc, #564]	; (80068a8 <setCommand+0x3b8>)
 8006672:	2200      	movs	r2, #0
 8006674:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006676:	7999      	ldrb	r1, [r3, #6]
 8006678:	308a      	adds	r0, #138	; 0x8a
 800667a:	0040      	lsls	r0, r0, #1
 800667c:	f001 f9a0 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 8006680:	e152      	b.n	8006928 <setCommand+0x438>
				BOS.trace =TRACE_BOTH;
 8006682:	4b89      	ldr	r3, [pc, #548]	; (80068a8 <setCommand+0x3b8>)
 8006684:	2203      	movs	r2, #3
 8006686:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006688:	799b      	ldrb	r3, [r3, #6]
 800668a:	21c0      	movs	r1, #192	; 0xc0
 800668c:	0089      	lsls	r1, r1, #2
 800668e:	4319      	orrs	r1, r3
 8006690:	308a      	adds	r0, #138	; 0x8a
 8006692:	0040      	lsls	r0, r0, #1
 8006694:	f001 f994 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 8006698:	e146      	b.n	8006928 <setCommand+0x438>
				BOS.trace =TRACE_MESSAGE;
 800669a:	4b83      	ldr	r3, [pc, #524]	; (80068a8 <setCommand+0x3b8>)
 800669c:	2201      	movs	r2, #1
 800669e:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80066a0:	799b      	ldrb	r3, [r3, #6]
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	0049      	lsls	r1, r1, #1
 80066a6:	4319      	orrs	r1, r3
 80066a8:	308a      	adds	r0, #138	; 0x8a
 80066aa:	0040      	lsls	r0, r0, #1
 80066ac:	f001 f988 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 80066b0:	e13a      	b.n	8006928 <setCommand+0x438>
				BOS.trace =TRACE_RESPONSE;
 80066b2:	4b7d      	ldr	r3, [pc, #500]	; (80068a8 <setCommand+0x3b8>)
 80066b4:	2202      	movs	r2, #2
 80066b6:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80066b8:	799b      	ldrb	r3, [r3, #6]
 80066ba:	2180      	movs	r1, #128	; 0x80
 80066bc:	0089      	lsls	r1, r1, #2
 80066be:	4319      	orrs	r1, r3
 80066c0:	308a      	adds	r0, #138	; 0x8a
 80066c2:	0040      	lsls	r0, r0, #1
 80066c4:	f001 f97c 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 80066c8:	e12e      	b.n	8006928 <setCommand+0x438>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80066ca:	0032      	movs	r2, r6
 80066cc:	4978      	ldr	r1, [pc, #480]	; (80068b0 <setCommand+0x3c0>)
 80066ce:	0028      	movs	r0, r5
 80066d0:	f00d ffdf 	bl	8014692 <strncmp>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d02f      	beq.n	8006738 <setCommand+0x248>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80066d8:	0032      	movs	r2, r6
 80066da:	4976      	ldr	r1, [pc, #472]	; (80068b4 <setCommand+0x3c4>)
 80066dc:	0028      	movs	r0, r5
 80066de:	f00d ffd8 	bl	8014692 <strncmp>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d058      	beq.n	8006798 <setCommand+0x2a8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80066e6:	0032      	movs	r2, r6
 80066e8:	4973      	ldr	r1, [pc, #460]	; (80068b8 <setCommand+0x3c8>)
 80066ea:	0028      	movs	r0, r5
 80066ec:	f00d ffd1 	bl	8014692 <strncmp>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d05f      	beq.n	80067b4 <setCommand+0x2c4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80066f4:	0032      	movs	r2, r6
 80066f6:	4971      	ldr	r1, [pc, #452]	; (80068bc <setCommand+0x3cc>)
 80066f8:	0028      	movs	r0, r5
 80066fa:	f00d ffca 	bl	8014692 <strncmp>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d066      	beq.n	80067d0 <setCommand+0x2e0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006702:	0032      	movs	r2, r6
 8006704:	496e      	ldr	r1, [pc, #440]	; (80068c0 <setCommand+0x3d0>)
 8006706:	0028      	movs	r0, r5
 8006708:	f00d ffc3 	bl	8014692 <strncmp>
 800670c:	2800      	cmp	r0, #0
 800670e:	d000      	beq.n	8006712 <setCommand+0x222>
 8006710:	e71d      	b.n	800654e <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 8006712:	0020      	movs	r0, r4
 8006714:	f00d fb15 	bl	8013d42 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006718:	1e43      	subs	r3, r0, #1
 800671a:	b29b      	uxth	r3, r3
 800671c:	2bfe      	cmp	r3, #254	; 0xfe
 800671e:	d900      	bls.n	8006722 <setCommand+0x232>
 8006720:	e74e      	b.n	80065c0 <setCommand+0xd0>
				BOS.buttons.maxInterClickTime =temp16;
 8006722:	4b61      	ldr	r3, [pc, #388]	; (80068a8 <setCommand+0x3b8>)
 8006724:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006726:	0200      	lsls	r0, r0, #8
 8006728:	7919      	ldrb	r1, [r3, #4]
 800672a:	4301      	orrs	r1, r0
 800672c:	b289      	uxth	r1, r1
 800672e:	2018      	movs	r0, #24
 8006730:	30ff      	adds	r0, #255	; 0xff
 8006732:	f001 f945 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 8006736:	e0f7      	b.n	8006928 <setCommand+0x438>
			temp2 =atoi((const char* )pcParameterString2);
 8006738:	0020      	movs	r0, r4
 800673a:	f00d fb02 	bl	8013d42 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 800673e:	23e1      	movs	r3, #225	; 0xe1
 8006740:	031b      	lsls	r3, r3, #12
 8006742:	4298      	cmp	r0, r3
 8006744:	d900      	bls.n	8006748 <setCommand+0x258>
 8006746:	e73b      	b.n	80065c0 <setCommand+0xd0>
				BOS.clibaudrate =temp2;
 8006748:	4c57      	ldr	r4, [pc, #348]	; (80068a8 <setCommand+0x3b8>)
 800674a:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800674c:	b281      	uxth	r1, r0
 800674e:	208c      	movs	r0, #140	; 0x8c
 8006750:	0040      	lsls	r0, r0, #1
 8006752:	f001 f935 	bl	80079c0 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006756:	8961      	ldrh	r1, [r4, #10]
 8006758:	201a      	movs	r0, #26
 800675a:	30ff      	adds	r0, #255	; 0xff
 800675c:	f001 f930 	bl	80079c0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006760:	4b45      	ldr	r3, [pc, #276]	; (8006878 <setCommand+0x388>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	2300      	movs	r3, #0
 8006766:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006768:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800676a:	4b48      	ldr	r3, [pc, #288]	; (800688c <setCommand+0x39c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4955      	ldr	r1, [pc, #340]	; (80068c4 <setCommand+0x3d4>)
 8006770:	4650      	mov	r0, sl
 8006772:	f00d ff4b 	bl	801460c <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006776:	4650      	mov	r0, sl
 8006778:	f7f9 fcce 	bl	8000118 <strlen>
 800677c:	4450      	add	r0, sl
 800677e:	2230      	movs	r2, #48	; 0x30
 8006780:	4951      	ldr	r1, [pc, #324]	; (80068c8 <setCommand+0x3d8>)
 8006782:	f00d fd45 	bl	8014210 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006786:	4650      	mov	r0, sl
 8006788:	f7f9 fcc6 	bl	8000118 <strlen>
 800678c:	4450      	add	r0, sl
 800678e:	22b2      	movs	r2, #178	; 0xb2
 8006790:	494e      	ldr	r1, [pc, #312]	; (80068cc <setCommand+0x3dc>)
 8006792:	f00d fd3d 	bl	8014210 <memcpy>
 8006796:	e21d      	b.n	8006bd4 <setCommand+0x6e4>
			temp16 =atoi((const char* )pcParameterString2);
 8006798:	0020      	movs	r0, r4
 800679a:	f00d fad2 	bl	8013d42 <atoi>
 800679e:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80067a0:	2900      	cmp	r1, #0
 80067a2:	d100      	bne.n	80067a6 <setCommand+0x2b6>
 80067a4:	e70c      	b.n	80065c0 <setCommand+0xd0>
				BOS.buttons.debounce =temp16;
 80067a6:	4b40      	ldr	r3, [pc, #256]	; (80068a8 <setCommand+0x3b8>)
 80067a8:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80067aa:	2016      	movs	r0, #22
 80067ac:	30ff      	adds	r0, #255	; 0xff
 80067ae:	f001 f907 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 80067b2:	e0b9      	b.n	8006928 <setCommand+0x438>
			temp16 =atoi((const char* )pcParameterString2);
 80067b4:	0020      	movs	r0, r4
 80067b6:	f00d fac4 	bl	8013d42 <atoi>
 80067ba:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80067bc:	2900      	cmp	r1, #0
 80067be:	d100      	bne.n	80067c2 <setCommand+0x2d2>
 80067c0:	e6fe      	b.n	80065c0 <setCommand+0xd0>
				BOS.buttons.singleClickTime =temp16;
 80067c2:	4b39      	ldr	r3, [pc, #228]	; (80068a8 <setCommand+0x3b8>)
 80067c4:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80067c6:	208b      	movs	r0, #139	; 0x8b
 80067c8:	0040      	lsls	r0, r0, #1
 80067ca:	f001 f8f9 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 80067ce:	e0ab      	b.n	8006928 <setCommand+0x438>
			temp16 =atoi((const char* )pcParameterString2);
 80067d0:	0020      	movs	r0, r4
 80067d2:	f00d fab6 	bl	8013d42 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80067d6:	1e43      	subs	r3, r0, #1
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2bfe      	cmp	r3, #254	; 0xfe
 80067dc:	d900      	bls.n	80067e0 <setCommand+0x2f0>
 80067de:	e6ef      	b.n	80065c0 <setCommand+0xd0>
				BOS.buttons.minInterClickTime =temp16;
 80067e0:	b2c0      	uxtb	r0, r0
 80067e2:	4b31      	ldr	r3, [pc, #196]	; (80068a8 <setCommand+0x3b8>)
 80067e4:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067e6:	7959      	ldrb	r1, [r3, #5]
 80067e8:	0209      	lsls	r1, r1, #8
 80067ea:	4301      	orrs	r1, r0
 80067ec:	2018      	movs	r0, #24
 80067ee:	30ff      	adds	r0, #255	; 0xff
 80067f0:	f001 f8e6 	bl	80079c0 <EE_WriteVariable>
	if(result == BOS_OK){
 80067f4:	e098      	b.n	8006928 <setCommand+0x438>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80067f6:	aa0c      	add	r2, sp, #48	; 0x30
 80067f8:	2102      	movs	r1, #2
 80067fa:	0020      	movs	r0, r4
 80067fc:	f007 fff2 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006800:	4b22      	ldr	r3, [pc, #136]	; (800688c <setCommand+0x39c>)
 8006802:	4698      	mov	r8, r3
 8006804:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006806:	aa0b      	add	r2, sp, #44	; 0x2c
 8006808:	2103      	movs	r1, #3
 800680a:	0020      	movs	r0, r4
 800680c:	f007 ffea 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006810:	4d2f      	ldr	r5, [pc, #188]	; (80068d0 <setCommand+0x3e0>)
 8006812:	6028      	str	r0, [r5, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006814:	aa0a      	add	r2, sp, #40	; 0x28
 8006816:	2104      	movs	r1, #4
 8006818:	0020      	movs	r0, r4
 800681a:	f007 ffe3 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 800681e:	4b2d      	ldr	r3, [pc, #180]	; (80068d4 <setCommand+0x3e4>)
 8006820:	4699      	mov	r9, r3
 8006822:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006824:	aa09      	add	r2, sp, #36	; 0x24
 8006826:	2105      	movs	r1, #5
 8006828:	0020      	movs	r0, r4
 800682a:	f007 ffdb 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 800682e:	4f2a      	ldr	r7, [pc, #168]	; (80068d8 <setCommand+0x3e8>)
 8006830:	6038      	str	r0, [r7, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006832:	4643      	mov	r3, r8
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	f00d fa84 	bl	8013d42 <atoi>
 800683a:	b2c3      	uxtb	r3, r0
 800683c:	4698      	mov	r8, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800683e:	6828      	ldr	r0, [r5, #0]
 8006840:	f00d fa7f 	bl	8013d42 <atoi>
 8006844:	0005      	movs	r5, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006846:	464b      	mov	r3, r9
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f00d fa7a 	bl	8013d42 <atoi>
 800684e:	0004      	movs	r4, r0
		if(pcParameterString5 != NULL){
 8006850:	683f      	ldr	r7, [r7, #0]
 8006852:	2f00      	cmp	r7, #0
 8006854:	d047      	beq.n	80068e6 <setCommand+0x3f6>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006856:	2202      	movs	r2, #2
 8006858:	4920      	ldr	r1, [pc, #128]	; (80068dc <setCommand+0x3ec>)
 800685a:	0038      	movs	r0, r7
 800685c:	f00d ff19 	bl	8014692 <strncmp>
 8006860:	2800      	cmp	r0, #0
 8006862:	d03f      	beq.n	80068e4 <setCommand+0x3f4>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006864:	2202      	movs	r2, #2
 8006866:	491e      	ldr	r1, [pc, #120]	; (80068e0 <setCommand+0x3f0>)
 8006868:	0038      	movs	r0, r7
 800686a:	f00d ff12 	bl	8014692 <strncmp>
				temp84 =RTC_PM;
 800686e:	2602      	movs	r6, #2
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006870:	2800      	cmp	r0, #0
 8006872:	d038      	beq.n	80068e6 <setCommand+0x3f6>
				result =BOS_ERR_WrongValue;
 8006874:	2668      	movs	r6, #104	; 0x68
 8006876:	e1aa      	b.n	8006bce <setCommand+0x6de>
 8006878:	20001298 	.word	0x20001298
 800687c:	0801b4e8 	.word	0x0801b4e8
 8006880:	0801b760 	.word	0x0801b760
 8006884:	0801b770 	.word	0x0801b770
 8006888:	0801b570 	.word	0x0801b570
 800688c:	200012a4 	.word	0x200012a4
 8006890:	0801b4f0 	.word	0x0801b4f0
 8006894:	0801a740 	.word	0x0801a740
 8006898:	0801b65c 	.word	0x0801b65c
 800689c:	0801b664 	.word	0x0801b664
 80068a0:	0801b500 	.word	0x0801b500
 80068a4:	0801b60c 	.word	0x0801b60c
 80068a8:	20006aa8 	.word	0x20006aa8
 80068ac:	0801b508 	.word	0x0801b508
 80068b0:	0801b510 	.word	0x0801b510
 80068b4:	0801b51c 	.word	0x0801b51c
 80068b8:	0801b528 	.word	0x0801b528
 80068bc:	0801b538 	.word	0x0801b538
 80068c0:	0801b54c 	.word	0x0801b54c
 80068c4:	0801b668 	.word	0x0801b668
 80068c8:	0801b67c 	.word	0x0801b67c
 80068cc:	0801b6ac 	.word	0x0801b6ac
 80068d0:	200012ac 	.word	0x200012ac
 80068d4:	200012b0 	.word	0x200012b0
 80068d8:	200012b4 	.word	0x200012b4
 80068dc:	0801b768 	.word	0x0801b768
 80068e0:	0801b76c 	.word	0x0801b76c
				temp84 =RTC_AM;
 80068e4:	2601      	movs	r6, #1
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80068e6:	4643      	mov	r3, r8
 80068e8:	2b17      	cmp	r3, #23
 80068ea:	d900      	bls.n	80068ee <setCommand+0x3fe>
 80068ec:	e668      	b.n	80065c0 <setCommand+0xd0>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80068ee:	b2ed      	uxtb	r5, r5
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80068f0:	2d3b      	cmp	r5, #59	; 0x3b
 80068f2:	d900      	bls.n	80068f6 <setCommand+0x406>
 80068f4:	e664      	b.n	80065c0 <setCommand+0xd0>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80068f6:	b2e4      	uxtb	r4, r4
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80068f8:	2c3b      	cmp	r4, #59	; 0x3b
 80068fa:	d900      	bls.n	80068fe <setCommand+0x40e>
 80068fc:	e660      	b.n	80065c0 <setCommand+0xd0>
				GetTimeDate();
 80068fe:	f007 fa6b 	bl	800ddd8 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006902:	4fb8      	ldr	r7, [pc, #736]	; (8006be4 <setCommand+0x6f4>)
 8006904:	7d3b      	ldrb	r3, [r7, #20]
 8006906:	8b3a      	ldrh	r2, [r7, #24]
 8006908:	7d79      	ldrb	r1, [r7, #21]
 800690a:	7db8      	ldrb	r0, [r7, #22]
 800690c:	7b3f      	ldrb	r7, [r7, #12]
 800690e:	b27f      	sxtb	r7, r7
 8006910:	9704      	str	r7, [sp, #16]
 8006912:	9603      	str	r6, [sp, #12]
 8006914:	4646      	mov	r6, r8
 8006916:	9602      	str	r6, [sp, #8]
 8006918:	9501      	str	r5, [sp, #4]
 800691a:	9400      	str	r4, [sp, #0]
 800691c:	f007 fa02 	bl	800dd24 <BOS_CalendarConfig>
 8006920:	0006      	movs	r6, r0
	if(result == BOS_OK){
 8006922:	2e00      	cmp	r6, #0
 8006924:	d000      	beq.n	8006928 <setCommand+0x438>
 8006926:	e14f      	b.n	8006bc8 <setCommand+0x6d8>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006928:	4baf      	ldr	r3, [pc, #700]	; (8006be8 <setCommand+0x6f8>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	2300      	movs	r3, #0
 800692e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006930:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006932:	4bae      	ldr	r3, [pc, #696]	; (8006bec <setCommand+0x6fc>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	49ae      	ldr	r1, [pc, #696]	; (8006bf0 <setCommand+0x700>)
 8006938:	4650      	mov	r0, sl
 800693a:	f00d fe67 	bl	801460c <sprintf>
	return pdFALSE;
 800693e:	e149      	b.n	8006bd4 <setCommand+0x6e4>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006940:	aa0c      	add	r2, sp, #48	; 0x30
 8006942:	2102      	movs	r1, #2
 8006944:	0020      	movs	r0, r4
 8006946:	f007 ff4d 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 800694a:	4da8      	ldr	r5, [pc, #672]	; (8006bec <setCommand+0x6fc>)
 800694c:	6028      	str	r0, [r5, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800694e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006950:	2103      	movs	r1, #3
 8006952:	0020      	movs	r0, r4
 8006954:	f007 ff46 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006958:	4ba6      	ldr	r3, [pc, #664]	; (8006bf4 <setCommand+0x704>)
 800695a:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800695c:	aa0a      	add	r2, sp, #40	; 0x28
 800695e:	2104      	movs	r1, #4
 8006960:	0020      	movs	r0, r4
 8006962:	f007 ff3f 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006966:	4ea4      	ldr	r6, [pc, #656]	; (8006bf8 <setCommand+0x708>)
 8006968:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800696a:	aa09      	add	r2, sp, #36	; 0x24
 800696c:	2105      	movs	r1, #5
 800696e:	0020      	movs	r0, r4
 8006970:	f007 ff38 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006974:	4ca1      	ldr	r4, [pc, #644]	; (8006bfc <setCommand+0x70c>)
 8006976:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006978:	6830      	ldr	r0, [r6, #0]
 800697a:	f00d f9e2 	bl	8013d42 <atoi>
 800697e:	9006      	str	r0, [sp, #24]
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006980:	6820      	ldr	r0, [r4, #0]
 8006982:	f00d f9de 	bl	8013d42 <atoi>
 8006986:	9007      	str	r0, [sp, #28]
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006988:	682c      	ldr	r4, [r5, #0]
 800698a:	2206      	movs	r2, #6
 800698c:	499c      	ldr	r1, [pc, #624]	; (8006c00 <setCommand+0x710>)
 800698e:	0020      	movs	r0, r4
 8006990:	f00d fe7f 	bl	8014692 <strncmp>
 8006994:	2800      	cmp	r0, #0
 8006996:	d100      	bne.n	800699a <setCommand+0x4aa>
 8006998:	e170      	b.n	8006c7c <setCommand+0x78c>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 800699a:	2207      	movs	r2, #7
 800699c:	4999      	ldr	r1, [pc, #612]	; (8006c04 <setCommand+0x714>)
 800699e:	0020      	movs	r0, r4
 80069a0:	f00d fe77 	bl	8014692 <strncmp>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d100      	bne.n	80069aa <setCommand+0x4ba>
 80069a8:	e199      	b.n	8006cde <setCommand+0x7ee>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 80069aa:	2209      	movs	r2, #9
 80069ac:	4996      	ldr	r1, [pc, #600]	; (8006c08 <setCommand+0x718>)
 80069ae:	0020      	movs	r0, r4
 80069b0:	f00d fe6f 	bl	8014692 <strncmp>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d100      	bne.n	80069ba <setCommand+0x4ca>
 80069b8:	e193      	b.n	8006ce2 <setCommand+0x7f2>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 80069ba:	2208      	movs	r2, #8
 80069bc:	4993      	ldr	r1, [pc, #588]	; (8006c0c <setCommand+0x71c>)
 80069be:	0020      	movs	r0, r4
 80069c0:	f00d fe67 	bl	8014692 <strncmp>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d100      	bne.n	80069ca <setCommand+0x4da>
 80069c8:	e18d      	b.n	8006ce6 <setCommand+0x7f6>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 80069ca:	2206      	movs	r2, #6
 80069cc:	4990      	ldr	r1, [pc, #576]	; (8006c10 <setCommand+0x720>)
 80069ce:	0020      	movs	r0, r4
 80069d0:	f00d fe5f 	bl	8014692 <strncmp>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d100      	bne.n	80069da <setCommand+0x4ea>
 80069d8:	e187      	b.n	8006cea <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 80069da:	2208      	movs	r2, #8
 80069dc:	498d      	ldr	r1, [pc, #564]	; (8006c14 <setCommand+0x724>)
 80069de:	0020      	movs	r0, r4
 80069e0:	f00d fe57 	bl	8014692 <strncmp>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d100      	bne.n	80069ea <setCommand+0x4fa>
 80069e8:	e181      	b.n	8006cee <setCommand+0x7fe>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 80069ea:	2206      	movs	r2, #6
 80069ec:	498a      	ldr	r1, [pc, #552]	; (8006c18 <setCommand+0x728>)
 80069ee:	0020      	movs	r0, r4
 80069f0:	f00d fe4f 	bl	8014692 <strncmp>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d100      	bne.n	80069fa <setCommand+0x50a>
 80069f8:	e17b      	b.n	8006cf2 <setCommand+0x802>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80069fa:	4b7e      	ldr	r3, [pc, #504]	; (8006bf4 <setCommand+0x704>)
 80069fc:	681c      	ldr	r4, [r3, #0]
 80069fe:	2207      	movs	r2, #7
 8006a00:	4986      	ldr	r1, [pc, #536]	; (8006c1c <setCommand+0x72c>)
 8006a02:	0020      	movs	r0, r4
 8006a04:	f00d fe45 	bl	8014692 <strncmp>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d100      	bne.n	8006a0e <setCommand+0x51e>
 8006a0c:	e0ab      	b.n	8006b66 <setCommand+0x676>
			result =BOS_ERR_WrongValue;
 8006a0e:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006a10:	2202      	movs	r2, #2
 8006a12:	4983      	ldr	r1, [pc, #524]	; (8006c20 <setCommand+0x730>)
 8006a14:	0020      	movs	r0, r4
 8006a16:	f00d fe3c 	bl	8014692 <strncmp>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d100      	bne.n	8006a20 <setCommand+0x530>
 8006a1e:	e0a5      	b.n	8006b6c <setCommand+0x67c>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006a20:	2208      	movs	r2, #8
 8006a22:	4980      	ldr	r1, [pc, #512]	; (8006c24 <setCommand+0x734>)
 8006a24:	0020      	movs	r0, r4
 8006a26:	f00d fe34 	bl	8014692 <strncmp>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d100      	bne.n	8006a30 <setCommand+0x540>
 8006a2e:	e0a1      	b.n	8006b74 <setCommand+0x684>
 8006a30:	2202      	movs	r2, #2
 8006a32:	497d      	ldr	r1, [pc, #500]	; (8006c28 <setCommand+0x738>)
 8006a34:	0020      	movs	r0, r4
 8006a36:	f00d fe2c 	bl	8014692 <strncmp>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d100      	bne.n	8006a40 <setCommand+0x550>
 8006a3e:	e09b      	b.n	8006b78 <setCommand+0x688>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006a40:	2205      	movs	r2, #5
 8006a42:	497a      	ldr	r1, [pc, #488]	; (8006c2c <setCommand+0x73c>)
 8006a44:	0020      	movs	r0, r4
 8006a46:	f00d fe24 	bl	8014692 <strncmp>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d100      	bne.n	8006a50 <setCommand+0x560>
 8006a4e:	e095      	b.n	8006b7c <setCommand+0x68c>
 8006a50:	2202      	movs	r2, #2
 8006a52:	4977      	ldr	r1, [pc, #476]	; (8006c30 <setCommand+0x740>)
 8006a54:	0020      	movs	r0, r4
 8006a56:	f00d fe1c 	bl	8014692 <strncmp>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d100      	bne.n	8006a60 <setCommand+0x570>
 8006a5e:	e08f      	b.n	8006b80 <setCommand+0x690>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006a60:	2205      	movs	r2, #5
 8006a62:	4974      	ldr	r1, [pc, #464]	; (8006c34 <setCommand+0x744>)
 8006a64:	0020      	movs	r0, r4
 8006a66:	f00d fe14 	bl	8014692 <strncmp>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d100      	bne.n	8006a70 <setCommand+0x580>
 8006a6e:	e089      	b.n	8006b84 <setCommand+0x694>
 8006a70:	2202      	movs	r2, #2
 8006a72:	4971      	ldr	r1, [pc, #452]	; (8006c38 <setCommand+0x748>)
 8006a74:	0020      	movs	r0, r4
 8006a76:	f00d fe0c 	bl	8014692 <strncmp>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d100      	bne.n	8006a80 <setCommand+0x590>
 8006a7e:	e083      	b.n	8006b88 <setCommand+0x698>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006a80:	2203      	movs	r2, #3
 8006a82:	496e      	ldr	r1, [pc, #440]	; (8006c3c <setCommand+0x74c>)
 8006a84:	0020      	movs	r0, r4
 8006a86:	f00d fe04 	bl	8014692 <strncmp>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d07e      	beq.n	8006b8c <setCommand+0x69c>
 8006a8e:	2202      	movs	r2, #2
 8006a90:	496b      	ldr	r1, [pc, #428]	; (8006c40 <setCommand+0x750>)
 8006a92:	0020      	movs	r0, r4
 8006a94:	f00d fdfd 	bl	8014692 <strncmp>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d079      	beq.n	8006b90 <setCommand+0x6a0>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	4969      	ldr	r1, [pc, #420]	; (8006c44 <setCommand+0x754>)
 8006aa0:	0020      	movs	r0, r4
 8006aa2:	f00d fdf6 	bl	8014692 <strncmp>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d074      	beq.n	8006b94 <setCommand+0x6a4>
 8006aaa:	2202      	movs	r2, #2
 8006aac:	4966      	ldr	r1, [pc, #408]	; (8006c48 <setCommand+0x758>)
 8006aae:	0020      	movs	r0, r4
 8006ab0:	f00d fdef 	bl	8014692 <strncmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d06f      	beq.n	8006b98 <setCommand+0x6a8>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006ab8:	2204      	movs	r2, #4
 8006aba:	4964      	ldr	r1, [pc, #400]	; (8006c4c <setCommand+0x75c>)
 8006abc:	0020      	movs	r0, r4
 8006abe:	f00d fde8 	bl	8014692 <strncmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d06a      	beq.n	8006b9c <setCommand+0x6ac>
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	4961      	ldr	r1, [pc, #388]	; (8006c50 <setCommand+0x760>)
 8006aca:	0020      	movs	r0, r4
 8006acc:	f00d fde1 	bl	8014692 <strncmp>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d065      	beq.n	8006ba0 <setCommand+0x6b0>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006ad4:	2205      	movs	r2, #5
 8006ad6:	495f      	ldr	r1, [pc, #380]	; (8006c54 <setCommand+0x764>)
 8006ad8:	0020      	movs	r0, r4
 8006ada:	f00d fdda 	bl	8014692 <strncmp>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d060      	beq.n	8006ba4 <setCommand+0x6b4>
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	495c      	ldr	r1, [pc, #368]	; (8006c58 <setCommand+0x768>)
 8006ae6:	0020      	movs	r0, r4
 8006ae8:	f00d fdd3 	bl	8014692 <strncmp>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d05b      	beq.n	8006ba8 <setCommand+0x6b8>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006af0:	2209      	movs	r2, #9
 8006af2:	495a      	ldr	r1, [pc, #360]	; (8006c5c <setCommand+0x76c>)
 8006af4:	0020      	movs	r0, r4
 8006af6:	f00d fdcc 	bl	8014692 <strncmp>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d056      	beq.n	8006bac <setCommand+0x6bc>
 8006afe:	2202      	movs	r2, #2
 8006b00:	4957      	ldr	r1, [pc, #348]	; (8006c60 <setCommand+0x770>)
 8006b02:	0020      	movs	r0, r4
 8006b04:	f00d fdc5 	bl	8014692 <strncmp>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d051      	beq.n	8006bb0 <setCommand+0x6c0>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006b0c:	2207      	movs	r2, #7
 8006b0e:	4955      	ldr	r1, [pc, #340]	; (8006c64 <setCommand+0x774>)
 8006b10:	0020      	movs	r0, r4
 8006b12:	f00d fdbe 	bl	8014692 <strncmp>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d04c      	beq.n	8006bb4 <setCommand+0x6c4>
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	4952      	ldr	r1, [pc, #328]	; (8006c68 <setCommand+0x778>)
 8006b1e:	0020      	movs	r0, r4
 8006b20:	f00d fdb7 	bl	8014692 <strncmp>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d047      	beq.n	8006bb8 <setCommand+0x6c8>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006b28:	2208      	movs	r2, #8
 8006b2a:	4950      	ldr	r1, [pc, #320]	; (8006c6c <setCommand+0x77c>)
 8006b2c:	0020      	movs	r0, r4
 8006b2e:	f00d fdb0 	bl	8014692 <strncmp>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d042      	beq.n	8006bbc <setCommand+0x6cc>
 8006b36:	2202      	movs	r2, #2
 8006b38:	494d      	ldr	r1, [pc, #308]	; (8006c70 <setCommand+0x780>)
 8006b3a:	0020      	movs	r0, r4
 8006b3c:	f00d fda9 	bl	8014692 <strncmp>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d03d      	beq.n	8006bc0 <setCommand+0x6d0>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006b44:	2208      	movs	r2, #8
 8006b46:	494b      	ldr	r1, [pc, #300]	; (8006c74 <setCommand+0x784>)
 8006b48:	0020      	movs	r0, r4
 8006b4a:	f00d fda2 	bl	8014692 <strncmp>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d038      	beq.n	8006bc4 <setCommand+0x6d4>
 8006b52:	2202      	movs	r2, #2
 8006b54:	4948      	ldr	r1, [pc, #288]	; (8006c78 <setCommand+0x788>)
 8006b56:	0020      	movs	r0, r4
 8006b58:	f00d fd9b 	bl	8014692 <strncmp>
			temp82 =DECEMBER;
 8006b5c:	250c      	movs	r5, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d005      	beq.n	8006b6e <setCommand+0x67e>
			result =BOS_ERR_WrongValue;
 8006b62:	2668      	movs	r6, #104	; 0x68
	else if(result == BOS_ERR_WrongParam)
 8006b64:	e033      	b.n	8006bce <setCommand+0x6de>
			result =BOS_ERR_WrongValue;
 8006b66:	2668      	movs	r6, #104	; 0x68
			temp82 =JANUARY;
 8006b68:	2501      	movs	r5, #1
 8006b6a:	e000      	b.n	8006b6e <setCommand+0x67e>
 8006b6c:	2501      	movs	r5, #1
		if(result == BOS_OK){
 8006b6e:	2e00      	cmp	r6, #0
 8006b70:	d12d      	bne.n	8006bce <setCommand+0x6de>
 8006b72:	e090      	b.n	8006c96 <setCommand+0x7a6>
			temp82 =FEBRUARY;
 8006b74:	2502      	movs	r5, #2
 8006b76:	e7fa      	b.n	8006b6e <setCommand+0x67e>
 8006b78:	2502      	movs	r5, #2
 8006b7a:	e7f8      	b.n	8006b6e <setCommand+0x67e>
			temp82 =MARCH;
 8006b7c:	2503      	movs	r5, #3
 8006b7e:	e7f6      	b.n	8006b6e <setCommand+0x67e>
 8006b80:	2503      	movs	r5, #3
 8006b82:	e7f4      	b.n	8006b6e <setCommand+0x67e>
			temp82 =APRIL;
 8006b84:	2504      	movs	r5, #4
 8006b86:	e7f2      	b.n	8006b6e <setCommand+0x67e>
 8006b88:	2504      	movs	r5, #4
 8006b8a:	e7f0      	b.n	8006b6e <setCommand+0x67e>
			temp82 =MAY;
 8006b8c:	2505      	movs	r5, #5
 8006b8e:	e7ee      	b.n	8006b6e <setCommand+0x67e>
 8006b90:	2505      	movs	r5, #5
 8006b92:	e7ec      	b.n	8006b6e <setCommand+0x67e>
			temp82 =JUNE;
 8006b94:	2506      	movs	r5, #6
 8006b96:	e7ea      	b.n	8006b6e <setCommand+0x67e>
 8006b98:	2506      	movs	r5, #6
 8006b9a:	e7e8      	b.n	8006b6e <setCommand+0x67e>
			temp82 =JULY;
 8006b9c:	2507      	movs	r5, #7
 8006b9e:	e7e6      	b.n	8006b6e <setCommand+0x67e>
 8006ba0:	2507      	movs	r5, #7
 8006ba2:	e7e4      	b.n	8006b6e <setCommand+0x67e>
			temp82 =AUGUST;
 8006ba4:	2508      	movs	r5, #8
 8006ba6:	e7e2      	b.n	8006b6e <setCommand+0x67e>
 8006ba8:	2508      	movs	r5, #8
 8006baa:	e7e0      	b.n	8006b6e <setCommand+0x67e>
			temp82 =SEPTEMBER;
 8006bac:	2509      	movs	r5, #9
 8006bae:	e7de      	b.n	8006b6e <setCommand+0x67e>
 8006bb0:	2509      	movs	r5, #9
 8006bb2:	e7dc      	b.n	8006b6e <setCommand+0x67e>
			temp82 =OCTOBER;
 8006bb4:	250a      	movs	r5, #10
 8006bb6:	e7da      	b.n	8006b6e <setCommand+0x67e>
 8006bb8:	250a      	movs	r5, #10
 8006bba:	e7d8      	b.n	8006b6e <setCommand+0x67e>
			temp82 =NOVEMBER;
 8006bbc:	250b      	movs	r5, #11
 8006bbe:	e7d6      	b.n	8006b6e <setCommand+0x67e>
 8006bc0:	250b      	movs	r5, #11
 8006bc2:	e7d4      	b.n	8006b6e <setCommand+0x67e>
			temp82 =DECEMBER;
 8006bc4:	250c      	movs	r5, #12
 8006bc6:	e7d2      	b.n	8006b6e <setCommand+0x67e>
	else if(result == BOS_ERR_WrongParam)
 8006bc8:	2e67      	cmp	r6, #103	; 0x67
 8006bca:	d100      	bne.n	8006bce <setCommand+0x6de>
 8006bcc:	e4bf      	b.n	800654e <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 8006bce:	2e68      	cmp	r6, #104	; 0x68
 8006bd0:	d100      	bne.n	8006bd4 <setCommand+0x6e4>
 8006bd2:	e4f5      	b.n	80065c0 <setCommand+0xd0>
}
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	b00e      	add	sp, #56	; 0x38
 8006bd8:	bce0      	pop	{r5, r6, r7}
 8006bda:	46ba      	mov	sl, r7
 8006bdc:	46b1      	mov	r9, r6
 8006bde:	46a8      	mov	r8, r5
 8006be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	20006aa8 	.word	0x20006aa8
 8006be8:	20001298 	.word	0x20001298
 8006bec:	200012a4 	.word	0x200012a4
 8006bf0:	0801b668 	.word	0x0801b668
 8006bf4:	200012ac 	.word	0x200012ac
 8006bf8:	200012b0 	.word	0x200012b0
 8006bfc:	200012b4 	.word	0x200012b4
 8006c00:	0801b778 	.word	0x0801b778
 8006c04:	0801b780 	.word	0x0801b780
 8006c08:	0801b788 	.word	0x0801b788
 8006c0c:	0801b794 	.word	0x0801b794
 8006c10:	0801b7a0 	.word	0x0801b7a0
 8006c14:	0801b7a8 	.word	0x0801b7a8
 8006c18:	0801b7b4 	.word	0x0801b7b4
 8006c1c:	0801b7bc 	.word	0x0801b7bc
 8006c20:	0801b7c4 	.word	0x0801b7c4
 8006c24:	0801b7c8 	.word	0x0801b7c8
 8006c28:	0801b7d4 	.word	0x0801b7d4
 8006c2c:	0801b7d8 	.word	0x0801b7d8
 8006c30:	0801b7e0 	.word	0x0801b7e0
 8006c34:	0801b7e4 	.word	0x0801b7e4
 8006c38:	0801b7ec 	.word	0x0801b7ec
 8006c3c:	0801b7f0 	.word	0x0801b7f0
 8006c40:	0801b7f4 	.word	0x0801b7f4
 8006c44:	0801b7f8 	.word	0x0801b7f8
 8006c48:	0801b800 	.word	0x0801b800
 8006c4c:	0801b804 	.word	0x0801b804
 8006c50:	0801b80c 	.word	0x0801b80c
 8006c54:	0801b810 	.word	0x0801b810
 8006c58:	0801b818 	.word	0x0801b818
 8006c5c:	0801b81c 	.word	0x0801b81c
 8006c60:	0801b828 	.word	0x0801b828
 8006c64:	0801b82c 	.word	0x0801b82c
 8006c68:	0801b834 	.word	0x0801b834
 8006c6c:	0801b838 	.word	0x0801b838
 8006c70:	0801b844 	.word	0x0801b844
 8006c74:	0801b848 	.word	0x0801b848
 8006c78:	0801b854 	.word	0x0801b854
			temp81 =MONDAY;
 8006c7c:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006c7e:	4b1e      	ldr	r3, [pc, #120]	; (8006cf8 <setCommand+0x808>)
 8006c80:	681c      	ldr	r4, [r3, #0]
 8006c82:	2207      	movs	r2, #7
 8006c84:	491d      	ldr	r1, [pc, #116]	; (8006cfc <setCommand+0x80c>)
 8006c86:	0020      	movs	r0, r4
 8006c88:	f00d fd03 	bl	8014692 <strncmp>
			temp82 =JANUARY;
 8006c8c:	2501      	movs	r5, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006c8e:	2600      	movs	r6, #0
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d000      	beq.n	8006c96 <setCommand+0x7a6>
 8006c94:	e6bc      	b.n	8006a10 <setCommand+0x520>
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006c96:	466b      	mov	r3, sp
 8006c98:	7e1e      	ldrb	r6, [r3, #24]
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006c9a:	1e73      	subs	r3, r6, #1
 8006c9c:	2b1e      	cmp	r3, #30
 8006c9e:	d900      	bls.n	8006ca2 <setCommand+0x7b2>
 8006ca0:	e48e      	b.n	80065c0 <setCommand+0xd0>
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006ca2:	466b      	mov	r3, sp
 8006ca4:	8b9c      	ldrh	r4, [r3, #28]
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006ca6:	4b16      	ldr	r3, [pc, #88]	; (8006d00 <setCommand+0x810>)
 8006ca8:	18e3      	adds	r3, r4, r3
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	2b64      	cmp	r3, #100	; 0x64
 8006cae:	d900      	bls.n	8006cb2 <setCommand+0x7c2>
 8006cb0:	e486      	b.n	80065c0 <setCommand+0xd0>
				GetTimeDate();
 8006cb2:	f007 f891 	bl	800ddd8 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006cb6:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <setCommand+0x814>)
 8006cb8:	220c      	movs	r2, #12
 8006cba:	569a      	ldrsb	r2, [r3, r2]
 8006cbc:	9204      	str	r2, [sp, #16]
 8006cbe:	7cda      	ldrb	r2, [r3, #19]
 8006cc0:	9203      	str	r2, [sp, #12]
 8006cc2:	7c9a      	ldrb	r2, [r3, #18]
 8006cc4:	9202      	str	r2, [sp, #8]
 8006cc6:	7c5a      	ldrb	r2, [r3, #17]
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	7c1b      	ldrb	r3, [r3, #16]
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	003b      	movs	r3, r7
 8006cd0:	0022      	movs	r2, r4
 8006cd2:	0031      	movs	r1, r6
 8006cd4:	0028      	movs	r0, r5
 8006cd6:	f007 f825 	bl	800dd24 <BOS_CalendarConfig>
 8006cda:	0006      	movs	r6, r0
 8006cdc:	e621      	b.n	8006922 <setCommand+0x432>
			temp81 =TUESDAY;
 8006cde:	2702      	movs	r7, #2
 8006ce0:	e7cd      	b.n	8006c7e <setCommand+0x78e>
			temp81 =WEDNESDAY;
 8006ce2:	2703      	movs	r7, #3
 8006ce4:	e7cb      	b.n	8006c7e <setCommand+0x78e>
			temp81 =THURSDAY;
 8006ce6:	2704      	movs	r7, #4
 8006ce8:	e7c9      	b.n	8006c7e <setCommand+0x78e>
			temp81 =FRIDAY;
 8006cea:	2705      	movs	r7, #5
 8006cec:	e7c7      	b.n	8006c7e <setCommand+0x78e>
			temp81 =SATURDAY;
 8006cee:	2706      	movs	r7, #6
 8006cf0:	e7c5      	b.n	8006c7e <setCommand+0x78e>
			temp81 =SUNDAY;
 8006cf2:	2707      	movs	r7, #7
 8006cf4:	e7c3      	b.n	8006c7e <setCommand+0x78e>
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	200012ac 	.word	0x200012ac
 8006cfc:	0801b7bc 	.word	0x0801b7bc
 8006d00:	fffff830 	.word	0xfffff830
 8006d04:	20006aa8 	.word	0x20006aa8

08006d08 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d08:	b530      	push	{r4, r5, lr}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	0005      	movs	r5, r0
 8006d0e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006d14:	2d00      	cmp	r5, #0
 8006d16:	d010      	beq.n	8006d3a <removebuttonCommand+0x32>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d18:	aa01      	add	r2, sp, #4
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	f007 fd62 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006d20:	2300      	movs	r3, #0
 8006d22:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006d24:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006d26:	2b70      	cmp	r3, #112	; 0x70
 8006d28:	d009      	beq.n	8006d3e <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006d2a:	0020      	movs	r0, r4
 8006d2c:	f001 fbca 	bl	80084c4 <RemovePortButton>
	if(result == BOS_OK){
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d009      	beq.n	8006d48 <removebuttonCommand+0x40>
}
 8006d34:	2000      	movs	r0, #0
 8006d36:	b003      	add	sp, #12
 8006d38:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8006d3a:	b672      	cpsid	i
 8006d3c:	e7fe      	b.n	8006d3c <removebuttonCommand+0x34>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006d3e:	3001      	adds	r0, #1
 8006d40:	f00d f805 	bl	8013d4e <atol>
 8006d44:	b2c4      	uxtb	r4, r0
 8006d46:	e7f0      	b.n	8006d2a <removebuttonCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006d48:	0023      	movs	r3, r4
 8006d4a:	0022      	movs	r2, r4
 8006d4c:	4902      	ldr	r1, [pc, #8]	; (8006d58 <removebuttonCommand+0x50>)
 8006d4e:	0028      	movs	r0, r5
 8006d50:	f00d fc5c 	bl	801460c <sprintf>
 8006d54:	e7ee      	b.n	8006d34 <removebuttonCommand+0x2c>
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	0801b858 	.word	0x0801b858

08006d5c <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d5e:	46c6      	mov	lr, r8
 8006d60:	b500      	push	{lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	0006      	movs	r6, r0
 8006d66:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d03d      	beq.n	8006dee <addbuttonCommand+0x92>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d72:	aa03      	add	r2, sp, #12
 8006d74:	2101      	movs	r1, #1
 8006d76:	0038      	movs	r0, r7
 8006d78:	f007 fd34 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006d7c:	0005      	movs	r5, r0
 8006d7e:	4b25      	ldr	r3, [pc, #148]	; (8006e14 <addbuttonCommand+0xb8>)
 8006d80:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	4698      	mov	r8, r3
 8006d86:	001a      	movs	r2, r3
 8006d88:	4923      	ldr	r1, [pc, #140]	; (8006e18 <addbuttonCommand+0xbc>)
 8006d8a:	f00d fc82 	bl	8014692 <strncmp>
		type =MOMENTARY_NO;
 8006d8e:	2401      	movs	r4, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d017      	beq.n	8006dc4 <addbuttonCommand+0x68>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006d94:	4642      	mov	r2, r8
 8006d96:	4921      	ldr	r1, [pc, #132]	; (8006e1c <addbuttonCommand+0xc0>)
 8006d98:	0028      	movs	r0, r5
 8006d9a:	f00d fc7a 	bl	8014692 <strncmp>
		type =MOMENTARY_NC;
 8006d9e:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d00f      	beq.n	8006dc4 <addbuttonCommand+0x68>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006da4:	4642      	mov	r2, r8
 8006da6:	491e      	ldr	r1, [pc, #120]	; (8006e20 <addbuttonCommand+0xc4>)
 8006da8:	0028      	movs	r0, r5
 8006daa:	f00d fc72 	bl	8014692 <strncmp>
		type =ONOFF_NO;
 8006dae:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d007      	beq.n	8006dc4 <addbuttonCommand+0x68>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006db4:	4642      	mov	r2, r8
 8006db6:	491b      	ldr	r1, [pc, #108]	; (8006e24 <addbuttonCommand+0xc8>)
 8006db8:	0028      	movs	r0, r5
 8006dba:	f00d fc6a 	bl	8014692 <strncmp>
		type =ONOFF_NC;
 8006dbe:	4244      	negs	r4, r0
 8006dc0:	4144      	adcs	r4, r0
 8006dc2:	00a4      	lsls	r4, r4, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006dc4:	aa02      	add	r2, sp, #8
 8006dc6:	2102      	movs	r1, #2
 8006dc8:	0038      	movs	r0, r7
 8006dca:	f007 fd0b 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006dce:	2300      	movs	r3, #0
 8006dd0:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006dd2:	2500      	movs	r5, #0
	if(pcParameterString2[0] == 'p'){
 8006dd4:	2b70      	cmp	r3, #112	; 0x70
 8006dd6:	d00c      	beq.n	8006df2 <addbuttonCommand+0x96>
	result =AddPortButton(type,port);
 8006dd8:	0029      	movs	r1, r5
 8006dda:	0020      	movs	r0, r4
 8006ddc:	f001 fae0 	bl	80083a0 <AddPortButton>
	if(result == BOS_OK){
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d00b      	beq.n	8006dfc <addbuttonCommand+0xa0>
}
 8006de4:	2000      	movs	r0, #0
 8006de6:	b004      	add	sp, #16
 8006de8:	bc80      	pop	{r7}
 8006dea:	46b8      	mov	r8, r7
 8006dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006dee:	b672      	cpsid	i
 8006df0:	e7fe      	b.n	8006df0 <addbuttonCommand+0x94>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006df2:	3001      	adds	r0, #1
 8006df4:	f00c ffab 	bl	8013d4e <atol>
 8006df8:	b2c5      	uxtb	r5, r0
 8006dfa:	e7ed      	b.n	8006dd8 <addbuttonCommand+0x7c>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <addbuttonCommand+0xb8>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	2300      	movs	r3, #0
 8006e02:	9903      	ldr	r1, [sp, #12]
 8006e04:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006e06:	9500      	str	r5, [sp, #0]
 8006e08:	002b      	movs	r3, r5
 8006e0a:	4907      	ldr	r1, [pc, #28]	; (8006e28 <addbuttonCommand+0xcc>)
 8006e0c:	0030      	movs	r0, r6
 8006e0e:	f00d fbfd 	bl	801460c <sprintf>
 8006e12:	e7e7      	b.n	8006de4 <addbuttonCommand+0x88>
 8006e14:	20001294 	.word	0x20001294
 8006e18:	0801b880 	.word	0x0801b880
 8006e1c:	0801b890 	.word	0x0801b890
 8006e20:	0801b8a0 	.word	0x0801b8a0
 8006e24:	0801b8ac 	.word	0x0801b8ac
 8006e28:	0801b8b8 	.word	0x0801b8b8

08006e2c <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e2e:	46de      	mov	lr, fp
 8006e30:	4657      	mov	r7, sl
 8006e32:	464e      	mov	r6, r9
 8006e34:	4645      	mov	r5, r8
 8006e36:	b5e0      	push	{r5, r6, r7, lr}
 8006e38:	b099      	sub	sp, #100	; 0x64
 8006e3a:	0006      	movs	r6, r0
 8006e3c:	9007      	str	r0, [sp, #28]
 8006e3e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006e40:	2500      	movs	r5, #0
 8006e42:	9517      	str	r5, [sp, #92]	; 0x5c
 8006e44:	9516      	str	r5, [sp, #88]	; 0x58
 8006e46:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006e48:	9514      	str	r5, [sp, #80]	; 0x50
 8006e4a:	9513      	str	r5, [sp, #76]	; 0x4c
 8006e4c:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 =0;
 8006e4e:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006e50:	950e      	str	r5, [sp, #56]	; 0x38
 8006e52:	2206      	movs	r2, #6
 8006e54:	2100      	movs	r1, #0
 8006e56:	a80f      	add	r0, sp, #60	; 0x3c
 8006e58:	f00d f9e3 	bl	8014222 <memset>
 8006e5c:	950b      	str	r5, [sp, #44]	; 0x2c
 8006e5e:	2206      	movs	r2, #6
 8006e60:	2100      	movs	r1, #0
 8006e62:	a80c      	add	r0, sp, #48	; 0x30
 8006e64:	f00d f9dd 	bl	8014222 <memset>
 8006e68:	9508      	str	r5, [sp, #32]
 8006e6a:	2206      	movs	r2, #6
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	a809      	add	r0, sp, #36	; 0x24
 8006e70:	f00d f9d7 	bl	8014222 <memset>
	configASSERT(pcWriteBuffer);
 8006e74:	2e00      	cmp	r6, #0
 8006e76:	d100      	bne.n	8006e7a <scastCommand+0x4e>
 8006e78:	e07c      	b.n	8006f74 <scastCommand+0x148>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e7a:	aa17      	add	r2, sp, #92	; 0x5c
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	0020      	movs	r0, r4
 8006e80:	f007 fcb0 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006e84:	2300      	movs	r3, #0
 8006e86:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006e88:	2700      	movs	r7, #0
	if(pcParameterString1[0] == 'P'){
 8006e8a:	2b50      	cmp	r3, #80	; 0x50
 8006e8c:	d100      	bne.n	8006e90 <scastCommand+0x64>
 8006e8e:	e073      	b.n	8006f78 <scastCommand+0x14c>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e90:	aa16      	add	r2, sp, #88	; 0x58
 8006e92:	2102      	movs	r1, #2
 8006e94:	0020      	movs	r0, r4
 8006e96:	f007 fca5 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006e9a:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006e9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e9e:	a80e      	add	r0, sp, #56	; 0x38
 8006ea0:	f00d fc08 	bl	80146b4 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006ea4:	a80e      	add	r0, sp, #56	; 0x38
 8006ea6:	f7fd fa27 	bl	80042f8 <GetID>
 8006eaa:	b2c3      	uxtb	r3, r0
 8006eac:	469b      	mov	fp, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006eae:	aa15      	add	r2, sp, #84	; 0x54
 8006eb0:	2103      	movs	r1, #3
 8006eb2:	0020      	movs	r0, r4
 8006eb4:	f007 fc96 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006eb8:	2300      	movs	r3, #0
 8006eba:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4690      	mov	r8, r2
	if(pcParameterString3[0] == 'p'){
 8006ec0:	2b70      	cmp	r3, #112	; 0x70
 8006ec2:	d05e      	beq.n	8006f82 <scastCommand+0x156>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006ec4:	aa14      	add	r2, sp, #80	; 0x50
 8006ec6:	2104      	movs	r1, #4
 8006ec8:	0020      	movs	r0, r4
 8006eca:	f007 fc8b 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006ece:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006ed0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ed2:	a80b      	add	r0, sp, #44	; 0x2c
 8006ed4:	f00d fbee 	bl	80146b4 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006ed8:	a80b      	add	r0, sp, #44	; 0x2c
 8006eda:	f7fd fa0d 	bl	80042f8 <GetID>
 8006ede:	b2c3      	uxtb	r3, r0
 8006ee0:	4699      	mov	r9, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006ee2:	aa13      	add	r2, sp, #76	; 0x4c
 8006ee4:	2105      	movs	r1, #5
 8006ee6:	0020      	movs	r0, r4
 8006ee8:	f007 fc7c 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8006eec:	0006      	movs	r6, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006eee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ef0:	469a      	mov	sl, r3
 8006ef2:	001a      	movs	r2, r3
 8006ef4:	492d      	ldr	r1, [pc, #180]	; (8006fac <scastCommand+0x180>)
 8006ef6:	f00d fbcc 	bl	8014692 <strncmp>
		direction =FORWARD;
 8006efa:	2500      	movs	r5, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d00f      	beq.n	8006f20 <scastCommand+0xf4>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006f00:	4652      	mov	r2, sl
 8006f02:	492b      	ldr	r1, [pc, #172]	; (8006fb0 <scastCommand+0x184>)
 8006f04:	0030      	movs	r0, r6
 8006f06:	f00d fbc4 	bl	8014692 <strncmp>
		direction =BACKWARD;
 8006f0a:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d007      	beq.n	8006f20 <scastCommand+0xf4>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006f10:	4652      	mov	r2, sl
 8006f12:	4928      	ldr	r1, [pc, #160]	; (8006fb4 <scastCommand+0x188>)
 8006f14:	0030      	movs	r0, r6
 8006f16:	f00d fbbc 	bl	8014692 <strncmp>
		direction =BIDIRECTIONAL;
 8006f1a:	4245      	negs	r5, r0
 8006f1c:	4145      	adcs	r5, r0
 8006f1e:	006d      	lsls	r5, r5, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006f20:	4652      	mov	r2, sl
 8006f22:	0031      	movs	r1, r6
 8006f24:	a808      	add	r0, sp, #32
 8006f26:	f00d fbc5 	bl	80146b4 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006f2a:	aa12      	add	r2, sp, #72	; 0x48
 8006f2c:	2106      	movs	r1, #6
 8006f2e:	0020      	movs	r0, r4
 8006f30:	f007 fc58 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006f34:	f00c ff0b 	bl	8013d4e <atol>
 8006f38:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006f3a:	aa11      	add	r2, sp, #68	; 0x44
 8006f3c:	2107      	movs	r1, #7
 8006f3e:	0020      	movs	r0, r4
 8006f40:	f007 fc50 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006f44:	f00c ff03 	bl	8013d4e <atol>
 8006f48:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9303      	str	r3, [sp, #12]
 8006f4e:	9002      	str	r0, [sp, #8]
 8006f50:	9601      	str	r6, [sp, #4]
 8006f52:	9500      	str	r5, [sp, #0]
 8006f54:	464b      	mov	r3, r9
 8006f56:	4642      	mov	r2, r8
 8006f58:	4659      	mov	r1, fp
 8006f5a:	0038      	movs	r0, r7
 8006f5c:	f002 fd24 	bl	80099a8 <StartScastDMAStream>
	if(result == BOS_OK){
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d014      	beq.n	8006f8e <scastCommand+0x162>
}
 8006f64:	2000      	movs	r0, #0
 8006f66:	b019      	add	sp, #100	; 0x64
 8006f68:	bcf0      	pop	{r4, r5, r6, r7}
 8006f6a:	46bb      	mov	fp, r7
 8006f6c:	46b2      	mov	sl, r6
 8006f6e:	46a9      	mov	r9, r5
 8006f70:	46a0      	mov	r8, r4
 8006f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006f74:	b672      	cpsid	i
 8006f76:	e7fe      	b.n	8006f76 <scastCommand+0x14a>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006f78:	3001      	adds	r0, #1
 8006f7a:	f00c fee8 	bl	8013d4e <atol>
 8006f7e:	b2c7      	uxtb	r7, r0
 8006f80:	e786      	b.n	8006e90 <scastCommand+0x64>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006f82:	3001      	adds	r0, #1
 8006f84:	f00c fee3 	bl	8013d4e <atol>
 8006f88:	b2c3      	uxtb	r3, r0
 8006f8a:	4698      	mov	r8, r3
 8006f8c:	e79a      	b.n	8006ec4 <scastCommand+0x98>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006f8e:	9404      	str	r4, [sp, #16]
 8006f90:	9603      	str	r6, [sp, #12]
 8006f92:	ab0b      	add	r3, sp, #44	; 0x2c
 8006f94:	9302      	str	r3, [sp, #8]
 8006f96:	4643      	mov	r3, r8
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	ab0e      	add	r3, sp, #56	; 0x38
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	003b      	movs	r3, r7
 8006fa0:	aa08      	add	r2, sp, #32
 8006fa2:	4905      	ldr	r1, [pc, #20]	; (8006fb8 <scastCommand+0x18c>)
 8006fa4:	9807      	ldr	r0, [sp, #28]
 8006fa6:	f00d fb31 	bl	801460c <sprintf>
 8006faa:	e7db      	b.n	8006f64 <scastCommand+0x138>
 8006fac:	0801b8ec 	.word	0x0801b8ec
 8006fb0:	0801b8f4 	.word	0x0801b8f4
 8006fb4:	0801b900 	.word	0x0801b900
 8006fb8:	0801b910 	.word	0x0801b910

08006fbc <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006fc2:	d036      	beq.n	8007032 <infoCommand+0x76>
	if(N > 1)
 8006fc4:	4b27      	ldr	r3, [pc, #156]	; (8007064 <infoCommand+0xa8>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006fc8:	2500      	movs	r5, #0
	if(N > 1)
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d833      	bhi.n	8007036 <infoCommand+0x7a>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006fce:	4b25      	ldr	r3, [pc, #148]	; (8007064 <infoCommand+0xa8>)
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	4925      	ldr	r1, [pc, #148]	; (8007068 <infoCommand+0xac>)
 8006fd4:	0020      	movs	r0, r4
 8006fd6:	f00d fb19 	bl	801460c <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006fda:	0020      	movs	r0, r4
 8006fdc:	f7f9 f89c 	bl	8000118 <strlen>
 8006fe0:	b282      	uxth	r2, r0
 8006fe2:	4e22      	ldr	r6, [pc, #136]	; (800706c <infoCommand+0xb0>)
 8006fe4:	7830      	ldrb	r0, [r6, #0]
 8006fe6:	2701      	movs	r7, #1
 8006fe8:	427f      	negs	r7, r7
 8006fea:	9700      	str	r7, [sp, #0]
 8006fec:	2332      	movs	r3, #50	; 0x32
 8006fee:	0021      	movs	r1, r4
 8006ff0:	f007 f9a2 	bl	800e338 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006ff4:	2213      	movs	r2, #19
 8006ff6:	491e      	ldr	r1, [pc, #120]	; (8007070 <infoCommand+0xb4>)
 8006ff8:	0020      	movs	r0, r4
 8006ffa:	f00d f909 	bl	8014210 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006ffe:	0020      	movs	r0, r4
 8007000:	f7f9 f88a 	bl	8000118 <strlen>
 8007004:	b282      	uxth	r2, r0
 8007006:	7830      	ldrb	r0, [r6, #0]
 8007008:	9700      	str	r7, [sp, #0]
 800700a:	2332      	movs	r3, #50	; 0x32
 800700c:	0021      	movs	r1, r4
 800700e:	f007 f993 	bl	800e338 <writePxMutex>
	DisplayTopology(PcPort);
 8007012:	7830      	ldrb	r0, [r6, #0]
 8007014:	f7fc feb8 	bl	8003d88 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8007018:	7830      	ldrb	r0, [r6, #0]
 800701a:	f7fc ff8d 	bl	8003f38 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 800701e:	2d02      	cmp	r5, #2
 8007020:	d00d      	beq.n	800703e <infoCommand+0x82>
	sprintf((char* )pcWriteBuffer," ");
 8007022:	2202      	movs	r2, #2
 8007024:	4913      	ldr	r1, [pc, #76]	; (8007074 <infoCommand+0xb8>)
 8007026:	0020      	movs	r0, r4
 8007028:	f00d f8f2 	bl	8014210 <memcpy>
}
 800702c:	2000      	movs	r0, #0
 800702e:	b003      	add	sp, #12
 8007030:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8007032:	b672      	cpsid	i
 8007034:	e7fe      	b.n	8007034 <infoCommand+0x78>
		result =ReadPortsDir();
 8007036:	f7fd faa9 	bl	800458c <ReadPortsDir>
 800703a:	0005      	movs	r5, r0
 800703c:	e7c7      	b.n	8006fce <infoCommand+0x12>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 800703e:	2244      	movs	r2, #68	; 0x44
 8007040:	490d      	ldr	r1, [pc, #52]	; (8007078 <infoCommand+0xbc>)
 8007042:	0020      	movs	r0, r4
 8007044:	f00d f8e4 	bl	8014210 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007048:	0020      	movs	r0, r4
 800704a:	f7f9 f865 	bl	8000118 <strlen>
 800704e:	b282      	uxth	r2, r0
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <infoCommand+0xb0>)
 8007052:	7818      	ldrb	r0, [r3, #0]
 8007054:	003b      	movs	r3, r7
 8007056:	9700      	str	r7, [sp, #0]
 8007058:	3333      	adds	r3, #51	; 0x33
 800705a:	0021      	movs	r1, r4
 800705c:	f007 f96c 	bl	800e338 <writePxMutex>
 8007060:	e7df      	b.n	8007022 <infoCommand+0x66>
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	2000001c 	.word	0x2000001c
 8007068:	0801b998 	.word	0x0801b998
 800706c:	20000a7f 	.word	0x20000a7f
 8007070:	0801b9b4 	.word	0x0801b9b4
 8007074:	0801a628 	.word	0x0801a628
 8007078:	0801b9c8 	.word	0x0801b9c8

0800707c <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800707c:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 800707e:	2800      	cmp	r0, #0
 8007080:	d004      	beq.n	800708c <statusCommand+0x10>
	DisplayModuleStatus(0);
 8007082:	2000      	movs	r0, #0
 8007084:	f7fc ffce 	bl	8004024 <DisplayModuleStatus>
}
 8007088:	2000      	movs	r0, #0
 800708a:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800708c:	b672      	cpsid	i
 800708e:	e7fe      	b.n	800708e <statusCommand+0x12>

08007090 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007092:	46ce      	mov	lr, r9
 8007094:	4647      	mov	r7, r8
 8007096:	b580      	push	{r7, lr}
 8007098:	b08f      	sub	sp, #60	; 0x3c
 800709a:	0004      	movs	r4, r0
 800709c:	0016      	movs	r6, r2
	char module[MaxLengthOfAlias + 30] ={0};
 800709e:	2500      	movs	r5, #0
 80070a0:	9504      	str	r5, [sp, #16]
 80070a2:	2223      	movs	r2, #35	; 0x23
 80070a4:	2100      	movs	r1, #0
 80070a6:	a805      	add	r0, sp, #20
 80070a8:	f00d f8bb 	bl	8014222 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 80070ac:	9501      	str	r5, [sp, #4]
 80070ae:	2206      	movs	r2, #6
 80070b0:	2100      	movs	r1, #0
 80070b2:	a802      	add	r0, sp, #8
 80070b4:	f00d f8b5 	bl	8014222 <memset>
	configASSERT(pcWriteBuffer);
 80070b8:	2c00      	cmp	r4, #0
 80070ba:	d02c      	beq.n	8007116 <groupCommand+0x86>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070bc:	4d56      	ldr	r5, [pc, #344]	; (8007218 <groupCommand+0x188>)
 80070be:	002a      	movs	r2, r5
 80070c0:	2101      	movs	r1, #1
 80070c2:	0030      	movs	r0, r6
 80070c4:	f007 fb8e 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 80070c8:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 80070ca:	682a      	ldr	r2, [r5, #0]
 80070cc:	a801      	add	r0, sp, #4
 80070ce:	f00d faf1 	bl	80146b4 <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 80070d2:	4d52      	ldr	r5, [pc, #328]	; (800721c <groupCommand+0x18c>)
 80070d4:	002f      	movs	r7, r5
 80070d6:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 80070d8:	0029      	movs	r1, r5
 80070da:	a801      	add	r0, sp, #4
 80070dc:	f7f9 f812 	bl	8000104 <strcmp>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d01a      	beq.n	800711a <groupCommand+0x8a>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 80070e4:	350a      	adds	r5, #10
 80070e6:	42af      	cmp	r7, r5
 80070e8:	d1f6      	bne.n	80070d8 <groupCommand+0x48>
	type =1;
 80070ea:	2701      	movs	r7, #1
	count =2;
 80070ec:	4b4c      	ldr	r3, [pc, #304]	; (8007220 <groupCommand+0x190>)
 80070ee:	2202      	movs	r2, #2
 80070f0:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 80070f2:	3208      	adds	r2, #8
 80070f4:	494b      	ldr	r1, [pc, #300]	; (8007224 <groupCommand+0x194>)
 80070f6:	0020      	movs	r0, r4
 80070f8:	f00d f88a 	bl	8014210 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 80070fc:	4a4a      	ldr	r2, [pc, #296]	; (8007228 <groupCommand+0x198>)
 80070fe:	2102      	movs	r1, #2
 8007100:	0030      	movs	r0, r6
 8007102:	f007 fb6f 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8007106:	1e01      	subs	r1, r0, #0
 8007108:	4b48      	ldr	r3, [pc, #288]	; (800722c <groupCommand+0x19c>)
 800710a:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 800710c:	d100      	bne.n	8007110 <groupCommand+0x80>
 800710e:	e072      	b.n	80071f6 <groupCommand+0x166>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8007110:	4b45      	ldr	r3, [pc, #276]	; (8007228 <groupCommand+0x198>)
 8007112:	4698      	mov	r8, r3
 8007114:	e024      	b.n	8007160 <groupCommand+0xd0>
	configASSERT(pcWriteBuffer);
 8007116:	b672      	cpsid	i
 8007118:	e7fe      	b.n	8007118 <groupCommand+0x88>
			type =0;
 800711a:	2700      	movs	r7, #0
 800711c:	e7e6      	b.n	80070ec <groupCommand+0x5c>
	else if(count == 2)
 800711e:	4b40      	ldr	r3, [pc, #256]	; (8007220 <groupCommand+0x190>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	b25b      	sxtb	r3, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d03f      	beq.n	80071a8 <groupCommand+0x118>
	else if(result == BOS_ERR_Keyword)
 8007128:	2806      	cmp	r0, #6
 800712a:	d04d      	beq.n	80071c8 <groupCommand+0x138>
	else if(result == BOS_ERR_ExistingAlias)
 800712c:	2807      	cmp	r0, #7
 800712e:	d051      	beq.n	80071d4 <groupCommand+0x144>
	else if(result == BOS_ERR_ExistingCmd)
 8007130:	2808      	cmp	r0, #8
 8007132:	d15a      	bne.n	80071ea <groupCommand+0x15a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007134:	aa01      	add	r2, sp, #4
 8007136:	493e      	ldr	r1, [pc, #248]	; (8007230 <groupCommand+0x1a0>)
 8007138:	0020      	movs	r0, r4
 800713a:	f00d fa67 	bl	801460c <sprintf>
 800713e:	e054      	b.n	80071ea <groupCommand+0x15a>
		strcat((char* )pcWriteBuffer,module);
 8007140:	a904      	add	r1, sp, #16
 8007142:	0020      	movs	r0, r4
 8007144:	f00d fa82 	bl	801464c <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8007148:	1c69      	adds	r1, r5, #1
 800714a:	b249      	sxtb	r1, r1
 800714c:	4b34      	ldr	r3, [pc, #208]	; (8007220 <groupCommand+0x190>)
 800714e:	7019      	strb	r1, [r3, #0]
 8007150:	4a35      	ldr	r2, [pc, #212]	; (8007228 <groupCommand+0x198>)
 8007152:	0030      	movs	r0, r6
 8007154:	f007 fb46 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8007158:	1e01      	subs	r1, r0, #0
 800715a:	4b34      	ldr	r3, [pc, #208]	; (800722c <groupCommand+0x19c>)
 800715c:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 800715e:	d04a      	beq.n	80071f6 <groupCommand+0x166>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8007160:	4643      	mov	r3, r8
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4699      	mov	r9, r3
 8007166:	ad04      	add	r5, sp, #16
 8007168:	001a      	movs	r2, r3
 800716a:	0028      	movs	r0, r5
 800716c:	f00d faa2 	bl	80146b4 <strncpy>
		module[xParameterStringLength] ='\0';
 8007170:	2300      	movs	r3, #0
 8007172:	464a      	mov	r2, r9
 8007174:	54ab      	strb	r3, [r5, r2]
		modID =GetID(module);
 8007176:	0028      	movs	r0, r5
 8007178:	f7fd f8be 	bl	80042f8 <GetID>
		if(modID < 0)
 800717c:	2800      	cmp	r0, #0
 800717e:	db2f      	blt.n	80071e0 <groupCommand+0x150>
		result =AddModuleToGroup(modID,alias);
 8007180:	b2c0      	uxtb	r0, r0
 8007182:	a901      	add	r1, sp, #4
 8007184:	f7fd f980 	bl	8004488 <AddModuleToGroup>
		if(result != BOS_OK)
 8007188:	2800      	cmp	r0, #0
 800718a:	d1c8      	bne.n	800711e <groupCommand+0x8e>
		if(count > 2)
 800718c:	4b24      	ldr	r3, [pc, #144]	; (8007220 <groupCommand+0x190>)
 800718e:	2500      	movs	r5, #0
 8007190:	575d      	ldrsb	r5, [r3, r5]
 8007192:	2d02      	cmp	r5, #2
 8007194:	ddd4      	ble.n	8007140 <groupCommand+0xb0>
			strcat((char* )pcWriteBuffer,", ");
 8007196:	0020      	movs	r0, r4
 8007198:	f7f8 ffbe 	bl	8000118 <strlen>
 800719c:	1820      	adds	r0, r4, r0
 800719e:	2203      	movs	r2, #3
 80071a0:	4924      	ldr	r1, [pc, #144]	; (8007234 <groupCommand+0x1a4>)
 80071a2:	f00d f835 	bl	8014210 <memcpy>
 80071a6:	e7cb      	b.n	8007140 <groupCommand+0xb0>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 80071a8:	aa01      	add	r2, sp, #4
 80071aa:	4923      	ldr	r1, [pc, #140]	; (8007238 <groupCommand+0x1a8>)
 80071ac:	0020      	movs	r0, r4
 80071ae:	f00d fa2d 	bl	801460c <sprintf>
 80071b2:	e01a      	b.n	80071ea <groupCommand+0x15a>
		sprintf(module,(char* )pcMessageOKnew,alias);
 80071b4:	aa01      	add	r2, sp, #4
 80071b6:	4921      	ldr	r1, [pc, #132]	; (800723c <groupCommand+0x1ac>)
 80071b8:	a804      	add	r0, sp, #16
 80071ba:	f00d fa27 	bl	801460c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 80071be:	a904      	add	r1, sp, #16
 80071c0:	0020      	movs	r0, r4
 80071c2:	f00d fa43 	bl	801464c <strcat>
 80071c6:	e010      	b.n	80071ea <groupCommand+0x15a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 80071c8:	aa01      	add	r2, sp, #4
 80071ca:	491d      	ldr	r1, [pc, #116]	; (8007240 <groupCommand+0x1b0>)
 80071cc:	0020      	movs	r0, r4
 80071ce:	f00d fa1d 	bl	801460c <sprintf>
 80071d2:	e00a      	b.n	80071ea <groupCommand+0x15a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 80071d4:	aa01      	add	r2, sp, #4
 80071d6:	491b      	ldr	r1, [pc, #108]	; (8007244 <groupCommand+0x1b4>)
 80071d8:	0020      	movs	r0, r4
 80071da:	f00d fa17 	bl	801460c <sprintf>
 80071de:	e004      	b.n	80071ea <groupCommand+0x15a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 80071e0:	aa04      	add	r2, sp, #16
 80071e2:	4919      	ldr	r1, [pc, #100]	; (8007248 <groupCommand+0x1b8>)
 80071e4:	0020      	movs	r0, r4
 80071e6:	f00d fa11 	bl	801460c <sprintf>
}
 80071ea:	2000      	movs	r0, #0
 80071ec:	b00f      	add	sp, #60	; 0x3c
 80071ee:	bcc0      	pop	{r6, r7}
 80071f0:	46b9      	mov	r9, r7
 80071f2:	46b0      	mov	r8, r6
 80071f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 80071f6:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <groupCommand+0x190>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b25b      	sxtb	r3, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d0d3      	beq.n	80071a8 <groupCommand+0x118>
	else if(result == BOS_OK && type){
 8007200:	2f00      	cmp	r7, #0
 8007202:	d1d7      	bne.n	80071b4 <groupCommand+0x124>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8007204:	aa01      	add	r2, sp, #4
 8007206:	4911      	ldr	r1, [pc, #68]	; (800724c <groupCommand+0x1bc>)
 8007208:	a804      	add	r0, sp, #16
 800720a:	f00d f9ff 	bl	801460c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 800720e:	a904      	add	r1, sp, #16
 8007210:	0020      	movs	r0, r4
 8007212:	f00d fa1b 	bl	801464c <strcat>
 8007216:	e7e8      	b.n	80071ea <groupCommand+0x15a>
 8007218:	200012c4 	.word	0x200012c4
 800721c:	20000e64 	.word	0x20000e64
 8007220:	2000128a 	.word	0x2000128a
 8007224:	0801ba0c 	.word	0x0801ba0c
 8007228:	200012b8 	.word	0x200012b8
 800722c:	2000128c 	.word	0x2000128c
 8007230:	0801baf8 	.word	0x0801baf8
 8007234:	0801ba18 	.word	0x0801ba18
 8007238:	0801ba1c 	.word	0x0801ba1c
 800723c:	0801ba48 	.word	0x0801ba48
 8007240:	0801ba84 	.word	0x0801ba84
 8007244:	0801bac4 	.word	0x0801bac4
 8007248:	0801bb38 	.word	0x0801bb38
 800724c:	0801ba64 	.word	0x0801ba64

08007250 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	0004      	movs	r4, r0
 8007254:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8007256:	2c00      	cmp	r4, #0
 8007258:	d01a      	beq.n	8007290 <nameCommand+0x40>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800725a:	4d1d      	ldr	r5, [pc, #116]	; (80072d0 <nameCommand+0x80>)
 800725c:	002a      	movs	r2, r5
 800725e:	2101      	movs	r1, #1
 8007260:	f007 fac0 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8007264:	0001      	movs	r1, r0
 8007266:	4b1b      	ldr	r3, [pc, #108]	; (80072d4 <nameCommand+0x84>)
 8007268:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	2b09      	cmp	r3, #9
 800726e:	dd01      	ble.n	8007274 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007270:	2300      	movs	r3, #0
 8007272:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007274:	4b18      	ldr	r3, [pc, #96]	; (80072d8 <nameCommand+0x88>)
 8007276:	7818      	ldrb	r0, [r3, #0]
 8007278:	f7fd f8a2 	bl	80043c0 <NameModule>
	if(result == BOS_OK)
 800727c:	2800      	cmp	r0, #0
 800727e:	d009      	beq.n	8007294 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 8007280:	2806      	cmp	r0, #6
 8007282:	d010      	beq.n	80072a6 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8007284:	2807      	cmp	r0, #7
 8007286:	d015      	beq.n	80072b4 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 8007288:	2808      	cmp	r0, #8
 800728a:	d01a      	beq.n	80072c2 <nameCommand+0x72>
}
 800728c:	2000      	movs	r0, #0
 800728e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8007290:	b672      	cpsid	i
 8007292:	e7fe      	b.n	8007292 <nameCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007294:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <nameCommand+0x84>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a0f      	ldr	r2, [pc, #60]	; (80072d8 <nameCommand+0x88>)
 800729a:	7812      	ldrb	r2, [r2, #0]
 800729c:	490f      	ldr	r1, [pc, #60]	; (80072dc <nameCommand+0x8c>)
 800729e:	0020      	movs	r0, r4
 80072a0:	f00d f9b4 	bl	801460c <sprintf>
 80072a4:	e7f2      	b.n	800728c <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <nameCommand+0x84>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	490d      	ldr	r1, [pc, #52]	; (80072e0 <nameCommand+0x90>)
 80072ac:	0020      	movs	r0, r4
 80072ae:	f00d f9ad 	bl	801460c <sprintf>
 80072b2:	e7eb      	b.n	800728c <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 80072b4:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <nameCommand+0x84>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	490a      	ldr	r1, [pc, #40]	; (80072e4 <nameCommand+0x94>)
 80072ba:	0020      	movs	r0, r4
 80072bc:	f00d f9a6 	bl	801460c <sprintf>
 80072c0:	e7e4      	b.n	800728c <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 80072c2:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <nameCommand+0x84>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4908      	ldr	r1, [pc, #32]	; (80072e8 <nameCommand+0x98>)
 80072c8:	0020      	movs	r0, r4
 80072ca:	f00d f99f 	bl	801460c <sprintf>
 80072ce:	e7dd      	b.n	800728c <nameCommand+0x3c>
 80072d0:	200012c0 	.word	0x200012c0
 80072d4:	20001290 	.word	0x20001290
 80072d8:	2000107e 	.word	0x2000107e
 80072dc:	0801bb5c 	.word	0x0801bb5c
 80072e0:	0801ba84 	.word	0x0801ba84
 80072e4:	0801bac4 	.word	0x0801bac4
 80072e8:	0801baf8 	.word	0x0801baf8

080072ec <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ee:	46c6      	mov	lr, r8
 80072f0:	b500      	push	{lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	0004      	movs	r4, r0
 80072f6:	0017      	movs	r7, r2
 80072f8:	2600      	movs	r6, #0
 80072fa:	2500      	movs	r5, #0
	configASSERT(pcWriteBuffer);
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d04f      	beq.n	80073a0 <bootloaderUpdateCommand+0xb4>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007300:	4a4d      	ldr	r2, [pc, #308]	; (8007438 <bootloaderUpdateCommand+0x14c>)
 8007302:	2101      	movs	r1, #1
 8007304:	0038      	movs	r0, r7
 8007306:	f007 fa6d 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 800730a:	2800      	cmp	r0, #0
 800730c:	d04a      	beq.n	80073a4 <bootloaderUpdateCommand+0xb8>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 800730e:	4b4a      	ldr	r3, [pc, #296]	; (8007438 <bootloaderUpdateCommand+0x14c>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	494a      	ldr	r1, [pc, #296]	; (800743c <bootloaderUpdateCommand+0x150>)
 8007314:	f00d f9bd 	bl	8014692 <strncmp>
 8007318:	2800      	cmp	r0, #0
 800731a:	d137      	bne.n	800738c <bootloaderUpdateCommand+0xa0>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800731c:	4a48      	ldr	r2, [pc, #288]	; (8007440 <bootloaderUpdateCommand+0x154>)
 800731e:	2102      	movs	r1, #2
 8007320:	0038      	movs	r0, r7
 8007322:	f007 fa5f 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8007326:	4b47      	ldr	r3, [pc, #284]	; (8007444 <bootloaderUpdateCommand+0x158>)
 8007328:	4698      	mov	r8, r3
 800732a:	6018      	str	r0, [r3, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800732c:	4a46      	ldr	r2, [pc, #280]	; (8007448 <bootloaderUpdateCommand+0x15c>)
 800732e:	2103      	movs	r1, #3
 8007330:	0038      	movs	r0, r7
 8007332:	f007 fa57 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 8007336:	4b45      	ldr	r3, [pc, #276]	; (800744c <bootloaderUpdateCommand+0x160>)
 8007338:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 800733a:	4643      	mov	r3, r8
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	2300      	movs	r3, #0
 8007340:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 8007342:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8007344:	2b23      	cmp	r3, #35	; 0x23
 8007346:	d057      	beq.n	80073f8 <bootloaderUpdateCommand+0x10c>
			if(pcParameterString3[0] == 'p'){
 8007348:	4b40      	ldr	r3, [pc, #256]	; (800744c <bootloaderUpdateCommand+0x160>)
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	2300      	movs	r3, #0
 800734e:	56c3      	ldrsb	r3, [r0, r3]
 8007350:	2b70      	cmp	r3, #112	; 0x70
 8007352:	d057      	beq.n	8007404 <bootloaderUpdateCommand+0x118>
				result =BOS_ERR_WrongValue;
 8007354:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 8007356:	4b3e      	ldr	r3, [pc, #248]	; (8007450 <bootloaderUpdateCommand+0x164>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	42b3      	cmp	r3, r6
 800735c:	d057      	beq.n	800740e <bootloaderUpdateCommand+0x122>
				BOS.response = BOS_RESPONSE_NONE;
 800735e:	4b3d      	ldr	r3, [pc, #244]	; (8007454 <bootloaderUpdateCommand+0x168>)
 8007360:	2200      	movs	r2, #0
 8007362:	719a      	strb	r2, [r3, #6]
				messageParams[0] =port;
 8007364:	4b3c      	ldr	r3, [pc, #240]	; (8007458 <bootloaderUpdateCommand+0x16c>)
 8007366:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8007368:	3201      	adds	r2, #1
 800736a:	211a      	movs	r1, #26
 800736c:	0030      	movs	r0, r6
 800736e:	f002 faf5 	bl	800995c <SendMessageToModule>
				osDelay(100);
 8007372:	2064      	movs	r0, #100	; 0x64
 8007374:	f007 f90f 	bl	800e596 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8007378:	4b38      	ldr	r3, [pc, #224]	; (800745c <bootloaderUpdateCommand+0x170>)
 800737a:	781a      	ldrb	r2, [r3, #0]
 800737c:	4b34      	ldr	r3, [pc, #208]	; (8007450 <bootloaderUpdateCommand+0x164>)
 800737e:	7818      	ldrb	r0, [r3, #0]
 8007380:	002b      	movs	r3, r5
 8007382:	0031      	movs	r1, r6
 8007384:	f7fc fc7e 	bl	8003c84 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8007388:	2f68      	cmp	r7, #104	; 0x68
 800738a:	d104      	bne.n	8007396 <bootloaderUpdateCommand+0xaa>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800738c:	220f      	movs	r2, #15
 800738e:	4934      	ldr	r1, [pc, #208]	; (8007460 <bootloaderUpdateCommand+0x174>)
 8007390:	0020      	movs	r0, r4
 8007392:	f00c ff3d 	bl	8014210 <memcpy>
}
 8007396:	2000      	movs	r0, #0
 8007398:	b002      	add	sp, #8
 800739a:	bc80      	pop	{r7}
 800739c:	46b8      	mov	r8, r7
 800739e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 80073a0:	b672      	cpsid	i
 80073a2:	e7fe      	b.n	80073a2 <bootloaderUpdateCommand+0xb6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80073a4:	4b2a      	ldr	r3, [pc, #168]	; (8007450 <bootloaderUpdateCommand+0x164>)
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	492e      	ldr	r1, [pc, #184]	; (8007464 <bootloaderUpdateCommand+0x178>)
 80073aa:	0020      	movs	r0, r4
 80073ac:	f00d f92e 	bl	801460c <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 80073b0:	4b2d      	ldr	r3, [pc, #180]	; (8007468 <bootloaderUpdateCommand+0x17c>)
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	0020      	movs	r0, r4
 80073b6:	f00d f949 	bl	801464c <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80073ba:	0020      	movs	r0, r4
 80073bc:	f7f8 feac 	bl	8000118 <strlen>
 80073c0:	b282      	uxth	r2, r0
 80073c2:	4b26      	ldr	r3, [pc, #152]	; (800745c <bootloaderUpdateCommand+0x170>)
 80073c4:	7818      	ldrb	r0, [r3, #0]
 80073c6:	2301      	movs	r3, #1
 80073c8:	425b      	negs	r3, r3
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	3333      	adds	r3, #51	; 0x33
 80073ce:	0021      	movs	r1, r4
 80073d0:	f006 ffb2 	bl	800e338 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80073d4:	4b25      	ldr	r3, [pc, #148]	; (800746c <bootloaderUpdateCommand+0x180>)
 80073d6:	4a26      	ldr	r2, [pc, #152]	; (8007470 <bootloaderUpdateCommand+0x184>)
 80073d8:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 80073da:	4b26      	ldr	r3, [pc, #152]	; (8007474 <bootloaderUpdateCommand+0x188>)
 80073dc:	2201      	movs	r2, #1
 80073de:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80073e0:	200a      	movs	r0, #10
 80073e2:	f007 f8d8 	bl	800e596 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	4b23      	ldr	r3, [pc, #140]	; (8007478 <bootloaderUpdateCommand+0x18c>)
 80073ec:	4a23      	ldr	r2, [pc, #140]	; (800747c <bootloaderUpdateCommand+0x190>)
 80073ee:	60da      	str	r2, [r3, #12]
 80073f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80073f4:	46c0      	nop			; (mov r8, r8)
 80073f6:	e7fd      	b.n	80073f4 <bootloaderUpdateCommand+0x108>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 80073f8:	3001      	adds	r0, #1
 80073fa:	f00c fca8 	bl	8013d4e <atol>
 80073fe:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8007400:	2700      	movs	r7, #0
 8007402:	e7a1      	b.n	8007348 <bootloaderUpdateCommand+0x5c>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007404:	3001      	adds	r0, #1
 8007406:	f00c fca2 	bl	8013d4e <atol>
 800740a:	b2c5      	uxtb	r5, r0
 800740c:	e7a3      	b.n	8007356 <bootloaderUpdateCommand+0x6a>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 800740e:	2300      	movs	r3, #0
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	3319      	adds	r3, #25
 8007414:	2200      	movs	r2, #0
 8007416:	2100      	movs	r1, #0
 8007418:	0028      	movs	r0, r5
 800741a:	f002 f877 	bl	800950c <SendMessageFromPort>
				osDelay(100);
 800741e:	2064      	movs	r0, #100	; 0x64
 8007420:	f007 f8b9 	bl	800e596 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007424:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <bootloaderUpdateCommand+0x164>)
 8007426:	7818      	ldrb	r0, [r3, #0]
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <bootloaderUpdateCommand+0x170>)
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	002b      	movs	r3, r5
 800742e:	0001      	movs	r1, r0
 8007430:	f7fc fc28 	bl	8003c84 <remoteBootloaderUpdate>
 8007434:	e7a8      	b.n	8007388 <bootloaderUpdateCommand+0x9c>
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	200012bc 	.word	0x200012bc
 800743c:	0801bb94 	.word	0x0801bb94
 8007440:	200012c8 	.word	0x200012c8
 8007444:	200012a0 	.word	0x200012a0
 8007448:	200012cc 	.word	0x200012cc
 800744c:	200012a8 	.word	0x200012a8
 8007450:	2000107e 	.word	0x2000107e
 8007454:	20006aa8 	.word	0x20006aa8
 8007458:	20000f40 	.word	0x20000f40
 800745c:	20000a7f 	.word	0x20000a7f
 8007460:	0801b60c 	.word	0x0801b60c
 8007464:	0801bb74 	.word	0x0801bb74
 8007468:	20000074 	.word	0x20000074
 800746c:	20007ff0 	.word	0x20007ff0
 8007470:	deadbeef 	.word	0xdeadbeef
 8007474:	20000efc 	.word	0x20000efc
 8007478:	e000ed00 	.word	0xe000ed00
 800747c:	05fa0004 	.word	0x05fa0004

08007480 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007480:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 8007482:	2800      	cmp	r0, #0
 8007484:	d01e      	beq.n	80074c4 <pingCommand+0x44>
	if(!moduleAlias[myID][0])
 8007486:	4b15      	ldr	r3, [pc, #84]	; (80074dc <pingCommand+0x5c>)
 8007488:	781a      	ldrb	r2, [r3, #0]
 800748a:	0093      	lsls	r3, r2, #2
 800748c:	189b      	adds	r3, r3, r2
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	4913      	ldr	r1, [pc, #76]	; (80074e0 <pingCommand+0x60>)
 8007492:	5c5b      	ldrb	r3, [r3, r1]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d117      	bne.n	80074c8 <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007498:	4912      	ldr	r1, [pc, #72]	; (80074e4 <pingCommand+0x64>)
 800749a:	f00d f8b7 	bl	801460c <sprintf>
	RTOS_IND_blink(200);
 800749e:	2580      	movs	r5, #128	; 0x80
 80074a0:	012d      	lsls	r5, r5, #4
 80074a2:	2490      	movs	r4, #144	; 0x90
 80074a4:	05e4      	lsls	r4, r4, #23
 80074a6:	2201      	movs	r2, #1
 80074a8:	0029      	movs	r1, r5
 80074aa:	0020      	movs	r0, r4
 80074ac:	f00a febe 	bl	801222c <HAL_GPIO_WritePin>
 80074b0:	20c8      	movs	r0, #200	; 0xc8
 80074b2:	f007 f870 	bl	800e596 <osDelay>
 80074b6:	2200      	movs	r2, #0
 80074b8:	0029      	movs	r1, r5
 80074ba:	0020      	movs	r0, r4
 80074bc:	f00a feb6 	bl	801222c <HAL_GPIO_WritePin>
}
 80074c0:	2000      	movs	r0, #0
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80074c4:	b672      	cpsid	i
 80074c6:	e7fe      	b.n	80074c6 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80074c8:	0093      	lsls	r3, r2, #2
 80074ca:	189b      	adds	r3, r3, r2
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	4904      	ldr	r1, [pc, #16]	; (80074e0 <pingCommand+0x60>)
 80074d0:	185b      	adds	r3, r3, r1
 80074d2:	4905      	ldr	r1, [pc, #20]	; (80074e8 <pingCommand+0x68>)
 80074d4:	f00d f89a 	bl	801460c <sprintf>
 80074d8:	e7e1      	b.n	800749e <pingCommand+0x1e>
 80074da:	46c0      	nop			; (mov r8, r8)
 80074dc:	2000107e 	.word	0x2000107e
 80074e0:	20000f70 	.word	0x20000f70
 80074e4:	0801bb98 	.word	0x0801bb98
 80074e8:	0801bbac 	.word	0x0801bbac

080074ec <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80074ec:	b510      	push	{r4, lr}
 80074ee:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80074f0:	d009      	beq.n	8007506 <prvRunTimeStatsCommand+0x1a>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 80074f2:	2241      	movs	r2, #65	; 0x41
 80074f4:	4905      	ldr	r1, [pc, #20]	; (800750c <prvRunTimeStatsCommand+0x20>)
 80074f6:	f00c fe8b 	bl	8014210 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 80074fa:	0020      	movs	r0, r4
 80074fc:	3040      	adds	r0, #64	; 0x40
 80074fe:	f008 fd3b 	bl	800ff78 <vTaskGetRunTimeStats>
}
 8007502:	2000      	movs	r0, #0
 8007504:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8007506:	b672      	cpsid	i
 8007508:	e7fe      	b.n	8007508 <prvRunTimeStatsCommand+0x1c>
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	0801bbc8 	.word	0x0801bbc8

08007510 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007510:	b510      	push	{r4, lr}
 8007512:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007514:	d009      	beq.n	800752a <prvTaskStatsCommand+0x1a>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007516:	2250      	movs	r2, #80	; 0x50
 8007518:	4905      	ldr	r1, [pc, #20]	; (8007530 <prvTaskStatsCommand+0x20>)
 800751a:	f00c fe79 	bl	8014210 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800751e:	0020      	movs	r0, r4
 8007520:	304f      	adds	r0, #79	; 0x4f
 8007522:	f008 fcbb 	bl	800fe9c <vTaskList>
}
 8007526:	2000      	movs	r0, #0
 8007528:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800752a:	b672      	cpsid	i
 800752c:	e7fe      	b.n	800752c <prvTaskStatsCommand+0x1c>
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	0801bc0c 	.word	0x0801bc0c

08007534 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007534:	2800      	cmp	r0, #0
 8007536:	d008      	beq.n	800754a <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <resetCommand+0x1c>)
 800753e:	4a05      	ldr	r2, [pc, #20]	; (8007554 <resetCommand+0x20>)
 8007540:	60da      	str	r2, [r3, #12]
 8007542:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	e7fd      	b.n	8007546 <resetCommand+0x12>
 800754a:	b672      	cpsid	i
 800754c:	e7fe      	b.n	800754c <resetCommand+0x18>
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	e000ed00 	.word	0xe000ed00
 8007554:	05fa0004 	.word	0x05fa0004

08007558 <RegisterUserCLICommands>:
}
 8007558:	4770      	bx	lr
	...

0800755c <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 800755c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800755e:	4835      	ldr	r0, [pc, #212]	; (8007634 <vRegisterCLICommands+0xd8>)
 8007560:	f007 f896 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007564:	4834      	ldr	r0, [pc, #208]	; (8007638 <vRegisterCLICommands+0xdc>)
 8007566:	f007 f893 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 800756a:	4834      	ldr	r0, [pc, #208]	; (800763c <vRegisterCLICommands+0xe0>)
 800756c:	f007 f890 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007570:	4833      	ldr	r0, [pc, #204]	; (8007640 <vRegisterCLICommands+0xe4>)
 8007572:	f007 f88d 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007576:	4833      	ldr	r0, [pc, #204]	; (8007644 <vRegisterCLICommands+0xe8>)
 8007578:	f007 f88a 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 800757c:	4832      	ldr	r0, [pc, #200]	; (8007648 <vRegisterCLICommands+0xec>)
 800757e:	f007 f887 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007582:	4832      	ldr	r0, [pc, #200]	; (800764c <vRegisterCLICommands+0xf0>)
 8007584:	f007 f884 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007588:	4831      	ldr	r0, [pc, #196]	; (8007650 <vRegisterCLICommands+0xf4>)
 800758a:	f007 f881 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 800758e:	4831      	ldr	r0, [pc, #196]	; (8007654 <vRegisterCLICommands+0xf8>)
 8007590:	f007 f87e 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007594:	4830      	ldr	r0, [pc, #192]	; (8007658 <vRegisterCLICommands+0xfc>)
 8007596:	f007 f87b 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800759a:	4830      	ldr	r0, [pc, #192]	; (800765c <vRegisterCLICommands+0x100>)
 800759c:	f007 f878 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80075a0:	482f      	ldr	r0, [pc, #188]	; (8007660 <vRegisterCLICommands+0x104>)
 80075a2:	f007 f875 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80075a6:	482f      	ldr	r0, [pc, #188]	; (8007664 <vRegisterCLICommands+0x108>)
 80075a8:	f007 f872 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80075ac:	482e      	ldr	r0, [pc, #184]	; (8007668 <vRegisterCLICommands+0x10c>)
 80075ae:	f007 f86f 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80075b2:	482e      	ldr	r0, [pc, #184]	; (800766c <vRegisterCLICommands+0x110>)
 80075b4:	f007 f86c 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80075b8:	482d      	ldr	r0, [pc, #180]	; (8007670 <vRegisterCLICommands+0x114>)
 80075ba:	f007 f869 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80075be:	482d      	ldr	r0, [pc, #180]	; (8007674 <vRegisterCLICommands+0x118>)
 80075c0:	f007 f866 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80075c4:	482c      	ldr	r0, [pc, #176]	; (8007678 <vRegisterCLICommands+0x11c>)
 80075c6:	f007 f863 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 80075ca:	482c      	ldr	r0, [pc, #176]	; (800767c <vRegisterCLICommands+0x120>)
 80075cc:	f007 f860 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 80075d0:	482b      	ldr	r0, [pc, #172]	; (8007680 <vRegisterCLICommands+0x124>)
 80075d2:	f007 f85d 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80075d6:	482b      	ldr	r0, [pc, #172]	; (8007684 <vRegisterCLICommands+0x128>)
 80075d8:	f007 f85a 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80075dc:	482a      	ldr	r0, [pc, #168]	; (8007688 <vRegisterCLICommands+0x12c>)
 80075de:	f007 f857 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80075e2:	482a      	ldr	r0, [pc, #168]	; (800768c <vRegisterCLICommands+0x130>)
 80075e4:	f007 f854 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 80075e8:	4829      	ldr	r0, [pc, #164]	; (8007690 <vRegisterCLICommands+0x134>)
 80075ea:	f007 f851 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80075ee:	4829      	ldr	r0, [pc, #164]	; (8007694 <vRegisterCLICommands+0x138>)
 80075f0:	f007 f84e 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80075f4:	4828      	ldr	r0, [pc, #160]	; (8007698 <vRegisterCLICommands+0x13c>)
 80075f6:	f007 f84b 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80075fa:	4828      	ldr	r0, [pc, #160]	; (800769c <vRegisterCLICommands+0x140>)
 80075fc:	f007 f848 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007600:	4827      	ldr	r0, [pc, #156]	; (80076a0 <vRegisterCLICommands+0x144>)
 8007602:	f007 f845 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007606:	4827      	ldr	r0, [pc, #156]	; (80076a4 <vRegisterCLICommands+0x148>)
 8007608:	f007 f842 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800760c:	4826      	ldr	r0, [pc, #152]	; (80076a8 <vRegisterCLICommands+0x14c>)
 800760e:	f007 f83f 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007612:	4826      	ldr	r0, [pc, #152]	; (80076ac <vRegisterCLICommands+0x150>)
 8007614:	f007 f83c 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007618:	4825      	ldr	r0, [pc, #148]	; (80076b0 <vRegisterCLICommands+0x154>)
 800761a:	f007 f839 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800761e:	4825      	ldr	r0, [pc, #148]	; (80076b4 <vRegisterCLICommands+0x158>)
 8007620:	f007 f836 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007624:	4b24      	ldr	r3, [pc, #144]	; (80076b8 <vRegisterCLICommands+0x15c>)
 8007626:	2223      	movs	r2, #35	; 0x23
 8007628:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800762a:	f004 fa4d 	bl	800bac8 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800762e:	f7ff ff93 	bl	8007558 <RegisterUserCLICommands>
}
 8007632:	bd10      	pop	{r4, pc}
 8007634:	0801ccb4 	.word	0x0801ccb4
 8007638:	0801cca4 	.word	0x0801cca4
 800763c:	0801cc94 	.word	0x0801cc94
 8007640:	0801cbb0 	.word	0x0801cbb0
 8007644:	0801cc00 	.word	0x0801cc00
 8007648:	0801ccd4 	.word	0x0801ccd4
 800764c:	0801cc74 	.word	0x0801cc74
 8007650:	0801cc30 	.word	0x0801cc30
 8007654:	0801cd24 	.word	0x0801cd24
 8007658:	0801cc50 	.word	0x0801cc50
 800765c:	0801cce4 	.word	0x0801cce4
 8007660:	0801cba0 	.word	0x0801cba0
 8007664:	0801ccc4 	.word	0x0801ccc4
 8007668:	0801cd04 	.word	0x0801cd04
 800766c:	0801cc20 	.word	0x0801cc20
 8007670:	0801cbe0 	.word	0x0801cbe0
 8007674:	0801cd44 	.word	0x0801cd44
 8007678:	0801cbd0 	.word	0x0801cbd0
 800767c:	0801ccf4 	.word	0x0801ccf4
 8007680:	0801cd64 	.word	0x0801cd64
 8007684:	0801cc40 	.word	0x0801cc40
 8007688:	0801cc10 	.word	0x0801cc10
 800768c:	0801cd14 	.word	0x0801cd14
 8007690:	0801cb90 	.word	0x0801cb90
 8007694:	0801cc84 	.word	0x0801cc84
 8007698:	0801cbf0 	.word	0x0801cbf0
 800769c:	0801cbc0 	.word	0x0801cbc0
 80076a0:	0801cd54 	.word	0x0801cd54
 80076a4:	0801cd34 	.word	0x0801cd34
 80076a8:	0801cb50 	.word	0x0801cb50
 80076ac:	0801cb70 	.word	0x0801cb70
 80076b0:	0801cb80 	.word	0x0801cb80
 80076b4:	0801cb60 	.word	0x0801cb60
 80076b8:	20006a2c 	.word	0x20006a2c

080076bc <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 80076bc:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 80076be:	1e45      	subs	r5, r0, #1
 80076c0:	00ec      	lsls	r4, r5, #3
 80076c2:	1b60      	subs	r0, r4, r5
 80076c4:	00c0      	lsls	r0, r0, #3
 80076c6:	4e05      	ldr	r6, [pc, #20]	; (80076dc <StopMsgDMA+0x20>)
 80076c8:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80076ca:	f009 fe5a 	bl	8011382 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80076ce:	1b64      	subs	r4, r4, r5
 80076d0:	00e4      	lsls	r4, r4, #3
 80076d2:	59a3      	ldr	r3, [r4, r6]
 80076d4:	2200      	movs	r2, #0
 80076d6:	605a      	str	r2, [r3, #4]
}
 80076d8:	bd70      	pop	{r4, r5, r6, pc}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	20001880 	.word	0x20001880

080076e0 <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80076e0:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80076e2:	1e44      	subs	r4, r0, #1
 80076e4:	00e5      	lsls	r5, r4, #3
 80076e6:	1b28      	subs	r0, r5, r4
 80076e8:	00c0      	lsls	r0, r0, #3
 80076ea:	4e07      	ldr	r6, [pc, #28]	; (8007708 <StopStreamDMA+0x28>)
 80076ec:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80076ee:	f009 fe48 	bl	8011382 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80076f2:	1b2d      	subs	r5, r5, r4
 80076f4:	00ed      	lsls	r5, r5, #3
 80076f6:	59aa      	ldr	r2, [r5, r6]
 80076f8:	2300      	movs	r3, #0
 80076fa:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 80076fc:	00a4      	lsls	r4, r4, #2
 80076fe:	4a03      	ldr	r2, [pc, #12]	; (800770c <StopStreamDMA+0x2c>)
 8007700:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 8007702:	4a03      	ldr	r2, [pc, #12]	; (8007710 <StopStreamDMA+0x30>)
 8007704:	50a3      	str	r3, [r4, r2]
	
}
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	20001a78 	.word	0x20001a78
 800770c:	20001498 	.word	0x20001498
 8007710:	200014c8 	.word	0x200014c8

08007714 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8007714:	b510      	push	{r4, lr}
 8007716:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007718:	f7ff ffd0 	bl	80076bc <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 800771c:	3c01      	subs	r4, #1
 800771e:	00e0      	lsls	r0, r4, #3
 8007720:	1b02      	subs	r2, r0, r4
 8007722:	00d2      	lsls	r2, r2, #3
 8007724:	4903      	ldr	r1, [pc, #12]	; (8007734 <SwitchMsgDMAToStream+0x20>)
 8007726:	5851      	ldr	r1, [r2, r1]
 8007728:	4b03      	ldr	r3, [pc, #12]	; (8007738 <SwitchMsgDMAToStream+0x24>)
 800772a:	18d0      	adds	r0, r2, r3
 800772c:	f004 ffe2 	bl	800c6f4 <DMA_STREAM_CH_Init>
}
 8007730:	bd10      	pop	{r4, pc}
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	20001880 	.word	0x20001880
 8007738:	20001a78 	.word	0x20001a78

0800773c <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 800773c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800773e:	46c6      	mov	lr, r8
 8007740:	b500      	push	{lr}
 8007742:	0007      	movs	r7, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 8007744:	f7ff ffcc 	bl	80076e0 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007748:	1e7c      	subs	r4, r7, #1
 800774a:	00e5      	lsls	r5, r4, #3
 800774c:	1b2e      	subs	r6, r5, r4
 800774e:	00f6      	lsls	r6, r6, #3
 8007750:	4b11      	ldr	r3, [pc, #68]	; (8007798 <SwitchStreamDMAToMsg+0x5c>)
 8007752:	18f6      	adds	r6, r6, r3
 8007754:	4b11      	ldr	r3, [pc, #68]	; (800779c <SwitchStreamDMAToMsg+0x60>)
 8007756:	4698      	mov	r8, r3
 8007758:	1b2b      	subs	r3, r5, r4
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	4642      	mov	r2, r8
 800775e:	5899      	ldr	r1, [r3, r2]
 8007760:	0030      	movs	r0, r6
 8007762:	f004 ff49 	bl	800c5f8 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8007766:	1b2b      	subs	r3, r5, r4
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4443      	add	r3, r8
 800776c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800776e:	f004 ff13 	bl	800c598 <GetPort>
 8007772:	2300      	movs	r3, #0
 8007774:	4a0a      	ldr	r2, [pc, #40]	; (80077a0 <SwitchStreamDMAToMsg+0x64>)
 8007776:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 8007778:	1b2d      	subs	r5, r5, r4
 800777a:	00ed      	lsls	r5, r5, #3
 800777c:	4642      	mov	r2, r8
 800777e:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port - 1] =0;
 8007780:	00a4      	lsls	r4, r4, #2
 8007782:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <SwitchStreamDMAToMsg+0x68>)
 8007784:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007786:	0038      	movs	r0, r7
 8007788:	f006 fdb4 	bl	800e2f4 <GetUart>
 800778c:	0031      	movs	r1, r6
 800778e:	f005 fbab 	bl	800cee8 <DMA_MSG_RX_Setup>
	
}
 8007792:	bc80      	pop	{r7}
 8007794:	46b8      	mov	r8, r7
 8007796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007798:	20001880 	.word	0x20001880
 800779c:	20001a78 	.word	0x20001a78
 80077a0:	20001100 	.word	0x20001100
 80077a4:	200014b0 	.word	0x200014b0

080077a8 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	0005      	movs	r5, r0
 80077ac:	000e      	movs	r6, r1
 80077ae:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80077b0:	f004 fef2 	bl	800c598 <GetPort>
 80077b4:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80077b6:	4b0d      	ldr	r3, [pc, #52]	; (80077ec <StartDMAstream+0x44>)
 80077b8:	5c1b      	ldrb	r3, [r3, r0]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d902      	bls.n	80077c4 <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80077be:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d112      	bne.n	80077ea <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 80077c4:	0020      	movs	r0, r4
 80077c6:	f7ff ffa5 	bl	8007714 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 80077ca:	1e63      	subs	r3, r4, #1
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <StartDMAstream+0x48>)
 80077d0:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80077d2:	4a06      	ldr	r2, [pc, #24]	; (80077ec <StartDMAstream+0x44>)
 80077d4:	2102      	movs	r1, #2
 80077d6:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80077d8:	4a06      	ldr	r2, [pc, #24]	; (80077f4 <StartDMAstream+0x4c>)
 80077da:	2100      	movs	r1, #0
 80077dc:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80077de:	003a      	movs	r2, r7
 80077e0:	0031      	movs	r1, r6
 80077e2:	0028      	movs	r0, r5
 80077e4:	f005 fbea 	bl	800cfbc <DMA_STREAM_Setup>
	
	return BOS_OK;
 80077e8:	2000      	movs	r0, #0
}
 80077ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ec:	20001100 	.word	0x20001100
 80077f0:	200014b0 	.word	0x200014b0
 80077f4:	20001498 	.word	0x20001498

080077f8 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 80077fc:	4b12      	ldr	r3, [pc, #72]	; (8007848 <DMA_IRQHandler+0x50>)
 80077fe:	5c1b      	ldrb	r3, [r3, r0]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d008      	beq.n	8007816 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007804:	3c01      	subs	r4, #1
 8007806:	00e0      	lsls	r0, r4, #3
 8007808:	1b00      	subs	r0, r0, r4
 800780a:	00c0      	lsls	r0, r0, #3
 800780c:	4c0f      	ldr	r4, [pc, #60]	; (800784c <DMA_IRQHandler+0x54>)
 800780e:	1900      	adds	r0, r0, r4
 8007810:	f009 fde0 	bl	80113d4 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007814:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007816:	1e45      	subs	r5, r0, #1
 8007818:	00e8      	lsls	r0, r5, #3
 800781a:	1b40      	subs	r0, r0, r5
 800781c:	00c0      	lsls	r0, r0, #3
 800781e:	4b0c      	ldr	r3, [pc, #48]	; (8007850 <DMA_IRQHandler+0x58>)
 8007820:	18c0      	adds	r0, r0, r3
 8007822:	f009 fdd7 	bl	80113d4 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007826:	00aa      	lsls	r2, r5, #2
 8007828:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <DMA_IRQHandler+0x5c>)
 800782a:	58d2      	ldr	r2, [r2, r3]
 800782c:	2a00      	cmp	r2, #0
 800782e:	d006      	beq.n	800783e <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 8007830:	4909      	ldr	r1, [pc, #36]	; (8007858 <DMA_IRQHandler+0x60>)
 8007832:	00ad      	lsls	r5, r5, #2
 8007834:	586b      	ldr	r3, [r5, r1]
 8007836:	3301      	adds	r3, #1
 8007838:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800783a:	429a      	cmp	r2, r3
 800783c:	d8ea      	bhi.n	8007814 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 800783e:	0020      	movs	r0, r4
 8007840:	f7ff ff4e 	bl	80076e0 <StopStreamDMA>
}
 8007844:	e7e6      	b.n	8007814 <DMA_IRQHandler+0x1c>
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	20001100 	.word	0x20001100
 800784c:	20001880 	.word	0x20001880
 8007850:	20001a78 	.word	0x20001a78
 8007854:	200014c8 	.word	0x200014c8
 8007858:	20001498 	.word	0x20001498

0800785c <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 800785c:	4b08      	ldr	r3, [pc, #32]	; (8007880 <ResetUartORE+0x24>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	2308      	movs	r3, #8
 8007862:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007864:	4a07      	ldr	r2, [pc, #28]	; (8007884 <ResetUartORE+0x28>)
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800786a:	4a07      	ldr	r2, [pc, #28]	; (8007888 <ResetUartORE+0x2c>)
 800786c:	6812      	ldr	r2, [r2, #0]
 800786e:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007870:	4a06      	ldr	r2, [pc, #24]	; (800788c <ResetUartORE+0x30>)
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007876:	4a06      	ldr	r2, [pc, #24]	; (8007890 <ResetUartORE+0x34>)
 8007878:	6812      	ldr	r2, [r2, #0]
 800787a:	6213      	str	r3, [r2, #32]
#endif
}
 800787c:	4770      	bx	lr
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	20006ca8 	.word	0x20006ca8
 8007884:	20006df8 	.word	0x20006df8
 8007888:	20006bc8 	.word	0x20006bc8
 800788c:	20006c38 	.word	0x20006c38
 8007890:	20006d18 	.word	0x20006d18

08007894 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	0006      	movs	r6, r0
 8007898:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800789a:	f00a fa0b 	bl	8011cb4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800789e:	4b2a      	ldr	r3, [pc, #168]	; (8007948 <EE_VerifyPageFullWriteVariable+0xb4>)
 80078a0:	881a      	ldrh	r2, [r3, #0]
 80078a2:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80078a4:	4b29      	ldr	r3, [pc, #164]	; (800794c <EE_VerifyPageFullWriteVariable+0xb8>)
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d104      	bne.n	80078b8 <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 80078ae:	4928      	ldr	r1, [pc, #160]	; (8007950 <EE_VerifyPageFullWriteVariable+0xbc>)
 80078b0:	428a      	cmp	r2, r1
 80078b2:	d007      	beq.n	80078c4 <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 80078b4:	3302      	adds	r3, #2
 80078b6:	e005      	b.n	80078c4 <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	d140      	bne.n	800793e <EE_VerifyPageFullWriteVariable+0xaa>
				if(PageStatusB == RECEIVE_DATA){
 80078bc:	4924      	ldr	r1, [pc, #144]	; (8007950 <EE_VerifyPageFullWriteVariable+0xbc>)
 80078be:	428b      	cmp	r3, r1
 80078c0:	d03f      	beq.n	8007942 <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEA; /* PageA valid */
 80078c2:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80078c4:	4a23      	ldr	r2, [pc, #140]	; (8007954 <EE_VerifyPageFullWriteVariable+0xc0>)
 80078c6:	189c      	adds	r4, r3, r2
 80078c8:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80078ca:	02db      	lsls	r3, r3, #11
 80078cc:	4a22      	ldr	r2, [pc, #136]	; (8007958 <EE_VerifyPageFullWriteVariable+0xc4>)
 80078ce:	4694      	mov	ip, r2
 80078d0:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80078d2:	6822      	ldr	r2, [r4, #0]
 80078d4:	3201      	adds	r2, #1
 80078d6:	d006      	beq.n	80078e6 <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 80078d8:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 80078da:	429c      	cmp	r4, r3
 80078dc:	d3f9      	bcc.n	80078d2 <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 80078de:	f00a f9fd 	bl	8011cdc <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 80078e2:	2080      	movs	r0, #128	; 0x80
}
 80078e4:	bd70      	pop	{r4, r5, r6, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 80078e6:	002a      	movs	r2, r5
 80078e8:	2300      	movs	r3, #0
 80078ea:	0021      	movs	r1, r4
 80078ec:	2001      	movs	r0, #1
 80078ee:	f00a fa2d 	bl	8011d4c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078f2:	481a      	ldr	r0, [pc, #104]	; (800795c <EE_VerifyPageFullWriteVariable+0xc8>)
 80078f4:	f00a f9fc 	bl	8011cf0 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d003      	beq.n	8007904 <EE_VerifyPageFullWriteVariable+0x70>
				return pFlash.ErrorCode;
 80078fc:	4b18      	ldr	r3, [pc, #96]	; (8007960 <EE_VerifyPageFullWriteVariable+0xcc>)
 80078fe:	69d8      	ldr	r0, [r3, #28]
 8007900:	b280      	uxth	r0, r0
 8007902:	e7ef      	b.n	80078e4 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007904:	4a17      	ldr	r2, [pc, #92]	; (8007964 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007906:	6913      	ldr	r3, [r2, #16]
 8007908:	2101      	movs	r1, #1
 800790a:	438b      	bics	r3, r1
 800790c:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800790e:	1ca1      	adds	r1, r4, #2
 8007910:	0032      	movs	r2, r6
 8007912:	2300      	movs	r3, #0
 8007914:	2001      	movs	r0, #1
 8007916:	f00a fa19 	bl	8011d4c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800791a:	4810      	ldr	r0, [pc, #64]	; (800795c <EE_VerifyPageFullWriteVariable+0xc8>)
 800791c:	f00a f9e8 	bl	8011cf0 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007920:	2800      	cmp	r0, #0
 8007922:	d003      	beq.n	800792c <EE_VerifyPageFullWriteVariable+0x98>
				return pFlash.ErrorCode;
 8007924:	4b0e      	ldr	r3, [pc, #56]	; (8007960 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007926:	69d8      	ldr	r0, [r3, #28]
 8007928:	b280      	uxth	r0, r0
 800792a:	e7db      	b.n	80078e4 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800792c:	4a0d      	ldr	r2, [pc, #52]	; (8007964 <EE_VerifyPageFullWriteVariable+0xd0>)
 800792e:	6913      	ldr	r3, [r2, #16]
 8007930:	2101      	movs	r1, #1
 8007932:	438b      	bics	r3, r1
 8007934:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 8007936:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007938:	69d8      	ldr	r0, [r3, #28]
 800793a:	b280      	uxth	r0, r0
 800793c:	e7d2      	b.n	80078e4 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 800793e:	20ab      	movs	r0, #171	; 0xab
 8007940:	e7d0      	b.n	80078e4 <EE_VerifyPageFullWriteVariable+0x50>
					return PAGEB; /* PageB valid */
 8007942:	2302      	movs	r3, #2
 8007944:	e7be      	b.n	80078c4 <EE_VerifyPageFullWriteVariable+0x30>
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	0801e000 	.word	0x0801e000
 800794c:	0801f000 	.word	0x0801f000
 8007950:	0000eeee 	.word	0x0000eeee
 8007954:	0001003c 	.word	0x0001003c
 8007958:	0801effe 	.word	0x0801effe
 800795c:	0000c350 	.word	0x0000c350
 8007960:	20006f98 	.word	0x20006f98
 8007964:	40022000 	.word	0x40022000

08007968 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007968:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800796a:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <EE_ReadVariable+0x48>)
 800796c:	881c      	ldrh	r4, [r3, #0]
 800796e:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007970:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <EE_ReadVariable+0x4c>)
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 8007976:	2c00      	cmp	r4, #0
 8007978:	d009      	beq.n	800798e <EE_ReadVariable+0x26>
			else if(PageStatusB == VALID_PAGE){
 800797a:	2b00      	cmp	r3, #0
 800797c:	d006      	beq.n	800798c <EE_ReadVariable+0x24>
		return NO_VALID_PAGE;
 800797e:	20ab      	movs	r0, #171	; 0xab
 8007980:	e003      	b.n	800798a <EE_ReadVariable+0x22>
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007982:	3b02      	subs	r3, #2
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 8007988:	2000      	movs	r0, #0
}
 800798a:	bd10      	pop	{r4, pc}
				return PAGEB; /* PageB valid */
 800798c:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800798e:	02e3      	lsls	r3, r4, #11
 8007990:	4a09      	ldr	r2, [pc, #36]	; (80079b8 <EE_ReadVariable+0x50>)
 8007992:	4694      	mov	ip, r2
 8007994:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007996:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 8007998:	4a08      	ldr	r2, [pc, #32]	; (80079bc <EE_ReadVariable+0x54>)
 800799a:	4694      	mov	ip, r2
 800799c:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 800799e:	881a      	ldrh	r2, [r3, #0]
 80079a0:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 80079a2:	4282      	cmp	r2, r0
 80079a4:	d0ed      	beq.n	8007982 <EE_ReadVariable+0x1a>
			Address =Address - 4;
 80079a6:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 80079a8:	42a3      	cmp	r3, r4
 80079aa:	d8f8      	bhi.n	800799e <EE_ReadVariable+0x36>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 80079ac:	2001      	movs	r0, #1
 80079ae:	e7ec      	b.n	800798a <EE_ReadVariable+0x22>
 80079b0:	0801e000 	.word	0x0801e000
 80079b4:	0801f000 	.word	0x0801f000
 80079b8:	0801effe 	.word	0x0801effe
 80079bc:	0801e002 	.word	0x0801e002

080079c0 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 80079c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079c2:	46de      	mov	lr, fp
 80079c4:	4657      	mov	r7, sl
 80079c6:	464e      	mov	r6, r9
 80079c8:	4645      	mov	r5, r8
 80079ca:	b5e0      	push	{r5, r6, r7, lr}
 80079cc:	b083      	sub	sp, #12
 80079ce:	0006      	movs	r6, r0
 80079d0:	000d      	movs	r5, r1
	HAL_FLASH_Unlock();
 80079d2:	f00a f96f 	bl	8011cb4 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80079d6:	0029      	movs	r1, r5
 80079d8:	0030      	movs	r0, r6
 80079da:	f7ff ff5b 	bl	8007894 <EE_VerifyPageFullWriteVariable>
 80079de:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 80079e0:	2880      	cmp	r0, #128	; 0x80
 80079e2:	d009      	beq.n	80079f8 <EE_WriteVariable+0x38>
	HAL_FLASH_Lock();
 80079e4:	f00a f97a 	bl	8011cdc <HAL_FLASH_Lock>
}
 80079e8:	0020      	movs	r0, r4
 80079ea:	b003      	add	sp, #12
 80079ec:	bcf0      	pop	{r4, r5, r6, r7}
 80079ee:	46bb      	mov	fp, r7
 80079f0:	46b2      	mov	sl, r6
 80079f2:	46a9      	mov	r9, r5
 80079f4:	46a0      	mov	r8, r4
 80079f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 80079f8:	f00a f95c 	bl	8011cb4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80079fc:	4b40      	ldr	r3, [pc, #256]	; (8007b00 <EE_WriteVariable+0x140>)
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a02:	4a40      	ldr	r2, [pc, #256]	; (8007b04 <EE_WriteVariable+0x144>)
 8007a04:	8812      	ldrh	r2, [r2, #0]
 8007a06:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <EE_WriteVariable+0x5c>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 8007a0c:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 8007a0e:	2a00      	cmp	r2, #0
 8007a10:	d1e8      	bne.n	80079e4 <EE_WriteVariable+0x24>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007a12:	4b3c      	ldr	r3, [pc, #240]	; (8007b04 <EE_WriteVariable+0x144>)
 8007a14:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007a16:	4b3a      	ldr	r3, [pc, #232]	; (8007b00 <EE_WriteVariable+0x140>)
 8007a18:	469a      	mov	sl, r3
 8007a1a:	e003      	b.n	8007a24 <EE_WriteVariable+0x64>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007a1c:	4b38      	ldr	r3, [pc, #224]	; (8007b00 <EE_WriteVariable+0x140>)
 8007a1e:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007a20:	4b38      	ldr	r3, [pc, #224]	; (8007b04 <EE_WriteVariable+0x144>)
 8007a22:	469a      	mov	sl, r3
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 8007a24:	4a38      	ldr	r2, [pc, #224]	; (8007b08 <EE_WriteVariable+0x148>)
 8007a26:	2300      	movs	r3, #0
 8007a28:	4651      	mov	r1, sl
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	f00a f98e 	bl	8011d4c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a30:	4836      	ldr	r0, [pc, #216]	; (8007b0c <EE_WriteVariable+0x14c>)
 8007a32:	f00a f95d 	bl	8011cf0 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d003      	beq.n	8007a42 <EE_WriteVariable+0x82>
		return pFlash.ErrorCode;
 8007a3a:	4b35      	ldr	r3, [pc, #212]	; (8007b10 <EE_WriteVariable+0x150>)
 8007a3c:	69dc      	ldr	r4, [r3, #28]
 8007a3e:	b2a4      	uxth	r4, r4
 8007a40:	e7d0      	b.n	80079e4 <EE_WriteVariable+0x24>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a42:	4a34      	ldr	r2, [pc, #208]	; (8007b14 <EE_WriteVariable+0x154>)
 8007a44:	6913      	ldr	r3, [r2, #16]
 8007a46:	2101      	movs	r1, #1
 8007a48:	438b      	bics	r3, r1
 8007a4a:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007a4c:	0029      	movs	r1, r5
 8007a4e:	0030      	movs	r0, r6
 8007a50:	f7ff ff20 	bl	8007894 <EE_VerifyPageFullWriteVariable>
 8007a54:	9001      	str	r0, [sp, #4]
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d150      	bne.n	8007afc <EE_WriteVariable+0x13c>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007a5a:	2501      	movs	r5, #1
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
		{
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007a5c:	4b2e      	ldr	r3, [pc, #184]	; (8007b18 <EE_WriteVariable+0x158>)
 8007a5e:	4698      	mov	r8, r3
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007a60:	4699      	mov	r9, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007a62:	4f2e      	ldr	r7, [pc, #184]	; (8007b1c <EE_WriteVariable+0x15c>)
 8007a64:	e003      	b.n	8007a6e <EE_WriteVariable+0xae>
 8007a66:	3501      	adds	r5, #1
 8007a68:	b2ad      	uxth	r5, r5
 8007a6a:	42bd      	cmp	r5, r7
 8007a6c:	d00f      	beq.n	8007a8e <EE_WriteVariable+0xce>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007a6e:	42ae      	cmp	r6, r5
 8007a70:	d0f9      	beq.n	8007a66 <EE_WriteVariable+0xa6>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007a72:	4641      	mov	r1, r8
 8007a74:	0028      	movs	r0, r5
 8007a76:	f7ff ff77 	bl	8007968 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 8007a7a:	2801      	cmp	r0, #1
 8007a7c:	d0f3      	beq.n	8007a66 <EE_WriteVariable+0xa6>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007a7e:	464b      	mov	r3, r9
 8007a80:	8819      	ldrh	r1, [r3, #0]
 8007a82:	0028      	movs	r0, r5
 8007a84:	f7ff ff06 	bl	8007894 <EE_VerifyPageFullWriteVariable>
 8007a88:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 8007a8a:	d0ec      	beq.n	8007a66 <EE_WriteVariable+0xa6>
 8007a8c:	e7aa      	b.n	80079e4 <EE_WriteVariable+0x24>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 8007a8e:	4658      	mov	r0, fp
 8007a90:	f00a f9d4 	bl	8011e3c <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a94:	481d      	ldr	r0, [pc, #116]	; (8007b0c <EE_WriteVariable+0x14c>)
 8007a96:	f00a f92b 	bl	8011cf0 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d003      	beq.n	8007aa6 <EE_WriteVariable+0xe6>
		return pFlash.ErrorCode;
 8007a9e:	4b1c      	ldr	r3, [pc, #112]	; (8007b10 <EE_WriteVariable+0x150>)
 8007aa0:	69dc      	ldr	r4, [r3, #28]
 8007aa2:	b2a4      	uxth	r4, r4
 8007aa4:	e79e      	b.n	80079e4 <EE_WriteVariable+0x24>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007aa6:	2080      	movs	r0, #128	; 0x80
 8007aa8:	0100      	lsls	r0, r0, #4
 8007aaa:	4458      	add	r0, fp
 8007aac:	f00a f9c6 	bl	8011e3c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ab0:	4816      	ldr	r0, [pc, #88]	; (8007b0c <EE_WriteVariable+0x14c>)
 8007ab2:	f00a f91d 	bl	8011cf0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d003      	beq.n	8007ac2 <EE_WriteVariable+0x102>
			return pFlash.ErrorCode;
 8007aba:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <EE_WriteVariable+0x150>)
 8007abc:	69dc      	ldr	r4, [r3, #28]
 8007abe:	b2a4      	uxth	r4, r4
 8007ac0:	e790      	b.n	80079e4 <EE_WriteVariable+0x24>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ac2:	4a14      	ldr	r2, [pc, #80]	; (8007b14 <EE_WriteVariable+0x154>)
 8007ac4:	6913      	ldr	r3, [r2, #16]
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	438b      	bics	r3, r1
 8007aca:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007acc:	2200      	movs	r2, #0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	f00a f93a 	bl	8011d4c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ad8:	480c      	ldr	r0, [pc, #48]	; (8007b0c <EE_WriteVariable+0x14c>)
 8007ada:	f00a f909 	bl	8011cf0 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d003      	beq.n	8007aea <EE_WriteVariable+0x12a>
		return pFlash.ErrorCode;
 8007ae2:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <EE_WriteVariable+0x150>)
 8007ae4:	69dc      	ldr	r4, [r3, #28]
 8007ae6:	b2a4      	uxth	r4, r4
 8007ae8:	e77c      	b.n	80079e4 <EE_WriteVariable+0x24>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007aea:	4a0a      	ldr	r2, [pc, #40]	; (8007b14 <EE_WriteVariable+0x154>)
 8007aec:	6913      	ldr	r3, [r2, #16]
 8007aee:	2101      	movs	r1, #1
 8007af0:	438b      	bics	r3, r1
 8007af2:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 8007af4:	f00a f8f2 	bl	8011cdc <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 8007af8:	9c01      	ldr	r4, [sp, #4]
 8007afa:	e773      	b.n	80079e4 <EE_WriteVariable+0x24>
		return EepromStatus;
 8007afc:	9c01      	ldr	r4, [sp, #4]
 8007afe:	e771      	b.n	80079e4 <EE_WriteVariable+0x24>
 8007b00:	0801e000 	.word	0x0801e000
 8007b04:	0801f000 	.word	0x0801f000
 8007b08:	0000eeee 	.word	0x0000eeee
 8007b0c:	0000c350 	.word	0x0000c350
 8007b10:	20006f98 	.word	0x20006f98
 8007b14:	40022000 	.word	0x40022000
 8007b18:	200014e0 	.word	0x200014e0
 8007b1c:	00000401 	.word	0x00000401

08007b20 <EE_Format>:
uint16_t EE_Format(void){
 8007b20:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007b22:	f00a f8c7 	bl	8011cb4 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b26:	4829      	ldr	r0, [pc, #164]	; (8007bcc <EE_Format+0xac>)
 8007b28:	f00a f988 	bl	8011e3c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b2c:	4828      	ldr	r0, [pc, #160]	; (8007bd0 <EE_Format+0xb0>)
 8007b2e:	f00a f8df 	bl	8011cf0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d003      	beq.n	8007b3e <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007b36:	4b27      	ldr	r3, [pc, #156]	; (8007bd4 <EE_Format+0xb4>)
 8007b38:	69d8      	ldr	r0, [r3, #28]
 8007b3a:	b280      	uxth	r0, r0
}
 8007b3c:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b3e:	4826      	ldr	r0, [pc, #152]	; (8007bd8 <EE_Format+0xb8>)
 8007b40:	f00a f97c 	bl	8011e3c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b44:	4822      	ldr	r0, [pc, #136]	; (8007bd0 <EE_Format+0xb0>)
 8007b46:	f00a f8d3 	bl	8011cf0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d003      	beq.n	8007b56 <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007b4e:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <EE_Format+0xb4>)
 8007b50:	69d8      	ldr	r0, [r3, #28]
 8007b52:	b280      	uxth	r0, r0
 8007b54:	e7f2      	b.n	8007b3c <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007b56:	4a21      	ldr	r2, [pc, #132]	; (8007bdc <EE_Format+0xbc>)
 8007b58:	6913      	ldr	r3, [r2, #16]
 8007b5a:	2102      	movs	r1, #2
 8007b5c:	438b      	bics	r3, r1
 8007b5e:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	4919      	ldr	r1, [pc, #100]	; (8007bcc <EE_Format+0xac>)
 8007b66:	2001      	movs	r0, #1
 8007b68:	f00a f8f0 	bl	8011d4c <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b6c:	4818      	ldr	r0, [pc, #96]	; (8007bd0 <EE_Format+0xb0>)
 8007b6e:	f00a f8bf 	bl	8011cf0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d003      	beq.n	8007b7e <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007b76:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <EE_Format+0xb4>)
 8007b78:	69d8      	ldr	r0, [r3, #28]
 8007b7a:	b280      	uxth	r0, r0
 8007b7c:	e7de      	b.n	8007b3c <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b7e:	4a17      	ldr	r2, [pc, #92]	; (8007bdc <EE_Format+0xbc>)
 8007b80:	6913      	ldr	r3, [r2, #16]
 8007b82:	2101      	movs	r1, #1
 8007b84:	438b      	bics	r3, r1
 8007b86:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007b88:	4815      	ldr	r0, [pc, #84]	; (8007be0 <EE_Format+0xc0>)
 8007b8a:	f00a f957 	bl	8011e3c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b8e:	4810      	ldr	r0, [pc, #64]	; (8007bd0 <EE_Format+0xb0>)
 8007b90:	f00a f8ae 	bl	8011cf0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d003      	beq.n	8007ba0 <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007b98:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <EE_Format+0xb4>)
 8007b9a:	69d8      	ldr	r0, [r3, #28]
 8007b9c:	b280      	uxth	r0, r0
 8007b9e:	e7cd      	b.n	8007b3c <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007ba0:	4810      	ldr	r0, [pc, #64]	; (8007be4 <EE_Format+0xc4>)
 8007ba2:	f00a f94b 	bl	8011e3c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ba6:	480a      	ldr	r0, [pc, #40]	; (8007bd0 <EE_Format+0xb0>)
 8007ba8:	f00a f8a2 	bl	8011cf0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d003      	beq.n	8007bb8 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007bb0:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <EE_Format+0xb4>)
 8007bb2:	69d8      	ldr	r0, [r3, #28]
 8007bb4:	b280      	uxth	r0, r0
 8007bb6:	e7c1      	b.n	8007b3c <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bb8:	4a08      	ldr	r2, [pc, #32]	; (8007bdc <EE_Format+0xbc>)
 8007bba:	6913      	ldr	r3, [r2, #16]
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	438b      	bics	r3, r1
 8007bc0:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007bc2:	f00a f88b 	bl	8011cdc <HAL_FLASH_Lock>
	return FlashStatus;
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	e7b8      	b.n	8007b3c <EE_Format+0x1c>
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	0801e000 	.word	0x0801e000
 8007bd0:	0000c350 	.word	0x0000c350
 8007bd4:	20006f98 	.word	0x20006f98
 8007bd8:	0801e800 	.word	0x0801e800
 8007bdc:	40022000 	.word	0x40022000
 8007be0:	0801f000 	.word	0x0801f000
 8007be4:	0801f800 	.word	0x0801f800

08007be8 <EE_Init>:
uint16_t EE_Init(void){
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	46ce      	mov	lr, r9
 8007bec:	4647      	mov	r7, r8
 8007bee:	b580      	push	{r7, lr}
	HAL_FLASH_Unlock();
 8007bf0:	f00a f860 	bl	8011cb4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007bf4:	4bbf      	ldr	r3, [pc, #764]	; (8007ef4 <EE_Init+0x30c>)
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007bfa:	4abf      	ldr	r2, [pc, #764]	; (8007ef8 <EE_Init+0x310>)
 8007bfc:	8812      	ldrh	r2, [r2, #0]
 8007bfe:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007c00:	49be      	ldr	r1, [pc, #760]	; (8007efc <EE_Init+0x314>)
 8007c02:	428b      	cmp	r3, r1
 8007c04:	d100      	bne.n	8007c08 <EE_Init+0x20>
 8007c06:	e075      	b.n	8007cf4 <EE_Init+0x10c>
 8007c08:	49bd      	ldr	r1, [pc, #756]	; (8007f00 <EE_Init+0x318>)
 8007c0a:	428b      	cmp	r3, r1
 8007c0c:	d012      	beq.n	8007c34 <EE_Init+0x4c>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d100      	bne.n	8007c14 <EE_Init+0x2c>
 8007c12:	e10b      	b.n	8007e2c <EE_Init+0x244>
			FlashStatus =EE_Format();
 8007c14:	f7ff ff84 	bl	8007b20 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c18:	48ba      	ldr	r0, [pc, #744]	; (8007f04 <EE_Init+0x31c>)
 8007c1a:	f00a f869 	bl	8011cf0 <FLASH_WaitForLastOperation>
 8007c1e:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 8007c20:	2d00      	cmp	r5, #0
 8007c22:	d102      	bne.n	8007c2a <EE_Init+0x42>
	HAL_FLASH_Lock();
 8007c24:	f00a f85a 	bl	8011cdc <HAL_FLASH_Lock>
	return HAL_OK;
 8007c28:	2500      	movs	r5, #0
}
 8007c2a:	0028      	movs	r0, r5
 8007c2c:	bcc0      	pop	{r6, r7}
 8007c2e:	46b9      	mov	r9, r7
 8007c30:	46b0      	mov	r8, r6
 8007c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007c34:	2a00      	cmp	r2, #0
 8007c36:	d00d      	beq.n	8007c54 <EE_Init+0x6c>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007c38:	4bb0      	ldr	r3, [pc, #704]	; (8007efc <EE_Init+0x314>)
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d028      	beq.n	8007c90 <EE_Init+0xa8>
				FlashStatus =EE_Format();
 8007c3e:	f7ff ff6f 	bl	8007b20 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c42:	48b0      	ldr	r0, [pc, #704]	; (8007f04 <EE_Init+0x31c>)
 8007c44:	f00a f854 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d0eb      	beq.n	8007c24 <EE_Init+0x3c>
					return pFlash.ErrorCode;
 8007c4c:	4bae      	ldr	r3, [pc, #696]	; (8007f08 <EE_Init+0x320>)
 8007c4e:	69dd      	ldr	r5, [r3, #28]
 8007c50:	b2ad      	uxth	r5, r5
 8007c52:	e7ea      	b.n	8007c2a <EE_Init+0x42>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c54:	48a7      	ldr	r0, [pc, #668]	; (8007ef4 <EE_Init+0x30c>)
 8007c56:	f00a f8f1 	bl	8011e3c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c5a:	48aa      	ldr	r0, [pc, #680]	; (8007f04 <EE_Init+0x31c>)
 8007c5c:	f00a f848 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d003      	beq.n	8007c6c <EE_Init+0x84>
					return pFlash.ErrorCode;
 8007c64:	4ba8      	ldr	r3, [pc, #672]	; (8007f08 <EE_Init+0x320>)
 8007c66:	69dd      	ldr	r5, [r3, #28]
 8007c68:	b2ad      	uxth	r5, r5
 8007c6a:	e7de      	b.n	8007c2a <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c6c:	48a7      	ldr	r0, [pc, #668]	; (8007f0c <EE_Init+0x324>)
 8007c6e:	f00a f8e5 	bl	8011e3c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c72:	48a4      	ldr	r0, [pc, #656]	; (8007f04 <EE_Init+0x31c>)
 8007c74:	f00a f83c 	bl	8011cf0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d105      	bne.n	8007c88 <EE_Init+0xa0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c7c:	4aa4      	ldr	r2, [pc, #656]	; (8007f10 <EE_Init+0x328>)
 8007c7e:	6913      	ldr	r3, [r2, #16]
 8007c80:	2102      	movs	r1, #2
 8007c82:	438b      	bics	r3, r1
 8007c84:	6113      	str	r3, [r2, #16]
 8007c86:	e7cd      	b.n	8007c24 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007c88:	4b9f      	ldr	r3, [pc, #636]	; (8007f08 <EE_Init+0x320>)
 8007c8a:	69dd      	ldr	r5, [r3, #28]
 8007c8c:	b2ad      	uxth	r5, r5
 8007c8e:	e7cc      	b.n	8007c2a <EE_Init+0x42>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c90:	4898      	ldr	r0, [pc, #608]	; (8007ef4 <EE_Init+0x30c>)
 8007c92:	f00a f8d3 	bl	8011e3c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c96:	489b      	ldr	r0, [pc, #620]	; (8007f04 <EE_Init+0x31c>)
 8007c98:	f00a f82a 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d003      	beq.n	8007ca8 <EE_Init+0xc0>
					return pFlash.ErrorCode;
 8007ca0:	4b99      	ldr	r3, [pc, #612]	; (8007f08 <EE_Init+0x320>)
 8007ca2:	69dd      	ldr	r5, [r3, #28]
 8007ca4:	b2ad      	uxth	r5, r5
 8007ca6:	e7c0      	b.n	8007c2a <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007ca8:	4898      	ldr	r0, [pc, #608]	; (8007f0c <EE_Init+0x324>)
 8007caa:	f00a f8c7 	bl	8011e3c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cae:	4895      	ldr	r0, [pc, #596]	; (8007f04 <EE_Init+0x31c>)
 8007cb0:	f00a f81e 	bl	8011cf0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d003      	beq.n	8007cc0 <EE_Init+0xd8>
						return pFlash.ErrorCode;
 8007cb8:	4b93      	ldr	r3, [pc, #588]	; (8007f08 <EE_Init+0x320>)
 8007cba:	69dd      	ldr	r5, [r3, #28]
 8007cbc:	b2ad      	uxth	r5, r5
 8007cbe:	e7b4      	b.n	8007c2a <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007cc0:	4a93      	ldr	r2, [pc, #588]	; (8007f10 <EE_Init+0x328>)
 8007cc2:	6913      	ldr	r3, [r2, #16]
 8007cc4:	2102      	movs	r1, #2
 8007cc6:	438b      	bics	r3, r1
 8007cc8:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	498a      	ldr	r1, [pc, #552]	; (8007ef8 <EE_Init+0x310>)
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f00a f83b 	bl	8011d4c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cd6:	488b      	ldr	r0, [pc, #556]	; (8007f04 <EE_Init+0x31c>)
 8007cd8:	f00a f80a 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d105      	bne.n	8007cec <EE_Init+0x104>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007ce0:	4a8b      	ldr	r2, [pc, #556]	; (8007f10 <EE_Init+0x328>)
 8007ce2:	6913      	ldr	r3, [r2, #16]
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	438b      	bics	r3, r1
 8007ce8:	6113      	str	r3, [r2, #16]
 8007cea:	e79b      	b.n	8007c24 <EE_Init+0x3c>
					return pFlash.ErrorCode;
 8007cec:	4b86      	ldr	r3, [pc, #536]	; (8007f08 <EE_Init+0x320>)
 8007cee:	69dd      	ldr	r5, [r3, #28]
 8007cf0:	b2ad      	uxth	r5, r5
 8007cf2:	e79a      	b.n	8007c2a <EE_Init+0x42>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	d158      	bne.n	8007daa <EE_Init+0x1c2>
 8007cf8:	2401      	movs	r4, #1
	int16_t x =-1;
 8007cfa:	2601      	movs	r6, #1
 8007cfc:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007cfe:	4f85      	ldr	r7, [pc, #532]	; (8007f14 <EE_Init+0x32c>)
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007d00:	4b85      	ldr	r3, [pc, #532]	; (8007f18 <EE_Init+0x330>)
 8007d02:	4698      	mov	r8, r3
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007d04:	4699      	mov	r9, r3
 8007d06:	e005      	b.n	8007d14 <EE_Init+0x12c>
						x =VarIdx;
 8007d08:	b226      	sxth	r6, r4
 8007d0a:	e008      	b.n	8007d1e <EE_Init+0x136>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007d0c:	3401      	adds	r4, #1
 8007d0e:	4b83      	ldr	r3, [pc, #524]	; (8007f1c <EE_Init+0x334>)
 8007d10:	429c      	cmp	r4, r3
 8007d12:	d018      	beq.n	8007d46 <EE_Init+0x15e>
 8007d14:	b2a5      	uxth	r5, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007d16:	883b      	ldrh	r3, [r7, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	42ab      	cmp	r3, r5
 8007d1c:	d0f4      	beq.n	8007d08 <EE_Init+0x120>
					if(VarIdx != x){
 8007d1e:	42a6      	cmp	r6, r4
 8007d20:	d0f4      	beq.n	8007d0c <EE_Init+0x124>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007d22:	4641      	mov	r1, r8
 8007d24:	0028      	movs	r0, r5
 8007d26:	f7ff fe1f 	bl	8007968 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007d2a:	2801      	cmp	r0, #1
 8007d2c:	d0ee      	beq.n	8007d0c <EE_Init+0x124>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007d2e:	464b      	mov	r3, r9
 8007d30:	8819      	ldrh	r1, [r3, #0]
 8007d32:	0028      	movs	r0, r5
 8007d34:	f7ff fdae 	bl	8007894 <EE_VerifyPageFullWriteVariable>
 8007d38:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d3a:	4872      	ldr	r0, [pc, #456]	; (8007f04 <EE_Init+0x31c>)
 8007d3c:	f009 ffd8 	bl	8011cf0 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d0e3      	beq.n	8007d0c <EE_Init+0x124>
 8007d44:	e771      	b.n	8007c2a <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007d46:	2200      	movs	r2, #0
 8007d48:	2300      	movs	r3, #0
 8007d4a:	496a      	ldr	r1, [pc, #424]	; (8007ef4 <EE_Init+0x30c>)
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	f009 fffd 	bl	8011d4c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d52:	486c      	ldr	r0, [pc, #432]	; (8007f04 <EE_Init+0x31c>)
 8007d54:	f009 ffcc 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d003      	beq.n	8007d64 <EE_Init+0x17c>
					return pFlash.ErrorCode;
 8007d5c:	4b6a      	ldr	r3, [pc, #424]	; (8007f08 <EE_Init+0x320>)
 8007d5e:	69dd      	ldr	r5, [r3, #28]
 8007d60:	b2ad      	uxth	r5, r5
 8007d62:	e762      	b.n	8007c2a <EE_Init+0x42>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d64:	4a6a      	ldr	r2, [pc, #424]	; (8007f10 <EE_Init+0x328>)
 8007d66:	6913      	ldr	r3, [r2, #16]
 8007d68:	2101      	movs	r1, #1
 8007d6a:	438b      	bics	r3, r1
 8007d6c:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007d6e:	4862      	ldr	r0, [pc, #392]	; (8007ef8 <EE_Init+0x310>)
 8007d70:	f00a f864 	bl	8011e3c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d74:	4863      	ldr	r0, [pc, #396]	; (8007f04 <EE_Init+0x31c>)
 8007d76:	f009 ffbb 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d003      	beq.n	8007d86 <EE_Init+0x19e>
					return pFlash.ErrorCode;
 8007d7e:	4b62      	ldr	r3, [pc, #392]	; (8007f08 <EE_Init+0x320>)
 8007d80:	69dd      	ldr	r5, [r3, #28]
 8007d82:	b2ad      	uxth	r5, r5
 8007d84:	e751      	b.n	8007c2a <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007d86:	4866      	ldr	r0, [pc, #408]	; (8007f20 <EE_Init+0x338>)
 8007d88:	f00a f858 	bl	8011e3c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d8c:	485d      	ldr	r0, [pc, #372]	; (8007f04 <EE_Init+0x31c>)
 8007d8e:	f009 ffaf 	bl	8011cf0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d105      	bne.n	8007da2 <EE_Init+0x1ba>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d96:	4a5e      	ldr	r2, [pc, #376]	; (8007f10 <EE_Init+0x328>)
 8007d98:	6913      	ldr	r3, [r2, #16]
 8007d9a:	2102      	movs	r1, #2
 8007d9c:	438b      	bics	r3, r1
 8007d9e:	6113      	str	r3, [r2, #16]
 8007da0:	e740      	b.n	8007c24 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007da2:	4b59      	ldr	r3, [pc, #356]	; (8007f08 <EE_Init+0x320>)
 8007da4:	69dd      	ldr	r5, [r3, #28]
 8007da6:	b2ad      	uxth	r5, r5
 8007da8:	e73f      	b.n	8007c2a <EE_Init+0x42>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007daa:	4b55      	ldr	r3, [pc, #340]	; (8007f00 <EE_Init+0x318>)
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d00b      	beq.n	8007dc8 <EE_Init+0x1e0>
				FlashStatus =EE_Format();
 8007db0:	f7ff feb6 	bl	8007b20 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007db4:	4853      	ldr	r0, [pc, #332]	; (8007f04 <EE_Init+0x31c>)
 8007db6:	f009 ff9b 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d100      	bne.n	8007dc0 <EE_Init+0x1d8>
 8007dbe:	e731      	b.n	8007c24 <EE_Init+0x3c>
					return pFlash.ErrorCode;
 8007dc0:	4b51      	ldr	r3, [pc, #324]	; (8007f08 <EE_Init+0x320>)
 8007dc2:	69dd      	ldr	r5, [r3, #28]
 8007dc4:	b2ad      	uxth	r5, r5
 8007dc6:	e730      	b.n	8007c2a <EE_Init+0x42>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007dc8:	484b      	ldr	r0, [pc, #300]	; (8007ef8 <EE_Init+0x310>)
 8007dca:	f00a f837 	bl	8011e3c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007dce:	484d      	ldr	r0, [pc, #308]	; (8007f04 <EE_Init+0x31c>)
 8007dd0:	f009 ff8e 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d003      	beq.n	8007de0 <EE_Init+0x1f8>
					return pFlash.ErrorCode;
 8007dd8:	4b4b      	ldr	r3, [pc, #300]	; (8007f08 <EE_Init+0x320>)
 8007dda:	69dd      	ldr	r5, [r3, #28]
 8007ddc:	b2ad      	uxth	r5, r5
 8007dde:	e724      	b.n	8007c2a <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007de0:	484f      	ldr	r0, [pc, #316]	; (8007f20 <EE_Init+0x338>)
 8007de2:	f00a f82b 	bl	8011e3c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007de6:	4847      	ldr	r0, [pc, #284]	; (8007f04 <EE_Init+0x31c>)
 8007de8:	f009 ff82 	bl	8011cf0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d003      	beq.n	8007df8 <EE_Init+0x210>
						return pFlash.ErrorCode;
 8007df0:	4b45      	ldr	r3, [pc, #276]	; (8007f08 <EE_Init+0x320>)
 8007df2:	69dd      	ldr	r5, [r3, #28]
 8007df4:	b2ad      	uxth	r5, r5
 8007df6:	e718      	b.n	8007c2a <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007df8:	4a45      	ldr	r2, [pc, #276]	; (8007f10 <EE_Init+0x328>)
 8007dfa:	6913      	ldr	r3, [r2, #16]
 8007dfc:	2102      	movs	r1, #2
 8007dfe:	438b      	bics	r3, r1
 8007e00:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007e02:	2200      	movs	r2, #0
 8007e04:	2300      	movs	r3, #0
 8007e06:	493b      	ldr	r1, [pc, #236]	; (8007ef4 <EE_Init+0x30c>)
 8007e08:	2001      	movs	r0, #1
 8007e0a:	f009 ff9f 	bl	8011d4c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e0e:	483d      	ldr	r0, [pc, #244]	; (8007f04 <EE_Init+0x31c>)
 8007e10:	f009 ff6e 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d105      	bne.n	8007e24 <EE_Init+0x23c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007e18:	4a3d      	ldr	r2, [pc, #244]	; (8007f10 <EE_Init+0x328>)
 8007e1a:	6913      	ldr	r3, [r2, #16]
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	438b      	bics	r3, r1
 8007e20:	6113      	str	r3, [r2, #16]
 8007e22:	e6ff      	b.n	8007c24 <EE_Init+0x3c>
					return pFlash.ErrorCode;
 8007e24:	4b38      	ldr	r3, [pc, #224]	; (8007f08 <EE_Init+0x320>)
 8007e26:	69dd      	ldr	r5, [r3, #28]
 8007e28:	b2ad      	uxth	r5, r5
 8007e2a:	e6fe      	b.n	8007c2a <EE_Init+0x42>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007e2c:	2a00      	cmp	r2, #0
 8007e2e:	d00a      	beq.n	8007e46 <EE_Init+0x25e>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007e30:	4b33      	ldr	r3, [pc, #204]	; (8007f00 <EE_Init+0x318>)
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d011      	beq.n	8007e5a <EE_Init+0x272>
 8007e36:	2401      	movs	r4, #1
	int16_t x =-1;
 8007e38:	2601      	movs	r6, #1
 8007e3a:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007e3c:	4f39      	ldr	r7, [pc, #228]	; (8007f24 <EE_Init+0x33c>)
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007e3e:	4b36      	ldr	r3, [pc, #216]	; (8007f18 <EE_Init+0x330>)
 8007e40:	4698      	mov	r8, r3
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007e42:	4699      	mov	r9, r3
 8007e44:	e02d      	b.n	8007ea2 <EE_Init+0x2ba>
				FlashStatus =EE_Format();
 8007e46:	f7ff fe6b 	bl	8007b20 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e4a:	482e      	ldr	r0, [pc, #184]	; (8007f04 <EE_Init+0x31c>)
 8007e4c:	f009 ff50 	bl	8011cf0 <FLASH_WaitForLastOperation>
 8007e50:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK){
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	d100      	bne.n	8007e58 <EE_Init+0x270>
 8007e56:	e6e5      	b.n	8007c24 <EE_Init+0x3c>
 8007e58:	e6e7      	b.n	8007c2a <EE_Init+0x42>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e5a:	4827      	ldr	r0, [pc, #156]	; (8007ef8 <EE_Init+0x310>)
 8007e5c:	f009 ffee 	bl	8011e3c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e60:	4828      	ldr	r0, [pc, #160]	; (8007f04 <EE_Init+0x31c>)
 8007e62:	f009 ff45 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d003      	beq.n	8007e72 <EE_Init+0x28a>
					return pFlash.ErrorCode;
 8007e6a:	4b27      	ldr	r3, [pc, #156]	; (8007f08 <EE_Init+0x320>)
 8007e6c:	69dd      	ldr	r5, [r3, #28]
 8007e6e:	b2ad      	uxth	r5, r5
 8007e70:	e6db      	b.n	8007c2a <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e72:	482b      	ldr	r0, [pc, #172]	; (8007f20 <EE_Init+0x338>)
 8007e74:	f009 ffe2 	bl	8011e3c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e78:	4822      	ldr	r0, [pc, #136]	; (8007f04 <EE_Init+0x31c>)
 8007e7a:	f009 ff39 	bl	8011cf0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d105      	bne.n	8007e8e <EE_Init+0x2a6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007e82:	4a23      	ldr	r2, [pc, #140]	; (8007f10 <EE_Init+0x328>)
 8007e84:	6913      	ldr	r3, [r2, #16]
 8007e86:	2102      	movs	r1, #2
 8007e88:	438b      	bics	r3, r1
 8007e8a:	6113      	str	r3, [r2, #16]
 8007e8c:	e6ca      	b.n	8007c24 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007e8e:	4b1e      	ldr	r3, [pc, #120]	; (8007f08 <EE_Init+0x320>)
 8007e90:	69dd      	ldr	r5, [r3, #28]
 8007e92:	b2ad      	uxth	r5, r5
 8007e94:	e6c9      	b.n	8007c2a <EE_Init+0x42>
						x =VarIdx;
 8007e96:	b226      	sxth	r6, r4
 8007e98:	e008      	b.n	8007eac <EE_Init+0x2c4>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007e9a:	3401      	adds	r4, #1
 8007e9c:	4b1f      	ldr	r3, [pc, #124]	; (8007f1c <EE_Init+0x334>)
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	d018      	beq.n	8007ed4 <EE_Init+0x2ec>
 8007ea2:	b2a5      	uxth	r5, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007ea4:	883b      	ldrh	r3, [r7, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	42ab      	cmp	r3, r5
 8007eaa:	d0f4      	beq.n	8007e96 <EE_Init+0x2ae>
					if(VarIdx != x){
 8007eac:	42a6      	cmp	r6, r4
 8007eae:	d0f4      	beq.n	8007e9a <EE_Init+0x2b2>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007eb0:	4641      	mov	r1, r8
 8007eb2:	0028      	movs	r0, r5
 8007eb4:	f7ff fd58 	bl	8007968 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007eb8:	2801      	cmp	r0, #1
 8007eba:	d0ee      	beq.n	8007e9a <EE_Init+0x2b2>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007ebc:	464b      	mov	r3, r9
 8007ebe:	8819      	ldrh	r1, [r3, #0]
 8007ec0:	0028      	movs	r0, r5
 8007ec2:	f7ff fce7 	bl	8007894 <EE_VerifyPageFullWriteVariable>
 8007ec6:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ec8:	480e      	ldr	r0, [pc, #56]	; (8007f04 <EE_Init+0x31c>)
 8007eca:	f009 ff11 	bl	8011cf0 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d0e3      	beq.n	8007e9a <EE_Init+0x2b2>
 8007ed2:	e6aa      	b.n	8007c2a <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4907      	ldr	r1, [pc, #28]	; (8007ef8 <EE_Init+0x310>)
 8007eda:	2001      	movs	r0, #1
 8007edc:	f009 ff36 	bl	8011d4c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ee0:	4808      	ldr	r0, [pc, #32]	; (8007f04 <EE_Init+0x31c>)
 8007ee2:	f009 ff05 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d01e      	beq.n	8007f28 <EE_Init+0x340>
					return pFlash.ErrorCode;
 8007eea:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <EE_Init+0x320>)
 8007eec:	69dd      	ldr	r5, [r3, #28]
 8007eee:	b2ad      	uxth	r5, r5
 8007ef0:	e69b      	b.n	8007c2a <EE_Init+0x42>
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	0801e000 	.word	0x0801e000
 8007ef8:	0801f000 	.word	0x0801f000
 8007efc:	0000eeee 	.word	0x0000eeee
 8007f00:	0000ffff 	.word	0x0000ffff
 8007f04:	0000c350 	.word	0x0000c350
 8007f08:	20006f98 	.word	0x20006f98
 8007f0c:	0801e800 	.word	0x0801e800
 8007f10:	40022000 	.word	0x40022000
 8007f14:	0801e006 	.word	0x0801e006
 8007f18:	200014e0 	.word	0x200014e0
 8007f1c:	00000401 	.word	0x00000401
 8007f20:	0801f800 	.word	0x0801f800
 8007f24:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007f28:	4a11      	ldr	r2, [pc, #68]	; (8007f70 <EE_Init+0x388>)
 8007f2a:	6913      	ldr	r3, [r2, #16]
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	438b      	bics	r3, r1
 8007f30:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007f32:	4810      	ldr	r0, [pc, #64]	; (8007f74 <EE_Init+0x38c>)
 8007f34:	f009 ff82 	bl	8011e3c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f38:	480f      	ldr	r0, [pc, #60]	; (8007f78 <EE_Init+0x390>)
 8007f3a:	f009 fed9 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d003      	beq.n	8007f4a <EE_Init+0x362>
					return pFlash.ErrorCode;
 8007f42:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <EE_Init+0x394>)
 8007f44:	69dd      	ldr	r5, [r3, #28]
 8007f46:	b2ad      	uxth	r5, r5
 8007f48:	e66f      	b.n	8007c2a <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007f4a:	480d      	ldr	r0, [pc, #52]	; (8007f80 <EE_Init+0x398>)
 8007f4c:	f009 ff76 	bl	8011e3c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f50:	4809      	ldr	r0, [pc, #36]	; (8007f78 <EE_Init+0x390>)
 8007f52:	f009 fecd 	bl	8011cf0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d105      	bne.n	8007f66 <EE_Init+0x37e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007f5a:	4a05      	ldr	r2, [pc, #20]	; (8007f70 <EE_Init+0x388>)
 8007f5c:	6913      	ldr	r3, [r2, #16]
 8007f5e:	2102      	movs	r1, #2
 8007f60:	438b      	bics	r3, r1
 8007f62:	6113      	str	r3, [r2, #16]
 8007f64:	e65e      	b.n	8007c24 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <EE_Init+0x394>)
 8007f68:	69dd      	ldr	r5, [r3, #28]
 8007f6a:	b2ad      	uxth	r5, r5
 8007f6c:	e65d      	b.n	8007c2a <EE_Init+0x42>
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	40022000 	.word	0x40022000
 8007f74:	0801e000 	.word	0x0801e000
 8007f78:	0000c350 	.word	0x0000c350
 8007f7c:	20006f98 	.word	0x20006f98
 8007f80:	0801e800 	.word	0x0801e800

08007f84 <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 8007f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f86:	46c6      	mov	lr, r8
 8007f88:	b500      	push	{lr}
	
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
 8007f8a:	4c2a      	ldr	r4, [pc, #168]	; (8008034 <StartDefaultTask+0xb0>)
				indMode =IND_OFF;
				break;
				
			case IND_TOPOLOGY:
				RTOS_IND_blink(100);
				indMode =IND_OFF;
 8007f8c:	0026      	movs	r6, r4
				break;
				
			case IND_SHORT_BLINK:
				RTOS_IND_blink(30);
				indMode =IND_OFF;
 8007f8e:	46a0      	mov	r8, r4
 8007f90:	e01f      	b.n	8007fd2 <StartDefaultTask+0x4e>
				RTOS_IND_blink(100);
 8007f92:	2580      	movs	r5, #128	; 0x80
 8007f94:	012d      	lsls	r5, r5, #4
 8007f96:	2790      	movs	r7, #144	; 0x90
 8007f98:	05ff      	lsls	r7, r7, #23
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	0029      	movs	r1, r5
 8007f9e:	0038      	movs	r0, r7
 8007fa0:	f00a f944 	bl	801222c <HAL_GPIO_WritePin>
 8007fa4:	2064      	movs	r0, #100	; 0x64
 8007fa6:	f006 faf6 	bl	800e596 <osDelay>
 8007faa:	2200      	movs	r2, #0
 8007fac:	0029      	movs	r1, r5
 8007fae:	0038      	movs	r0, r7
 8007fb0:	f00a f93c 	bl	801222c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	7033      	strb	r3, [r6, #0]
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007fb8:	f000 ff6a 	bl	8008e90 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007fbc:	f7fd fb04 	bl	80055c8 <ExecuteSnippet>

		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 8007fc0:	4b1d      	ldr	r3, [pc, #116]	; (8008038 <StartDefaultTask+0xb4>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <StartDefaultTask+0x4a>
			delayButtonStateReset = false;
 8007fc8:	4b1c      	ldr	r3, [pc, #112]	; (800803c <StartDefaultTask+0xb8>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
		
		taskYIELD();
 8007fce:	f008 fb2b 	bl	8010628 <vPortYield>
		switch(indMode){
 8007fd2:	7823      	ldrb	r3, [r4, #0]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d0dc      	beq.n	8007f92 <StartDefaultTask+0xe>
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d016      	beq.n	800800a <StartDefaultTask+0x86>
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d1eb      	bne.n	8007fb8 <StartDefaultTask+0x34>
				RTOS_IND_blink(200);
 8007fe0:	2580      	movs	r5, #128	; 0x80
 8007fe2:	012d      	lsls	r5, r5, #4
 8007fe4:	2790      	movs	r7, #144	; 0x90
 8007fe6:	05ff      	lsls	r7, r7, #23
 8007fe8:	2201      	movs	r2, #1
 8007fea:	0029      	movs	r1, r5
 8007fec:	0038      	movs	r0, r7
 8007fee:	f00a f91d 	bl	801222c <HAL_GPIO_WritePin>
 8007ff2:	20c8      	movs	r0, #200	; 0xc8
 8007ff4:	f006 facf 	bl	800e596 <osDelay>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	0029      	movs	r1, r5
 8007ffc:	0038      	movs	r0, r7
 8007ffe:	f00a f915 	bl	801222c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8008002:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <StartDefaultTask+0xb0>)
 8008004:	2200      	movs	r2, #0
 8008006:	701a      	strb	r2, [r3, #0]
				break;
 8008008:	e7d6      	b.n	8007fb8 <StartDefaultTask+0x34>
				RTOS_IND_blink(30);
 800800a:	2580      	movs	r5, #128	; 0x80
 800800c:	012d      	lsls	r5, r5, #4
 800800e:	2790      	movs	r7, #144	; 0x90
 8008010:	05ff      	lsls	r7, r7, #23
 8008012:	2201      	movs	r2, #1
 8008014:	0029      	movs	r1, r5
 8008016:	0038      	movs	r0, r7
 8008018:	f00a f908 	bl	801222c <HAL_GPIO_WritePin>
 800801c:	201e      	movs	r0, #30
 800801e:	f006 faba 	bl	800e596 <osDelay>
 8008022:	2200      	movs	r2, #0
 8008024:	0029      	movs	r1, r5
 8008026:	0038      	movs	r0, r7
 8008028:	f00a f900 	bl	801222c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800802c:	2300      	movs	r3, #0
 800802e:	4642      	mov	r2, r8
 8008030:	7013      	strb	r3, [r2, #0]
				break;
 8008032:	e7c1      	b.n	8007fb8 <StartDefaultTask+0x34>
 8008034:	20000efc 	.word	0x20000efc
 8008038:	20001570 	.word	0x20001570
 800803c:	2000156f 	.word	0x2000156f

08008040 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	b090      	sub	sp, #64	; 0x40
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8008044:	25a0      	movs	r5, #160	; 0xa0
 8008046:	006d      	lsls	r5, r5, #1
 8008048:	2400      	movs	r4, #0
 800804a:	9403      	str	r4, [sp, #12]
 800804c:	9402      	str	r4, [sp, #8]
 800804e:	4b5e      	ldr	r3, [pc, #376]	; (80081c8 <MX_FREERTOS_Init+0x188>)
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	2603      	movs	r6, #3
 8008054:	9600      	str	r6, [sp, #0]
 8008056:	2300      	movs	r3, #0
 8008058:	002a      	movs	r2, r5
 800805a:	495c      	ldr	r1, [pc, #368]	; (80081cc <MX_FREERTOS_Init+0x18c>)
 800805c:	485c      	ldr	r0, [pc, #368]	; (80081d0 <MX_FREERTOS_Init+0x190>)
 800805e:	f007 f985 	bl	800f36c <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8008062:	9403      	str	r4, [sp, #12]
 8008064:	9402      	str	r4, [sp, #8]
 8008066:	4b5b      	ldr	r3, [pc, #364]	; (80081d4 <MX_FREERTOS_Init+0x194>)
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	9600      	str	r6, [sp, #0]
 800806c:	2300      	movs	r3, #0
 800806e:	002a      	movs	r2, r5
 8008070:	4959      	ldr	r1, [pc, #356]	; (80081d8 <MX_FREERTOS_Init+0x198>)
 8008072:	485a      	ldr	r0, [pc, #360]	; (80081dc <MX_FREERTOS_Init+0x19c>)
 8008074:	f007 f97a 	bl	800f36c <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8008078:	9403      	str	r4, [sp, #12]
 800807a:	9402      	str	r4, [sp, #8]
 800807c:	4b58      	ldr	r3, [pc, #352]	; (80081e0 <MX_FREERTOS_Init+0x1a0>)
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	9600      	str	r6, [sp, #0]
 8008082:	2300      	movs	r3, #0
 8008084:	002a      	movs	r2, r5
 8008086:	4957      	ldr	r1, [pc, #348]	; (80081e4 <MX_FREERTOS_Init+0x1a4>)
 8008088:	4857      	ldr	r0, [pc, #348]	; (80081e8 <MX_FREERTOS_Init+0x1a8>)
 800808a:	f007 f96f 	bl	800f36c <xTaskGenericCreate>
	vRegisterCLICommands();
 800808e:	f7ff fa65 	bl	800755c <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8008092:	9403      	str	r4, [sp, #12]
 8008094:	9402      	str	r4, [sp, #8]
 8008096:	4b55      	ldr	r3, [pc, #340]	; (80081ec <MX_FREERTOS_Init+0x1ac>)
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	9600      	str	r6, [sp, #0]
 800809c:	2300      	movs	r3, #0
 800809e:	002a      	movs	r2, r5
 80080a0:	4953      	ldr	r1, [pc, #332]	; (80081f0 <MX_FREERTOS_Init+0x1b0>)
 80080a2:	4854      	ldr	r0, [pc, #336]	; (80081f4 <MX_FREERTOS_Init+0x1b4>)
 80080a4:	f007 f962 	bl	800f36c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",configMINIMAL_STACK_SIZE,(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 80080a8:	4d53      	ldr	r5, [pc, #332]	; (80081f8 <MX_FREERTOS_Init+0x1b8>)
 80080aa:	9403      	str	r4, [sp, #12]
 80080ac:	9402      	str	r4, [sp, #8]
 80080ae:	4b53      	ldr	r3, [pc, #332]	; (80081fc <MX_FREERTOS_Init+0x1bc>)
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	3601      	adds	r6, #1
 80080b4:	9600      	str	r6, [sp, #0]
 80080b6:	2301      	movs	r3, #1
 80080b8:	22a0      	movs	r2, #160	; 0xa0
 80080ba:	4951      	ldr	r1, [pc, #324]	; (8008200 <MX_FREERTOS_Init+0x1c0>)
 80080bc:	0028      	movs	r0, r5
 80080be:	f007 f955 	bl	800f36c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",configMINIMAL_STACK_SIZE,(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 80080c2:	9403      	str	r4, [sp, #12]
 80080c4:	9402      	str	r4, [sp, #8]
 80080c6:	4b4f      	ldr	r3, [pc, #316]	; (8008204 <MX_FREERTOS_Init+0x1c4>)
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	9600      	str	r6, [sp, #0]
 80080cc:	2302      	movs	r3, #2
 80080ce:	22a0      	movs	r2, #160	; 0xa0
 80080d0:	494d      	ldr	r1, [pc, #308]	; (8008208 <MX_FREERTOS_Init+0x1c8>)
 80080d2:	0028      	movs	r0, r5
 80080d4:	f007 f94a 	bl	800f36c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",configMINIMAL_STACK_SIZE,(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 80080d8:	9403      	str	r4, [sp, #12]
 80080da:	9402      	str	r4, [sp, #8]
 80080dc:	4b4b      	ldr	r3, [pc, #300]	; (800820c <MX_FREERTOS_Init+0x1cc>)
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	9600      	str	r6, [sp, #0]
 80080e2:	2303      	movs	r3, #3
 80080e4:	22a0      	movs	r2, #160	; 0xa0
 80080e6:	494a      	ldr	r1, [pc, #296]	; (8008210 <MX_FREERTOS_Init+0x1d0>)
 80080e8:	0028      	movs	r0, r5
 80080ea:	f007 f93f 	bl	800f36c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",configMINIMAL_STACK_SIZE,(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80080ee:	9403      	str	r4, [sp, #12]
 80080f0:	9402      	str	r4, [sp, #8]
 80080f2:	4b48      	ldr	r3, [pc, #288]	; (8008214 <MX_FREERTOS_Init+0x1d4>)
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	9600      	str	r6, [sp, #0]
 80080f8:	2304      	movs	r3, #4
 80080fa:	22a0      	movs	r2, #160	; 0xa0
 80080fc:	4946      	ldr	r1, [pc, #280]	; (8008218 <MX_FREERTOS_Init+0x1d8>)
 80080fe:	0028      	movs	r0, r5
 8008100:	f007 f934 	bl	800f36c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",configMINIMAL_STACK_SIZE,(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8008104:	9403      	str	r4, [sp, #12]
 8008106:	9402      	str	r4, [sp, #8]
 8008108:	4b44      	ldr	r3, [pc, #272]	; (800821c <MX_FREERTOS_Init+0x1dc>)
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	9600      	str	r6, [sp, #0]
 800810e:	2305      	movs	r3, #5
 8008110:	22a0      	movs	r2, #160	; 0xa0
 8008112:	4943      	ldr	r1, [pc, #268]	; (8008220 <MX_FREERTOS_Init+0x1e0>)
 8008114:	0028      	movs	r0, r5
 8008116:	f007 f929 	bl	800f36c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",configMINIMAL_STACK_SIZE,(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 800811a:	9403      	str	r4, [sp, #12]
 800811c:	9402      	str	r4, [sp, #8]
 800811e:	4b41      	ldr	r3, [pc, #260]	; (8008224 <MX_FREERTOS_Init+0x1e4>)
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	9600      	str	r6, [sp, #0]
 8008124:	2306      	movs	r3, #6
 8008126:	22a0      	movs	r2, #160	; 0xa0
 8008128:	493f      	ldr	r1, [pc, #252]	; (8008228 <MX_FREERTOS_Init+0x1e8>)
 800812a:	0028      	movs	r0, r5
 800812c:	f007 f91e 	bl	800f36c <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1);
 8008130:	940f      	str	r4, [sp, #60]	; 0x3c
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8008132:	2101      	movs	r1, #1
 8008134:	a80f      	add	r0, sp, #60	; 0x3c
 8008136:	f006 fa36 	bl	800e5a6 <osSemaphoreCreate>
 800813a:	4e3c      	ldr	r6, [pc, #240]	; (800822c <MX_FREERTOS_Init+0x1ec>)
 800813c:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 800813e:	940e      	str	r4, [sp, #56]	; 0x38
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8008140:	2101      	movs	r1, #1
 8008142:	a80e      	add	r0, sp, #56	; 0x38
 8008144:	f006 fa2f 	bl	800e5a6 <osSemaphoreCreate>
 8008148:	4d39      	ldr	r5, [pc, #228]	; (8008230 <MX_FREERTOS_Init+0x1f0>)
 800814a:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3);
 800814c:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 800814e:	2101      	movs	r1, #1
 8008150:	a80d      	add	r0, sp, #52	; 0x34
 8008152:	f006 fa28 	bl	800e5a6 <osSemaphoreCreate>
 8008156:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8008158:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 800815a:	2101      	movs	r1, #1
 800815c:	a80c      	add	r0, sp, #48	; 0x30
 800815e:	f006 fa22 	bl	800e5a6 <osSemaphoreCreate>
 8008162:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5);
 8008164:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8008166:	2101      	movs	r1, #1
 8008168:	a80b      	add	r0, sp, #44	; 0x2c
 800816a:	f006 fa1c 	bl	800e5a6 <osSemaphoreCreate>
 800816e:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8008170:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8008172:	2101      	movs	r1, #1
 8008174:	a80a      	add	r0, sp, #40	; 0x28
 8008176:	f006 fa16 	bl	800e5a6 <osSemaphoreCreate>
 800817a:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7);
 800817c:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 800817e:	2101      	movs	r1, #1
 8008180:	a809      	add	r0, sp, #36	; 0x24
 8008182:	f006 fa10 	bl	800e5a6 <osSemaphoreCreate>
 8008186:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 8008188:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800818a:	2101      	movs	r1, #1
 800818c:	a808      	add	r0, sp, #32
 800818e:	f006 fa0a 	bl	800e5a6 <osSemaphoreCreate>
 8008192:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9);
 8008194:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8008196:	2101      	movs	r1, #1
 8008198:	a807      	add	r0, sp, #28
 800819a:	f006 fa04 	bl	800e5a6 <osSemaphoreCreate>
 800819e:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 80081a0:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 80081a2:	2101      	movs	r1, #1
 80081a4:	a806      	add	r0, sp, #24
 80081a6:	f006 f9fe 	bl	800e5a6 <osSemaphoreCreate>
 80081aa:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11);
 80081ac:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 80081ae:	2101      	movs	r1, #1
 80081b0:	a805      	add	r0, sp, #20
 80081b2:	f006 f9f8 	bl	800e5a6 <osSemaphoreCreate>
 80081b6:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12);
 80081b8:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 80081ba:	2101      	movs	r1, #1
 80081bc:	a804      	add	r0, sp, #16
 80081be:	f006 f9f2 	bl	800e5a6 <osSemaphoreCreate>
 80081c2:	61a8      	str	r0, [r5, #24]
}
 80081c4:	b010      	add	sp, #64	; 0x40
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	20001504 	.word	0x20001504
 80081cc:	0801cd74 	.word	0x0801cd74
 80081d0:	08007f85 	.word	0x08007f85
 80081d4:	200014e4 	.word	0x200014e4
 80081d8:	0801cd80 	.word	0x0801cd80
 80081dc:	08009b51 	.word	0x08009b51
 80081e0:	20001500 	.word	0x20001500
 80081e4:	0801cd8c 	.word	0x0801cd8c
 80081e8:	08013d37 	.word	0x08013d37
 80081ec:	2000150c 	.word	0x2000150c
 80081f0:	0801cd98 	.word	0x0801cd98
 80081f4:	0800526d 	.word	0x0800526d
 80081f8:	08009f21 	.word	0x08009f21
 80081fc:	200014e8 	.word	0x200014e8
 8008200:	0801cda0 	.word	0x0801cda0
 8008204:	200014ec 	.word	0x200014ec
 8008208:	0801cdac 	.word	0x0801cdac
 800820c:	200014f0 	.word	0x200014f0
 8008210:	0801cdb8 	.word	0x0801cdb8
 8008214:	200014f4 	.word	0x200014f4
 8008218:	0801cdc4 	.word	0x0801cdc4
 800821c:	200014f8 	.word	0x200014f8
 8008220:	0801cdd0 	.word	0x0801cdd0
 8008224:	200014fc 	.word	0x200014fc
 8008228:	0801cddc 	.word	0x0801cddc
 800822c:	20006b44 	.word	0x20006b44
 8008230:	20006b28 	.word	0x20006b28

08008234 <vMainConfigureTimerForRunTimeStats>:
	
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
 8008234:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008236:	4b04      	ldr	r3, [pc, #16]	; (8008248 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	4904      	ldr	r1, [pc, #16]	; (800824c <vMainConfigureTimerForRunTimeStats+0x18>)
 800823c:	f7f7 ff88 	bl	8000150 <__udivsi3>
 8008240:	4b03      	ldr	r3, [pc, #12]	; (8008250 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8008242:	6018      	str	r0, [r3, #0]
}
 8008244:	bd10      	pop	{r4, pc}
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	20000090 	.word	0x20000090
 800824c:	00002710 	.word	0x00002710
 8008250:	20001508 	.word	0x20001508

08008254 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8008254:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008256:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <ulMainGetRunTimeCounterValue+0x40>)
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	21fa      	movs	r1, #250	; 0xfa
 800825c:	0089      	lsls	r1, r1, #2
 800825e:	f7f7 ff77 	bl	8000150 <__udivsi3>
 8008262:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008264:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <ulMainGetRunTimeCounterValue+0x44>)
 8008266:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8008268:	f007 fa20 	bl	800f6ac <xTaskGetTickCountFromISR>
 800826c:	0003      	movs	r3, r0
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 800826e:	4a0b      	ldr	r2, [pc, #44]	; (800829c <ulMainGetRunTimeCounterValue+0x48>)
 8008270:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008272:	1b28      	subs	r0, r5, r4
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8008274:	0152      	lsls	r2, r2, #5
 8008276:	d503      	bpl.n	8008280 <ulMainGetRunTimeCounterValue+0x2c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8008278:	3301      	adds	r3, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800827a:	4a07      	ldr	r2, [pc, #28]	; (8008298 <ulMainGetRunTimeCounterValue+0x44>)
 800827c:	6810      	ldr	r0, [r2, #0]
 800827e:	1a28      	subs	r0, r5, r0
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8008280:	009c      	lsls	r4, r3, #2
 8008282:	18e4      	adds	r4, r4, r3
 8008284:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8008286:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <ulMainGetRunTimeCounterValue+0x4c>)
 8008288:	6819      	ldr	r1, [r3, #0]
 800828a:	f7f7 ff61 	bl	8000150 <__udivsi3>
 800828e:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8008290:	bd70      	pop	{r4, r5, r6, pc}
 8008292:	46c0      	nop			; (mov r8, r8)
 8008294:	20000090 	.word	0x20000090
 8008298:	e000e018 	.word	0xe000e018
 800829c:	e000ed04 	.word	0xe000ed04
 80082a0:	20001508 	.word	0x20001508

080082a4 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 80082a4:	4770      	bx	lr
	...

080082a8 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port){
 80082a8:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80082aa:	00c2      	lsls	r2, r0, #3
 80082ac:	1812      	adds	r2, r2, r0
 80082ae:	4b1b      	ldr	r3, [pc, #108]	; (800831c <CheckForTimedButtonPress+0x74>)
 80082b0:	189b      	adds	r3, r3, r2
 80082b2:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(pressCounter[port] == t1){
 80082b4:	0082      	lsls	r2, r0, #2
 80082b6:	4b1a      	ldr	r3, [pc, #104]	; (8008320 <CheckForTimedButtonPress+0x78>)
 80082b8:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 80082ba:	0163      	lsls	r3, r4, #5
 80082bc:	1b1b      	subs	r3, r3, r4
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	191b      	adds	r3, r3, r4
 80082c2:	00db      	lsls	r3, r3, #3
	if(pressCounter[port] == t1){
 80082c4:	4299      	cmp	r1, r3
 80082c6:	d01c      	beq.n	8008302 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80082c8:	00c2      	lsls	r2, r0, #3
 80082ca:	1812      	adds	r2, r2, r0
 80082cc:	4b13      	ldr	r3, [pc, #76]	; (800831c <CheckForTimedButtonPress+0x74>)
 80082ce:	189b      	adds	r3, r3, r2
 80082d0:	78dc      	ldrb	r4, [r3, #3]
	t2 *=1000;
 80082d2:	0163      	lsls	r3, r4, #5
 80082d4:	1b1b      	subs	r3, r3, r4
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	191b      	adds	r3, r3, r4
 80082da:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X1_SEC;
	}
	else if(pressCounter[port] == t2){
 80082dc:	4299      	cmp	r1, r3
 80082de:	d017      	beq.n	8008310 <CheckForTimedButtonPress+0x68>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80082e0:	00c2      	lsls	r2, r0, #3
 80082e2:	1812      	adds	r2, r2, r0
 80082e4:	4b0d      	ldr	r3, [pc, #52]	; (800831c <CheckForTimedButtonPress+0x74>)
 80082e6:	189b      	adds	r3, r3, r2
 80082e8:	791c      	ldrb	r4, [r3, #4]
	t3 *=1000;
 80082ea:	0163      	lsls	r3, r4, #5
 80082ec:	1b1b      	subs	r3, r3, r4
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	191b      	adds	r3, r3, r4
 80082f2:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X2_SEC;
	}
	else if(pressCounter[port] == t3){
 80082f4:	4299      	cmp	r1, r3
 80082f6:	d109      	bne.n	800830c <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X2_SEC;
 80082f8:	0010      	movs	r0, r2
 80082fa:	4b08      	ldr	r3, [pc, #32]	; (800831c <CheckForTimedButtonPress+0x74>)
 80082fc:	220a      	movs	r2, #10
 80082fe:	54c2      	strb	r2, [r0, r3]
 8008300:	e004      	b.n	800830c <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X1_SEC;
 8008302:	00c3      	lsls	r3, r0, #3
 8008304:	1818      	adds	r0, r3, r0
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <CheckForTimedButtonPress+0x74>)
 8008308:	2209      	movs	r2, #9
 800830a:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 800830c:	2000      	movs	r0, #0
 800830e:	bd10      	pop	{r4, pc}
		button[port].state =PRESSED_FOR_X2_SEC;
 8008310:	0010      	movs	r0, r2
 8008312:	4b02      	ldr	r3, [pc, #8]	; (800831c <CheckForTimedButtonPress+0x74>)
 8008314:	220a      	movs	r2, #10
 8008316:	54c2      	strb	r2, [r0, r3]
 8008318:	e7f8      	b.n	800830c <CheckForTimedButtonPress+0x64>
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	20001524 	.word	0x20001524
 8008320:	20001578 	.word	0x20001578

08008324 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port){
 8008324:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008326:	00c2      	lsls	r2, r0, #3
 8008328:	1812      	adds	r2, r2, r0
 800832a:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <CheckForTimedButtonRelease+0x74>)
 800832c:	189b      	adds	r3, r3, r2
 800832e:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(releaseCounter[port] == t1){
 8008330:	0082      	lsls	r2, r0, #2
 8008332:	4b1a      	ldr	r3, [pc, #104]	; (800839c <CheckForTimedButtonRelease+0x78>)
 8008334:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 8008336:	0163      	lsls	r3, r4, #5
 8008338:	1b1b      	subs	r3, r3, r4
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	191b      	adds	r3, r3, r4
 800833e:	00db      	lsls	r3, r3, #3
	if(releaseCounter[port] == t1){
 8008340:	4299      	cmp	r1, r3
 8008342:	d01c      	beq.n	800837e <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008344:	00c2      	lsls	r2, r0, #3
 8008346:	1812      	adds	r2, r2, r0
 8008348:	4b13      	ldr	r3, [pc, #76]	; (8008398 <CheckForTimedButtonRelease+0x74>)
 800834a:	189b      	adds	r3, r3, r2
 800834c:	799c      	ldrb	r4, [r3, #6]
	t2 *=1000;
 800834e:	0163      	lsls	r3, r4, #5
 8008350:	1b1b      	subs	r3, r3, r4
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	191b      	adds	r3, r3, r4
 8008356:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y1_SEC;
	}
	else if(releaseCounter[port] == t2){
 8008358:	4299      	cmp	r1, r3
 800835a:	d017      	beq.n	800838c <CheckForTimedButtonRelease+0x68>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 800835c:	00c2      	lsls	r2, r0, #3
 800835e:	1812      	adds	r2, r2, r0
 8008360:	4b0d      	ldr	r3, [pc, #52]	; (8008398 <CheckForTimedButtonRelease+0x74>)
 8008362:	189b      	adds	r3, r3, r2
 8008364:	79dc      	ldrb	r4, [r3, #7]
	t3 *=1000;
 8008366:	0163      	lsls	r3, r4, #5
 8008368:	1b1b      	subs	r3, r3, r4
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	191b      	adds	r3, r3, r4
 800836e:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y2_SEC;
	}
	else if(releaseCounter[port] == t3){
 8008370:	4299      	cmp	r1, r3
 8008372:	d109      	bne.n	8008388 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008374:	0010      	movs	r0, r2
 8008376:	4b08      	ldr	r3, [pc, #32]	; (8008398 <CheckForTimedButtonRelease+0x74>)
 8008378:	220d      	movs	r2, #13
 800837a:	54c2      	strb	r2, [r0, r3]
 800837c:	e004      	b.n	8008388 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y1_SEC;
 800837e:	00c3      	lsls	r3, r0, #3
 8008380:	1818      	adds	r0, r3, r0
 8008382:	4b05      	ldr	r3, [pc, #20]	; (8008398 <CheckForTimedButtonRelease+0x74>)
 8008384:	220c      	movs	r2, #12
 8008386:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008388:	2000      	movs	r0, #0
 800838a:	bd10      	pop	{r4, pc}
		button[port].state =RELEASED_FOR_Y2_SEC;
 800838c:	0010      	movs	r0, r2
 800838e:	4b02      	ldr	r3, [pc, #8]	; (8008398 <CheckForTimedButtonRelease+0x74>)
 8008390:	220d      	movs	r2, #13
 8008392:	54c2      	strb	r2, [r0, r3]
 8008394:	e7f8      	b.n	8008388 <CheckForTimedButtonRelease+0x64>
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	20001524 	.word	0x20001524
 800839c:	20001594 	.word	0x20001594

080083a0 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 80083a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a2:	b08d      	sub	sp, #52	; 0x34
 80083a4:	0006      	movs	r6, r0
 80083a6:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 80083a8:	4b41      	ldr	r3, [pc, #260]	; (80084b0 <AddPortButton+0x110>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d157      	bne.n	8008460 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 80083b0:	4b40      	ldr	r3, [pc, #256]	; (80084b4 <AddPortButton+0x114>)
 80083b2:	2204      	movs	r2, #4
 80083b4:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if(BOS_initialized){
 80083b6:	4b3e      	ldr	r3, [pc, #248]	; (80084b0 <AddPortButton+0x110>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d15a      	bne.n	8008474 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 80083be:	2512      	movs	r5, #18
 80083c0:	446d      	add	r5, sp
 80083c2:	af04      	add	r7, sp, #16
 80083c4:	9700      	str	r7, [sp, #0]
 80083c6:	ab05      	add	r3, sp, #20
 80083c8:	002a      	movs	r2, r5
 80083ca:	a906      	add	r1, sp, #24
 80083cc:	0020      	movs	r0, r4
 80083ce:	f005 fa05 	bl	800d7dc <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 80083d2:	882b      	ldrh	r3, [r5, #0]
 80083d4:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083d6:	2301      	movs	r3, #1
 80083d8:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083da:	2500      	movs	r5, #0
 80083dc:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80083de:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 80083e0:	a907      	add	r1, sp, #28
 80083e2:	9806      	ldr	r0, [sp, #24]
 80083e4:	f009 fd9e 	bl	8011f24 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 80083e8:	883b      	ldrh	r3, [r7, #0]
 80083ea:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083ec:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80083ee:	2302      	movs	r3, #2
 80083f0:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 80083f2:	a907      	add	r1, sp, #28
 80083f4:	9805      	ldr	r0, [sp, #20]
 80083f6:	f009 fd95 	bl	8011f24 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 80083fa:	00e2      	lsls	r2, r4, #3
 80083fc:	1912      	adds	r2, r2, r4
 80083fe:	4b2e      	ldr	r3, [pc, #184]	; (80084b8 <AddPortButton+0x118>)
 8008400:	189b      	adds	r3, r3, r2
 8008402:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008404:	0025      	movs	r5, r4
 8008406:	353a      	adds	r5, #58	; 0x3a
 8008408:	00ad      	lsls	r5, r5, #2
 800840a:	210e      	movs	r1, #14
 800840c:	4469      	add	r1, sp
 800840e:	0028      	movs	r0, r5
 8008410:	f7ff faaa 	bl	8007968 <EE_ReadVariable>
	if(!res)											// This variable exists
 8008414:	2800      	cmp	r0, #0
 8008416:	d133      	bne.n	8008480 <AddPortButton+0xe0>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 8008418:	230e      	movs	r3, #14
 800841a:	446b      	add	r3, sp
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	0a1a      	lsrs	r2, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 8008420:	0b1b      	lsrs	r3, r3, #12
 8008422:	42a3      	cmp	r3, r4
 8008424:	d103      	bne.n	800842e <AddPortButton+0x8e>
 8008426:	230f      	movs	r3, #15
 8008428:	4013      	ands	r3, r2
 800842a:	42b3      	cmp	r3, r6
 800842c:	d015      	beq.n	800845a <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 800842e:	0324      	lsls	r4, r4, #12
 8008430:	0231      	lsls	r1, r6, #8
 8008432:	4321      	orrs	r1, r4
 8008434:	b289      	uxth	r1, r1
 8008436:	230e      	movs	r3, #14
 8008438:	446b      	add	r3, sp
 800843a:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 800843c:	0028      	movs	r0, r5
 800843e:	f7ff fabf 	bl	80079c0 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008442:	1c68      	adds	r0, r5, #1
 8008444:	2100      	movs	r1, #0
 8008446:	f7ff fabb 	bl	80079c0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800844a:	1ca8      	adds	r0, r5, #2
 800844c:	2100      	movs	r1, #0
 800844e:	f7ff fab7 	bl	80079c0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008452:	1ce8      	adds	r0, r5, #3
 8008454:	2100      	movs	r1, #0
 8008456:	f7ff fab3 	bl	80079c0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	return result;
}
 800845a:	2000      	movs	r0, #0
 800845c:	b00d      	add	sp, #52	; 0x34
 800845e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 8008460:	008d      	lsls	r5, r1, #2
 8008462:	4b16      	ldr	r3, [pc, #88]	; (80084bc <AddPortButton+0x11c>)
 8008464:	58e8      	ldr	r0, [r5, r3]
 8008466:	f006 f8e3 	bl	800e630 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800846a:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <AddPortButton+0x120>)
 800846c:	58e8      	ldr	r0, [r5, r3]
 800846e:	f006 f8df 	bl	800e630 <osSemaphoreRelease>
 8008472:	e79d      	b.n	80083b0 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008474:	0020      	movs	r0, r4
 8008476:	f005 ff3d 	bl	800e2f4 <GetUart>
 800847a:	f00a fea4 	bl	80131c6 <HAL_UART_DeInit>
 800847e:	e79e      	b.n	80083be <AddPortButton+0x1e>
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 8008480:	0324      	lsls	r4, r4, #12
 8008482:	0231      	lsls	r1, r6, #8
 8008484:	4321      	orrs	r1, r4
 8008486:	b289      	uxth	r1, r1
 8008488:	230e      	movs	r3, #14
 800848a:	446b      	add	r3, sp
 800848c:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 800848e:	0028      	movs	r0, r5
 8008490:	f7ff fa96 	bl	80079c0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008494:	1c68      	adds	r0, r5, #1
 8008496:	2100      	movs	r1, #0
 8008498:	f7ff fa92 	bl	80079c0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800849c:	1ca8      	adds	r0, r5, #2
 800849e:	2100      	movs	r1, #0
 80084a0:	f7ff fa8e 	bl	80079c0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80084a4:	1ce8      	adds	r0, r5, #3
 80084a6:	2100      	movs	r1, #0
 80084a8:	f7ff fa8a 	bl	80079c0 <EE_WriteVariable>
 80084ac:	e7d5      	b.n	800845a <AddPortButton+0xba>
 80084ae:	46c0      	nop			; (mov r8, r8)
 80084b0:	20000a7d 	.word	0x20000a7d
 80084b4:	20001100 	.word	0x20001100
 80084b8:	20001524 	.word	0x20001524
 80084bc:	20006b44 	.word	0x20006b44
 80084c0:	20006b28 	.word	0x20006b28

080084c4 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 80084ca:	4837      	ldr	r0, [pc, #220]	; (80085a8 <RemovePortButton+0xe4>)
 80084cc:	00e9      	lsls	r1, r5, #3
 80084ce:	1949      	adds	r1, r1, r5
 80084d0:	1842      	adds	r2, r0, r1
 80084d2:	2300      	movs	r3, #0
 80084d4:	7053      	strb	r3, [r2, #1]
	button[port].state =NONE;
 80084d6:	540b      	strb	r3, [r1, r0]
	button[port].events =0;
 80084d8:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 80084da:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 80084dc:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 80084de:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 80084e0:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 80084e2:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 80084e4:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80084e6:	002c      	movs	r4, r5
 80084e8:	343a      	adds	r4, #58	; 0x3a
 80084ea:	00a4      	lsls	r4, r4, #2
 80084ec:	466b      	mov	r3, sp
 80084ee:	1d99      	adds	r1, r3, #6
 80084f0:	0020      	movs	r0, r4
 80084f2:	f7ff fa39 	bl	8007968 <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d02b      	beq.n	8008552 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 80084fa:	0028      	movs	r0, r5
 80084fc:	f005 fefa 	bl	800e2f4 <GetUart>
 8008500:	0006      	movs	r6, r0
	
	if(huart->Instance == USART1){
 8008502:	6803      	ldr	r3, [r0, #0]
 8008504:	4a29      	ldr	r2, [pc, #164]	; (80085ac <RemovePortButton+0xe8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d034      	beq.n	8008574 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 800850a:	4a29      	ldr	r2, [pc, #164]	; (80085b0 <RemovePortButton+0xec>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d035      	beq.n	800857c <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 8008510:	4a28      	ldr	r2, [pc, #160]	; (80085b4 <RemovePortButton+0xf0>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d036      	beq.n	8008584 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 8008516:	4a28      	ldr	r2, [pc, #160]	; (80085b8 <RemovePortButton+0xf4>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d037      	beq.n	800858c <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 800851c:	4a27      	ldr	r2, [pc, #156]	; (80085bc <RemovePortButton+0xf8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d038      	beq.n	8008594 <RemovePortButton+0xd0>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 8008522:	4a27      	ldr	r2, [pc, #156]	; (80085c0 <RemovePortButton+0xfc>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d039      	beq.n	800859c <RemovePortButton+0xd8>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 8008528:	4a26      	ldr	r2, [pc, #152]	; (80085c4 <RemovePortButton+0x100>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d03a      	beq.n	80085a4 <RemovePortButton+0xe0>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 800852e:	4a26      	ldr	r2, [pc, #152]	; (80085c8 <RemovePortButton+0x104>)
 8008530:	4694      	mov	ip, r2
 8008532:	4463      	add	r3, ip
 8008534:	1e5c      	subs	r4, r3, #1
 8008536:	41a3      	sbcs	r3, r4
 8008538:	425c      	negs	r4, r3
 800853a:	b2e4      	uxtb	r4, r4
	}
	else
		result =BOS_ERROR;
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 800853c:	4b23      	ldr	r3, [pc, #140]	; (80085cc <RemovePortButton+0x108>)
 800853e:	2200      	movs	r2, #0
 8008540:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 8008542:	3201      	adds	r2, #1
 8008544:	4922      	ldr	r1, [pc, #136]	; (80085d0 <RemovePortButton+0x10c>)
 8008546:	0030      	movs	r0, r6
 8008548:	f00a fe96 	bl	8013278 <HAL_UART_Receive_IT>
	
	return result;
}
 800854c:	0020      	movs	r0, r4
 800854e:	b002      	add	sp, #8
 8008550:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 8008552:	2100      	movs	r1, #0
 8008554:	0020      	movs	r0, r4
 8008556:	f7ff fa33 	bl	80079c0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 800855a:	1c60      	adds	r0, r4, #1
 800855c:	2100      	movs	r1, #0
 800855e:	f7ff fa2f 	bl	80079c0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 8008562:	1ca0      	adds	r0, r4, #2
 8008564:	2100      	movs	r1, #0
 8008566:	f7ff fa2b 	bl	80079c0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 800856a:	1ce0      	adds	r0, r4, #3
 800856c:	2100      	movs	r1, #0
 800856e:	f7ff fa27 	bl	80079c0 <EE_WriteVariable>
 8008572:	e7c2      	b.n	80084fa <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008574:	f005 fcea 	bl	800df4c <MX_USART1_UART_Init>
	BOS_Status result =BOS_OK;
 8008578:	2400      	movs	r4, #0
 800857a:	e7df      	b.n	800853c <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800857c:	f005 fcfe 	bl	800df7c <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 8008580:	2400      	movs	r4, #0
 8008582:	e7db      	b.n	800853c <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008584:	f005 fd12 	bl	800dfac <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 8008588:	2400      	movs	r4, #0
 800858a:	e7d7      	b.n	800853c <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800858c:	f005 fd26 	bl	800dfdc <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 8008590:	2400      	movs	r4, #0
 8008592:	e7d3      	b.n	800853c <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008594:	f005 fd3a 	bl	800e00c <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 8008598:	2400      	movs	r4, #0
 800859a:	e7cf      	b.n	800853c <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800859c:	f005 fd4e 	bl	800e03c <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 80085a0:	2400      	movs	r4, #0
 80085a2:	e7cb      	b.n	800853c <RemovePortButton+0x78>
 80085a4:	2400      	movs	r4, #0
 80085a6:	e7c9      	b.n	800853c <RemovePortButton+0x78>
 80085a8:	20001524 	.word	0x20001524
 80085ac:	40013800 	.word	0x40013800
 80085b0:	40004400 	.word	0x40004400
 80085b4:	40004800 	.word	0x40004800
 80085b8:	40004c00 	.word	0x40004c00
 80085bc:	40005000 	.word	0x40005000
 80085c0:	40011400 	.word	0x40011400
 80085c4:	40011800 	.word	0x40011800
 80085c8:	bffee400 	.word	0xbffee400
 80085cc:	20001100 	.word	0x20001100
 80085d0:	20000e60 	.word	0x20000e60

080085d4 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 80085d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085d6:	46de      	mov	lr, fp
 80085d8:	4657      	mov	r7, sl
 80085da:	464e      	mov	r6, r9
 80085dc:	4645      	mov	r5, r8
 80085de:	b5e0      	push	{r5, r6, r7, lr}
 80085e0:	b085      	sub	sp, #20
 80085e2:	0005      	movs	r5, r0
 80085e4:	469c      	mov	ip, r3
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	ab0e      	add	r3, sp, #56	; 0x38
 80085ea:	781e      	ldrb	r6, [r3, #0]
 80085ec:	ab0f      	add	r3, sp, #60	; 0x3c
 80085ee:	781f      	ldrb	r7, [r3, #0]
 80085f0:	ab10      	add	r3, sp, #64	; 0x40
 80085f2:	7818      	ldrb	r0, [r3, #0]
 80085f4:	4681      	mov	r9, r0
 80085f6:	ab11      	add	r3, sp, #68	; 0x44
 80085f8:	7818      	ldrb	r0, [r3, #0]
 80085fa:	4682      	mov	sl, r0
 80085fc:	ab12      	add	r3, sp, #72	; 0x48
 80085fe:	7818      	ldrb	r0, [r3, #0]
 8008600:	4680      	mov	r8, r0
 8008602:	ab13      	add	r3, sp, #76	; 0x4c
 8008604:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 8008606:	00ec      	lsls	r4, r5, #3
 8008608:	1964      	adds	r4, r4, r5
 800860a:	4bcd      	ldr	r3, [pc, #820]	; (8008940 <SetButtonEvents+0x36c>)
 800860c:	191b      	adds	r3, r3, r4
 800860e:	785b      	ldrb	r3, [r3, #1]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d100      	bne.n	8008616 <SetButtonEvents+0x42>
 8008614:	e08c      	b.n	8008730 <SetButtonEvents+0x15c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8008616:	00ec      	lsls	r4, r5, #3
 8008618:	1964      	adds	r4, r4, r5
 800861a:	4bc9      	ldr	r3, [pc, #804]	; (8008940 <SetButtonEvents+0x36c>)
 800861c:	191b      	adds	r3, r3, r4
 800861e:	4664      	mov	r4, ip
 8008620:	709c      	strb	r4, [r3, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 8008622:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 8008624:	711f      	strb	r7, [r3, #4]
	button[port].releasedY1Sec =released_y1sec;
 8008626:	464c      	mov	r4, r9
 8008628:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec =released_y2sec;
 800862a:	4654      	mov	r4, sl
 800862c:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec =released_y3sec;
 800862e:	4644      	mov	r4, r8
 8008630:	71dc      	strb	r4, [r3, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 8008632:	2801      	cmp	r0, #1
 8008634:	d100      	bne.n	8008638 <SetButtonEvents+0x64>
 8008636:	e0ec      	b.n	8008812 <SetButtonEvents+0x23e>
 8008638:	2800      	cmp	r0, #0
 800863a:	d000      	beq.n	800863e <SetButtonEvents+0x6a>
 800863c:	e124      	b.n	8008888 <SetButtonEvents+0x2b4>
 800863e:	2900      	cmp	r1, #0
 8008640:	d000      	beq.n	8008644 <SetButtonEvents+0x70>
 8008642:	e170      	b.n	8008926 <SetButtonEvents+0x352>
		button[port].events |= BUTTON_EVENT_CLICKED;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
 8008644:	00e9      	lsls	r1, r5, #3
 8008646:	1949      	adds	r1, r1, r5
 8008648:	4bbd      	ldr	r3, [pc, #756]	; (8008940 <SetButtonEvents+0x36c>)
 800864a:	185b      	adds	r3, r3, r1
 800864c:	7a19      	ldrb	r1, [r3, #8]
 800864e:	2401      	movs	r4, #1
 8008650:	43a1      	bics	r1, r4
 8008652:	7219      	strb	r1, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008654:	2a00      	cmp	r2, #0
 8008656:	d100      	bne.n	800865a <SetButtonEvents+0x86>
 8008658:	e0c3      	b.n	80087e2 <SetButtonEvents+0x20e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800865a:	00ea      	lsls	r2, r5, #3
 800865c:	1952      	adds	r2, r2, r5
 800865e:	4bb8      	ldr	r3, [pc, #736]	; (8008940 <SetButtonEvents+0x36c>)
 8008660:	189b      	adds	r3, r3, r2
 8008662:	7a1a      	ldrb	r2, [r3, #8]
 8008664:	2102      	movs	r1, #2
 8008666:	430a      	orrs	r2, r1
 8008668:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 800866a:	2801      	cmp	r0, #1
 800866c:	d100      	bne.n	8008670 <SetButtonEvents+0x9c>
 800866e:	e0da      	b.n	8008826 <SetButtonEvents+0x252>
 8008670:	2800      	cmp	r0, #0
 8008672:	d100      	bne.n	8008676 <SetButtonEvents+0xa2>
 8008674:	e0bd      	b.n	80087f2 <SetButtonEvents+0x21e>
 8008676:	e107      	b.n	8008888 <SetButtonEvents+0x2b4>
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008678:	00ea      	lsls	r2, r5, #3
 800867a:	1952      	adds	r2, r2, r5
 800867c:	4bb0      	ldr	r3, [pc, #704]	; (8008940 <SetButtonEvents+0x36c>)
 800867e:	189b      	adds	r3, r3, r2
 8008680:	7a1a      	ldrb	r2, [r3, #8]
 8008682:	2110      	movs	r1, #16
 8008684:	430a      	orrs	r2, r1
 8008686:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 8008688:	2801      	cmp	r0, #1
 800868a:	d100      	bne.n	800868e <SetButtonEvents+0xba>
 800868c:	e0e3      	b.n	8008856 <SetButtonEvents+0x282>
 800868e:	2800      	cmp	r0, #0
 8008690:	d000      	beq.n	8008694 <SetButtonEvents+0xc0>
 8008692:	e0f9      	b.n	8008888 <SetButtonEvents+0x2b4>
 8008694:	464b      	mov	r3, r9
 8008696:	2b00      	cmp	r3, #0
 8008698:	d063      	beq.n	8008762 <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800869a:	00ea      	lsls	r2, r5, #3
 800869c:	1952      	adds	r2, r2, r5
 800869e:	4ba8      	ldr	r3, [pc, #672]	; (8008940 <SetButtonEvents+0x36c>)
 80086a0:	189b      	adds	r3, r3, r2
 80086a2:	7a1a      	ldrb	r2, [r3, #8]
 80086a4:	2120      	movs	r1, #32
 80086a6:	430a      	orrs	r2, r1
 80086a8:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 80086aa:	e00a      	b.n	80086c2 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80086ac:	00ea      	lsls	r2, r5, #3
 80086ae:	1952      	adds	r2, r2, r5
 80086b0:	4ba3      	ldr	r3, [pc, #652]	; (8008940 <SetButtonEvents+0x36c>)
 80086b2:	189b      	adds	r3, r3, r2
 80086b4:	7a1a      	ldrb	r2, [r3, #8]
 80086b6:	2120      	movs	r1, #32
 80086b8:	430a      	orrs	r2, r1
 80086ba:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 80086bc:	2801      	cmp	r0, #1
 80086be:	d100      	bne.n	80086c2 <SetButtonEvents+0xee>
 80086c0:	e0d1      	b.n	8008866 <SetButtonEvents+0x292>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d000      	beq.n	80086c8 <SetButtonEvents+0xf4>
 80086c6:	e0df      	b.n	8008888 <SetButtonEvents+0x2b4>
 80086c8:	4653      	mov	r3, sl
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d054      	beq.n	8008778 <SetButtonEvents+0x1a4>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80086ce:	00ea      	lsls	r2, r5, #3
 80086d0:	1952      	adds	r2, r2, r5
 80086d2:	4b9b      	ldr	r3, [pc, #620]	; (8008940 <SetButtonEvents+0x36c>)
 80086d4:	189b      	adds	r3, r3, r2
 80086d6:	7a1a      	ldrb	r2, [r3, #8]
 80086d8:	2140      	movs	r1, #64	; 0x40
 80086da:	430a      	orrs	r2, r1
 80086dc:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 80086de:	e00a      	b.n	80086f6 <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80086e0:	00ea      	lsls	r2, r5, #3
 80086e2:	1952      	adds	r2, r2, r5
 80086e4:	4b96      	ldr	r3, [pc, #600]	; (8008940 <SetButtonEvents+0x36c>)
 80086e6:	189b      	adds	r3, r3, r2
 80086e8:	7a1a      	ldrb	r2, [r3, #8]
 80086ea:	2140      	movs	r1, #64	; 0x40
 80086ec:	430a      	orrs	r2, r1
 80086ee:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 80086f0:	2801      	cmp	r0, #1
 80086f2:	d100      	bne.n	80086f6 <SetButtonEvents+0x122>
 80086f4:	e0bf      	b.n	8008876 <SetButtonEvents+0x2a2>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d046      	beq.n	8008788 <SetButtonEvents+0x1b4>
 80086fa:	e0c5      	b.n	8008888 <SetButtonEvents+0x2b4>
	if(!res)											// This variable exists
	{
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 80086fc:	0a19      	lsrs	r1, r3, #8
 80086fe:	0209      	lsls	r1, r1, #8
 8008700:	4301      	orrs	r1, r0
 8008702:	ab02      	add	r3, sp, #8
 8008704:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008706:	0020      	movs	r0, r4
 8008708:	f7ff f95a 	bl	80079c0 <EE_WriteVariable>
 800870c:	e0d3      	b.n	80088b6 <SetButtonEvents+0x2e2>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 800870e:	464b      	mov	r3, r9
 8008710:	4319      	orrs	r1, r3
 8008712:	4658      	mov	r0, fp
 8008714:	f7ff f954 	bl	80079c0 <EE_WriteVariable>
 8008718:	e0dd      	b.n	80088d6 <SetButtonEvents+0x302>
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 800871a:	0019      	movs	r1, r3
 800871c:	0028      	movs	r0, r5
 800871e:	f7ff f94f 	bl	80079c0 <EE_WriteVariable>
 8008722:	e0ea      	b.n	80088fa <SetButtonEvents+0x326>
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 8008724:	0019      	movs	r1, r3
 8008726:	0020      	movs	r0, r4
 8008728:	f7ff f94a 	bl	80079c0 <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
 800872c:	2000      	movs	r0, #0
 800872e:	e0f3      	b.n	8008918 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008730:	200b      	movs	r0, #11
 8008732:	e0f1      	b.n	8008918 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008734:	200b      	movs	r0, #11
 8008736:	e0ef      	b.n	8008918 <SetButtonEvents+0x344>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008738:	00ea      	lsls	r2, r5, #3
 800873a:	1952      	adds	r2, r2, r5
 800873c:	4b80      	ldr	r3, [pc, #512]	; (8008940 <SetButtonEvents+0x36c>)
 800873e:	189b      	adds	r3, r3, r2
 8008740:	7a1a      	ldrb	r2, [r3, #8]
 8008742:	2108      	movs	r1, #8
 8008744:	438a      	bics	r2, r1
 8008746:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 8008748:	2f00      	cmp	r7, #0
 800874a:	d195      	bne.n	8008678 <SetButtonEvents+0xa4>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800874c:	00ea      	lsls	r2, r5, #3
 800874e:	1952      	adds	r2, r2, r5
 8008750:	4b7b      	ldr	r3, [pc, #492]	; (8008940 <SetButtonEvents+0x36c>)
 8008752:	189b      	adds	r3, r3, r2
 8008754:	7a1a      	ldrb	r2, [r3, #8]
 8008756:	2110      	movs	r1, #16
 8008758:	438a      	bics	r2, r1
 800875a:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800875c:	464b      	mov	r3, r9
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1a4      	bne.n	80086ac <SetButtonEvents+0xd8>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008762:	00ea      	lsls	r2, r5, #3
 8008764:	1952      	adds	r2, r2, r5
 8008766:	4b76      	ldr	r3, [pc, #472]	; (8008940 <SetButtonEvents+0x36c>)
 8008768:	189b      	adds	r3, r3, r2
 800876a:	7a1a      	ldrb	r2, [r3, #8]
 800876c:	2120      	movs	r1, #32
 800876e:	438a      	bics	r2, r1
 8008770:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008772:	4653      	mov	r3, sl
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1b3      	bne.n	80086e0 <SetButtonEvents+0x10c>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008778:	00ea      	lsls	r2, r5, #3
 800877a:	1952      	adds	r2, r2, r5
 800877c:	4b70      	ldr	r3, [pc, #448]	; (8008940 <SetButtonEvents+0x36c>)
 800877e:	189b      	adds	r3, r3, r2
 8008780:	7a1a      	ldrb	r2, [r3, #8]
 8008782:	2140      	movs	r1, #64	; 0x40
 8008784:	438a      	bics	r2, r1
 8008786:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008788:	4643      	mov	r3, r8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d173      	bne.n	8008876 <SetButtonEvents+0x2a2>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800878e:	00ea      	lsls	r2, r5, #3
 8008790:	1952      	adds	r2, r2, r5
 8008792:	4b6b      	ldr	r3, [pc, #428]	; (8008940 <SetButtonEvents+0x36c>)
 8008794:	189b      	adds	r3, r3, r2
 8008796:	7a19      	ldrb	r1, [r3, #8]
 8008798:	227f      	movs	r2, #127	; 0x7f
 800879a:	400a      	ands	r2, r1
 800879c:	721a      	strb	r2, [r3, #8]
 800879e:	e073      	b.n	8008888 <SetButtonEvents+0x2b4>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80087a0:	00ea      	lsls	r2, r5, #3
 80087a2:	1952      	adds	r2, r2, r5
 80087a4:	4b66      	ldr	r3, [pc, #408]	; (8008940 <SetButtonEvents+0x36c>)
 80087a6:	189b      	adds	r3, r3, r2
 80087a8:	7a1a      	ldrb	r2, [r3, #8]
 80087aa:	2104      	movs	r1, #4
 80087ac:	438a      	bics	r2, r1
 80087ae:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 80087b0:	2e00      	cmp	r6, #0
 80087b2:	d0c1      	beq.n	8008738 <SetButtonEvents+0x164>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80087b4:	00ea      	lsls	r2, r5, #3
 80087b6:	1952      	adds	r2, r2, r5
 80087b8:	4b61      	ldr	r3, [pc, #388]	; (8008940 <SetButtonEvents+0x36c>)
 80087ba:	189b      	adds	r3, r3, r2
 80087bc:	7a1a      	ldrb	r2, [r3, #8]
 80087be:	2108      	movs	r1, #8
 80087c0:	430a      	orrs	r2, r1
 80087c2:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 80087c4:	2801      	cmp	r0, #1
 80087c6:	d03e      	beq.n	8008846 <SetButtonEvents+0x272>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d15d      	bne.n	8008888 <SetButtonEvents+0x2b4>
 80087cc:	2f00      	cmp	r7, #0
 80087ce:	d0bd      	beq.n	800874c <SetButtonEvents+0x178>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80087d0:	00ea      	lsls	r2, r5, #3
 80087d2:	1952      	adds	r2, r2, r5
 80087d4:	4b5a      	ldr	r3, [pc, #360]	; (8008940 <SetButtonEvents+0x36c>)
 80087d6:	189b      	adds	r3, r3, r2
 80087d8:	7a1a      	ldrb	r2, [r3, #8]
 80087da:	2110      	movs	r1, #16
 80087dc:	430a      	orrs	r2, r1
 80087de:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 80087e0:	e755      	b.n	800868e <SetButtonEvents+0xba>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 80087e2:	00ea      	lsls	r2, r5, #3
 80087e4:	1952      	adds	r2, r2, r5
 80087e6:	4b56      	ldr	r3, [pc, #344]	; (8008940 <SetButtonEvents+0x36c>)
 80087e8:	189b      	adds	r3, r3, r2
 80087ea:	7a1a      	ldrb	r2, [r3, #8]
 80087ec:	2102      	movs	r1, #2
 80087ee:	438a      	bics	r2, r1
 80087f0:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 80087f2:	9b01      	ldr	r3, [sp, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0d3      	beq.n	80087a0 <SetButtonEvents+0x1cc>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80087f8:	00ea      	lsls	r2, r5, #3
 80087fa:	1952      	adds	r2, r2, r5
 80087fc:	4b50      	ldr	r3, [pc, #320]	; (8008940 <SetButtonEvents+0x36c>)
 80087fe:	189b      	adds	r3, r3, r2
 8008800:	7a1a      	ldrb	r2, [r3, #8]
 8008802:	2104      	movs	r1, #4
 8008804:	430a      	orrs	r2, r1
 8008806:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008808:	2801      	cmp	r0, #1
 800880a:	d014      	beq.n	8008836 <SetButtonEvents+0x262>
 800880c:	2800      	cmp	r0, #0
 800880e:	d0cf      	beq.n	80087b0 <SetButtonEvents+0x1dc>
 8008810:	e03a      	b.n	8008888 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008812:	00eb      	lsls	r3, r5, #3
 8008814:	195b      	adds	r3, r3, r5
 8008816:	4a4a      	ldr	r2, [pc, #296]	; (8008940 <SetButtonEvents+0x36c>)
 8008818:	18d2      	adds	r2, r2, r3
 800881a:	7a13      	ldrb	r3, [r2, #8]
 800881c:	2101      	movs	r1, #1
 800881e:	430b      	orrs	r3, r1
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008820:	2102      	movs	r1, #2
 8008822:	430b      	orrs	r3, r1
 8008824:	7213      	strb	r3, [r2, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008826:	00ea      	lsls	r2, r5, #3
 8008828:	1952      	adds	r2, r2, r5
 800882a:	4b45      	ldr	r3, [pc, #276]	; (8008940 <SetButtonEvents+0x36c>)
 800882c:	189b      	adds	r3, r3, r2
 800882e:	7a1a      	ldrb	r2, [r3, #8]
 8008830:	2104      	movs	r1, #4
 8008832:	430a      	orrs	r2, r1
 8008834:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008836:	00ea      	lsls	r2, r5, #3
 8008838:	1952      	adds	r2, r2, r5
 800883a:	4b41      	ldr	r3, [pc, #260]	; (8008940 <SetButtonEvents+0x36c>)
 800883c:	189b      	adds	r3, r3, r2
 800883e:	7a1a      	ldrb	r2, [r3, #8]
 8008840:	2108      	movs	r1, #8
 8008842:	430a      	orrs	r2, r1
 8008844:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008846:	00ea      	lsls	r2, r5, #3
 8008848:	1952      	adds	r2, r2, r5
 800884a:	4b3d      	ldr	r3, [pc, #244]	; (8008940 <SetButtonEvents+0x36c>)
 800884c:	189b      	adds	r3, r3, r2
 800884e:	7a1a      	ldrb	r2, [r3, #8]
 8008850:	2110      	movs	r1, #16
 8008852:	430a      	orrs	r2, r1
 8008854:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008856:	00ea      	lsls	r2, r5, #3
 8008858:	1952      	adds	r2, r2, r5
 800885a:	4b39      	ldr	r3, [pc, #228]	; (8008940 <SetButtonEvents+0x36c>)
 800885c:	189b      	adds	r3, r3, r2
 800885e:	7a1a      	ldrb	r2, [r3, #8]
 8008860:	2120      	movs	r1, #32
 8008862:	430a      	orrs	r2, r1
 8008864:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008866:	00ea      	lsls	r2, r5, #3
 8008868:	1952      	adds	r2, r2, r5
 800886a:	4b35      	ldr	r3, [pc, #212]	; (8008940 <SetButtonEvents+0x36c>)
 800886c:	189b      	adds	r3, r3, r2
 800886e:	7a1a      	ldrb	r2, [r3, #8]
 8008870:	2140      	movs	r1, #64	; 0x40
 8008872:	430a      	orrs	r2, r1
 8008874:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008876:	00ea      	lsls	r2, r5, #3
 8008878:	1952      	adds	r2, r2, r5
 800887a:	4b31      	ldr	r3, [pc, #196]	; (8008940 <SetButtonEvents+0x36c>)
 800887c:	189b      	adds	r3, r3, r2
 800887e:	7a19      	ldrb	r1, [r3, #8]
 8008880:	2280      	movs	r2, #128	; 0x80
 8008882:	4252      	negs	r2, r2
 8008884:	430a      	orrs	r2, r1
 8008886:	721a      	strb	r2, [r3, #8]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008888:	002c      	movs	r4, r5
 800888a:	343a      	adds	r4, #58	; 0x3a
 800888c:	00a4      	lsls	r4, r4, #2
 800888e:	ab02      	add	r3, sp, #8
 8008890:	1d99      	adds	r1, r3, #6
 8008892:	0020      	movs	r0, r4
 8008894:	f7ff f868 	bl	8007968 <EE_ReadVariable>
	if(!res)											// This variable exists
 8008898:	2800      	cmp	r0, #0
 800889a:	d000      	beq.n	800889e <SetButtonEvents+0x2ca>
 800889c:	e74a      	b.n	8008734 <SetButtonEvents+0x160>
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 800889e:	ab02      	add	r3, sp, #8
 80088a0:	1d9a      	adds	r2, r3, #6
 80088a2:	88db      	ldrh	r3, [r3, #6]
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 80088a4:	00e8      	lsls	r0, r5, #3
 80088a6:	1945      	adds	r5, r0, r5
 80088a8:	4825      	ldr	r0, [pc, #148]	; (8008940 <SetButtonEvents+0x36c>)
 80088aa:	1940      	adds	r0, r0, r5
 80088ac:	7a00      	ldrb	r0, [r0, #8]
 80088ae:	7812      	ldrb	r2, [r2, #0]
 80088b0:	4282      	cmp	r2, r0
 80088b2:	d000      	beq.n	80088b6 <SetButtonEvents+0x2e2>
 80088b4:	e722      	b.n	80086fc <SetButtonEvents+0x128>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 80088b6:	1c63      	adds	r3, r4, #1
 80088b8:	469b      	mov	fp, r3
 80088ba:	ab02      	add	r3, sp, #8
 80088bc:	1d9d      	adds	r5, r3, #6
 80088be:	0029      	movs	r1, r5
 80088c0:	4658      	mov	r0, fp
 80088c2:	f7ff f851 	bl	8007968 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 80088c6:	9b01      	ldr	r3, [sp, #4]
 80088c8:	0219      	lsls	r1, r3, #8
 80088ca:	882a      	ldrh	r2, [r5, #0]
 80088cc:	464b      	mov	r3, r9
 80088ce:	430b      	orrs	r3, r1
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d000      	beq.n	80088d6 <SetButtonEvents+0x302>
 80088d4:	e71b      	b.n	800870e <SetButtonEvents+0x13a>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 80088d6:	1ca5      	adds	r5, r4, #2
 80088d8:	2306      	movs	r3, #6
 80088da:	aa02      	add	r2, sp, #8
 80088dc:	4694      	mov	ip, r2
 80088de:	4463      	add	r3, ip
 80088e0:	4699      	mov	r9, r3
 80088e2:	0019      	movs	r1, r3
 80088e4:	0028      	movs	r0, r5
 80088e6:	f7ff f83f 	bl	8007968 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 80088ea:	0236      	lsls	r6, r6, #8
 80088ec:	464b      	mov	r3, r9
 80088ee:	881a      	ldrh	r2, [r3, #0]
 80088f0:	4653      	mov	r3, sl
 80088f2:	4333      	orrs	r3, r6
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d000      	beq.n	80088fa <SetButtonEvents+0x326>
 80088f8:	e70f      	b.n	800871a <SetButtonEvents+0x146>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 80088fa:	3403      	adds	r4, #3
 80088fc:	ab02      	add	r3, sp, #8
 80088fe:	1d9d      	adds	r5, r3, #6
 8008900:	0029      	movs	r1, r5
 8008902:	0020      	movs	r0, r4
 8008904:	f7ff f830 	bl	8007968 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008908:	023f      	lsls	r7, r7, #8
 800890a:	882a      	ldrh	r2, [r5, #0]
 800890c:	4643      	mov	r3, r8
 800890e:	433b      	orrs	r3, r7
	return result;
 8008910:	2000      	movs	r0, #0
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008912:	429a      	cmp	r2, r3
 8008914:	d000      	beq.n	8008918 <SetButtonEvents+0x344>
 8008916:	e705      	b.n	8008724 <SetButtonEvents+0x150>
}
 8008918:	b005      	add	sp, #20
 800891a:	bcf0      	pop	{r4, r5, r6, r7}
 800891c:	46bb      	mov	fp, r7
 800891e:	46b2      	mov	sl, r6
 8008920:	46a9      	mov	r9, r5
 8008922:	46a0      	mov	r8, r4
 8008924:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008926:	00e9      	lsls	r1, r5, #3
 8008928:	1949      	adds	r1, r1, r5
 800892a:	4b05      	ldr	r3, [pc, #20]	; (8008940 <SetButtonEvents+0x36c>)
 800892c:	185b      	adds	r3, r3, r1
 800892e:	7a19      	ldrb	r1, [r3, #8]
 8008930:	2401      	movs	r4, #1
 8008932:	4321      	orrs	r1, r4
 8008934:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008936:	2800      	cmp	r0, #0
 8008938:	d100      	bne.n	800893c <SetButtonEvents+0x368>
 800893a:	e68b      	b.n	8008654 <SetButtonEvents+0x80>
 800893c:	e7a4      	b.n	8008888 <SetButtonEvents+0x2b4>
 800893e:	46c0      	nop			; (mov r8, r8)
 8008940:	20001524 	.word	0x20001524

08008944 <HAL_ADC_MspInit>:
		Error_Handler();
	}
	ADC_flag =1;
}

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle){
 8008944:	b510      	push	{r4, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	0004      	movs	r4, r0
	
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 800894a:	2214      	movs	r2, #20
 800894c:	2100      	movs	r1, #0
 800894e:	a803      	add	r0, sp, #12
 8008950:	f00b fc67 	bl	8014222 <memset>
	if(adcHandle->Instance == ADC1){
 8008954:	4b12      	ldr	r3, [pc, #72]	; (80089a0 <HAL_ADC_MspInit+0x5c>)
 8008956:	6822      	ldr	r2, [r4, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d001      	beq.n	8008960 <HAL_ADC_MspInit+0x1c>
		
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 800895c:	b008      	add	sp, #32
 800895e:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008960:	4b10      	ldr	r3, [pc, #64]	; (80089a4 <HAL_ADC_MspInit+0x60>)
 8008962:	6999      	ldr	r1, [r3, #24]
 8008964:	2080      	movs	r0, #128	; 0x80
 8008966:	0080      	lsls	r0, r0, #2
 8008968:	4301      	orrs	r1, r0
 800896a:	6199      	str	r1, [r3, #24]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	4002      	ands	r2, r0
 8008970:	9201      	str	r2, [sp, #4]
 8008972:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008974:	695a      	ldr	r2, [r3, #20]
 8008976:	2180      	movs	r1, #128	; 0x80
 8008978:	0289      	lsls	r1, r1, #10
 800897a:	430a      	orrs	r2, r1
 800897c:	615a      	str	r2, [r3, #20]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	400b      	ands	r3, r1
 8008982:	9302      	str	r3, [sp, #8]
 8008984:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8008986:	233c      	movs	r3, #60	; 0x3c
 8008988:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800898a:	3b39      	subs	r3, #57	; 0x39
 800898c:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898e:	2300      	movs	r3, #0
 8008990:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008992:	3871      	subs	r0, #113	; 0x71
 8008994:	38ff      	subs	r0, #255	; 0xff
 8008996:	a903      	add	r1, sp, #12
 8008998:	05c0      	lsls	r0, r0, #23
 800899a:	f009 fac3 	bl	8011f24 <HAL_GPIO_Init>
}
 800899e:	e7dd      	b.n	800895c <HAL_ADC_MspInit+0x18>
 80089a0:	40012400 	.word	0x40012400
 80089a4:	40021000 	.word	0x40021000

080089a8 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart,char *side){
	
	if(huart->Instance == USART2 && side == "top")
 80089a8:	6803      	ldr	r3, [r0, #0]
 80089aa:	4a0d      	ldr	r2, [pc, #52]	; (80089e0 <Get_channel+0x38>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d003      	beq.n	80089b8 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if(huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if(huart->Instance == USART6 && side == "top")
 80089b0:	4a0c      	ldr	r2, [pc, #48]	; (80089e4 <Get_channel+0x3c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d008      	beq.n	80089c8 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if(huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 80089b6:	4770      	bx	lr
	if(huart->Instance == USART2 && side == "top")
 80089b8:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <Get_channel+0x40>)
 80089ba:	4299      	cmp	r1, r3
 80089bc:	d00c      	beq.n	80089d8 <Get_channel+0x30>
	else if(huart->Instance == USART2 && side == "bottom")
 80089be:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <Get_channel+0x44>)
 80089c0:	4299      	cmp	r1, r3
 80089c2:	d1f8      	bne.n	80089b6 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 80089c4:	2003      	movs	r0, #3
 80089c6:	e7f6      	b.n	80089b6 <Get_channel+0xe>
	else if(huart->Instance == USART6 && side == "top")
 80089c8:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <Get_channel+0x40>)
 80089ca:	4299      	cmp	r1, r3
 80089cc:	d006      	beq.n	80089dc <Get_channel+0x34>
	else if(huart->Instance == USART6 && side == "bottom")
 80089ce:	4b07      	ldr	r3, [pc, #28]	; (80089ec <Get_channel+0x44>)
 80089d0:	4299      	cmp	r1, r3
 80089d2:	d1f0      	bne.n	80089b6 <Get_channel+0xe>
		return ADC_CHANNEL_5;
 80089d4:	2005      	movs	r0, #5
 80089d6:	e7ee      	b.n	80089b6 <Get_channel+0xe>
		return ADC_CHANNEL_2;
 80089d8:	2002      	movs	r0, #2
 80089da:	e7ec      	b.n	80089b6 <Get_channel+0xe>
		return ADC_CHANNEL_4;
 80089dc:	2004      	movs	r0, #4
 80089de:	e7ea      	b.n	80089b6 <Get_channel+0xe>
 80089e0:	40004400 	.word	0x40004400
 80089e4:	40011400 	.word	0x40011400
 80089e8:	0801b020 	.word	0x0801b020
 80089ec:	0801b024 	.word	0x0801b024

080089f0 <Error_Handler>:

void Error_Handler(void){
 80089f0:	b510      	push	{r4, lr}
	
	HAL_Delay(100);
 80089f2:	2064      	movs	r0, #100	; 0x64
 80089f4:	f007 ff92 	bl	801091c <HAL_Delay>
	
}
 80089f8:	bd10      	pop	{r4, pc}
	...

080089fc <MX_ADC_Init>:
void MX_ADC_Init(void){
 80089fc:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 80089fe:	4811      	ldr	r0, [pc, #68]	; (8008a44 <MX_ADC_Init+0x48>)
 8008a00:	4b11      	ldr	r3, [pc, #68]	; (8008a48 <MX_ADC_Init+0x4c>)
 8008a02:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008a04:	2380      	movs	r3, #128	; 0x80
 8008a06:	061b      	lsls	r3, r3, #24
 8008a08:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008a0e:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008a10:	2201      	movs	r2, #1
 8008a12:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008a14:	2104      	movs	r1, #4
 8008a16:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait =DISABLE;
 8008a18:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 8008a1a:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 8008a1c:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 8008a1e:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008a20:	21c2      	movs	r1, #194	; 0xc2
 8008a22:	31ff      	adds	r1, #255	; 0xff
 8008a24:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008a26:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 8008a28:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008a2a:	6342      	str	r2, [r0, #52]	; 0x34
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 8008a2c:	f008 f850 	bl	8010ad0 <HAL_ADC_Init>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d103      	bne.n	8008a3c <MX_ADC_Init+0x40>
	ADC_flag =1;
 8008a34:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <MX_ADC_Init+0x50>)
 8008a36:	2201      	movs	r2, #1
 8008a38:	701a      	strb	r2, [r3, #0]
}
 8008a3a:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008a3c:	f7ff ffd8 	bl	80089f0 <Error_Handler>
 8008a40:	e7f8      	b.n	8008a34 <MX_ADC_Init+0x38>
 8008a42:	46c0      	nop			; (mov r8, r8)
 8008a44:	20006b60 	.word	0x20006b60
 8008a48:	40012400 	.word	0x40012400
 8008a4c:	20001510 	.word	0x20001510

08008a50 <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 8008a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a52:	46c6      	mov	lr, r8
 8008a54:	b500      	push	{lr}
 8008a56:	0006      	movs	r6, r0
 8008a58:	000d      	movs	r5, r1
	if(0 == ADC_flag)
 8008a5a:	4b4f      	ldr	r3, [pc, #316]	; (8008b98 <ReadTempAndVref+0x148>)
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d100      	bne.n	8008a64 <ReadTempAndVref+0x14>
 8008a62:	e089      	b.n	8008b78 <ReadTempAndVref+0x128>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008a64:	494d      	ldr	r1, [pc, #308]	; (8008b9c <ReadTempAndVref+0x14c>)
 8008a66:	2310      	movs	r3, #16
 8008a68:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008a6a:	2380      	movs	r3, #128	; 0x80
 8008a6c:	015b      	lsls	r3, r3, #5
 8008a6e:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008a70:	2301      	movs	r3, #1
 8008a72:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008a74:	484a      	ldr	r0, [pc, #296]	; (8008ba0 <ReadTempAndVref+0x150>)
 8008a76:	f008 f98d 	bl	8010d94 <HAL_ADC_ConfigChannel>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d000      	beq.n	8008a80 <ReadTempAndVref+0x30>
 8008a7e:	e07e      	b.n	8008b7e <ReadTempAndVref+0x12e>
	HAL_ADC_Start(&hadc);
 8008a80:	4c47      	ldr	r4, [pc, #284]	; (8008ba0 <ReadTempAndVref+0x150>)
 8008a82:	0020      	movs	r0, r4
 8008a84:	f008 f8d0 	bl	8010c28 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008a88:	2164      	movs	r1, #100	; 0x64
 8008a8a:	0020      	movs	r0, r4
 8008a8c:	f008 f91e 	bl	8010ccc <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 8008a90:	0020      	movs	r0, r4
 8008a92:	f008 f979 	bl	8010d88 <HAL_ADC_GetValue>
 8008a96:	4b43      	ldr	r3, [pc, #268]	; (8008ba4 <ReadTempAndVref+0x154>)
 8008a98:	8018      	strh	r0, [r3, #0]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008a9a:	0400      	lsls	r0, r0, #16
 8008a9c:	0c00      	lsrs	r0, r0, #16
 8008a9e:	f7fa f89f 	bl	8002be0 <__aeabi_i2d>
 8008aa2:	4a41      	ldr	r2, [pc, #260]	; (8008ba8 <ReadTempAndVref+0x158>)
 8008aa4:	4b41      	ldr	r3, [pc, #260]	; (8008bac <ReadTempAndVref+0x15c>)
 8008aa6:	f7f9 fa49 	bl	8001f3c <__aeabi_dmul>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4b40      	ldr	r3, [pc, #256]	; (8008bb0 <ReadTempAndVref+0x160>)
 8008aae:	f7f8 fe3f 	bl	8001730 <__aeabi_ddiv>
 8008ab2:	4a40      	ldr	r2, [pc, #256]	; (8008bb4 <ReadTempAndVref+0x164>)
 8008ab4:	4b40      	ldr	r3, [pc, #256]	; (8008bb8 <ReadTempAndVref+0x168>)
 8008ab6:	f7f9 fcad 	bl	8002414 <__aeabi_dsub>
 8008aba:	4a40      	ldr	r2, [pc, #256]	; (8008bbc <ReadTempAndVref+0x16c>)
 8008abc:	4b40      	ldr	r3, [pc, #256]	; (8008bc0 <ReadTempAndVref+0x170>)
 8008abe:	f7f8 fe37 	bl	8001730 <__aeabi_ddiv>
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	4b3f      	ldr	r3, [pc, #252]	; (8008bc4 <ReadTempAndVref+0x174>)
 8008ac6:	f7f8 fac9 	bl	800105c <__aeabi_dadd>
 8008aca:	f7fa f927 	bl	8002d1c <__aeabi_d2f>
 8008ace:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 8008ad0:	0020      	movs	r0, r4
 8008ad2:	f008 f8d9 	bl	8010c88 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008ad6:	4931      	ldr	r1, [pc, #196]	; (8008b9c <ReadTempAndVref+0x14c>)
 8008ad8:	2310      	movs	r3, #16
 8008ada:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008adc:	4b3a      	ldr	r3, [pc, #232]	; (8008bc8 <ReadTempAndVref+0x178>)
 8008ade:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008ae4:	0020      	movs	r0, r4
 8008ae6:	f008 f955 	bl	8010d94 <HAL_ADC_ConfigChannel>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d14a      	bne.n	8008b84 <ReadTempAndVref+0x134>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008aee:	492b      	ldr	r1, [pc, #172]	; (8008b9c <ReadTempAndVref+0x14c>)
 8008af0:	2311      	movs	r3, #17
 8008af2:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008af4:	2380      	movs	r3, #128	; 0x80
 8008af6:	015b      	lsls	r3, r3, #5
 8008af8:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008afa:	2305      	movs	r3, #5
 8008afc:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008afe:	4828      	ldr	r0, [pc, #160]	; (8008ba0 <ReadTempAndVref+0x150>)
 8008b00:	f008 f948 	bl	8010d94 <HAL_ADC_ConfigChannel>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d140      	bne.n	8008b8a <ReadTempAndVref+0x13a>
	HAL_ADC_Start(&hadc);
 8008b08:	4b25      	ldr	r3, [pc, #148]	; (8008ba0 <ReadTempAndVref+0x150>)
 8008b0a:	4698      	mov	r8, r3
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f008 f88b 	bl	8010c28 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008b12:	2164      	movs	r1, #100	; 0x64
 8008b14:	4640      	mov	r0, r8
 8008b16:	f008 f8d9 	bl	8010ccc <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	f008 f934 	bl	8010d88 <HAL_ADC_GetValue>
 8008b20:	0004      	movs	r4, r0
 8008b22:	4b2a      	ldr	r3, [pc, #168]	; (8008bcc <ReadTempAndVref+0x17c>)
 8008b24:	8018      	strh	r0, [r3, #0]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 8008b26:	4b2a      	ldr	r3, [pc, #168]	; (8008bd0 <ReadTempAndVref+0x180>)
 8008b28:	8818      	ldrh	r0, [r3, #0]
 8008b2a:	f7fa f859 	bl	8002be0 <__aeabi_i2d>
 8008b2e:	4a1e      	ldr	r2, [pc, #120]	; (8008ba8 <ReadTempAndVref+0x158>)
 8008b30:	4b1e      	ldr	r3, [pc, #120]	; (8008bac <ReadTempAndVref+0x15c>)
 8008b32:	f7f9 fa03 	bl	8001f3c <__aeabi_dmul>
 8008b36:	0006      	movs	r6, r0
 8008b38:	000f      	movs	r7, r1
 8008b3a:	0420      	lsls	r0, r4, #16
 8008b3c:	0c00      	lsrs	r0, r0, #16
 8008b3e:	f7fa f84f 	bl	8002be0 <__aeabi_i2d>
 8008b42:	0002      	movs	r2, r0
 8008b44:	000b      	movs	r3, r1
 8008b46:	0030      	movs	r0, r6
 8008b48:	0039      	movs	r1, r7
 8008b4a:	f7f8 fdf1 	bl	8001730 <__aeabi_ddiv>
 8008b4e:	f7fa f8e5 	bl	8002d1c <__aeabi_d2f>
 8008b52:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 8008b54:	4640      	mov	r0, r8
 8008b56:	f008 f897 	bl	8010c88 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008b5a:	4910      	ldr	r1, [pc, #64]	; (8008b9c <ReadTempAndVref+0x14c>)
 8008b5c:	2311      	movs	r3, #17
 8008b5e:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008b60:	4b19      	ldr	r3, [pc, #100]	; (8008bc8 <ReadTempAndVref+0x178>)
 8008b62:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b64:	2301      	movs	r3, #1
 8008b66:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b68:	4640      	mov	r0, r8
 8008b6a:	f008 f913 	bl	8010d94 <HAL_ADC_ConfigChannel>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d10e      	bne.n	8008b90 <ReadTempAndVref+0x140>
}
 8008b72:	bc80      	pop	{r7}
 8008b74:	46b8      	mov	r8, r7
 8008b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		MX_ADC_Init();
 8008b78:	f7ff ff40 	bl	80089fc <MX_ADC_Init>
 8008b7c:	e772      	b.n	8008a64 <ReadTempAndVref+0x14>
		Error_Handler();
 8008b7e:	f7ff ff37 	bl	80089f0 <Error_Handler>
 8008b82:	e77d      	b.n	8008a80 <ReadTempAndVref+0x30>
		Error_Handler();
 8008b84:	f7ff ff34 	bl	80089f0 <Error_Handler>
 8008b88:	e7b1      	b.n	8008aee <ReadTempAndVref+0x9e>
		Error_Handler();
 8008b8a:	f7ff ff31 	bl	80089f0 <Error_Handler>
 8008b8e:	e7bb      	b.n	8008b08 <ReadTempAndVref+0xb8>
		Error_Handler();
 8008b90:	f7ff ff2e 	bl	80089f0 <Error_Handler>
}
 8008b94:	e7ed      	b.n	8008b72 <ReadTempAndVref+0x122>
 8008b96:	46c0      	nop			; (mov r8, r8)
 8008b98:	20001510 	.word	0x20001510
 8008b9c:	200015b0 	.word	0x200015b0
 8008ba0:	20006b60 	.word	0x20006b60
 8008ba4:	20001514 	.word	0x20001514
 8008ba8:	66666666 	.word	0x66666666
 8008bac:	400a6666 	.word	0x400a6666
 8008bb0:	40affe00 	.word	0x40affe00
 8008bb4:	28f5c28f 	.word	0x28f5c28f
 8008bb8:	3ff68f5c 	.word	0x3ff68f5c
 8008bbc:	33333333 	.word	0x33333333
 8008bc0:	40113333 	.word	0x40113333
 8008bc4:	40390000 	.word	0x40390000
 8008bc8:	00001001 	.word	0x00001001
 8008bcc:	20001512 	.word	0x20001512
 8008bd0:	1ffff7ba 	.word	0x1ffff7ba

08008bd4 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	0004      	movs	r4, r0
 8008bda:	000d      	movs	r5, r1
	if(port == 2 || port == 3){
 8008bdc:	1e83      	subs	r3, r0, #2
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d901      	bls.n	8008be6 <GetReadPrecentage+0x12>
}
 8008be2:	b006      	add	sp, #24
 8008be4:	bd70      	pop	{r4, r5, r6, pc}
		if(0 == ADC_flag){
 8008be6:	4b3e      	ldr	r3, [pc, #248]	; (8008ce0 <GetReadPrecentage+0x10c>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d055      	beq.n	8008c9a <GetReadPrecentage+0xc6>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8008bee:	2090      	movs	r0, #144	; 0x90
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	2110      	movs	r1, #16
 8008bf4:	05c0      	lsls	r0, r0, #23
 8008bf6:	f009 fb19 	bl	801222c <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 8008bfa:	0020      	movs	r0, r4
 8008bfc:	f005 fb7a 	bl	800e2f4 <GetUart>
 8008c00:	4938      	ldr	r1, [pc, #224]	; (8008ce4 <GetReadPrecentage+0x110>)
 8008c02:	f7ff fed1 	bl	80089a8 <Get_channel>
 8008c06:	4b38      	ldr	r3, [pc, #224]	; (8008ce8 <GetReadPrecentage+0x114>)
 8008c08:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008c0a:	4938      	ldr	r1, [pc, #224]	; (8008cec <GetReadPrecentage+0x118>)
 8008c0c:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008c0e:	2380      	movs	r3, #128	; 0x80
 8008c10:	015b      	lsls	r3, r3, #5
 8008c12:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c14:	2301      	movs	r3, #1
 8008c16:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c18:	4835      	ldr	r0, [pc, #212]	; (8008cf0 <GetReadPrecentage+0x11c>)
 8008c1a:	f008 f8bb 	bl	8010d94 <HAL_ADC_ConfigChannel>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d15b      	bne.n	8008cda <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008c22:	4c33      	ldr	r4, [pc, #204]	; (8008cf0 <GetReadPrecentage+0x11c>)
 8008c24:	0020      	movs	r0, r4
 8008c26:	f007 ffff 	bl	8010c28 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008c2a:	2164      	movs	r1, #100	; 0x64
 8008c2c:	0020      	movs	r0, r4
 8008c2e:	f008 f84d 	bl	8010ccc <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008c32:	0020      	movs	r0, r4
 8008c34:	f008 f8a8 	bl	8010d88 <HAL_ADC_GetValue>
 8008c38:	f7f8 f9d4 	bl	8000fe4 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008c3c:	f7fa f826 	bl	8002c8c <__aeabi_f2d>
 8008c40:	4a2c      	ldr	r2, [pc, #176]	; (8008cf4 <GetReadPrecentage+0x120>)
 8008c42:	4b2d      	ldr	r3, [pc, #180]	; (8008cf8 <GetReadPrecentage+0x124>)
 8008c44:	f7f9 f97a 	bl	8001f3c <__aeabi_dmul>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4b2c      	ldr	r3, [pc, #176]	; (8008cfc <GetReadPrecentage+0x128>)
 8008c4c:	f7f8 fd70 	bl	8001730 <__aeabi_ddiv>
 8008c50:	f7fa f864 	bl	8002d1c <__aeabi_d2f>
 8008c54:	4b2a      	ldr	r3, [pc, #168]	; (8008d00 <GetReadPrecentage+0x12c>)
 8008c56:	6018      	str	r0, [r3, #0]
		current =(100 * percentage) / 3.3;
 8008c58:	492a      	ldr	r1, [pc, #168]	; (8008d04 <GetReadPrecentage+0x130>)
 8008c5a:	f7f7 fec1 	bl	80009e0 <__aeabi_fmul>
 8008c5e:	f7fa f815 	bl	8002c8c <__aeabi_f2d>
 8008c62:	4a24      	ldr	r2, [pc, #144]	; (8008cf4 <GetReadPrecentage+0x120>)
 8008c64:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <GetReadPrecentage+0x124>)
 8008c66:	f7f8 fd63 	bl	8001730 <__aeabi_ddiv>
 8008c6a:	f7fa f857 	bl	8002d1c <__aeabi_d2f>
 8008c6e:	4b26      	ldr	r3, [pc, #152]	; (8008d08 <GetReadPrecentage+0x134>)
 8008c70:	6018      	str	r0, [r3, #0]
		*precentageValue =current;
 8008c72:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 8008c74:	0020      	movs	r0, r4
 8008c76:	f008 f807 	bl	8010c88 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008c7a:	491c      	ldr	r1, [pc, #112]	; (8008cec <GetReadPrecentage+0x118>)
 8008c7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ce8 <GetReadPrecentage+0x114>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008c82:	4b22      	ldr	r3, [pc, #136]	; (8008d0c <GetReadPrecentage+0x138>)
 8008c84:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c86:	2301      	movs	r3, #1
 8008c88:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c8a:	0020      	movs	r0, r4
 8008c8c:	f008 f882 	bl	8010d94 <HAL_ADC_ConfigChannel>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d0a6      	beq.n	8008be2 <GetReadPrecentage+0xe>
			Error_Handler();
 8008c94:	f7ff feac 	bl	80089f0 <Error_Handler>
 8008c98:	e7a3      	b.n	8008be2 <GetReadPrecentage+0xe>
			MX_ADC_Init();
 8008c9a:	f7ff feaf 	bl	80089fc <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008c9e:	0020      	movs	r0, r4
 8008ca0:	f005 fb28 	bl	800e2f4 <GetUart>
 8008ca4:	f00a fa8f 	bl	80131c6 <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 8008ca8:	2690      	movs	r6, #144	; 0x90
 8008caa:	05f6      	lsls	r6, r6, #23
 8008cac:	2110      	movs	r1, #16
 8008cae:	0030      	movs	r0, r6
 8008cb0:	f009 fa22 	bl	80120f8 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008cb4:	480e      	ldr	r0, [pc, #56]	; (8008cf0 <GetReadPrecentage+0x11c>)
 8008cb6:	f008 f911 	bl	8010edc <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008cba:	2310      	movs	r3, #16
 8008cbc:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cbe:	3b0f      	subs	r3, #15
 8008cc0:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008cc2:	3302      	adds	r3, #2
 8008cc4:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008cc6:	a901      	add	r1, sp, #4
 8008cc8:	0030      	movs	r0, r6
 8008cca:	f009 f92b 	bl	8011f24 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008cce:	4b10      	ldr	r3, [pc, #64]	; (8008d10 <GetReadPrecentage+0x13c>)
 8008cd0:	191b      	adds	r3, r3, r4
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	2206      	movs	r2, #6
 8008cd6:	701a      	strb	r2, [r3, #0]
 8008cd8:	e789      	b.n	8008bee <GetReadPrecentage+0x1a>
			Error_Handler();
 8008cda:	f7ff fe89 	bl	80089f0 <Error_Handler>
 8008cde:	e7a0      	b.n	8008c22 <GetReadPrecentage+0x4e>
 8008ce0:	20001510 	.word	0x20001510
 8008ce4:	0801b024 	.word	0x0801b024
 8008ce8:	20001520 	.word	0x20001520
 8008cec:	200015b0 	.word	0x200015b0
 8008cf0:	20006b60 	.word	0x20006b60
 8008cf4:	66666666 	.word	0x66666666
 8008cf8:	400a6666 	.word	0x400a6666
 8008cfc:	40affe00 	.word	0x40affe00
 8008d00:	20001574 	.word	0x20001574
 8008d04:	42c80000 	.word	0x42c80000
 8008d08:	20001564 	.word	0x20001564
 8008d0c:	00001001 	.word	0x00001001
 8008d10:	20001100 	.word	0x20001100

08008d14 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008d14:	2802      	cmp	r0, #2
 8008d16:	d004      	beq.n	8008d22 <Get_Rank+0xe>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008d18:	2803      	cmp	r0, #3
 8008d1a:	d010      	beq.n	8008d3e <Get_Rank+0x2a>
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
		Rank_t =3;
	return Rank_t;
 8008d1c:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <Get_Rank+0x48>)
 8008d1e:	7818      	ldrb	r0, [r3, #0]
}
 8008d20:	4770      	bx	lr
	if(Port == 2 && side == "top")
 8008d22:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <Get_Rank+0x4c>)
 8008d24:	4299      	cmp	r1, r3
 8008d26:	d006      	beq.n	8008d36 <Get_Rank+0x22>
	else if(Port == 2 && side == "bottom")
 8008d28:	4b0e      	ldr	r3, [pc, #56]	; (8008d64 <Get_Rank+0x50>)
 8008d2a:	4299      	cmp	r1, r3
 8008d2c:	d1f6      	bne.n	8008d1c <Get_Rank+0x8>
		Rank_t =1;
 8008d2e:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <Get_Rank+0x48>)
 8008d30:	2201      	movs	r2, #1
 8008d32:	701a      	strb	r2, [r3, #0]
 8008d34:	e7f2      	b.n	8008d1c <Get_Rank+0x8>
		Rank_t =0;
 8008d36:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <Get_Rank+0x48>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	e7ee      	b.n	8008d1c <Get_Rank+0x8>
	else if(Port == 3 && side == "top")
 8008d3e:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <Get_Rank+0x4c>)
 8008d40:	4299      	cmp	r1, r3
 8008d42:	d006      	beq.n	8008d52 <Get_Rank+0x3e>
	else if(Port == 3 && side == "bottom")
 8008d44:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <Get_Rank+0x50>)
 8008d46:	4299      	cmp	r1, r3
 8008d48:	d1e8      	bne.n	8008d1c <Get_Rank+0x8>
		Rank_t =3;
 8008d4a:	4b04      	ldr	r3, [pc, #16]	; (8008d5c <Get_Rank+0x48>)
 8008d4c:	2203      	movs	r2, #3
 8008d4e:	701a      	strb	r2, [r3, #0]
 8008d50:	e7e4      	b.n	8008d1c <Get_Rank+0x8>
		Rank_t =2;
 8008d52:	4b02      	ldr	r3, [pc, #8]	; (8008d5c <Get_Rank+0x48>)
 8008d54:	2202      	movs	r2, #2
 8008d56:	701a      	strb	r2, [r3, #0]
 8008d58:	e7e0      	b.n	8008d1c <Get_Rank+0x8>
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	20001521 	.word	0x20001521
 8008d60:	0801b020 	.word	0x0801b020
 8008d64:	0801b024 	.word	0x0801b024

08008d68 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	0004      	movs	r4, r0
 8008d6c:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008d6e:	1e83      	subs	r3, r0, #2
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d900      	bls.n	8008d76 <ADCSelectChannel+0xe>
}
 8008d74:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008d76:	f005 fabd 	bl	800e2f4 <GetUart>
 8008d7a:	f00a fa24 	bl	80131c6 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008d7e:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <ADCSelectChannel+0x4c>)
 8008d80:	191b      	adds	r3, r3, r4
 8008d82:	3b01      	subs	r3, #1
 8008d84:	2206      	movs	r2, #6
 8008d86:	701a      	strb	r2, [r3, #0]
		Channel =Get_channel(GetUart(ADC_port),side);
 8008d88:	0020      	movs	r0, r4
 8008d8a:	f005 fab3 	bl	800e2f4 <GetUart>
 8008d8e:	0029      	movs	r1, r5
 8008d90:	f7ff fe0a 	bl	80089a8 <Get_channel>
 8008d94:	4b08      	ldr	r3, [pc, #32]	; (8008db8 <ADCSelectChannel+0x50>)
 8008d96:	7018      	strb	r0, [r3, #0]
		Rank_t =Get_Rank(ADC_port,side);
 8008d98:	0029      	movs	r1, r5
 8008d9a:	0020      	movs	r0, r4
 8008d9c:	f7ff ffba 	bl	8008d14 <Get_Rank>
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <ADCSelectChannel+0x54>)
 8008da2:	7018      	strb	r0, [r3, #0]
		if(ADC_flag == 0)
 8008da4:	4b06      	ldr	r3, [pc, #24]	; (8008dc0 <ADCSelectChannel+0x58>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e3      	bne.n	8008d74 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008dac:	f7ff fe26 	bl	80089fc <MX_ADC_Init>
}
 8008db0:	e7e0      	b.n	8008d74 <ADCSelectChannel+0xc>
 8008db2:	46c0      	nop			; (mov r8, r8)
 8008db4:	20001100 	.word	0x20001100
 8008db8:	20001520 	.word	0x20001520
 8008dbc:	20001521 	.word	0x20001521
 8008dc0:	20001510 	.word	0x20001510

08008dc4 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	0005      	movs	r5, r0
 8008dc8:	000e      	movs	r6, r1
 8008dca:	0014      	movs	r4, r2
	if(ADC_flag == 1){
 8008dcc:	4b26      	ldr	r3, [pc, #152]	; (8008e68 <ReadADCChannel+0xa4>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d008      	beq.n	8008de6 <ReadADCChannel+0x22>
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008dd4:	4b25      	ldr	r3, [pc, #148]	; (8008e6c <ReadADCChannel+0xa8>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	4a25      	ldr	r2, [pc, #148]	; (8008e70 <ReadADCChannel+0xac>)
 8008ddc:	5a98      	ldrh	r0, [r3, r2]
 8008dde:	f7f8 f901 	bl	8000fe4 <__aeabi_ui2f>
 8008de2:	6020      	str	r0, [r4, #0]
}
 8008de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008de6:	f005 fa85 	bl	800e2f4 <GetUart>
 8008dea:	0031      	movs	r1, r6
 8008dec:	f7ff fddc 	bl	80089a8 <Get_channel>
 8008df0:	4f20      	ldr	r7, [pc, #128]	; (8008e74 <ReadADCChannel+0xb0>)
 8008df2:	7038      	strb	r0, [r7, #0]
		Rank_t =Get_Rank(Port,side);
 8008df4:	0031      	movs	r1, r6
 8008df6:	0028      	movs	r0, r5
 8008df8:	f7ff ff8c 	bl	8008d14 <Get_Rank>
 8008dfc:	4b1b      	ldr	r3, [pc, #108]	; (8008e6c <ReadADCChannel+0xa8>)
 8008dfe:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008e00:	491d      	ldr	r1, [pc, #116]	; (8008e78 <ReadADCChannel+0xb4>)
 8008e02:	783b      	ldrb	r3, [r7, #0]
 8008e04:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008e06:	2380      	movs	r3, #128	; 0x80
 8008e08:	015b      	lsls	r3, r3, #5
 8008e0a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008e10:	481a      	ldr	r0, [pc, #104]	; (8008e7c <ReadADCChannel+0xb8>)
 8008e12:	f007 ffbf 	bl	8010d94 <HAL_ADC_ConfigChannel>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d122      	bne.n	8008e60 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008e1a:	4d18      	ldr	r5, [pc, #96]	; (8008e7c <ReadADCChannel+0xb8>)
 8008e1c:	0028      	movs	r0, r5
 8008e1e:	f007 ff03 	bl	8010c28 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008e22:	2164      	movs	r1, #100	; 0x64
 8008e24:	0028      	movs	r0, r5
 8008e26:	f007 ff51 	bl	8010ccc <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8008e2a:	0028      	movs	r0, r5
 8008e2c:	f007 ffac 	bl	8010d88 <HAL_ADC_GetValue>
 8008e30:	4b0e      	ldr	r3, [pc, #56]	; (8008e6c <ReadADCChannel+0xa8>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	4a0e      	ldr	r2, [pc, #56]	; (8008e70 <ReadADCChannel+0xac>)
 8008e38:	52d0      	strh	r0, [r2, r3]
		HAL_ADC_Stop(&hadc);
 8008e3a:	0028      	movs	r0, r5
 8008e3c:	f007 ff24 	bl	8010c88 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008e40:	490d      	ldr	r1, [pc, #52]	; (8008e78 <ReadADCChannel+0xb4>)
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <ReadADCChannel+0xb0>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008e48:	4b0d      	ldr	r3, [pc, #52]	; (8008e80 <ReadADCChannel+0xbc>)
 8008e4a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008e50:	0028      	movs	r0, r5
 8008e52:	f007 ff9f 	bl	8010d94 <HAL_ADC_ConfigChannel>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d0bc      	beq.n	8008dd4 <ReadADCChannel+0x10>
			Error_Handler();
 8008e5a:	f7ff fdc9 	bl	80089f0 <Error_Handler>
 8008e5e:	e7b9      	b.n	8008dd4 <ReadADCChannel+0x10>
			Error_Handler();
 8008e60:	f7ff fdc6 	bl	80089f0 <Error_Handler>
 8008e64:	e7d9      	b.n	8008e1a <ReadADCChannel+0x56>
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	20001510 	.word	0x20001510
 8008e6c:	20001521 	.word	0x20001521
 8008e70:	20001518 	.word	0x20001518
 8008e74:	20001520 	.word	0x20001520
 8008e78:	200015b0 	.word	0x200015b0
 8008e7c:	20006b60 	.word	0x20006b60
 8008e80:	00001001 	.word	0x00001001

08008e84 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port){
}
 8008e84:	4770      	bx	lr

08008e86 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port){
}
 8008e86:	4770      	bx	lr

08008e88 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port){
}
 8008e88:	4770      	bx	lr

08008e8a <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8008e8a:	4770      	bx	lr

08008e8c <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port,uint8_t eventType){
}
 8008e8c:	4770      	bx	lr
	...

08008e90 <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 8008e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e92:	46de      	mov	lr, fp
 8008e94:	4657      	mov	r7, sl
 8008e96:	464e      	mov	r6, r9
 8008e98:	4645      	mov	r5, r8
 8008e9a:	b5e0      	push	{r5, r6, r7, lr}
 8008e9c:	b089      	sub	sp, #36	; 0x24
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8008e9e:	4dbf      	ldr	r5, [pc, #764]	; (800919c <CheckAttachedButtons+0x30c>)
 8008ea0:	3509      	adds	r5, #9
 8008ea2:	4ebf      	ldr	r6, [pc, #764]	; (80091a0 <CheckAttachedButtons+0x310>)
 8008ea4:	3604      	adds	r6, #4
 8008ea6:	4bbf      	ldr	r3, [pc, #764]	; (80091a4 <CheckAttachedButtons+0x314>)
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4698      	mov	r8, r3
 8008eac:	4bbe      	ldr	r3, [pc, #760]	; (80091a8 <CheckAttachedButtons+0x318>)
 8008eae:	3301      	adds	r3, #1
 8008eb0:	4699      	mov	r9, r3
 8008eb2:	2401      	movs	r4, #1
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9302      	str	r3, [sp, #8]
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	e121      	b.n	8009100 <CheckAttachedButtons+0x270>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 8008ebc:	230e      	movs	r3, #14
 8008ebe:	aa02      	add	r2, sp, #8
 8008ec0:	4694      	mov	ip, r2
 8008ec2:	4463      	add	r3, ip
 8008ec4:	8819      	ldrh	r1, [r3, #0]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	9807      	ldr	r0, [sp, #28]
 8008eca:	f009 f9af 	bl	801222c <HAL_GPIO_WritePin>
				Delay_us(10);
 8008ece:	200a      	movs	r0, #10
 8008ed0:	f005 f818 	bl	800df04 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 8008ed4:	ab05      	add	r3, sp, #20
 8008ed6:	8819      	ldrh	r1, [r3, #0]
 8008ed8:	9806      	ldr	r0, [sp, #24]
 8008eda:	f009 f9a1 	bl	8012220 <HAL_GPIO_ReadPin>
 8008ede:	9003      	str	r0, [sp, #12]
 8008ee0:	e134      	b.n	800914c <CheckAttachedButtons+0x2bc>
			switch(button[i].type){
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d10e      	bne.n	8008f04 <CheckAttachedButtons+0x74>
					if(connected == GPIO_PIN_SET)
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d100      	bne.n	8008eee <CheckAttachedButtons+0x5e>
 8008eec:	e1d7      	b.n	800929e <CheckAttachedButtons+0x40e>
					else if(connected == GPIO_PIN_RESET)
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d108      	bne.n	8008f04 <CheckAttachedButtons+0x74>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	9302      	str	r3, [sp, #8]
 8008ef6:	e031      	b.n	8008f5c <CheckAttachedButtons+0xcc>
					if(connected == GPIO_PIN_SET)
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d02c      	beq.n	8008f58 <CheckAttachedButtons+0xc8>
					else if(connected == GPIO_PIN_RESET)
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d100      	bne.n	8008f04 <CheckAttachedButtons+0x74>
 8008f02:	e1c9      	b.n	8009298 <CheckAttachedButtons+0x408>
			if(state == CLOSED || state == ON){
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d028      	beq.n	8008f5c <CheckAttachedButtons+0xcc>
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d026      	beq.n	8008f5c <CheckAttachedButtons+0xcc>
			if(state == OPEN || state == OFF){
 8008f0e:	23fd      	movs	r3, #253	; 0xfd
 8008f10:	9a02      	ldr	r2, [sp, #8]
 8008f12:	4013      	ands	r3, r2
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d129      	bne.n	8008f6c <CheckAttachedButtons+0xdc>
				if(releaseCounter[i] < 0xFFFF)
 8008f18:	0031      	movs	r1, r6
 8008f1a:	6832      	ldr	r2, [r6, #0]
 8008f1c:	48a3      	ldr	r0, [pc, #652]	; (80091ac <CheckAttachedButtons+0x31c>)
					releaseCounter[i] =0;		// Reset debounce counter
 8008f1e:	2300      	movs	r3, #0
				if(releaseCounter[i] < 0xFFFF)
 8008f20:	4282      	cmp	r2, r0
 8008f22:	d800      	bhi.n	8008f26 <CheckAttachedButtons+0x96>
					++releaseCounter[i];		// Advance the debounce counter
 8008f24:	1c53      	adds	r3, r2, #1
 8008f26:	600b      	str	r3, [r1, #0]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008f28:	4ba1      	ldr	r3, [pc, #644]	; (80091b0 <CheckAttachedButtons+0x320>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d045      	beq.n	8008fbc <CheckAttachedButtons+0x12c>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 8008f30:	464b      	mov	r3, r9
 8008f32:	781a      	ldrb	r2, [r3, #0]
 8008f34:	4b9f      	ldr	r3, [pc, #636]	; (80091b4 <CheckAttachedButtons+0x324>)
 8008f36:	795b      	ldrb	r3, [r3, #5]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d917      	bls.n	8008f6c <CheckAttachedButtons+0xdc>
					clicked =0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4a9c      	ldr	r2, [pc, #624]	; (80091b0 <CheckAttachedButtons+0x320>)
 8008f40:	7013      	strb	r3, [r2, #0]
					dblCounter[i] =0;			// Reset the inter-click counter
 8008f42:	464a      	mov	r2, r9
 8008f44:	7013      	strb	r3, [r2, #0]
 8008f46:	e011      	b.n	8008f6c <CheckAttachedButtons+0xdc>
					if(connected == GPIO_PIN_SET)
 8008f48:	9b03      	ldr	r3, [sp, #12]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d02f      	beq.n	8008fae <CheckAttachedButtons+0x11e>
					else if(connected == GPIO_PIN_RESET)
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1d8      	bne.n	8008f04 <CheckAttachedButtons+0x74>
						state =OFF;
 8008f52:	2301      	movs	r3, #1
 8008f54:	9302      	str	r3, [sp, #8]
 8008f56:	e7df      	b.n	8008f18 <CheckAttachedButtons+0x88>
						state =CLOSED;
 8008f58:	2304      	movs	r3, #4
 8008f5a:	9302      	str	r3, [sp, #8]
				if(pressCounter[i] < 0xFFFF)
 8008f5c:	4643      	mov	r3, r8
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a92      	ldr	r2, [pc, #584]	; (80091ac <CheckAttachedButtons+0x31c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d826      	bhi.n	8008fb4 <CheckAttachedButtons+0x124>
					++pressCounter[i];			// Advance the debounce counter
 8008f66:	3301      	adds	r3, #1
 8008f68:	4642      	mov	r2, r8
 8008f6a:	6013      	str	r3, [r2, #0]
			if(pressCounter[i] < BOS.buttons.debounce){
 8008f6c:	4647      	mov	r7, r8
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	4b90      	ldr	r3, [pc, #576]	; (80091b4 <CheckAttachedButtons+0x324>)
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d352      	bcc.n	800901e <CheckAttachedButtons+0x18e>
				if(pressCounter[i] == BOS.buttons.debounce){
 8008f78:	d02a      	beq.n	8008fd0 <CheckAttachedButtons+0x140>
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008f7a:	6832      	ldr	r2, [r6, #0]
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d201      	bcs.n	8008f84 <CheckAttachedButtons+0xf4>
					releaseCounter[i] =0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	6033      	str	r3, [r6, #0]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	4a8b      	ldr	r2, [pc, #556]	; (80091b4 <CheckAttachedButtons+0x324>)
 8008f88:	8852      	ldrh	r2, [r2, #2]
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d938      	bls.n	8009000 <CheckAttachedButtons+0x170>
 8008f8e:	22fa      	movs	r2, #250	; 0xfa
 8008f90:	0052      	lsls	r2, r2, #1
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d234      	bcs.n	8009000 <CheckAttachedButtons+0x170>
					if(clicked == 0)
 8008f96:	4b86      	ldr	r3, [pc, #536]	; (80091b0 <CheckAttachedButtons+0x320>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d11e      	bne.n	8008fdc <CheckAttachedButtons+0x14c>
						clicked =1;		// Record a possible single click
 8008f9e:	4b84      	ldr	r3, [pc, #528]	; (80091b0 <CheckAttachedButtons+0x320>)
 8008fa0:	3af4      	subs	r2, #244	; 0xf4
 8008fa2:	3aff      	subs	r2, #255	; 0xff
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	e03a      	b.n	800901e <CheckAttachedButtons+0x18e>
						state =CLOSED;
 8008fa8:	2304      	movs	r3, #4
 8008faa:	9302      	str	r3, [sp, #8]
 8008fac:	e7d6      	b.n	8008f5c <CheckAttachedButtons+0xcc>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	9302      	str	r3, [sp, #8]
 8008fb2:	e7d3      	b.n	8008f5c <CheckAttachedButtons+0xcc>
					pressCounter[i] =0;			// Reset debounce counter
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	4642      	mov	r2, r8
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	e7d7      	b.n	8008f6c <CheckAttachedButtons+0xdc>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	4a7c      	ldr	r2, [pc, #496]	; (80091b4 <CheckAttachedButtons+0x324>)
 8008fc2:	7952      	ldrb	r2, [r2, #5]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d3b9      	bcc.n	8008f3c <CheckAttachedButtons+0xac>
					++dblCounter[i];
 8008fc8:	3301      	adds	r3, #1
 8008fca:	464a      	mov	r2, r9
 8008fcc:	7013      	strb	r3, [r2, #0]
 8008fce:	e7cd      	b.n	8008f6c <CheckAttachedButtons+0xdc>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 8008fd0:	2207      	movs	r2, #7
 8008fd2:	4651      	mov	r1, sl
 8008fd4:	700a      	strb	r2, [r1, #0]
					++pressCounter[i];
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	603a      	str	r2, [r7, #0]
 8008fda:	e7ce      	b.n	8008f7a <CheckAttachedButtons+0xea>
					else if(clicked == 2){
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d11e      	bne.n	800901e <CheckAttachedButtons+0x18e>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	780b      	ldrb	r3, [r1, #0]
 8008fe4:	4a73      	ldr	r2, [pc, #460]	; (80091b4 <CheckAttachedButtons+0x324>)
 8008fe6:	7912      	ldrb	r2, [r2, #4]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d218      	bcs.n	800901e <CheckAttachedButtons+0x18e>
 8008fec:	4a71      	ldr	r2, [pc, #452]	; (80091b4 <CheckAttachedButtons+0x324>)
 8008fee:	7952      	ldrb	r2, [r2, #5]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d914      	bls.n	800901e <CheckAttachedButtons+0x18e>
							clicked =3;	// Record a possible double click
 8008ff4:	4b6e      	ldr	r3, [pc, #440]	; (80091b0 <CheckAttachedButtons+0x320>)
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	701a      	strb	r2, [r3, #0]
							dblCounter[i] =0;	// Reset the inter-click counter
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	700b      	strb	r3, [r1, #0]
 8008ffe:	e00e      	b.n	800901e <CheckAttachedButtons+0x18e>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 8009000:	3bf5      	subs	r3, #245	; 0xf5
 8009002:	3bff      	subs	r3, #255	; 0xff
 8009004:	4a6c      	ldr	r2, [pc, #432]	; (80091b8 <CheckAttachedButtons+0x328>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d809      	bhi.n	800901e <CheckAttachedButtons+0x18e>
					if(clicked)
 800900a:	4b69      	ldr	r3, [pc, #420]	; (80091b0 <CheckAttachedButtons+0x320>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <CheckAttachedButtons+0x188>
						clicked =0;						// Cannot be a click
 8009012:	4b67      	ldr	r3, [pc, #412]	; (80091b0 <CheckAttachedButtons+0x320>)
 8009014:	2200      	movs	r2, #0
 8009016:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8009018:	0020      	movs	r0, r4
 800901a:	f7ff f945 	bl	80082a8 <CheckForTimedButtonPress>
			if(releaseCounter[i] < BOS.buttons.debounce){
 800901e:	0031      	movs	r1, r6
 8009020:	6832      	ldr	r2, [r6, #0]
 8009022:	4b64      	ldr	r3, [pc, #400]	; (80091b4 <CheckAttachedButtons+0x324>)
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d349      	bcc.n	80090be <CheckAttachedButtons+0x22e>
				if(releaseCounter[i] == BOS.buttons.debounce){
 800902a:	d028      	beq.n	800907e <CheckAttachedButtons+0x1ee>
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	4293      	cmp	r3, r2
 8009030:	d201      	bcs.n	8009036 <CheckAttachedButtons+0x1a6>
					pressCounter[i] =0;
 8009032:	2300      	movs	r3, #0
 8009034:	603b      	str	r3, [r7, #0]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 8009036:	680b      	ldr	r3, [r1, #0]
 8009038:	4a5e      	ldr	r2, [pc, #376]	; (80091b4 <CheckAttachedButtons+0x324>)
 800903a:	8852      	ldrh	r2, [r2, #2]
 800903c:	4293      	cmp	r3, r2
 800903e:	d939      	bls.n	80090b4 <CheckAttachedButtons+0x224>
 8009040:	22fa      	movs	r2, #250	; 0xfa
 8009042:	0052      	lsls	r2, r2, #1
 8009044:	4293      	cmp	r3, r2
 8009046:	d235      	bcs.n	80090b4 <CheckAttachedButtons+0x224>
					if(clicked == 1){
 8009048:	4b59      	ldr	r3, [pc, #356]	; (80091b0 <CheckAttachedButtons+0x320>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d01c      	beq.n	800908a <CheckAttachedButtons+0x1fa>
					else if(clicked == 3){
 8009050:	2b03      	cmp	r3, #3
 8009052:	d134      	bne.n	80090be <CheckAttachedButtons+0x22e>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 8009054:	3303      	adds	r3, #3
 8009056:	4652      	mov	r2, sl
 8009058:	7013      	strb	r3, [r2, #0]
						clicked =0;			// Prepare for a single click
 800905a:	4b55      	ldr	r3, [pc, #340]	; (80091b0 <CheckAttachedButtons+0x320>)
 800905c:	2200      	movs	r2, #0
 800905e:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 8009060:	4b56      	ldr	r3, [pc, #344]	; (80091bc <CheckAttachedButtons+0x32c>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d13e      	bne.n	80090e6 <CheckAttachedButtons+0x256>
 8009068:	4653      	mov	r3, sl
 800906a:	7a1b      	ldrb	r3, [r3, #8]
 800906c:	079b      	lsls	r3, r3, #30
 800906e:	d53a      	bpl.n	80090e6 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8009070:	4b52      	ldr	r3, [pc, #328]	; (80091bc <CheckAttachedButtons+0x32c>)
 8009072:	2201      	movs	r2, #1
 8009074:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8009076:	0020      	movs	r0, r4
 8009078:	f7ff ff06 	bl	8008e88 <buttonDblClickedCallback>
 800907c:	e033      	b.n	80090e6 <CheckAttachedButtons+0x256>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800907e:	2208      	movs	r2, #8
 8009080:	4650      	mov	r0, sl
 8009082:	7002      	strb	r2, [r0, #0]
					++releaseCounter[i];
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	6032      	str	r2, [r6, #0]
 8009088:	e7d0      	b.n	800902c <CheckAttachedButtons+0x19c>
						button[i].state =CLICKED;	// Record a single button click event
 800908a:	3304      	adds	r3, #4
 800908c:	4652      	mov	r2, sl
 800908e:	7013      	strb	r3, [r2, #0]
						clicked =2;			// Prepare for a double click
 8009090:	4b47      	ldr	r3, [pc, #284]	; (80091b0 <CheckAttachedButtons+0x320>)
 8009092:	2202      	movs	r2, #2
 8009094:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 8009096:	4b49      	ldr	r3, [pc, #292]	; (80091bc <CheckAttachedButtons+0x32c>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d123      	bne.n	80090e6 <CheckAttachedButtons+0x256>
 800909e:	4653      	mov	r3, sl
 80090a0:	7a1b      	ldrb	r3, [r3, #8]
 80090a2:	07db      	lsls	r3, r3, #31
 80090a4:	d51f      	bpl.n	80090e6 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 80090a6:	4b45      	ldr	r3, [pc, #276]	; (80091bc <CheckAttachedButtons+0x32c>)
 80090a8:	2201      	movs	r2, #1
 80090aa:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 80090ac:	0020      	movs	r0, r4
 80090ae:	f7ff feea 	bl	8008e86 <buttonClickedCallback>
 80090b2:	e018      	b.n	80090e6 <CheckAttachedButtons+0x256>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 80090b4:	3bf5      	subs	r3, #245	; 0xf5
 80090b6:	3bff      	subs	r3, #255	; 0xff
 80090b8:	4a3f      	ldr	r2, [pc, #252]	; (80091b8 <CheckAttachedButtons+0x328>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d909      	bls.n	80090d2 <CheckAttachedButtons+0x242>
			switch(button[i].state){
 80090be:	4653      	mov	r3, sl
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	3b05      	subs	r3, #5
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	2a09      	cmp	r2, #9
 80090c8:	d80d      	bhi.n	80090e6 <CheckAttachedButtons+0x256>
 80090ca:	0093      	lsls	r3, r2, #2
 80090cc:	4a3c      	ldr	r2, [pc, #240]	; (80091c0 <CheckAttachedButtons+0x330>)
 80090ce:	58d3      	ldr	r3, [r2, r3]
 80090d0:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 80090d2:	0020      	movs	r0, r4
 80090d4:	f7ff f926 	bl	8008324 <CheckForTimedButtonRelease>
 80090d8:	e7f1      	b.n	80090be <CheckAttachedButtons+0x22e>
					buttonPressedCallback(i);
 80090da:	0020      	movs	r0, r4
 80090dc:	f7ff f8e2 	bl	80082a4 <buttonPressedCallback>
					button[i].state =NONE;
 80090e0:	2300      	movs	r3, #0
 80090e2:	4652      	mov	r2, sl
 80090e4:	7013      	strb	r3, [r2, #0]
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80090e6:	3401      	adds	r4, #1
 80090e8:	b2e4      	uxtb	r4, r4
 80090ea:	3509      	adds	r5, #9
 80090ec:	3604      	adds	r6, #4
 80090ee:	2304      	movs	r3, #4
 80090f0:	469c      	mov	ip, r3
 80090f2:	44e0      	add	r8, ip
 80090f4:	3b03      	subs	r3, #3
 80090f6:	469c      	mov	ip, r3
 80090f8:	44e1      	add	r9, ip
 80090fa:	2c07      	cmp	r4, #7
 80090fc:	d100      	bne.n	8009100 <CheckAttachedButtons+0x270>
 80090fe:	e0d1      	b.n	80092a4 <CheckAttachedButtons+0x414>
		if(button[i].type)			// Only check defined butons
 8009100:	46aa      	mov	sl, r5
 8009102:	786b      	ldrb	r3, [r5, #1]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0ee      	beq.n	80090e6 <CheckAttachedButtons+0x256>
			if(delayButtonStateReset == false)
 8009108:	4b2c      	ldr	r3, [pc, #176]	; (80091bc <CheckAttachedButtons+0x32c>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d100      	bne.n	8009112 <CheckAttachedButtons+0x282>
				button[i].state =NONE;
 8009110:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8009112:	230e      	movs	r3, #14
 8009114:	aa02      	add	r2, sp, #8
 8009116:	4694      	mov	ip, r2
 8009118:	4463      	add	r3, ip
 800911a:	469b      	mov	fp, r3
 800911c:	af05      	add	r7, sp, #20
 800911e:	9700      	str	r7, [sp, #0]
 8009120:	ab06      	add	r3, sp, #24
 8009122:	465a      	mov	r2, fp
 8009124:	a907      	add	r1, sp, #28
 8009126:	0020      	movs	r0, r4
 8009128:	f004 fb58 	bl	800d7dc <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 800912c:	465b      	mov	r3, fp
 800912e:	8819      	ldrh	r1, [r3, #0]
 8009130:	2200      	movs	r2, #0
 8009132:	9807      	ldr	r0, [sp, #28]
 8009134:	f009 f87a 	bl	801222c <HAL_GPIO_WritePin>
			Delay_us(10);
 8009138:	200a      	movs	r0, #10
 800913a:	f004 fee3 	bl	800df04 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 800913e:	8839      	ldrh	r1, [r7, #0]
 8009140:	9806      	ldr	r0, [sp, #24]
 8009142:	f009 f86d 	bl	8012220 <HAL_GPIO_ReadPin>
 8009146:	2800      	cmp	r0, #0
 8009148:	d100      	bne.n	800914c <CheckAttachedButtons+0x2bc>
 800914a:	e6b7      	b.n	8008ebc <CheckAttachedButtons+0x2c>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 800914c:	230e      	movs	r3, #14
 800914e:	aa02      	add	r2, sp, #8
 8009150:	4694      	mov	ip, r2
 8009152:	4463      	add	r3, ip
 8009154:	8819      	ldrh	r1, [r3, #0]
 8009156:	2200      	movs	r2, #0
 8009158:	9807      	ldr	r0, [sp, #28]
 800915a:	f009 f867 	bl	801222c <HAL_GPIO_WritePin>
			switch(button[i].type){
 800915e:	4653      	mov	r3, sl
 8009160:	785b      	ldrb	r3, [r3, #1]
 8009162:	2b03      	cmp	r3, #3
 8009164:	d100      	bne.n	8009168 <CheckAttachedButtons+0x2d8>
 8009166:	e6ef      	b.n	8008f48 <CheckAttachedButtons+0xb8>
 8009168:	d900      	bls.n	800916c <CheckAttachedButtons+0x2dc>
 800916a:	e6ba      	b.n	8008ee2 <CheckAttachedButtons+0x52>
 800916c:	2b01      	cmp	r3, #1
 800916e:	d100      	bne.n	8009172 <CheckAttachedButtons+0x2e2>
 8009170:	e6c2      	b.n	8008ef8 <CheckAttachedButtons+0x68>
 8009172:	2b02      	cmp	r3, #2
 8009174:	d000      	beq.n	8009178 <CheckAttachedButtons+0x2e8>
 8009176:	e6c5      	b.n	8008f04 <CheckAttachedButtons+0x74>
					if(connected == GPIO_PIN_SET)
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d100      	bne.n	8009180 <CheckAttachedButtons+0x2f0>
 800917e:	e713      	b.n	8008fa8 <CheckAttachedButtons+0x118>
					else if(connected == GPIO_PIN_RESET)
 8009180:	2b00      	cmp	r3, #0
 8009182:	d000      	beq.n	8009186 <CheckAttachedButtons+0x2f6>
 8009184:	e6be      	b.n	8008f04 <CheckAttachedButtons+0x74>
						state =OPEN;
 8009186:	2303      	movs	r3, #3
 8009188:	9302      	str	r3, [sp, #8]
 800918a:	e6c5      	b.n	8008f18 <CheckAttachedButtons+0x88>
					buttonReleasedCallback(i);
 800918c:	0020      	movs	r0, r4
 800918e:	f7ff fe79 	bl	8008e84 <buttonReleasedCallback>
					button[i].state =NONE;
 8009192:	2300      	movs	r3, #0
 8009194:	4652      	mov	r2, sl
 8009196:	7013      	strb	r3, [r2, #0]
					break;
 8009198:	e7a5      	b.n	80090e6 <CheckAttachedButtons+0x256>
 800919a:	46c0      	nop			; (mov r8, r8)
 800919c:	20001524 	.word	0x20001524
 80091a0:	20001594 	.word	0x20001594
 80091a4:	20001578 	.word	0x20001578
 80091a8:	20001568 	.word	0x20001568
 80091ac:	0000fffe 	.word	0x0000fffe
 80091b0:	20001563 	.word	0x20001563
 80091b4:	20006aa8 	.word	0x20006aa8
 80091b8:	0000fe0a 	.word	0x0000fe0a
 80091bc:	2000156f 	.word	0x2000156f
 80091c0:	0801cde8 	.word	0x0801cde8
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 80091c4:	4b3b      	ldr	r3, [pc, #236]	; (80092b4 <CheckAttachedButtons+0x424>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d18c      	bne.n	80090e6 <CheckAttachedButtons+0x256>
 80091cc:	4653      	mov	r3, sl
 80091ce:	7a1b      	ldrb	r3, [r3, #8]
 80091d0:	075b      	lsls	r3, r3, #29
 80091d2:	d588      	bpl.n	80090e6 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 80091d4:	4b37      	ldr	r3, [pc, #220]	; (80092b4 <CheckAttachedButtons+0x424>)
 80091d6:	2201      	movs	r2, #1
 80091d8:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 80091da:	2101      	movs	r1, #1
 80091dc:	0020      	movs	r0, r4
 80091de:	f7ff fe54 	bl	8008e8a <buttonPressedForXCallback>
 80091e2:	e780      	b.n	80090e6 <CheckAttachedButtons+0x256>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 80091e4:	4b33      	ldr	r3, [pc, #204]	; (80092b4 <CheckAttachedButtons+0x424>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d000      	beq.n	80091ee <CheckAttachedButtons+0x35e>
 80091ec:	e77b      	b.n	80090e6 <CheckAttachedButtons+0x256>
 80091ee:	4653      	mov	r3, sl
 80091f0:	7a1b      	ldrb	r3, [r3, #8]
 80091f2:	071b      	lsls	r3, r3, #28
 80091f4:	d400      	bmi.n	80091f8 <CheckAttachedButtons+0x368>
 80091f6:	e776      	b.n	80090e6 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 80091f8:	4b2e      	ldr	r3, [pc, #184]	; (80092b4 <CheckAttachedButtons+0x424>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 80091fe:	2102      	movs	r1, #2
 8009200:	0020      	movs	r0, r4
 8009202:	f7ff fe42 	bl	8008e8a <buttonPressedForXCallback>
 8009206:	e76e      	b.n	80090e6 <CheckAttachedButtons+0x256>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8009208:	4b2a      	ldr	r3, [pc, #168]	; (80092b4 <CheckAttachedButtons+0x424>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d000      	beq.n	8009212 <CheckAttachedButtons+0x382>
 8009210:	e769      	b.n	80090e6 <CheckAttachedButtons+0x256>
 8009212:	4653      	mov	r3, sl
 8009214:	7a1b      	ldrb	r3, [r3, #8]
 8009216:	06db      	lsls	r3, r3, #27
 8009218:	d400      	bmi.n	800921c <CheckAttachedButtons+0x38c>
 800921a:	e764      	b.n	80090e6 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 800921c:	4b25      	ldr	r3, [pc, #148]	; (80092b4 <CheckAttachedButtons+0x424>)
 800921e:	2201      	movs	r2, #1
 8009220:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8009222:	2103      	movs	r1, #3
 8009224:	0020      	movs	r0, r4
 8009226:	f7ff fe30 	bl	8008e8a <buttonPressedForXCallback>
 800922a:	e75c      	b.n	80090e6 <CheckAttachedButtons+0x256>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 800922c:	4b21      	ldr	r3, [pc, #132]	; (80092b4 <CheckAttachedButtons+0x424>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d000      	beq.n	8009236 <CheckAttachedButtons+0x3a6>
 8009234:	e757      	b.n	80090e6 <CheckAttachedButtons+0x256>
 8009236:	4653      	mov	r3, sl
 8009238:	7a1b      	ldrb	r3, [r3, #8]
 800923a:	069b      	lsls	r3, r3, #26
 800923c:	d400      	bmi.n	8009240 <CheckAttachedButtons+0x3b0>
 800923e:	e752      	b.n	80090e6 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8009240:	4b1c      	ldr	r3, [pc, #112]	; (80092b4 <CheckAttachedButtons+0x424>)
 8009242:	2201      	movs	r2, #1
 8009244:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 8009246:	2101      	movs	r1, #1
 8009248:	0020      	movs	r0, r4
 800924a:	f7ff fe1f 	bl	8008e8c <buttonReleasedForYCallback>
 800924e:	e74a      	b.n	80090e6 <CheckAttachedButtons+0x256>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 8009250:	4b18      	ldr	r3, [pc, #96]	; (80092b4 <CheckAttachedButtons+0x424>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d000      	beq.n	800925a <CheckAttachedButtons+0x3ca>
 8009258:	e745      	b.n	80090e6 <CheckAttachedButtons+0x256>
 800925a:	4653      	mov	r3, sl
 800925c:	7a1b      	ldrb	r3, [r3, #8]
 800925e:	065b      	lsls	r3, r3, #25
 8009260:	d400      	bmi.n	8009264 <CheckAttachedButtons+0x3d4>
 8009262:	e740      	b.n	80090e6 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8009264:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <CheckAttachedButtons+0x424>)
 8009266:	2201      	movs	r2, #1
 8009268:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 800926a:	2102      	movs	r1, #2
 800926c:	0020      	movs	r0, r4
 800926e:	f7ff fe0d 	bl	8008e8c <buttonReleasedForYCallback>
 8009272:	e738      	b.n	80090e6 <CheckAttachedButtons+0x256>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 8009274:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <CheckAttachedButtons+0x424>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d000      	beq.n	800927e <CheckAttachedButtons+0x3ee>
 800927c:	e733      	b.n	80090e6 <CheckAttachedButtons+0x256>
 800927e:	4653      	mov	r3, sl
 8009280:	7a1b      	ldrb	r3, [r3, #8]
 8009282:	2b7f      	cmp	r3, #127	; 0x7f
 8009284:	d800      	bhi.n	8009288 <CheckAttachedButtons+0x3f8>
 8009286:	e72e      	b.n	80090e6 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <CheckAttachedButtons+0x424>)
 800928a:	2201      	movs	r2, #1
 800928c:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 800928e:	2103      	movs	r1, #3
 8009290:	0020      	movs	r0, r4
 8009292:	f7ff fdfb 	bl	8008e8c <buttonReleasedForYCallback>
 8009296:	e726      	b.n	80090e6 <CheckAttachedButtons+0x256>
						state =OPEN;
 8009298:	2303      	movs	r3, #3
 800929a:	9302      	str	r3, [sp, #8]
 800929c:	e63c      	b.n	8008f18 <CheckAttachedButtons+0x88>
						state =OFF;
 800929e:	9b03      	ldr	r3, [sp, #12]
 80092a0:	9302      	str	r3, [sp, #8]
			if(state == OPEN || state == OFF){
 80092a2:	e639      	b.n	8008f18 <CheckAttachedButtons+0x88>
}
 80092a4:	b009      	add	sp, #36	; 0x24
 80092a6:	bcf0      	pop	{r4, r5, r6, r7}
 80092a8:	46bb      	mov	fp, r7
 80092aa:	46b2      	mov	sl, r6
 80092ac:	46a9      	mov	r9, r5
 80092ae:	46a0      	mov	r8, r4
 80092b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b2:	46c0      	nop			; (mov r8, r8)
 80092b4:	2000156f 	.word	0x2000156f

080092b8 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 80092b8:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 80092ba:	f007 f953 	bl	8010564 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 80092be:	b2c4      	uxtb	r4, r0
 80092c0:	0020      	movs	r0, r4
 80092c2:	f7fe fa0d 	bl	80076e0 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 80092c6:	0020      	movs	r0, r4
 80092c8:	f7fe fa38 	bl	800773c <SwitchStreamDMAToMsg>
}
 80092cc:	bd10      	pop	{r4, pc}
	...

080092d0 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	0005      	movs	r5, r0
 80092d6:	000c      	movs	r4, r1
 80092d8:	0016      	movs	r6, r2
 80092da:	220f      	movs	r2, #15
 80092dc:	446a      	add	r2, sp
 80092de:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80092e0:	aa08      	add	r2, sp, #32
 80092e2:	7810      	ldrb	r0, [r2, #0]
 80092e4:	4283      	cmp	r3, r0
 80092e6:	d057      	beq.n	8009398 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d100      	bne.n	80092ee <SetupDMAStreams+0x1e>
 80092ec:	e0ba      	b.n	8009464 <SetupDMAStreams+0x194>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d100      	bne.n	80092f4 <SetupDMAStreams+0x24>
 80092f2:	e0ba      	b.n	800946a <SetupDMAStreams+0x19a>
	if(direction == FORWARD){
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	d054      	beq.n	80093a2 <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 80092f8:	2d01      	cmp	r5, #1
 80092fa:	d100      	bne.n	80092fe <SetupDMAStreams+0x2e>
 80092fc:	e089      	b.n	8009412 <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 80092fe:	2067      	movs	r0, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8009300:	2d02      	cmp	r5, #2
 8009302:	d000      	beq.n	8009306 <SetupDMAStreams+0x36>
 8009304:	e0af      	b.n	8009466 <SetupDMAStreams+0x196>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009306:	0018      	movs	r0, r3
 8009308:	f004 fff4 	bl	800e2f4 <GetUart>
 800930c:	0005      	movs	r5, r0
 800930e:	ab08      	add	r3, sp, #32
 8009310:	7818      	ldrb	r0, [r3, #0]
 8009312:	f004 ffef 	bl	800e2f4 <GetUart>
 8009316:	0001      	movs	r1, r0
 8009318:	2201      	movs	r2, #1
 800931a:	0028      	movs	r0, r5
 800931c:	f7fe fa44 	bl	80077a8 <StartDMAstream>
 8009320:	2817      	cmp	r0, #23
 8009322:	d100      	bne.n	8009326 <SetupDMAStreams+0x56>
 8009324:	e09f      	b.n	8009466 <SetupDMAStreams+0x196>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009326:	0170      	lsls	r0, r6, #5
 8009328:	1b80      	subs	r0, r0, r6
 800932a:	0080      	lsls	r0, r0, #2
 800932c:	1980      	adds	r0, r0, r6
 800932e:	00c0      	lsls	r0, r0, #3
 8009330:	21fa      	movs	r1, #250	; 0xfa
 8009332:	0089      	lsls	r1, r1, #2
 8009334:	f7f6 ff0c 	bl	8000150 <__udivsi3>
 8009338:	0005      	movs	r5, r0
 800933a:	4b4d      	ldr	r3, [pc, #308]	; (8009470 <SetupDMAStreams+0x1a0>)
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	230f      	movs	r3, #15
 8009340:	446b      	add	r3, sp
 8009342:	2200      	movs	r2, #0
 8009344:	0001      	movs	r1, r0
 8009346:	484b      	ldr	r0, [pc, #300]	; (8009474 <SetupDMAStreams+0x1a4>)
 8009348:	f006 ffb0 	bl	80102ac <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 800934c:	466b      	mov	r3, sp
 800934e:	7bdb      	ldrb	r3, [r3, #15]
 8009350:	3b01      	subs	r3, #1
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4a48      	ldr	r2, [pc, #288]	; (8009478 <SetupDMAStreams+0x1a8>)
 8009356:	509c      	str	r4, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009358:	ab08      	add	r3, sp, #32
 800935a:	7818      	ldrb	r0, [r3, #0]
 800935c:	f004 ffca 	bl	800e2f4 <GetUart>
 8009360:	0006      	movs	r6, r0
 8009362:	466b      	mov	r3, sp
 8009364:	7bd8      	ldrb	r0, [r3, #15]
 8009366:	f004 ffc5 	bl	800e2f4 <GetUart>
 800936a:	0001      	movs	r1, r0
 800936c:	2201      	movs	r2, #1
 800936e:	0030      	movs	r0, r6
 8009370:	f7fe fa1a 	bl	80077a8 <StartDMAstream>
 8009374:	2817      	cmp	r0, #23
 8009376:	d076      	beq.n	8009466 <SetupDMAStreams+0x196>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009378:	4b3d      	ldr	r3, [pc, #244]	; (8009470 <SetupDMAStreams+0x1a0>)
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	ab08      	add	r3, sp, #32
 800937e:	2200      	movs	r2, #0
 8009380:	0029      	movs	r1, r5
 8009382:	483c      	ldr	r0, [pc, #240]	; (8009474 <SetupDMAStreams+0x1a4>)
 8009384:	f006 ff92 	bl	80102ac <xTimerCreate>
 8009388:	0006      	movs	r6, r0
		dmaStreamTotal[dst - 1] =count;
 800938a:	ab08      	add	r3, sp, #32
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	3b01      	subs	r3, #1
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4a39      	ldr	r2, [pc, #228]	; (8009478 <SetupDMAStreams+0x1a8>)
 8009394:	509c      	str	r4, [r3, r2]
 8009396:	e02c      	b.n	80093f2 <SetupDMAStreams+0x122>
		portStatus[src] =STREAM;
 8009398:	4a38      	ldr	r2, [pc, #224]	; (800947c <SetupDMAStreams+0x1ac>)
 800939a:	2102      	movs	r1, #2
 800939c:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 800939e:	2067      	movs	r0, #103	; 0x67
 80093a0:	e061      	b.n	8009466 <SetupDMAStreams+0x196>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80093a2:	0018      	movs	r0, r3
 80093a4:	f004 ffa6 	bl	800e2f4 <GetUart>
 80093a8:	0005      	movs	r5, r0
 80093aa:	ab08      	add	r3, sp, #32
 80093ac:	7818      	ldrb	r0, [r3, #0]
 80093ae:	f004 ffa1 	bl	800e2f4 <GetUart>
 80093b2:	0001      	movs	r1, r0
 80093b4:	2201      	movs	r2, #1
 80093b6:	0028      	movs	r0, r5
 80093b8:	f7fe f9f6 	bl	80077a8 <StartDMAstream>
 80093bc:	2817      	cmp	r0, #23
 80093be:	d052      	beq.n	8009466 <SetupDMAStreams+0x196>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80093c0:	250f      	movs	r5, #15
 80093c2:	446d      	add	r5, sp
 80093c4:	0170      	lsls	r0, r6, #5
 80093c6:	1b80      	subs	r0, r0, r6
 80093c8:	0080      	lsls	r0, r0, #2
 80093ca:	1980      	adds	r0, r0, r6
 80093cc:	00c0      	lsls	r0, r0, #3
 80093ce:	21fa      	movs	r1, #250	; 0xfa
 80093d0:	0089      	lsls	r1, r1, #2
 80093d2:	f7f6 febd 	bl	8000150 <__udivsi3>
 80093d6:	0001      	movs	r1, r0
 80093d8:	4b25      	ldr	r3, [pc, #148]	; (8009470 <SetupDMAStreams+0x1a0>)
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	002b      	movs	r3, r5
 80093de:	2200      	movs	r2, #0
 80093e0:	4824      	ldr	r0, [pc, #144]	; (8009474 <SetupDMAStreams+0x1a4>)
 80093e2:	f006 ff63 	bl	80102ac <xTimerCreate>
 80093e6:	0006      	movs	r6, r0
		dmaStreamTotal[src - 1] =count;
 80093e8:	782b      	ldrb	r3, [r5, #0]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4a22      	ldr	r2, [pc, #136]	; (8009478 <SetupDMAStreams+0x1a8>)
 80093f0:	509c      	str	r4, [r3, r2]
	return BOS_OK;
 80093f2:	2000      	movs	r0, #0
	if(xTimerStream != NULL)
 80093f4:	2e00      	cmp	r6, #0
 80093f6:	d036      	beq.n	8009466 <SetupDMAStreams+0x196>
		xTimerStart(xTimerStream,portMAX_DELAY);
 80093f8:	f006 f952 	bl	800f6a0 <xTaskGetTickCount>
 80093fc:	0002      	movs	r2, r0
 80093fe:	2301      	movs	r3, #1
 8009400:	425b      	negs	r3, r3
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	2300      	movs	r3, #0
 8009406:	2101      	movs	r1, #1
 8009408:	0030      	movs	r0, r6
 800940a:	f006 ff6f 	bl	80102ec <xTimerGenericCommand>
	return BOS_OK;
 800940e:	2000      	movs	r0, #0
 8009410:	e029      	b.n	8009466 <SetupDMAStreams+0x196>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009412:	f004 ff6f 	bl	800e2f4 <GetUart>
 8009416:	0005      	movs	r5, r0
 8009418:	230f      	movs	r3, #15
 800941a:	446b      	add	r3, sp
 800941c:	7818      	ldrb	r0, [r3, #0]
 800941e:	f004 ff69 	bl	800e2f4 <GetUart>
 8009422:	0001      	movs	r1, r0
 8009424:	2201      	movs	r2, #1
 8009426:	0028      	movs	r0, r5
 8009428:	f7fe f9be 	bl	80077a8 <StartDMAstream>
 800942c:	2817      	cmp	r0, #23
 800942e:	d01a      	beq.n	8009466 <SetupDMAStreams+0x196>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009430:	0170      	lsls	r0, r6, #5
 8009432:	1b80      	subs	r0, r0, r6
 8009434:	0080      	lsls	r0, r0, #2
 8009436:	1980      	adds	r0, r0, r6
 8009438:	00c0      	lsls	r0, r0, #3
 800943a:	21fa      	movs	r1, #250	; 0xfa
 800943c:	0089      	lsls	r1, r1, #2
 800943e:	f7f6 fe87 	bl	8000150 <__udivsi3>
 8009442:	0001      	movs	r1, r0
 8009444:	4b0a      	ldr	r3, [pc, #40]	; (8009470 <SetupDMAStreams+0x1a0>)
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	ab08      	add	r3, sp, #32
 800944a:	2200      	movs	r2, #0
 800944c:	4809      	ldr	r0, [pc, #36]	; (8009474 <SetupDMAStreams+0x1a4>)
 800944e:	f006 ff2d 	bl	80102ac <xTimerCreate>
 8009452:	0006      	movs	r6, r0
		dmaStreamTotal[src - 1] =count;
 8009454:	230f      	movs	r3, #15
 8009456:	446b      	add	r3, sp
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	3b01      	subs	r3, #1
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4a06      	ldr	r2, [pc, #24]	; (8009478 <SetupDMAStreams+0x1a8>)
 8009460:	509c      	str	r4, [r3, r2]
 8009462:	e7c6      	b.n	80093f2 <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 8009464:	2067      	movs	r0, #103	; 0x67
}
 8009466:	b004      	add	sp, #16
 8009468:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 800946a:	2067      	movs	r0, #103	; 0x67
 800946c:	e7fb      	b.n	8009466 <SetupDMAStreams+0x196>
 800946e:	46c0      	nop			; (mov r8, r8)
 8009470:	080092b9 	.word	0x080092b9
 8009474:	0801ce10 	.word	0x0801ce10
 8009478:	200014c8 	.word	0x200014c8
 800947c:	20001100 	.word	0x20001100

08009480 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8009480:	b510      	push	{r4, lr}
	switch(port){
 8009482:	2806      	cmp	r0, #6
 8009484:	d80a      	bhi.n	800949c <NotifyMessagingTask+0x1c>
 8009486:	0080      	lsls	r0, r0, #2
 8009488:	4b19      	ldr	r3, [pc, #100]	; (80094f0 <NotifyMessagingTask+0x70>)
 800948a:	581b      	ldr	r3, [r3, r0]
 800948c:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 800948e:	4b19      	ldr	r3, [pc, #100]	; (80094f4 <NotifyMessagingTask+0x74>)
 8009490:	6818      	ldr	r0, [r3, #0]
 8009492:	2300      	movs	r3, #0
 8009494:	2202      	movs	r2, #2
 8009496:	2100      	movs	r1, #0
 8009498:	f006 fe36 	bl	8010108 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 800949c:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 800949e:	4b16      	ldr	r3, [pc, #88]	; (80094f8 <NotifyMessagingTask+0x78>)
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	2300      	movs	r3, #0
 80094a4:	2202      	movs	r2, #2
 80094a6:	2100      	movs	r1, #0
 80094a8:	f006 fe2e 	bl	8010108 <xTaskGenericNotify>
			break;
 80094ac:	e7f6      	b.n	800949c <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <NotifyMessagingTask+0x7c>)
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	2300      	movs	r3, #0
 80094b4:	2202      	movs	r2, #2
 80094b6:	2100      	movs	r1, #0
 80094b8:	f006 fe26 	bl	8010108 <xTaskGenericNotify>
			break;
 80094bc:	e7ee      	b.n	800949c <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 80094be:	4b10      	ldr	r3, [pc, #64]	; (8009500 <NotifyMessagingTask+0x80>)
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	2300      	movs	r3, #0
 80094c4:	2202      	movs	r2, #2
 80094c6:	2100      	movs	r1, #0
 80094c8:	f006 fe1e 	bl	8010108 <xTaskGenericNotify>
			break;
 80094cc:	e7e6      	b.n	800949c <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 80094ce:	4b0d      	ldr	r3, [pc, #52]	; (8009504 <NotifyMessagingTask+0x84>)
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	2300      	movs	r3, #0
 80094d4:	2202      	movs	r2, #2
 80094d6:	2100      	movs	r1, #0
 80094d8:	f006 fe16 	bl	8010108 <xTaskGenericNotify>
			break;
 80094dc:	e7de      	b.n	800949c <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle)
 80094de:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <NotifyMessagingTask+0x88>)
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	2300      	movs	r3, #0
 80094e4:	2202      	movs	r2, #2
 80094e6:	2100      	movs	r1, #0
 80094e8:	f006 fe0e 	bl	8010108 <xTaskGenericNotify>
}
 80094ec:	e7d6      	b.n	800949c <NotifyMessagingTask+0x1c>
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	0801ce1c 	.word	0x0801ce1c
 80094f4:	200014e8 	.word	0x200014e8
 80094f8:	200014ec 	.word	0x200014ec
 80094fc:	200014f0 	.word	0x200014f0
 8009500:	200014f4 	.word	0x200014f4
 8009504:	200014f8 	.word	0x200014f8
 8009508:	200014fc 	.word	0x200014fc

0800950c <SendMessageFromPort>:
 6   !0        0					!0							Either single-cast message with myID as source module OR (if code == 0)
 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7   !0        !0				0								Not allowed.
 8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800950c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950e:	46de      	mov	lr, fp
 8009510:	4657      	mov	r7, sl
 8009512:	464e      	mov	r6, r9
 8009514:	4645      	mov	r5, r8
 8009516:	b5e0      	push	{r5, r6, r7, lr}
 8009518:	b085      	sub	sp, #20
 800951a:	0005      	movs	r5, r0
 800951c:	9102      	str	r1, [sp, #8]
 800951e:	0014      	movs	r4, r2
 8009520:	001e      	movs	r6, r3
 8009522:	ab0e      	add	r3, sp, #56	; 0x38
 8009524:	881f      	ldrh	r7, [r3, #0]
	static uint16_t ptrShift =0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009526:	0003      	movs	r3, r0
 8009528:	4313      	orrs	r3, r2
 800952a:	d100      	bne.n	800952e <SendMessageFromPort+0x22>
 800952c:	e173      	b.n	8009816 <SendMessageFromPort+0x30a>
 800952e:	2800      	cmp	r0, #0
 8009530:	d14c      	bne.n	80095cc <SendMessageFromPort+0xc0>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009532:	2afd      	cmp	r2, #253	; 0xfd
 8009534:	d800      	bhi.n	8009538 <SendMessageFromPort+0x2c>
 8009536:	e170      	b.n	800981a <SendMessageFromPort+0x30e>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 8009538:	2000      	movs	r0, #0
 800953a:	f006 f813 	bl	800f564 <uxTaskPriorityGet>
 800953e:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009540:	2105      	movs	r1, #5
 8009542:	2000      	movs	r0, #0
 8009544:	f006 f81e 	bl	800f584 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 8009548:	4bbf      	ldr	r3, [pc, #764]	; (8009848 <SendMessageFromPort+0x33c>)
 800954a:	2248      	movs	r2, #72	; 0x48
 800954c:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 800954e:	3212      	adds	r2, #18
 8009550:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009552:	9b02      	ldr	r3, [sp, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d000      	beq.n	800955a <SendMessageFromPort+0x4e>
 8009558:	e172      	b.n	8009840 <SendMessageFromPort+0x334>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 800955a:	1e7b      	subs	r3, r7, #1
 800955c:	4abb      	ldr	r2, [pc, #748]	; (800984c <SendMessageFromPort+0x340>)
 800955e:	5cd7      	ldrb	r7, [r2, r3]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8009560:	4abb      	ldr	r2, [pc, #748]	; (8009850 <SendMessageFromPort+0x344>)
 8009562:	4690      	mov	r8, r2
 8009564:	00d9      	lsls	r1, r3, #3
 8009566:	1ac9      	subs	r1, r1, r3
 8009568:	00c9      	lsls	r1, r1, #3
 800956a:	4bba      	ldr	r3, [pc, #744]	; (8009854 <SendMessageFromPort+0x348>)
 800956c:	18c9      	adds	r1, r1, r3
 800956e:	003a      	movs	r2, r7
 8009570:	4640      	mov	r0, r8
 8009572:	f00a fe4d 	bl	8014210 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8009576:	2303      	movs	r3, #3
 8009578:	425b      	negs	r3, r3
 800957a:	469c      	mov	ip, r3
 800957c:	44e0      	add	r8, ip
 800957e:	4643      	mov	r3, r8
 8009580:	709f      	strb	r7, [r3, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8009582:	1cfb      	adds	r3, r7, #3
 8009584:	469b      	mov	fp, r3
 8009586:	4bb4      	ldr	r3, [pc, #720]	; (8009858 <SendMessageFromPort+0x34c>)
 8009588:	469a      	mov	sl, r3
 800958a:	465a      	mov	r2, fp
 800958c:	4641      	mov	r1, r8
 800958e:	0018      	movs	r0, r3
 8009590:	f00a fe3e 	bl	8014210 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009594:	b2bb      	uxth	r3, r7
 8009596:	4699      	mov	r9, r3
 8009598:	4659      	mov	r1, fp
 800959a:	4650      	mov	r0, sl
 800959c:	f004 f8a2 	bl	800d6e4 <CalculateCRC8>
 80095a0:	4643      	mov	r3, r8
 80095a2:	465a      	mov	r2, fp
 80095a4:	5498      	strb	r0, [r3, r2]
	/* end of crc calculation function addition */

//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
	memset(crcBuffer,0,sizeof(crcBuffer));
 80095a6:	2238      	movs	r2, #56	; 0x38
 80095a8:	2100      	movs	r1, #0
 80095aa:	4650      	mov	r0, sl
 80095ac:	f00a fe39 	bl	8014222 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80095b0:	2cfd      	cmp	r4, #253	; 0xfd
 80095b2:	d800      	bhi.n	80095b6 <SendMessageFromPort+0xaa>
 80095b4:	e102      	b.n	80097bc <SendMessageFromPort+0x2b0>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else{
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80095b6:	2e00      	cmp	r6, #0
 80095b8:	d000      	beq.n	80095bc <SendMessageFromPort+0xb0>
 80095ba:	e0f5      	b.n	80097a8 <SendMessageFromPort+0x29c>
 80095bc:	9b02      	ldr	r3, [sp, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d000      	beq.n	80095c4 <SendMessageFromPort+0xb8>
 80095c2:	e0f1      	b.n	80097a8 <SendMessageFromPort+0x29c>
			src =message[4];
 80095c4:	4ba0      	ldr	r3, [pc, #640]	; (8009848 <SendMessageFromPort+0x33c>)
 80095c6:	791b      	ldrb	r3, [r3, #4]
 80095c8:	9302      	str	r3, [sp, #8]
 80095ca:	e0ed      	b.n	80097a8 <SendMessageFromPort+0x29c>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 80095cc:	9b02      	ldr	r3, [sp, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <SendMessageFromPort+0xcc>
 80095d2:	2a00      	cmp	r2, #0
 80095d4:	d100      	bne.n	80095d8 <SendMessageFromPort+0xcc>
 80095d6:	e122      	b.n	800981e <SendMessageFromPort+0x312>
	TaskPriority =uxTaskPriorityGet( NULL);
 80095d8:	2000      	movs	r0, #0
 80095da:	f005 ffc3 	bl	800f564 <uxTaskPriorityGet>
 80095de:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80095e0:	2105      	movs	r1, #5
 80095e2:	2000      	movs	r0, #0
 80095e4:	f005 ffce 	bl	800f584 <vTaskPrioritySet>
	message[0] ='H';
 80095e8:	4b97      	ldr	r3, [pc, #604]	; (8009848 <SendMessageFromPort+0x33c>)
 80095ea:	2248      	movs	r2, #72	; 0x48
 80095ec:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80095ee:	3212      	adds	r2, #18
 80095f0:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80095f2:	2e00      	cmp	r6, #0
 80095f4:	d0b1      	beq.n	800955a <SendMessageFromPort+0x4e>
		if(src == 0)
 80095f6:	9b02      	ldr	r3, [sp, #8]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d078      	beq.n	80096ee <SendMessageFromPort+0x1e2>
		message[2] =length;
 80095fc:	4992      	ldr	r1, [pc, #584]	; (8009848 <SendMessageFromPort+0x33c>)
 80095fe:	2300      	movs	r3, #0
 8009600:	708b      	strb	r3, [r1, #2]
		message[3] =dst;
 8009602:	70cc      	strb	r4, [r1, #3]
		message[4] =src;
 8009604:	9b02      	ldr	r3, [sp, #8]
 8009606:	710b      	strb	r3, [r1, #4]
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 8009608:	4a94      	ldr	r2, [pc, #592]	; (800985c <SendMessageFromPort+0x350>)
 800960a:	79d3      	ldrb	r3, [r2, #7]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	7992      	ldrb	r2, [r2, #6]
 8009610:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8009612:	22ff      	movs	r2, #255	; 0xff
 8009614:	42b2      	cmp	r2, r6
 8009616:	4192      	sbcs	r2, r2
 8009618:	4252      	negs	r2, r2
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 800961a:	0052      	lsls	r2, r2, #1
 800961c:	4313      	orrs	r3, r2
 800961e:	b2db      	uxtb	r3, r3
 8009620:	714b      	strb	r3, [r1, #5]
		message[6 + shift] =(uint8_t )code;
 8009622:	718e      	strb	r6, [r1, #6]
		if(extendCode == true){
 8009624:	2200      	movs	r2, #0
 8009626:	4693      	mov	fp, r2
 8009628:	2eff      	cmp	r6, #255	; 0xff
 800962a:	d903      	bls.n	8009634 <SendMessageFromPort+0x128>
			message[6 + shift] =(uint8_t )(code >> 8);
 800962c:	0a32      	lsrs	r2, r6, #8
 800962e:	71ca      	strb	r2, [r1, #7]
			++shift;
 8009630:	2201      	movs	r2, #1
 8009632:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8009634:	2f2e      	cmp	r7, #46	; 0x2e
 8009636:	d95e      	bls.n	80096f6 <SendMessageFromPort+0x1ea>
			message[5] |=0x80;
 8009638:	2280      	movs	r2, #128	; 0x80
 800963a:	4252      	negs	r2, r2
 800963c:	4313      	orrs	r3, r2
 800963e:	4a82      	ldr	r2, [pc, #520]	; (8009848 <SendMessageFromPort+0x33c>)
 8009640:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 8009642:	4b87      	ldr	r3, [pc, #540]	; (8009860 <SendMessageFromPort+0x354>)
 8009644:	801f      	strh	r7, [r3, #0]
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009646:	232e      	movs	r3, #46	; 0x2e
 8009648:	469a      	mov	sl, r3
					totalNumberOfParams -=numberOfParams;
 800964a:	4b85      	ldr	r3, [pc, #532]	; (8009860 <SendMessageFromPort+0x354>)
 800964c:	4699      	mov	r9, r3
					ptrShift +=numberOfParams;
 800964e:	4b85      	ldr	r3, [pc, #532]	; (8009864 <SendMessageFromPort+0x358>)
 8009650:	4698      	mov	r8, r3
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009652:	4653      	mov	r3, sl
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	0033      	movs	r3, r6
 8009658:	0022      	movs	r2, r4
 800965a:	9902      	ldr	r1, [sp, #8]
 800965c:	0028      	movs	r0, r5
 800965e:	f7ff ff55 	bl	800950c <SendMessageFromPort>
					osDelay(10);
 8009662:	200a      	movs	r0, #10
 8009664:	f004 ff97 	bl	800e596 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8009668:	464b      	mov	r3, r9
 800966a:	881f      	ldrh	r7, [r3, #0]
 800966c:	3f2e      	subs	r7, #46	; 0x2e
 800966e:	b2bf      	uxth	r7, r7
 8009670:	801f      	strh	r7, [r3, #0]
					ptrShift +=numberOfParams;
 8009672:	4643      	mov	r3, r8
 8009674:	8819      	ldrh	r1, [r3, #0]
 8009676:	312e      	adds	r1, #46	; 0x2e
 8009678:	b289      	uxth	r1, r1
 800967a:	8019      	strh	r1, [r3, #0]
			while(totalNumberOfParams != 0){
 800967c:	2f00      	cmp	r7, #0
 800967e:	d049      	beq.n	8009714 <SendMessageFromPort+0x208>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8009680:	2f2d      	cmp	r7, #45	; 0x2d
 8009682:	d8e6      	bhi.n	8009652 <SendMessageFromPort+0x146>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8009684:	4b70      	ldr	r3, [pc, #448]	; (8009848 <SendMessageFromPort+0x33c>)
 8009686:	7958      	ldrb	r0, [r3, #5]
 8009688:	227f      	movs	r2, #127	; 0x7f
 800968a:	4002      	ands	r2, r0
 800968c:	715a      	strb	r2, [r3, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800968e:	465a      	mov	r2, fp
 8009690:	1dd0      	adds	r0, r2, #7
 8009692:	18c0      	adds	r0, r0, r3
 8009694:	4b74      	ldr	r3, [pc, #464]	; (8009868 <SendMessageFromPort+0x35c>)
 8009696:	18c9      	adds	r1, r1, r3
 8009698:	003a      	movs	r2, r7
 800969a:	f00a fdb9 	bl	8014210 <memcpy>
					ptrShift =0;
 800969e:	2300      	movs	r3, #0
 80096a0:	4a70      	ldr	r2, [pc, #448]	; (8009864 <SendMessageFromPort+0x358>)
 80096a2:	8013      	strh	r3, [r2, #0]
					totalNumberOfParams =0;
 80096a4:	4a6e      	ldr	r2, [pc, #440]	; (8009860 <SendMessageFromPort+0x354>)
 80096a6:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 80096a8:	465b      	mov	r3, fp
 80096aa:	1d1e      	adds	r6, r3, #4
 80096ac:	19f6      	adds	r6, r6, r7
 80096ae:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true){
 80096b0:	4b6e      	ldr	r3, [pc, #440]	; (800986c <SendMessageFromPort+0x360>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d05c      	beq.n	8009772 <SendMessageFromPort+0x266>
			if(dstGroupID < BOS_BROADCAST){
 80096b8:	4b6d      	ldr	r3, [pc, #436]	; (8009870 <SendMessageFromPort+0x364>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2bff      	cmp	r3, #255	; 0xff
 80096be:	d100      	bne.n	80096c2 <SendMessageFromPort+0x1b6>
 80096c0:	e0af      	b.n	8009822 <SendMessageFromPort+0x316>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80096c2:	4a6c      	ldr	r2, [pc, #432]	; (8009874 <SendMessageFromPort+0x368>)
 80096c4:	7812      	ldrb	r2, [r2, #0]
 80096c6:	4690      	mov	r8, r2
 80096c8:	2a00      	cmp	r2, #0
 80096ca:	d075      	beq.n	80097b8 <SendMessageFromPort+0x2ac>
 80096cc:	2201      	movs	r2, #1
 80096ce:	409a      	lsls	r2, r3
 80096d0:	4694      	mov	ip, r2
 80096d2:	4869      	ldr	r0, [pc, #420]	; (8009878 <SendMessageFromPort+0x36c>)
 80096d4:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 80096d6:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80096d8:	495b      	ldr	r1, [pc, #364]	; (8009848 <SendMessageFromPort+0x33c>)
 80096da:	4689      	mov	r9, r1
 80096dc:	44b9      	add	r9, r7
 80096de:	0029      	movs	r1, r5
 80096e0:	4645      	mov	r5, r8
 80096e2:	46a2      	mov	sl, r4
 80096e4:	4664      	mov	r4, ip
 80096e6:	46b4      	mov	ip, r6
 80096e8:	465e      	mov	r6, fp
 80096ea:	4688      	mov	r8, r1
 80096ec:	e01e      	b.n	800972c <SendMessageFromPort+0x220>
			src =myID;
 80096ee:	4b63      	ldr	r3, [pc, #396]	; (800987c <SendMessageFromPort+0x370>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	9302      	str	r3, [sp, #8]
 80096f4:	e782      	b.n	80095fc <SendMessageFromPort+0xf0>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80096f6:	465b      	mov	r3, fp
 80096f8:	3307      	adds	r3, #7
 80096fa:	4853      	ldr	r0, [pc, #332]	; (8009848 <SendMessageFromPort+0x33c>)
 80096fc:	1818      	adds	r0, r3, r0
 80096fe:	4b59      	ldr	r3, [pc, #356]	; (8009864 <SendMessageFromPort+0x358>)
 8009700:	8819      	ldrh	r1, [r3, #0]
 8009702:	4b59      	ldr	r3, [pc, #356]	; (8009868 <SendMessageFromPort+0x35c>)
 8009704:	18c9      	adds	r1, r1, r3
 8009706:	003a      	movs	r2, r7
 8009708:	f00a fd82 	bl	8014210 <memcpy>
			length =numberOfParams + shift + 4;
 800970c:	1d3e      	adds	r6, r7, #4
 800970e:	445e      	add	r6, fp
 8009710:	b2f6      	uxtb	r6, r6
 8009712:	e7cd      	b.n	80096b0 <SendMessageFromPort+0x1a4>
 8009714:	2600      	movs	r6, #0
 8009716:	372e      	adds	r7, #46	; 0x2e
 8009718:	e7ca      	b.n	80096b0 <SendMessageFromPort+0x1a4>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800971a:	4649      	mov	r1, r9
 800971c:	1889      	adds	r1, r1, r2
 800971e:	1989      	adds	r1, r1, r6
 8009720:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009722:	3301      	adds	r3, #1
 8009724:	b29b      	uxth	r3, r3
 8009726:	3002      	adds	r0, #2
 8009728:	42ab      	cmp	r3, r5
 800972a:	d809      	bhi.n	8009740 <SendMessageFromPort+0x234>
					if(InGroup(i,dstGroupID)){
 800972c:	8801      	ldrh	r1, [r0, #0]
 800972e:	420c      	tst	r4, r1
 8009730:	d0f7      	beq.n	8009722 <SendMessageFromPort+0x216>
						++groupMembers;							// Add this member
 8009732:	3201      	adds	r2, #1
 8009734:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8009736:	18b9      	adds	r1, r7, r2
 8009738:	292c      	cmp	r1, #44	; 0x2c
 800973a:	ddee      	ble.n	800971a <SendMessageFromPort+0x20e>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 800973c:	2069      	movs	r0, #105	; 0x69
 800973e:	e04d      	b.n	80097dc <SendMessageFromPort+0x2d0>
 8009740:	46b3      	mov	fp, r6
 8009742:	4666      	mov	r6, ip
 8009744:	4645      	mov	r5, r8
 8009746:	4654      	mov	r4, sl
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8009748:	465b      	mov	r3, fp
 800974a:	3307      	adds	r3, #7
 800974c:	19db      	adds	r3, r3, r7
 800974e:	189b      	adds	r3, r3, r2
 8009750:	493d      	ldr	r1, [pc, #244]	; (8009848 <SendMessageFromPort+0x33c>)
 8009752:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8009754:	18bf      	adds	r7, r7, r2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009756:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8009758:	2f2b      	cmp	r7, #43	; 0x2b
 800975a:	dc3f      	bgt.n	80097dc <SendMessageFromPort+0x2d0>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 800975c:	4848      	ldr	r0, [pc, #288]	; (8009880 <SendMessageFromPort+0x374>)
 800975e:	7801      	ldrb	r1, [r0, #0]
 8009760:	3101      	adds	r1, #1
 8009762:	b2c9      	uxtb	r1, r1
 8009764:	7001      	strb	r1, [r0, #0]
 8009766:	4838      	ldr	r0, [pc, #224]	; (8009848 <SendMessageFromPort+0x33c>)
 8009768:	18c3      	adds	r3, r0, r3
 800976a:	7059      	strb	r1, [r3, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800976c:	3602      	adds	r6, #2
 800976e:	18b6      	adds	r6, r6, r2
 8009770:	b2f6      	uxtb	r6, r6
	message[2] =length;
 8009772:	4b35      	ldr	r3, [pc, #212]	; (8009848 <SendMessageFromPort+0x33c>)
 8009774:	4698      	mov	r8, r3
 8009776:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8009778:	1cf3      	adds	r3, r6, #3
 800977a:	469a      	mov	sl, r3
 800977c:	4f36      	ldr	r7, [pc, #216]	; (8009858 <SendMessageFromPort+0x34c>)
 800977e:	001a      	movs	r2, r3
 8009780:	4641      	mov	r1, r8
 8009782:	0038      	movs	r0, r7
 8009784:	f00a fd44 	bl	8014210 <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009788:	b2b3      	uxth	r3, r6
 800978a:	4699      	mov	r9, r3
 800978c:	4651      	mov	r1, sl
 800978e:	0038      	movs	r0, r7
 8009790:	f003 ffa8 	bl	800d6e4 <CalculateCRC8>
 8009794:	4643      	mov	r3, r8
 8009796:	4652      	mov	r2, sl
 8009798:	5498      	strb	r0, [r3, r2]
	memset(crcBuffer,0,sizeof(crcBuffer));
 800979a:	2238      	movs	r2, #56	; 0x38
 800979c:	2100      	movs	r1, #0
 800979e:	0038      	movs	r0, r7
 80097a0:	f00a fd3f 	bl	8014222 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80097a4:	2cfd      	cmp	r4, #253	; 0xfd
 80097a6:	d909      	bls.n	80097bc <SendMessageFromPort+0x2b0>
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 80097a8:	9802      	ldr	r0, [sp, #8]
 80097aa:	f7fa f8cf 	bl	800394c <FindBroadcastRoutes>
 80097ae:	2400      	movs	r4, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 80097b0:	4e34      	ldr	r6, [pc, #208]	; (8009884 <SendMessageFromPort+0x378>)
 80097b2:	4d32      	ldr	r5, [pc, #200]	; (800987c <SendMessageFromPort+0x370>)
				/* Transmit the message from this port */
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80097b4:	464f      	mov	r7, r9
 80097b6:	e024      	b.n	8009802 <SendMessageFromPort+0x2f6>
			uint8_t groupMembers =0;
 80097b8:	2200      	movs	r2, #0
 80097ba:	e7c5      	b.n	8009748 <SendMessageFromPort+0x23c>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
 80097bc:	464a      	mov	r2, r9
 80097be:	3204      	adds	r2, #4
 80097c0:	b292      	uxth	r2, r2
 80097c2:	2332      	movs	r3, #50	; 0x32
 80097c4:	4920      	ldr	r1, [pc, #128]	; (8009848 <SendMessageFromPort+0x33c>)
 80097c6:	0028      	movs	r0, r5
 80097c8:	f004 fe02 	bl	800e3d0 <writePxDMAMutex>
			}
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 80097cc:	9903      	ldr	r1, [sp, #12]
 80097ce:	2000      	movs	r0, #0
 80097d0:	f005 fed8 	bl	800f584 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 80097d4:	4b2c      	ldr	r3, [pc, #176]	; (8009888 <SendMessageFromPort+0x37c>)
 80097d6:	2202      	movs	r2, #2
 80097d8:	701a      	strb	r2, [r3, #0]
	
	return result;
 80097da:	2000      	movs	r0, #0
}
 80097dc:	b005      	add	sp, #20
 80097de:	bcf0      	pop	{r4, r5, r6, r7}
 80097e0:	46bb      	mov	fp, r7
 80097e2:	46b2      	mov	sl, r6
 80097e4:	46a9      	mov	r9, r5
 80097e6:	46a0      	mov	r8, r4
 80097e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80097ea:	1d3a      	adds	r2, r7, #4
 80097ec:	b292      	uxth	r2, r2
 80097ee:	2332      	movs	r3, #50	; 0x32
 80097f0:	4915      	ldr	r1, [pc, #84]	; (8009848 <SendMessageFromPort+0x33c>)
 80097f2:	f004 fded 	bl	800e3d0 <writePxDMAMutex>
				Delay_ms(1);
 80097f6:	2001      	movs	r0, #1
 80097f8:	f007 f890 	bl	801091c <HAL_Delay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 80097fc:	3401      	adds	r4, #1
 80097fe:	2c06      	cmp	r4, #6
 8009800:	d0e4      	beq.n	80097cc <SendMessageFromPort+0x2c0>
 8009802:	1c60      	adds	r0, r4, #1
 8009804:	b2c0      	uxtb	r0, r0
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009806:	782b      	ldrb	r3, [r5, #0]
 8009808:	3b01      	subs	r3, #1
 800980a:	005b      	lsls	r3, r3, #1
 800980c:	5b9b      	ldrh	r3, [r3, r6]
 800980e:	4123      	asrs	r3, r4
 8009810:	07db      	lsls	r3, r3, #31
 8009812:	d5f3      	bpl.n	80097fc <SendMessageFromPort+0x2f0>
 8009814:	e7e9      	b.n	80097ea <SendMessageFromPort+0x2de>
		return BOS_ERR_WrongParam;
 8009816:	2067      	movs	r0, #103	; 0x67
 8009818:	e7e0      	b.n	80097dc <SendMessageFromPort+0x2d0>
 800981a:	2067      	movs	r0, #103	; 0x67
 800981c:	e7de      	b.n	80097dc <SendMessageFromPort+0x2d0>
 800981e:	2067      	movs	r0, #103	; 0x67
 8009820:	e7dc      	b.n	80097dc <SendMessageFromPort+0x2d0>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009822:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009824:	2f2c      	cmp	r7, #44	; 0x2c
 8009826:	d8d9      	bhi.n	80097dc <SendMessageFromPort+0x2d0>
				message[7 + shift + numberOfParams] =++bcastID;
 8009828:	4a15      	ldr	r2, [pc, #84]	; (8009880 <SendMessageFromPort+0x374>)
 800982a:	7813      	ldrb	r3, [r2, #0]
 800982c:	3301      	adds	r3, #1
 800982e:	b2db      	uxtb	r3, r3
 8009830:	7013      	strb	r3, [r2, #0]
 8009832:	4a05      	ldr	r2, [pc, #20]	; (8009848 <SendMessageFromPort+0x33c>)
 8009834:	445a      	add	r2, fp
 8009836:	19d7      	adds	r7, r2, r7
 8009838:	71fb      	strb	r3, [r7, #7]
				length +=1;		// + bcastID
 800983a:	3601      	adds	r6, #1
 800983c:	b2f6      	uxtb	r6, r6
 800983e:	e798      	b.n	8009772 <SendMessageFromPort+0x266>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009840:	2e00      	cmp	r6, #0
 8009842:	d100      	bne.n	8009846 <SendMessageFromPort+0x33a>
 8009844:	e689      	b.n	800955a <SendMessageFromPort+0x4e>
 8009846:	e6d9      	b.n	80095fc <SendMessageFromPort+0xf0>
 8009848:	20000f00 	.word	0x20000f00
 800984c:	20000f38 	.word	0x20000f38
 8009850:	20000f03 	.word	0x20000f03
 8009854:	20000d10 	.word	0x20000d10
 8009858:	20001460 	.word	0x20001460
 800985c:	20006aa8 	.word	0x20006aa8
 8009860:	200015be 	.word	0x200015be
 8009864:	200015bc 	.word	0x200015bc
 8009868:	20000f40 	.word	0x20000f40
 800986c:	20000a7c 	.word	0x20000a7c
 8009870:	2000001d 	.word	0x2000001d
 8009874:	2000001c 	.word	0x2000001c
 8009878:	20000ec8 	.word	0x20000ec8
 800987c:	2000107e 	.word	0x2000107e
 8009880:	20000cbc 	.word	0x20000cbc
 8009884:	20000cc0 	.word	0x20000cc0
 8009888:	20001118 	.word	0x20001118

0800988c <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 800988c:	b530      	push	{r4, r5, lr}
 800988e:	b083      	sub	sp, #12
 8009890:	0004      	movs	r4, r0
	AddBcastPayload = false;
 8009892:	4b0b      	ldr	r3, [pc, #44]	; (80098c0 <ForwardReceivedMessage+0x34>)
 8009894:	2200      	movs	r2, #0
 8009896:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009898:	1e42      	subs	r2, r0, #1
 800989a:	00d3      	lsls	r3, r2, #3
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	4a08      	ldr	r2, [pc, #32]	; (80098c4 <ForwardReceivedMessage+0x38>)
 80098a2:	5c9d      	ldrb	r5, [r3, r2]
	port =FindRoute(myID,dst);
 80098a4:	4b08      	ldr	r3, [pc, #32]	; (80098c8 <ForwardReceivedMessage+0x3c>)
 80098a6:	7818      	ldrb	r0, [r3, #0]
 80098a8:	0029      	movs	r1, r5
 80098aa:	f7fa f91d 	bl	8003ae8 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 80098ae:	9400      	str	r4, [sp, #0]
 80098b0:	2300      	movs	r3, #0
 80098b2:	002a      	movs	r2, r5
 80098b4:	2100      	movs	r1, #0
 80098b6:	f7ff fe29 	bl	800950c <SendMessageFromPort>
}
 80098ba:	2000      	movs	r0, #0
 80098bc:	b003      	add	sp, #12
 80098be:	bd30      	pop	{r4, r5, pc}
 80098c0:	20000a7c 	.word	0x20000a7c
 80098c4:	20000d10 	.word	0x20000d10
 80098c8:	2000107e 	.word	0x2000107e

080098cc <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 80098cc:	b500      	push	{lr}
 80098ce:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80098d0:	4b0c      	ldr	r3, [pc, #48]	; (8009904 <BroadcastReceivedMessage+0x38>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 80098d6:	4b0c      	ldr	r3, [pc, #48]	; (8009908 <BroadcastReceivedMessage+0x3c>)
 80098d8:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 80098da:	28ff      	cmp	r0, #255	; 0xff
 80098dc:	d009      	beq.n	80098f2 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 80098de:	9100      	str	r1, [sp, #0]
 80098e0:	2300      	movs	r3, #0
 80098e2:	22fe      	movs	r2, #254	; 0xfe
 80098e4:	2100      	movs	r1, #0
 80098e6:	2000      	movs	r0, #0
 80098e8:	f7ff fe10 	bl	800950c <SendMessageFromPort>
}
 80098ec:	2000      	movs	r0, #0
 80098ee:	b003      	add	sp, #12
 80098f0:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 80098f2:	9100      	str	r1, [sp, #0]
 80098f4:	2300      	movs	r3, #0
 80098f6:	32ff      	adds	r2, #255	; 0xff
 80098f8:	2100      	movs	r1, #0
 80098fa:	2000      	movs	r0, #0
 80098fc:	f7ff fe06 	bl	800950c <SendMessageFromPort>
 8009900:	e7f4      	b.n	80098ec <BroadcastReceivedMessage+0x20>
 8009902:	46c0      	nop			; (mov r8, r8)
 8009904:	20000a7c 	.word	0x20000a7c
 8009908:	2000001d 	.word	0x2000001d

0800990c <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 800990c:	b530      	push	{r4, r5, lr}
 800990e:	b083      	sub	sp, #12
 8009910:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009912:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <BroadcastMessage+0x44>)
 8009914:	2501      	movs	r5, #1
 8009916:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009918:	4b0e      	ldr	r3, [pc, #56]	; (8009954 <BroadcastMessage+0x48>)
 800991a:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 800991c:	29ff      	cmp	r1, #255	; 0xff
 800991e:	d00e      	beq.n	800993e <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009920:	9400      	str	r4, [sp, #0]
 8009922:	0013      	movs	r3, r2
 8009924:	22fe      	movs	r2, #254	; 0xfe
 8009926:	0001      	movs	r1, r0
 8009928:	2000      	movs	r0, #0
 800992a:	f7ff fdef 	bl	800950c <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 800992e:	0022      	movs	r2, r4
 8009930:	2100      	movs	r1, #0
 8009932:	4809      	ldr	r0, [pc, #36]	; (8009958 <BroadcastMessage+0x4c>)
 8009934:	f00a fc75 	bl	8014222 <memset>
}
 8009938:	2000      	movs	r0, #0
 800993a:	b003      	add	sp, #12
 800993c:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 800993e:	9400      	str	r4, [sp, #0]
 8009940:	0013      	movs	r3, r2
 8009942:	22ff      	movs	r2, #255	; 0xff
 8009944:	0001      	movs	r1, r0
 8009946:	2000      	movs	r0, #0
 8009948:	f7ff fde0 	bl	800950c <SendMessageFromPort>
 800994c:	e7ef      	b.n	800992e <BroadcastMessage+0x22>
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	20000a7c 	.word	0x20000a7c
 8009954:	2000001d 	.word	0x2000001d
 8009958:	20000f40 	.word	0x20000f40

0800995c <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800995c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800995e:	b083      	sub	sp, #12
 8009960:	0004      	movs	r4, r0
 8009962:	000e      	movs	r6, r1
 8009964:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 8009966:	28ff      	cmp	r0, #255	; 0xff
 8009968:	d012      	beq.n	8009990 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 800996a:	4f0d      	ldr	r7, [pc, #52]	; (80099a0 <SendMessageToModule+0x44>)
 800996c:	7838      	ldrb	r0, [r7, #0]
 800996e:	0021      	movs	r1, r4
 8009970:	f7fa f8ba 	bl	8003ae8 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009974:	7839      	ldrb	r1, [r7, #0]
 8009976:	9500      	str	r5, [sp, #0]
 8009978:	0033      	movs	r3, r6
 800997a:	0022      	movs	r2, r4
 800997c:	f7ff fdc6 	bl	800950c <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009980:	002a      	movs	r2, r5
 8009982:	2100      	movs	r1, #0
 8009984:	4807      	ldr	r0, [pc, #28]	; (80099a4 <SendMessageToModule+0x48>)
 8009986:	f00a fc4c 	bl	8014222 <memset>
}
 800998a:	2000      	movs	r0, #0
 800998c:	b003      	add	sp, #12
 800998e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009990:	4b03      	ldr	r3, [pc, #12]	; (80099a0 <SendMessageToModule+0x44>)
 8009992:	7818      	ldrb	r0, [r3, #0]
 8009994:	0013      	movs	r3, r2
 8009996:	000a      	movs	r2, r1
 8009998:	21ff      	movs	r1, #255	; 0xff
 800999a:	f7ff ffb7 	bl	800990c <BroadcastMessage>
 800999e:	e7f4      	b.n	800998a <SendMessageToModule+0x2e>
 80099a0:	2000107e 	.word	0x2000107e
 80099a4:	20000f40 	.word	0x20000f40

080099a8 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80099a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099aa:	46de      	mov	lr, fp
 80099ac:	4657      	mov	r7, sl
 80099ae:	464e      	mov	r6, r9
 80099b0:	4645      	mov	r5, r8
 80099b2:	b5e0      	push	{r5, r6, r7, lr}
 80099b4:	b091      	sub	sp, #68	; 0x44
 80099b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80099b8:	000f      	movs	r7, r1
 80099ba:	920e      	str	r2, [sp, #56]	; 0x38
 80099bc:	001e      	movs	r6, r3
 80099be:	ab1a      	add	r3, sp, #104	; 0x68
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	4699      	mov	r9, r3
 80099c4:	ab1d      	add	r3, sp, #116	; 0x74
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	469b      	mov	fp, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80099ca:	4b5e      	ldr	r3, [pc, #376]	; (8009b44 <StartScastDMAStream+0x19c>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	428b      	cmp	r3, r1
 80099d0:	d120      	bne.n	8009a14 <StartScastDMAStream+0x6c>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80099d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099d4:	0e1b      	lsrs	r3, r3, #24
 80099d6:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 80099d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099da:	0c1b      	lsrs	r3, r3, #16
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 80099e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80099e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80099ea:	0e1b      	lsrs	r3, r3, #24
 80099ec:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 80099ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80099f0:	0c1b      	lsrs	r3, r3, #16
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 80099f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80099f8:	0a1b      	lsrs	r3, r3, #8
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	4698      	mov	r8, r3
 80099fe:	4d52      	ldr	r5, [pc, #328]	; (8009b48 <StartScastDMAStream+0x1a0>)
 8009a00:	231a      	movs	r3, #26
 8009a02:	469a      	mov	sl, r3
 8009a04:	44aa      	add	sl, r5
				temp2 =dstP;
 8009a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a08:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009a0a:	4c50      	ldr	r4, [pc, #320]	; (8009b4c <StartScastDMAStream+0x1a4>)
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	46c1      	mov	r9, r8
 8009a10:	4698      	mov	r8, r3
 8009a12:	e058      	b.n	8009ac6 <StartScastDMAStream+0x11e>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009a14:	4b4d      	ldr	r3, [pc, #308]	; (8009b4c <StartScastDMAStream+0x1a4>)
 8009a16:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a18:	0e12      	lsrs	r2, r2, #24
 8009a1a:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009a1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a1e:	0c12      	lsrs	r2, r2, #16
 8009a20:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009a22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a24:	0a12      	lsrs	r2, r2, #8
 8009a26:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009a28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a2a:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009a2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a2e:	0e12      	lsrs	r2, r2, #24
 8009a30:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009a32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a34:	0c12      	lsrs	r2, r2, #16
 8009a36:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009a38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a3a:	0a12      	lsrs	r2, r2, #8
 8009a3c:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009a3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a40:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009a42:	464a      	mov	r2, r9
 8009a44:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009a46:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8009a48:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8009a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a4c:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8009a4e:	465a      	mov	r2, fp
 8009a50:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009a52:	220d      	movs	r2, #13
 8009a54:	211c      	movs	r1, #28
 8009a56:	0038      	movs	r0, r7
 8009a58:	f7ff ff80 	bl	800995c <SendMessageToModule>
		return result;
 8009a5c:	e055      	b.n	8009b0a <StartScastDMAStream+0x162>
				temp1 =FindRoute(route[i],srcM);
 8009a5e:	0039      	movs	r1, r7
 8009a60:	f7fa f842 	bl	8003ae8 <FindRoute>
 8009a64:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 8009a66:	0031      	movs	r1, r6
 8009a68:	0038      	movs	r0, r7
 8009a6a:	f7fa f83d 	bl	8003ae8 <FindRoute>
			if(route[i] == dstM){
 8009a6e:	9a06      	ldr	r2, [sp, #24]
 8009a70:	7850      	ldrb	r0, [r2, #1]
				temp2 =dstP;
 8009a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 8009a74:	42b0      	cmp	r0, r6
 8009a76:	d135      	bne.n	8009ae4 <StartScastDMAStream+0x13c>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009a78:	9a08      	ldr	r2, [sp, #32]
 8009a7a:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a7e:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a82:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8009a84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a86:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009a88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a8a:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a8e:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009a90:	464a      	mov	r2, r9
 8009a92:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009a94:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a96:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009a98:	4642      	mov	r2, r8
 8009a9a:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009a9c:	9a07      	ldr	r2, [sp, #28]
 8009a9e:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8009aa0:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009aa2:	465b      	mov	r3, fp
 8009aa4:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8009aa6:	0031      	movs	r1, r6
 8009aa8:	0038      	movs	r0, r7
 8009aaa:	f7fa f81d 	bl	8003ae8 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009aae:	9b06      	ldr	r3, [sp, #24]
 8009ab0:	7858      	ldrb	r0, [r3, #1]
 8009ab2:	220c      	movs	r2, #12
 8009ab4:	211b      	movs	r1, #27
 8009ab6:	f7ff ff51 	bl	800995c <SendMessageToModule>
			osDelay(10);
 8009aba:	200a      	movs	r0, #10
 8009abc:	f004 fd6b 	bl	800e596 <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 8009ac0:	3501      	adds	r5, #1
 8009ac2:	4555      	cmp	r5, sl
 8009ac4:	d013      	beq.n	8009aee <StartScastDMAStream+0x146>
		FindRoute(srcM,dstM);
 8009ac6:	0031      	movs	r1, r6
 8009ac8:	0038      	movs	r0, r7
 8009aca:	f7fa f80d 	bl	8003ae8 <FindRoute>
		if(route[i]){
 8009ace:	9506      	str	r5, [sp, #24]
 8009ad0:	7868      	ldrb	r0, [r5, #1]
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d0f4      	beq.n	8009ac0 <StartScastDMAStream+0x118>
			if(route[i + 1]){
 8009ad6:	78a9      	ldrb	r1, [r5, #2]
 8009ad8:	2900      	cmp	r1, #0
 8009ada:	d0c0      	beq.n	8009a5e <StartScastDMAStream+0xb6>
				temp1 =FindRoute(route[i],route[i + 1]);
 8009adc:	f7fa f804 	bl	8003ae8 <FindRoute>
 8009ae0:	9007      	str	r0, [sp, #28]
 8009ae2:	e7c0      	b.n	8009a66 <StartScastDMAStream+0xbe>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009ae4:	7811      	ldrb	r1, [r2, #0]
 8009ae6:	f7f9 ffff 	bl	8003ae8 <FindRoute>
 8009aea:	0003      	movs	r3, r0
 8009aec:	e7c4      	b.n	8009a78 <StartScastDMAStream+0xd0>
 8009aee:	46c1      	mov	r9, r8
		}
	}
	
	if(srcM == dstM)
 8009af0:	42b7      	cmp	r7, r6
 8009af2:	d112      	bne.n	8009b1a <StartScastDMAStream+0x172>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009afa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009afc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009afe:	4648      	mov	r0, r9
 8009b00:	f7ff fbe6 	bl	80092d0 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 8009b04:	465b      	mov	r3, fp
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10d      	bne.n	8009b26 <StartScastDMAStream+0x17e>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	b011      	add	sp, #68	; 0x44
 8009b0e:	bcf0      	pop	{r4, r5, r6, r7}
 8009b10:	46bb      	mov	fp, r7
 8009b12:	46b2      	mov	sl, r6
 8009b14:	46a9      	mov	r9, r5
 8009b16:	46a0      	mov	r8, r4
 8009b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8009b1a:	0031      	movs	r1, r6
 8009b1c:	0038      	movs	r0, r7
 8009b1e:	f7f9 ffe3 	bl	8003ae8 <FindRoute>
 8009b22:	900e      	str	r0, [sp, #56]	; 0x38
 8009b24:	e7e6      	b.n	8009af4 <StartScastDMAStream+0x14c>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009b26:	2300      	movs	r3, #0
 8009b28:	9304      	str	r3, [sp, #16]
 8009b2a:	9303      	str	r3, [sp, #12]
 8009b2c:	9302      	str	r3, [sp, #8]
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009b38:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009b3a:	4648      	mov	r0, r9
 8009b3c:	f7f9 fd6e 	bl	800361c <SaveEEstreams>
 8009b40:	e7e3      	b.n	8009b0a <StartScastDMAStream+0x162>
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	2000107e 	.word	0x2000107e
 8009b48:	20006bab 	.word	0x20006bab
 8009b4c:	20000f40 	.word	0x20000f40

08009b50 <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument){
 8009b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b52:	46de      	mov	lr, fp
 8009b54:	4657      	mov	r7, sl
 8009b56:	464e      	mov	r6, r9
 8009b58:	4645      	mov	r5, r8
 8009b5a:	b5e0      	push	{r5, r6, r7, lr}
 8009b5c:	b089      	sub	sp, #36	; 0x24
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9301      	str	r3, [sp, #4]
				UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
				++rejectedMsg;
			}
			
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
 8009b62:	4bbc      	ldr	r3, [pc, #752]	; (8009e54 <BackEndTask+0x304>)
 8009b64:	469b      	mov	fp, r3
 8009b66:	e16d      	b.n	8009e44 <BackEndTask+0x2f4>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009b68:	9504      	str	r5, [sp, #16]
 8009b6a:	9603      	str	r6, [sp, #12]
 8009b6c:	7833      	ldrb	r3, [r6, #0]
 8009b6e:	2b3f      	cmp	r3, #63	; 0x3f
 8009b70:	dd00      	ble.n	8009b74 <BackEndTask+0x24>
 8009b72:	e192      	b.n	8009e9a <BackEndTask+0x34a>
 8009b74:	001a      	movs	r2, r3
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009b76:	1c78      	adds	r0, r7, #1
 8009b78:	e185      	b.n	8009e86 <BackEndTask+0x336>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009b7a:	2a3f      	cmp	r2, #63	; 0x3f
 8009b7c:	d004      	beq.n	8009b88 <BackEndTask+0x38>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009b7e:	3201      	adds	r2, #1
 8009b80:	2a40      	cmp	r2, #64	; 0x40
 8009b82:	d000      	beq.n	8009b86 <BackEndTask+0x36>
 8009b84:	e17f      	b.n	8009e86 <BackEndTask+0x336>
 8009b86:	e188      	b.n	8009e9a <BackEndTask+0x34a>
 8009b88:	0039      	movs	r1, r7
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009b8a:	5cba      	ldrb	r2, [r7, r2]
 8009b8c:	2a48      	cmp	r2, #72	; 0x48
 8009b8e:	d026      	beq.n	8009bde <BackEndTask+0x8e>
							if(BOS.disableCLI == false){
 8009b90:	4ab1      	ldr	r2, [pc, #708]	; (8009e58 <BackEndTask+0x308>)
 8009b92:	7ed2      	ldrb	r2, [r2, #27]
 8009b94:	2a00      	cmp	r2, #0
 8009b96:	d02c      	beq.n	8009bf2 <BackEndTask+0xa2>
		for(port =1; port <= NumOfPorts; port++){
 8009b98:	3501      	adds	r5, #1
 8009b9a:	3401      	adds	r4, #1
 8009b9c:	3740      	adds	r7, #64	; 0x40
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	2d06      	cmp	r5, #6
 8009ba2:	d100      	bne.n	8009ba6 <BackEndTask+0x56>
 8009ba4:	e14c      	b.n	8009e40 <BackEndTask+0x2f0>
 8009ba6:	1c6b      	adds	r3, r5, #1
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	469a      	mov	sl, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009bac:	9400      	str	r4, [sp, #0]
 8009bae:	7823      	ldrb	r3, [r4, #0]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d9d9      	bls.n	8009b68 <BackEndTask+0x18>
			if(MsgDMAStopped[port - 1] == true){
 8009bb4:	465b      	mov	r3, fp
 8009bb6:	5d5b      	ldrb	r3, [r3, r5]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0ed      	beq.n	8009b98 <BackEndTask+0x48>
				MsgDMAStopped[port - 1] = false;
 8009bbc:	4ba5      	ldr	r3, [pc, #660]	; (8009e54 <BackEndTask+0x304>)
 8009bbe:	18eb      	adds	r3, r5, r3
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 8009bc4:	9b00      	ldr	r3, [sp, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b05      	cmp	r3, #5
 8009bca:	d100      	bne.n	8009bce <BackEndTask+0x7e>
 8009bcc:	e134      	b.n	8009e38 <BackEndTask+0x2e8>
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009bce:	4650      	mov	r0, sl
 8009bd0:	f004 fb90 	bl	800e2f4 <GetUart>
 8009bd4:	2240      	movs	r2, #64	; 0x40
 8009bd6:	0039      	movs	r1, r7
 8009bd8:	f009 fc12 	bl	8013400 <HAL_UART_Receive_DMA>
 8009bdc:	e7dc      	b.n	8009b98 <BackEndTask+0x48>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009bde:	783a      	ldrb	r2, [r7, #0]
 8009be0:	2a5a      	cmp	r2, #90	; 0x5a
 8009be2:	d1d5      	bne.n	8009b90 <BackEndTask+0x40>
					packetLength =UARTRxBuf[port - 1][1];
 8009be4:	787b      	ldrb	r3, [r7, #1]
 8009be6:	9302      	str	r3, [sp, #8]
					parseStart =2;
 8009be8:	233f      	movs	r3, #63	; 0x3f
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	3b3d      	subs	r3, #61	; 0x3d
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	e034      	b.n	8009c5c <BackEndTask+0x10c>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009bf2:	1c7a      	adds	r2, r7, #1
 8009bf4:	4694      	mov	ip, r2
 8009bf6:	e021      	b.n	8009c3c <BackEndTask+0xec>
 8009bf8:	2b3f      	cmp	r3, #63	; 0x3f
 8009bfa:	d11c      	bne.n	8009c36 <BackEndTask+0xe6>
 8009bfc:	780a      	ldrb	r2, [r1, #0]
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	d1ca      	bne.n	8009b98 <BackEndTask+0x48>
										UARTRxBuf[port - 1][j] =0;
 8009c02:	9a04      	ldr	r2, [sp, #16]
 8009c04:	0191      	lsls	r1, r2, #6
 8009c06:	4a95      	ldr	r2, [pc, #596]	; (8009e5c <BackEndTask+0x30c>)
 8009c08:	1852      	adds	r2, r2, r1
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009c0e:	3301      	adds	r3, #1
 8009c10:	9a03      	ldr	r2, [sp, #12]
 8009c12:	7013      	strb	r3, [r2, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009c14:	4b92      	ldr	r3, [pc, #584]	; (8009e60 <BackEndTask+0x310>)
 8009c16:	781a      	ldrb	r2, [r3, #0]
 8009c18:	4892      	ldr	r0, [pc, #584]	; (8009e64 <BackEndTask+0x314>)
 8009c1a:	5481      	strb	r1, [r0, r2]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009c1c:	2203      	movs	r2, #3
 8009c1e:	9900      	ldr	r1, [sp, #0]
 8009c20:	700a      	strb	r2, [r1, #0]
										PcPort =port;
 8009c22:	4652      	mov	r2, sl
 8009c24:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009c26:	4b90      	ldr	r3, [pc, #576]	; (8009e68 <BackEndTask+0x318>)
 8009c28:	6818      	ldr	r0, [r3, #0]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	2100      	movs	r1, #0
 8009c30:	f006 fa6a 	bl	8010108 <xTaskGenericNotify>
										break;
 8009c34:	e7b0      	b.n	8009b98 <BackEndTask+0x48>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009c36:	3301      	adds	r3, #1
 8009c38:	2b40      	cmp	r3, #64	; 0x40
 8009c3a:	d0ad      	beq.n	8009b98 <BackEndTask+0x48>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009c3c:	5cca      	ldrb	r2, [r1, r3]
 8009c3e:	2a0d      	cmp	r2, #13
 8009c40:	d1f9      	bne.n	8009c36 <BackEndTask+0xe6>
 8009c42:	2b3e      	cmp	r3, #62	; 0x3e
 8009c44:	dcd8      	bgt.n	8009bf8 <BackEndTask+0xa8>
 8009c46:	4662      	mov	r2, ip
 8009c48:	5cd2      	ldrb	r2, [r2, r3]
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	d0d9      	beq.n	8009c02 <BackEndTask+0xb2>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009c4e:	3301      	adds	r3, #1
 8009c50:	e7f4      	b.n	8009c3c <BackEndTask+0xec>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009c52:	233f      	movs	r3, #63	; 0x3f
 8009c54:	5cfb      	ldrb	r3, [r7, r3]
 8009c56:	9302      	str	r3, [sp, #8]
					parseStart =0;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	9305      	str	r3, [sp, #20]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009c5c:	9b02      	ldr	r3, [sp, #8]
 8009c5e:	3303      	adds	r3, #3
 8009c60:	4698      	mov	r8, r3
 8009c62:	9b01      	ldr	r3, [sp, #4]
 8009c64:	4443      	add	r3, r8
 8009c66:	4699      	mov	r9, r3
					packetEnd -= MSG_RX_BUF_SIZE;
 8009c68:	2340      	movs	r3, #64	; 0x40
 8009c6a:	425b      	negs	r3, r3
 8009c6c:	469c      	mov	ip, r3
 8009c6e:	44e1      	add	r9, ip
 8009c70:	e133      	b.n	8009eda <BackEndTask+0x38a>
					packetLength =UARTRxBuf[port - 1][0];
 8009c72:	783b      	ldrb	r3, [r7, #0]
 8009c74:	9302      	str	r3, [sp, #8]
					parseStart =1;
 8009c76:	2301      	movs	r3, #1
 8009c78:	9305      	str	r3, [sp, #20]
 8009c7a:	e7ef      	b.n	8009c5c <BackEndTask+0x10c>
					Delay_ms(1);
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	f006 fe4d 	bl	801091c <HAL_Delay>
					if(packetStart < packetEnd){
 8009c82:	9b01      	ldr	r3, [sp, #4]
 8009c84:	4599      	cmp	r9, r3
 8009c86:	dd50      	ble.n	8009d2a <BackEndTask+0x1da>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009c88:	01a9      	lsls	r1, r5, #6
 8009c8a:	469c      	mov	ip, r3
 8009c8c:	4461      	add	r1, ip
 8009c8e:	4b73      	ldr	r3, [pc, #460]	; (8009e5c <BackEndTask+0x30c>)
 8009c90:	469c      	mov	ip, r3
 8009c92:	4461      	add	r1, ip
 8009c94:	4642      	mov	r2, r8
 8009c96:	4875      	ldr	r0, [pc, #468]	; (8009e6c <BackEndTask+0x31c>)
 8009c98:	f00a faba 	bl	8014210 <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009c9c:	9b02      	ldr	r3, [sp, #8]
 8009c9e:	1cd9      	adds	r1, r3, #3
 8009ca0:	4872      	ldr	r0, [pc, #456]	; (8009e6c <BackEndTask+0x31c>)
 8009ca2:	f003 fd1f 	bl	800d6e4 <CalculateCRC8>
 8009ca6:	4680      	mov	r8, r0
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009ca8:	2238      	movs	r2, #56	; 0x38
 8009caa:	2100      	movs	r1, #0
 8009cac:	486f      	ldr	r0, [pc, #444]	; (8009e6c <BackEndTask+0x31c>)
 8009cae:	f00a fab8 	bl	8014222 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009cb2:	9b04      	ldr	r3, [sp, #16]
 8009cb4:	019b      	lsls	r3, r3, #6
 8009cb6:	4a69      	ldr	r2, [pc, #420]	; (8009e5c <BackEndTask+0x30c>)
 8009cb8:	4694      	mov	ip, r2
 8009cba:	4463      	add	r3, ip
 8009cbc:	464a      	mov	r2, r9
 8009cbe:	5c9b      	ldrb	r3, [r3, r2]
 8009cc0:	4543      	cmp	r3, r8
 8009cc2:	d000      	beq.n	8009cc6 <BackEndTask+0x176>
 8009cc4:	e111      	b.n	8009eea <BackEndTask+0x39a>
						portStatus[port] =MSG;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	9a00      	ldr	r2, [sp, #0]
 8009cca:	7013      	strb	r3, [r2, #0]
						messageLength[port - 1] =packetLength;
 8009ccc:	4b68      	ldr	r3, [pc, #416]	; (8009e70 <BackEndTask+0x320>)
 8009cce:	9a02      	ldr	r2, [sp, #8]
 8009cd0:	555a      	strb	r2, [r3, r5]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009cd2:	233f      	movs	r3, #63	; 0x3f
 8009cd4:	9905      	ldr	r1, [sp, #20]
 8009cd6:	1a5b      	subs	r3, r3, r1
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	db6b      	blt.n	8009db4 <BackEndTask+0x264>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009cdc:	00e8      	lsls	r0, r5, #3
 8009cde:	1b40      	subs	r0, r0, r5
 8009ce0:	00c0      	lsls	r0, r0, #3
 8009ce2:	4b64      	ldr	r3, [pc, #400]	; (8009e74 <BackEndTask+0x324>)
 8009ce4:	18c0      	adds	r0, r0, r3
 8009ce6:	01a9      	lsls	r1, r5, #6
 8009ce8:	9b05      	ldr	r3, [sp, #20]
 8009cea:	469c      	mov	ip, r3
 8009cec:	4461      	add	r1, ip
 8009cee:	4b5b      	ldr	r3, [pc, #364]	; (8009e5c <BackEndTask+0x30c>)
 8009cf0:	18c9      	adds	r1, r1, r3
 8009cf2:	f00a fa8d 	bl	8014210 <memcpy>
						if(packetStart < packetEnd){
 8009cf6:	9b01      	ldr	r3, [sp, #4]
 8009cf8:	4599      	cmp	r9, r3
 8009cfa:	dc00      	bgt.n	8009cfe <BackEndTask+0x1ae>
 8009cfc:	e081      	b.n	8009e02 <BackEndTask+0x2b2>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009cfe:	9a02      	ldr	r2, [sp, #8]
 8009d00:	3204      	adds	r2, #4
 8009d02:	01a8      	lsls	r0, r5, #6
 8009d04:	469c      	mov	ip, r3
 8009d06:	4460      	add	r0, ip
 8009d08:	4b54      	ldr	r3, [pc, #336]	; (8009e5c <BackEndTask+0x30c>)
 8009d0a:	18c0      	adds	r0, r0, r3
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	f00a fa88 	bl	8014222 <memset>
						UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009d12:	464b      	mov	r3, r9
 8009d14:	3301      	adds	r3, #1
 8009d16:	9a03      	ldr	r2, [sp, #12]
 8009d18:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009d1a:	4a57      	ldr	r2, [pc, #348]	; (8009e78 <BackEndTask+0x328>)
 8009d1c:	8813      	ldrh	r3, [r2, #0]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 8009d22:	4650      	mov	r0, sl
 8009d24:	f7ff fbac 	bl	8009480 <NotifyMessagingTask>
						continue; // Inspect the next port circular buffer
 8009d28:	e736      	b.n	8009b98 <BackEndTask+0x48>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009d2a:	01a9      	lsls	r1, r5, #6
						MSG_RX_BUF_SIZE - packetStart);
 8009d2c:	2240      	movs	r2, #64	; 0x40
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	1ad0      	subs	r0, r2, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009d32:	9107      	str	r1, [sp, #28]
 8009d34:	469c      	mov	ip, r3
 8009d36:	4461      	add	r1, ip
 8009d38:	4b48      	ldr	r3, [pc, #288]	; (8009e5c <BackEndTask+0x30c>)
 8009d3a:	469c      	mov	ip, r3
 8009d3c:	4461      	add	r1, ip
 8009d3e:	9006      	str	r0, [sp, #24]
 8009d40:	0002      	movs	r2, r0
 8009d42:	484a      	ldr	r0, [pc, #296]	; (8009e6c <BackEndTask+0x31c>)
 8009d44:	f00a fa64 	bl	8014210 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009d48:	4848      	ldr	r0, [pc, #288]	; (8009e6c <BackEndTask+0x31c>)
 8009d4a:	9906      	ldr	r1, [sp, #24]
 8009d4c:	468c      	mov	ip, r1
 8009d4e:	4460      	add	r0, ip
 8009d50:	4643      	mov	r3, r8
 8009d52:	1a5a      	subs	r2, r3, r1
 8009d54:	9b07      	ldr	r3, [sp, #28]
 8009d56:	0019      	movs	r1, r3
 8009d58:	4b40      	ldr	r3, [pc, #256]	; (8009e5c <BackEndTask+0x30c>)
 8009d5a:	469c      	mov	ip, r3
 8009d5c:	4461      	add	r1, ip
 8009d5e:	f00a fa57 	bl	8014210 <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009d62:	9b02      	ldr	r3, [sp, #8]
 8009d64:	1cd9      	adds	r1, r3, #3
 8009d66:	4841      	ldr	r0, [pc, #260]	; (8009e6c <BackEndTask+0x31c>)
 8009d68:	f003 fcbc 	bl	800d6e4 <CalculateCRC8>
 8009d6c:	4680      	mov	r8, r0
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009d6e:	2238      	movs	r2, #56	; 0x38
 8009d70:	2100      	movs	r1, #0
 8009d72:	483e      	ldr	r0, [pc, #248]	; (8009e6c <BackEndTask+0x31c>)
 8009d74:	f00a fa55 	bl	8014222 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009d78:	9b04      	ldr	r3, [sp, #16]
 8009d7a:	019b      	lsls	r3, r3, #6
 8009d7c:	4a37      	ldr	r2, [pc, #220]	; (8009e5c <BackEndTask+0x30c>)
 8009d7e:	4694      	mov	ip, r2
 8009d80:	4463      	add	r3, ip
 8009d82:	464a      	mov	r2, r9
 8009d84:	5c9b      	ldrb	r3, [r3, r2]
 8009d86:	4543      	cmp	r3, r8
 8009d88:	d09d      	beq.n	8009cc6 <BackEndTask+0x176>
					MSG_RX_BUF_SIZE - packetStart);
 8009d8a:	2240      	movs	r2, #64	; 0x40
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	4690      	mov	r8, r2
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009d92:	01a8      	lsls	r0, r5, #6
 8009d94:	469c      	mov	ip, r3
 8009d96:	4460      	add	r0, ip
 8009d98:	4b30      	ldr	r3, [pc, #192]	; (8009e5c <BackEndTask+0x30c>)
 8009d9a:	18c0      	adds	r0, r0, r3
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	f00a fa40 	bl	8014222 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009da2:	9a02      	ldr	r2, [sp, #8]
 8009da4:	3204      	adds	r2, #4
 8009da6:	4643      	mov	r3, r8
 8009da8:	1ad2      	subs	r2, r2, r3
 8009daa:	2100      	movs	r1, #0
 8009dac:	0038      	movs	r0, r7
 8009dae:	f00a fa38 	bl	8014222 <memset>
 8009db2:	e0a5      	b.n	8009f00 <BackEndTask+0x3b0>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009db4:	00eb      	lsls	r3, r5, #3
 8009db6:	1b5b      	subs	r3, r3, r5
 8009db8:	00d9      	lsls	r1, r3, #3
 8009dba:	01ab      	lsls	r3, r5, #6
							MSG_RX_BUF_SIZE - parseStart);
 8009dbc:	2240      	movs	r2, #64	; 0x40
 8009dbe:	9805      	ldr	r0, [sp, #20]
 8009dc0:	1a12      	subs	r2, r2, r0
 8009dc2:	4690      	mov	r8, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009dc4:	4a2b      	ldr	r2, [pc, #172]	; (8009e74 <BackEndTask+0x324>)
 8009dc6:	0010      	movs	r0, r2
 8009dc8:	9104      	str	r1, [sp, #16]
 8009dca:	468c      	mov	ip, r1
 8009dcc:	4460      	add	r0, ip
 8009dce:	9a05      	ldr	r2, [sp, #20]
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	469c      	mov	ip, r3
 8009dd4:	4462      	add	r2, ip
 8009dd6:	4b21      	ldr	r3, [pc, #132]	; (8009e5c <BackEndTask+0x30c>)
 8009dd8:	18d1      	adds	r1, r2, r3
 8009dda:	4642      	mov	r2, r8
 8009ddc:	f00a fa18 	bl	8014210 <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009de0:	9904      	ldr	r1, [sp, #16]
 8009de2:	0008      	movs	r0, r1
 8009de4:	4440      	add	r0, r8
 8009de6:	4a23      	ldr	r2, [pc, #140]	; (8009e74 <BackEndTask+0x324>)
 8009de8:	4694      	mov	ip, r2
 8009dea:	4460      	add	r0, ip
 8009dec:	9a02      	ldr	r2, [sp, #8]
 8009dee:	4641      	mov	r1, r8
 8009df0:	1a52      	subs	r2, r2, r1
 8009df2:	9b00      	ldr	r3, [sp, #0]
 8009df4:	0019      	movs	r1, r3
 8009df6:	4b19      	ldr	r3, [pc, #100]	; (8009e5c <BackEndTask+0x30c>)
 8009df8:	4698      	mov	r8, r3
 8009dfa:	4441      	add	r1, r8
 8009dfc:	f00a fa08 	bl	8014210 <memcpy>
 8009e00:	e779      	b.n	8009cf6 <BackEndTask+0x1a6>
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009e02:	01ab      	lsls	r3, r5, #6
							MSG_RX_BUF_SIZE - packetStart);
 8009e04:	2240      	movs	r2, #64	; 0x40
 8009e06:	9901      	ldr	r1, [sp, #4]
 8009e08:	1a52      	subs	r2, r2, r1
 8009e0a:	4690      	mov	r8, r2
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	0018      	movs	r0, r3
 8009e10:	468c      	mov	ip, r1
 8009e12:	4460      	add	r0, ip
 8009e14:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <BackEndTask+0x30c>)
 8009e16:	18c0      	adds	r0, r0, r3
 8009e18:	2100      	movs	r1, #0
 8009e1a:	f00a fa02 	bl	8014222 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009e1e:	9a02      	ldr	r2, [sp, #8]
 8009e20:	3204      	adds	r2, #4
 8009e22:	4641      	mov	r1, r8
 8009e24:	1a52      	subs	r2, r2, r1
 8009e26:	9b00      	ldr	r3, [sp, #0]
 8009e28:	490c      	ldr	r1, [pc, #48]	; (8009e5c <BackEndTask+0x30c>)
 8009e2a:	468c      	mov	ip, r1
 8009e2c:	4463      	add	r3, ip
 8009e2e:	0018      	movs	r0, r3
 8009e30:	2100      	movs	r1, #0
 8009e32:	f00a f9f6 	bl	8014222 <memset>
 8009e36:	e76c      	b.n	8009d12 <BackEndTask+0x1c2>
					portStatus[port] =FREE;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9a00      	ldr	r2, [sp, #0]
 8009e3c:	7013      	strb	r3, [r2, #0]
 8009e3e:	e6c6      	b.n	8009bce <BackEndTask+0x7e>
			}
		}

		taskYIELD();
 8009e40:	f006 fbf2 	bl	8010628 <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 8009e44:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <BackEndTask+0x32c>)
 8009e46:	4698      	mov	r8, r3
 8009e48:	4b0d      	ldr	r3, [pc, #52]	; (8009e80 <BackEndTask+0x330>)
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009e4a:	4f04      	ldr	r7, [pc, #16]	; (8009e5c <BackEndTask+0x30c>)
 8009e4c:	2500      	movs	r5, #0
 8009e4e:	4644      	mov	r4, r8
 8009e50:	001e      	movs	r6, r3
 8009e52:	e6a8      	b.n	8009ba6 <BackEndTask+0x56>
 8009e54:	200012d0 	.word	0x200012d0
 8009e58:	20006aa8 	.word	0x20006aa8
 8009e5c:	200012d8 	.word	0x200012d8
 8009e60:	20000a7f 	.word	0x20000a7f
 8009e64:	20001100 	.word	0x20001100
 8009e68:	2000150c 	.word	0x2000150c
 8009e6c:	20001460 	.word	0x20001460
 8009e70:	20000f38 	.word	0x20000f38
 8009e74:	20000d10 	.word	0x20000d10
 8009e78:	200015f8 	.word	0x200015f8
 8009e7c:	20001101 	.word	0x20001101
 8009e80:	20001458 	.word	0x20001458
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009e84:	3201      	adds	r2, #1
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009e86:	2a3e      	cmp	r2, #62	; 0x3e
 8009e88:	dd00      	ble.n	8009e8c <BackEndTask+0x33c>
 8009e8a:	e676      	b.n	8009b7a <BackEndTask+0x2a>
 8009e8c:	5cb9      	ldrb	r1, [r7, r2]
 8009e8e:	2948      	cmp	r1, #72	; 0x48
 8009e90:	d1f8      	bne.n	8009e84 <BackEndTask+0x334>
 8009e92:	5c81      	ldrb	r1, [r0, r2]
 8009e94:	295a      	cmp	r1, #90	; 0x5a
 8009e96:	d1f5      	bne.n	8009e84 <BackEndTask+0x334>
 8009e98:	9201      	str	r2, [sp, #4]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	2b3d      	cmp	r3, #61	; 0x3d
 8009e9e:	d100      	bne.n	8009ea2 <BackEndTask+0x352>
 8009ea0:	e6d7      	b.n	8009c52 <BackEndTask+0x102>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	2b3e      	cmp	r3, #62	; 0x3e
 8009ea6:	d100      	bne.n	8009eaa <BackEndTask+0x35a>
 8009ea8:	e6e3      	b.n	8009c72 <BackEndTask+0x122>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009eaa:	9b01      	ldr	r3, [sp, #4]
 8009eac:	2b3f      	cmp	r3, #63	; 0x3f
 8009eae:	d100      	bne.n	8009eb2 <BackEndTask+0x362>
 8009eb0:	e698      	b.n	8009be4 <BackEndTask+0x94>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009eb2:	9b04      	ldr	r3, [sp, #16]
 8009eb4:	019b      	lsls	r3, r3, #6
 8009eb6:	4a17      	ldr	r2, [pc, #92]	; (8009f14 <BackEndTask+0x3c4>)
 8009eb8:	4694      	mov	ip, r2
 8009eba:	4463      	add	r3, ip
 8009ebc:	9a01      	ldr	r2, [sp, #4]
 8009ebe:	4694      	mov	ip, r2
 8009ec0:	4463      	add	r3, ip
 8009ec2:	7899      	ldrb	r1, [r3, #2]
 8009ec4:	9102      	str	r1, [sp, #8]
					parseStart =packetStart + 3;
 8009ec6:	0013      	movs	r3, r2
 8009ec8:	3203      	adds	r2, #3
 8009eca:	9205      	str	r2, [sp, #20]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009ecc:	1cca      	adds	r2, r1, #3
 8009ece:	4690      	mov	r8, r2
 8009ed0:	4443      	add	r3, r8
 8009ed2:	4699      	mov	r9, r3
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009ed4:	2b3f      	cmp	r3, #63	; 0x3f
 8009ed6:	dd00      	ble.n	8009eda <BackEndTask+0x38a>
 8009ed8:	e6c6      	b.n	8009c68 <BackEndTask+0x118>
				if(packetStart != packetEnd) // Non-empty packet
 8009eda:	9b01      	ldr	r3, [sp, #4]
 8009edc:	4599      	cmp	r9, r3
 8009ede:	d000      	beq.n	8009ee2 <BackEndTask+0x392>
 8009ee0:	e6cc      	b.n	8009c7c <BackEndTask+0x12c>
				if(packetStart < packetEnd){
 8009ee2:	9b01      	ldr	r3, [sp, #4]
 8009ee4:	4599      	cmp	r9, r3
 8009ee6:	dc00      	bgt.n	8009eea <BackEndTask+0x39a>
 8009ee8:	e74f      	b.n	8009d8a <BackEndTask+0x23a>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009eea:	9a02      	ldr	r2, [sp, #8]
 8009eec:	3204      	adds	r2, #4
 8009eee:	01a8      	lsls	r0, r5, #6
 8009ef0:	9b01      	ldr	r3, [sp, #4]
 8009ef2:	469c      	mov	ip, r3
 8009ef4:	4460      	add	r0, ip
 8009ef6:	4b07      	ldr	r3, [pc, #28]	; (8009f14 <BackEndTask+0x3c4>)
 8009ef8:	18c0      	adds	r0, r0, r3
 8009efa:	2100      	movs	r1, #0
 8009efc:	f00a f991 	bl	8014222 <memset>
				UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009f00:	464b      	mov	r3, r9
 8009f02:	3301      	adds	r3, #1
 8009f04:	9a03      	ldr	r2, [sp, #12]
 8009f06:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;
 8009f08:	4a03      	ldr	r2, [pc, #12]	; (8009f18 <BackEndTask+0x3c8>)
 8009f0a:	8813      	ldrh	r3, [r2, #0]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	8013      	strh	r3, [r2, #0]
 8009f10:	e650      	b.n	8009bb4 <BackEndTask+0x64>
 8009f12:	46c0      	nop			; (mov r8, r8)
 8009f14:	200012d8 	.word	0x200012d8
 8009f18:	200017a0 	.word	0x200017a0

08009f1c <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	4770      	bx	lr

08009f20 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8009f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f22:	46de      	mov	lr, fp
 8009f24:	4657      	mov	r7, sl
 8009f26:	464e      	mov	r6, r9
 8009f28:	4645      	mov	r5, r8
 8009f2a:	b5e0      	push	{r5, r6, r7, lr}
 8009f2c:	b097      	sub	sp, #92	; 0x5c
 8009f2e:	2300      	movs	r3, #0
 8009f30:	9306      	str	r3, [sp, #24]
 8009f32:	9309      	str	r3, [sp, #36]	; 0x24
	port =(int8_t )(unsigned )argument;
 8009f34:	b2c3      	uxtb	r3, r0
 8009f36:	9308      	str	r3, [sp, #32]
 8009f38:	27ff      	movs	r7, #255	; 0xff
 8009f3a:	4007      	ands	r7, r0
		if(messageLength[port - 1]){
 8009f3c:	1e7c      	subs	r4, r7, #1
 8009f3e:	00e3      	lsls	r3, r4, #3
 8009f40:	1b1b      	subs	r3, r3, r4
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	930a      	str	r3, [sp, #40]	; 0x28
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009f46:	4ada      	ldr	r2, [pc, #872]	; (800a2b0 <PxMessagingTask+0x390>)
 8009f48:	18d2      	adds	r2, r2, r3
 8009f4a:	9204      	str	r2, [sp, #16]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	930c      	str	r3, [sp, #48]	; 0x30
	HAL_StatusTypeDef status =HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	930b      	str	r3, [sp, #44]	; 0x2c
	BOS_Status result =BOS_OK;
 8009f54:	2500      	movs	r5, #0
			if(cMessage[port - 1][2] >> 7){
 8009f56:	00e3      	lsls	r3, r4, #3
 8009f58:	1b1b      	subs	r3, r3, r4
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	469a      	mov	sl, r3
 8009f5e:	0013      	movs	r3, r2
 8009f60:	9207      	str	r2, [sp, #28]
 8009f62:	3302      	adds	r3, #2
 8009f64:	469b      	mov	fp, r3
 8009f66:	4656      	mov	r6, sl
 8009f68:	46aa      	mov	sl, r5
 8009f6a:	e021      	b.n	8009fb0 <PxMessagingTask+0x90>
				code =cMessage[port - 1][3 + shift];
 8009f6c:	4ad0      	ldr	r2, [pc, #832]	; (800a2b0 <PxMessagingTask+0x390>)
 8009f6e:	1992      	adds	r2, r2, r6
 8009f70:	18d3      	adds	r3, r2, r3
 8009f72:	78db      	ldrb	r3, [r3, #3]
 8009f74:	4699      	mov	r9, r3
 8009f76:	e046      	b.n	800a006 <PxMessagingTask+0xe6>
				if(code == CODE_UPDATE){ // Remote bootloader update
 8009f78:	464b      	mov	r3, r9
 8009f7a:	2b19      	cmp	r3, #25
 8009f7c:	d05b      	beq.n	800a036 <PxMessagingTask+0x116>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8009f7e:	2b1a      	cmp	r3, #26
 8009f80:	d063      	beq.n	800a04a <PxMessagingTask+0x12a>
		if(result == BOS_ERR_UnknownMessage){
 8009f82:	4653      	mov	r3, sl
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d101      	bne.n	8009f8c <PxMessagingTask+0x6c>
 8009f88:	f001 fb8c 	bl	800b6a4 <PxMessagingTask+0x1784>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009f8c:	4dc9      	ldr	r5, [pc, #804]	; (800a2b4 <PxMessagingTask+0x394>)
 8009f8e:	5d2a      	ldrb	r2, [r5, r4]
 8009f90:	2100      	movs	r1, #0
 8009f92:	9804      	ldr	r0, [sp, #16]
 8009f94:	f00a f945 	bl	8014222 <memset>
		messageLength[port - 1] =0;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	552b      	strb	r3, [r5, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8009f9c:	4bc6      	ldr	r3, [pc, #792]	; (800a2b8 <PxMessagingTask+0x398>)
 8009f9e:	5ddb      	ldrb	r3, [r3, r7]
 8009fa0:	3b02      	subs	r3, #2
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d902      	bls.n	8009fac <PxMessagingTask+0x8c>
			portStatus[port] =FREE;
 8009fa6:	4bc4      	ldr	r3, [pc, #784]	; (800a2b8 <PxMessagingTask+0x398>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	55da      	strb	r2, [r3, r7]
		taskYIELD();
 8009fac:	f006 fb3c 	bl	8010628 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	4249      	negs	r1, r1
 8009fb4:	2001      	movs	r0, #1
 8009fb6:	f006 f85b 	bl	8010070 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8009fba:	4bbe      	ldr	r3, [pc, #760]	; (800a2b4 <PxMessagingTask+0x394>)
 8009fbc:	5d19      	ldrb	r1, [r3, r4]
 8009fbe:	2900      	cmp	r1, #0
 8009fc0:	d0df      	beq.n	8009f82 <PxMessagingTask+0x62>
			if(cMessage[port - 1][2] >> 7){
 8009fc2:	465b      	mov	r3, fp
 8009fc4:	781a      	ldrb	r2, [r3, #0]
 8009fc6:	09d3      	lsrs	r3, r2, #7
 8009fc8:	48bc      	ldr	r0, [pc, #752]	; (800a2bc <PxMessagingTask+0x39c>)
 8009fca:	7003      	strb	r3, [r0, #0]
			dst =cMessage[port - 1][0];
 8009fcc:	4bb8      	ldr	r3, [pc, #736]	; (800a2b0 <PxMessagingTask+0x390>)
 8009fce:	5cf3      	ldrb	r3, [r6, r3]
 8009fd0:	4698      	mov	r8, r3
			src =cMessage[port - 1][1];
 8009fd2:	9b07      	ldr	r3, [sp, #28]
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	9306      	str	r3, [sp, #24]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8009fd8:	2301      	movs	r3, #1
 8009fda:	4013      	ands	r3, r2
			shift =0;
 8009fdc:	9305      	str	r3, [sp, #20]
			BOS.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03); // 3rd-4th bits Trace
 8009fde:	4db8      	ldr	r5, [pc, #736]	; (800a2c0 <PxMessagingTask+0x3a0>)
 8009fe0:	0710      	lsls	r0, r2, #28
 8009fe2:	0f80      	lsrs	r0, r0, #30
 8009fe4:	71e8      	strb	r0, [r5, #7]
			BOS.response =(cMessage[port - 1][2]) & 0x60; // 6th-7th bits Response mode
 8009fe6:	2060      	movs	r0, #96	; 0x60
 8009fe8:	4010      	ands	r0, r2
 8009fea:	71a8      	strb	r0, [r5, #6]
			if(extendCode == true){
 8009fec:	0792      	lsls	r2, r2, #30
 8009fee:	d5bd      	bpl.n	8009f6c <PxMessagingTask+0x4c>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8009ff0:	4aaf      	ldr	r2, [pc, #700]	; (800a2b0 <PxMessagingTask+0x390>)
 8009ff2:	1992      	adds	r2, r2, r6
 8009ff4:	18d2      	adds	r2, r2, r3
 8009ff6:	7910      	ldrb	r0, [r2, #4]
 8009ff8:	0200      	lsls	r0, r0, #8
 8009ffa:	78d2      	ldrb	r2, [r2, #3]
 8009ffc:	1812      	adds	r2, r2, r0
 8009ffe:	b292      	uxth	r2, r2
 800a000:	4691      	mov	r9, r2
				++shift;
 800a002:	3301      	adds	r3, #1
 800a004:	9305      	str	r3, [sp, #20]
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a006:	4643      	mov	r3, r8
 800a008:	3b01      	subs	r3, #1
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2bfc      	cmp	r3, #252	; 0xfc
 800a00e:	d829      	bhi.n	800a064 <PxMessagingTask+0x144>
 800a010:	4bac      	ldr	r3, [pc, #688]	; (800a2c4 <PxMessagingTask+0x3a4>)
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	4543      	cmp	r3, r8
 800a016:	d070      	beq.n	800a0fa <PxMessagingTask+0x1da>
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d101      	bne.n	800a020 <PxMessagingTask+0x100>
 800a01c:	f001 fb70 	bl	800b700 <PxMessagingTask+0x17e0>
				ForwardReceivedMessage(port);
 800a020:	9808      	ldr	r0, [sp, #32]
 800a022:	f7ff fc33 	bl	800988c <ForwardReceivedMessage>
				if(BOS.trace)
 800a026:	4ba6      	ldr	r3, [pc, #664]	; (800a2c0 <PxMessagingTask+0x3a0>)
 800a028:	79db      	ldrb	r3, [r3, #7]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0a4      	beq.n	8009f78 <PxMessagingTask+0x58>
					indMode =IND_SHORT_BLINK;
 800a02e:	4ba6      	ldr	r3, [pc, #664]	; (800a2c8 <PxMessagingTask+0x3a8>)
 800a030:	2203      	movs	r2, #3
 800a032:	701a      	strb	r2, [r3, #0]
 800a034:	e7a0      	b.n	8009f78 <PxMessagingTask+0x58>
					Delay_ms(100);
 800a036:	2064      	movs	r0, #100	; 0x64
 800a038:	f006 fc70 	bl	801091c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800a03c:	2300      	movs	r3, #0
 800a03e:	9a08      	ldr	r2, [sp, #32]
 800a040:	4641      	mov	r1, r8
 800a042:	9806      	ldr	r0, [sp, #24]
 800a044:	f7f9 fe1e 	bl	8003c84 <remoteBootloaderUpdate>
 800a048:	e79b      	b.n	8009f82 <PxMessagingTask+0x62>
					Delay_ms(100);
 800a04a:	2064      	movs	r0, #100	; 0x64
 800a04c:	f006 fc66 	bl	801091c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a050:	4b97      	ldr	r3, [pc, #604]	; (800a2b0 <PxMessagingTask+0x390>)
 800a052:	199b      	adds	r3, r3, r6
 800a054:	9a05      	ldr	r2, [sp, #20]
 800a056:	5c9b      	ldrb	r3, [r3, r2]
 800a058:	9a08      	ldr	r2, [sp, #32]
 800a05a:	4641      	mov	r1, r8
 800a05c:	9806      	ldr	r0, [sp, #24]
 800a05e:	f7f9 fe11 	bl	8003c84 <remoteBootloaderUpdate>
 800a062:	e78e      	b.n	8009f82 <PxMessagingTask+0x62>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a064:	4643      	mov	r3, r8
 800a066:	2bff      	cmp	r3, #255	; 0xff
 800a068:	d03c      	beq.n	800a0e4 <PxMessagingTask+0x1c4>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a06a:	2bfe      	cmp	r3, #254	; 0xfe
 800a06c:	d145      	bne.n	800a0fa <PxMessagingTask+0x1da>
 800a06e:	4b90      	ldr	r3, [pc, #576]	; (800a2b0 <PxMessagingTask+0x390>)
 800a070:	199b      	adds	r3, r3, r6
 800a072:	1859      	adds	r1, r3, r1
 800a074:	3901      	subs	r1, #1
 800a076:	780b      	ldrb	r3, [r1, #0]
 800a078:	4a94      	ldr	r2, [pc, #592]	; (800a2cc <PxMessagingTask+0x3ac>)
 800a07a:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800a07c:	2103      	movs	r1, #3
 800a07e:	468a      	mov	sl, r1
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a080:	429a      	cmp	r2, r3
 800a082:	d083      	beq.n	8009f8c <PxMessagingTask+0x6c>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a084:	4a91      	ldr	r2, [pc, #580]	; (800a2cc <PxMessagingTask+0x3ac>)
 800a086:	7013      	strb	r3, [r2, #0]
 800a088:	4a91      	ldr	r2, [pc, #580]	; (800a2d0 <PxMessagingTask+0x3b0>)
 800a08a:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800a08c:	9908      	ldr	r1, [sp, #32]
 800a08e:	20fe      	movs	r0, #254	; 0xfe
 800a090:	f7ff fc1c 	bl	80098cc <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a094:	4b87      	ldr	r3, [pc, #540]	; (800a2b4 <PxMessagingTask+0x394>)
 800a096:	5d19      	ldrb	r1, [r3, r4]
 800a098:	4b85      	ldr	r3, [pc, #532]	; (800a2b0 <PxMessagingTask+0x390>)
 800a09a:	199b      	adds	r3, r3, r6
 800a09c:	185b      	adds	r3, r3, r1
 800a09e:	1e5a      	subs	r2, r3, #1
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800a0a4:	3b02      	subs	r3, #2
 800a0a6:	781a      	ldrb	r2, [r3, #0]
 800a0a8:	9209      	str	r2, [sp, #36]	; 0x24
					for(i =0; i < temp; i++){
 800a0aa:	2a00      	cmp	r2, #0
 800a0ac:	d101      	bne.n	800a0b2 <PxMessagingTask+0x192>
 800a0ae:	f001 fb16 	bl	800b6de <PxMessagingTask+0x17be>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800a0b2:	4b84      	ldr	r3, [pc, #528]	; (800a2c4 <PxMessagingTask+0x3a4>)
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	469c      	mov	ip, r3
 800a0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ba:	18c8      	adds	r0, r1, r3
 800a0bc:	1a80      	subs	r0, r0, r2
 800a0be:	3802      	subs	r0, #2
 800a0c0:	4b7b      	ldr	r3, [pc, #492]	; (800a2b0 <PxMessagingTask+0x390>)
 800a0c2:	18c0      	adds	r0, r0, r3
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4665      	mov	r5, ip
 800a0c8:	468c      	mov	ip, r1
 800a0ca:	0011      	movs	r1, r2
 800a0cc:	5cc2      	ldrb	r2, [r0, r3]
 800a0ce:	42aa      	cmp	r2, r5
 800a0d0:	d101      	bne.n	800a0d6 <PxMessagingTask+0x1b6>
 800a0d2:	f001 fafc 	bl	800b6ce <PxMessagingTask+0x17ae>
					for(i =0; i < temp; i++){
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	428a      	cmp	r2, r1
 800a0dc:	d3f6      	bcc.n	800a0cc <PxMessagingTask+0x1ac>
					result =BOS_ERR_WrongID;
 800a0de:	2366      	movs	r3, #102	; 0x66
 800a0e0:	469a      	mov	sl, r3
 800a0e2:	e753      	b.n	8009f8c <PxMessagingTask+0x6c>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a0e4:	4b72      	ldr	r3, [pc, #456]	; (800a2b0 <PxMessagingTask+0x390>)
 800a0e6:	199b      	adds	r3, r3, r6
 800a0e8:	1859      	adds	r1, r3, r1
 800a0ea:	3901      	subs	r1, #1
 800a0ec:	780b      	ldrb	r3, [r1, #0]
 800a0ee:	4a77      	ldr	r2, [pc, #476]	; (800a2cc <PxMessagingTask+0x3ac>)
 800a0f0:	7812      	ldrb	r2, [r2, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d115      	bne.n	800a122 <PxMessagingTask+0x202>
					result =BOS_ERR_MSG_Reflection;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	469a      	mov	sl, r3
				if(result == BOS_OK){
 800a0fa:	4653      	mov	r3, sl
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d000      	beq.n	800a102 <PxMessagingTask+0x1e2>
 800a100:	e73f      	b.n	8009f82 <PxMessagingTask+0x62>
				shift +=4;
 800a102:	9d05      	ldr	r5, [sp, #20]
 800a104:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 800a106:	4b6b      	ldr	r3, [pc, #428]	; (800a2b4 <PxMessagingTask+0x394>)
 800a108:	5d19      	ldrb	r1, [r3, r4]
 800a10a:	1b48      	subs	r0, r1, r5
 800a10c:	b2c3      	uxtb	r3, r0
 800a10e:	469a      	mov	sl, r3
					switch(code){
 800a110:	464b      	mov	r3, r9
 800a112:	2b24      	cmp	r3, #36	; 0x24
 800a114:	d901      	bls.n	800a11a <PxMessagingTask+0x1fa>
 800a116:	f001 fa8f 	bl	800b638 <PxMessagingTask+0x1718>
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4a6d      	ldr	r2, [pc, #436]	; (800a2d4 <PxMessagingTask+0x3b4>)
 800a11e:	58d3      	ldr	r3, [r2, r3]
 800a120:	469f      	mov	pc, r3
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a122:	4a6a      	ldr	r2, [pc, #424]	; (800a2cc <PxMessagingTask+0x3ac>)
 800a124:	7013      	strb	r3, [r2, #0]
 800a126:	4a6a      	ldr	r2, [pc, #424]	; (800a2d0 <PxMessagingTask+0x3b0>)
 800a128:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a12a:	9908      	ldr	r1, [sp, #32]
 800a12c:	20ff      	movs	r0, #255	; 0xff
 800a12e:	f7ff fbcd 	bl	80098cc <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a132:	4b60      	ldr	r3, [pc, #384]	; (800a2b4 <PxMessagingTask+0x394>)
 800a134:	5d1a      	ldrb	r2, [r3, r4]
 800a136:	4b5e      	ldr	r3, [pc, #376]	; (800a2b0 <PxMessagingTask+0x390>)
 800a138:	199b      	adds	r3, r3, r6
 800a13a:	189b      	adds	r3, r3, r2
 800a13c:	3b01      	subs	r3, #1
 800a13e:	2200      	movs	r2, #0
 800a140:	701a      	strb	r2, [r3, #0]
 800a142:	e7da      	b.n	800a0fa <PxMessagingTask+0x1da>
							for(p =0; p < numOfParams; p++){
 800a144:	4653      	mov	r3, sl
 800a146:	2b00      	cmp	r3, #0
 800a148:	d022      	beq.n	800a190 <PxMessagingTask+0x270>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a14a:	9b06      	ldr	r3, [sp, #24]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	469c      	mov	ip, r3
 800a150:	005a      	lsls	r2, r3, #1
 800a152:	4b61      	ldr	r3, [pc, #388]	; (800a2d8 <PxMessagingTask+0x3b8>)
 800a154:	5ad3      	ldrh	r3, [r2, r3]
 800a156:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a158:	4690      	mov	r8, r2
 800a15a:	4445      	add	r5, r8
 800a15c:	4a54      	ldr	r2, [pc, #336]	; (800a2b0 <PxMessagingTask+0x390>)
 800a15e:	18ad      	adds	r5, r5, r2
 800a160:	2200      	movs	r2, #0
 800a162:	2080      	movs	r0, #128	; 0x80
 800a164:	0200      	lsls	r0, r0, #8
 800a166:	46a0      	mov	r8, r4
 800a168:	4654      	mov	r4, sl
 800a16a:	46b1      	mov	r9, r6
 800a16c:	001e      	movs	r6, r3
 800a16e:	5ca9      	ldrb	r1, [r5, r2]
 800a170:	3901      	subs	r1, #1
 800a172:	0003      	movs	r3, r0
 800a174:	410b      	asrs	r3, r1
 800a176:	431e      	orrs	r6, r3
 800a178:	b2b6      	uxth	r6, r6
							for(p =0; p < numOfParams; p++){
 800a17a:	3201      	adds	r2, #1
 800a17c:	b2d3      	uxtb	r3, r2
 800a17e:	42a3      	cmp	r3, r4
 800a180:	d3f5      	bcc.n	800a16e <PxMessagingTask+0x24e>
 800a182:	4644      	mov	r4, r8
 800a184:	0033      	movs	r3, r6
 800a186:	464e      	mov	r6, r9
 800a188:	4662      	mov	r2, ip
 800a18a:	0050      	lsls	r0, r2, #1
 800a18c:	4a52      	ldr	r2, [pc, #328]	; (800a2d8 <PxMessagingTask+0x3b8>)
 800a18e:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 800a190:	4b52      	ldr	r3, [pc, #328]	; (800a2dc <PxMessagingTask+0x3bc>)
 800a192:	2200      	movs	r2, #0
 800a194:	701a      	strb	r2, [r3, #0]
							break;
 800a196:	2300      	movs	r3, #0
 800a198:	469a      	mov	sl, r3
 800a19a:	e6f7      	b.n	8009f8c <PxMessagingTask+0x6c>
							indMode =IND_PING;
 800a19c:	4b4a      	ldr	r3, [pc, #296]	; (800a2c8 <PxMessagingTask+0x3a8>)
 800a19e:	2201      	movs	r2, #1
 800a1a0:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a1a2:	200a      	movs	r0, #10
 800a1a4:	f004 f9f7 	bl	800e596 <osDelay>
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 800a1a8:	4b45      	ldr	r3, [pc, #276]	; (800a2c0 <PxMessagingTask+0x3a0>)
 800a1aa:	799b      	ldrb	r3, [r3, #6]
 800a1ac:	2240      	movs	r2, #64	; 0x40
 800a1ae:	4393      	bics	r3, r2
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	4692      	mov	sl, r2
 800a1b4:	2b20      	cmp	r3, #32
 800a1b6:	d000      	beq.n	800a1ba <PxMessagingTask+0x29a>
 800a1b8:	e6e8      	b.n	8009f8c <PxMessagingTask+0x6c>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a1ba:	2102      	movs	r1, #2
 800a1bc:	9806      	ldr	r0, [sp, #24]
 800a1be:	f7ff fbcd 	bl	800995c <SendMessageToModule>
 800a1c2:	e6e3      	b.n	8009f8c <PxMessagingTask+0x6c>
							if(!moduleAlias[myID][0])
 800a1c4:	4b3f      	ldr	r3, [pc, #252]	; (800a2c4 <PxMessagingTask+0x3a4>)
 800a1c6:	781a      	ldrb	r2, [r3, #0]
 800a1c8:	0093      	lsls	r3, r2, #2
 800a1ca:	189b      	adds	r3, r3, r2
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	4a44      	ldr	r2, [pc, #272]	; (800a2e0 <PxMessagingTask+0x3c0>)
 800a1d0:	5c9b      	ldrb	r3, [r3, r2]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d118      	bne.n	800a208 <PxMessagingTask+0x2e8>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a1d6:	9a06      	ldr	r2, [sp, #24]
 800a1d8:	4942      	ldr	r1, [pc, #264]	; (800a2e4 <PxMessagingTask+0x3c4>)
 800a1da:	4843      	ldr	r0, [pc, #268]	; (800a2e8 <PxMessagingTask+0x3c8>)
 800a1dc:	f00a fa16 	bl	801460c <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a1e0:	4d41      	ldr	r5, [pc, #260]	; (800a2e8 <PxMessagingTask+0x3c8>)
 800a1e2:	0028      	movs	r0, r5
 800a1e4:	f7f5 ff98 	bl	8000118 <strlen>
 800a1e8:	b282      	uxth	r2, r0
 800a1ea:	4b40      	ldr	r3, [pc, #256]	; (800a2ec <PxMessagingTask+0x3cc>)
 800a1ec:	7818      	ldrb	r0, [r3, #0]
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	425b      	negs	r3, r3
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	3333      	adds	r3, #51	; 0x33
 800a1f6:	0029      	movs	r1, r5
 800a1f8:	f004 f89e 	bl	800e338 <writePxMutex>
							responseStatus =BOS_OK;
 800a1fc:	4b37      	ldr	r3, [pc, #220]	; (800a2dc <PxMessagingTask+0x3bc>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	701a      	strb	r2, [r3, #0]
							break;
 800a202:	2300      	movs	r3, #0
 800a204:	469a      	mov	sl, r3
 800a206:	e6c1      	b.n	8009f8c <PxMessagingTask+0x6c>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800a208:	230a      	movs	r3, #10
 800a20a:	9906      	ldr	r1, [sp, #24]
 800a20c:	434b      	muls	r3, r1
 800a20e:	4a34      	ldr	r2, [pc, #208]	; (800a2e0 <PxMessagingTask+0x3c0>)
 800a210:	189b      	adds	r3, r3, r2
 800a212:	000a      	movs	r2, r1
 800a214:	4936      	ldr	r1, [pc, #216]	; (800a2f0 <PxMessagingTask+0x3d0>)
 800a216:	4834      	ldr	r0, [pc, #208]	; (800a2e8 <PxMessagingTask+0x3c8>)
 800a218:	f00a f9f8 	bl	801460c <sprintf>
 800a21c:	e7e0      	b.n	800a1e0 <PxMessagingTask+0x2c0>
							IND_ON();
 800a21e:	2180      	movs	r1, #128	; 0x80
 800a220:	2090      	movs	r0, #144	; 0x90
 800a222:	2201      	movs	r2, #1
 800a224:	0109      	lsls	r1, r1, #4
 800a226:	05c0      	lsls	r0, r0, #23
 800a228:	f008 f800 	bl	801222c <HAL_GPIO_WritePin>
							break;
 800a22c:	2300      	movs	r3, #0
 800a22e:	469a      	mov	sl, r3
 800a230:	e6ac      	b.n	8009f8c <PxMessagingTask+0x6c>
							IND_OFF();
 800a232:	2180      	movs	r1, #128	; 0x80
 800a234:	2090      	movs	r0, #144	; 0x90
 800a236:	2200      	movs	r2, #0
 800a238:	0109      	lsls	r1, r1, #4
 800a23a:	05c0      	lsls	r0, r0, #23
 800a23c:	f007 fff6 	bl	801222c <HAL_GPIO_WritePin>
							break;
 800a240:	2300      	movs	r3, #0
 800a242:	469a      	mov	sl, r3
 800a244:	e6a2      	b.n	8009f8c <PxMessagingTask+0x6c>
							IND_toggle();
 800a246:	2180      	movs	r1, #128	; 0x80
 800a248:	2090      	movs	r0, #144	; 0x90
 800a24a:	0109      	lsls	r1, r1, #4
 800a24c:	05c0      	lsls	r0, r0, #23
 800a24e:	f007 fff3 	bl	8012238 <HAL_GPIO_TogglePin>
							break;
 800a252:	2300      	movs	r3, #0
 800a254:	469a      	mov	sl, r3
 800a256:	e699      	b.n	8009f8c <PxMessagingTask+0x6c>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a258:	4b26      	ldr	r3, [pc, #152]	; (800a2f4 <PxMessagingTask+0x3d4>)
 800a25a:	469c      	mov	ip, r3
 800a25c:	00a3      	lsls	r3, r4, #2
 800a25e:	4a14      	ldr	r2, [pc, #80]	; (800a2b0 <PxMessagingTask+0x390>)
 800a260:	4691      	mov	r9, r2
 800a262:	44b1      	add	r9, r6
 800a264:	464a      	mov	r2, r9
 800a266:	1950      	adds	r0, r2, r5
 800a268:	7881      	ldrb	r1, [r0, #2]
 800a26a:	4688      	mov	r8, r1
 800a26c:	9906      	ldr	r1, [sp, #24]
 800a26e:	0209      	lsls	r1, r1, #8
 800a270:	4441      	add	r1, r8
 800a272:	4662      	mov	r2, ip
 800a274:	5299      	strh	r1, [r3, r2]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a276:	4463      	add	r3, ip
 800a278:	464a      	mov	r2, r9
 800a27a:	5d51      	ldrb	r1, [r2, r5]
 800a27c:	0209      	lsls	r1, r1, #8
 800a27e:	7842      	ldrb	r2, [r0, #1]
 800a280:	1852      	adds	r2, r2, r1
 800a282:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 800a284:	4b1c      	ldr	r3, [pc, #112]	; (800a2f8 <PxMessagingTask+0x3d8>)
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	4a1c      	ldr	r2, [pc, #112]	; (800a2fc <PxMessagingTask+0x3dc>)
 800a28a:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a28c:	0a1b      	lsrs	r3, r3, #8
 800a28e:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a290:	9d08      	ldr	r5, [sp, #32]
 800a292:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 800a294:	2002      	movs	r0, #2
 800a296:	f004 f97e 	bl	800e596 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a29a:	2303      	movs	r3, #3
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	3308      	adds	r3, #8
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	0028      	movs	r0, r5
 800a2a6:	f7ff f931 	bl	800950c <SendMessageFromPort>
							break;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	469a      	mov	sl, r3
 800a2ae:	e66d      	b.n	8009f8c <PxMessagingTask+0x6c>
 800a2b0:	20000d10 	.word	0x20000d10
 800a2b4:	20000f38 	.word	0x20000f38
 800a2b8:	20001100 	.word	0x20001100
 800a2bc:	20000efd 	.word	0x20000efd
 800a2c0:	20006aa8 	.word	0x20006aa8
 800a2c4:	2000107e 	.word	0x2000107e
 800a2c8:	20000efc 	.word	0x20000efc
 800a2cc:	200015fa 	.word	0x200015fa
 800a2d0:	20000cbc 	.word	0x20000cbc
 800a2d4:	0801ce38 	.word	0x0801ce38
 800a2d8:	20006f24 	.word	0x20006f24
 800a2dc:	20001118 	.word	0x20001118
 800a2e0:	20000f70 	.word	0x20000f70
 800a2e4:	0801bb98 	.word	0x0801bb98
 800a2e8:	20001750 	.word	0x20001750
 800a2ec:	20000a7f 	.word	0x20000a7f
 800a2f0:	0801bbac 	.word	0x0801bbac
 800a2f4:	20001080 	.word	0x20001080
 800a2f8:	20000050 	.word	0x20000050
 800a2fc:	20000f40 	.word	0x20000f40
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a300:	4bdc      	ldr	r3, [pc, #880]	; (800a674 <PxMessagingTask+0x754>)
 800a302:	469c      	mov	ip, r3
 800a304:	00a3      	lsls	r3, r4, #2
 800a306:	4adc      	ldr	r2, [pc, #880]	; (800a678 <PxMessagingTask+0x758>)
 800a308:	4691      	mov	r9, r2
 800a30a:	44b1      	add	r9, r6
 800a30c:	464a      	mov	r2, r9
 800a30e:	1950      	adds	r0, r2, r5
 800a310:	7881      	ldrb	r1, [r0, #2]
 800a312:	4688      	mov	r8, r1
 800a314:	9906      	ldr	r1, [sp, #24]
 800a316:	0209      	lsls	r1, r1, #8
 800a318:	4441      	add	r1, r8
 800a31a:	4662      	mov	r2, ip
 800a31c:	5299      	strh	r1, [r3, r2]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a31e:	4463      	add	r3, ip
 800a320:	464a      	mov	r2, r9
 800a322:	5d51      	ldrb	r1, [r2, r5]
 800a324:	0209      	lsls	r1, r1, #8
 800a326:	7842      	ldrb	r2, [r0, #1]
 800a328:	1852      	adds	r2, r2, r1
 800a32a:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 800a32c:	4bd3      	ldr	r3, [pc, #844]	; (800a67c <PxMessagingTask+0x75c>)
 800a32e:	2200      	movs	r2, #0
 800a330:	701a      	strb	r2, [r3, #0]
							break;
 800a332:	2300      	movs	r3, #0
 800a334:	469a      	mov	sl, r3
 800a336:	e629      	b.n	8009f8c <PxMessagingTask+0x6c>
							ExploreNeighbors(port);
 800a338:	9808      	ldr	r0, [sp, #32]
 800a33a:	f7f9 fae1 	bl	8003900 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a33e:	4bd0      	ldr	r3, [pc, #832]	; (800a680 <PxMessagingTask+0x760>)
 800a340:	2202      	movs	r2, #2
 800a342:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a344:	200a      	movs	r0, #10
 800a346:	f004 f926 	bl	800e596 <osDelay>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a34a:	4bca      	ldr	r3, [pc, #808]	; (800a674 <PxMessagingTask+0x754>)
 800a34c:	4699      	mov	r9, r3
 800a34e:	2501      	movs	r5, #1
							temp =0;
 800a350:	2300      	movs	r3, #0
									messageParams[temp] =p;
 800a352:	46a0      	mov	r8, r4
 800a354:	464c      	mov	r4, r9
 800a356:	46b1      	mov	r9, r6
 800a358:	001e      	movs	r6, r3
 800a35a:	e004      	b.n	800a366 <PxMessagingTask+0x446>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a35c:	3501      	adds	r5, #1
 800a35e:	b2ed      	uxtb	r5, r5
 800a360:	3404      	adds	r4, #4
 800a362:	2d07      	cmp	r5, #7
 800a364:	d00e      	beq.n	800a384 <PxMessagingTask+0x464>
								if(neighbors[p - 1][0]){
 800a366:	8823      	ldrh	r3, [r4, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d0f7      	beq.n	800a35c <PxMessagingTask+0x43c>
									messageParams[temp] =p;
 800a36c:	4bc5      	ldr	r3, [pc, #788]	; (800a684 <PxMessagingTask+0x764>)
 800a36e:	559d      	strb	r5, [r3, r6]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a370:	1c70      	adds	r0, r6, #1
 800a372:	469c      	mov	ip, r3
 800a374:	4460      	add	r0, ip
 800a376:	2204      	movs	r2, #4
 800a378:	0021      	movs	r1, r4
 800a37a:	f009 ff49 	bl	8014210 <memcpy>
									temp +=5;
 800a37e:	3605      	adds	r6, #5
 800a380:	b2f6      	uxtb	r6, r6
 800a382:	e7eb      	b.n	800a35c <PxMessagingTask+0x43c>
 800a384:	4644      	mov	r4, r8
 800a386:	0033      	movs	r3, r6
 800a388:	9609      	str	r6, [sp, #36]	; 0x24
 800a38a:	464e      	mov	r6, r9
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	210d      	movs	r1, #13
 800a390:	9806      	ldr	r0, [sp, #24]
 800a392:	f7ff fae3 	bl	800995c <SendMessageToModule>
							break;
 800a396:	2300      	movs	r3, #0
 800a398:	469a      	mov	sl, r3
 800a39a:	e5f7      	b.n	8009f8c <PxMessagingTask+0x6c>
							temp =numOfParams / 5;
 800a39c:	2105      	movs	r1, #5
 800a39e:	4650      	mov	r0, sl
 800a3a0:	f7f5 fed6 	bl	8000150 <__udivsi3>
 800a3a4:	b2c3      	uxtb	r3, r0
 800a3a6:	9309      	str	r3, [sp, #36]	; 0x24
							for(uint8_t k =0; k < temp; k++){
 800a3a8:	4653      	mov	r3, sl
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	d921      	bls.n	800a3f2 <PxMessagingTask+0x4d2>
 800a3ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3b0:	1c53      	adds	r3, r2, #1
 800a3b2:	195d      	adds	r5, r3, r5
 800a3b4:	4bb0      	ldr	r3, [pc, #704]	; (800a678 <PxMessagingTask+0x758>)
 800a3b6:	46a8      	mov	r8, r5
 800a3b8:	4498      	add	r8, r3
 800a3ba:	2500      	movs	r5, #0
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a3bc:	4bb2      	ldr	r3, [pc, #712]	; (800a688 <PxMessagingTask+0x768>)
 800a3be:	4699      	mov	r9, r3
 800a3c0:	4643      	mov	r3, r8
 800a3c2:	46a0      	mov	r8, r4
 800a3c4:	9705      	str	r7, [sp, #20]
 800a3c6:	0017      	movs	r7, r2
 800a3c8:	46b2      	mov	sl, r6
 800a3ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a3cc:	001c      	movs	r4, r3
 800a3ce:	1be3      	subs	r3, r4, r7
 800a3d0:	5d98      	ldrb	r0, [r3, r6]
 800a3d2:	3801      	subs	r0, #1
 800a3d4:	0080      	lsls	r0, r0, #2
 800a3d6:	4448      	add	r0, r9
 800a3d8:	2204      	movs	r2, #4
 800a3da:	0021      	movs	r1, r4
 800a3dc:	f009 ff18 	bl	8014210 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	b2ed      	uxtb	r5, r5
 800a3e4:	3405      	adds	r4, #5
 800a3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	d8f0      	bhi.n	800a3ce <PxMessagingTask+0x4ae>
 800a3ec:	4644      	mov	r4, r8
 800a3ee:	9f05      	ldr	r7, [sp, #20]
 800a3f0:	4656      	mov	r6, sl
							responseStatus =BOS_OK;
 800a3f2:	4ba2      	ldr	r3, [pc, #648]	; (800a67c <PxMessagingTask+0x75c>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	701a      	strb	r2, [r3, #0]
							break;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	469a      	mov	sl, r3
 800a3fc:	e5c6      	b.n	8009f8c <PxMessagingTask+0x6c>
 800a3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a400:	18eb      	adds	r3, r5, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	4a9c      	ldr	r2, [pc, #624]	; (800a678 <PxMessagingTask+0x758>)
 800a406:	4699      	mov	r9, r3
 800a408:	4491      	add	r9, r2
							for(uint8_t k =0; k < temp; k++){
 800a40a:	2301      	movs	r3, #1
 800a40c:	46a0      	mov	r8, r4
 800a40e:	46b2      	mov	sl, r6
 800a410:	464e      	mov	r6, r9
 800a412:	46a9      	mov	r9, r5
 800a414:	9d08      	ldr	r5, [sp, #32]
 800a416:	001c      	movs	r4, r3
 800a418:	e002      	b.n	800a420 <PxMessagingTask+0x500>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a41a:	3401      	adds	r4, #1
 800a41c:	2c07      	cmp	r4, #7
 800a41e:	d008      	beq.n	800a432 <PxMessagingTask+0x512>
 800a420:	b2e0      	uxtb	r0, r4
								if(p != port)
 800a422:	42a8      	cmp	r0, r5
 800a424:	d0f9      	beq.n	800a41a <PxMessagingTask+0x4fa>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a426:	f003 ff65 	bl	800e2f4 <GetUart>
 800a42a:	5d31      	ldrb	r1, [r6, r4]
 800a42c:	f003 fffe 	bl	800e42c <SwapUartPins>
 800a430:	e7f3      	b.n	800a41a <PxMessagingTask+0x4fa>
 800a432:	4644      	mov	r4, r8
 800a434:	464d      	mov	r5, r9
 800a436:	4656      	mov	r6, sl
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a438:	9808      	ldr	r0, [sp, #32]
 800a43a:	f003 ff5b 	bl	800e2f4 <GetUart>
 800a43e:	4b8e      	ldr	r3, [pc, #568]	; (800a678 <PxMessagingTask+0x758>)
 800a440:	199b      	adds	r3, r3, r6
 800a442:	195d      	adds	r5, r3, r5
 800a444:	7aa9      	ldrb	r1, [r5, #10]
 800a446:	f003 fff1 	bl	800e42c <SwapUartPins>
							break;
 800a44a:	2300      	movs	r3, #0
 800a44c:	469a      	mov	sl, r3
 800a44e:	e59d      	b.n	8009f8c <PxMessagingTask+0x6c>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a450:	002a      	movs	r2, r5
 800a452:	4b89      	ldr	r3, [pc, #548]	; (800a678 <PxMessagingTask+0x758>)
 800a454:	199b      	adds	r3, r3, r6
 800a456:	5d5b      	ldrb	r3, [r3, r5]
 800a458:	469a      	mov	sl, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d108      	bne.n	800a470 <PxMessagingTask+0x550>
								myID =cMessage[port - 1][1 + shift];
 800a45e:	2238      	movs	r2, #56	; 0x38
 800a460:	4362      	muls	r2, r4
 800a462:	4b85      	ldr	r3, [pc, #532]	; (800a678 <PxMessagingTask+0x758>)
 800a464:	189b      	adds	r3, r3, r2
 800a466:	195d      	adds	r5, r3, r5
 800a468:	786a      	ldrb	r2, [r5, #1]
 800a46a:	4b88      	ldr	r3, [pc, #544]	; (800a68c <PxMessagingTask+0x76c>)
 800a46c:	701a      	strb	r2, [r3, #0]
 800a46e:	e58d      	b.n	8009f8c <PxMessagingTask+0x6c>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a470:	2b01      	cmp	r3, #1
 800a472:	d002      	beq.n	800a47a <PxMessagingTask+0x55a>
 800a474:	2300      	movs	r3, #0
 800a476:	469a      	mov	sl, r3
 800a478:	e588      	b.n	8009f8c <PxMessagingTask+0x6c>
								messageParams[0] =0; /* change own ID */
 800a47a:	4982      	ldr	r1, [pc, #520]	; (800a684 <PxMessagingTask+0x764>)
 800a47c:	2500      	movs	r5, #0
 800a47e:	700d      	strb	r5, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a480:	2038      	movs	r0, #56	; 0x38
 800a482:	4360      	muls	r0, r4
 800a484:	4b7c      	ldr	r3, [pc, #496]	; (800a678 <PxMessagingTask+0x758>)
 800a486:	181b      	adds	r3, r3, r0
 800a488:	189b      	adds	r3, r3, r2
 800a48a:	785a      	ldrb	r2, [r3, #1]
 800a48c:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a48e:	7898      	ldrb	r0, [r3, #2]
 800a490:	2303      	movs	r3, #3
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	330d      	adds	r3, #13
 800a496:	002a      	movs	r2, r5
 800a498:	0029      	movs	r1, r5
 800a49a:	f7ff f837 	bl	800950c <SendMessageFromPort>
 800a49e:	46aa      	mov	sl, r5
 800a4a0:	e574      	b.n	8009f8c <PxMessagingTask+0x6c>
							if(longMessage){
 800a4a2:	4b7b      	ldr	r3, [pc, #492]	; (800a690 <PxMessagingTask+0x770>)
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	4699      	mov	r9, r3
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d014      	beq.n	800a4d6 <PxMessagingTask+0x5b6>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a4ac:	4b79      	ldr	r3, [pc, #484]	; (800a694 <PxMessagingTask+0x774>)
 800a4ae:	4699      	mov	r9, r3
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	4698      	mov	r8, r3
 800a4b4:	4878      	ldr	r0, [pc, #480]	; (800a698 <PxMessagingTask+0x778>)
 800a4b6:	4440      	add	r0, r8
 800a4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ba:	469c      	mov	ip, r3
 800a4bc:	4465      	add	r5, ip
 800a4be:	496e      	ldr	r1, [pc, #440]	; (800a678 <PxMessagingTask+0x758>)
 800a4c0:	1869      	adds	r1, r5, r1
 800a4c2:	4652      	mov	r2, sl
 800a4c4:	f009 fea4 	bl	8014210 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a4c8:	4645      	mov	r5, r8
 800a4ca:	4455      	add	r5, sl
 800a4cc:	464b      	mov	r3, r9
 800a4ce:	801d      	strh	r5, [r3, #0]
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	469a      	mov	sl, r3
 800a4d4:	e55a      	b.n	8009f8c <PxMessagingTask+0x6c>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a4d6:	4b6f      	ldr	r3, [pc, #444]	; (800a694 <PxMessagingTask+0x774>)
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	4698      	mov	r8, r3
 800a4dc:	4b6e      	ldr	r3, [pc, #440]	; (800a698 <PxMessagingTask+0x778>)
 800a4de:	4443      	add	r3, r8
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e4:	469c      	mov	ip, r3
 800a4e6:	4465      	add	r5, ip
 800a4e8:	4963      	ldr	r1, [pc, #396]	; (800a678 <PxMessagingTask+0x758>)
 800a4ea:	1869      	adds	r1, r5, r1
 800a4ec:	4652      	mov	r2, sl
 800a4ee:	f009 fe8f 	bl	8014210 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a4f2:	4645      	mov	r5, r8
 800a4f4:	4455      	add	r5, sl
 800a4f6:	b2ad      	uxth	r5, r5
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a4f8:	2116      	movs	r1, #22
 800a4fa:	0028      	movs	r0, r5
 800a4fc:	f7f5 fe28 	bl	8000150 <__udivsi3>
 800a500:	4b66      	ldr	r3, [pc, #408]	; (800a69c <PxMessagingTask+0x77c>)
 800a502:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a504:	002a      	movs	r2, r5
 800a506:	4964      	ldr	r1, [pc, #400]	; (800a698 <PxMessagingTask+0x778>)
 800a508:	4865      	ldr	r0, [pc, #404]	; (800a6a0 <PxMessagingTask+0x780>)
 800a50a:	f009 fe81 	bl	8014210 <memcpy>
								longMessageLastPtr =0;
 800a50e:	2300      	movs	r3, #0
 800a510:	4a60      	ldr	r2, [pc, #384]	; (800a694 <PxMessagingTask+0x774>)
 800a512:	8013      	strh	r3, [r2, #0]
 800a514:	46ca      	mov	sl, r9
 800a516:	e539      	b.n	8009f8c <PxMessagingTask+0x6c>
							for(uint8_t k =0; k < temp; k++){
 800a518:	2501      	movs	r5, #1
 800a51a:	2300      	movs	r3, #0
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a51c:	2280      	movs	r2, #128	; 0x80
 800a51e:	0212      	lsls	r2, r2, #8
 800a520:	4690      	mov	r8, r2
									messageParams[temp++] =p;
 800a522:	46a1      	mov	r9, r4
 800a524:	001c      	movs	r4, r3
 800a526:	e003      	b.n	800a530 <PxMessagingTask+0x610>
							for(p =1; p <= NumOfPorts; p++){
 800a528:	3501      	adds	r5, #1
 800a52a:	b2ed      	uxtb	r5, r5
 800a52c:	2d07      	cmp	r5, #7
 800a52e:	d00a      	beq.n	800a546 <PxMessagingTask+0x626>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a530:	0028      	movs	r0, r5
 800a532:	f003 fedf 	bl	800e2f4 <GetUart>
 800a536:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a538:	4543      	cmp	r3, r8
 800a53a:	d1f5      	bne.n	800a528 <PxMessagingTask+0x608>
									messageParams[temp++] =p;
 800a53c:	1c63      	adds	r3, r4, #1
 800a53e:	4a51      	ldr	r2, [pc, #324]	; (800a684 <PxMessagingTask+0x764>)
 800a540:	5515      	strb	r5, [r2, r4]
 800a542:	b2dc      	uxtb	r4, r3
 800a544:	e7f0      	b.n	800a528 <PxMessagingTask+0x608>
 800a546:	0023      	movs	r3, r4
 800a548:	9409      	str	r4, [sp, #36]	; 0x24
 800a54a:	464c      	mov	r4, r9
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	2114      	movs	r1, #20
 800a550:	9806      	ldr	r0, [sp, #24]
 800a552:	f7ff fa03 	bl	800995c <SendMessageToModule>
							break;
 800a556:	2300      	movs	r3, #0
 800a558:	469a      	mov	sl, r3
 800a55a:	e517      	b.n	8009f8c <PxMessagingTask+0x6c>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a55c:	4b46      	ldr	r3, [pc, #280]	; (800a678 <PxMessagingTask+0x758>)
 800a55e:	199b      	adds	r3, r3, r6
 800a560:	5d5a      	ldrb	r2, [r3, r5]
 800a562:	0612      	lsls	r2, r2, #24
 800a564:	195b      	adds	r3, r3, r5
 800a566:	78d9      	ldrb	r1, [r3, #3]
 800a568:	1852      	adds	r2, r2, r1
 800a56a:	7859      	ldrb	r1, [r3, #1]
 800a56c:	0409      	lsls	r1, r1, #16
 800a56e:	1852      	adds	r2, r2, r1
 800a570:	7899      	ldrb	r1, [r3, #2]
 800a572:	0209      	lsls	r1, r1, #8
 800a574:	4690      	mov	r8, r2
 800a576:	4488      	add	r8, r1
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a578:	791b      	ldrb	r3, [r3, #4]
 800a57a:	2bff      	cmp	r3, #255	; 0xff
 800a57c:	d013      	beq.n	800a5a6 <PxMessagingTask+0x686>
								for(p =0; p < numOfParams; p++){
 800a57e:	4653      	mov	r3, sl
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00e      	beq.n	800a5a2 <PxMessagingTask+0x682>
 800a584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a586:	469c      	mov	ip, r3
 800a588:	4465      	add	r5, ip
 800a58a:	3504      	adds	r5, #4
 800a58c:	4b3a      	ldr	r3, [pc, #232]	; (800a678 <PxMessagingTask+0x758>)
 800a58e:	46a9      	mov	r9, r5
 800a590:	4499      	add	r9, r3
 800a592:	2500      	movs	r5, #0
 800a594:	9405      	str	r4, [sp, #20]
 800a596:	0033      	movs	r3, r6
 800a598:	464e      	mov	r6, r9
 800a59a:	46b9      	mov	r9, r7
 800a59c:	4657      	mov	r7, sl
 800a59e:	469a      	mov	sl, r3
 800a5a0:	e012      	b.n	800a5c8 <PxMessagingTask+0x6a8>
							temp =temp32 =0;
 800a5a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a4:	e4f2      	b.n	8009f8c <PxMessagingTask+0x6c>
								for(p =1; p <= NumOfPorts; p++){
 800a5a6:	2501      	movs	r5, #1
									UpdateBaudrate(p,temp32);
 800a5a8:	4641      	mov	r1, r8
 800a5aa:	0028      	movs	r0, r5
 800a5ac:	f003 ff34 	bl	800e418 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a5b0:	3501      	adds	r5, #1
 800a5b2:	b2ed      	uxtb	r5, r5
 800a5b4:	2d07      	cmp	r5, #7
 800a5b6:	d1f7      	bne.n	800a5a8 <PxMessagingTask+0x688>
							temp =temp32 =0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a5bc:	469a      	mov	sl, r3
 800a5be:	e4e5      	b.n	8009f8c <PxMessagingTask+0x6c>
								for(p =0; p < numOfParams; p++){
 800a5c0:	3501      	adds	r5, #1
 800a5c2:	b2eb      	uxtb	r3, r5
 800a5c4:	42bb      	cmp	r3, r7
 800a5c6:	d208      	bcs.n	800a5da <PxMessagingTask+0x6ba>
									temp =cMessage[port - 1][4 + shift + p];
 800a5c8:	5d74      	ldrb	r4, [r6, r5]
									if(temp > 0 && temp <= NumOfPorts){
 800a5ca:	1e63      	subs	r3, r4, #1
 800a5cc:	2b05      	cmp	r3, #5
 800a5ce:	d8f7      	bhi.n	800a5c0 <PxMessagingTask+0x6a0>
										UpdateBaudrate(temp,temp32);
 800a5d0:	4641      	mov	r1, r8
 800a5d2:	0020      	movs	r0, r4
 800a5d4:	f003 ff20 	bl	800e418 <UpdateBaudrate>
 800a5d8:	e7f2      	b.n	800a5c0 <PxMessagingTask+0x6a0>
 800a5da:	9409      	str	r4, [sp, #36]	; 0x24
 800a5dc:	9c05      	ldr	r4, [sp, #20]
 800a5de:	464f      	mov	r7, r9
 800a5e0:	4656      	mov	r6, sl
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	469a      	mov	sl, r3
 800a5e6:	e4d1      	b.n	8009f8c <PxMessagingTask+0x6c>
							SaveToRO();
 800a5e8:	f001 f912 	bl	800b810 <SaveToRO>
							SaveEEportsDir();
 800a5ec:	f7f8 ffb2 	bl	8003554 <SaveEEportsDir>
							indMode =IND_PING;
 800a5f0:	4b23      	ldr	r3, [pc, #140]	; (800a680 <PxMessagingTask+0x760>)
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	701a      	strb	r2, [r3, #0]
							break;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	469a      	mov	sl, r3
 800a5fa:	e4c7      	b.n	8009f8c <PxMessagingTask+0x6c>
							ClearEEportsDir();
 800a5fc:	f7f9 f88e 	bl	800371c <ClearEEportsDir>
							ClearROtopology();
 800a600:	f001 fa24 	bl	800ba4c <ClearROtopology>
							osDelay(100);
 800a604:	2064      	movs	r0, #100	; 0x64
 800a606:	f003 ffc6 	bl	800e596 <osDelay>
							indMode =IND_TOPOLOGY;
 800a60a:	4b1d      	ldr	r3, [pc, #116]	; (800a680 <PxMessagingTask+0x760>)
 800a60c:	2202      	movs	r2, #2
 800a60e:	701a      	strb	r2, [r3, #0]
							break;
 800a610:	2300      	movs	r3, #0
 800a612:	469a      	mov	sl, r3
 800a614:	e4ba      	b.n	8009f8c <PxMessagingTask+0x6c>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a616:	f004 f8e1 	bl	800e7dc <FreeRTOS_CLIGetOutputBuffer>
 800a61a:	4681      	mov	r9, r0
							if(dst == BOS_BROADCAST)
 800a61c:	4643      	mov	r3, r8
 800a61e:	2bff      	cmp	r3, #255	; 0xff
 800a620:	d012      	beq.n	800a648 <PxMessagingTask+0x728>
							else if(dst == BOS_MULTICAST)
 800a622:	2bfe      	cmp	r3, #254	; 0xfe
 800a624:	d01a      	beq.n	800a65c <PxMessagingTask+0x73c>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a628:	469c      	mov	ip, r3
 800a62a:	4465      	add	r5, ip
 800a62c:	4912      	ldr	r1, [pc, #72]	; (800a678 <PxMessagingTask+0x758>)
 800a62e:	1869      	adds	r1, r5, r1
 800a630:	4652      	mov	r2, sl
 800a632:	481c      	ldr	r0, [pc, #112]	; (800a6a4 <PxMessagingTask+0x784>)
 800a634:	f009 fdec 	bl	8014210 <memcpy>
								temp =PcPort;
 800a638:	4d1b      	ldr	r5, [pc, #108]	; (800a6a8 <PxMessagingTask+0x788>)
								if(BOS.response == BOS_RESPONSE_ALL){
 800a63a:	4b1c      	ldr	r3, [pc, #112]	; (800a6ac <PxMessagingTask+0x78c>)
 800a63c:	469a      	mov	sl, r3
 800a63e:	9405      	str	r4, [sp, #20]
 800a640:	46b8      	mov	r8, r7
 800a642:	464f      	mov	r7, r9
 800a644:	46b1      	mov	r9, r6
 800a646:	e035      	b.n	800a6b4 <PxMessagingTask+0x794>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a648:	4652      	mov	r2, sl
 800a64a:	3a01      	subs	r2, #1
 800a64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64e:	18e9      	adds	r1, r5, r3
 800a650:	4d09      	ldr	r5, [pc, #36]	; (800a678 <PxMessagingTask+0x758>)
 800a652:	1949      	adds	r1, r1, r5
 800a654:	4813      	ldr	r0, [pc, #76]	; (800a6a4 <PxMessagingTask+0x784>)
 800a656:	f009 fddb 	bl	8014210 <memcpy>
 800a65a:	e7ed      	b.n	800a638 <PxMessagingTask+0x718>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a65c:	4653      	mov	r3, sl
 800a65e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a660:	1a9a      	subs	r2, r3, r2
 800a662:	3a02      	subs	r2, #2
 800a664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a666:	18e9      	adds	r1, r5, r3
 800a668:	4d03      	ldr	r5, [pc, #12]	; (800a678 <PxMessagingTask+0x758>)
 800a66a:	1949      	adds	r1, r1, r5
 800a66c:	480d      	ldr	r0, [pc, #52]	; (800a6a4 <PxMessagingTask+0x784>)
 800a66e:	f009 fdcf 	bl	8014210 <memcpy>
 800a672:	e7e1      	b.n	800a638 <PxMessagingTask+0x718>
 800a674:	20001080 	.word	0x20001080
 800a678:	20000d10 	.word	0x20000d10
 800a67c:	20001118 	.word	0x20001118
 800a680:	20000efc 	.word	0x20000efc
 800a684:	20000f40 	.word	0x20000f40
 800a688:	20001098 	.word	0x20001098
 800a68c:	2000107e 	.word	0x2000107e
 800a690:	20000efd 	.word	0x20000efd
 800a694:	20000efe 	.word	0x20000efe
 800a698:	20001630 	.word	0x20001630
 800a69c:	2000001c 	.word	0x2000001c
 800a6a0:	20000a80 	.word	0x20000a80
 800a6a4:	200015fc 	.word	0x200015fc
 800a6a8:	20000a7f 	.word	0x20000a7f
 800a6ac:	20006aa8 	.word	0x20006aa8
							} while(xReturned != pdFALSE);
 800a6b0:	2c00      	cmp	r4, #0
 800a6b2:	d022      	beq.n	800a6fa <PxMessagingTask+0x7da>
								temp =PcPort;
 800a6b4:	782e      	ldrb	r6, [r5, #0]
								PcPort =port;
 800a6b6:	9b08      	ldr	r3, [sp, #32]
 800a6b8:	702b      	strb	r3, [r5, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a6ba:	2299      	movs	r2, #153	; 0x99
 800a6bc:	0092      	lsls	r2, r2, #2
 800a6be:	0039      	movs	r1, r7
 800a6c0:	48d1      	ldr	r0, [pc, #836]	; (800aa08 <PxMessagingTask+0xae8>)
 800a6c2:	f004 f801 	bl	800e6c8 <FreeRTOS_CLIProcessCommand>
 800a6c6:	0004      	movs	r4, r0
								PcPort =temp;
 800a6c8:	702e      	strb	r6, [r5, #0]
								if(BOS.response == BOS_RESPONSE_ALL){
 800a6ca:	4653      	mov	r3, sl
 800a6cc:	799b      	ldrb	r3, [r3, #6]
 800a6ce:	2b60      	cmp	r3, #96	; 0x60
 800a6d0:	d1ee      	bne.n	800a6b0 <PxMessagingTask+0x790>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a6d2:	0038      	movs	r0, r7
 800a6d4:	f7f5 fd20 	bl	8000118 <strlen>
 800a6d8:	0002      	movs	r2, r0
 800a6da:	0039      	movs	r1, r7
 800a6dc:	48cb      	ldr	r0, [pc, #812]	; (800aa0c <PxMessagingTask+0xaec>)
 800a6de:	f009 fd97 	bl	8014210 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a6e2:	0038      	movs	r0, r7
 800a6e4:	f7f5 fd18 	bl	8000118 <strlen>
 800a6e8:	b282      	uxth	r2, r0
 800a6ea:	2118      	movs	r1, #24
 800a6ec:	9806      	ldr	r0, [sp, #24]
 800a6ee:	f7ff f935 	bl	800995c <SendMessageToModule>
									osDelay(10);
 800a6f2:	200a      	movs	r0, #10
 800a6f4:	f003 ff4f 	bl	800e596 <osDelay>
 800a6f8:	e7da      	b.n	800a6b0 <PxMessagingTask+0x790>
 800a6fa:	9c05      	ldr	r4, [sp, #20]
 800a6fc:	9609      	str	r6, [sp, #36]	; 0x24
 800a6fe:	4647      	mov	r7, r8
 800a700:	464e      	mov	r6, r9
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a702:	2232      	movs	r2, #50	; 0x32
 800a704:	2100      	movs	r1, #0
 800a706:	48c0      	ldr	r0, [pc, #768]	; (800aa08 <PxMessagingTask+0xae8>)
 800a708:	f009 fd8b 	bl	8014222 <memset>
							break;
 800a70c:	2300      	movs	r3, #0
 800a70e:	469a      	mov	sl, r3
 800a710:	e43c      	b.n	8009f8c <PxMessagingTask+0x6c>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a712:	f004 f863 	bl	800e7dc <FreeRTOS_CLIGetOutputBuffer>
 800a716:	4680      	mov	r8, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a718:	f7f5 fcfe 	bl	8000118 <strlen>
 800a71c:	0002      	movs	r2, r0
 800a71e:	2100      	movs	r1, #0
 800a720:	4640      	mov	r0, r8
 800a722:	f009 fd7e 	bl	8014222 <memset>
							if(longMessage){
 800a726:	4bba      	ldr	r3, [pc, #744]	; (800aa10 <PxMessagingTask+0xaf0>)
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	4699      	mov	r9, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d012      	beq.n	800a756 <PxMessagingTask+0x836>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a730:	4bb8      	ldr	r3, [pc, #736]	; (800aa14 <PxMessagingTask+0xaf4>)
 800a732:	4699      	mov	r9, r3
 800a734:	8818      	ldrh	r0, [r3, #0]
 800a736:	4440      	add	r0, r8
 800a738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73a:	469c      	mov	ip, r3
 800a73c:	4465      	add	r5, ip
 800a73e:	49b6      	ldr	r1, [pc, #728]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a740:	1869      	adds	r1, r5, r1
 800a742:	4652      	mov	r2, sl
 800a744:	f009 fd64 	bl	8014210 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a748:	464b      	mov	r3, r9
 800a74a:	881d      	ldrh	r5, [r3, #0]
 800a74c:	4455      	add	r5, sl
 800a74e:	801d      	strh	r5, [r3, #0]
 800a750:	2300      	movs	r3, #0
 800a752:	469a      	mov	sl, r3
 800a754:	e41a      	b.n	8009f8c <PxMessagingTask+0x6c>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a756:	4baf      	ldr	r3, [pc, #700]	; (800aa14 <PxMessagingTask+0xaf4>)
 800a758:	8818      	ldrh	r0, [r3, #0]
 800a75a:	4440      	add	r0, r8
 800a75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a75e:	469c      	mov	ip, r3
 800a760:	4465      	add	r5, ip
 800a762:	49ad      	ldr	r1, [pc, #692]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a764:	1869      	adds	r1, r5, r1
 800a766:	4652      	mov	r2, sl
 800a768:	f009 fd52 	bl	8014210 <memcpy>
								longMessageLastPtr =0;
 800a76c:	2100      	movs	r1, #0
 800a76e:	4ba9      	ldr	r3, [pc, #676]	; (800aa14 <PxMessagingTask+0xaf4>)
 800a770:	8019      	strh	r1, [r3, #0]
								responseStatus =BOS_OK;
 800a772:	4baa      	ldr	r3, [pc, #680]	; (800aa1c <PxMessagingTask+0xafc>)
 800a774:	7019      	strb	r1, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a776:	000b      	movs	r3, r1
 800a778:	000a      	movs	r2, r1
 800a77a:	48a9      	ldr	r0, [pc, #676]	; (800aa20 <PxMessagingTask+0xb00>)
 800a77c:	6800      	ldr	r0, [r0, #0]
 800a77e:	f005 fcc3 	bl	8010108 <xTaskGenericNotify>
 800a782:	46ca      	mov	sl, r9
 800a784:	f7ff fc02 	bl	8009f8c <PxMessagingTask+0x6c>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a788:	4ba6      	ldr	r3, [pc, #664]	; (800aa24 <PxMessagingTask+0xb04>)
 800a78a:	4aa7      	ldr	r2, [pc, #668]	; (800aa28 <PxMessagingTask+0xb08>)
 800a78c:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a78e:	4ba7      	ldr	r3, [pc, #668]	; (800aa2c <PxMessagingTask+0xb0c>)
 800a790:	2201      	movs	r2, #1
 800a792:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a794:	200a      	movs	r0, #10
 800a796:	f003 fefe 	bl	800e596 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	4ba4      	ldr	r3, [pc, #656]	; (800aa30 <PxMessagingTask+0xb10>)
 800a7a0:	4aa4      	ldr	r2, [pc, #656]	; (800aa34 <PxMessagingTask+0xb14>)
 800a7a2:	60da      	str	r2, [r3, #12]
 800a7a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a7a8:	46c0      	nop			; (mov r8, r8)
 800a7aa:	e7fd      	b.n	800a7a8 <PxMessagingTask+0x888>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a7ac:	4b9a      	ldr	r3, [pc, #616]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a7ae:	4698      	mov	r8, r3
 800a7b0:	44b0      	add	r8, r6
 800a7b2:	4643      	mov	r3, r8
 800a7b4:	5d58      	ldrb	r0, [r3, r5]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	3319      	adds	r3, #25
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2100      	movs	r1, #0
 800a7c0:	f7fe fea4 	bl	800950c <SendMessageFromPort>
							osDelay(100);
 800a7c4:	2064      	movs	r0, #100	; 0x64
 800a7c6:	f003 fee6 	bl	800e596 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a7ca:	4643      	mov	r3, r8
 800a7cc:	5d5b      	ldrb	r3, [r3, r5]
 800a7ce:	4a9a      	ldr	r2, [pc, #616]	; (800aa38 <PxMessagingTask+0xb18>)
 800a7d0:	7811      	ldrb	r1, [r2, #0]
 800a7d2:	9a08      	ldr	r2, [sp, #32]
 800a7d4:	9806      	ldr	r0, [sp, #24]
 800a7d6:	f7f9 fa55 	bl	8003c84 <remoteBootloaderUpdate>
							break;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	469a      	mov	sl, r3
 800a7de:	f7ff fbd5 	bl	8009f8c <PxMessagingTask+0x6c>
							temp =cMessage[port - 1][11 + shift];
 800a7e2:	46a8      	mov	r8, r5
 800a7e4:	230b      	movs	r3, #11
 800a7e6:	4699      	mov	r9, r3
 800a7e8:	44a9      	add	r9, r5
							if(numOfParams == 15)
 800a7ea:	4653      	mov	r3, sl
 800a7ec:	2b0f      	cmp	r3, #15
 800a7ee:	d00f      	beq.n	800a810 <PxMessagingTask+0x8f0>
							temp =cMessage[port - 1][11 + shift];
 800a7f0:	2238      	movs	r2, #56	; 0x38
 800a7f2:	4362      	muls	r2, r4
 800a7f4:	4b88      	ldr	r3, [pc, #544]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a7f6:	189b      	adds	r3, r3, r2
 800a7f8:	464a      	mov	r2, r9
 800a7fa:	5c9d      	ldrb	r5, [r3, r2]
							if(numOfParams == 17)
 800a7fc:	4653      	mov	r3, sl
 800a7fe:	2b11      	cmp	r3, #17
 800a800:	d10c      	bne.n	800a81c <PxMessagingTask+0x8fc>
								temp =cMessage[port - 1][15 + shift];
 800a802:	2238      	movs	r2, #56	; 0x38
 800a804:	4362      	muls	r2, r4
 800a806:	4b84      	ldr	r3, [pc, #528]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a808:	189b      	adds	r3, r3, r2
 800a80a:	4443      	add	r3, r8
 800a80c:	7bdd      	ldrb	r5, [r3, #15]
 800a80e:	e005      	b.n	800a81c <PxMessagingTask+0x8fc>
								temp =cMessage[port - 1][13 + shift];
 800a810:	2238      	movs	r2, #56	; 0x38
 800a812:	4362      	muls	r2, r4
 800a814:	4b80      	ldr	r3, [pc, #512]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a816:	189b      	adds	r3, r3, r2
 800a818:	195d      	adds	r5, r3, r5
 800a81a:	7b6d      	ldrb	r5, [r5, #13]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a81c:	4643      	mov	r3, r8
 800a81e:	1c58      	adds	r0, r3, #1
 800a820:	900f      	str	r0, [sp, #60]	; 0x3c
 800a822:	3302      	adds	r3, #2
 800a824:	9305      	str	r3, [sp, #20]
 800a826:	4642      	mov	r2, r8
 800a828:	3203      	adds	r2, #3
 800a82a:	0011      	movs	r1, r2
 800a82c:	9210      	str	r2, [sp, #64]	; 0x40
 800a82e:	4b7a      	ldr	r3, [pc, #488]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a830:	199b      	adds	r3, r3, r6
 800a832:	4642      	mov	r2, r8
 800a834:	5c9a      	ldrb	r2, [r3, r2]
 800a836:	0612      	lsls	r2, r2, #24
 800a838:	5c59      	ldrb	r1, [r3, r1]
 800a83a:	1852      	adds	r2, r2, r1
 800a83c:	5c19      	ldrb	r1, [r3, r0]
 800a83e:	0409      	lsls	r1, r1, #16
 800a840:	1852      	adds	r2, r2, r1
 800a842:	9905      	ldr	r1, [sp, #20]
 800a844:	5c59      	ldrb	r1, [r3, r1]
 800a846:	0209      	lsls	r1, r1, #8
 800a848:	1852      	adds	r2, r2, r1
 800a84a:	920d      	str	r2, [sp, #52]	; 0x34
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a84c:	4642      	mov	r2, r8
 800a84e:	3204      	adds	r2, #4
 800a850:	9211      	str	r2, [sp, #68]	; 0x44
 800a852:	2105      	movs	r1, #5
 800a854:	4441      	add	r1, r8
 800a856:	468c      	mov	ip, r1
 800a858:	4641      	mov	r1, r8
 800a85a:	3106      	adds	r1, #6
 800a85c:	9109      	str	r1, [sp, #36]	; 0x24
 800a85e:	4640      	mov	r0, r8
 800a860:	3007      	adds	r0, #7
 800a862:	5c99      	ldrb	r1, [r3, r2]
 800a864:	0609      	lsls	r1, r1, #24
 800a866:	4662      	mov	r2, ip
 800a868:	5c9a      	ldrb	r2, [r3, r2]
 800a86a:	0412      	lsls	r2, r2, #16
 800a86c:	188a      	adds	r2, r1, r2
 800a86e:	5c19      	ldrb	r1, [r3, r0]
 800a870:	1852      	adds	r2, r2, r1
 800a872:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a874:	5c5b      	ldrb	r3, [r3, r1]
 800a876:	021b      	lsls	r3, r3, #8
 800a878:	18d3      	adds	r3, r2, r3
 800a87a:	930e      	str	r3, [sp, #56]	; 0x38
							if(temp == false){
 800a87c:	2d00      	cmp	r5, #0
 800a87e:	d15a      	bne.n	800a936 <PxMessagingTask+0xa16>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a880:	4b65      	ldr	r3, [pc, #404]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a882:	199b      	adds	r3, r3, r6
 800a884:	4443      	add	r3, r8
 800a886:	7a5b      	ldrb	r3, [r3, #9]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d007      	beq.n	800a89c <PxMessagingTask+0x97c>
 800a88c:	2138      	movs	r1, #56	; 0x38
 800a88e:	4361      	muls	r1, r4
 800a890:	4a61      	ldr	r2, [pc, #388]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a892:	1852      	adds	r2, r2, r1
 800a894:	4442      	add	r2, r8
 800a896:	7a91      	ldrb	r1, [r2, #10]
 800a898:	2900      	cmp	r1, #0
 800a89a:	d123      	bne.n	800a8e4 <PxMessagingTask+0x9c4>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a89c:	4b5e      	ldr	r3, [pc, #376]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a89e:	199b      	adds	r3, r3, r6
 800a8a0:	464a      	mov	r2, r9
 800a8a2:	5c9b      	ldrb	r3, [r3, r2]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <PxMessagingTask+0x998>
 800a8a8:	2138      	movs	r1, #56	; 0x38
 800a8aa:	4361      	muls	r1, r4
 800a8ac:	4a5a      	ldr	r2, [pc, #360]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a8ae:	1852      	adds	r2, r2, r1
 800a8b0:	4442      	add	r2, r8
 800a8b2:	7b11      	ldrb	r1, [r2, #12]
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	d121      	bne.n	800a8fc <PxMessagingTask+0x9dc>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a8b8:	4b57      	ldr	r3, [pc, #348]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a8ba:	199b      	adds	r3, r3, r6
 800a8bc:	4443      	add	r3, r8
 800a8be:	7b5b      	ldrb	r3, [r3, #13]
 800a8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c2:	469a      	mov	sl, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d101      	bne.n	800a8cc <PxMessagingTask+0x9ac>
 800a8c8:	f7ff fb60 	bl	8009f8c <PxMessagingTask+0x6c>
 800a8cc:	2238      	movs	r2, #56	; 0x38
 800a8ce:	4362      	muls	r2, r4
 800a8d0:	4b51      	ldr	r3, [pc, #324]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a8d2:	189b      	adds	r3, r3, r2
 800a8d4:	4443      	add	r3, r8
 800a8d6:	7b9b      	ldrb	r3, [r3, #14]
 800a8d8:	469a      	mov	sl, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d11a      	bne.n	800a914 <PxMessagingTask+0x9f4>
 800a8de:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e0:	f7ff fb54 	bl	8009f8c <PxMessagingTask+0x6c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a8e4:	2038      	movs	r0, #56	; 0x38
 800a8e6:	4360      	muls	r0, r4
 800a8e8:	4a4b      	ldr	r2, [pc, #300]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a8ea:	1812      	adds	r2, r2, r0
 800a8ec:	4442      	add	r2, r8
 800a8ee:	7a10      	ldrb	r0, [r2, #8]
 800a8f0:	9100      	str	r1, [sp, #0]
 800a8f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a8f6:	f7fe fceb 	bl	80092d0 <SetupDMAStreams>
 800a8fa:	e7cf      	b.n	800a89c <PxMessagingTask+0x97c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a8fc:	2038      	movs	r0, #56	; 0x38
 800a8fe:	4360      	muls	r0, r4
 800a900:	4a45      	ldr	r2, [pc, #276]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a902:	1812      	adds	r2, r2, r0
 800a904:	4442      	add	r2, r8
 800a906:	7a10      	ldrb	r0, [r2, #8]
 800a908:	9100      	str	r1, [sp, #0]
 800a90a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a90c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a90e:	f7fe fcdf 	bl	80092d0 <SetupDMAStreams>
 800a912:	e7d1      	b.n	800a8b8 <PxMessagingTask+0x998>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800a914:	2238      	movs	r2, #56	; 0x38
 800a916:	4362      	muls	r2, r4
 800a918:	4b3f      	ldr	r3, [pc, #252]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a91a:	189b      	adds	r3, r3, r2
 800a91c:	4443      	add	r3, r8
 800a91e:	7a18      	ldrb	r0, [r3, #8]
 800a920:	4653      	mov	r3, sl
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a926:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a928:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a92a:	f7fe fcd1 	bl	80092d0 <SetupDMAStreams>
 800a92e:	9509      	str	r5, [sp, #36]	; 0x24
 800a930:	46aa      	mov	sl, r5
 800a932:	f7ff fb2b 	bl	8009f8c <PxMessagingTask+0x6c>
 800a936:	4663      	mov	r3, ip
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	4683      	mov	fp, r0
 800a93c:	4655      	mov	r5, sl
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800a93e:	2338      	movs	r3, #56	; 0x38
 800a940:	4363      	muls	r3, r4
 800a942:	4e35      	ldr	r6, [pc, #212]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a944:	18f6      	adds	r6, r6, r3
 800a946:	4641      	mov	r1, r8
 800a948:	1877      	adds	r7, r6, r1
 800a94a:	7a39      	ldrb	r1, [r7, #8]
 800a94c:	20e4      	movs	r0, #228	; 0xe4
 800a94e:	f7fd f837 	bl	80079c0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800a952:	4641      	mov	r1, r8
 800a954:	5c73      	ldrb	r3, [r6, r1]
 800a956:	021b      	lsls	r3, r3, #8
 800a958:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a95a:	5c71      	ldrb	r1, [r6, r1]
 800a95c:	18c9      	adds	r1, r1, r3
 800a95e:	b289      	uxth	r1, r1
 800a960:	20e5      	movs	r0, #229	; 0xe5
 800a962:	f7fd f82d 	bl	80079c0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800a966:	9905      	ldr	r1, [sp, #20]
 800a968:	5c73      	ldrb	r3, [r6, r1]
 800a96a:	021b      	lsls	r3, r3, #8
 800a96c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a96e:	5c71      	ldrb	r1, [r6, r1]
 800a970:	18c9      	adds	r1, r1, r3
 800a972:	b289      	uxth	r1, r1
 800a974:	20e6      	movs	r0, #230	; 0xe6
 800a976:	f7fd f823 	bl	80079c0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800a97a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a97c:	5c73      	ldrb	r3, [r6, r1]
 800a97e:	021b      	lsls	r3, r3, #8
 800a980:	9a04      	ldr	r2, [sp, #16]
 800a982:	5cb1      	ldrb	r1, [r6, r2]
 800a984:	18c9      	adds	r1, r1, r3
 800a986:	b289      	uxth	r1, r1
 800a988:	20e7      	movs	r0, #231	; 0xe7
 800a98a:	f7fd f819 	bl	80079c0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800a98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a990:	5cf3      	ldrb	r3, [r6, r3]
 800a992:	021b      	lsls	r3, r3, #8
 800a994:	465a      	mov	r2, fp
 800a996:	5cb1      	ldrb	r1, [r6, r2]
 800a998:	18c9      	adds	r1, r1, r3
 800a99a:	b289      	uxth	r1, r1
 800a99c:	20e8      	movs	r0, #232	; 0xe8
 800a99e:	f7fd f80f 	bl	80079c0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800a9a2:	7a7b      	ldrb	r3, [r7, #9]
 800a9a4:	021b      	lsls	r3, r3, #8
 800a9a6:	7ab9      	ldrb	r1, [r7, #10]
 800a9a8:	18c9      	adds	r1, r1, r3
 800a9aa:	b289      	uxth	r1, r1
 800a9ac:	20e9      	movs	r0, #233	; 0xe9
 800a9ae:	f7fd f807 	bl	80079c0 <EE_WriteVariable>
								if(numOfParams == 19)
 800a9b2:	2d13      	cmp	r5, #19
 800a9b4:	d00a      	beq.n	800a9cc <PxMessagingTask+0xaac>
								if(numOfParams == 21)
 800a9b6:	2d15      	cmp	r5, #21
 800a9b8:	d017      	beq.n	800a9ea <PxMessagingTask+0xaca>
  __ASM volatile ("dsb 0xF":::"memory");
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	4b1c      	ldr	r3, [pc, #112]	; (800aa30 <PxMessagingTask+0xb10>)
 800a9c0:	4a1c      	ldr	r2, [pc, #112]	; (800aa34 <PxMessagingTask+0xb14>)
 800a9c2:	60da      	str	r2, [r3, #12]
 800a9c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a9c8:	46c0      	nop			; (mov r8, r8)
 800a9ca:	e7fd      	b.n	800a9c8 <PxMessagingTask+0xaa8>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800a9cc:	2338      	movs	r3, #56	; 0x38
 800a9ce:	4363      	muls	r3, r4
 800a9d0:	4c11      	ldr	r4, [pc, #68]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a9d2:	18e4      	adds	r4, r4, r3
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	5ce3      	ldrb	r3, [r4, r3]
 800a9d8:	021b      	lsls	r3, r3, #8
 800a9da:	4444      	add	r4, r8
 800a9dc:	7b21      	ldrb	r1, [r4, #12]
 800a9de:	18c9      	adds	r1, r1, r3
 800a9e0:	b289      	uxth	r1, r1
 800a9e2:	20ea      	movs	r0, #234	; 0xea
 800a9e4:	f7fc ffec 	bl	80079c0 <EE_WriteVariable>
								if(numOfParams == 21)
 800a9e8:	e7e7      	b.n	800a9ba <PxMessagingTask+0xa9a>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800a9ea:	2338      	movs	r3, #56	; 0x38
 800a9ec:	435c      	muls	r4, r3
 800a9ee:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <PxMessagingTask+0xaf8>)
 800a9f0:	191b      	adds	r3, r3, r4
 800a9f2:	4443      	add	r3, r8
 800a9f4:	7b5a      	ldrb	r2, [r3, #13]
 800a9f6:	0212      	lsls	r2, r2, #8
 800a9f8:	7b99      	ldrb	r1, [r3, #14]
 800a9fa:	1889      	adds	r1, r1, r2
 800a9fc:	b289      	uxth	r1, r1
 800a9fe:	20eb      	movs	r0, #235	; 0xeb
 800aa00:	f7fc ffde 	bl	80079c0 <EE_WriteVariable>
 800aa04:	e7d9      	b.n	800a9ba <PxMessagingTask+0xa9a>
 800aa06:	46c0      	nop			; (mov r8, r8)
 800aa08:	200015fc 	.word	0x200015fc
 800aa0c:	20000f40 	.word	0x20000f40
 800aa10:	20000efd 	.word	0x20000efd
 800aa14:	20000efe 	.word	0x20000efe
 800aa18:	20000d10 	.word	0x20000d10
 800aa1c:	20001118 	.word	0x20001118
 800aa20:	2000150c 	.word	0x2000150c
 800aa24:	20007ff0 	.word	0x20007ff0
 800aa28:	deadbeef 	.word	0xdeadbeef
 800aa2c:	20000efc 	.word	0x20000efc
 800aa30:	e000ed00 	.word	0xe000ed00
 800aa34:	05fa0004 	.word	0x05fa0004
 800aa38:	2000107e 	.word	0x2000107e
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800aa3c:	48f2      	ldr	r0, [pc, #968]	; (800ae08 <PxMessagingTask+0xee8>)
 800aa3e:	1980      	adds	r0, r0, r6
 800aa40:	1942      	adds	r2, r0, r5
 800aa42:	7a93      	ldrb	r3, [r2, #10]
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	7ad1      	ldrb	r1, [r2, #11]
 800aa48:	4688      	mov	r8, r1
 800aa4a:	49f0      	ldr	r1, [pc, #960]	; (800ae0c <PxMessagingTask+0xeec>)
 800aa4c:	7809      	ldrb	r1, [r1, #0]
 800aa4e:	4689      	mov	r9, r1
 800aa50:	7a51      	ldrb	r1, [r2, #9]
 800aa52:	468a      	mov	sl, r1
 800aa54:	7b11      	ldrb	r1, [r2, #12]
 800aa56:	1e4b      	subs	r3, r1, #1
 800aa58:	4199      	sbcs	r1, r3
 800aa5a:	9103      	str	r1, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800aa5c:	7911      	ldrb	r1, [r2, #4]
 800aa5e:	0609      	lsls	r1, r1, #24
 800aa60:	468c      	mov	ip, r1
 800aa62:	7951      	ldrb	r1, [r2, #5]
 800aa64:	0409      	lsls	r1, r1, #16
 800aa66:	4461      	add	r1, ip
 800aa68:	79d3      	ldrb	r3, [r2, #7]
 800aa6a:	469c      	mov	ip, r3
 800aa6c:	4461      	add	r1, ip
 800aa6e:	7993      	ldrb	r3, [r2, #6]
 800aa70:	021b      	lsls	r3, r3, #8
 800aa72:	469c      	mov	ip, r3
 800aa74:	4461      	add	r1, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800aa76:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800aa78:	5d41      	ldrb	r1, [r0, r5]
 800aa7a:	0609      	lsls	r1, r1, #24
 800aa7c:	78d0      	ldrb	r0, [r2, #3]
 800aa7e:	1809      	adds	r1, r1, r0
 800aa80:	7850      	ldrb	r0, [r2, #1]
 800aa82:	0400      	lsls	r0, r0, #16
 800aa84:	1809      	adds	r1, r1, r0
 800aa86:	7890      	ldrb	r0, [r2, #2]
 800aa88:	0200      	lsls	r0, r0, #8
 800aa8a:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800aa8c:	9101      	str	r1, [sp, #4]
 800aa8e:	7a12      	ldrb	r2, [r2, #8]
 800aa90:	9200      	str	r2, [sp, #0]
 800aa92:	9b05      	ldr	r3, [sp, #20]
 800aa94:	4642      	mov	r2, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	4650      	mov	r0, sl
 800aa9a:	f7fe ff85 	bl	80099a8 <StartScastDMAStream>
							break;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	469a      	mov	sl, r3
 800aaa2:	f7ff fa73 	bl	8009f8c <PxMessagingTask+0x6c>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800aaa6:	4bd8      	ldr	r3, [pc, #864]	; (800ae08 <PxMessagingTask+0xee8>)
 800aaa8:	199b      	adds	r3, r3, r6
 800aaaa:	5d5b      	ldrb	r3, [r3, r5]
 800aaac:	469a      	mov	sl, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d000      	beq.n	800aab4 <PxMessagingTask+0xb94>
 800aab2:	e07f      	b.n	800abb4 <PxMessagingTask+0xc94>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800aab4:	2238      	movs	r2, #56	; 0x38
 800aab6:	4362      	muls	r2, r4
 800aab8:	4bd3      	ldr	r3, [pc, #844]	; (800ae08 <PxMessagingTask+0xee8>)
 800aaba:	189b      	adds	r3, r3, r2
 800aabc:	195d      	adds	r5, r3, r5
 800aabe:	78ab      	ldrb	r3, [r5, #2]
 800aac0:	061b      	lsls	r3, r3, #24
 800aac2:	78ea      	ldrb	r2, [r5, #3]
 800aac4:	0412      	lsls	r2, r2, #16
 800aac6:	189b      	adds	r3, r3, r2
 800aac8:	796a      	ldrb	r2, [r5, #5]
 800aaca:	189b      	adds	r3, r3, r2
 800aacc:	792a      	ldrb	r2, [r5, #4]
 800aace:	0212      	lsls	r2, r2, #8
 800aad0:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800aad2:	786a      	ldrb	r2, [r5, #1]
 800aad4:	3a01      	subs	r2, #1
 800aad6:	b2d1      	uxtb	r1, r2
 800aad8:	2907      	cmp	r1, #7
 800aada:	d901      	bls.n	800aae0 <PxMessagingTask+0xbc0>
 800aadc:	f7ff fa51 	bl	8009f82 <PxMessagingTask+0x62>
 800aae0:	b2d2      	uxtb	r2, r2
 800aae2:	0092      	lsls	r2, r2, #2
 800aae4:	49ca      	ldr	r1, [pc, #808]	; (800ae10 <PxMessagingTask+0xef0>)
 800aae6:	588a      	ldr	r2, [r1, r2]
 800aae8:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	4bc9      	ldr	r3, [pc, #804]	; (800ae14 <PxMessagingTask+0xef4>)
 800aaee:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	211f      	movs	r1, #31
 800aaf4:	9806      	ldr	r0, [sp, #24]
 800aaf6:	f7fe ff31 	bl	800995c <SendMessageToModule>
										break;
 800aafa:	f7ff fa47 	bl	8009f8c <PxMessagingTask+0x6c>
										messageParams[0] =*(__IO int8_t* )temp32;
 800aafe:	781a      	ldrb	r2, [r3, #0]
 800ab00:	4bc4      	ldr	r3, [pc, #784]	; (800ae14 <PxMessagingTask+0xef4>)
 800ab02:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800ab04:	2201      	movs	r2, #1
 800ab06:	211f      	movs	r1, #31
 800ab08:	9806      	ldr	r0, [sp, #24]
 800ab0a:	f7fe ff27 	bl	800995c <SendMessageToModule>
										break;
 800ab0e:	f7ff fa3d 	bl	8009f8c <PxMessagingTask+0x6c>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ab12:	8819      	ldrh	r1, [r3, #0]
 800ab14:	4abf      	ldr	r2, [pc, #764]	; (800ae14 <PxMessagingTask+0xef4>)
 800ab16:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	0a1b      	lsrs	r3, r3, #8
 800ab1c:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ab1e:	2202      	movs	r2, #2
 800ab20:	211f      	movs	r1, #31
 800ab22:	9806      	ldr	r0, [sp, #24]
 800ab24:	f7fe ff1a 	bl	800995c <SendMessageToModule>
										break;
 800ab28:	f7ff fa30 	bl	8009f8c <PxMessagingTask+0x6c>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ab2c:	8819      	ldrh	r1, [r3, #0]
 800ab2e:	4ab9      	ldr	r2, [pc, #740]	; (800ae14 <PxMessagingTask+0xef4>)
 800ab30:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	b21b      	sxth	r3, r3
 800ab36:	121b      	asrs	r3, r3, #8
 800ab38:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	211f      	movs	r1, #31
 800ab3e:	9806      	ldr	r0, [sp, #24]
 800ab40:	f7fe ff0c 	bl	800995c <SendMessageToModule>
										break;
 800ab44:	f7ff fa22 	bl	8009f8c <PxMessagingTask+0x6c>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ab48:	6819      	ldr	r1, [r3, #0]
 800ab4a:	4ab2      	ldr	r2, [pc, #712]	; (800ae14 <PxMessagingTask+0xef4>)
 800ab4c:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ab4e:	6819      	ldr	r1, [r3, #0]
 800ab50:	0a09      	lsrs	r1, r1, #8
 800ab52:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ab54:	6819      	ldr	r1, [r3, #0]
 800ab56:	0c09      	lsrs	r1, r1, #16
 800ab58:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	0e1b      	lsrs	r3, r3, #24
 800ab5e:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ab60:	2204      	movs	r2, #4
 800ab62:	211f      	movs	r1, #31
 800ab64:	9806      	ldr	r0, [sp, #24]
 800ab66:	f7fe fef9 	bl	800995c <SendMessageToModule>
										break;
 800ab6a:	f7ff fa0f 	bl	8009f8c <PxMessagingTask+0x6c>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ab6e:	6819      	ldr	r1, [r3, #0]
 800ab70:	4aa8      	ldr	r2, [pc, #672]	; (800ae14 <PxMessagingTask+0xef4>)
 800ab72:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ab74:	6819      	ldr	r1, [r3, #0]
 800ab76:	1209      	asrs	r1, r1, #8
 800ab78:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ab7a:	6819      	ldr	r1, [r3, #0]
 800ab7c:	1409      	asrs	r1, r1, #16
 800ab7e:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	161b      	asrs	r3, r3, #24
 800ab84:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ab86:	2204      	movs	r2, #4
 800ab88:	211f      	movs	r1, #31
 800ab8a:	9806      	ldr	r0, [sp, #24]
 800ab8c:	f7fe fee6 	bl	800995c <SendMessageToModule>
										break;
 800ab90:	f7ff f9fc 	bl	8009f8c <PxMessagingTask+0x6c>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800ab94:	7819      	ldrb	r1, [r3, #0]
 800ab96:	4a9f      	ldr	r2, [pc, #636]	; (800ae14 <PxMessagingTask+0xef4>)
 800ab98:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800ab9a:	7859      	ldrb	r1, [r3, #1]
 800ab9c:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800ab9e:	7899      	ldrb	r1, [r3, #2]
 800aba0:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800aba2:	78db      	ldrb	r3, [r3, #3]
 800aba4:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800aba6:	2208      	movs	r2, #8
 800aba8:	211f      	movs	r1, #31
 800abaa:	9806      	ldr	r0, [sp, #24]
 800abac:	f7fe fed6 	bl	800995c <SendMessageToModule>
										break; // You cannot bitwise floats
 800abb0:	f7ff f9ec 	bl	8009f8c <PxMessagingTask+0x6c>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d01d      	beq.n	800abf4 <PxMessagingTask+0xcd4>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800abb8:	d801      	bhi.n	800abbe <PxMessagingTask+0xc9e>
 800abba:	f000 fd80 	bl	800b6be <PxMessagingTask+0x179e>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800abbe:	001d      	movs	r5, r3
 800abc0:	3d04      	subs	r5, #4
 800abc2:	00ad      	lsls	r5, r5, #2
 800abc4:	4b94      	ldr	r3, [pc, #592]	; (800ae18 <PxMessagingTask+0xef8>)
 800abc6:	58ea      	ldr	r2, [r5, r3]
 800abc8:	250f      	movs	r5, #15
 800abca:	4015      	ands	r5, r2
 800abcc:	46aa      	mov	sl, r5
 800abce:	4b91      	ldr	r3, [pc, #580]	; (800ae14 <PxMessagingTask+0xef4>)
 800abd0:	701d      	strb	r5, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800abd2:	d100      	bne.n	800abd6 <PxMessagingTask+0xcb6>
 800abd4:	e0af      	b.n	800ad36 <PxMessagingTask+0xe16>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800abd6:	0c12      	lsrs	r2, r2, #16
 800abd8:	2380      	movs	r3, #128	; 0x80
 800abda:	059b      	lsls	r3, r3, #22
 800abdc:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 800abde:	3d01      	subs	r5, #1
 800abe0:	b2e9      	uxtb	r1, r5
 800abe2:	2907      	cmp	r1, #7
 800abe4:	d901      	bls.n	800abea <PxMessagingTask+0xcca>
 800abe6:	f000 fd59 	bl	800b69c <PxMessagingTask+0x177c>
 800abea:	b2ed      	uxtb	r5, r5
 800abec:	00ad      	lsls	r5, r5, #2
 800abee:	498b      	ldr	r1, [pc, #556]	; (800ae1c <PxMessagingTask+0xefc>)
 800abf0:	5949      	ldr	r1, [r1, r5]
 800abf2:	468f      	mov	pc, r1
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800abf4:	4b84      	ldr	r3, [pc, #528]	; (800ae08 <PxMessagingTask+0xee8>)
 800abf6:	2038      	movs	r0, #56	; 0x38
 800abf8:	4360      	muls	r0, r4
 800abfa:	1818      	adds	r0, r3, r0
 800abfc:	1841      	adds	r1, r0, r1
 800abfe:	3901      	subs	r1, #1
 800ac00:	2000      	movs	r0, #0
 800ac02:	7008      	strb	r0, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800ac04:	1c68      	adds	r0, r5, #1
 800ac06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac08:	4694      	mov	ip, r2
 800ac0a:	4460      	add	r0, ip
 800ac0c:	18c0      	adds	r0, r0, r3
 800ac0e:	f7f8 fe25 	bl	800385c <IsModuleParameter>
 800ac12:	1e05      	subs	r5, r0, #0
 800ac14:	9009      	str	r0, [sp, #36]	; 0x24
								if(temp == 0){ // Parameter does not exist
 800ac16:	d013      	beq.n	800ac40 <PxMessagingTask+0xd20>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800ac18:	3d01      	subs	r5, #1
 800ac1a:	4a81      	ldr	r2, [pc, #516]	; (800ae20 <PxMessagingTask+0xf00>)
 800ac1c:	230c      	movs	r3, #12
 800ac1e:	435d      	muls	r5, r3
 800ac20:	58ab      	ldr	r3, [r5, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800ac22:	1952      	adds	r2, r2, r5
 800ac24:	7912      	ldrb	r2, [r2, #4]
 800ac26:	497b      	ldr	r1, [pc, #492]	; (800ae14 <PxMessagingTask+0xef4>)
 800ac28:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800ac2a:	3a01      	subs	r2, #1
 800ac2c:	b2d1      	uxtb	r1, r2
 800ac2e:	2907      	cmp	r1, #7
 800ac30:	d901      	bls.n	800ac36 <PxMessagingTask+0xd16>
 800ac32:	f000 fd2f 	bl	800b694 <PxMessagingTask+0x1774>
 800ac36:	b2d2      	uxtb	r2, r2
 800ac38:	0092      	lsls	r2, r2, #2
 800ac3a:	497a      	ldr	r1, [pc, #488]	; (800ae24 <PxMessagingTask+0xf04>)
 800ac3c:	588a      	ldr	r2, [r1, r2]
 800ac3e:	4697      	mov	pc, r2
									SendMessageToModule(src,
 800ac40:	2201      	movs	r2, #1
 800ac42:	211f      	movs	r1, #31
 800ac44:	9806      	ldr	r0, [sp, #24]
 800ac46:	f7fe fe89 	bl	800995c <SendMessageToModule>
 800ac4a:	46aa      	mov	sl, r5
 800ac4c:	f7ff f99e 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =*(__IO uint8_t* )temp32;
 800ac50:	781a      	ldrb	r2, [r3, #0]
 800ac52:	4b70      	ldr	r3, [pc, #448]	; (800ae14 <PxMessagingTask+0xef4>)
 800ac54:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ac56:	2202      	movs	r2, #2
 800ac58:	211f      	movs	r1, #31
 800ac5a:	9806      	ldr	r0, [sp, #24]
 800ac5c:	f7fe fe7e 	bl	800995c <SendMessageToModule>
											break;
 800ac60:	2300      	movs	r3, #0
 800ac62:	469a      	mov	sl, r3
 800ac64:	f7ff f992 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =*(__IO int8_t* )temp32;
 800ac68:	781a      	ldrb	r2, [r3, #0]
 800ac6a:	4b6a      	ldr	r3, [pc, #424]	; (800ae14 <PxMessagingTask+0xef4>)
 800ac6c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ac6e:	2202      	movs	r2, #2
 800ac70:	211f      	movs	r1, #31
 800ac72:	9806      	ldr	r0, [sp, #24]
 800ac74:	f7fe fe72 	bl	800995c <SendMessageToModule>
											break;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	469a      	mov	sl, r3
 800ac7c:	f7ff f986 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ac80:	8819      	ldrh	r1, [r3, #0]
 800ac82:	4a64      	ldr	r2, [pc, #400]	; (800ae14 <PxMessagingTask+0xef4>)
 800ac84:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ac86:	881b      	ldrh	r3, [r3, #0]
 800ac88:	0a1b      	lsrs	r3, r3, #8
 800ac8a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ac8c:	2203      	movs	r2, #3
 800ac8e:	211f      	movs	r1, #31
 800ac90:	9806      	ldr	r0, [sp, #24]
 800ac92:	f7fe fe63 	bl	800995c <SendMessageToModule>
											break;
 800ac96:	2300      	movs	r3, #0
 800ac98:	469a      	mov	sl, r3
 800ac9a:	f7ff f977 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ac9e:	8819      	ldrh	r1, [r3, #0]
 800aca0:	4a5c      	ldr	r2, [pc, #368]	; (800ae14 <PxMessagingTask+0xef4>)
 800aca2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	b21b      	sxth	r3, r3
 800aca8:	121b      	asrs	r3, r3, #8
 800acaa:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800acac:	2203      	movs	r2, #3
 800acae:	211f      	movs	r1, #31
 800acb0:	9806      	ldr	r0, [sp, #24]
 800acb2:	f7fe fe53 	bl	800995c <SendMessageToModule>
											break;
 800acb6:	2300      	movs	r3, #0
 800acb8:	469a      	mov	sl, r3
 800acba:	f7ff f967 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800acbe:	6819      	ldr	r1, [r3, #0]
 800acc0:	4a54      	ldr	r2, [pc, #336]	; (800ae14 <PxMessagingTask+0xef4>)
 800acc2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800acc4:	6819      	ldr	r1, [r3, #0]
 800acc6:	0a09      	lsrs	r1, r1, #8
 800acc8:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800acca:	6819      	ldr	r1, [r3, #0]
 800accc:	0c09      	lsrs	r1, r1, #16
 800acce:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	0e1b      	lsrs	r3, r3, #24
 800acd4:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800acd6:	2205      	movs	r2, #5
 800acd8:	211f      	movs	r1, #31
 800acda:	9806      	ldr	r0, [sp, #24]
 800acdc:	f7fe fe3e 	bl	800995c <SendMessageToModule>
											break;
 800ace0:	2300      	movs	r3, #0
 800ace2:	469a      	mov	sl, r3
 800ace4:	f7ff f952 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ace8:	6819      	ldr	r1, [r3, #0]
 800acea:	4a4a      	ldr	r2, [pc, #296]	; (800ae14 <PxMessagingTask+0xef4>)
 800acec:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800acee:	6819      	ldr	r1, [r3, #0]
 800acf0:	1209      	asrs	r1, r1, #8
 800acf2:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800acf4:	6819      	ldr	r1, [r3, #0]
 800acf6:	1409      	asrs	r1, r1, #16
 800acf8:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	161b      	asrs	r3, r3, #24
 800acfe:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ad00:	2205      	movs	r2, #5
 800ad02:	211f      	movs	r1, #31
 800ad04:	9806      	ldr	r0, [sp, #24]
 800ad06:	f7fe fe29 	bl	800995c <SendMessageToModule>
											break;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	469a      	mov	sl, r3
 800ad0e:	f7ff f93d 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800ad12:	7819      	ldrb	r1, [r3, #0]
 800ad14:	4a3f      	ldr	r2, [pc, #252]	; (800ae14 <PxMessagingTask+0xef4>)
 800ad16:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800ad18:	7859      	ldrb	r1, [r3, #1]
 800ad1a:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800ad1c:	7899      	ldrb	r1, [r3, #2]
 800ad1e:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800ad20:	78db      	ldrb	r3, [r3, #3]
 800ad22:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ad24:	2209      	movs	r2, #9
 800ad26:	211f      	movs	r1, #31
 800ad28:	9806      	ldr	r0, [sp, #24]
 800ad2a:	f7fe fe17 	bl	800995c <SendMessageToModule>
											break;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	469a      	mov	sl, r3
 800ad32:	f7ff f92b 	bl	8009f8c <PxMessagingTask+0x6c>
									SendMessageToModule(src,
 800ad36:	2201      	movs	r2, #1
 800ad38:	211f      	movs	r1, #31
 800ad3a:	9806      	ldr	r0, [sp, #24]
 800ad3c:	f7fe fe0e 	bl	800995c <SendMessageToModule>
 800ad40:	f7ff f924 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =*(__IO uint8_t* )temp32;
 800ad44:	781a      	ldrb	r2, [r3, #0]
 800ad46:	4b33      	ldr	r3, [pc, #204]	; (800ae14 <PxMessagingTask+0xef4>)
 800ad48:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	211f      	movs	r1, #31
 800ad4e:	9806      	ldr	r0, [sp, #24]
 800ad50:	f7fe fe04 	bl	800995c <SendMessageToModule>
											break;
 800ad54:	2300      	movs	r3, #0
 800ad56:	469a      	mov	sl, r3
 800ad58:	f7ff f918 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =*(__IO int8_t* )temp32;
 800ad5c:	781a      	ldrb	r2, [r3, #0]
 800ad5e:	4b2d      	ldr	r3, [pc, #180]	; (800ae14 <PxMessagingTask+0xef4>)
 800ad60:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ad62:	2202      	movs	r2, #2
 800ad64:	211f      	movs	r1, #31
 800ad66:	9806      	ldr	r0, [sp, #24]
 800ad68:	f7fe fdf8 	bl	800995c <SendMessageToModule>
											break;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	469a      	mov	sl, r3
 800ad70:	f7ff f90c 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ad74:	8819      	ldrh	r1, [r3, #0]
 800ad76:	4a27      	ldr	r2, [pc, #156]	; (800ae14 <PxMessagingTask+0xef4>)
 800ad78:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ad7a:	881b      	ldrh	r3, [r3, #0]
 800ad7c:	0a1b      	lsrs	r3, r3, #8
 800ad7e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ad80:	2203      	movs	r2, #3
 800ad82:	211f      	movs	r1, #31
 800ad84:	9806      	ldr	r0, [sp, #24]
 800ad86:	f7fe fde9 	bl	800995c <SendMessageToModule>
											break;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	469a      	mov	sl, r3
 800ad8e:	f7ff f8fd 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ad92:	8819      	ldrh	r1, [r3, #0]
 800ad94:	4a1f      	ldr	r2, [pc, #124]	; (800ae14 <PxMessagingTask+0xef4>)
 800ad96:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	b21b      	sxth	r3, r3
 800ad9c:	121b      	asrs	r3, r3, #8
 800ad9e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ada0:	2203      	movs	r2, #3
 800ada2:	211f      	movs	r1, #31
 800ada4:	9806      	ldr	r0, [sp, #24]
 800ada6:	f7fe fdd9 	bl	800995c <SendMessageToModule>
											break;
 800adaa:	2300      	movs	r3, #0
 800adac:	469a      	mov	sl, r3
 800adae:	f7ff f8ed 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800adb2:	6819      	ldr	r1, [r3, #0]
 800adb4:	4a17      	ldr	r2, [pc, #92]	; (800ae14 <PxMessagingTask+0xef4>)
 800adb6:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800adb8:	6819      	ldr	r1, [r3, #0]
 800adba:	0a09      	lsrs	r1, r1, #8
 800adbc:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800adbe:	6819      	ldr	r1, [r3, #0]
 800adc0:	0c09      	lsrs	r1, r1, #16
 800adc2:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	0e1b      	lsrs	r3, r3, #24
 800adc8:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800adca:	2205      	movs	r2, #5
 800adcc:	211f      	movs	r1, #31
 800adce:	9806      	ldr	r0, [sp, #24]
 800add0:	f7fe fdc4 	bl	800995c <SendMessageToModule>
											break;
 800add4:	2300      	movs	r3, #0
 800add6:	469a      	mov	sl, r3
 800add8:	f7ff f8d8 	bl	8009f8c <PxMessagingTask+0x6c>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800addc:	6819      	ldr	r1, [r3, #0]
 800adde:	4a0d      	ldr	r2, [pc, #52]	; (800ae14 <PxMessagingTask+0xef4>)
 800ade0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ade2:	6819      	ldr	r1, [r3, #0]
 800ade4:	1209      	asrs	r1, r1, #8
 800ade6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ade8:	6819      	ldr	r1, [r3, #0]
 800adea:	1409      	asrs	r1, r1, #16
 800adec:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	161b      	asrs	r3, r3, #24
 800adf2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800adf4:	2205      	movs	r2, #5
 800adf6:	211f      	movs	r1, #31
 800adf8:	9806      	ldr	r0, [sp, #24]
 800adfa:	f7fe fdaf 	bl	800995c <SendMessageToModule>
											break;
 800adfe:	2300      	movs	r3, #0
 800ae00:	469a      	mov	sl, r3
 800ae02:	f7ff f8c3 	bl	8009f8c <PxMessagingTask+0x6c>
 800ae06:	46c0      	nop			; (mov r8, r8)
 800ae08:	20000d10 	.word	0x20000d10
 800ae0c:	2000107e 	.word	0x2000107e
 800ae10:	0801cecc 	.word	0x0801cecc
 800ae14:	20000f40 	.word	0x20000f40
 800ae18:	20006a30 	.word	0x20006a30
 800ae1c:	0801ceec 	.word	0x0801ceec
 800ae20:	20000084 	.word	0x20000084
 800ae24:	0801cf0c 	.word	0x0801cf0c
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800ae28:	7819      	ldrb	r1, [r3, #0]
 800ae2a:	4bd9      	ldr	r3, [pc, #868]	; (800b190 <PxMessagingTask+0x1270>)
 800ae2c:	7059      	strb	r1, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800ae2e:	49d9      	ldr	r1, [pc, #868]	; (800b194 <PxMessagingTask+0x1274>)
 800ae30:	1851      	adds	r1, r2, r1
 800ae32:	7809      	ldrb	r1, [r1, #0]
 800ae34:	7099      	strb	r1, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800ae36:	49d8      	ldr	r1, [pc, #864]	; (800b198 <PxMessagingTask+0x1278>)
 800ae38:	1851      	adds	r1, r2, r1
 800ae3a:	7809      	ldrb	r1, [r1, #0]
 800ae3c:	70d9      	strb	r1, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800ae3e:	49d7      	ldr	r1, [pc, #860]	; (800b19c <PxMessagingTask+0x127c>)
 800ae40:	468c      	mov	ip, r1
 800ae42:	4462      	add	r2, ip
 800ae44:	7812      	ldrb	r2, [r2, #0]
 800ae46:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800ae48:	2209      	movs	r2, #9
 800ae4a:	211f      	movs	r1, #31
 800ae4c:	9806      	ldr	r0, [sp, #24]
 800ae4e:	f7fe fd85 	bl	800995c <SendMessageToModule>
											break;
 800ae52:	2300      	movs	r3, #0
 800ae54:	469a      	mov	sl, r3
 800ae56:	f7ff f899 	bl	8009f8c <PxMessagingTask+0x6c>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800ae5a:	4bd1      	ldr	r3, [pc, #836]	; (800b1a0 <PxMessagingTask+0x1280>)
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	2002      	movs	r0, #2
 800ae62:	4240      	negs	r0, r0
 800ae64:	17c1      	asrs	r1, r0, #31
 800ae66:	1812      	adds	r2, r2, r0
 800ae68:	414b      	adcs	r3, r1
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00b      	beq.n	800ae86 <PxMessagingTask+0xf66>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800ae6e:	4bcd      	ldr	r3, [pc, #820]	; (800b1a4 <PxMessagingTask+0x1284>)
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	2b10      	cmp	r3, #16
 800ae74:	d101      	bne.n	800ae7a <PxMessagingTask+0xf5a>
 800ae76:	f000 fc26 	bl	800b6c6 <PxMessagingTask+0x17a6>
								responseStatus =BOS_OK;
 800ae7a:	2500      	movs	r5, #0
 800ae7c:	4bc9      	ldr	r3, [pc, #804]	; (800b1a4 <PxMessagingTask+0x1284>)
 800ae7e:	701d      	strb	r5, [r3, #0]
 800ae80:	46aa      	mov	sl, r5
 800ae82:	f7ff f883 	bl	8009f8c <PxMessagingTask+0x6c>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <PxMessagingTask+0xf6e>
 800ae8a:	2a01      	cmp	r2, #1
 800ae8c:	d8ef      	bhi.n	800ae6e <PxMessagingTask+0xf4e>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800ae8e:	2138      	movs	r1, #56	; 0x38
 800ae90:	4361      	muls	r1, r4
 800ae92:	4ac5      	ldr	r2, [pc, #788]	; (800b1a8 <PxMessagingTask+0x1288>)
 800ae94:	1852      	adds	r2, r2, r1
 800ae96:	5d52      	ldrb	r2, [r2, r5]
 800ae98:	4692      	mov	sl, r2
 800ae9a:	4ac4      	ldr	r2, [pc, #784]	; (800b1ac <PxMessagingTask+0x128c>)
 800ae9c:	4651      	mov	r1, sl
 800ae9e:	7011      	strb	r1, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800aea0:	2908      	cmp	r1, #8
 800aea2:	d8e4      	bhi.n	800ae6e <PxMessagingTask+0xf4e>
 800aea4:	008a      	lsls	r2, r1, #2
 800aea6:	49c2      	ldr	r1, [pc, #776]	; (800b1b0 <PxMessagingTask+0x1290>)
 800aea8:	588a      	ldr	r2, [r1, r2]
 800aeaa:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800aeac:	4bbd      	ldr	r3, [pc, #756]	; (800b1a4 <PxMessagingTask+0x1284>)
 800aeae:	2210      	movs	r2, #16
 800aeb0:	701a      	strb	r2, [r3, #0]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800aeb2:	f7ff f86b 	bl	8009f8c <PxMessagingTask+0x6c>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800aeb6:	4aba      	ldr	r2, [pc, #744]	; (800b1a0 <PxMessagingTask+0x1280>)
 800aeb8:	2038      	movs	r0, #56	; 0x38
 800aeba:	4360      	muls	r0, r4
 800aebc:	49ba      	ldr	r1, [pc, #744]	; (800b1a8 <PxMessagingTask+0x1288>)
 800aebe:	1809      	adds	r1, r1, r0
 800aec0:	1949      	adds	r1, r1, r5
 800aec2:	784b      	ldrb	r3, [r1, #1]
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	2300      	movs	r3, #0
 800aec8:	6053      	str	r3, [r2, #4]
										break;
 800aeca:	e7d0      	b.n	800ae6e <PxMessagingTask+0xf4e>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800aecc:	4ab4      	ldr	r2, [pc, #720]	; (800b1a0 <PxMessagingTask+0x1280>)
 800aece:	2038      	movs	r0, #56	; 0x38
 800aed0:	4360      	muls	r0, r4
 800aed2:	49b5      	ldr	r1, [pc, #724]	; (800b1a8 <PxMessagingTask+0x1288>)
 800aed4:	1809      	adds	r1, r1, r0
 800aed6:	1949      	adds	r1, r1, r5
 800aed8:	2301      	movs	r3, #1
 800aeda:	56cb      	ldrsb	r3, [r1, r3]
 800aedc:	6013      	str	r3, [r2, #0]
 800aede:	17db      	asrs	r3, r3, #31
 800aee0:	6053      	str	r3, [r2, #4]
										break;
 800aee2:	e7c4      	b.n	800ae6e <PxMessagingTask+0xf4e>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800aee4:	4aae      	ldr	r2, [pc, #696]	; (800b1a0 <PxMessagingTask+0x1280>)
 800aee6:	2038      	movs	r0, #56	; 0x38
 800aee8:	4360      	muls	r0, r4
 800aeea:	49af      	ldr	r1, [pc, #700]	; (800b1a8 <PxMessagingTask+0x1288>)
 800aeec:	1809      	adds	r1, r1, r0
 800aeee:	1949      	adds	r1, r1, r5
 800aef0:	788b      	ldrb	r3, [r1, #2]
 800aef2:	021b      	lsls	r3, r3, #8
 800aef4:	7849      	ldrb	r1, [r1, #1]
 800aef6:	185b      	adds	r3, r3, r1
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	17db      	asrs	r3, r3, #31
 800aefc:	6053      	str	r3, [r2, #4]
										break;
 800aefe:	e7b6      	b.n	800ae6e <PxMessagingTask+0xf4e>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800af00:	4aa7      	ldr	r2, [pc, #668]	; (800b1a0 <PxMessagingTask+0x1280>)
 800af02:	2038      	movs	r0, #56	; 0x38
 800af04:	4360      	muls	r0, r4
 800af06:	49a8      	ldr	r1, [pc, #672]	; (800b1a8 <PxMessagingTask+0x1288>)
 800af08:	1809      	adds	r1, r1, r0
 800af0a:	1949      	adds	r1, r1, r5
 800af0c:	788b      	ldrb	r3, [r1, #2]
 800af0e:	021b      	lsls	r3, r3, #8
 800af10:	7849      	ldrb	r1, [r1, #1]
 800af12:	185b      	adds	r3, r3, r1
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	17db      	asrs	r3, r3, #31
 800af18:	6053      	str	r3, [r2, #4]
										break;
 800af1a:	e7a8      	b.n	800ae6e <PxMessagingTask+0xf4e>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800af1c:	4aa0      	ldr	r2, [pc, #640]	; (800b1a0 <PxMessagingTask+0x1280>)
 800af1e:	2038      	movs	r0, #56	; 0x38
 800af20:	4360      	muls	r0, r4
 800af22:	49a1      	ldr	r1, [pc, #644]	; (800b1a8 <PxMessagingTask+0x1288>)
 800af24:	1809      	adds	r1, r1, r0
 800af26:	1949      	adds	r1, r1, r5
 800af28:	788b      	ldrb	r3, [r1, #2]
 800af2a:	021b      	lsls	r3, r3, #8
 800af2c:	78c8      	ldrb	r0, [r1, #3]
 800af2e:	0400      	lsls	r0, r0, #16
 800af30:	181b      	adds	r3, r3, r0
 800af32:	7848      	ldrb	r0, [r1, #1]
 800af34:	181b      	adds	r3, r3, r0
 800af36:	7909      	ldrb	r1, [r1, #4]
 800af38:	0609      	lsls	r1, r1, #24
 800af3a:	185b      	adds	r3, r3, r1
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	2300      	movs	r3, #0
 800af40:	6053      	str	r3, [r2, #4]
										break;
 800af42:	e794      	b.n	800ae6e <PxMessagingTask+0xf4e>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800af44:	4a96      	ldr	r2, [pc, #600]	; (800b1a0 <PxMessagingTask+0x1280>)
 800af46:	2038      	movs	r0, #56	; 0x38
 800af48:	4360      	muls	r0, r4
 800af4a:	4997      	ldr	r1, [pc, #604]	; (800b1a8 <PxMessagingTask+0x1288>)
 800af4c:	1809      	adds	r1, r1, r0
 800af4e:	1949      	adds	r1, r1, r5
 800af50:	788b      	ldrb	r3, [r1, #2]
 800af52:	021b      	lsls	r3, r3, #8
 800af54:	7848      	ldrb	r0, [r1, #1]
 800af56:	181b      	adds	r3, r3, r0
 800af58:	78c8      	ldrb	r0, [r1, #3]
 800af5a:	0400      	lsls	r0, r0, #16
 800af5c:	181b      	adds	r3, r3, r0
 800af5e:	7909      	ldrb	r1, [r1, #4]
 800af60:	0609      	lsls	r1, r1, #24
 800af62:	185b      	adds	r3, r3, r1
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	17db      	asrs	r3, r3, #31
 800af68:	6053      	str	r3, [r2, #4]
										break;
 800af6a:	e780      	b.n	800ae6e <PxMessagingTask+0xf4e>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800af6c:	4a8c      	ldr	r2, [pc, #560]	; (800b1a0 <PxMessagingTask+0x1280>)
 800af6e:	2038      	movs	r0, #56	; 0x38
 800af70:	4360      	muls	r0, r4
 800af72:	498d      	ldr	r1, [pc, #564]	; (800b1a8 <PxMessagingTask+0x1288>)
 800af74:	1809      	adds	r1, r1, r0
 800af76:	1949      	adds	r1, r1, r5
 800af78:	788b      	ldrb	r3, [r1, #2]
 800af7a:	021b      	lsls	r3, r3, #8
 800af7c:	78c8      	ldrb	r0, [r1, #3]
 800af7e:	0400      	lsls	r0, r0, #16
 800af80:	181b      	adds	r3, r3, r0
 800af82:	7848      	ldrb	r0, [r1, #1]
 800af84:	181b      	adds	r3, r3, r0
 800af86:	7909      	ldrb	r1, [r1, #4]
 800af88:	0609      	lsls	r1, r1, #24
 800af8a:	185b      	adds	r3, r3, r1
 800af8c:	6013      	str	r3, [r2, #0]
 800af8e:	2300      	movs	r3, #0
 800af90:	6053      	str	r3, [r2, #4]
										break;
 800af92:	e76c      	b.n	800ae6e <PxMessagingTask+0xf4e>
							responseStatus =BOS_OK; // Initialize response
 800af94:	4b83      	ldr	r3, [pc, #524]	; (800b1a4 <PxMessagingTask+0x1284>)
 800af96:	2200      	movs	r2, #0
 800af98:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800af9a:	46a8      	mov	r8, r5
 800af9c:	4b82      	ldr	r3, [pc, #520]	; (800b1a8 <PxMessagingTask+0x1288>)
 800af9e:	199b      	adds	r3, r3, r6
 800afa0:	5d5b      	ldrb	r3, [r3, r5]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d100      	bne.n	800afa8 <PxMessagingTask+0x1088>
 800afa6:	e12f      	b.n	800b208 <PxMessagingTask+0x12e8>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800afa8:	2b1e      	cmp	r3, #30
 800afaa:	d900      	bls.n	800afae <PxMessagingTask+0x108e>
 800afac:	e114      	b.n	800b1d8 <PxMessagingTask+0x12b8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800afae:	1e5d      	subs	r5, r3, #1
 800afb0:	00aa      	lsls	r2, r5, #2
 800afb2:	4b80      	ldr	r3, [pc, #512]	; (800b1b4 <PxMessagingTask+0x1294>)
 800afb4:	58d2      	ldr	r2, [r2, r3]
 800afb6:	0c13      	lsrs	r3, r2, #16
 800afb8:	2180      	movs	r1, #128	; 0x80
 800afba:	0589      	lsls	r1, r1, #22
 800afbc:	468c      	mov	ip, r1
 800afbe:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800afc0:	2101      	movs	r1, #1
 800afc2:	4441      	add	r1, r8
 800afc4:	4689      	mov	r9, r1
 800afc6:	2038      	movs	r0, #56	; 0x38
 800afc8:	4360      	muls	r0, r4
 800afca:	4977      	ldr	r1, [pc, #476]	; (800b1a8 <PxMessagingTask+0x1288>)
 800afcc:	1809      	adds	r1, r1, r0
 800afce:	4648      	mov	r0, r9
 800afd0:	5c09      	ldrb	r1, [r1, r0]
 800afd2:	468a      	mov	sl, r1
 800afd4:	3901      	subs	r1, #1
 800afd6:	b2c8      	uxtb	r0, r1
 800afd8:	2807      	cmp	r0, #7
 800afda:	d80d      	bhi.n	800aff8 <PxMessagingTask+0x10d8>
 800afdc:	b2c9      	uxtb	r1, r1
 800afde:	0089      	lsls	r1, r1, #2
 800afe0:	4875      	ldr	r0, [pc, #468]	; (800b1b8 <PxMessagingTask+0x1298>)
 800afe2:	5841      	ldr	r1, [r0, r1]
 800afe4:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800afe6:	0712      	lsls	r2, r2, #28
 800afe8:	d022      	beq.n	800b030 <PxMessagingTask+0x1110>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800afea:	2138      	movs	r1, #56	; 0x38
 800afec:	4361      	muls	r1, r4
 800afee:	4a6e      	ldr	r2, [pc, #440]	; (800b1a8 <PxMessagingTask+0x1288>)
 800aff0:	1852      	adds	r2, r2, r1
 800aff2:	4442      	add	r2, r8
 800aff4:	7892      	ldrb	r2, [r2, #2]
 800aff6:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800aff8:	2338      	movs	r3, #56	; 0x38
 800affa:	4363      	muls	r3, r4
 800affc:	4a6a      	ldr	r2, [pc, #424]	; (800b1a8 <PxMessagingTask+0x1288>)
 800affe:	18d2      	adds	r2, r2, r3
 800b000:	4643      	mov	r3, r8
 800b002:	5cd3      	ldrb	r3, [r2, r3]
 800b004:	3b01      	subs	r3, #1
 800b006:	0098      	lsls	r0, r3, #2
 800b008:	496a      	ldr	r1, [pc, #424]	; (800b1b4 <PxMessagingTask+0x1294>)
 800b00a:	5841      	ldr	r1, [r0, r1]
 800b00c:	4648      	mov	r0, r9
 800b00e:	5c12      	ldrb	r2, [r2, r0]
 800b010:	200f      	movs	r0, #15
 800b012:	4008      	ands	r0, r1
 800b014:	4290      	cmp	r0, r2
 800b016:	d100      	bne.n	800b01a <PxMessagingTask+0x10fa>
 800b018:	e0e1      	b.n	800b1de <PxMessagingTask+0x12be>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4867      	ldr	r0, [pc, #412]	; (800b1bc <PxMessagingTask+0x129c>)
 800b01e:	4684      	mov	ip, r0
 800b020:	4462      	add	r2, ip
 800b022:	400a      	ands	r2, r1
 800b024:	4963      	ldr	r1, [pc, #396]	; (800b1b4 <PxMessagingTask+0x1294>)
 800b026:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800b028:	4b5e      	ldr	r3, [pc, #376]	; (800b1a4 <PxMessagingTask+0x1284>)
 800b02a:	2214      	movs	r2, #20
 800b02c:	701a      	strb	r2, [r3, #0]
 800b02e:	e0d6      	b.n	800b1de <PxMessagingTask+0x12be>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800b030:	2001      	movs	r0, #1
 800b032:	f008 feb7 	bl	8013da4 <malloc>
 800b036:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b038:	d005      	beq.n	800b046 <PxMessagingTask+0x1126>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b03a:	00ad      	lsls	r5, r5, #2
 800b03c:	0400      	lsls	r0, r0, #16
 800b03e:	4450      	add	r0, sl
 800b040:	4a5c      	ldr	r2, [pc, #368]	; (800b1b4 <PxMessagingTask+0x1294>)
 800b042:	50a8      	str	r0, [r5, r2]
 800b044:	e7d1      	b.n	800afea <PxMessagingTask+0x10ca>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b046:	4b57      	ldr	r3, [pc, #348]	; (800b1a4 <PxMessagingTask+0x1284>)
 800b048:	2212      	movs	r2, #18
 800b04a:	701a      	strb	r2, [r3, #0]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b04c:	e7d4      	b.n	800aff8 <PxMessagingTask+0x10d8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b04e:	0712      	lsls	r2, r2, #28
 800b050:	d008      	beq.n	800b064 <PxMessagingTask+0x1144>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800b052:	2138      	movs	r1, #56	; 0x38
 800b054:	4361      	muls	r1, r4
 800b056:	4a54      	ldr	r2, [pc, #336]	; (800b1a8 <PxMessagingTask+0x1288>)
 800b058:	1852      	adds	r2, r2, r1
 800b05a:	4442      	add	r2, r8
 800b05c:	7892      	ldrb	r2, [r2, #2]
 800b05e:	b252      	sxtb	r2, r2
 800b060:	701a      	strb	r2, [r3, #0]
 800b062:	e7c9      	b.n	800aff8 <PxMessagingTask+0x10d8>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800b064:	2001      	movs	r0, #1
 800b066:	f008 fe9d 	bl	8013da4 <malloc>
 800b06a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b06c:	d100      	bne.n	800b070 <PxMessagingTask+0x1150>
 800b06e:	e33a      	b.n	800b6e6 <PxMessagingTask+0x17c6>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b070:	00ad      	lsls	r5, r5, #2
 800b072:	0400      	lsls	r0, r0, #16
 800b074:	3002      	adds	r0, #2
 800b076:	4a4f      	ldr	r2, [pc, #316]	; (800b1b4 <PxMessagingTask+0x1294>)
 800b078:	50a8      	str	r0, [r5, r2]
 800b07a:	e7ea      	b.n	800b052 <PxMessagingTask+0x1132>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b07c:	0712      	lsls	r2, r2, #28
 800b07e:	d00b      	beq.n	800b098 <PxMessagingTask+0x1178>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800b080:	2138      	movs	r1, #56	; 0x38
 800b082:	4361      	muls	r1, r4
 800b084:	4a48      	ldr	r2, [pc, #288]	; (800b1a8 <PxMessagingTask+0x1288>)
 800b086:	1852      	adds	r2, r2, r1
 800b088:	4442      	add	r2, r8
 800b08a:	78d1      	ldrb	r1, [r2, #3]
 800b08c:	0209      	lsls	r1, r1, #8
 800b08e:	7892      	ldrb	r2, [r2, #2]
 800b090:	1852      	adds	r2, r2, r1
 800b092:	b292      	uxth	r2, r2
 800b094:	801a      	strh	r2, [r3, #0]
 800b096:	e7af      	b.n	800aff8 <PxMessagingTask+0x10d8>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800b098:	2002      	movs	r0, #2
 800b09a:	f008 fe83 	bl	8013da4 <malloc>
 800b09e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b0a0:	d100      	bne.n	800b0a4 <PxMessagingTask+0x1184>
 800b0a2:	e320      	b.n	800b6e6 <PxMessagingTask+0x17c6>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b0a4:	00ad      	lsls	r5, r5, #2
 800b0a6:	0400      	lsls	r0, r0, #16
 800b0a8:	3003      	adds	r0, #3
 800b0aa:	4a42      	ldr	r2, [pc, #264]	; (800b1b4 <PxMessagingTask+0x1294>)
 800b0ac:	50a8      	str	r0, [r5, r2]
 800b0ae:	e7e7      	b.n	800b080 <PxMessagingTask+0x1160>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b0b0:	0712      	lsls	r2, r2, #28
 800b0b2:	d00b      	beq.n	800b0cc <PxMessagingTask+0x11ac>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800b0b4:	2138      	movs	r1, #56	; 0x38
 800b0b6:	4361      	muls	r1, r4
 800b0b8:	4a3b      	ldr	r2, [pc, #236]	; (800b1a8 <PxMessagingTask+0x1288>)
 800b0ba:	1852      	adds	r2, r2, r1
 800b0bc:	4442      	add	r2, r8
 800b0be:	78d1      	ldrb	r1, [r2, #3]
 800b0c0:	0209      	lsls	r1, r1, #8
 800b0c2:	7892      	ldrb	r2, [r2, #2]
 800b0c4:	1852      	adds	r2, r2, r1
 800b0c6:	b212      	sxth	r2, r2
 800b0c8:	801a      	strh	r2, [r3, #0]
 800b0ca:	e795      	b.n	800aff8 <PxMessagingTask+0x10d8>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800b0cc:	2002      	movs	r0, #2
 800b0ce:	f008 fe69 	bl	8013da4 <malloc>
 800b0d2:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b0d4:	d100      	bne.n	800b0d8 <PxMessagingTask+0x11b8>
 800b0d6:	e306      	b.n	800b6e6 <PxMessagingTask+0x17c6>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b0d8:	00ad      	lsls	r5, r5, #2
 800b0da:	0400      	lsls	r0, r0, #16
 800b0dc:	3004      	adds	r0, #4
 800b0de:	4a35      	ldr	r2, [pc, #212]	; (800b1b4 <PxMessagingTask+0x1294>)
 800b0e0:	50a8      	str	r0, [r5, r2]
 800b0e2:	e7e7      	b.n	800b0b4 <PxMessagingTask+0x1194>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b0e4:	0712      	lsls	r2, r2, #28
 800b0e6:	d010      	beq.n	800b10a <PxMessagingTask+0x11ea>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b0e8:	2238      	movs	r2, #56	; 0x38
 800b0ea:	4362      	muls	r2, r4
 800b0ec:	492e      	ldr	r1, [pc, #184]	; (800b1a8 <PxMessagingTask+0x1288>)
 800b0ee:	1889      	adds	r1, r1, r2
 800b0f0:	4441      	add	r1, r8
 800b0f2:	78ca      	ldrb	r2, [r1, #3]
 800b0f4:	0212      	lsls	r2, r2, #8
 800b0f6:	7908      	ldrb	r0, [r1, #4]
 800b0f8:	0400      	lsls	r0, r0, #16
 800b0fa:	1812      	adds	r2, r2, r0
 800b0fc:	7888      	ldrb	r0, [r1, #2]
 800b0fe:	1812      	adds	r2, r2, r0
 800b100:	7949      	ldrb	r1, [r1, #5]
 800b102:	0609      	lsls	r1, r1, #24
 800b104:	1852      	adds	r2, r2, r1
 800b106:	601a      	str	r2, [r3, #0]
 800b108:	e776      	b.n	800aff8 <PxMessagingTask+0x10d8>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b10a:	2004      	movs	r0, #4
 800b10c:	f008 fe4a 	bl	8013da4 <malloc>
 800b110:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b112:	d100      	bne.n	800b116 <PxMessagingTask+0x11f6>
 800b114:	e2e7      	b.n	800b6e6 <PxMessagingTask+0x17c6>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b116:	00ad      	lsls	r5, r5, #2
 800b118:	0400      	lsls	r0, r0, #16
 800b11a:	3005      	adds	r0, #5
 800b11c:	4a25      	ldr	r2, [pc, #148]	; (800b1b4 <PxMessagingTask+0x1294>)
 800b11e:	50a8      	str	r0, [r5, r2]
 800b120:	e7e2      	b.n	800b0e8 <PxMessagingTask+0x11c8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b122:	0712      	lsls	r2, r2, #28
 800b124:	d010      	beq.n	800b148 <PxMessagingTask+0x1228>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800b126:	2238      	movs	r2, #56	; 0x38
 800b128:	4362      	muls	r2, r4
 800b12a:	491f      	ldr	r1, [pc, #124]	; (800b1a8 <PxMessagingTask+0x1288>)
 800b12c:	1889      	adds	r1, r1, r2
 800b12e:	4441      	add	r1, r8
 800b130:	78ca      	ldrb	r2, [r1, #3]
 800b132:	0212      	lsls	r2, r2, #8
 800b134:	7888      	ldrb	r0, [r1, #2]
 800b136:	1812      	adds	r2, r2, r0
 800b138:	7908      	ldrb	r0, [r1, #4]
 800b13a:	0400      	lsls	r0, r0, #16
 800b13c:	1812      	adds	r2, r2, r0
 800b13e:	7949      	ldrb	r1, [r1, #5]
 800b140:	0609      	lsls	r1, r1, #24
 800b142:	1852      	adds	r2, r2, r1
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	e757      	b.n	800aff8 <PxMessagingTask+0x10d8>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b148:	2004      	movs	r0, #4
 800b14a:	f008 fe2b 	bl	8013da4 <malloc>
 800b14e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b150:	d100      	bne.n	800b154 <PxMessagingTask+0x1234>
 800b152:	e2c8      	b.n	800b6e6 <PxMessagingTask+0x17c6>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b154:	00ad      	lsls	r5, r5, #2
 800b156:	0400      	lsls	r0, r0, #16
 800b158:	3006      	adds	r0, #6
 800b15a:	4a16      	ldr	r2, [pc, #88]	; (800b1b4 <PxMessagingTask+0x1294>)
 800b15c:	50a8      	str	r0, [r5, r2]
 800b15e:	e7e2      	b.n	800b126 <PxMessagingTask+0x1206>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b160:	0712      	lsls	r2, r2, #28
 800b162:	d02d      	beq.n	800b1c0 <PxMessagingTask+0x12a0>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b164:	2238      	movs	r2, #56	; 0x38
 800b166:	4362      	muls	r2, r4
 800b168:	490f      	ldr	r1, [pc, #60]	; (800b1a8 <PxMessagingTask+0x1288>)
 800b16a:	1889      	adds	r1, r1, r2
 800b16c:	4441      	add	r1, r8
 800b16e:	78ca      	ldrb	r2, [r1, #3]
 800b170:	0212      	lsls	r2, r2, #8
 800b172:	7908      	ldrb	r0, [r1, #4]
 800b174:	0400      	lsls	r0, r0, #16
 800b176:	1812      	adds	r2, r2, r0
 800b178:	7888      	ldrb	r0, [r1, #2]
 800b17a:	1812      	adds	r2, r2, r0
 800b17c:	7949      	ldrb	r1, [r1, #5]
 800b17e:	0609      	lsls	r1, r1, #24
 800b180:	1852      	adds	r2, r2, r1
 800b182:	4907      	ldr	r1, [pc, #28]	; (800b1a0 <PxMessagingTask+0x1280>)
 800b184:	600a      	str	r2, [r1, #0]
 800b186:	2000      	movs	r0, #0
 800b188:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800b18a:	601a      	str	r2, [r3, #0]
 800b18c:	e734      	b.n	800aff8 <PxMessagingTask+0x10d8>
 800b18e:	46c0      	nop			; (mov r8, r8)
 800b190:	20000f40 	.word	0x20000f40
 800b194:	20000001 	.word	0x20000001
 800b198:	20000002 	.word	0x20000002
 800b19c:	20000003 	.word	0x20000003
 800b1a0:	20001110 	.word	0x20001110
 800b1a4:	20001118 	.word	0x20001118
 800b1a8:	20000d10 	.word	0x20000d10
 800b1ac:	20000070 	.word	0x20000070
 800b1b0:	0801cf2c 	.word	0x0801cf2c
 800b1b4:	20006a30 	.word	0x20006a30
 800b1b8:	0801cf50 	.word	0x0801cf50
 800b1bc:	0000fff0 	.word	0x0000fff0
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800b1c0:	2004      	movs	r0, #4
 800b1c2:	f008 fdef 	bl	8013da4 <malloc>
 800b1c6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b1c8:	d100      	bne.n	800b1cc <PxMessagingTask+0x12ac>
 800b1ca:	e28c      	b.n	800b6e6 <PxMessagingTask+0x17c6>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b1cc:	00ad      	lsls	r5, r5, #2
 800b1ce:	0400      	lsls	r0, r0, #16
 800b1d0:	3007      	adds	r0, #7
 800b1d2:	4ad2      	ldr	r2, [pc, #840]	; (800b51c <PxMessagingTask+0x15fc>)
 800b1d4:	50a8      	str	r0, [r5, r2]
 800b1d6:	e7c5      	b.n	800b164 <PxMessagingTask+0x1244>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800b1d8:	4bd1      	ldr	r3, [pc, #836]	; (800b520 <PxMessagingTask+0x1600>)
 800b1da:	2213      	movs	r2, #19
 800b1dc:	701a      	strb	r2, [r3, #0]
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG){
 800b1de:	4bd1      	ldr	r3, [pc, #836]	; (800b524 <PxMessagingTask+0x1604>)
 800b1e0:	799b      	ldrb	r3, [r3, #6]
 800b1e2:	2240      	movs	r2, #64	; 0x40
 800b1e4:	4393      	bics	r3, r2
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	4692      	mov	sl, r2
 800b1ea:	2b20      	cmp	r3, #32
 800b1ec:	d001      	beq.n	800b1f2 <PxMessagingTask+0x12d2>
 800b1ee:	f7fe fecd 	bl	8009f8c <PxMessagingTask+0x6c>
								messageParams[0] =responseStatus;
 800b1f2:	4bcb      	ldr	r3, [pc, #812]	; (800b520 <PxMessagingTask+0x1600>)
 800b1f4:	781a      	ldrb	r2, [r3, #0]
 800b1f6:	4bcc      	ldr	r3, [pc, #816]	; (800b528 <PxMessagingTask+0x1608>)
 800b1f8:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	2121      	movs	r1, #33	; 0x21
 800b1fe:	9806      	ldr	r0, [sp, #24]
 800b200:	f7fe fbac 	bl	800995c <SendMessageToModule>
 800b204:	f7fe fec2 	bl	8009f8c <PxMessagingTask+0x6c>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800b208:	2238      	movs	r2, #56	; 0x38
 800b20a:	4362      	muls	r2, r4
 800b20c:	4bc7      	ldr	r3, [pc, #796]	; (800b52c <PxMessagingTask+0x160c>)
 800b20e:	189b      	adds	r3, r3, r2
 800b210:	195d      	adds	r5, r3, r5
 800b212:	78ab      	ldrb	r3, [r5, #2]
 800b214:	061b      	lsls	r3, r3, #24
 800b216:	78ea      	ldrb	r2, [r5, #3]
 800b218:	0412      	lsls	r2, r2, #16
 800b21a:	189b      	adds	r3, r3, r2
 800b21c:	796a      	ldrb	r2, [r5, #5]
 800b21e:	189b      	adds	r3, r3, r2
 800b220:	792d      	ldrb	r5, [r5, #4]
 800b222:	022d      	lsls	r5, r5, #8
 800b224:	195d      	adds	r5, r3, r5
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800b226:	23e0      	movs	r3, #224	; 0xe0
 800b228:	061b      	lsls	r3, r3, #24
 800b22a:	18ea      	adds	r2, r5, r3
 800b22c:	2380      	movs	r3, #128	; 0x80
 800b22e:	021b      	lsls	r3, r3, #8
 800b230:	429a      	cmp	r2, r3
 800b232:	d26e      	bcs.n	800b312 <PxMessagingTask+0x13f2>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800b234:	2238      	movs	r2, #56	; 0x38
 800b236:	4362      	muls	r2, r4
 800b238:	4bbc      	ldr	r3, [pc, #752]	; (800b52c <PxMessagingTask+0x160c>)
 800b23a:	189b      	adds	r3, r3, r2
 800b23c:	4443      	add	r3, r8
 800b23e:	785b      	ldrb	r3, [r3, #1]
 800b240:	3b01      	subs	r3, #1
 800b242:	b2da      	uxtb	r2, r3
 800b244:	2a07      	cmp	r2, #7
 800b246:	d8ca      	bhi.n	800b1de <PxMessagingTask+0x12be>
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4ab8      	ldr	r2, [pc, #736]	; (800b530 <PxMessagingTask+0x1610>)
 800b24e:	58d3      	ldr	r3, [r2, r3]
 800b250:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800b252:	2238      	movs	r2, #56	; 0x38
 800b254:	4362      	muls	r2, r4
 800b256:	4bb5      	ldr	r3, [pc, #724]	; (800b52c <PxMessagingTask+0x160c>)
 800b258:	189b      	adds	r3, r3, r2
 800b25a:	4443      	add	r3, r8
 800b25c:	799b      	ldrb	r3, [r3, #6]
 800b25e:	702b      	strb	r3, [r5, #0]
											break;
 800b260:	e7bd      	b.n	800b1de <PxMessagingTask+0x12be>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800b262:	2238      	movs	r2, #56	; 0x38
 800b264:	4362      	muls	r2, r4
 800b266:	4bb1      	ldr	r3, [pc, #708]	; (800b52c <PxMessagingTask+0x160c>)
 800b268:	189b      	adds	r3, r3, r2
 800b26a:	4443      	add	r3, r8
 800b26c:	799b      	ldrb	r3, [r3, #6]
 800b26e:	b25b      	sxtb	r3, r3
 800b270:	702b      	strb	r3, [r5, #0]
											break;
 800b272:	e7b4      	b.n	800b1de <PxMessagingTask+0x12be>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b274:	2238      	movs	r2, #56	; 0x38
 800b276:	4362      	muls	r2, r4
 800b278:	4bac      	ldr	r3, [pc, #688]	; (800b52c <PxMessagingTask+0x160c>)
 800b27a:	189b      	adds	r3, r3, r2
 800b27c:	4443      	add	r3, r8
 800b27e:	79da      	ldrb	r2, [r3, #7]
 800b280:	0212      	lsls	r2, r2, #8
 800b282:	799b      	ldrb	r3, [r3, #6]
 800b284:	189b      	adds	r3, r3, r2
 800b286:	b29b      	uxth	r3, r3
 800b288:	802b      	strh	r3, [r5, #0]
											break;
 800b28a:	e7a8      	b.n	800b1de <PxMessagingTask+0x12be>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800b28c:	2238      	movs	r2, #56	; 0x38
 800b28e:	4362      	muls	r2, r4
 800b290:	4ba6      	ldr	r3, [pc, #664]	; (800b52c <PxMessagingTask+0x160c>)
 800b292:	189b      	adds	r3, r3, r2
 800b294:	4443      	add	r3, r8
 800b296:	79da      	ldrb	r2, [r3, #7]
 800b298:	0212      	lsls	r2, r2, #8
 800b29a:	799b      	ldrb	r3, [r3, #6]
 800b29c:	189b      	adds	r3, r3, r2
 800b29e:	b21b      	sxth	r3, r3
 800b2a0:	802b      	strh	r3, [r5, #0]
											break;
 800b2a2:	e79c      	b.n	800b1de <PxMessagingTask+0x12be>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b2a4:	2338      	movs	r3, #56	; 0x38
 800b2a6:	4363      	muls	r3, r4
 800b2a8:	4aa0      	ldr	r2, [pc, #640]	; (800b52c <PxMessagingTask+0x160c>)
 800b2aa:	18d2      	adds	r2, r2, r3
 800b2ac:	4442      	add	r2, r8
 800b2ae:	79d3      	ldrb	r3, [r2, #7]
 800b2b0:	021b      	lsls	r3, r3, #8
 800b2b2:	7a11      	ldrb	r1, [r2, #8]
 800b2b4:	0409      	lsls	r1, r1, #16
 800b2b6:	185b      	adds	r3, r3, r1
 800b2b8:	7991      	ldrb	r1, [r2, #6]
 800b2ba:	185b      	adds	r3, r3, r1
 800b2bc:	7a52      	ldrb	r2, [r2, #9]
 800b2be:	0612      	lsls	r2, r2, #24
 800b2c0:	189b      	adds	r3, r3, r2
 800b2c2:	602b      	str	r3, [r5, #0]
											break;
 800b2c4:	e78b      	b.n	800b1de <PxMessagingTask+0x12be>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800b2c6:	2338      	movs	r3, #56	; 0x38
 800b2c8:	4363      	muls	r3, r4
 800b2ca:	4a98      	ldr	r2, [pc, #608]	; (800b52c <PxMessagingTask+0x160c>)
 800b2cc:	18d2      	adds	r2, r2, r3
 800b2ce:	4442      	add	r2, r8
 800b2d0:	79d3      	ldrb	r3, [r2, #7]
 800b2d2:	021b      	lsls	r3, r3, #8
 800b2d4:	7991      	ldrb	r1, [r2, #6]
 800b2d6:	185b      	adds	r3, r3, r1
 800b2d8:	7a11      	ldrb	r1, [r2, #8]
 800b2da:	0409      	lsls	r1, r1, #16
 800b2dc:	185b      	adds	r3, r3, r1
 800b2de:	7a52      	ldrb	r2, [r2, #9]
 800b2e0:	0612      	lsls	r2, r2, #24
 800b2e2:	189b      	adds	r3, r3, r2
 800b2e4:	602b      	str	r3, [r5, #0]
											break;
 800b2e6:	e77a      	b.n	800b1de <PxMessagingTask+0x12be>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b2e8:	2338      	movs	r3, #56	; 0x38
 800b2ea:	4363      	muls	r3, r4
 800b2ec:	4a8f      	ldr	r2, [pc, #572]	; (800b52c <PxMessagingTask+0x160c>)
 800b2ee:	18d2      	adds	r2, r2, r3
 800b2f0:	4442      	add	r2, r8
 800b2f2:	79d3      	ldrb	r3, [r2, #7]
 800b2f4:	021b      	lsls	r3, r3, #8
 800b2f6:	7a11      	ldrb	r1, [r2, #8]
 800b2f8:	0409      	lsls	r1, r1, #16
 800b2fa:	185b      	adds	r3, r3, r1
 800b2fc:	7991      	ldrb	r1, [r2, #6]
 800b2fe:	185b      	adds	r3, r3, r1
 800b300:	7a52      	ldrb	r2, [r2, #9]
 800b302:	0612      	lsls	r2, r2, #24
 800b304:	189b      	adds	r3, r3, r2
 800b306:	4a8b      	ldr	r2, [pc, #556]	; (800b534 <PxMessagingTask+0x1614>)
 800b308:	6013      	str	r3, [r2, #0]
 800b30a:	2100      	movs	r1, #0
 800b30c:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800b30e:	602b      	str	r3, [r5, #0]
											break;
 800b310:	e765      	b.n	800b1de <PxMessagingTask+0x12be>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800b312:	2280      	movs	r2, #128	; 0x80
 800b314:	0292      	lsls	r2, r2, #10
 800b316:	23f8      	movs	r3, #248	; 0xf8
 800b318:	061b      	lsls	r3, r3, #24
 800b31a:	18eb      	adds	r3, r5, r3
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d303      	bcc.n	800b328 <PxMessagingTask+0x1408>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b320:	4b7f      	ldr	r3, [pc, #508]	; (800b520 <PxMessagingTask+0x1600>)
 800b322:	2215      	movs	r2, #21
 800b324:	701a      	strb	r2, [r3, #0]
 800b326:	e75a      	b.n	800b1de <PxMessagingTask+0x12be>
									HAL_FLASH_Unlock();
 800b328:	f006 fcc4 	bl	8011cb4 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800b32c:	464b      	mov	r3, r9
 800b32e:	2b22      	cmp	r3, #34	; 0x22
 800b330:	d012      	beq.n	800b358 <PxMessagingTask+0x1438>
									if(responseStatus == BOS_OK){
 800b332:	4b7b      	ldr	r3, [pc, #492]	; (800b520 <PxMessagingTask+0x1600>)
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d129      	bne.n	800b38e <PxMessagingTask+0x146e>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800b33a:	2238      	movs	r2, #56	; 0x38
 800b33c:	4362      	muls	r2, r4
 800b33e:	4b7b      	ldr	r3, [pc, #492]	; (800b52c <PxMessagingTask+0x160c>)
 800b340:	189b      	adds	r3, r3, r2
 800b342:	4443      	add	r3, r8
 800b344:	785b      	ldrb	r3, [r3, #1]
 800b346:	3b01      	subs	r3, #1
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	2a07      	cmp	r2, #7
 800b34c:	d81f      	bhi.n	800b38e <PxMessagingTask+0x146e>
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4a79      	ldr	r2, [pc, #484]	; (800b538 <PxMessagingTask+0x1618>)
 800b354:	58d3      	ldr	r3, [r2, r3]
 800b356:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b358:	2300      	movs	r3, #0
 800b35a:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress =temp32;
 800b35c:	9514      	str	r5, [sp, #80]	; 0x50
										erase.NbPages =1;
 800b35e:	3301      	adds	r3, #1
 800b360:	9315      	str	r3, [sp, #84]	; 0x54
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b362:	a912      	add	r1, sp, #72	; 0x48
 800b364:	a813      	add	r0, sp, #76	; 0x4c
 800b366:	f006 fd7b 	bl	8011e60 <HAL_FLASHEx_Erase>
 800b36a:	900b      	str	r0, [sp, #44]	; 0x2c
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d102      	bne.n	800b376 <PxMessagingTask+0x1456>
 800b370:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b372:	3301      	adds	r3, #1
 800b374:	d0dd      	beq.n	800b332 <PxMessagingTask+0x1412>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b376:	4b6a      	ldr	r3, [pc, #424]	; (800b520 <PxMessagingTask+0x1600>)
 800b378:	2216      	movs	r2, #22
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	e7d9      	b.n	800b332 <PxMessagingTask+0x1412>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b37e:	882b      	ldrh	r3, [r5, #0]
 800b380:	b29b      	uxth	r3, r3
 800b382:	4a6e      	ldr	r2, [pc, #440]	; (800b53c <PxMessagingTask+0x161c>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d00c      	beq.n	800b3a2 <PxMessagingTask+0x1482>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b388:	4b65      	ldr	r3, [pc, #404]	; (800b520 <PxMessagingTask+0x1600>)
 800b38a:	2216      	movs	r2, #22
 800b38c:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800b38e:	f006 fca5 	bl	8011cdc <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d100      	bne.n	800b39a <PxMessagingTask+0x147a>
 800b398:	e721      	b.n	800b1de <PxMessagingTask+0x12be>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b39a:	4b61      	ldr	r3, [pc, #388]	; (800b520 <PxMessagingTask+0x1600>)
 800b39c:	2216      	movs	r2, #22
 800b39e:	701a      	strb	r2, [r3, #0]
 800b3a0:	e71d      	b.n	800b1de <PxMessagingTask+0x12be>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b3a2:	2238      	movs	r2, #56	; 0x38
 800b3a4:	4362      	muls	r2, r4
 800b3a6:	4b61      	ldr	r3, [pc, #388]	; (800b52c <PxMessagingTask+0x160c>)
 800b3a8:	189b      	adds	r3, r3, r2
 800b3aa:	4443      	add	r3, r8
 800b3ac:	799a      	ldrb	r2, [r3, #6]
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	4960      	ldr	r1, [pc, #384]	; (800b534 <PxMessagingTask+0x1614>)
 800b3b2:	600a      	str	r2, [r1, #0]
 800b3b4:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b3b6:	0029      	movs	r1, r5
 800b3b8:	2001      	movs	r0, #1
 800b3ba:	f006 fcc7 	bl	8011d4c <HAL_FLASH_Program>
 800b3be:	900b      	str	r0, [sp, #44]	; 0x2c
													break;
 800b3c0:	e7e5      	b.n	800b38e <PxMessagingTask+0x146e>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b3c2:	882b      	ldrh	r3, [r5, #0]
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	4a5d      	ldr	r2, [pc, #372]	; (800b53c <PxMessagingTask+0x161c>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d003      	beq.n	800b3d4 <PxMessagingTask+0x14b4>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b3cc:	4b54      	ldr	r3, [pc, #336]	; (800b520 <PxMessagingTask+0x1600>)
 800b3ce:	2216      	movs	r2, #22
 800b3d0:	701a      	strb	r2, [r3, #0]
													break;
 800b3d2:	e7dc      	b.n	800b38e <PxMessagingTask+0x146e>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b3d4:	2238      	movs	r2, #56	; 0x38
 800b3d6:	4362      	muls	r2, r4
 800b3d8:	4b54      	ldr	r3, [pc, #336]	; (800b52c <PxMessagingTask+0x160c>)
 800b3da:	189b      	adds	r3, r3, r2
 800b3dc:	4443      	add	r3, r8
 800b3de:	79da      	ldrb	r2, [r3, #7]
 800b3e0:	0212      	lsls	r2, r2, #8
 800b3e2:	799b      	ldrb	r3, [r3, #6]
 800b3e4:	18d2      	adds	r2, r2, r3
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4952      	ldr	r1, [pc, #328]	; (800b534 <PxMessagingTask+0x1614>)
 800b3ea:	600a      	str	r2, [r1, #0]
 800b3ec:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b3ee:	0029      	movs	r1, r5
 800b3f0:	2001      	movs	r0, #1
 800b3f2:	f006 fcab 	bl	8011d4c <HAL_FLASH_Program>
 800b3f6:	900b      	str	r0, [sp, #44]	; 0x2c
													break;
 800b3f8:	e7c9      	b.n	800b38e <PxMessagingTask+0x146e>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b3fa:	682b      	ldr	r3, [r5, #0]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	d003      	beq.n	800b408 <PxMessagingTask+0x14e8>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b400:	4b47      	ldr	r3, [pc, #284]	; (800b520 <PxMessagingTask+0x1600>)
 800b402:	2216      	movs	r2, #22
 800b404:	701a      	strb	r2, [r3, #0]
													break;
 800b406:	e7c2      	b.n	800b38e <PxMessagingTask+0x146e>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b408:	2238      	movs	r2, #56	; 0x38
 800b40a:	4362      	muls	r2, r4
 800b40c:	4b47      	ldr	r3, [pc, #284]	; (800b52c <PxMessagingTask+0x160c>)
 800b40e:	189b      	adds	r3, r3, r2
 800b410:	4443      	add	r3, r8
 800b412:	79da      	ldrb	r2, [r3, #7]
 800b414:	0212      	lsls	r2, r2, #8
 800b416:	7a19      	ldrb	r1, [r3, #8]
 800b418:	0409      	lsls	r1, r1, #16
 800b41a:	1852      	adds	r2, r2, r1
 800b41c:	7999      	ldrb	r1, [r3, #6]
 800b41e:	1852      	adds	r2, r2, r1
 800b420:	7a5b      	ldrb	r3, [r3, #9]
 800b422:	061b      	lsls	r3, r3, #24
 800b424:	18d2      	adds	r2, r2, r3
 800b426:	2300      	movs	r3, #0
 800b428:	4942      	ldr	r1, [pc, #264]	; (800b534 <PxMessagingTask+0x1614>)
 800b42a:	600a      	str	r2, [r1, #0]
 800b42c:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b42e:	0029      	movs	r1, r5
 800b430:	2002      	movs	r0, #2
 800b432:	f006 fc8b 	bl	8011d4c <HAL_FLASH_Program>
 800b436:	900b      	str	r0, [sp, #44]	; 0x2c
													break;
 800b438:	e7a9      	b.n	800b38e <PxMessagingTask+0x146e>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b43a:	682b      	ldr	r3, [r5, #0]
 800b43c:	3301      	adds	r3, #1
 800b43e:	d003      	beq.n	800b448 <PxMessagingTask+0x1528>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b440:	4b37      	ldr	r3, [pc, #220]	; (800b520 <PxMessagingTask+0x1600>)
 800b442:	2216      	movs	r2, #22
 800b444:	701a      	strb	r2, [r3, #0]
													break;
 800b446:	e7a2      	b.n	800b38e <PxMessagingTask+0x146e>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b448:	2238      	movs	r2, #56	; 0x38
 800b44a:	4362      	muls	r2, r4
 800b44c:	4b37      	ldr	r3, [pc, #220]	; (800b52c <PxMessagingTask+0x160c>)
 800b44e:	189b      	adds	r3, r3, r2
 800b450:	4443      	add	r3, r8
 800b452:	79da      	ldrb	r2, [r3, #7]
 800b454:	0212      	lsls	r2, r2, #8
 800b456:	7a19      	ldrb	r1, [r3, #8]
 800b458:	0409      	lsls	r1, r1, #16
 800b45a:	1852      	adds	r2, r2, r1
 800b45c:	7999      	ldrb	r1, [r3, #6]
 800b45e:	1852      	adds	r2, r2, r1
 800b460:	7a5b      	ldrb	r3, [r3, #9]
 800b462:	061b      	lsls	r3, r3, #24
 800b464:	18d2      	adds	r2, r2, r3
 800b466:	2300      	movs	r3, #0
 800b468:	4932      	ldr	r1, [pc, #200]	; (800b534 <PxMessagingTask+0x1614>)
 800b46a:	600a      	str	r2, [r1, #0]
 800b46c:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b46e:	0029      	movs	r1, r5
 800b470:	2003      	movs	r0, #3
 800b472:	f006 fc6b 	bl	8011d4c <HAL_FLASH_Program>
 800b476:	900b      	str	r0, [sp, #44]	; 0x2c
													break;
 800b478:	e789      	b.n	800b38e <PxMessagingTask+0x146e>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b47a:	4b2c      	ldr	r3, [pc, #176]	; (800b52c <PxMessagingTask+0x160c>)
 800b47c:	199b      	adds	r3, r3, r6
 800b47e:	5d5a      	ldrb	r2, [r3, r5]
 800b480:	4b27      	ldr	r3, [pc, #156]	; (800b520 <PxMessagingTask+0x1600>)
 800b482:	701a      	strb	r2, [r3, #0]
							break;
 800b484:	2300      	movs	r3, #0
 800b486:	469a      	mov	sl, r3
 800b488:	f7fe fd80 	bl	8009f8c <PxMessagingTask+0x6c>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b48c:	4652      	mov	r2, sl
 800b48e:	3a01      	subs	r2, #1
 800b490:	b292      	uxth	r2, r2
 800b492:	1c69      	adds	r1, r5, #1
 800b494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b496:	469c      	mov	ip, r3
 800b498:	4461      	add	r1, ip
 800b49a:	4b24      	ldr	r3, [pc, #144]	; (800b52c <PxMessagingTask+0x160c>)
 800b49c:	18c9      	adds	r1, r1, r3
 800b49e:	199b      	adds	r3, r3, r6
 800b4a0:	5d58      	ldrb	r0, [r3, r5]
 800b4a2:	230a      	movs	r3, #10
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	f002 ff47 	bl	800e338 <writePxMutex>
							break;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	469a      	mov	sl, r3
 800b4ae:	f7fe fd6d 	bl	8009f8c <PxMessagingTask+0x6c>
							switch(cMessage[port - 1][0 + shift]){
 800b4b2:	9505      	str	r5, [sp, #20]
 800b4b4:	4b1d      	ldr	r3, [pc, #116]	; (800b52c <PxMessagingTask+0x160c>)
 800b4b6:	199b      	adds	r3, r3, r6
 800b4b8:	5d58      	ldrb	r0, [r3, r5]
 800b4ba:	282b      	cmp	r0, #43	; 0x2b
 800b4bc:	d900      	bls.n	800b4c0 <PxMessagingTask+0x15a0>
 800b4be:	e0bb      	b.n	800b638 <PxMessagingTask+0x1718>
 800b4c0:	0083      	lsls	r3, r0, #2
 800b4c2:	4a1f      	ldr	r2, [pc, #124]	; (800b540 <PxMessagingTask+0x1620>)
 800b4c4:	58d3      	ldr	r3, [r2, r3]
 800b4c6:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b4c8:	2238      	movs	r2, #56	; 0x38
 800b4ca:	4362      	muls	r2, r4
 800b4cc:	4b17      	ldr	r3, [pc, #92]	; (800b52c <PxMessagingTask+0x160c>)
 800b4ce:	189b      	adds	r3, r3, r2
 800b4d0:	9a05      	ldr	r2, [sp, #20]
 800b4d2:	4694      	mov	ip, r2
 800b4d4:	4463      	add	r3, ip
 800b4d6:	789a      	ldrb	r2, [r3, #2]
 800b4d8:	0212      	lsls	r2, r2, #8
 800b4da:	78d9      	ldrb	r1, [r3, #3]
 800b4dc:	0409      	lsls	r1, r1, #16
 800b4de:	1852      	adds	r2, r2, r1
 800b4e0:	7859      	ldrb	r1, [r3, #1]
 800b4e2:	1852      	adds	r2, r2, r1
 800b4e4:	7919      	ldrb	r1, [r3, #4]
 800b4e6:	0609      	lsls	r1, r1, #24
 800b4e8:	1852      	adds	r2, r2, r1
 800b4ea:	4916      	ldr	r1, [pc, #88]	; (800b544 <PxMessagingTask+0x1624>)
 800b4ec:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b4ee:	799a      	ldrb	r2, [r3, #6]
 800b4f0:	0212      	lsls	r2, r2, #8
 800b4f2:	79d8      	ldrb	r0, [r3, #7]
 800b4f4:	0400      	lsls	r0, r0, #16
 800b4f6:	1812      	adds	r2, r2, r0
 800b4f8:	7958      	ldrb	r0, [r3, #5]
 800b4fa:	1812      	adds	r2, r2, r0
 800b4fc:	7a18      	ldrb	r0, [r3, #8]
 800b4fe:	0600      	lsls	r0, r0, #24
 800b500:	1812      	adds	r2, r2, r0
 800b502:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b504:	7a9a      	ldrb	r2, [r3, #10]
 800b506:	0212      	lsls	r2, r2, #8
 800b508:	7ad8      	ldrb	r0, [r3, #11]
 800b50a:	0400      	lsls	r0, r0, #16
 800b50c:	1812      	adds	r2, r2, r0
 800b50e:	7a58      	ldrb	r0, [r3, #9]
 800b510:	1812      	adds	r2, r2, r0
 800b512:	7b1b      	ldrb	r3, [r3, #12]
 800b514:	061b      	lsls	r3, r3, #24
 800b516:	18d3      	adds	r3, r2, r3
 800b518:	608b      	str	r3, [r1, #8]
									break;
 800b51a:	e08d      	b.n	800b638 <PxMessagingTask+0x1718>
 800b51c:	20006a30 	.word	0x20006a30
 800b520:	20001118 	.word	0x20001118
 800b524:	20006aa8 	.word	0x20006aa8
 800b528:	20000f40 	.word	0x20000f40
 800b52c:	20000d10 	.word	0x20000d10
 800b530:	0801cf70 	.word	0x0801cf70
 800b534:	20001110 	.word	0x20001110
 800b538:	0801cf90 	.word	0x0801cf90
 800b53c:	0000ffff 	.word	0x0000ffff
 800b540:	0801cfb0 	.word	0x0801cfb0
 800b544:	200015d4 	.word	0x200015d4
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b548:	2238      	movs	r2, #56	; 0x38
 800b54a:	4362      	muls	r2, r4
 800b54c:	4b72      	ldr	r3, [pc, #456]	; (800b718 <PxMessagingTask+0x17f8>)
 800b54e:	189b      	adds	r3, r3, r2
 800b550:	9a05      	ldr	r2, [sp, #20]
 800b552:	4694      	mov	ip, r2
 800b554:	4463      	add	r3, ip
 800b556:	789a      	ldrb	r2, [r3, #2]
 800b558:	0212      	lsls	r2, r2, #8
 800b55a:	78d9      	ldrb	r1, [r3, #3]
 800b55c:	0409      	lsls	r1, r1, #16
 800b55e:	1852      	adds	r2, r2, r1
 800b560:	7859      	ldrb	r1, [r3, #1]
 800b562:	1852      	adds	r2, r2, r1
 800b564:	7919      	ldrb	r1, [r3, #4]
 800b566:	0609      	lsls	r1, r1, #24
 800b568:	1852      	adds	r2, r2, r1
 800b56a:	496c      	ldr	r1, [pc, #432]	; (800b71c <PxMessagingTask+0x17fc>)
 800b56c:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b56e:	799a      	ldrb	r2, [r3, #6]
 800b570:	0212      	lsls	r2, r2, #8
 800b572:	79d8      	ldrb	r0, [r3, #7]
 800b574:	0400      	lsls	r0, r0, #16
 800b576:	1812      	adds	r2, r2, r0
 800b578:	7958      	ldrb	r0, [r3, #5]
 800b57a:	1812      	adds	r2, r2, r0
 800b57c:	7a18      	ldrb	r0, [r3, #8]
 800b57e:	0600      	lsls	r0, r0, #24
 800b580:	1812      	adds	r2, r2, r0
 800b582:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b584:	7a9a      	ldrb	r2, [r3, #10]
 800b586:	0212      	lsls	r2, r2, #8
 800b588:	7ad8      	ldrb	r0, [r3, #11]
 800b58a:	0400      	lsls	r0, r0, #16
 800b58c:	1812      	adds	r2, r2, r0
 800b58e:	7a58      	ldrb	r0, [r3, #9]
 800b590:	1812      	adds	r2, r2, r0
 800b592:	7b1b      	ldrb	r3, [r3, #12]
 800b594:	061b      	lsls	r3, r3, #24
 800b596:	18d3      	adds	r3, r2, r3
 800b598:	614b      	str	r3, [r1, #20]
									break;
 800b59a:	e04d      	b.n	800b638 <PxMessagingTask+0x1718>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b59c:	2338      	movs	r3, #56	; 0x38
 800b59e:	4363      	muls	r3, r4
 800b5a0:	4a5d      	ldr	r2, [pc, #372]	; (800b718 <PxMessagingTask+0x17f8>)
 800b5a2:	18d2      	adds	r2, r2, r3
 800b5a4:	9b05      	ldr	r3, [sp, #20]
 800b5a6:	469c      	mov	ip, r3
 800b5a8:	4462      	add	r2, ip
 800b5aa:	7893      	ldrb	r3, [r2, #2]
 800b5ac:	021b      	lsls	r3, r3, #8
 800b5ae:	78d1      	ldrb	r1, [r2, #3]
 800b5b0:	0409      	lsls	r1, r1, #16
 800b5b2:	185b      	adds	r3, r3, r1
 800b5b4:	7851      	ldrb	r1, [r2, #1]
 800b5b6:	185b      	adds	r3, r3, r1
 800b5b8:	7912      	ldrb	r2, [r2, #4]
 800b5ba:	0612      	lsls	r2, r2, #24
 800b5bc:	189b      	adds	r3, r3, r2
 800b5be:	4a57      	ldr	r2, [pc, #348]	; (800b71c <PxMessagingTask+0x17fc>)
 800b5c0:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b5c2:	4b57      	ldr	r3, [pc, #348]	; (800b720 <PxMessagingTask+0x1800>)
 800b5c4:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b5c6:	2238      	movs	r2, #56	; 0x38
 800b5c8:	4362      	muls	r2, r4
 800b5ca:	4b53      	ldr	r3, [pc, #332]	; (800b718 <PxMessagingTask+0x17f8>)
 800b5cc:	189b      	adds	r3, r3, r2
 800b5ce:	9a05      	ldr	r2, [sp, #20]
 800b5d0:	4694      	mov	ip, r2
 800b5d2:	4463      	add	r3, ip
 800b5d4:	785b      	ldrb	r3, [r3, #1]
 800b5d6:	4a53      	ldr	r2, [pc, #332]	; (800b724 <PxMessagingTask+0x1804>)
 800b5d8:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d042      	beq.n	800b664 <PxMessagingTask+0x1744>
									else if(1 == ADCSide){
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d04c      	beq.n	800b67c <PxMessagingTask+0x175c>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b5e2:	4951      	ldr	r1, [pc, #324]	; (800b728 <PxMessagingTask+0x1808>)
 800b5e4:	4851      	ldr	r0, [pc, #324]	; (800b72c <PxMessagingTask+0x180c>)
 800b5e6:	f7fd fa33 	bl	8008a50 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b5ea:	2338      	movs	r3, #56	; 0x38
 800b5ec:	4363      	muls	r3, r4
 800b5ee:	4a4a      	ldr	r2, [pc, #296]	; (800b718 <PxMessagingTask+0x17f8>)
 800b5f0:	4692      	mov	sl, r2
 800b5f2:	449a      	add	sl, r3
 800b5f4:	4652      	mov	r2, sl
 800b5f6:	9b05      	ldr	r3, [sp, #20]
 800b5f8:	5cd0      	ldrb	r0, [r2, r3]
 800b5fa:	4b49      	ldr	r3, [pc, #292]	; (800b720 <PxMessagingTask+0x1800>)
 800b5fc:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b5fe:	494c      	ldr	r1, [pc, #304]	; (800b730 <PxMessagingTask+0x1810>)
 800b600:	f7fd fae8 	bl	8008bd4 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b604:	9b05      	ldr	r3, [sp, #20]
 800b606:	4453      	add	r3, sl
 800b608:	0019      	movs	r1, r3
 800b60a:	799b      	ldrb	r3, [r3, #6]
 800b60c:	021b      	lsls	r3, r3, #8
 800b60e:	79ca      	ldrb	r2, [r1, #7]
 800b610:	0412      	lsls	r2, r2, #16
 800b612:	189b      	adds	r3, r3, r2
 800b614:	794a      	ldrb	r2, [r1, #5]
 800b616:	189b      	adds	r3, r3, r2
 800b618:	7a0a      	ldrb	r2, [r1, #8]
 800b61a:	0612      	lsls	r2, r2, #24
 800b61c:	189b      	adds	r3, r3, r2
 800b61e:	4a3f      	ldr	r2, [pc, #252]	; (800b71c <PxMessagingTask+0x17fc>)
 800b620:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b622:	7a8b      	ldrb	r3, [r1, #10]
 800b624:	021b      	lsls	r3, r3, #8
 800b626:	7ac8      	ldrb	r0, [r1, #11]
 800b628:	0400      	lsls	r0, r0, #16
 800b62a:	181b      	adds	r3, r3, r0
 800b62c:	7a48      	ldrb	r0, [r1, #9]
 800b62e:	181b      	adds	r3, r3, r0
 800b630:	7b09      	ldrb	r1, [r1, #12]
 800b632:	0609      	lsls	r1, r1, #24
 800b634:	185b      	adds	r3, r3, r1
 800b636:	6213      	str	r3, [r2, #32]
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b638:	9500      	str	r5, [sp, #0]
 800b63a:	4643      	mov	r3, r8
 800b63c:	9a06      	ldr	r2, [sp, #24]
 800b63e:	9908      	ldr	r1, [sp, #32]
 800b640:	4648      	mov	r0, r9
 800b642:	f7fe fc6b 	bl	8009f1c <User_MessagingParser>
 800b646:	4682      	mov	sl, r0
							if(result == BOS_ERR_UnknownMessage){
 800b648:	2801      	cmp	r0, #1
 800b64a:	d001      	beq.n	800b650 <PxMessagingTask+0x1730>
 800b64c:	f7fe fc9e 	bl	8009f8c <PxMessagingTask+0x6c>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b650:	9500      	str	r5, [sp, #0]
 800b652:	4643      	mov	r3, r8
 800b654:	9a06      	ldr	r2, [sp, #24]
 800b656:	9908      	ldr	r1, [sp, #32]
 800b658:	4648      	mov	r0, r9
 800b65a:	f000 fef1 	bl	800c440 <Module_MessagingTask>
 800b65e:	4682      	mov	sl, r0
 800b660:	f7fe fc8f 	bl	8009f82 <PxMessagingTask+0x62>
										ADCSelectChannel(ADCPort,"top");
 800b664:	4b33      	ldr	r3, [pc, #204]	; (800b734 <PxMessagingTask+0x1814>)
 800b666:	469a      	mov	sl, r3
 800b668:	0019      	movs	r1, r3
 800b66a:	f7fd fb7d 	bl	8008d68 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b66e:	4b2c      	ldr	r3, [pc, #176]	; (800b720 <PxMessagingTask+0x1800>)
 800b670:	7818      	ldrb	r0, [r3, #0]
 800b672:	4a31      	ldr	r2, [pc, #196]	; (800b738 <PxMessagingTask+0x1818>)
 800b674:	4651      	mov	r1, sl
 800b676:	f7fd fba5 	bl	8008dc4 <ReadADCChannel>
 800b67a:	e7b2      	b.n	800b5e2 <PxMessagingTask+0x16c2>
										ADCSelectChannel(ADCPort,"bottom");
 800b67c:	4b2f      	ldr	r3, [pc, #188]	; (800b73c <PxMessagingTask+0x181c>)
 800b67e:	469a      	mov	sl, r3
 800b680:	0019      	movs	r1, r3
 800b682:	f7fd fb71 	bl	8008d68 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b686:	4b26      	ldr	r3, [pc, #152]	; (800b720 <PxMessagingTask+0x1800>)
 800b688:	7818      	ldrb	r0, [r3, #0]
 800b68a:	4a2b      	ldr	r2, [pc, #172]	; (800b738 <PxMessagingTask+0x1818>)
 800b68c:	4651      	mov	r1, sl
 800b68e:	f7fd fb99 	bl	8008dc4 <ReadADCChannel>
 800b692:	e7a6      	b.n	800b5e2 <PxMessagingTask+0x16c2>
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b694:	2300      	movs	r3, #0
 800b696:	469a      	mov	sl, r3
 800b698:	f7fe fc73 	bl	8009f82 <PxMessagingTask+0x62>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800b69c:	2300      	movs	r3, #0
 800b69e:	469a      	mov	sl, r3
 800b6a0:	f7fe fc6f 	bl	8009f82 <PxMessagingTask+0x62>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	9806      	ldr	r0, [sp, #24]
 800b6aa:	f7fe f957 	bl	800995c <SendMessageToModule>
			result =BOS_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	469a      	mov	sl, r3
 800b6b2:	f7fe fc6b 	bl	8009f8c <PxMessagingTask+0x6c>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	469a      	mov	sl, r3
 800b6ba:	f7fe fc67 	bl	8009f8c <PxMessagingTask+0x6c>
								}
 800b6be:	2300      	movs	r3, #0
 800b6c0:	469a      	mov	sl, r3
 800b6c2:	f7fe fc63 	bl	8009f8c <PxMessagingTask+0x6c>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	469a      	mov	sl, r3
 800b6ca:	f7fe fc5f 	bl	8009f8c <PxMessagingTask+0x6c>
 800b6ce:	4661      	mov	r1, ip
				shift +=4;
 800b6d0:	9d05      	ldr	r5, [sp, #20]
 800b6d2:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 800b6d4:	1b48      	subs	r0, r1, r5
 800b6d6:	b2c3      	uxtb	r3, r0
 800b6d8:	469a      	mov	sl, r3
				if(result == BOS_OK){
 800b6da:	f7fe fd19 	bl	800a110 <PxMessagingTask+0x1f0>
					result =BOS_ERR_WrongID;
 800b6de:	2366      	movs	r3, #102	; 0x66
 800b6e0:	469a      	mov	sl, r3
		if(result == BOS_ERR_UnknownMessage){
 800b6e2:	f7fe fc53 	bl	8009f8c <PxMessagingTask+0x6c>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b6e6:	2338      	movs	r3, #56	; 0x38
 800b6e8:	4363      	muls	r3, r4
 800b6ea:	4a0b      	ldr	r2, [pc, #44]	; (800b718 <PxMessagingTask+0x17f8>)
 800b6ec:	18d2      	adds	r2, r2, r3
 800b6ee:	4643      	mov	r3, r8
 800b6f0:	5cd3      	ldrb	r3, [r2, r3]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	0098      	lsls	r0, r3, #2
 800b6f6:	4912      	ldr	r1, [pc, #72]	; (800b740 <PxMessagingTask+0x1820>)
 800b6f8:	5841      	ldr	r1, [r0, r1]
 800b6fa:	4648      	mov	r0, r9
 800b6fc:	5c12      	ldrb	r2, [r2, r0]
 800b6fe:	e48c      	b.n	800b01a <PxMessagingTask+0x10fa>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800b700:	4543      	cmp	r3, r8
 800b702:	d101      	bne.n	800b708 <PxMessagingTask+0x17e8>
 800b704:	f7fe fcf9 	bl	800a0fa <PxMessagingTask+0x1da>
 800b708:	464b      	mov	r3, r9
 800b70a:	2b10      	cmp	r3, #16
 800b70c:	d001      	beq.n	800b712 <PxMessagingTask+0x17f2>
 800b70e:	f7fe fc87 	bl	800a020 <PxMessagingTask+0x100>
 800b712:	f7fe fcf2 	bl	800a0fa <PxMessagingTask+0x1da>
 800b716:	46c0      	nop			; (mov r8, r8)
 800b718:	20000d10 	.word	0x20000d10
 800b71c:	200015d4 	.word	0x200015d4
 800b720:	200015c4 	.word	0x200015c4
 800b724:	200015c6 	.word	0x200015c6
 800b728:	200015d0 	.word	0x200015d0
 800b72c:	200015cc 	.word	0x200015cc
 800b730:	200015c0 	.word	0x200015c0
 800b734:	0801b020 	.word	0x0801b020
 800b738:	200015c8 	.word	0x200015c8
 800b73c:	0801b024 	.word	0x0801b024
 800b740:	20006a30 	.word	0x20006a30

0800b744 <btGetInfoCommand>:
/* -----------------------------------------------------------------------
	|															Commands																 	|
   -----------------------------------------------------------------------
*/
static portBASE_TYPE btGetInfoCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b744:	b510      	push	{r4, lr}
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800b746:	2800      	cmp	r0, #0
 800b748:	d005      	beq.n	800b756 <btGetInfoCommand+0x12>

	/* Get information from the BT900 */

	sprintf( ( char * ) pcWriteBuffer, "Get BT900 module information \r\n");
 800b74a:	2220      	movs	r2, #32
 800b74c:	4903      	ldr	r1, [pc, #12]	; (800b75c <btGetInfoCommand+0x18>)
 800b74e:	f008 fd5f 	bl	8014210 <memcpy>


	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800b752:	2000      	movs	r0, #0
 800b754:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800b756:	b672      	cpsid	i
 800b758:	e7fe      	b.n	800b758 <btGetInfoCommand+0x14>
 800b75a:	46c0      	nop			; (mov r8, r8)
 800b75c:	0801d060 	.word	0x0801d060

0800b760 <SystemClock_Config>:
{
 800b760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b762:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b764:	2401      	movs	r4, #1
 800b766:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b768:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b76a:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b76c:	2310      	movs	r3, #16
 800b76e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b770:	2702      	movs	r7, #2
 800b772:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b774:	2680      	movs	r6, #128	; 0x80
 800b776:	0276      	lsls	r6, r6, #9
 800b778:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b77a:	2380      	movs	r3, #128	; 0x80
 800b77c:	035b      	lsls	r3, r3, #13
 800b77e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b780:	2500      	movs	r5, #0
 800b782:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b784:	a80d      	add	r0, sp, #52	; 0x34
 800b786:	f006 fd67 	bl	8012258 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b78a:	2307      	movs	r3, #7
 800b78c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b78e:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b790:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b792:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b794:	2101      	movs	r1, #1
 800b796:	a809      	add	r0, sp, #36	; 0x24
 800b798:	f007 f822 	bl	80127e0 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b79c:	4b1a      	ldr	r3, [pc, #104]	; (800b808 <SystemClock_Config+0xa8>)
 800b79e:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b7a0:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b7a2:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b7a4:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b7a6:	a802      	add	r0, sp, #8
 800b7a8:	f007 f9ca 	bl	8012b40 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b7ac:	4d17      	ldr	r5, [pc, #92]	; (800b80c <SystemClock_Config+0xac>)
 800b7ae:	69ea      	ldr	r2, [r5, #28]
 800b7b0:	2180      	movs	r1, #128	; 0x80
 800b7b2:	0549      	lsls	r1, r1, #21
 800b7b4:	430a      	orrs	r2, r1
 800b7b6:	61ea      	str	r2, [r5, #28]
 800b7b8:	69eb      	ldr	r3, [r5, #28]
 800b7ba:	400b      	ands	r3, r1
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b7c0:	f006 fd40 	bl	8012244 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b7c4:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b7c6:	23c0      	movs	r3, #192	; 0xc0
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b7cc:	a802      	add	r0, sp, #8
 800b7ce:	f007 f9b7 	bl	8012b40 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b7d2:	f007 f991 	bl	8012af8 <HAL_RCC_GetHCLKFreq>
 800b7d6:	21fa      	movs	r1, #250	; 0xfa
 800b7d8:	0089      	lsls	r1, r1, #2
 800b7da:	f7f4 fcb9 	bl	8000150 <__udivsi3>
 800b7de:	f005 fc11 	bl	8011004 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b7e2:	2004      	movs	r0, #4
 800b7e4:	f005 fc2a 	bl	801103c <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800b7e8:	69ab      	ldr	r3, [r5, #24]
 800b7ea:	4323      	orrs	r3, r4
 800b7ec:	61ab      	str	r3, [r5, #24]
 800b7ee:	69ab      	ldr	r3, [r5, #24]
 800b7f0:	401c      	ands	r4, r3
 800b7f2:	9401      	str	r4, [sp, #4]
 800b7f4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b7f6:	2001      	movs	r0, #1
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	4240      	negs	r0, r0
 800b7fe:	f005 fbbb 	bl	8010f78 <HAL_NVIC_SetPriority>
}
 800b802:	b01b      	add	sp, #108	; 0x6c
 800b804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b806:	46c0      	nop			; (mov r8, r8)
 800b808:	00040003 	.word	0x00040003
 800b80c:	40021000 	.word	0x40021000

0800b810 <SaveToRO>:
{
 800b810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b812:	46de      	mov	lr, fp
 800b814:	4657      	mov	r7, sl
 800b816:	464e      	mov	r6, r9
 800b818:	4645      	mov	r5, r8
 800b81a:	b5e0      	push	{r5, r6, r7, lr}
 800b81c:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b81e:	2300      	movs	r3, #0
 800b820:	9302      	str	r3, [sp, #8]
 800b822:	2211      	movs	r2, #17
 800b824:	2100      	movs	r1, #0
 800b826:	a803      	add	r0, sp, #12
 800b828:	f008 fcfb 	bl	8014222 <memset>
	HAL_FLASH_Unlock();
 800b82c:	f006 fa42 	bl	8011cb4 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b830:	487c      	ldr	r0, [pc, #496]	; (800ba24 <SaveToRO+0x214>)
 800b832:	f006 fb03 	bl	8011e3c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b836:	487c      	ldr	r0, [pc, #496]	; (800ba28 <SaveToRO+0x218>)
 800b838:	f006 fa5a 	bl	8011cf0 <FLASH_WaitForLastOperation>
 800b83c:	9000      	str	r0, [sp, #0]
 800b83e:	9001      	str	r0, [sp, #4]
	if(FlashStatus != HAL_OK) {
 800b840:	2800      	cmp	r0, #0
 800b842:	d112      	bne.n	800b86a <SaveToRO+0x5a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b844:	4a79      	ldr	r2, [pc, #484]	; (800ba2c <SaveToRO+0x21c>)
 800b846:	6913      	ldr	r3, [r2, #16]
 800b848:	2102      	movs	r1, #2
 800b84a:	438b      	bics	r3, r1
 800b84c:	6113      	str	r3, [r2, #16]
	if (myID)
 800b84e:	4b78      	ldr	r3, [pc, #480]	; (800ba30 <SaveToRO+0x220>)
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d115      	bne.n	800b882 <SaveToRO+0x72>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b856:	4b77      	ldr	r3, [pc, #476]	; (800ba34 <SaveToRO+0x224>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d100      	bne.n	800b860 <SaveToRO+0x50>
 800b85e:	e0dd      	b.n	800ba1c <SaveToRO+0x20c>
 800b860:	9d00      	ldr	r5, [sp, #0]
 800b862:	4e75      	ldr	r6, [pc, #468]	; (800ba38 <SaveToRO+0x228>)
		if (snippets[s].cond.conditionType) 
 800b864:	4b75      	ldr	r3, [pc, #468]	; (800ba3c <SaveToRO+0x22c>)
 800b866:	469a      	mov	sl, r3
 800b868:	e092      	b.n	800b990 <SaveToRO+0x180>
		return pFlash.ErrorCode;
 800b86a:	4b75      	ldr	r3, [pc, #468]	; (800ba40 <SaveToRO+0x230>)
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	9301      	str	r3, [sp, #4]
}
 800b872:	9801      	ldr	r0, [sp, #4]
 800b874:	b009      	add	sp, #36	; 0x24
 800b876:	bcf0      	pop	{r4, r5, r6, r7}
 800b878:	46bb      	mov	fp, r7
 800b87a:	46b2      	mov	sl, r6
 800b87c:	46a9      	mov	r9, r5
 800b87e:	46a0      	mov	r8, r4
 800b880:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b882:	4a70      	ldr	r2, [pc, #448]	; (800ba44 <SaveToRO+0x234>)
 800b884:	7812      	ldrb	r2, [r2, #0]
 800b886:	0212      	lsls	r2, r2, #8
 800b888:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b88a:	b292      	uxth	r2, r2
 800b88c:	2300      	movs	r3, #0
 800b88e:	4965      	ldr	r1, [pc, #404]	; (800ba24 <SaveToRO+0x214>)
 800b890:	2001      	movs	r0, #1
 800b892:	f006 fa5b 	bl	8011d4c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b896:	4864      	ldr	r0, [pc, #400]	; (800ba28 <SaveToRO+0x218>)
 800b898:	f006 fa2a 	bl	8011cf0 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d111      	bne.n	800b8c4 <SaveToRO+0xb4>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b8a0:	4a62      	ldr	r2, [pc, #392]	; (800ba2c <SaveToRO+0x21c>)
 800b8a2:	6913      	ldr	r3, [r2, #16]
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	438b      	bics	r3, r1
 800b8a8:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b8aa:	4b66      	ldr	r3, [pc, #408]	; (800ba44 <SaveToRO+0x234>)
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800b8b2:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d0ce      	beq.n	800b856 <SaveToRO+0x46>
 800b8b8:	2316      	movs	r3, #22
 800b8ba:	469b      	mov	fp, r3
 800b8bc:	4b62      	ldr	r3, [pc, #392]	; (800ba48 <SaveToRO+0x238>)
 800b8be:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800b8c0:	4698      	mov	r8, r3
 800b8c2:	e02c      	b.n	800b91e <SaveToRO+0x10e>
			return pFlash.ErrorCode;
 800b8c4:	4b5e      	ldr	r3, [pc, #376]	; (800ba40 <SaveToRO+0x230>)
 800b8c6:	69db      	ldr	r3, [r3, #28]
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	9301      	str	r3, [sp, #4]
 800b8cc:	e7d1      	b.n	800b872 <SaveToRO+0x62>
						return pFlash.ErrorCode;
 800b8ce:	4b5c      	ldr	r3, [pc, #368]	; (800ba40 <SaveToRO+0x230>)
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	9301      	str	r3, [sp, #4]
 800b8d6:	e7cc      	b.n	800b872 <SaveToRO+0x62>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b8d8:	3402      	adds	r4, #2
 800b8da:	42b4      	cmp	r4, r6
 800b8dc:	d017      	beq.n	800b90e <SaveToRO+0xfe>
				if (array[i-1][0]) {
 800b8de:	4643      	mov	r3, r8
 800b8e0:	5afb      	ldrh	r3, [r7, r3]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d0f8      	beq.n	800b8d8 <SaveToRO+0xc8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b8e6:	8822      	ldrh	r2, [r4, #0]
 800b8e8:	4b4e      	ldr	r3, [pc, #312]	; (800ba24 <SaveToRO+0x214>)
 800b8ea:	18e9      	adds	r1, r5, r3
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	2001      	movs	r0, #1
 800b8f0:	f006 fa2c 	bl	8011d4c <HAL_FLASH_Program>
					add += 2;
 800b8f4:	3502      	adds	r5, #2
 800b8f6:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b8f8:	484b      	ldr	r0, [pc, #300]	; (800ba28 <SaveToRO+0x218>)
 800b8fa:	f006 f9f9 	bl	8011cf0 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d1e5      	bne.n	800b8ce <SaveToRO+0xbe>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b902:	4a4a      	ldr	r2, [pc, #296]	; (800ba2c <SaveToRO+0x21c>)
 800b904:	6913      	ldr	r3, [r2, #16]
 800b906:	2101      	movs	r1, #1
 800b908:	438b      	bics	r3, r1
 800b90a:	6113      	str	r3, [r2, #16]
 800b90c:	e7e4      	b.n	800b8d8 <SaveToRO+0xc8>
		for(uint8_t i=1 ; i<=N ; i++)
 800b90e:	464b      	mov	r3, r9
 800b910:	3301      	adds	r3, #1
 800b912:	b2db      	uxtb	r3, r3
 800b914:	4699      	mov	r9, r3
 800b916:	4b4b      	ldr	r3, [pc, #300]	; (800ba44 <SaveToRO+0x234>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	454b      	cmp	r3, r9
 800b91c:	d39b      	bcc.n	800b856 <SaveToRO+0x46>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b91e:	465e      	mov	r6, fp
 800b920:	464b      	mov	r3, r9
 800b922:	435e      	muls	r6, r3
 800b924:	0034      	movs	r4, r6
 800b926:	3c16      	subs	r4, #22
 800b928:	4454      	add	r4, sl
 800b92a:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800b92c:	1e5f      	subs	r7, r3, #1
 800b92e:	465b      	mov	r3, fp
 800b930:	435f      	muls	r7, r3
 800b932:	e7d4      	b.n	800b8de <SaveToRO+0xce>
					return pFlash.ErrorCode;
 800b934:	4b42      	ldr	r3, [pc, #264]	; (800ba40 <SaveToRO+0x230>)
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	9301      	str	r3, [sp, #4]
 800b93c:	e799      	b.n	800b872 <SaveToRO+0x62>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b93e:	4643      	mov	r3, r8
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	2201      	movs	r2, #1
 800b944:	4393      	bics	r3, r2
 800b946:	4642      	mov	r2, r8
 800b948:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b94a:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b94c:	3401      	adds	r4, #1
 800b94e:	b2e4      	uxtb	r4, r4
 800b950:	68ef      	ldr	r7, [r5, #12]
 800b952:	0038      	movs	r0, r7
 800b954:	f7f4 fbe0 	bl	8000118 <strlen>
 800b958:	3001      	adds	r0, #1
 800b95a:	0840      	lsrs	r0, r0, #1
 800b95c:	4284      	cmp	r4, r0
 800b95e:	d210      	bcs.n	800b982 <SaveToRO+0x172>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b960:	0063      	lsls	r3, r4, #1
 800b962:	5afa      	ldrh	r2, [r7, r3]
 800b964:	2300      	movs	r3, #0
 800b966:	0031      	movs	r1, r6
 800b968:	2001      	movs	r0, #1
 800b96a:	f006 f9ef 	bl	8011d4c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b96e:	4658      	mov	r0, fp
 800b970:	f006 f9be 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b974:	2800      	cmp	r0, #0
 800b976:	d0e2      	beq.n	800b93e <SaveToRO+0x12e>
					return pFlash.ErrorCode;
 800b978:	4b31      	ldr	r3, [pc, #196]	; (800ba40 <SaveToRO+0x230>)
 800b97a:	69db      	ldr	r3, [r3, #28]
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	e777      	b.n	800b872 <SaveToRO+0x62>
 800b982:	464d      	mov	r5, r9
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b984:	3501      	adds	r5, #1
 800b986:	b2ed      	uxtb	r5, r5
 800b988:	4b2a      	ldr	r3, [pc, #168]	; (800ba34 <SaveToRO+0x224>)
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	42ab      	cmp	r3, r5
 800b98e:	d945      	bls.n	800ba1c <SaveToRO+0x20c>
		if (snippets[s].cond.conditionType) 
 800b990:	9500      	str	r5, [sp, #0]
 800b992:	00ab      	lsls	r3, r5, #2
 800b994:	195b      	adds	r3, r3, r5
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4652      	mov	r2, sl
 800b99a:	5c9b      	ldrb	r3, [r3, r2]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d0f1      	beq.n	800b984 <SaveToRO+0x174>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b9a0:	23fe      	movs	r3, #254	; 0xfe
 800b9a2:	aa02      	add	r2, sp, #8
 800b9a4:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b9a6:	00a9      	lsls	r1, r5, #2
 800b9a8:	1949      	adds	r1, r1, r5
 800b9aa:	0089      	lsls	r1, r1, #2
 800b9ac:	4b23      	ldr	r3, [pc, #140]	; (800ba3c <SaveToRO+0x22c>)
 800b9ae:	469c      	mov	ip, r3
 800b9b0:	4461      	add	r1, ip
 800b9b2:	2214      	movs	r2, #20
 800b9b4:	ab02      	add	r3, sp, #8
 800b9b6:	1c58      	adds	r0, r3, #1
 800b9b8:	f008 fc2a 	bl	8014210 <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b9bc:	2314      	movs	r3, #20
 800b9be:	469b      	mov	fp, r3
 800b9c0:	44b3      	add	fp, r6
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b9c2:	ab02      	add	r3, sp, #8
 800b9c4:	1b9b      	subs	r3, r3, r6
 800b9c6:	4698      	mov	r8, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b9c8:	4b17      	ldr	r3, [pc, #92]	; (800ba28 <SaveToRO+0x218>)
 800b9ca:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b9cc:	4f17      	ldr	r7, [pc, #92]	; (800ba2c <SaveToRO+0x21c>)
 800b9ce:	4644      	mov	r4, r8
 800b9d0:	46a8      	mov	r8, r5
 800b9d2:	465d      	mov	r5, fp
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b9d4:	5ba2      	ldrh	r2, [r4, r6]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	0031      	movs	r1, r6
 800b9da:	2001      	movs	r0, #1
 800b9dc:	f006 f9b6 	bl	8011d4c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b9e0:	4648      	mov	r0, r9
 800b9e2:	f006 f985 	bl	8011cf0 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d1a4      	bne.n	800b934 <SaveToRO+0x124>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	4393      	bics	r3, r2
 800b9f0:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b9f2:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b9f4:	42b5      	cmp	r5, r6
 800b9f6:	d1ed      	bne.n	800b9d4 <SaveToRO+0x1c4>
 800b9f8:	0004      	movs	r4, r0
 800b9fa:	4645      	mov	r5, r8
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b9fc:	9a00      	ldr	r2, [sp, #0]
 800b9fe:	0093      	lsls	r3, r2, #2
 800ba00:	4694      	mov	ip, r2
 800ba02:	4463      	add	r3, ip
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4a0d      	ldr	r2, [pc, #52]	; (800ba3c <SaveToRO+0x22c>)
 800ba08:	4691      	mov	r9, r2
 800ba0a:	4499      	add	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ba0c:	4b06      	ldr	r3, [pc, #24]	; (800ba28 <SaveToRO+0x218>)
 800ba0e:	469b      	mov	fp, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ba10:	4b06      	ldr	r3, [pc, #24]	; (800ba2c <SaveToRO+0x21c>)
 800ba12:	4698      	mov	r8, r3
 800ba14:	464b      	mov	r3, r9
 800ba16:	46a9      	mov	r9, r5
 800ba18:	001d      	movs	r5, r3
 800ba1a:	e799      	b.n	800b950 <SaveToRO+0x140>
	HAL_FLASH_Lock();
 800ba1c:	f006 f95e 	bl	8011cdc <HAL_FLASH_Lock>
	return result;
 800ba20:	e727      	b.n	800b872 <SaveToRO+0x62>
 800ba22:	46c0      	nop			; (mov r8, r8)
 800ba24:	0801d800 	.word	0x0801d800
 800ba28:	0000c350 	.word	0x0000c350
 800ba2c:	40022000 	.word	0x40022000
 800ba30:	2000107e 	.word	0x2000107e
 800ba34:	20001227 	.word	0x20001227
 800ba38:	0801dc00 	.word	0x0801dc00
 800ba3c:	20006ac4 	.word	0x20006ac4
 800ba40:	20006f98 	.word	0x20006f98
 800ba44:	2000001c 	.word	0x2000001c
 800ba48:	20000a80 	.word	0x20000a80

0800ba4c <ClearROtopology>:
{
 800ba4c:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800ba4e:	228f      	movs	r2, #143	; 0x8f
 800ba50:	0092      	lsls	r2, r2, #2
 800ba52:	2100      	movs	r1, #0
 800ba54:	4805      	ldr	r0, [pc, #20]	; (800ba6c <ClearROtopology+0x20>)
 800ba56:	f008 fbe4 	bl	8014222 <memset>
	N = 1; myID = 0;
 800ba5a:	4b05      	ldr	r3, [pc, #20]	; (800ba70 <ClearROtopology+0x24>)
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	701a      	strb	r2, [r3, #0]
 800ba60:	4b04      	ldr	r3, [pc, #16]	; (800ba74 <ClearROtopology+0x28>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800ba66:	f7ff fed3 	bl	800b810 <SaveToRO>
}
 800ba6a:	bd10      	pop	{r4, pc}
 800ba6c:	20000a80 	.word	0x20000a80
 800ba70:	2000001c 	.word	0x2000001c
 800ba74:	2000107e 	.word	0x2000107e

0800ba78 <cleanListBtcDevices>:
{
 800ba78:	b570      	push	{r4, r5, r6, lr}
  for (i = 0; i < MAX_SCAN_NUMBER_DEVICES; i++)
 800ba7a:	4c07      	ldr	r4, [pc, #28]	; (800ba98 <cleanListBtcDevices+0x20>)
 800ba7c:	0025      	movs	r5, r4
 800ba7e:	35c8      	adds	r5, #200	; 0xc8
    memset(listBtcDevices[i], 0, MAX_SSID_SIZE);
 800ba80:	2214      	movs	r2, #20
 800ba82:	2100      	movs	r1, #0
 800ba84:	0020      	movs	r0, r4
 800ba86:	f008 fbcc 	bl	8014222 <memset>
  for (i = 0; i < MAX_SCAN_NUMBER_DEVICES; i++)
 800ba8a:	3414      	adds	r4, #20
 800ba8c:	42ac      	cmp	r4, r5
 800ba8e:	d1f7      	bne.n	800ba80 <cleanListBtcDevices+0x8>
  indexBtcDevice = 0;
 800ba90:	4b02      	ldr	r3, [pc, #8]	; (800ba9c <cleanListBtcDevices+0x24>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	701a      	strb	r2, [r3, #0]
}
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	200017b4 	.word	0x200017b4
 800ba9c:	200017b0 	.word	0x200017b0

0800baa0 <copyDataToListBtcDevice>:
{
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	0003      	movs	r3, r0
 800baa4:	000a      	movs	r2, r1
	memcpy(listBtcDevices[indexBtcDevice], (char *)pStr, (size_t)(lenStr));
 800baa6:	4d06      	ldr	r5, [pc, #24]	; (800bac0 <copyDataToListBtcDevice+0x20>)
 800baa8:	782c      	ldrb	r4, [r5, #0]
 800baaa:	00a0      	lsls	r0, r4, #2
 800baac:	1900      	adds	r0, r0, r4
 800baae:	0080      	lsls	r0, r0, #2
 800bab0:	4904      	ldr	r1, [pc, #16]	; (800bac4 <copyDataToListBtcDevice+0x24>)
 800bab2:	1840      	adds	r0, r0, r1
 800bab4:	0019      	movs	r1, r3
 800bab6:	f008 fbab 	bl	8014210 <memcpy>
  indexBtcDevice++;
 800baba:	3401      	adds	r4, #1
 800babc:	702c      	strb	r4, [r5, #0]
}
 800babe:	bd70      	pop	{r4, r5, r6, pc}
 800bac0:	200017b0 	.word	0x200017b0
 800bac4:	200017b4 	.word	0x200017b4

0800bac8 <RegisterModuleCLICommands>:
{
 800bac8:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &btGetInfoCommandDefinition);
 800baca:	480c      	ldr	r0, [pc, #48]	; (800bafc <RegisterModuleCLICommands+0x34>)
 800bacc:	f002 fde0 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btResetCommandDefinition);
 800bad0:	480b      	ldr	r0, [pc, #44]	; (800bb00 <RegisterModuleCLICommands+0x38>)
 800bad2:	f002 fddd 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btDownloadScriptCommandDefinition);
 800bad6:	480b      	ldr	r0, [pc, #44]	; (800bb04 <RegisterModuleCLICommands+0x3c>)
 800bad8:	f002 fdda 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btRunScriptCommandDefinition);
 800badc:	480a      	ldr	r0, [pc, #40]	; (800bb08 <RegisterModuleCLICommands+0x40>)
 800bade:	f002 fdd7 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btVspModeCommandDefinition);
 800bae2:	480a      	ldr	r0, [pc, #40]	; (800bb0c <RegisterModuleCLICommands+0x44>)
 800bae4:	f002 fdd4 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btDeleteScriptCommandDefinition);
 800bae8:	4809      	ldr	r0, [pc, #36]	; (800bb10 <RegisterModuleCLICommands+0x48>)
 800baea:	f002 fdd1 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btScanCommandDefinition);
 800baee:	4809      	ldr	r0, [pc, #36]	; (800bb14 <RegisterModuleCLICommands+0x4c>)
 800baf0:	f002 fdce 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btConnectCommandDefinition);
 800baf4:	4808      	ldr	r0, [pc, #32]	; (800bb18 <RegisterModuleCLICommands+0x50>)
 800baf6:	f002 fdcb 	bl	800e690 <FreeRTOS_CLIRegisterCommand>
}
 800bafa:	bd10      	pop	{r4, pc}
 800bafc:	0801d6a8 	.word	0x0801d6a8
 800bb00:	0801d6b8 	.word	0x0801d6b8
 800bb04:	0801d698 	.word	0x0801d698
 800bb08:	0801d6c8 	.word	0x0801d6c8
 800bb0c:	0801d6e8 	.word	0x0801d6e8
 800bb10:	0801d688 	.word	0x0801d688
 800bb14:	0801d6d8 	.word	0x0801d6d8
 800bb18:	0801d678 	.word	0x0801d678

0800bb1c <btEnableHandshakeUart>:
{
 800bb1c:	b510      	push	{r4, lr}
	__HAL_UART_HWCONTROL_CTS_ENABLE(GetUart(PORT_BTC_CONN));
 800bb1e:	2006      	movs	r0, #6
 800bb20:	f002 fbe8 	bl	800e2f4 <GetUart>
 800bb24:	6802      	ldr	r2, [r0, #0]
 800bb26:	6893      	ldr	r3, [r2, #8]
 800bb28:	2480      	movs	r4, #128	; 0x80
 800bb2a:	00a4      	lsls	r4, r4, #2
 800bb2c:	4323      	orrs	r3, r4
 800bb2e:	6093      	str	r3, [r2, #8]
 800bb30:	2006      	movs	r0, #6
 800bb32:	f002 fbdf 	bl	800e2f4 <GetUart>
 800bb36:	6983      	ldr	r3, [r0, #24]
 800bb38:	431c      	orrs	r4, r3
 800bb3a:	6184      	str	r4, [r0, #24]
	__HAL_UART_HWCONTROL_RTS_ENABLE(GetUart(PORT_BTC_CONN));
 800bb3c:	2006      	movs	r0, #6
 800bb3e:	f002 fbd9 	bl	800e2f4 <GetUart>
 800bb42:	6802      	ldr	r2, [r0, #0]
 800bb44:	6893      	ldr	r3, [r2, #8]
 800bb46:	2480      	movs	r4, #128	; 0x80
 800bb48:	0064      	lsls	r4, r4, #1
 800bb4a:	4323      	orrs	r3, r4
 800bb4c:	6093      	str	r3, [r2, #8]
 800bb4e:	2006      	movs	r0, #6
 800bb50:	f002 fbd0 	bl	800e2f4 <GetUart>
 800bb54:	6983      	ldr	r3, [r0, #24]
 800bb56:	431c      	orrs	r4, r3
 800bb58:	6184      	str	r4, [r0, #24]
}
 800bb5a:	bd10      	pop	{r4, pc}

0800bb5c <btDisableHandshakeUart>:
{
 800bb5c:	b510      	push	{r4, lr}
	__HAL_UART_HWCONTROL_CTS_DISABLE(GetUart(PORT_BTC_CONN));
 800bb5e:	2006      	movs	r0, #6
 800bb60:	f002 fbc8 	bl	800e2f4 <GetUart>
 800bb64:	6802      	ldr	r2, [r0, #0]
 800bb66:	6893      	ldr	r3, [r2, #8]
 800bb68:	4c0b      	ldr	r4, [pc, #44]	; (800bb98 <btDisableHandshakeUart+0x3c>)
 800bb6a:	4023      	ands	r3, r4
 800bb6c:	6093      	str	r3, [r2, #8]
 800bb6e:	2006      	movs	r0, #6
 800bb70:	f002 fbc0 	bl	800e2f4 <GetUart>
 800bb74:	6983      	ldr	r3, [r0, #24]
 800bb76:	401c      	ands	r4, r3
 800bb78:	6184      	str	r4, [r0, #24]
	__HAL_UART_HWCONTROL_RTS_DISABLE(GetUart(PORT_BTC_CONN));
 800bb7a:	2006      	movs	r0, #6
 800bb7c:	f002 fbba 	bl	800e2f4 <GetUart>
 800bb80:	6802      	ldr	r2, [r0, #0]
 800bb82:	6893      	ldr	r3, [r2, #8]
 800bb84:	4c05      	ldr	r4, [pc, #20]	; (800bb9c <btDisableHandshakeUart+0x40>)
 800bb86:	4023      	ands	r3, r4
 800bb88:	6093      	str	r3, [r2, #8]
 800bb8a:	2006      	movs	r0, #6
 800bb8c:	f002 fbb2 	bl	800e2f4 <GetUart>
 800bb90:	6983      	ldr	r3, [r0, #24]
 800bb92:	401c      	ands	r4, r3
 800bb94:	6184      	str	r4, [r0, #24]
}
 800bb96:	bd10      	pop	{r4, pc}
 800bb98:	fffffdff 	.word	0xfffffdff
 800bb9c:	fffffeff 	.word	0xfffffeff

0800bba0 <btWaitEventFinishTransmission>:
{
 800bba0:	b570      	push	{r4, r5, r6, lr}
 800bba2:	b082      	sub	sp, #8
		tEvBits = xEventGroupWaitBits(handleUartTerminal, EVENT_CLOSE_CONNECTION_BIT, pdTRUE, pdFALSE, 10000);
 800bba4:	4e08      	ldr	r6, [pc, #32]	; (800bbc8 <btWaitEventFinishTransmission+0x28>)
 800bba6:	4d09      	ldr	r5, [pc, #36]	; (800bbcc <btWaitEventFinishTransmission+0x2c>)
	} while(H23R0_BTC_CLOSE_CONNECTION != stateTransmitBtToMcu);
 800bba8:	4c09      	ldr	r4, [pc, #36]	; (800bbd0 <btWaitEventFinishTransmission+0x30>)
		tEvBits = xEventGroupWaitBits(handleUartTerminal, EVENT_CLOSE_CONNECTION_BIT, pdTRUE, pdFALSE, 10000);
 800bbaa:	6830      	ldr	r0, [r6, #0]
 800bbac:	9500      	str	r5, [sp, #0]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	f002 fee6 	bl	800e984 <xEventGroupWaitBits>
	} while(H23R0_BTC_CLOSE_CONNECTION != stateTransmitBtToMcu);
 800bbb8:	7823      	ldrb	r3, [r4, #0]
 800bbba:	2bff      	cmp	r3, #255	; 0xff
 800bbbc:	d1f5      	bne.n	800bbaa <btWaitEventFinishTransmission+0xa>
	stateTransmitBtToMcu = 0;
 800bbbe:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <btWaitEventFinishTransmission+0x30>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	701a      	strb	r2, [r3, #0]
}
 800bbc4:	b002      	add	sp, #8
 800bbc6:	bd70      	pop	{r4, r5, r6, pc}
 800bbc8:	200017ac 	.word	0x200017ac
 800bbcc:	00002710 	.word	0x00002710
 800bbd0:	2000187e 	.word	0x2000187e

0800bbd4 <btScanCommand>:
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE btScanCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800bbda:	d033      	beq.n	800bc44 <btScanCommand+0x70>

	/* Scan */
  stateScanDevices = 0;
 800bbdc:	2600      	movs	r6, #0
 800bbde:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <btScanCommand+0x74>)
 800bbe0:	701e      	strb	r6, [r3, #0]
  cleanListBtcDevices();
 800bbe2:	f7ff ff49 	bl	800ba78 <cleanListBtcDevices>
	sprintf( (char *)pcWriteBuffer, "Scanning nearby bluetooth devices..\r\n\nIndex\tRSSI\tName\r\n\r\n");
 800bbe6:	223a      	movs	r2, #58	; 0x3a
 800bbe8:	4918      	ldr	r1, [pc, #96]	; (800bc4c <btScanCommand+0x78>)
 800bbea:	0020      	movs	r0, r4
 800bbec:	f008 fb10 	bl	8014210 <memcpy>
  writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bbf0:	0020      	movs	r0, r4
 800bbf2:	f7f4 fa91 	bl	8000118 <strlen>
 800bbf6:	b282      	uxth	r2, r0
 800bbf8:	4b15      	ldr	r3, [pc, #84]	; (800bc50 <btScanCommand+0x7c>)
 800bbfa:	7818      	ldrb	r0, [r3, #0]
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	425b      	negs	r3, r3
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	3333      	adds	r3, #51	; 0x33
 800bc04:	0021      	movs	r1, r4
 800bc06:	f002 fb97 	bl	800e338 <writePxMutex>
  /* clean terminal output */
  memset((char *)pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800bc0a:	2599      	movs	r5, #153	; 0x99
 800bc0c:	00ad      	lsls	r5, r5, #2
 800bc0e:	002a      	movs	r2, r5
 800bc10:	2100      	movs	r1, #0
 800bc12:	0020      	movs	r0, r4
 800bc14:	f008 fb05 	bl	8014222 <memset>
	/* Send a control message to BT900 to run inquiry new bluetooth devices */
	SendMessageFromPort(PORT_BTC_CONN, 0, 0, CODE_H23Rx_SCAN_INQUIRE, 0);
 800bc18:	9600      	str	r6, [sp, #0]
 800bc1a:	4b0e      	ldr	r3, [pc, #56]	; (800bc54 <btScanCommand+0x80>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	2100      	movs	r1, #0
 800bc20:	2006      	movs	r0, #6
 800bc22:	f7fd fc73 	bl	800950c <SendMessageFromPort>
  /* waiting event finish transmission */
	btWaitEventFinishTransmission();
 800bc26:	f7ff ffbb 	bl	800bba0 <btWaitEventFinishTransmission>
  /* clean terminal output */
  memset((char *)pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800bc2a:	002a      	movs	r2, r5
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	0020      	movs	r0, r4
 800bc30:	f008 faf7 	bl	8014222 <memset>
	sprintf( ( char * ) pcWriteBuffer, "\r\n");
 800bc34:	2203      	movs	r2, #3
 800bc36:	4908      	ldr	r1, [pc, #32]	; (800bc58 <btScanCommand+0x84>)
 800bc38:	0020      	movs	r0, r4
 800bc3a:	f008 fae9 	bl	8014210 <memcpy>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800bc3e:	2000      	movs	r0, #0
 800bc40:	b002      	add	sp, #8
 800bc42:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 800bc44:	b672      	cpsid	i
 800bc46:	e7fe      	b.n	800bc46 <btScanCommand+0x72>
 800bc48:	2000187d 	.word	0x2000187d
 800bc4c:	0801d080 	.word	0x0801d080
 800bc50:	20000a7f 	.word	0x20000a7f
 800bc54:	000006b6 	.word	0x000006b6
 800bc58:	0801c4c0 	.word	0x0801c4c0

0800bc5c <btConnectCommand>:

static portBASE_TYPE btConnectCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	0004      	movs	r4, r0
 800bc62:	0010      	movs	r0, r2
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	9303      	str	r3, [sp, #12]
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800bc68:	2c00      	cmp	r4, #0
 800bc6a:	d00b      	beq.n	800bc84 <btConnectCommand+0x28>

	if (1 == stateScanDevices)
 800bc6c:	4b2e      	ldr	r3, [pc, #184]	; (800bd28 <btConnectCommand+0xcc>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d009      	beq.n	800bc88 <btConnectCommand+0x2c>
			sprintf((char *)pcWriteBuffer, "Wrong input parameter\r\n");
		}
	}
	else
	{
		sprintf((char *)pcWriteBuffer, "Must call \"scan\" command first\r\n");
 800bc74:	2221      	movs	r2, #33	; 0x21
 800bc76:	492d      	ldr	r1, [pc, #180]	; (800bd2c <btConnectCommand+0xd0>)
 800bc78:	0020      	movs	r0, r4
 800bc7a:	f008 fac9 	bl	8014210 <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800bc7e:	2000      	movs	r0, #0
 800bc80:	b004      	add	sp, #16
 800bc82:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 800bc84:	b672      	cpsid	i
 800bc86:	e7fe      	b.n	800bc86 <btConnectCommand+0x2a>
		pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800bc88:	aa03      	add	r2, sp, #12
 800bc8a:	2101      	movs	r1, #1
 800bc8c:	f002 fdaa 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 800bc90:	0006      	movs	r6, r0
		sprintf((char *)pcWriteBuffer, "Connecting to bluetooth device %s:\r\n", pcParameterString1);
 800bc92:	0002      	movs	r2, r0
 800bc94:	4926      	ldr	r1, [pc, #152]	; (800bd30 <btConnectCommand+0xd4>)
 800bc96:	0020      	movs	r0, r4
 800bc98:	f008 fcb8 	bl	801460c <sprintf>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bc9c:	0020      	movs	r0, r4
 800bc9e:	f7f4 fa3b 	bl	8000118 <strlen>
 800bca2:	b282      	uxth	r2, r0
 800bca4:	4b23      	ldr	r3, [pc, #140]	; (800bd34 <btConnectCommand+0xd8>)
 800bca6:	7818      	ldrb	r0, [r3, #0]
 800bca8:	2301      	movs	r3, #1
 800bcaa:	425b      	negs	r3, r3
 800bcac:	9300      	str	r3, [sp, #0]
 800bcae:	3333      	adds	r3, #51	; 0x33
 800bcb0:	0021      	movs	r1, r4
 800bcb2:	f002 fb41 	bl	800e338 <writePxMutex>
	  memset((char *)pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800bcb6:	2299      	movs	r2, #153	; 0x99
 800bcb8:	0092      	lsls	r2, r2, #2
 800bcba:	2100      	movs	r1, #0
 800bcbc:	0020      	movs	r0, r4
 800bcbe:	f008 fab0 	bl	8014222 <memset>
		if ( ('[' == pcParameterString1[0]) && (']' == pcParameterString1[lenPar - 1]) )
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	56f3      	ldrsb	r3, [r6, r3]
 800bcc6:	2b5b      	cmp	r3, #91	; 0x5b
 800bcc8:	d10b      	bne.n	800bce2 <btConnectCommand+0x86>
		lenPar = strlen((char *)pcParameterString1);
 800bcca:	0030      	movs	r0, r6
 800bccc:	f7f4 fa24 	bl	8000118 <strlen>
 800bcd0:	0005      	movs	r5, r0
 800bcd2:	22ff      	movs	r2, #255	; 0xff
 800bcd4:	4002      	ands	r2, r0
		if ( ('[' == pcParameterString1[0]) && (']' == pcParameterString1[lenPar - 1]) )
 800bcd6:	18b3      	adds	r3, r6, r2
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	b25b      	sxtb	r3, r3
 800bcde:	2b5d      	cmp	r3, #93	; 0x5d
 800bce0:	d005      	beq.n	800bcee <btConnectCommand+0x92>
			sprintf((char *)pcWriteBuffer, "Wrong input parameter\r\n");
 800bce2:	2218      	movs	r2, #24
 800bce4:	4914      	ldr	r1, [pc, #80]	; (800bd38 <btConnectCommand+0xdc>)
 800bce6:	0020      	movs	r0, r4
 800bce8:	f008 fa92 	bl	8014210 <memcpy>
 800bcec:	e7c7      	b.n	800bc7e <btConnectCommand+0x22>
			memcpy(&messageParams[0], &pcParameterString1[1], lenPar - 2);
 800bcee:	3a02      	subs	r2, #2
 800bcf0:	1c71      	adds	r1, r6, #1
 800bcf2:	4812      	ldr	r0, [pc, #72]	; (800bd3c <btConnectCommand+0xe0>)
 800bcf4:	f008 fa8c 	bl	8014210 <memcpy>
			SendMessageFromPort(PORT_BTC_CONN, 0, 0, CODE_H23Rx_CONNECT_INQUIRE, lenPar - 2);
 800bcf8:	b2eb      	uxtb	r3, r5
 800bcfa:	3b02      	subs	r3, #2
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <btConnectCommand+0xe4>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	2100      	movs	r1, #0
 800bd06:	2006      	movs	r0, #6
 800bd08:	f7fd fc00 	bl	800950c <SendMessageFromPort>
			btWaitEventFinishTransmission();
 800bd0c:	f7ff ff48 	bl	800bba0 <btWaitEventFinishTransmission>
      memset((char *)pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800bd10:	2299      	movs	r2, #153	; 0x99
 800bd12:	0092      	lsls	r2, r2, #2
 800bd14:	2100      	movs	r1, #0
 800bd16:	0020      	movs	r0, r4
 800bd18:	f008 fa83 	bl	8014222 <memset>
			sprintf((char *)pcWriteBuffer, "\r\n");
 800bd1c:	2203      	movs	r2, #3
 800bd1e:	4909      	ldr	r1, [pc, #36]	; (800bd44 <btConnectCommand+0xe8>)
 800bd20:	0020      	movs	r0, r4
 800bd22:	f008 fa75 	bl	8014210 <memcpy>
 800bd26:	e7aa      	b.n	800bc7e <btConnectCommand+0x22>
 800bd28:	2000187d 	.word	0x2000187d
 800bd2c:	0801d0fc 	.word	0x0801d0fc
 800bd30:	0801d0bc 	.word	0x0801d0bc
 800bd34:	20000a7f 	.word	0x20000a7f
 800bd38:	0801d0e4 	.word	0x0801d0e4
 800bd3c:	20000f40 	.word	0x20000f40
 800bd40:	000006b9 	.word	0x000006b9
 800bd44:	0801c4c0 	.word	0x0801c4c0

0800bd48 <btSendMsgToTerminal>:
{
 800bd48:	b570      	push	{r4, r5, r6, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	0005      	movs	r5, r0
 800bd4e:	000e      	movs	r6, r1
	tOutput = FreeRTOS_CLIGetOutputBuffer();
 800bd50:	f002 fd44 	bl	800e7dc <FreeRTOS_CLIGetOutputBuffer>
 800bd54:	0004      	movs	r4, r0
	memcpy(tOutput, (char *)pStr, (size_t)(lenStr));
 800bd56:	0032      	movs	r2, r6
 800bd58:	0029      	movs	r1, r5
 800bd5a:	f008 fa59 	bl	8014210 <memcpy>
  writePxMutex(PcPort, (char *)tOutput, strlen((char *)tOutput), cmd50ms, HAL_MAX_DELAY);
 800bd5e:	0020      	movs	r0, r4
 800bd60:	f7f4 f9da 	bl	8000118 <strlen>
 800bd64:	b282      	uxth	r2, r0
 800bd66:	4b08      	ldr	r3, [pc, #32]	; (800bd88 <btSendMsgToTerminal+0x40>)
 800bd68:	7818      	ldrb	r0, [r3, #0]
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	425b      	negs	r3, r3
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	3333      	adds	r3, #51	; 0x33
 800bd72:	0021      	movs	r1, r4
 800bd74:	f002 fae0 	bl	800e338 <writePxMutex>
  memset((char *)tOutput, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800bd78:	2299      	movs	r2, #153	; 0x99
 800bd7a:	0092      	lsls	r2, r2, #2
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	0020      	movs	r0, r4
 800bd80:	f008 fa4f 	bl	8014222 <memset>
}
 800bd84:	b002      	add	sp, #8
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	20000a7f 	.word	0x20000a7f

0800bd8c <btSendMsgToModule>:
{
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	0004      	movs	r4, r0
 800bd90:	0015      	movs	r5, r2
	if (dst) {
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d100      	bne.n	800bd98 <btSendMsgToModule+0xc>
}
 800bd96:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(messageParams, (char *)pStr, (size_t)lenStr);
 800bd98:	4804      	ldr	r0, [pc, #16]	; (800bdac <btSendMsgToModule+0x20>)
 800bd9a:	f008 fa39 	bl	8014210 <memcpy>
		SendMessageToModule(dst, CODE_CLI_RESPONSE, (size_t)lenStr);
 800bd9e:	b2aa      	uxth	r2, r5
 800bda0:	2118      	movs	r1, #24
 800bda2:	0020      	movs	r0, r4
 800bda4:	f7fd fdda 	bl	800995c <SendMessageToModule>
}
 800bda8:	e7f5      	b.n	800bd96 <btSendMsgToModule+0xa>
 800bdaa:	46c0      	nop			; (mov r8, r8)
 800bdac:	20000f40 	.word	0x20000f40

0800bdb0 <sendListBtcDevices>:
{
 800bdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdb2:	46ce      	mov	lr, r9
 800bdb4:	b500      	push	{lr}
 800bdb6:	0007      	movs	r7, r0
 800bdb8:	4689      	mov	r9, r1
  for(i = 0; i < indexBtcDevice; i++)
 800bdba:	4b17      	ldr	r3, [pc, #92]	; (800be18 <sendListBtcDevices+0x68>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d027      	beq.n	800be12 <sendListBtcDevices+0x62>
 800bdc2:	2400      	movs	r4, #0
 800bdc4:	4e14      	ldr	r6, [pc, #80]	; (800be18 <sendListBtcDevices+0x68>)
 800bdc6:	e011      	b.n	800bdec <sendListBtcDevices+0x3c>
      btSendMsgToTerminal(listBtcDevices[i], strlen((char *)listBtcDevices[i]));
 800bdc8:	00a5      	lsls	r5, r4, #2
 800bdca:	192d      	adds	r5, r5, r4
 800bdcc:	00ad      	lsls	r5, r5, #2
 800bdce:	4b13      	ldr	r3, [pc, #76]	; (800be1c <sendListBtcDevices+0x6c>)
 800bdd0:	469c      	mov	ip, r3
 800bdd2:	4465      	add	r5, ip
 800bdd4:	0028      	movs	r0, r5
 800bdd6:	f7f4 f99f 	bl	8000118 <strlen>
 800bdda:	b2c1      	uxtb	r1, r0
 800bddc:	0028      	movs	r0, r5
 800bdde:	f7ff ffb3 	bl	800bd48 <btSendMsgToTerminal>
  for(i = 0; i < indexBtcDevice; i++)
 800bde2:	3401      	adds	r4, #1
 800bde4:	b2e4      	uxtb	r4, r4
 800bde6:	7833      	ldrb	r3, [r6, #0]
 800bde8:	42a3      	cmp	r3, r4
 800bdea:	d912      	bls.n	800be12 <sendListBtcDevices+0x62>
    if (H23Rx_SEND_TO_TERMINAL_APP == type)
 800bdec:	2f00      	cmp	r7, #0
 800bdee:	d0eb      	beq.n	800bdc8 <sendListBtcDevices+0x18>
    else if (H23Rx_SEND_TO_OTHER_DEVICES == type)
 800bdf0:	2f01      	cmp	r7, #1
 800bdf2:	d1f6      	bne.n	800bde2 <sendListBtcDevices+0x32>
      btSendMsgToModule(dst, listBtcDevices[i], strlen((char *)listBtcDevices[i]));
 800bdf4:	00a5      	lsls	r5, r4, #2
 800bdf6:	192d      	adds	r5, r5, r4
 800bdf8:	00ad      	lsls	r5, r5, #2
 800bdfa:	4b08      	ldr	r3, [pc, #32]	; (800be1c <sendListBtcDevices+0x6c>)
 800bdfc:	469c      	mov	ip, r3
 800bdfe:	4465      	add	r5, ip
 800be00:	0028      	movs	r0, r5
 800be02:	f7f4 f989 	bl	8000118 <strlen>
 800be06:	b2c2      	uxtb	r2, r0
 800be08:	0029      	movs	r1, r5
 800be0a:	4648      	mov	r0, r9
 800be0c:	f7ff ffbe 	bl	800bd8c <btSendMsgToModule>
 800be10:	e7e7      	b.n	800bde2 <sendListBtcDevices+0x32>
}
 800be12:	bc80      	pop	{r7}
 800be14:	46b9      	mov	r9, r7
 800be16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be18:	200017b0 	.word	0x200017b0
 800be1c:	200017b4 	.word	0x200017b4

0800be20 <ControlBluetoothTask>:
{
 800be20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be22:	b08f      	sub	sp, #60	; 0x3c
  uint8_t tMessage[MAX_MESSAGE_SIZE] = {0};
 800be24:	2300      	movs	r3, #0
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	2234      	movs	r2, #52	; 0x34
 800be2a:	2100      	movs	r1, #0
 800be2c:	a801      	add	r0, sp, #4
 800be2e:	f008 f9f8 	bl	8014222 <memset>
    code_field += (cMessage[PORT_BTC_CONN-1][3] - 0x30) * 10;
 800be32:	4c68      	ldr	r4, [pc, #416]	; (800bfd4 <ControlBluetoothTask+0x1b4>)
 800be34:	4d68      	ldr	r5, [pc, #416]	; (800bfd8 <ControlBluetoothTask+0x1b8>)
        if (CLI == portStatus[PcPort])
 800be36:	4e69      	ldr	r6, [pc, #420]	; (800bfdc <ControlBluetoothTask+0x1bc>)
 800be38:	e023      	b.n	800be82 <ControlBluetoothTask+0x62>
        IND_ON();
 800be3a:	2180      	movs	r1, #128	; 0x80
 800be3c:	2090      	movs	r0, #144	; 0x90
 800be3e:	2201      	movs	r2, #1
 800be40:	0109      	lsls	r1, r1, #4
 800be42:	05c0      	lsls	r0, r0, #23
 800be44:	f006 f9f2 	bl	801222c <HAL_GPIO_WritePin>
		memset(tMessage, 0, (size_t) MAX_MESSAGE_SIZE);
 800be48:	2238      	movs	r2, #56	; 0x38
 800be4a:	2100      	movs	r1, #0
 800be4c:	4668      	mov	r0, sp
 800be4e:	f008 f9e8 	bl	8014222 <memset>
		memset(cMessage[PORT_BTC_CONN-1], 0, (size_t) MAX_MESSAGE_SIZE);
 800be52:	2238      	movs	r2, #56	; 0x38
 800be54:	2100      	movs	r1, #0
 800be56:	4862      	ldr	r0, [pc, #392]	; (800bfe0 <ControlBluetoothTask+0x1c0>)
 800be58:	f008 f9e3 	bl	8014222 <memset>
		messageLength[PORT_BTC_CONN-1] = 0;
 800be5c:	4b61      	ldr	r3, [pc, #388]	; (800bfe4 <ControlBluetoothTask+0x1c4>)
 800be5e:	2200      	movs	r2, #0
 800be60:	715a      	strb	r2, [r3, #5]
    if ((portStatus[PORT_BTC_CONN] != STREAM) &&
 800be62:	4b5e      	ldr	r3, [pc, #376]	; (800bfdc <ControlBluetoothTask+0x1bc>)
        (portStatus[PORT_BTC_CONN] != CLI) &&
 800be64:	799b      	ldrb	r3, [r3, #6]
    if ((portStatus[PORT_BTC_CONN] != STREAM) &&
 800be66:	3b02      	subs	r3, #2
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d908      	bls.n	800be7e <ControlBluetoothTask+0x5e>
      portStatus[PORT_BTC_CONN] = FREE;
 800be6c:	4b5b      	ldr	r3, [pc, #364]	; (800bfdc <ControlBluetoothTask+0x1bc>)
 800be6e:	719a      	strb	r2, [r3, #6]
      HAL_UART_Receive_IT(GetUart(PORT_BTC_CONN), (uint8_t *)&cRxedChar, 1);
 800be70:	2006      	movs	r0, #6
 800be72:	f002 fa3f 	bl	800e2f4 <GetUart>
 800be76:	2201      	movs	r2, #1
 800be78:	495b      	ldr	r1, [pc, #364]	; (800bfe8 <ControlBluetoothTask+0x1c8>)
 800be7a:	f007 f9fd 	bl	8013278 <HAL_UART_Receive_IT>
    taskYIELD();
 800be7e:	f004 fbd3 	bl	8010628 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800be82:	2101      	movs	r1, #1
 800be84:	4249      	negs	r1, r1
 800be86:	2001      	movs	r0, #1
 800be88:	f004 f8f2 	bl	8010070 <ulTaskNotifyTake>
    code_field += (cMessage[PORT_BTC_CONN-1][3] - 0x30) * 10;
 800be8c:	231c      	movs	r3, #28
 800be8e:	33ff      	adds	r3, #255	; 0xff
 800be90:	5ce3      	ldrb	r3, [r4, r3]
 800be92:	3b30      	subs	r3, #48	; 0x30
 800be94:	009a      	lsls	r2, r3, #2
 800be96:	189b      	adds	r3, r3, r2
 800be98:	005b      	lsls	r3, r3, #1
    code_field = cMessage[PORT_BTC_CONN-1][4] - 0x30;
 800be9a:	228e      	movs	r2, #142	; 0x8e
 800be9c:	0052      	lsls	r2, r2, #1
 800be9e:	5ca2      	ldrb	r2, [r4, r2]
 800bea0:	3a30      	subs	r2, #48	; 0x30
    code_field += (cMessage[PORT_BTC_CONN-1][3] - 0x30) * 10;
 800bea2:	189b      	adds	r3, r3, r2
    code_field += (cMessage[PORT_BTC_CONN-1][2] - 0x30) * 100;
 800bea4:	228d      	movs	r2, #141	; 0x8d
 800bea6:	0052      	lsls	r2, r2, #1
 800bea8:	5ca2      	ldrb	r2, [r4, r2]
 800beaa:	3a30      	subs	r2, #48	; 0x30
 800beac:	2164      	movs	r1, #100	; 0x64
 800beae:	434a      	muls	r2, r1
 800beb0:	189b      	adds	r3, r3, r2
    code_field += (cMessage[PORT_BTC_CONN-1][1] - 0x30) * 1000;
 800beb2:	221a      	movs	r2, #26
 800beb4:	32ff      	adds	r2, #255	; 0xff
 800beb6:	5ca1      	ldrb	r1, [r4, r2]
 800beb8:	3930      	subs	r1, #48	; 0x30
 800beba:	22fa      	movs	r2, #250	; 0xfa
 800bebc:	0092      	lsls	r2, r2, #2
 800bebe:	434a      	muls	r2, r1
 800bec0:	189b      	adds	r3, r3, r2
 800bec2:	4a4a      	ldr	r2, [pc, #296]	; (800bfec <ControlBluetoothTask+0x1cc>)
 800bec4:	4694      	mov	ip, r2
 800bec6:	4463      	add	r3, ip
 800bec8:	b29a      	uxth	r2, r3
 800beca:	2a10      	cmp	r2, #16
 800becc:	d8bc      	bhi.n	800be48 <ControlBluetoothTask+0x28>
 800bece:	0093      	lsls	r3, r2, #2
 800bed0:	58eb      	ldr	r3, [r5, r3]
 800bed2:	469f      	mov	pc, r3
        IND_OFF();
 800bed4:	2180      	movs	r1, #128	; 0x80
 800bed6:	2090      	movs	r0, #144	; 0x90
 800bed8:	2200      	movs	r2, #0
 800beda:	0109      	lsls	r1, r1, #4
 800bedc:	05c0      	lsls	r0, r0, #23
 800bede:	f006 f9a5 	bl	801222c <HAL_GPIO_WritePin>
        break;
 800bee2:	e7b1      	b.n	800be48 <ControlBluetoothTask+0x28>
      	stateTransmitBtToMcu = 0;
 800bee4:	4b42      	ldr	r3, [pc, #264]	; (800bff0 <ControlBluetoothTask+0x1d0>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	701a      	strb	r2, [r3, #0]
      	btSendMsgToTerminal(&cMessage[PORT_BTC_CONN-1][5], messageLength[PORT_BTC_CONN-1]-4);
 800beea:	4b3e      	ldr	r3, [pc, #248]	; (800bfe4 <ControlBluetoothTask+0x1c4>)
 800beec:	7959      	ldrb	r1, [r3, #5]
 800beee:	3904      	subs	r1, #4
 800bef0:	b2c9      	uxtb	r1, r1
 800bef2:	4840      	ldr	r0, [pc, #256]	; (800bff4 <ControlBluetoothTask+0x1d4>)
 800bef4:	f7ff ff28 	bl	800bd48 <btSendMsgToTerminal>
      	break;
 800bef8:	e7a6      	b.n	800be48 <ControlBluetoothTask+0x28>
        stateScanDevices = 1;
 800befa:	4b3f      	ldr	r3, [pc, #252]	; (800bff8 <ControlBluetoothTask+0x1d8>)
 800befc:	2201      	movs	r2, #1
 800befe:	701a      	strb	r2, [r3, #0]
      	stateTransmitBtToMcu = 0;
 800bf00:	4b3b      	ldr	r3, [pc, #236]	; (800bff0 <ControlBluetoothTask+0x1d0>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	701a      	strb	r2, [r3, #0]
      	copyDataToListBtcDevice(&cMessage[PORT_BTC_CONN-1][5], messageLength[PORT_BTC_CONN-1]-4);
 800bf06:	4b37      	ldr	r3, [pc, #220]	; (800bfe4 <ControlBluetoothTask+0x1c4>)
 800bf08:	7959      	ldrb	r1, [r3, #5]
 800bf0a:	3904      	subs	r1, #4
 800bf0c:	b2c9      	uxtb	r1, r1
 800bf0e:	4839      	ldr	r0, [pc, #228]	; (800bff4 <ControlBluetoothTask+0x1d4>)
 800bf10:	f7ff fdc6 	bl	800baa0 <copyDataToListBtcDevice>
        break;
 800bf14:	e798      	b.n	800be48 <ControlBluetoothTask+0x28>
        stateScanDevices = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	4a37      	ldr	r2, [pc, #220]	; (800bff8 <ControlBluetoothTask+0x1d8>)
 800bf1a:	7013      	strb	r3, [r2, #0]
      	stateTransmitBtToMcu = 0;
 800bf1c:	4a34      	ldr	r2, [pc, #208]	; (800bff0 <ControlBluetoothTask+0x1d0>)
 800bf1e:	7013      	strb	r3, [r2, #0]
      	btSendMsgToTerminal(&cMessage[PORT_BTC_CONN-1][5], messageLength[PORT_BTC_CONN-1]-4);
 800bf20:	4b30      	ldr	r3, [pc, #192]	; (800bfe4 <ControlBluetoothTask+0x1c4>)
 800bf22:	7959      	ldrb	r1, [r3, #5]
 800bf24:	3904      	subs	r1, #4
 800bf26:	b2c9      	uxtb	r1, r1
 800bf28:	4832      	ldr	r0, [pc, #200]	; (800bff4 <ControlBluetoothTask+0x1d4>)
 800bf2a:	f7ff ff0d 	bl	800bd48 <btSendMsgToTerminal>
        break;
 800bf2e:	e78b      	b.n	800be48 <ControlBluetoothTask+0x28>
      	stateTransmitBtToMcu = 0;
 800bf30:	4b2f      	ldr	r3, [pc, #188]	; (800bff0 <ControlBluetoothTask+0x1d0>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	701a      	strb	r2, [r3, #0]
      	if ('0' == cMessage[PORT_BTC_CONN-1][5])
 800bf36:	4a27      	ldr	r2, [pc, #156]	; (800bfd4 <ControlBluetoothTask+0x1b4>)
 800bf38:	231e      	movs	r3, #30
 800bf3a:	33ff      	adds	r3, #255	; 0xff
 800bf3c:	5cd3      	ldrb	r3, [r2, r3]
 800bf3e:	2b30      	cmp	r3, #48	; 0x30
 800bf40:	d013      	beq.n	800bf6a <ControlBluetoothTask+0x14a>
					sprintf((char *)&tMessage[0], "Connection failed ...\r\n");
 800bf42:	4669      	mov	r1, sp
 800bf44:	4b2d      	ldr	r3, [pc, #180]	; (800bffc <ControlBluetoothTask+0x1dc>)
 800bf46:	000a      	movs	r2, r1
 800bf48:	cb83      	ldmia	r3!, {r0, r1, r7}
 800bf4a:	c283      	stmia	r2!, {r0, r1, r7}
 800bf4c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800bf4e:	c283      	stmia	r2!, {r0, r1, r7}
        if (CLI == portStatus[PcPort])
 800bf50:	4b2b      	ldr	r3, [pc, #172]	; (800c000 <ControlBluetoothTask+0x1e0>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	4a21      	ldr	r2, [pc, #132]	; (800bfdc <ControlBluetoothTask+0x1bc>)
 800bf56:	5cd3      	ldrb	r3, [r2, r3]
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d012      	beq.n	800bf82 <ControlBluetoothTask+0x162>
          btSendMsgToModule(dstModule, &cMessage[PORT_BTC_CONN-1][5], 1);
 800bf5c:	4b29      	ldr	r3, [pc, #164]	; (800c004 <ControlBluetoothTask+0x1e4>)
 800bf5e:	7818      	ldrb	r0, [r3, #0]
 800bf60:	2201      	movs	r2, #1
 800bf62:	4924      	ldr	r1, [pc, #144]	; (800bff4 <ControlBluetoothTask+0x1d4>)
 800bf64:	f7ff ff12 	bl	800bd8c <btSendMsgToModule>
 800bf68:	e76e      	b.n	800be48 <ControlBluetoothTask+0x28>
					sprintf((char *)&tMessage[0], "Connection succeeded ...\r\n");
 800bf6a:	4669      	mov	r1, sp
 800bf6c:	4b26      	ldr	r3, [pc, #152]	; (800c008 <ControlBluetoothTask+0x1e8>)
 800bf6e:	000a      	movs	r2, r1
 800bf70:	cb83      	ldmia	r3!, {r0, r1, r7}
 800bf72:	c283      	stmia	r2!, {r0, r1, r7}
 800bf74:	cb83      	ldmia	r3!, {r0, r1, r7}
 800bf76:	c283      	stmia	r2!, {r0, r1, r7}
 800bf78:	8819      	ldrh	r1, [r3, #0]
 800bf7a:	8011      	strh	r1, [r2, #0]
 800bf7c:	789b      	ldrb	r3, [r3, #2]
 800bf7e:	7093      	strb	r3, [r2, #2]
 800bf80:	e7e6      	b.n	800bf50 <ControlBluetoothTask+0x130>
          btSendMsgToTerminal(tMessage, strlen((char *)tMessage));
 800bf82:	4668      	mov	r0, sp
 800bf84:	f7f4 f8c8 	bl	8000118 <strlen>
 800bf88:	b2c1      	uxtb	r1, r0
 800bf8a:	4668      	mov	r0, sp
 800bf8c:	f7ff fedc 	bl	800bd48 <btSendMsgToTerminal>
          stateTransmitBtToMcu = H23R0_BTC_CLOSE_CONNECTION;
 800bf90:	4b17      	ldr	r3, [pc, #92]	; (800bff0 <ControlBluetoothTask+0x1d0>)
 800bf92:	22ff      	movs	r2, #255	; 0xff
 800bf94:	701a      	strb	r2, [r3, #0]
          xEventGroupSetBits(handleUartTerminal, EVENT_CLOSE_CONNECTION_BIT);
 800bf96:	4b1d      	ldr	r3, [pc, #116]	; (800c00c <ControlBluetoothTask+0x1ec>)
 800bf98:	6818      	ldr	r0, [r3, #0]
 800bf9a:	2101      	movs	r1, #1
 800bf9c:	f002 fd6f 	bl	800ea7e <xEventGroupSetBits>
 800bfa0:	e752      	b.n	800be48 <ControlBluetoothTask+0x28>
        if (CLI == portStatus[PcPort])
 800bfa2:	4b17      	ldr	r3, [pc, #92]	; (800c000 <ControlBluetoothTask+0x1e0>)
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	5cf3      	ldrb	r3, [r6, r3]
 800bfa8:	2b03      	cmp	r3, #3
 800bfaa:	d005      	beq.n	800bfb8 <ControlBluetoothTask+0x198>
          sendListBtcDevices(H23Rx_SEND_TO_OTHER_DEVICES, dstModule);
 800bfac:	4b15      	ldr	r3, [pc, #84]	; (800c004 <ControlBluetoothTask+0x1e4>)
 800bfae:	7819      	ldrb	r1, [r3, #0]
 800bfb0:	2001      	movs	r0, #1
 800bfb2:	f7ff fefd 	bl	800bdb0 <sendListBtcDevices>
 800bfb6:	e747      	b.n	800be48 <ControlBluetoothTask+0x28>
          sendListBtcDevices(H23Rx_SEND_TO_TERMINAL_APP, 0);
 800bfb8:	2100      	movs	r1, #0
 800bfba:	2000      	movs	r0, #0
 800bfbc:	f7ff fef8 	bl	800bdb0 <sendListBtcDevices>
          stateTransmitBtToMcu = H23R0_BTC_CLOSE_CONNECTION;
 800bfc0:	4b0b      	ldr	r3, [pc, #44]	; (800bff0 <ControlBluetoothTask+0x1d0>)
 800bfc2:	22ff      	movs	r2, #255	; 0xff
 800bfc4:	701a      	strb	r2, [r3, #0]
          xEventGroupSetBits(handleUartTerminal, EVENT_CLOSE_CONNECTION_BIT);
 800bfc6:	4b11      	ldr	r3, [pc, #68]	; (800c00c <ControlBluetoothTask+0x1ec>)
 800bfc8:	6818      	ldr	r0, [r3, #0]
 800bfca:	2101      	movs	r1, #1
 800bfcc:	f002 fd57 	bl	800ea7e <xEventGroupSetBits>
 800bfd0:	e73a      	b.n	800be48 <ControlBluetoothTask+0x28>
 800bfd2:	46c0      	nop			; (mov r8, r8)
 800bfd4:	20000d10 	.word	0x20000d10
 800bfd8:	0801d154 	.word	0x0801d154
 800bfdc:	20001100 	.word	0x20001100
 800bfe0:	20000e28 	.word	0x20000e28
 800bfe4:	20000f38 	.word	0x20000f38
 800bfe8:	20000e60 	.word	0x20000e60
 800bfec:	fffff955 	.word	0xfffff955
 800bff0:	2000187e 	.word	0x2000187e
 800bff4:	20000e2d 	.word	0x20000e2d
 800bff8:	2000187d 	.word	0x2000187d
 800bffc:	0801d13c 	.word	0x0801d13c
 800c000:	20000a7f 	.word	0x20000a7f
 800c004:	200017a8 	.word	0x200017a8
 800c008:	0801d120 	.word	0x0801d120
 800c00c:	200017ac 	.word	0x200017ac

0800c010 <btSendCommandToBtc>:
{
 800c010:	b510      	push	{r4, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	0004      	movs	r4, r0
	result = writePxMutex(PORT_BTC_CONN, (char *) command, strlen((char *)command), cmd50ms, HAL_MAX_DELAY);
 800c016:	f7f4 f87f 	bl	8000118 <strlen>
 800c01a:	b282      	uxth	r2, r0
 800c01c:	2301      	movs	r3, #1
 800c01e:	425b      	negs	r3, r3
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	3333      	adds	r3, #51	; 0x33
 800c024:	0021      	movs	r1, r4
 800c026:	2006      	movs	r0, #6
 800c028:	f002 f986 	bl	800e338 <writePxMutex>
}
 800c02c:	b002      	add	sp, #8
 800c02e:	bd10      	pop	{r4, pc}

0800c030 <btDeleteScriptCommand>:
{
 800c030:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 800c032:	2800      	cmp	r0, #0
 800c034:	d010      	beq.n	800c058 <btDeleteScriptCommand+0x28>
	sprintf( ( char * ) pcWriteBuffer, "Current smartBASIC script deleted successfuly\r\n");
 800c036:	2230      	movs	r2, #48	; 0x30
 800c038:	4908      	ldr	r1, [pc, #32]	; (800c05c <btDeleteScriptCommand+0x2c>)
 800c03a:	f008 f8e9 	bl	8014210 <memcpy>
	EE_WriteVariable(_EE_H23xVSP, H23Rx_RUN_VspCommandMode);
 800c03e:	20fa      	movs	r0, #250	; 0xfa
 800c040:	2103      	movs	r1, #3
 800c042:	0040      	lsls	r0, r0, #1
 800c044:	f7fb fcbc 	bl	80079c0 <EE_WriteVariable>
	Delay_ms(100);
 800c048:	2064      	movs	r0, #100	; 0x64
 800c04a:	f004 fc67 	bl	801091c <HAL_Delay>
		btSendCommandToBtc(pcMsgDelFirmware);
 800c04e:	4804      	ldr	r0, [pc, #16]	; (800c060 <btDeleteScriptCommand+0x30>)
 800c050:	f7ff ffde 	bl	800c010 <btSendCommandToBtc>
}
 800c054:	2000      	movs	r0, #0
 800c056:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800c058:	b672      	cpsid	i
 800c05a:	e7fe      	b.n	800c05a <btDeleteScriptCommand+0x2a>
 800c05c:	0801d198 	.word	0x0801d198
 800c060:	0801d1c8 	.word	0x0801d1c8

0800c064 <btResetBt900Module>:
{
 800c064:	b570      	push	{r4, r5, r6, lr}
  BT_CLEAR_RST_PIN();
 800c066:	2580      	movs	r5, #128	; 0x80
 800c068:	022d      	lsls	r5, r5, #8
 800c06a:	4c09      	ldr	r4, [pc, #36]	; (800c090 <btResetBt900Module+0x2c>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	0029      	movs	r1, r5
 800c070:	0020      	movs	r0, r4
 800c072:	f006 f8db 	bl	801222c <HAL_GPIO_WritePin>
  Delay_ms_no_rtos(10);
 800c076:	200a      	movs	r0, #10
 800c078:	f001 ff56 	bl	800df28 <StartMilliDelay>
  BT_SET_RST_PIN();
 800c07c:	2201      	movs	r2, #1
 800c07e:	0029      	movs	r1, r5
 800c080:	0020      	movs	r0, r4
 800c082:	f006 f8d3 	bl	801222c <HAL_GPIO_WritePin>
  Delay_ms_no_rtos(2900); /* The BT900 module start-up time is ~1.6 seconds + ~1.3 s for radio initialisation */
 800c086:	4803      	ldr	r0, [pc, #12]	; (800c094 <btResetBt900Module+0x30>)
 800c088:	f001 ff4e 	bl	800df28 <StartMilliDelay>
}
 800c08c:	bd70      	pop	{r4, r5, r6, pc}
 800c08e:	46c0      	nop			; (mov r8, r8)
 800c090:	48000400 	.word	0x48000400
 800c094:	00000b54 	.word	0x00000b54

0800c098 <btResetCommand>:
{
 800c098:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d007      	beq.n	800c0ae <btResetCommand+0x16>
	sprintf( ( char * ) pcWriteBuffer, "Reset BT900 module\r\n");
 800c09e:	2215      	movs	r2, #21
 800c0a0:	4904      	ldr	r1, [pc, #16]	; (800c0b4 <btResetCommand+0x1c>)
 800c0a2:	f008 f8b5 	bl	8014210 <memcpy>
	btResetBt900Module();
 800c0a6:	f7ff ffdd 	bl	800c064 <btResetBt900Module>
}
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800c0ae:	b672      	cpsid	i
 800c0b0:	e7fe      	b.n	800c0b0 <btResetCommand+0x18>
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	0801d1d0 	.word	0x0801d1d0

0800c0b8 <btVspMode>:
{
 800c0b8:	b510      	push	{r4, lr}
 800c0ba:	0004      	movs	r4, r0
	btEnableHandshakeUart();
 800c0bc:	f7ff fd2e 	bl	800bb1c <btEnableHandshakeUart>
	if (H23Rx_RUN_VspCommandMode == inputVspMode)
 800c0c0:	2c03      	cmp	r4, #3
 800c0c2:	d003      	beq.n	800c0cc <btVspMode+0x14>
		result = H23Rx_ERR_WrongParams;
 800c0c4:	2002      	movs	r0, #2
	else if (H23Rx_RUN_VspBridgeToUartMode == inputVspMode)
 800c0c6:	2c04      	cmp	r4, #4
 800c0c8:	d010      	beq.n	800c0ec <btVspMode+0x34>
}
 800c0ca:	bd10      	pop	{r4, pc}
		BT_CLEAR_VSP_PIN();
 800c0cc:	2180      	movs	r1, #128	; 0x80
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	01c9      	lsls	r1, r1, #7
 800c0d2:	480e      	ldr	r0, [pc, #56]	; (800c10c <btVspMode+0x54>)
 800c0d4:	f006 f8aa 	bl	801222c <HAL_GPIO_WritePin>
		BT_CLEAR_MODE_PIN();
 800c0d8:	2090      	movs	r0, #144	; 0x90
 800c0da:	2200      	movs	r2, #0
 800c0dc:	2180      	movs	r1, #128	; 0x80
 800c0de:	05c0      	lsls	r0, r0, #23
 800c0e0:	f006 f8a4 	bl	801222c <HAL_GPIO_WritePin>
		btResetBt900Module();
 800c0e4:	f7ff ffbe 	bl	800c064 <btResetBt900Module>
	Module_Status result = H23Rx_OK;
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	e7ee      	b.n	800c0ca <btVspMode+0x12>
		BT_CLEAR_VSP_PIN();
 800c0ec:	2180      	movs	r1, #128	; 0x80
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	01c9      	lsls	r1, r1, #7
 800c0f2:	4806      	ldr	r0, [pc, #24]	; (800c10c <btVspMode+0x54>)
 800c0f4:	f006 f89a 	bl	801222c <HAL_GPIO_WritePin>
		BT_SET_MODE_PIN();
 800c0f8:	2090      	movs	r0, #144	; 0x90
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	2180      	movs	r1, #128	; 0x80
 800c0fe:	05c0      	lsls	r0, r0, #23
 800c100:	f006 f894 	bl	801222c <HAL_GPIO_WritePin>
		btResetBt900Module();
 800c104:	f7ff ffae 	bl	800c064 <btResetBt900Module>
	Module_Status result = H23Rx_OK;
 800c108:	2000      	movs	r0, #0
 800c10a:	e7de      	b.n	800c0ca <btVspMode+0x12>
 800c10c:	48000400 	.word	0x48000400

0800c110 <btVspModeCommand>:
{
 800c110:	b530      	push	{r4, r5, lr}
 800c112:	b083      	sub	sp, #12
 800c114:	0004      	movs	r4, r0
 800c116:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800c118:	2300      	movs	r3, #0
 800c11a:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800c11c:	2c00      	cmp	r4, #0
 800c11e:	d019      	beq.n	800c154 <btVspModeCommand+0x44>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c120:	aa01      	add	r2, sp, #4
 800c122:	2101      	movs	r1, #1
 800c124:	f002 fb5e 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 800c128:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "command", 7))
 800c12a:	2207      	movs	r2, #7
 800c12c:	491a      	ldr	r1, [pc, #104]	; (800c198 <btVspModeCommand+0x88>)
 800c12e:	f008 fab0 	bl	8014692 <strncmp>
 800c132:	2800      	cmp	r0, #0
 800c134:	d010      	beq.n	800c158 <btVspModeCommand+0x48>
	else if (!strncmp((const char *)pcParameterString1, "bridge", 6))
 800c136:	2206      	movs	r2, #6
 800c138:	4918      	ldr	r1, [pc, #96]	; (800c19c <btVspModeCommand+0x8c>)
 800c13a:	0028      	movs	r0, r5
 800c13c:	f008 faa9 	bl	8014692 <strncmp>
 800c140:	2800      	cmp	r0, #0
 800c142:	d01a      	beq.n	800c17a <btVspModeCommand+0x6a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c144:	2213      	movs	r2, #19
 800c146:	4916      	ldr	r1, [pc, #88]	; (800c1a0 <btVspModeCommand+0x90>)
 800c148:	0020      	movs	r0, r4
 800c14a:	f008 f861 	bl	8014210 <memcpy>
}
 800c14e:	2000      	movs	r0, #0
 800c150:	b003      	add	sp, #12
 800c152:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 800c154:	b672      	cpsid	i
 800c156:	e7fe      	b.n	800c156 <btVspModeCommand+0x46>
		result = btVspMode(H23Rx_RUN_VspCommandMode);
 800c158:	3003      	adds	r0, #3
 800c15a:	f7ff ffad 	bl	800c0b8 <btVspMode>
 800c15e:	0005      	movs	r5, r0
		EE_WriteVariable(_EE_H23xVSP, H23Rx_RUN_VspCommandMode);
 800c160:	20fa      	movs	r0, #250	; 0xfa
 800c162:	2103      	movs	r1, #3
 800c164:	0040      	lsls	r0, r0, #1
 800c166:	f7fb fc2b 	bl	80079c0 <EE_WriteVariable>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "VSP command mode\r\n");
 800c16a:	4a0e      	ldr	r2, [pc, #56]	; (800c1a4 <btVspModeCommand+0x94>)
 800c16c:	490e      	ldr	r1, [pc, #56]	; (800c1a8 <btVspModeCommand+0x98>)
 800c16e:	0020      	movs	r0, r4
 800c170:	f008 fa4c 	bl	801460c <sprintf>
	if (H23Rx_ERR_WrongParams == result)
 800c174:	2d02      	cmp	r5, #2
 800c176:	d1ea      	bne.n	800c14e <btVspModeCommand+0x3e>
 800c178:	e7e4      	b.n	800c144 <btVspModeCommand+0x34>
		result = btVspMode(H23Rx_RUN_VspBridgeToUartMode);
 800c17a:	3004      	adds	r0, #4
 800c17c:	f7ff ff9c 	bl	800c0b8 <btVspMode>
 800c180:	0005      	movs	r5, r0
		EE_WriteVariable(_EE_H23xVSP, H23Rx_RUN_VspBridgeToUartMode);
 800c182:	20fa      	movs	r0, #250	; 0xfa
 800c184:	2104      	movs	r1, #4
 800c186:	0040      	lsls	r0, r0, #1
 800c188:	f7fb fc1a 	bl	80079c0 <EE_WriteVariable>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "VSP Bridge-to-UART mode\r\n");
 800c18c:	4a07      	ldr	r2, [pc, #28]	; (800c1ac <btVspModeCommand+0x9c>)
 800c18e:	4906      	ldr	r1, [pc, #24]	; (800c1a8 <btVspModeCommand+0x98>)
 800c190:	0020      	movs	r0, r4
 800c192:	f008 fa3b 	bl	801460c <sprintf>
 800c196:	e7ed      	b.n	800c174 <btVspModeCommand+0x64>
 800c198:	0801d1e8 	.word	0x0801d1e8
 800c19c:	0801bea4 	.word	0x0801bea4
 800c1a0:	0801af64 	.word	0x0801af64
 800c1a4:	0801d1f0 	.word	0x0801d1f0
 800c1a8:	0801d204 	.word	0x0801d204
 800c1ac:	0801d214 	.word	0x0801d214

0800c1b0 <btDownloadScript>:
{
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	0004      	movs	r4, r0
 800c1b6:	000d      	movs	r5, r1
    btEnableHandshakeUart();
 800c1b8:	f7ff fcb0 	bl	800bb1c <btEnableHandshakeUart>
	if (H23Rx_RUN_DownloadScriptViaOta == method)
 800c1bc:	2c05      	cmp	r4, #5
 800c1be:	d004      	beq.n	800c1ca <btDownloadScript+0x1a>
		result = H23Rx_ERR_WrongParams;
 800c1c0:	2002      	movs	r0, #2
	else if (H23Rx_RUN_DownloadScriptViaUart == method)
 800c1c2:	2c06      	cmp	r4, #6
 800c1c4:	d006      	beq.n	800c1d4 <btDownloadScript+0x24>
}
 800c1c6:	b004      	add	sp, #16
 800c1c8:	bd70      	pop	{r4, r5, r6, pc}
		btVspMode(H23Rx_RUN_VspBridgeToUartMode);
 800c1ca:	2004      	movs	r0, #4
 800c1cc:	f7ff ff74 	bl	800c0b8 <btVspMode>
	Module_Status result = H23Rx_OK;
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	e7f8      	b.n	800c1c6 <btDownloadScript+0x16>
		scriptPort = port;
 800c1d4:	4e11      	ldr	r6, [pc, #68]	; (800c21c <btDownloadScript+0x6c>)
 800c1d6:	7035      	strb	r5, [r6, #0]
		stateTransmitBtToMcu = 0;
 800c1d8:	2400      	movs	r4, #0
 800c1da:	4b11      	ldr	r3, [pc, #68]	; (800c220 <btDownloadScript+0x70>)
 800c1dc:	701c      	strb	r4, [r3, #0]
		btVspMode(H23Rx_RUN_VspBridgeToUartMode);
 800c1de:	3002      	adds	r0, #2
 800c1e0:	f7ff ff6a 	bl	800c0b8 <btVspMode>
		EE_WriteVariable(_EE_H23xVSP, H23Rx_RUN_VspBridgeToUartMode);
 800c1e4:	20fa      	movs	r0, #250	; 0xfa
 800c1e6:	2104      	movs	r1, #4
 800c1e8:	0040      	lsls	r0, r0, #1
 800c1ea:	f7fb fbe9 	bl	80079c0 <EE_WriteVariable>
		UpdateBaudrate(PcPort, 115200);
 800c1ee:	21e1      	movs	r1, #225	; 0xe1
 800c1f0:	4b0c      	ldr	r3, [pc, #48]	; (800c224 <btDownloadScript+0x74>)
 800c1f2:	7818      	ldrb	r0, [r3, #0]
 800c1f4:	0249      	lsls	r1, r1, #9
 800c1f6:	f002 f90f 	bl	800e418 <UpdateBaudrate>
		StartScastDMAStream(PORT_BTC_CONN, myID, scriptPort, myID, BIDIRECTIONAL, H23Rx_MAX_NUMBER_OF_DATA_DMA, 0xFFFFFFFF, false);
 800c1fa:	4b0b      	ldr	r3, [pc, #44]	; (800c228 <btDownloadScript+0x78>)
 800c1fc:	7819      	ldrb	r1, [r3, #0]
 800c1fe:	7832      	ldrb	r2, [r6, #0]
 800c200:	9403      	str	r4, [sp, #12]
 800c202:	2301      	movs	r3, #1
 800c204:	425b      	negs	r3, r3
 800c206:	9302      	str	r3, [sp, #8]
 800c208:	4b08      	ldr	r3, [pc, #32]	; (800c22c <btDownloadScript+0x7c>)
 800c20a:	9301      	str	r3, [sp, #4]
 800c20c:	2302      	movs	r3, #2
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	000b      	movs	r3, r1
 800c212:	2006      	movs	r0, #6
 800c214:	f7fd fbc8 	bl	80099a8 <StartScastDMAStream>
	Module_Status result = H23Rx_OK;
 800c218:	2000      	movs	r0, #0
 800c21a:	e7d4      	b.n	800c1c6 <btDownloadScript+0x16>
 800c21c:	2000187c 	.word	0x2000187c
 800c220:	2000187e 	.word	0x2000187e
 800c224:	20000a7f 	.word	0x20000a7f
 800c228:	2000107e 	.word	0x2000107e
 800c22c:	00009c40 	.word	0x00009c40

0800c230 <btDownloadScriptCommand>:
{
 800c230:	b530      	push	{r4, r5, lr}
 800c232:	b085      	sub	sp, #20
 800c234:	0004      	movs	r4, r0
 800c236:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800c238:	2300      	movs	r3, #0
 800c23a:	9303      	str	r3, [sp, #12]
	configASSERT( pcWriteBuffer );
 800c23c:	2c00      	cmp	r4, #0
 800c23e:	d043      	beq.n	800c2c8 <btDownloadScriptCommand+0x98>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c240:	aa03      	add	r2, sp, #12
 800c242:	2101      	movs	r1, #1
 800c244:	f002 face 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
 800c248:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "ota", 3))
 800c24a:	2203      	movs	r2, #3
 800c24c:	4939      	ldr	r1, [pc, #228]	; (800c334 <btDownloadScriptCommand+0x104>)
 800c24e:	f008 fa20 	bl	8014692 <strncmp>
 800c252:	2800      	cmp	r0, #0
 800c254:	d03a      	beq.n	800c2cc <btDownloadScriptCommand+0x9c>
	else if (!strncmp((const char *)pcParameterString1, "uart", 4))
 800c256:	2204      	movs	r2, #4
 800c258:	4937      	ldr	r1, [pc, #220]	; (800c338 <btDownloadScriptCommand+0x108>)
 800c25a:	0028      	movs	r0, r5
 800c25c:	f008 fa19 	bl	8014692 <strncmp>
 800c260:	2800      	cmp	r0, #0
 800c262:	d04d      	beq.n	800c300 <btDownloadScriptCommand+0xd0>
		sprintf( ( char * ) pcWriteBuffer, "Wrong input parameter\r\n");
 800c264:	2218      	movs	r2, #24
 800c266:	4935      	ldr	r1, [pc, #212]	; (800c33c <btDownloadScriptCommand+0x10c>)
 800c268:	0020      	movs	r0, r4
 800c26a:	f007 ffd1 	bl	8014210 <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c26e:	0020      	movs	r0, r4
 800c270:	f7f3 ff52 	bl	8000118 <strlen>
 800c274:	b282      	uxth	r2, r0
 800c276:	4b32      	ldr	r3, [pc, #200]	; (800c340 <btDownloadScriptCommand+0x110>)
 800c278:	7818      	ldrb	r0, [r3, #0]
 800c27a:	2301      	movs	r3, #1
 800c27c:	425b      	negs	r3, r3
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	3333      	adds	r3, #51	; 0x33
 800c282:	0021      	movs	r1, r4
 800c284:	f002 f858 	bl	800e338 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\r\nDone\r\n");
 800c288:	2209      	movs	r2, #9
 800c28a:	492e      	ldr	r1, [pc, #184]	; (800c344 <btDownloadScriptCommand+0x114>)
 800c28c:	0020      	movs	r0, r4
 800c28e:	f007 ffbf 	bl	8014210 <memcpy>
	writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c292:	0020      	movs	r0, r4
 800c294:	f7f3 ff40 	bl	8000118 <strlen>
 800c298:	b282      	uxth	r2, r0
 800c29a:	4b29      	ldr	r3, [pc, #164]	; (800c340 <btDownloadScriptCommand+0x110>)
 800c29c:	7818      	ldrb	r0, [r3, #0]
 800c29e:	2301      	movs	r3, #1
 800c2a0:	425b      	negs	r3, r3
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	3333      	adds	r3, #51	; 0x33
 800c2a6:	0021      	movs	r1, r4
 800c2a8:	f002 f846 	bl	800e338 <writePxMutex>
	memset((char *)pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800c2ac:	2299      	movs	r2, #153	; 0x99
 800c2ae:	0092      	lsls	r2, r2, #2
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	0020      	movs	r0, r4
 800c2b4:	f007 ffb5 	bl	8014222 <memset>
	sprintf((char *)pcWriteBuffer, "\r\n");
 800c2b8:	2203      	movs	r2, #3
 800c2ba:	4923      	ldr	r1, [pc, #140]	; (800c348 <btDownloadScriptCommand+0x118>)
 800c2bc:	0020      	movs	r0, r4
 800c2be:	f007 ffa7 	bl	8014210 <memcpy>
}
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	b005      	add	sp, #20
 800c2c6:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 800c2c8:	b672      	cpsid	i
 800c2ca:	e7fe      	b.n	800c2ca <btDownloadScriptCommand+0x9a>
		sprintf( ( char * ) pcWriteBuffer, "Downloading new smartBASIC program to BT900 via OTA ...\r\n");
 800c2cc:	223a      	movs	r2, #58	; 0x3a
 800c2ce:	491f      	ldr	r1, [pc, #124]	; (800c34c <btDownloadScriptCommand+0x11c>)
 800c2d0:	0020      	movs	r0, r4
 800c2d2:	f007 ff9d 	bl	8014210 <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c2d6:	0020      	movs	r0, r4
 800c2d8:	f7f3 ff1e 	bl	8000118 <strlen>
 800c2dc:	b282      	uxth	r2, r0
 800c2de:	4d18      	ldr	r5, [pc, #96]	; (800c340 <btDownloadScriptCommand+0x110>)
 800c2e0:	7828      	ldrb	r0, [r5, #0]
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	425b      	negs	r3, r3
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	3333      	adds	r3, #51	; 0x33
 800c2ea:	0021      	movs	r1, r4
 800c2ec:	f002 f824 	bl	800e338 <writePxMutex>
		result = btDownloadScript(H23Rx_RUN_DownloadScriptViaOta, PcPort);
 800c2f0:	7829      	ldrb	r1, [r5, #0]
 800c2f2:	2005      	movs	r0, #5
 800c2f4:	f7ff ff5c 	bl	800c1b0 <btDownloadScript>
 800c2f8:	0005      	movs	r5, r0
	if (H23Rx_ERR_WrongParams == result)
 800c2fa:	2d02      	cmp	r5, #2
 800c2fc:	d1c4      	bne.n	800c288 <btDownloadScriptCommand+0x58>
 800c2fe:	e7b1      	b.n	800c264 <btDownloadScriptCommand+0x34>
		sprintf( ( char * ) pcWriteBuffer, "Downloading new smartBASIC program to BT900 via UART. Please set baudrate to 115200 then open this port again and load the smartBASIC file\r\n");
 800c300:	228d      	movs	r2, #141	; 0x8d
 800c302:	4913      	ldr	r1, [pc, #76]	; (800c350 <btDownloadScriptCommand+0x120>)
 800c304:	0020      	movs	r0, r4
 800c306:	f007 ff83 	bl	8014210 <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c30a:	0020      	movs	r0, r4
 800c30c:	f7f3 ff04 	bl	8000118 <strlen>
 800c310:	b282      	uxth	r2, r0
 800c312:	4d0b      	ldr	r5, [pc, #44]	; (800c340 <btDownloadScriptCommand+0x110>)
 800c314:	7828      	ldrb	r0, [r5, #0]
 800c316:	2301      	movs	r3, #1
 800c318:	425b      	negs	r3, r3
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	3333      	adds	r3, #51	; 0x33
 800c31e:	0021      	movs	r1, r4
 800c320:	f002 f80a 	bl	800e338 <writePxMutex>
		result = btDownloadScript(H23Rx_RUN_DownloadScriptViaUart, PcPort);
 800c324:	7829      	ldrb	r1, [r5, #0]
 800c326:	2006      	movs	r0, #6
 800c328:	f7ff ff42 	bl	800c1b0 <btDownloadScript>
 800c32c:	0005      	movs	r5, r0
		btWaitEventFinishTransmission();
 800c32e:	f7ff fc37 	bl	800bba0 <btWaitEventFinishTransmission>
 800c332:	e7e2      	b.n	800c2fa <btDownloadScriptCommand+0xca>
 800c334:	0801d230 	.word	0x0801d230
 800c338:	0801d270 	.word	0x0801d270
 800c33c:	0801d0e4 	.word	0x0801d0e4
 800c340:	20000a7f 	.word	0x20000a7f
 800c344:	0801d308 	.word	0x0801d308
 800c348:	0801c4c0 	.word	0x0801c4c0
 800c34c:	0801d234 	.word	0x0801d234
 800c350:	0801d278 	.word	0x0801d278

0800c354 <btRunScript>:
{
 800c354:	b510      	push	{r4, lr}
	btDisableHandshakeUart();
 800c356:	f7ff fc01 	bl	800bb5c <btDisableHandshakeUart>
	BT_SET_VSP_PIN();
 800c35a:	2180      	movs	r1, #128	; 0x80
 800c35c:	2201      	movs	r2, #1
 800c35e:	01c9      	lsls	r1, r1, #7
 800c360:	4805      	ldr	r0, [pc, #20]	; (800c378 <btRunScript+0x24>)
 800c362:	f005 ff63 	bl	801222c <HAL_GPIO_WritePin>
	BT_CLEAR_MODE_PIN();
 800c366:	2090      	movs	r0, #144	; 0x90
 800c368:	2200      	movs	r2, #0
 800c36a:	2180      	movs	r1, #128	; 0x80
 800c36c:	05c0      	lsls	r0, r0, #23
 800c36e:	f005 ff5d 	bl	801222c <HAL_GPIO_WritePin>
	btResetBt900Module();
 800c372:	f7ff fe77 	bl	800c064 <btResetBt900Module>
}
 800c376:	bd10      	pop	{r4, pc}
 800c378:	48000400 	.word	0x48000400

0800c37c <btRunScriptCommand>:
{
 800c37c:	b510      	push	{r4, lr}
 800c37e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800c380:	d008      	beq.n	800c394 <btRunScriptCommand+0x18>
	btRunScript();
 800c382:	f7ff ffe7 	bl	800c354 <btRunScript>
	sprintf( ( char * ) pcWriteBuffer, "Run $autorun$ script in the BT900 board");
 800c386:	2228      	movs	r2, #40	; 0x28
 800c388:	4903      	ldr	r1, [pc, #12]	; (800c398 <btRunScriptCommand+0x1c>)
 800c38a:	0020      	movs	r0, r4
 800c38c:	f007 ff40 	bl	8014210 <memcpy>
}
 800c390:	2000      	movs	r0, #0
 800c392:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800c394:	b672      	cpsid	i
 800c396:	e7fe      	b.n	800c396 <btRunScriptCommand+0x1a>
 800c398:	0801d314 	.word	0x0801d314

0800c39c <Module_Peripheral_Init>:
{
 800c39c:	b510      	push	{r4, lr}
 800c39e:	b086      	sub	sp, #24
	memset(cMessage[PORT_BTC_CONN-1], 0, MAX_MESSAGE_SIZE);
 800c3a0:	2238      	movs	r2, #56	; 0x38
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	481d      	ldr	r0, [pc, #116]	; (800c41c <Module_Peripheral_Init+0x80>)
 800c3a6:	f007 ff3c 	bl	8014222 <memset>
	messageLength[PORT_BTC_CONN-1] = 0;
 800c3aa:	2400      	movs	r4, #0
 800c3ac:	4b1c      	ldr	r3, [pc, #112]	; (800c420 <Module_Peripheral_Init+0x84>)
 800c3ae:	715c      	strb	r4, [r3, #5]
  MX_USART1_UART_Init();
 800c3b0:	f001 fdcc 	bl	800df4c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800c3b4:	f001 fde2 	bl	800df7c <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 800c3b8:	f001 fe10 	bl	800dfdc <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800c3bc:	f001 fe26 	bl	800e00c <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800c3c0:	f001 fe3c 	bl	800e03c <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 800c3c4:	f001 fdf2 	bl	800dfac <MX_USART3_UART_Init>
	EE_ReadVariable(_EE_H23xVSP, &vsp_mode);
 800c3c8:	20fa      	movs	r0, #250	; 0xfa
 800c3ca:	2116      	movs	r1, #22
 800c3cc:	4469      	add	r1, sp
 800c3ce:	0040      	lsls	r0, r0, #1
 800c3d0:	f7fb faca 	bl	8007968 <EE_ReadVariable>
	BT_RST_GPIO_Init();
 800c3d4:	f001 f9ee 	bl	800d7b4 <BT_RST_GPIO_Init>
  cleanListBtcDevices();
 800c3d8:	f7ff fb4e 	bl	800ba78 <cleanListBtcDevices>
  UpdateBaudrate(PORT_BTC_CONN, 115200); /* Normal baudrate for BT900 */
 800c3dc:	21e1      	movs	r1, #225	; 0xe1
 800c3de:	0249      	lsls	r1, r1, #9
 800c3e0:	2006      	movs	r0, #6
 800c3e2:	f002 f819 	bl	800e418 <UpdateBaudrate>
  stateTransmitBtToMcu = 0;
 800c3e6:	4b0f      	ldr	r3, [pc, #60]	; (800c424 <Module_Peripheral_Init+0x88>)
 800c3e8:	701c      	strb	r4, [r3, #0]
  stateScanDevices = 0;
 800c3ea:	4b0f      	ldr	r3, [pc, #60]	; (800c428 <Module_Peripheral_Init+0x8c>)
 800c3ec:	701c      	strb	r4, [r3, #0]
  dstModule = 0;
 800c3ee:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <Module_Peripheral_Init+0x90>)
 800c3f0:	701c      	strb	r4, [r3, #0]
  handleUartTerminal = xEventGroupCreate();
 800c3f2:	f002 fabb 	bl	800e96c <xEventGroupCreate>
 800c3f6:	4b0e      	ldr	r3, [pc, #56]	; (800c430 <Module_Peripheral_Init+0x94>)
 800c3f8:	6018      	str	r0, [r3, #0]
	xTaskCreate(ControlBluetoothTask, (const char *) "ControlBluetooth", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &ControlBluetoothTaskHandle);
 800c3fa:	22a0      	movs	r2, #160	; 0xa0
 800c3fc:	9403      	str	r4, [sp, #12]
 800c3fe:	9402      	str	r4, [sp, #8]
 800c400:	4b0c      	ldr	r3, [pc, #48]	; (800c434 <Module_Peripheral_Init+0x98>)
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	2303      	movs	r3, #3
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	2300      	movs	r3, #0
 800c40a:	0052      	lsls	r2, r2, #1
 800c40c:	490a      	ldr	r1, [pc, #40]	; (800c438 <Module_Peripheral_Init+0x9c>)
 800c40e:	480b      	ldr	r0, [pc, #44]	; (800c43c <Module_Peripheral_Init+0xa0>)
 800c410:	f002 ffac 	bl	800f36c <xTaskGenericCreate>
	btRunScript();
 800c414:	f7ff ff9e 	bl	800c354 <btRunScript>
}
 800c418:	b006      	add	sp, #24
 800c41a:	bd10      	pop	{r4, pc}
 800c41c:	20000e28 	.word	0x20000e28
 800c420:	20000f38 	.word	0x20000f38
 800c424:	2000187e 	.word	0x2000187e
 800c428:	2000187d 	.word	0x2000187d
 800c42c:	200017a8 	.word	0x200017a8
 800c430:	200017ac 	.word	0x200017ac
 800c434:	200017a4 	.word	0x200017a4
 800c438:	0801d33c 	.word	0x0801d33c
 800c43c:	0800be21 	.word	0x0800be21

0800c440 <Module_MessagingTask>:
{
 800c440:	b570      	push	{r4, r5, r6, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	0014      	movs	r4, r2
 800c446:	ab06      	add	r3, sp, #24
 800c448:	781a      	ldrb	r2, [r3, #0]
	switch (code)
 800c44a:	4b48      	ldr	r3, [pc, #288]	; (800c56c <Module_MessagingTask+0x12c>)
 800c44c:	469c      	mov	ip, r3
 800c44e:	4460      	add	r0, ip
 800c450:	b283      	uxth	r3, r0
 800c452:	2b15      	cmp	r3, #21
 800c454:	d803      	bhi.n	800c45e <Module_MessagingTask+0x1e>
 800c456:	0098      	lsls	r0, r3, #2
 800c458:	4b45      	ldr	r3, [pc, #276]	; (800c570 <Module_MessagingTask+0x130>)
 800c45a:	581b      	ldr	r3, [r3, r0]
 800c45c:	469f      	mov	pc, r3
	Module_Status result = H23Rx_OK;
 800c45e:	2001      	movs	r0, #1
}
 800c460:	b002      	add	sp, #8
 800c462:	bd70      	pop	{r4, r5, r6, pc}
			btDownloadScript(H23Rx_RUN_DownloadScriptViaOta, src);
 800c464:	0021      	movs	r1, r4
 800c466:	2005      	movs	r0, #5
 800c468:	f7ff fea2 	bl	800c1b0 <btDownloadScript>
	Module_Status result = H23Rx_OK;
 800c46c:	2000      	movs	r0, #0
			break;
 800c46e:	e7f7      	b.n	800c460 <Module_MessagingTask+0x20>
			btDownloadScript(H23Rx_RUN_DownloadScriptViaUart, src);
 800c470:	0021      	movs	r1, r4
 800c472:	2006      	movs	r0, #6
 800c474:	f7ff fe9c 	bl	800c1b0 <btDownloadScript>
	Module_Status result = H23Rx_OK;
 800c478:	2000      	movs	r0, #0
			break;
 800c47a:	e7f1      	b.n	800c460 <Module_MessagingTask+0x20>
			btRunScript();
 800c47c:	f7ff ff6a 	bl	800c354 <btRunScript>
	Module_Status result = H23Rx_OK;
 800c480:	2000      	movs	r0, #0
			break;
 800c482:	e7ed      	b.n	800c460 <Module_MessagingTask+0x20>
			btVspMode(H23Rx_RUN_VspCommandMode);
 800c484:	2003      	movs	r0, #3
 800c486:	f7ff fe17 	bl	800c0b8 <btVspMode>
	Module_Status result = H23Rx_OK;
 800c48a:	2000      	movs	r0, #0
			break;
 800c48c:	e7e8      	b.n	800c460 <Module_MessagingTask+0x20>
			btVspMode(H23Rx_RUN_VspBridgeToUartMode);
 800c48e:	2004      	movs	r0, #4
 800c490:	f7ff fe12 	bl	800c0b8 <btVspMode>
	Module_Status result = H23Rx_OK;
 800c494:	2000      	movs	r0, #0
			break;
 800c496:	e7e3      	b.n	800c460 <Module_MessagingTask+0x20>
			IND_ON();
 800c498:	2180      	movs	r1, #128	; 0x80
 800c49a:	2090      	movs	r0, #144	; 0x90
 800c49c:	2201      	movs	r2, #1
 800c49e:	0109      	lsls	r1, r1, #4
 800c4a0:	05c0      	lsls	r0, r0, #23
 800c4a2:	f005 fec3 	bl	801222c <HAL_GPIO_WritePin>
	Module_Status result = H23Rx_OK;
 800c4a6:	2000      	movs	r0, #0
			break;
 800c4a8:	e7da      	b.n	800c460 <Module_MessagingTask+0x20>
			IND_OFF();
 800c4aa:	2180      	movs	r1, #128	; 0x80
 800c4ac:	2090      	movs	r0, #144	; 0x90
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	0109      	lsls	r1, r1, #4
 800c4b2:	05c0      	lsls	r0, r0, #23
 800c4b4:	f005 feba 	bl	801222c <HAL_GPIO_WritePin>
	Module_Status result = H23Rx_OK;
 800c4b8:	2000      	movs	r0, #0
      break;
 800c4ba:	e7d1      	b.n	800c460 <Module_MessagingTask+0x20>
      stateScanDevices = 0;
 800c4bc:	2500      	movs	r5, #0
 800c4be:	4b2d      	ldr	r3, [pc, #180]	; (800c574 <Module_MessagingTask+0x134>)
 800c4c0:	701d      	strb	r5, [r3, #0]
      cleanListBtcDevices();
 800c4c2:	f7ff fad9 	bl	800ba78 <cleanListBtcDevices>
			SendMessageFromPort(PORT_BTC_CONN, 0, 0, CODE_H23Rx_SCAN_INQUIRE, 0);
 800c4c6:	9500      	str	r5, [sp, #0]
 800c4c8:	4b2b      	ldr	r3, [pc, #172]	; (800c578 <Module_MessagingTask+0x138>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	2006      	movs	r0, #6
 800c4d0:	f7fd f81c 	bl	800950c <SendMessageFromPort>
      dstModule = src;
 800c4d4:	4b29      	ldr	r3, [pc, #164]	; (800c57c <Module_MessagingTask+0x13c>)
 800c4d6:	701c      	strb	r4, [r3, #0]
	Module_Status result = H23Rx_OK;
 800c4d8:	2000      	movs	r0, #0
      break;
 800c4da:	e7c1      	b.n	800c460 <Module_MessagingTask+0x20>
      if (1 == stateScanDevices)
 800c4dc:	4b25      	ldr	r3, [pc, #148]	; (800c574 <Module_MessagingTask+0x134>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d133      	bne.n	800c54c <Module_MessagingTask+0x10c>
        lenPar = messageLength[port-1] - shift;
 800c4e4:	3901      	subs	r1, #1
        if ( ('[' == cMessage[port-1][1+shift]) && (']' == cMessage[port-1][messageLength[port-1] - 2]) )
 800c4e6:	1c55      	adds	r5, r2, #1
 800c4e8:	00cb      	lsls	r3, r1, #3
 800c4ea:	1a5b      	subs	r3, r3, r1
 800c4ec:	00db      	lsls	r3, r3, #3
 800c4ee:	4824      	ldr	r0, [pc, #144]	; (800c580 <Module_MessagingTask+0x140>)
 800c4f0:	18c3      	adds	r3, r0, r3
 800c4f2:	5d5b      	ldrb	r3, [r3, r5]
 800c4f4:	2b5b      	cmp	r3, #91	; 0x5b
 800c4f6:	d10b      	bne.n	800c510 <Module_MessagingTask+0xd0>
        lenPar = messageLength[port-1] - shift;
 800c4f8:	4b22      	ldr	r3, [pc, #136]	; (800c584 <Module_MessagingTask+0x144>)
 800c4fa:	5c5e      	ldrb	r6, [r3, r1]
        if ( ('[' == cMessage[port-1][1+shift]) && (']' == cMessage[port-1][messageLength[port-1] - 2]) )
 800c4fc:	00c8      	lsls	r0, r1, #3
 800c4fe:	1a40      	subs	r0, r0, r1
 800c500:	00c0      	lsls	r0, r0, #3
 800c502:	4b1f      	ldr	r3, [pc, #124]	; (800c580 <Module_MessagingTask+0x140>)
 800c504:	181b      	adds	r3, r3, r0
 800c506:	199b      	adds	r3, r3, r6
 800c508:	3b02      	subs	r3, #2
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b5d      	cmp	r3, #93	; 0x5d
 800c50e:	d00a      	beq.n	800c526 <Module_MessagingTask+0xe6>
          memcpy((char *)&messageParams[0], (char *)pcMessageWrongParam, strlen((char *)pcMessageWrongParam));
 800c510:	2212      	movs	r2, #18
 800c512:	491d      	ldr	r1, [pc, #116]	; (800c588 <Module_MessagingTask+0x148>)
 800c514:	481d      	ldr	r0, [pc, #116]	; (800c58c <Module_MessagingTask+0x14c>)
 800c516:	f007 fe7b 	bl	8014210 <memcpy>
          SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char *)pcMessageWrongParam));
 800c51a:	2212      	movs	r2, #18
 800c51c:	2118      	movs	r1, #24
 800c51e:	0020      	movs	r0, r4
 800c520:	f7fd fa1c 	bl	800995c <SendMessageToModule>
 800c524:	e01c      	b.n	800c560 <Module_MessagingTask+0x120>
        lenPar = messageLength[port-1] - shift;
 800c526:	1ab6      	subs	r6, r6, r2
 800c528:	b2f6      	uxtb	r6, r6
          memcpy((char *)&messageParams[0], (char *)&cMessage[port-1][1 + shift], lenPar - 2);
 800c52a:	1eb2      	subs	r2, r6, #2
 800c52c:	1941      	adds	r1, r0, r5
 800c52e:	4d14      	ldr	r5, [pc, #80]	; (800c580 <Module_MessagingTask+0x140>)
 800c530:	1949      	adds	r1, r1, r5
 800c532:	4816      	ldr	r0, [pc, #88]	; (800c58c <Module_MessagingTask+0x14c>)
 800c534:	f007 fe6c 	bl	8014210 <memcpy>
          SendMessageFromPort(PORT_BTC_CONN, 0, 0, CODE_H23Rx_CONNECT_INQUIRE, lenPar - 2);
 800c538:	3e02      	subs	r6, #2
 800c53a:	b2b6      	uxth	r6, r6
 800c53c:	9600      	str	r6, [sp, #0]
 800c53e:	4b14      	ldr	r3, [pc, #80]	; (800c590 <Module_MessagingTask+0x150>)
 800c540:	2200      	movs	r2, #0
 800c542:	2100      	movs	r1, #0
 800c544:	2006      	movs	r0, #6
 800c546:	f7fc ffe1 	bl	800950c <SendMessageFromPort>
 800c54a:	e009      	b.n	800c560 <Module_MessagingTask+0x120>
        memcpy((char *)&messageParams[0], (char *)pcMessageMustScan, strlen((char *)pcMessageMustScan));
 800c54c:	2220      	movs	r2, #32
 800c54e:	4911      	ldr	r1, [pc, #68]	; (800c594 <Module_MessagingTask+0x154>)
 800c550:	480e      	ldr	r0, [pc, #56]	; (800c58c <Module_MessagingTask+0x14c>)
 800c552:	f007 fe5d 	bl	8014210 <memcpy>
        SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char *)pcMessageMustScan));
 800c556:	2220      	movs	r2, #32
 800c558:	2118      	movs	r1, #24
 800c55a:	0020      	movs	r0, r4
 800c55c:	f7fd f9fe 	bl	800995c <SendMessageToModule>
      dstModule = src;
 800c560:	4b06      	ldr	r3, [pc, #24]	; (800c57c <Module_MessagingTask+0x13c>)
 800c562:	701c      	strb	r4, [r3, #0]
	Module_Status result = H23Rx_OK;
 800c564:	2000      	movs	r0, #0
      break;
 800c566:	e77b      	b.n	800c460 <Module_MessagingTask+0x20>
	Module_Status result = H23Rx_OK;
 800c568:	2000      	movs	r0, #0
 800c56a:	e779      	b.n	800c460 <Module_MessagingTask+0x20>
 800c56c:	fffff95c 	.word	0xfffff95c
 800c570:	0801d350 	.word	0x0801d350
 800c574:	2000187d 	.word	0x2000187d
 800c578:	000006b6 	.word	0x000006b6
 800c57c:	200017a8 	.word	0x200017a8
 800c580:	20000d10 	.word	0x20000d10
 800c584:	20000f38 	.word	0x20000f38
 800c588:	0801af64 	.word	0x0801af64
 800c58c:	20000f40 	.word	0x20000f40
 800c590:	000006b9 	.word	0x000006b9
 800c594:	0801d0fc 	.word	0x0801d0fc

0800c598 <GetPort>:
	if (huart->Instance == USART4)
 800c598:	6800      	ldr	r0, [r0, #0]
 800c59a:	4b11      	ldr	r3, [pc, #68]	; (800c5e0 <GetPort+0x48>)
 800c59c:	4298      	cmp	r0, r3
 800c59e:	d015      	beq.n	800c5cc <GetPort+0x34>
	else if (huart->Instance == USART2)
 800c5a0:	4b10      	ldr	r3, [pc, #64]	; (800c5e4 <GetPort+0x4c>)
 800c5a2:	4298      	cmp	r0, r3
 800c5a4:	d014      	beq.n	800c5d0 <GetPort+0x38>
	else if (huart->Instance == USART6)
 800c5a6:	4b10      	ldr	r3, [pc, #64]	; (800c5e8 <GetPort+0x50>)
 800c5a8:	4298      	cmp	r0, r3
 800c5aa:	d013      	beq.n	800c5d4 <GetPort+0x3c>
	else if (huart->Instance == USART1)
 800c5ac:	4b0f      	ldr	r3, [pc, #60]	; (800c5ec <GetPort+0x54>)
 800c5ae:	4298      	cmp	r0, r3
 800c5b0:	d012      	beq.n	800c5d8 <GetPort+0x40>
	else if (huart->Instance == USART5)
 800c5b2:	4b0f      	ldr	r3, [pc, #60]	; (800c5f0 <GetPort+0x58>)
 800c5b4:	4298      	cmp	r0, r3
 800c5b6:	d011      	beq.n	800c5dc <GetPort+0x44>
			return P6;
 800c5b8:	4b0e      	ldr	r3, [pc, #56]	; (800c5f4 <GetPort+0x5c>)
 800c5ba:	469c      	mov	ip, r3
 800c5bc:	4460      	add	r0, ip
 800c5be:	1e43      	subs	r3, r0, #1
 800c5c0:	4198      	sbcs	r0, r3
 800c5c2:	4240      	negs	r0, r0
 800c5c4:	2305      	movs	r3, #5
 800c5c6:	4398      	bics	r0, r3
 800c5c8:	3006      	adds	r0, #6
}
 800c5ca:	4770      	bx	lr
			return P1;
 800c5cc:	2001      	movs	r0, #1
 800c5ce:	e7fc      	b.n	800c5ca <GetPort+0x32>
			return P2;
 800c5d0:	2002      	movs	r0, #2
 800c5d2:	e7fa      	b.n	800c5ca <GetPort+0x32>
			return P3;
 800c5d4:	2003      	movs	r0, #3
 800c5d6:	e7f8      	b.n	800c5ca <GetPort+0x32>
			return P4;
 800c5d8:	2004      	movs	r0, #4
 800c5da:	e7f6      	b.n	800c5ca <GetPort+0x32>
			return P5;
 800c5dc:	2005      	movs	r0, #5
 800c5de:	e7f4      	b.n	800c5ca <GetPort+0x32>
 800c5e0:	40004c00 	.word	0x40004c00
 800c5e4:	40004400 	.word	0x40004400
 800c5e8:	40011400 	.word	0x40011400
 800c5ec:	40013800 	.word	0x40013800
 800c5f0:	40005000 	.word	0x40005000
 800c5f4:	bfffb800 	.word	0xbfffb800

0800c5f8 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c5f8:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c5fa:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c600:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c602:	2280      	movs	r2, #128	; 0x80
 800c604:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c606:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c608:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c60a:	3320      	adds	r3, #32
 800c60c:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c60e:	2380      	movs	r3, #128	; 0x80
 800c610:	019b      	lsls	r3, r3, #6
 800c612:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c614:	f004 fe56 	bl	80112c4 <HAL_DMA_Init>
}
 800c618:	bd10      	pop	{r4, pc}

0800c61a <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c61a:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c61c:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c61e:	2310      	movs	r3, #16
 800c620:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c622:	2300      	movs	r3, #0
 800c624:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c626:	2280      	movs	r2, #128	; 0x80
 800c628:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c62a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c62c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c62e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c630:	2380      	movs	r3, #128	; 0x80
 800c632:	019b      	lsls	r3, r3, #6
 800c634:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c636:	f004 fe45 	bl	80112c4 <HAL_DMA_Init>
}
 800c63a:	bd10      	pop	{r4, pc}

0800c63c <DMA_Init>:
{
 800c63c:	b510      	push	{r4, lr}
 800c63e:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800c640:	4b20      	ldr	r3, [pc, #128]	; (800c6c4 <DMA_Init+0x88>)
 800c642:	6959      	ldr	r1, [r3, #20]
 800c644:	2201      	movs	r2, #1
 800c646:	4311      	orrs	r1, r2
 800c648:	6159      	str	r1, [r3, #20]
 800c64a:	6959      	ldr	r1, [r3, #20]
 800c64c:	400a      	ands	r2, r1
 800c64e:	9200      	str	r2, [sp, #0]
 800c650:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800c652:	6959      	ldr	r1, [r3, #20]
 800c654:	2202      	movs	r2, #2
 800c656:	4311      	orrs	r1, r2
 800c658:	6159      	str	r1, [r3, #20]
 800c65a:	695b      	ldr	r3, [r3, #20]
 800c65c:	401a      	ands	r2, r3
 800c65e:	9201      	str	r2, [sp, #4]
 800c660:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800c662:	4c19      	ldr	r4, [pc, #100]	; (800c6c8 <DMA_Init+0x8c>)
 800c664:	4919      	ldr	r1, [pc, #100]	; (800c6cc <DMA_Init+0x90>)
 800c666:	0020      	movs	r0, r4
 800c668:	f7ff ffc6 	bl	800c5f8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800c66c:	0020      	movs	r0, r4
 800c66e:	3038      	adds	r0, #56	; 0x38
 800c670:	4917      	ldr	r1, [pc, #92]	; (800c6d0 <DMA_Init+0x94>)
 800c672:	f7ff ffc1 	bl	800c5f8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800c676:	0020      	movs	r0, r4
 800c678:	3070      	adds	r0, #112	; 0x70
 800c67a:	4916      	ldr	r1, [pc, #88]	; (800c6d4 <DMA_Init+0x98>)
 800c67c:	f7ff ffbc 	bl	800c5f8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800c680:	0020      	movs	r0, r4
 800c682:	30a8      	adds	r0, #168	; 0xa8
 800c684:	4914      	ldr	r1, [pc, #80]	; (800c6d8 <DMA_Init+0x9c>)
 800c686:	f7ff ffb7 	bl	800c5f8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800c68a:	0020      	movs	r0, r4
 800c68c:	30e0      	adds	r0, #224	; 0xe0
 800c68e:	4913      	ldr	r1, [pc, #76]	; (800c6dc <DMA_Init+0xa0>)
 800c690:	f7ff ffb2 	bl	800c5f8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800c694:	0020      	movs	r0, r4
 800c696:	3019      	adds	r0, #25
 800c698:	30ff      	adds	r0, #255	; 0xff
 800c69a:	4911      	ldr	r1, [pc, #68]	; (800c6e0 <DMA_Init+0xa4>)
 800c69c:	f7ff ffac 	bl	800c5f8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800c6a0:	4c10      	ldr	r4, [pc, #64]	; (800c6e4 <DMA_Init+0xa8>)
 800c6a2:	4911      	ldr	r1, [pc, #68]	; (800c6e8 <DMA_Init+0xac>)
 800c6a4:	0020      	movs	r0, r4
 800c6a6:	f7ff ffb8 	bl	800c61a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800c6aa:	0020      	movs	r0, r4
 800c6ac:	3038      	adds	r0, #56	; 0x38
 800c6ae:	490f      	ldr	r1, [pc, #60]	; (800c6ec <DMA_Init+0xb0>)
 800c6b0:	f7ff ffb3 	bl	800c61a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800c6b4:	0020      	movs	r0, r4
 800c6b6:	3070      	adds	r0, #112	; 0x70
 800c6b8:	490d      	ldr	r1, [pc, #52]	; (800c6f0 <DMA_Init+0xb4>)
 800c6ba:	f7ff ffae 	bl	800c61a <DMA_MSG_TX_CH_Init>
}
 800c6be:	b002      	add	sp, #8
 800c6c0:	bd10      	pop	{r4, pc}
 800c6c2:	46c0      	nop			; (mov r8, r8)
 800c6c4:	40021000 	.word	0x40021000
 800c6c8:	20001880 	.word	0x20001880
 800c6cc:	40020008 	.word	0x40020008
 800c6d0:	40020030 	.word	0x40020030
 800c6d4:	40020058 	.word	0x40020058
 800c6d8:	4002006c 	.word	0x4002006c
 800c6dc:	4002041c 	.word	0x4002041c
 800c6e0:	40020430 	.word	0x40020430
 800c6e4:	200019d0 	.word	0x200019d0
 800c6e8:	4002001c 	.word	0x4002001c
 800c6ec:	40020044 	.word	0x40020044
 800c6f0:	40020080 	.word	0x40020080

0800c6f4 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c6f4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c6f6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c6fc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800c6fe:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c700:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c702:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c704:	3320      	adds	r3, #32
 800c706:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800c708:	2380      	movs	r3, #128	; 0x80
 800c70a:	015b      	lsls	r3, r3, #5
 800c70c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c70e:	f004 fdd9 	bl	80112c4 <HAL_DMA_Init>
}
 800c712:	bd10      	pop	{r4, pc}

0800c714 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800c714:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c716:	6803      	ldr	r3, [r0, #0]
 800c718:	4821      	ldr	r0, [pc, #132]	; (800c7a0 <SetupDMAInterrupts+0x8c>)
 800c71a:	4283      	cmp	r3, r0
 800c71c:	d037      	beq.n	800c78e <SetupDMAInterrupts+0x7a>
 800c71e:	d90e      	bls.n	800c73e <SetupDMAInterrupts+0x2a>
 800c720:	4820      	ldr	r0, [pc, #128]	; (800c7a4 <SetupDMAInterrupts+0x90>)
 800c722:	4283      	cmp	r3, r0
 800c724:	d033      	beq.n	800c78e <SetupDMAInterrupts+0x7a>
 800c726:	d919      	bls.n	800c75c <SetupDMAInterrupts+0x48>
 800c728:	481f      	ldr	r0, [pc, #124]	; (800c7a8 <SetupDMAInterrupts+0x94>)
 800c72a:	4283      	cmp	r3, r0
 800c72c:	d024      	beq.n	800c778 <SetupDMAInterrupts+0x64>
 800c72e:	d92b      	bls.n	800c788 <SetupDMAInterrupts+0x74>
 800c730:	4a1e      	ldr	r2, [pc, #120]	; (800c7ac <SetupDMAInterrupts+0x98>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d020      	beq.n	800c778 <SetupDMAInterrupts+0x64>
 800c736:	4a1e      	ldr	r2, [pc, #120]	; (800c7b0 <SetupDMAInterrupts+0x9c>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d01d      	beq.n	800c778 <SetupDMAInterrupts+0x64>
 800c73c:	e00d      	b.n	800c75a <SetupDMAInterrupts+0x46>
 800c73e:	4a1d      	ldr	r2, [pc, #116]	; (800c7b4 <SetupDMAInterrupts+0xa0>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d107      	bne.n	800c754 <SetupDMAInterrupts+0x40>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800c744:	2200      	movs	r2, #0
 800c746:	2009      	movs	r0, #9
 800c748:	f004 fc16 	bl	8010f78 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800c74c:	2009      	movs	r0, #9
 800c74e:	f004 fc45 	bl	8010fdc <HAL_NVIC_EnableIRQ>
			break;
 800c752:	e002      	b.n	800c75a <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800c754:	4a18      	ldr	r2, [pc, #96]	; (800c7b8 <SetupDMAInterrupts+0xa4>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d019      	beq.n	800c78e <SetupDMAInterrupts+0x7a>
			break;
		
		default:
			break;
	}			
}
 800c75a:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c75c:	4817      	ldr	r0, [pc, #92]	; (800c7bc <SetupDMAInterrupts+0xa8>)
 800c75e:	4283      	cmp	r3, r0
 800c760:	d00a      	beq.n	800c778 <SetupDMAInterrupts+0x64>
 800c762:	d903      	bls.n	800c76c <SetupDMAInterrupts+0x58>
 800c764:	4a16      	ldr	r2, [pc, #88]	; (800c7c0 <SetupDMAInterrupts+0xac>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d006      	beq.n	800c778 <SetupDMAInterrupts+0x64>
 800c76a:	e7f6      	b.n	800c75a <SetupDMAInterrupts+0x46>
 800c76c:	4a15      	ldr	r2, [pc, #84]	; (800c7c4 <SetupDMAInterrupts+0xb0>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d002      	beq.n	800c778 <SetupDMAInterrupts+0x64>
 800c772:	4a15      	ldr	r2, [pc, #84]	; (800c7c8 <SetupDMAInterrupts+0xb4>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d1f0      	bne.n	800c75a <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800c778:	2200      	movs	r2, #0
 800c77a:	200b      	movs	r0, #11
 800c77c:	f004 fbfc 	bl	8010f78 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c780:	200b      	movs	r0, #11
 800c782:	f004 fc2b 	bl	8010fdc <HAL_NVIC_EnableIRQ>
}
 800c786:	e7e8      	b.n	800c75a <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800c788:	4a10      	ldr	r2, [pc, #64]	; (800c7cc <SetupDMAInterrupts+0xb8>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d1e5      	bne.n	800c75a <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800c78e:	2200      	movs	r2, #0
 800c790:	200a      	movs	r0, #10
 800c792:	f004 fbf1 	bl	8010f78 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c796:	200a      	movs	r0, #10
 800c798:	f004 fc20 	bl	8010fdc <HAL_NVIC_EnableIRQ>
			break;
 800c79c:	e7dd      	b.n	800c75a <SetupDMAInterrupts+0x46>
 800c79e:	46c0      	nop			; (mov r8, r8)
 800c7a0:	40020030 	.word	0x40020030
 800c7a4:	40020408 	.word	0x40020408
 800c7a8:	40020430 	.word	0x40020430
 800c7ac:	40020444 	.word	0x40020444
 800c7b0:	40020458 	.word	0x40020458
 800c7b4:	40020008 	.word	0x40020008
 800c7b8:	4002001c 	.word	0x4002001c
 800c7bc:	4002006c 	.word	0x4002006c
 800c7c0:	40020080 	.word	0x40020080
 800c7c4:	40020044 	.word	0x40020044
 800c7c8:	40020058 	.word	0x40020058
 800c7cc:	4002041c 	.word	0x4002041c

0800c7d0 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800c7d0:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c7d2:	6803      	ldr	r3, [r0, #0]
 800c7d4:	491b      	ldr	r1, [pc, #108]	; (800c844 <UnSetupDMAInterrupts+0x74>)
 800c7d6:	428b      	cmp	r3, r1
 800c7d8:	d02f      	beq.n	800c83a <UnSetupDMAInterrupts+0x6a>
 800c7da:	d90e      	bls.n	800c7fa <UnSetupDMAInterrupts+0x2a>
 800c7dc:	491a      	ldr	r1, [pc, #104]	; (800c848 <UnSetupDMAInterrupts+0x78>)
 800c7de:	428b      	cmp	r3, r1
 800c7e0:	d02b      	beq.n	800c83a <UnSetupDMAInterrupts+0x6a>
 800c7e2:	d915      	bls.n	800c810 <UnSetupDMAInterrupts+0x40>
 800c7e4:	4919      	ldr	r1, [pc, #100]	; (800c84c <UnSetupDMAInterrupts+0x7c>)
 800c7e6:	428b      	cmp	r3, r1
 800c7e8:	d020      	beq.n	800c82c <UnSetupDMAInterrupts+0x5c>
 800c7ea:	d923      	bls.n	800c834 <UnSetupDMAInterrupts+0x64>
 800c7ec:	4a18      	ldr	r2, [pc, #96]	; (800c850 <UnSetupDMAInterrupts+0x80>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d01c      	beq.n	800c82c <UnSetupDMAInterrupts+0x5c>
 800c7f2:	4a18      	ldr	r2, [pc, #96]	; (800c854 <UnSetupDMAInterrupts+0x84>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d019      	beq.n	800c82c <UnSetupDMAInterrupts+0x5c>
 800c7f8:	e009      	b.n	800c80e <UnSetupDMAInterrupts+0x3e>
 800c7fa:	4a17      	ldr	r2, [pc, #92]	; (800c858 <UnSetupDMAInterrupts+0x88>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d103      	bne.n	800c808 <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800c800:	2009      	movs	r0, #9
 800c802:	f004 fbf5 	bl	8010ff0 <HAL_NVIC_DisableIRQ>
			break;
 800c806:	e002      	b.n	800c80e <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800c808:	4a14      	ldr	r2, [pc, #80]	; (800c85c <UnSetupDMAInterrupts+0x8c>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d015      	beq.n	800c83a <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800c80e:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c810:	4913      	ldr	r1, [pc, #76]	; (800c860 <UnSetupDMAInterrupts+0x90>)
 800c812:	428b      	cmp	r3, r1
 800c814:	d00a      	beq.n	800c82c <UnSetupDMAInterrupts+0x5c>
 800c816:	d903      	bls.n	800c820 <UnSetupDMAInterrupts+0x50>
 800c818:	4a12      	ldr	r2, [pc, #72]	; (800c864 <UnSetupDMAInterrupts+0x94>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d006      	beq.n	800c82c <UnSetupDMAInterrupts+0x5c>
 800c81e:	e7f6      	b.n	800c80e <UnSetupDMAInterrupts+0x3e>
 800c820:	4a11      	ldr	r2, [pc, #68]	; (800c868 <UnSetupDMAInterrupts+0x98>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d002      	beq.n	800c82c <UnSetupDMAInterrupts+0x5c>
 800c826:	4a11      	ldr	r2, [pc, #68]	; (800c86c <UnSetupDMAInterrupts+0x9c>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d1f0      	bne.n	800c80e <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c82c:	200b      	movs	r0, #11
 800c82e:	f004 fbdf 	bl	8010ff0 <HAL_NVIC_DisableIRQ>
}
 800c832:	e7ec      	b.n	800c80e <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800c834:	4a0e      	ldr	r2, [pc, #56]	; (800c870 <UnSetupDMAInterrupts+0xa0>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d1e9      	bne.n	800c80e <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c83a:	200a      	movs	r0, #10
 800c83c:	f004 fbd8 	bl	8010ff0 <HAL_NVIC_DisableIRQ>
			break;
 800c840:	e7e5      	b.n	800c80e <UnSetupDMAInterrupts+0x3e>
 800c842:	46c0      	nop			; (mov r8, r8)
 800c844:	40020030 	.word	0x40020030
 800c848:	40020408 	.word	0x40020408
 800c84c:	40020430 	.word	0x40020430
 800c850:	40020444 	.word	0x40020444
 800c854:	40020458 	.word	0x40020458
 800c858:	40020008 	.word	0x40020008
 800c85c:	4002001c 	.word	0x4002001c
 800c860:	4002006c 	.word	0x4002006c
 800c864:	40020080 	.word	0x40020080
 800c868:	40020044 	.word	0x40020044
 800c86c:	40020058 	.word	0x40020058
 800c870:	4002041c 	.word	0x4002041c

0800c874 <DMA_MSG_TX_UnSetup>:
{	
 800c874:	b510      	push	{r4, lr}
 800c876:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800c878:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c87a:	f7ff ffa9 	bl	800c7d0 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800c87e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c880:	2300      	movs	r3, #0
 800c882:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800c884:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c886:	bd10      	pop	{r4, pc}

0800c888 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c888:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c88a:	6803      	ldr	r3, [r0, #0]
 800c88c:	4ac3      	ldr	r2, [pc, #780]	; (800cb9c <RemapAndLinkDMAtoUARTRx+0x314>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d03e      	beq.n	800c910 <RemapAndLinkDMAtoUARTRx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c892:	4ac3      	ldr	r2, [pc, #780]	; (800cba0 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d100      	bne.n	800c89a <RemapAndLinkDMAtoUARTRx+0x12>
 800c898:	e096      	b.n	800c9c8 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c89a:	4ac2      	ldr	r2, [pc, #776]	; (800cba4 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d100      	bne.n	800c8a2 <RemapAndLinkDMAtoUARTRx+0x1a>
 800c8a0:	e0eb      	b.n	800ca7a <RemapAndLinkDMAtoUARTRx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c8a2:	4ac1      	ldr	r2, [pc, #772]	; (800cba8 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d100      	bne.n	800c8aa <RemapAndLinkDMAtoUARTRx+0x22>
 800c8a8:	e141      	b.n	800cb2e <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c8aa:	4ac0      	ldr	r2, [pc, #768]	; (800cbac <RemapAndLinkDMAtoUARTRx+0x324>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d100      	bne.n	800c8b2 <RemapAndLinkDMAtoUARTRx+0x2a>
 800c8b0:	e1bd      	b.n	800cc2e <RemapAndLinkDMAtoUARTRx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c8b2:	4abf      	ldr	r2, [pc, #764]	; (800cbb0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d100      	bne.n	800c8ba <RemapAndLinkDMAtoUARTRx+0x32>
 800c8b8:	e213      	b.n	800cce2 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c8ba:	4abe      	ldr	r2, [pc, #760]	; (800cbb4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d100      	bne.n	800c8c2 <RemapAndLinkDMAtoUARTRx+0x3a>
 800c8c0:	e269      	b.n	800cd96 <RemapAndLinkDMAtoUARTRx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c8c2:	4abd      	ldr	r2, [pc, #756]	; (800cbb8 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d136      	bne.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
 800c8c8:	680b      	ldr	r3, [r1, #0]
 800c8ca:	4abc      	ldr	r2, [pc, #752]	; (800cbbc <RemapAndLinkDMAtoUARTRx+0x334>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d100      	bne.n	800c8d2 <RemapAndLinkDMAtoUARTRx+0x4a>
 800c8d0:	e2bb      	b.n	800ce4a <RemapAndLinkDMAtoUARTRx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c8d2:	4abb      	ldr	r2, [pc, #748]	; (800cbc0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d100      	bne.n	800c8da <RemapAndLinkDMAtoUARTRx+0x52>
 800c8d8:	e2c1      	b.n	800ce5e <RemapAndLinkDMAtoUARTRx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c8da:	4aba      	ldr	r2, [pc, #744]	; (800cbc4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d100      	bne.n	800c8e2 <RemapAndLinkDMAtoUARTRx+0x5a>
 800c8e0:	e2c9      	b.n	800ce76 <RemapAndLinkDMAtoUARTRx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c8e2:	4ab9      	ldr	r2, [pc, #740]	; (800cbc8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d100      	bne.n	800c8ea <RemapAndLinkDMAtoUARTRx+0x62>
 800c8e8:	e2d1      	b.n	800ce8e <RemapAndLinkDMAtoUARTRx+0x606>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c8ea:	4ab8      	ldr	r2, [pc, #736]	; (800cbcc <RemapAndLinkDMAtoUARTRx+0x344>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d100      	bne.n	800c8f2 <RemapAndLinkDMAtoUARTRx+0x6a>
 800c8f0:	e2d9      	b.n	800cea6 <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c8f2:	4ab7      	ldr	r2, [pc, #732]	; (800cbd0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d11e      	bne.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c8f8:	4ab6      	ldr	r2, [pc, #728]	; (800cbd4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c8fa:	23a8      	movs	r3, #168	; 0xa8
 800c8fc:	58d4      	ldr	r4, [r2, r3]
 800c8fe:	4db6      	ldr	r5, [pc, #728]	; (800cbd8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c900:	402c      	ands	r4, r5
 800c902:	50d4      	str	r4, [r2, r3]
 800c904:	58d5      	ldr	r5, [r2, r3]
 800c906:	24f0      	movs	r4, #240	; 0xf0
 800c908:	0124      	lsls	r4, r4, #4
 800c90a:	432c      	orrs	r4, r5
 800c90c:	50d4      	str	r4, [r2, r3]
 800c90e:	e012      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c910:	680b      	ldr	r3, [r1, #0]
 800c912:	4aaa      	ldr	r2, [pc, #680]	; (800cbbc <RemapAndLinkDMAtoUARTRx+0x334>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d011      	beq.n	800c93c <RemapAndLinkDMAtoUARTRx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c918:	4aa9      	ldr	r2, [pc, #676]	; (800cbc0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d019      	beq.n	800c952 <RemapAndLinkDMAtoUARTRx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c91e:	4aa9      	ldr	r2, [pc, #676]	; (800cbc4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d022      	beq.n	800c96a <RemapAndLinkDMAtoUARTRx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c924:	4aa8      	ldr	r2, [pc, #672]	; (800cbc8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d02b      	beq.n	800c982 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c92a:	4aa8      	ldr	r2, [pc, #672]	; (800cbcc <RemapAndLinkDMAtoUARTRx+0x344>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d034      	beq.n	800c99a <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c930:	4aa7      	ldr	r2, [pc, #668]	; (800cbd0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d03c      	beq.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c936:	6641      	str	r1, [r0, #100]	; 0x64
 800c938:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c93a:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c93c:	4aa7      	ldr	r2, [pc, #668]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c93e:	23a8      	movs	r3, #168	; 0xa8
 800c940:	58d4      	ldr	r4, [r2, r3]
 800c942:	250f      	movs	r5, #15
 800c944:	43ac      	bics	r4, r5
 800c946:	50d4      	str	r4, [r2, r3]
 800c948:	58d4      	ldr	r4, [r2, r3]
 800c94a:	3d07      	subs	r5, #7
 800c94c:	432c      	orrs	r4, r5
 800c94e:	50d4      	str	r4, [r2, r3]
 800c950:	e7f1      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c952:	4aa2      	ldr	r2, [pc, #648]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c954:	23a8      	movs	r3, #168	; 0xa8
 800c956:	58d4      	ldr	r4, [r2, r3]
 800c958:	4d9f      	ldr	r5, [pc, #636]	; (800cbd8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c95a:	402c      	ands	r4, r5
 800c95c:	50d4      	str	r4, [r2, r3]
 800c95e:	58d5      	ldr	r5, [r2, r3]
 800c960:	2480      	movs	r4, #128	; 0x80
 800c962:	0124      	lsls	r4, r4, #4
 800c964:	432c      	orrs	r4, r5
 800c966:	50d4      	str	r4, [r2, r3]
 800c968:	e7e5      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c96a:	4a9c      	ldr	r2, [pc, #624]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c96c:	23a8      	movs	r3, #168	; 0xa8
 800c96e:	58d4      	ldr	r4, [r2, r3]
 800c970:	4d9b      	ldr	r5, [pc, #620]	; (800cbe0 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c972:	402c      	ands	r4, r5
 800c974:	50d4      	str	r4, [r2, r3]
 800c976:	58d5      	ldr	r5, [r2, r3]
 800c978:	2480      	movs	r4, #128	; 0x80
 800c97a:	0324      	lsls	r4, r4, #12
 800c97c:	432c      	orrs	r4, r5
 800c97e:	50d4      	str	r4, [r2, r3]
 800c980:	e7d9      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c982:	4a96      	ldr	r2, [pc, #600]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c984:	23a8      	movs	r3, #168	; 0xa8
 800c986:	58d4      	ldr	r4, [r2, r3]
 800c988:	4d96      	ldr	r5, [pc, #600]	; (800cbe4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c98a:	402c      	ands	r4, r5
 800c98c:	50d4      	str	r4, [r2, r3]
 800c98e:	58d5      	ldr	r5, [r2, r3]
 800c990:	2480      	movs	r4, #128	; 0x80
 800c992:	0424      	lsls	r4, r4, #16
 800c994:	432c      	orrs	r4, r5
 800c996:	50d4      	str	r4, [r2, r3]
 800c998:	e7cd      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c99a:	4a8e      	ldr	r2, [pc, #568]	; (800cbd4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c99c:	23a8      	movs	r3, #168	; 0xa8
 800c99e:	58d4      	ldr	r4, [r2, r3]
 800c9a0:	25f0      	movs	r5, #240	; 0xf0
 800c9a2:	43ac      	bics	r4, r5
 800c9a4:	50d4      	str	r4, [r2, r3]
 800c9a6:	58d4      	ldr	r4, [r2, r3]
 800c9a8:	3d70      	subs	r5, #112	; 0x70
 800c9aa:	432c      	orrs	r4, r5
 800c9ac:	50d4      	str	r4, [r2, r3]
 800c9ae:	e7c2      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c9b0:	4a88      	ldr	r2, [pc, #544]	; (800cbd4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c9b2:	23a8      	movs	r3, #168	; 0xa8
 800c9b4:	58d4      	ldr	r4, [r2, r3]
 800c9b6:	4d88      	ldr	r5, [pc, #544]	; (800cbd8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c9b8:	402c      	ands	r4, r5
 800c9ba:	50d4      	str	r4, [r2, r3]
 800c9bc:	58d5      	ldr	r5, [r2, r3]
 800c9be:	2480      	movs	r4, #128	; 0x80
 800c9c0:	0124      	lsls	r4, r4, #4
 800c9c2:	432c      	orrs	r4, r5
 800c9c4:	50d4      	str	r4, [r2, r3]
 800c9c6:	e7b6      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c9c8:	680b      	ldr	r3, [r1, #0]
 800c9ca:	4a7c      	ldr	r2, [pc, #496]	; (800cbbc <RemapAndLinkDMAtoUARTRx+0x334>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d01a      	beq.n	800ca06 <RemapAndLinkDMAtoUARTRx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c9d0:	4a7b      	ldr	r2, [pc, #492]	; (800cbc0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d022      	beq.n	800ca1c <RemapAndLinkDMAtoUARTRx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c9d6:	4a7b      	ldr	r2, [pc, #492]	; (800cbc4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d02b      	beq.n	800ca34 <RemapAndLinkDMAtoUARTRx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c9dc:	4a7a      	ldr	r2, [pc, #488]	; (800cbc8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d034      	beq.n	800ca4c <RemapAndLinkDMAtoUARTRx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c9e2:	4a7a      	ldr	r2, [pc, #488]	; (800cbcc <RemapAndLinkDMAtoUARTRx+0x344>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d03d      	beq.n	800ca64 <RemapAndLinkDMAtoUARTRx+0x1dc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c9e8:	4a79      	ldr	r2, [pc, #484]	; (800cbd0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d1a3      	bne.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c9ee:	4a79      	ldr	r2, [pc, #484]	; (800cbd4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c9f0:	23a8      	movs	r3, #168	; 0xa8
 800c9f2:	58d4      	ldr	r4, [r2, r3]
 800c9f4:	4d78      	ldr	r5, [pc, #480]	; (800cbd8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c9f6:	402c      	ands	r4, r5
 800c9f8:	50d4      	str	r4, [r2, r3]
 800c9fa:	58d5      	ldr	r5, [r2, r3]
 800c9fc:	2490      	movs	r4, #144	; 0x90
 800c9fe:	0124      	lsls	r4, r4, #4
 800ca00:	432c      	orrs	r4, r5
 800ca02:	50d4      	str	r4, [r2, r3]
 800ca04:	e797      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800ca06:	4a75      	ldr	r2, [pc, #468]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800ca08:	23a8      	movs	r3, #168	; 0xa8
 800ca0a:	58d4      	ldr	r4, [r2, r3]
 800ca0c:	250f      	movs	r5, #15
 800ca0e:	43ac      	bics	r4, r5
 800ca10:	50d4      	str	r4, [r2, r3]
 800ca12:	58d4      	ldr	r4, [r2, r3]
 800ca14:	3d06      	subs	r5, #6
 800ca16:	432c      	orrs	r4, r5
 800ca18:	50d4      	str	r4, [r2, r3]
 800ca1a:	e78c      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800ca1c:	4a6f      	ldr	r2, [pc, #444]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800ca1e:	23a8      	movs	r3, #168	; 0xa8
 800ca20:	58d4      	ldr	r4, [r2, r3]
 800ca22:	4d6d      	ldr	r5, [pc, #436]	; (800cbd8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800ca24:	402c      	ands	r4, r5
 800ca26:	50d4      	str	r4, [r2, r3]
 800ca28:	58d5      	ldr	r5, [r2, r3]
 800ca2a:	2490      	movs	r4, #144	; 0x90
 800ca2c:	0124      	lsls	r4, r4, #4
 800ca2e:	432c      	orrs	r4, r5
 800ca30:	50d4      	str	r4, [r2, r3]
 800ca32:	e780      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800ca34:	4a69      	ldr	r2, [pc, #420]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800ca36:	23a8      	movs	r3, #168	; 0xa8
 800ca38:	58d4      	ldr	r4, [r2, r3]
 800ca3a:	4d69      	ldr	r5, [pc, #420]	; (800cbe0 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ca3c:	402c      	ands	r4, r5
 800ca3e:	50d4      	str	r4, [r2, r3]
 800ca40:	58d5      	ldr	r5, [r2, r3]
 800ca42:	2490      	movs	r4, #144	; 0x90
 800ca44:	0324      	lsls	r4, r4, #12
 800ca46:	432c      	orrs	r4, r5
 800ca48:	50d4      	str	r4, [r2, r3]
 800ca4a:	e774      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800ca4c:	4a63      	ldr	r2, [pc, #396]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800ca4e:	23a8      	movs	r3, #168	; 0xa8
 800ca50:	58d4      	ldr	r4, [r2, r3]
 800ca52:	4d64      	ldr	r5, [pc, #400]	; (800cbe4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ca54:	402c      	ands	r4, r5
 800ca56:	50d4      	str	r4, [r2, r3]
 800ca58:	58d5      	ldr	r5, [r2, r3]
 800ca5a:	2490      	movs	r4, #144	; 0x90
 800ca5c:	0424      	lsls	r4, r4, #16
 800ca5e:	432c      	orrs	r4, r5
 800ca60:	50d4      	str	r4, [r2, r3]
 800ca62:	e768      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800ca64:	4a5b      	ldr	r2, [pc, #364]	; (800cbd4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ca66:	23a8      	movs	r3, #168	; 0xa8
 800ca68:	58d4      	ldr	r4, [r2, r3]
 800ca6a:	25f0      	movs	r5, #240	; 0xf0
 800ca6c:	43ac      	bics	r4, r5
 800ca6e:	50d4      	str	r4, [r2, r3]
 800ca70:	58d4      	ldr	r4, [r2, r3]
 800ca72:	3d60      	subs	r5, #96	; 0x60
 800ca74:	432c      	orrs	r4, r5
 800ca76:	50d4      	str	r4, [r2, r3]
 800ca78:	e75d      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ca7a:	680b      	ldr	r3, [r1, #0]
 800ca7c:	4a4f      	ldr	r2, [pc, #316]	; (800cbbc <RemapAndLinkDMAtoUARTRx+0x334>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d01b      	beq.n	800caba <RemapAndLinkDMAtoUARTRx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800ca82:	4a4f      	ldr	r2, [pc, #316]	; (800cbc0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d023      	beq.n	800cad0 <RemapAndLinkDMAtoUARTRx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800ca88:	4a4e      	ldr	r2, [pc, #312]	; (800cbc4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d02c      	beq.n	800cae8 <RemapAndLinkDMAtoUARTRx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800ca8e:	4a4e      	ldr	r2, [pc, #312]	; (800cbc8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d035      	beq.n	800cb00 <RemapAndLinkDMAtoUARTRx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800ca94:	4a4d      	ldr	r2, [pc, #308]	; (800cbcc <RemapAndLinkDMAtoUARTRx+0x344>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d03e      	beq.n	800cb18 <RemapAndLinkDMAtoUARTRx+0x290>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800ca9a:	4a4d      	ldr	r2, [pc, #308]	; (800cbd0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d000      	beq.n	800caa2 <RemapAndLinkDMAtoUARTRx+0x21a>
 800caa0:	e749      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800caa2:	4a4c      	ldr	r2, [pc, #304]	; (800cbd4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800caa4:	23a8      	movs	r3, #168	; 0xa8
 800caa6:	58d4      	ldr	r4, [r2, r3]
 800caa8:	4d4b      	ldr	r5, [pc, #300]	; (800cbd8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800caaa:	402c      	ands	r4, r5
 800caac:	50d4      	str	r4, [r2, r3]
 800caae:	58d5      	ldr	r5, [r2, r3]
 800cab0:	24a0      	movs	r4, #160	; 0xa0
 800cab2:	0124      	lsls	r4, r4, #4
 800cab4:	432c      	orrs	r4, r5
 800cab6:	50d4      	str	r4, [r2, r3]
 800cab8:	e73d      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800caba:	4a48      	ldr	r2, [pc, #288]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800cabc:	23a8      	movs	r3, #168	; 0xa8
 800cabe:	58d4      	ldr	r4, [r2, r3]
 800cac0:	250f      	movs	r5, #15
 800cac2:	43ac      	bics	r4, r5
 800cac4:	50d4      	str	r4, [r2, r3]
 800cac6:	58d4      	ldr	r4, [r2, r3]
 800cac8:	3d05      	subs	r5, #5
 800caca:	432c      	orrs	r4, r5
 800cacc:	50d4      	str	r4, [r2, r3]
 800cace:	e732      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800cad0:	4a42      	ldr	r2, [pc, #264]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800cad2:	23a8      	movs	r3, #168	; 0xa8
 800cad4:	58d4      	ldr	r4, [r2, r3]
 800cad6:	4d40      	ldr	r5, [pc, #256]	; (800cbd8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cad8:	402c      	ands	r4, r5
 800cada:	50d4      	str	r4, [r2, r3]
 800cadc:	58d5      	ldr	r5, [r2, r3]
 800cade:	24a0      	movs	r4, #160	; 0xa0
 800cae0:	0124      	lsls	r4, r4, #4
 800cae2:	432c      	orrs	r4, r5
 800cae4:	50d4      	str	r4, [r2, r3]
 800cae6:	e726      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800cae8:	4a3c      	ldr	r2, [pc, #240]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800caea:	23a8      	movs	r3, #168	; 0xa8
 800caec:	58d4      	ldr	r4, [r2, r3]
 800caee:	4d3c      	ldr	r5, [pc, #240]	; (800cbe0 <RemapAndLinkDMAtoUARTRx+0x358>)
 800caf0:	402c      	ands	r4, r5
 800caf2:	50d4      	str	r4, [r2, r3]
 800caf4:	58d5      	ldr	r5, [r2, r3]
 800caf6:	24a0      	movs	r4, #160	; 0xa0
 800caf8:	0324      	lsls	r4, r4, #12
 800cafa:	432c      	orrs	r4, r5
 800cafc:	50d4      	str	r4, [r2, r3]
 800cafe:	e71a      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800cb00:	4a36      	ldr	r2, [pc, #216]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800cb02:	23a8      	movs	r3, #168	; 0xa8
 800cb04:	58d4      	ldr	r4, [r2, r3]
 800cb06:	4d37      	ldr	r5, [pc, #220]	; (800cbe4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800cb08:	402c      	ands	r4, r5
 800cb0a:	50d4      	str	r4, [r2, r3]
 800cb0c:	58d5      	ldr	r5, [r2, r3]
 800cb0e:	24a0      	movs	r4, #160	; 0xa0
 800cb10:	0424      	lsls	r4, r4, #16
 800cb12:	432c      	orrs	r4, r5
 800cb14:	50d4      	str	r4, [r2, r3]
 800cb16:	e70e      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800cb18:	4a2e      	ldr	r2, [pc, #184]	; (800cbd4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cb1a:	23a8      	movs	r3, #168	; 0xa8
 800cb1c:	58d4      	ldr	r4, [r2, r3]
 800cb1e:	25f0      	movs	r5, #240	; 0xf0
 800cb20:	43ac      	bics	r4, r5
 800cb22:	50d4      	str	r4, [r2, r3]
 800cb24:	58d4      	ldr	r4, [r2, r3]
 800cb26:	3d50      	subs	r5, #80	; 0x50
 800cb28:	432c      	orrs	r4, r5
 800cb2a:	50d4      	str	r4, [r2, r3]
 800cb2c:	e703      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800cb2e:	680b      	ldr	r3, [r1, #0]
 800cb30:	4a22      	ldr	r2, [pc, #136]	; (800cbbc <RemapAndLinkDMAtoUARTRx+0x334>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d01b      	beq.n	800cb6e <RemapAndLinkDMAtoUARTRx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800cb36:	4a22      	ldr	r2, [pc, #136]	; (800cbc0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d023      	beq.n	800cb84 <RemapAndLinkDMAtoUARTRx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800cb3c:	4a21      	ldr	r2, [pc, #132]	; (800cbc4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d052      	beq.n	800cbe8 <RemapAndLinkDMAtoUARTRx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800cb42:	4a21      	ldr	r2, [pc, #132]	; (800cbc8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d05b      	beq.n	800cc00 <RemapAndLinkDMAtoUARTRx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800cb48:	4a20      	ldr	r2, [pc, #128]	; (800cbcc <RemapAndLinkDMAtoUARTRx+0x344>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d064      	beq.n	800cc18 <RemapAndLinkDMAtoUARTRx+0x390>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800cb4e:	4a20      	ldr	r2, [pc, #128]	; (800cbd0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d000      	beq.n	800cb56 <RemapAndLinkDMAtoUARTRx+0x2ce>
 800cb54:	e6ef      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800cb56:	4a1f      	ldr	r2, [pc, #124]	; (800cbd4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cb58:	23a8      	movs	r3, #168	; 0xa8
 800cb5a:	58d4      	ldr	r4, [r2, r3]
 800cb5c:	4d1e      	ldr	r5, [pc, #120]	; (800cbd8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cb5e:	402c      	ands	r4, r5
 800cb60:	50d4      	str	r4, [r2, r3]
 800cb62:	58d5      	ldr	r5, [r2, r3]
 800cb64:	24b0      	movs	r4, #176	; 0xb0
 800cb66:	0124      	lsls	r4, r4, #4
 800cb68:	432c      	orrs	r4, r5
 800cb6a:	50d4      	str	r4, [r2, r3]
 800cb6c:	e6e3      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800cb6e:	4a1b      	ldr	r2, [pc, #108]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800cb70:	23a8      	movs	r3, #168	; 0xa8
 800cb72:	58d4      	ldr	r4, [r2, r3]
 800cb74:	250f      	movs	r5, #15
 800cb76:	43ac      	bics	r4, r5
 800cb78:	50d4      	str	r4, [r2, r3]
 800cb7a:	58d4      	ldr	r4, [r2, r3]
 800cb7c:	3d04      	subs	r5, #4
 800cb7e:	432c      	orrs	r4, r5
 800cb80:	50d4      	str	r4, [r2, r3]
 800cb82:	e6d8      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800cb84:	4a15      	ldr	r2, [pc, #84]	; (800cbdc <RemapAndLinkDMAtoUARTRx+0x354>)
 800cb86:	23a8      	movs	r3, #168	; 0xa8
 800cb88:	58d4      	ldr	r4, [r2, r3]
 800cb8a:	4d13      	ldr	r5, [pc, #76]	; (800cbd8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cb8c:	402c      	ands	r4, r5
 800cb8e:	50d4      	str	r4, [r2, r3]
 800cb90:	58d5      	ldr	r5, [r2, r3]
 800cb92:	24b0      	movs	r4, #176	; 0xb0
 800cb94:	0124      	lsls	r4, r4, #4
 800cb96:	432c      	orrs	r4, r5
 800cb98:	50d4      	str	r4, [r2, r3]
 800cb9a:	e6cc      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
 800cb9c:	40013800 	.word	0x40013800
 800cba0:	40004400 	.word	0x40004400
 800cba4:	40004800 	.word	0x40004800
 800cba8:	40004c00 	.word	0x40004c00
 800cbac:	40005000 	.word	0x40005000
 800cbb0:	40011400 	.word	0x40011400
 800cbb4:	40011800 	.word	0x40011800
 800cbb8:	40011c00 	.word	0x40011c00
 800cbbc:	40020008 	.word	0x40020008
 800cbc0:	40020030 	.word	0x40020030
 800cbc4:	40020058 	.word	0x40020058
 800cbc8:	4002006c 	.word	0x4002006c
 800cbcc:	4002041c 	.word	0x4002041c
 800cbd0:	40020430 	.word	0x40020430
 800cbd4:	40020400 	.word	0x40020400
 800cbd8:	fffff0ff 	.word	0xfffff0ff
 800cbdc:	40020000 	.word	0x40020000
 800cbe0:	fff0ffff 	.word	0xfff0ffff
 800cbe4:	ff0fffff 	.word	0xff0fffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800cbe8:	4ab4      	ldr	r2, [pc, #720]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cbea:	23a8      	movs	r3, #168	; 0xa8
 800cbec:	58d4      	ldr	r4, [r2, r3]
 800cbee:	4db4      	ldr	r5, [pc, #720]	; (800cec0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800cbf0:	402c      	ands	r4, r5
 800cbf2:	50d4      	str	r4, [r2, r3]
 800cbf4:	58d5      	ldr	r5, [r2, r3]
 800cbf6:	24b0      	movs	r4, #176	; 0xb0
 800cbf8:	0324      	lsls	r4, r4, #12
 800cbfa:	432c      	orrs	r4, r5
 800cbfc:	50d4      	str	r4, [r2, r3]
 800cbfe:	e69a      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800cc00:	4aae      	ldr	r2, [pc, #696]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cc02:	23a8      	movs	r3, #168	; 0xa8
 800cc04:	58d4      	ldr	r4, [r2, r3]
 800cc06:	4daf      	ldr	r5, [pc, #700]	; (800cec4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cc08:	402c      	ands	r4, r5
 800cc0a:	50d4      	str	r4, [r2, r3]
 800cc0c:	58d5      	ldr	r5, [r2, r3]
 800cc0e:	24b0      	movs	r4, #176	; 0xb0
 800cc10:	0424      	lsls	r4, r4, #16
 800cc12:	432c      	orrs	r4, r5
 800cc14:	50d4      	str	r4, [r2, r3]
 800cc16:	e68e      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800cc18:	4aab      	ldr	r2, [pc, #684]	; (800cec8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cc1a:	23a8      	movs	r3, #168	; 0xa8
 800cc1c:	58d4      	ldr	r4, [r2, r3]
 800cc1e:	25f0      	movs	r5, #240	; 0xf0
 800cc20:	43ac      	bics	r4, r5
 800cc22:	50d4      	str	r4, [r2, r3]
 800cc24:	58d4      	ldr	r4, [r2, r3]
 800cc26:	3d40      	subs	r5, #64	; 0x40
 800cc28:	432c      	orrs	r4, r5
 800cc2a:	50d4      	str	r4, [r2, r3]
 800cc2c:	e683      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800cc2e:	680b      	ldr	r3, [r1, #0]
 800cc30:	4aa6      	ldr	r2, [pc, #664]	; (800cecc <RemapAndLinkDMAtoUARTRx+0x644>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d01b      	beq.n	800cc6e <RemapAndLinkDMAtoUARTRx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800cc36:	4aa6      	ldr	r2, [pc, #664]	; (800ced0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d023      	beq.n	800cc84 <RemapAndLinkDMAtoUARTRx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800cc3c:	4aa5      	ldr	r2, [pc, #660]	; (800ced4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d02c      	beq.n	800cc9c <RemapAndLinkDMAtoUARTRx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800cc42:	4aa5      	ldr	r2, [pc, #660]	; (800ced8 <RemapAndLinkDMAtoUARTRx+0x650>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d035      	beq.n	800ccb4 <RemapAndLinkDMAtoUARTRx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800cc48:	4aa4      	ldr	r2, [pc, #656]	; (800cedc <RemapAndLinkDMAtoUARTRx+0x654>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d03e      	beq.n	800cccc <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800cc4e:	4aa4      	ldr	r2, [pc, #656]	; (800cee0 <RemapAndLinkDMAtoUARTRx+0x658>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d000      	beq.n	800cc56 <RemapAndLinkDMAtoUARTRx+0x3ce>
 800cc54:	e66f      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800cc56:	4a9c      	ldr	r2, [pc, #624]	; (800cec8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cc58:	23a8      	movs	r3, #168	; 0xa8
 800cc5a:	58d4      	ldr	r4, [r2, r3]
 800cc5c:	4da1      	ldr	r5, [pc, #644]	; (800cee4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800cc5e:	402c      	ands	r4, r5
 800cc60:	50d4      	str	r4, [r2, r3]
 800cc62:	58d5      	ldr	r5, [r2, r3]
 800cc64:	24c0      	movs	r4, #192	; 0xc0
 800cc66:	0124      	lsls	r4, r4, #4
 800cc68:	432c      	orrs	r4, r5
 800cc6a:	50d4      	str	r4, [r2, r3]
 800cc6c:	e663      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800cc6e:	4a93      	ldr	r2, [pc, #588]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cc70:	23a8      	movs	r3, #168	; 0xa8
 800cc72:	58d4      	ldr	r4, [r2, r3]
 800cc74:	250f      	movs	r5, #15
 800cc76:	43ac      	bics	r4, r5
 800cc78:	50d4      	str	r4, [r2, r3]
 800cc7a:	58d4      	ldr	r4, [r2, r3]
 800cc7c:	3d03      	subs	r5, #3
 800cc7e:	432c      	orrs	r4, r5
 800cc80:	50d4      	str	r4, [r2, r3]
 800cc82:	e658      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800cc84:	4a8d      	ldr	r2, [pc, #564]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cc86:	23a8      	movs	r3, #168	; 0xa8
 800cc88:	58d4      	ldr	r4, [r2, r3]
 800cc8a:	4d96      	ldr	r5, [pc, #600]	; (800cee4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800cc8c:	402c      	ands	r4, r5
 800cc8e:	50d4      	str	r4, [r2, r3]
 800cc90:	58d5      	ldr	r5, [r2, r3]
 800cc92:	24c0      	movs	r4, #192	; 0xc0
 800cc94:	0124      	lsls	r4, r4, #4
 800cc96:	432c      	orrs	r4, r5
 800cc98:	50d4      	str	r4, [r2, r3]
 800cc9a:	e64c      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800cc9c:	4a87      	ldr	r2, [pc, #540]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cc9e:	23a8      	movs	r3, #168	; 0xa8
 800cca0:	58d4      	ldr	r4, [r2, r3]
 800cca2:	4d87      	ldr	r5, [pc, #540]	; (800cec0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800cca4:	402c      	ands	r4, r5
 800cca6:	50d4      	str	r4, [r2, r3]
 800cca8:	58d5      	ldr	r5, [r2, r3]
 800ccaa:	24c0      	movs	r4, #192	; 0xc0
 800ccac:	0324      	lsls	r4, r4, #12
 800ccae:	432c      	orrs	r4, r5
 800ccb0:	50d4      	str	r4, [r2, r3]
 800ccb2:	e640      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800ccb4:	4a81      	ldr	r2, [pc, #516]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800ccb6:	23a8      	movs	r3, #168	; 0xa8
 800ccb8:	58d4      	ldr	r4, [r2, r3]
 800ccba:	4d82      	ldr	r5, [pc, #520]	; (800cec4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ccbc:	402c      	ands	r4, r5
 800ccbe:	50d4      	str	r4, [r2, r3]
 800ccc0:	58d5      	ldr	r5, [r2, r3]
 800ccc2:	24c0      	movs	r4, #192	; 0xc0
 800ccc4:	0424      	lsls	r4, r4, #16
 800ccc6:	432c      	orrs	r4, r5
 800ccc8:	50d4      	str	r4, [r2, r3]
 800ccca:	e634      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800cccc:	4a7e      	ldr	r2, [pc, #504]	; (800cec8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ccce:	23a8      	movs	r3, #168	; 0xa8
 800ccd0:	58d4      	ldr	r4, [r2, r3]
 800ccd2:	25f0      	movs	r5, #240	; 0xf0
 800ccd4:	43ac      	bics	r4, r5
 800ccd6:	50d4      	str	r4, [r2, r3]
 800ccd8:	58d4      	ldr	r4, [r2, r3]
 800ccda:	3d30      	subs	r5, #48	; 0x30
 800ccdc:	432c      	orrs	r4, r5
 800ccde:	50d4      	str	r4, [r2, r3]
 800cce0:	e629      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800cce2:	680b      	ldr	r3, [r1, #0]
 800cce4:	4a79      	ldr	r2, [pc, #484]	; (800cecc <RemapAndLinkDMAtoUARTRx+0x644>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d01b      	beq.n	800cd22 <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800ccea:	4a79      	ldr	r2, [pc, #484]	; (800ced0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d023      	beq.n	800cd38 <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800ccf0:	4a78      	ldr	r2, [pc, #480]	; (800ced4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d02c      	beq.n	800cd50 <RemapAndLinkDMAtoUARTRx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800ccf6:	4a78      	ldr	r2, [pc, #480]	; (800ced8 <RemapAndLinkDMAtoUARTRx+0x650>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d035      	beq.n	800cd68 <RemapAndLinkDMAtoUARTRx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800ccfc:	4a77      	ldr	r2, [pc, #476]	; (800cedc <RemapAndLinkDMAtoUARTRx+0x654>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d03e      	beq.n	800cd80 <RemapAndLinkDMAtoUARTRx+0x4f8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800cd02:	4a77      	ldr	r2, [pc, #476]	; (800cee0 <RemapAndLinkDMAtoUARTRx+0x658>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d000      	beq.n	800cd0a <RemapAndLinkDMAtoUARTRx+0x482>
 800cd08:	e615      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800cd0a:	4a6f      	ldr	r2, [pc, #444]	; (800cec8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cd0c:	23a8      	movs	r3, #168	; 0xa8
 800cd0e:	58d4      	ldr	r4, [r2, r3]
 800cd10:	4d74      	ldr	r5, [pc, #464]	; (800cee4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800cd12:	402c      	ands	r4, r5
 800cd14:	50d4      	str	r4, [r2, r3]
 800cd16:	58d5      	ldr	r5, [r2, r3]
 800cd18:	24d0      	movs	r4, #208	; 0xd0
 800cd1a:	0124      	lsls	r4, r4, #4
 800cd1c:	432c      	orrs	r4, r5
 800cd1e:	50d4      	str	r4, [r2, r3]
 800cd20:	e609      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800cd22:	4a66      	ldr	r2, [pc, #408]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cd24:	23a8      	movs	r3, #168	; 0xa8
 800cd26:	58d4      	ldr	r4, [r2, r3]
 800cd28:	250f      	movs	r5, #15
 800cd2a:	43ac      	bics	r4, r5
 800cd2c:	50d4      	str	r4, [r2, r3]
 800cd2e:	58d4      	ldr	r4, [r2, r3]
 800cd30:	3d02      	subs	r5, #2
 800cd32:	432c      	orrs	r4, r5
 800cd34:	50d4      	str	r4, [r2, r3]
 800cd36:	e5fe      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800cd38:	4a60      	ldr	r2, [pc, #384]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cd3a:	23a8      	movs	r3, #168	; 0xa8
 800cd3c:	58d4      	ldr	r4, [r2, r3]
 800cd3e:	4d69      	ldr	r5, [pc, #420]	; (800cee4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800cd40:	402c      	ands	r4, r5
 800cd42:	50d4      	str	r4, [r2, r3]
 800cd44:	58d5      	ldr	r5, [r2, r3]
 800cd46:	24d0      	movs	r4, #208	; 0xd0
 800cd48:	0124      	lsls	r4, r4, #4
 800cd4a:	432c      	orrs	r4, r5
 800cd4c:	50d4      	str	r4, [r2, r3]
 800cd4e:	e5f2      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800cd50:	4a5a      	ldr	r2, [pc, #360]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cd52:	23a8      	movs	r3, #168	; 0xa8
 800cd54:	58d4      	ldr	r4, [r2, r3]
 800cd56:	4d5a      	ldr	r5, [pc, #360]	; (800cec0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800cd58:	402c      	ands	r4, r5
 800cd5a:	50d4      	str	r4, [r2, r3]
 800cd5c:	58d5      	ldr	r5, [r2, r3]
 800cd5e:	24d0      	movs	r4, #208	; 0xd0
 800cd60:	0324      	lsls	r4, r4, #12
 800cd62:	432c      	orrs	r4, r5
 800cd64:	50d4      	str	r4, [r2, r3]
 800cd66:	e5e6      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800cd68:	4a54      	ldr	r2, [pc, #336]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cd6a:	23a8      	movs	r3, #168	; 0xa8
 800cd6c:	58d4      	ldr	r4, [r2, r3]
 800cd6e:	4d55      	ldr	r5, [pc, #340]	; (800cec4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cd70:	402c      	ands	r4, r5
 800cd72:	50d4      	str	r4, [r2, r3]
 800cd74:	58d5      	ldr	r5, [r2, r3]
 800cd76:	24d0      	movs	r4, #208	; 0xd0
 800cd78:	0424      	lsls	r4, r4, #16
 800cd7a:	432c      	orrs	r4, r5
 800cd7c:	50d4      	str	r4, [r2, r3]
 800cd7e:	e5da      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800cd80:	4a51      	ldr	r2, [pc, #324]	; (800cec8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cd82:	23a8      	movs	r3, #168	; 0xa8
 800cd84:	58d4      	ldr	r4, [r2, r3]
 800cd86:	25f0      	movs	r5, #240	; 0xf0
 800cd88:	43ac      	bics	r4, r5
 800cd8a:	50d4      	str	r4, [r2, r3]
 800cd8c:	58d4      	ldr	r4, [r2, r3]
 800cd8e:	3d20      	subs	r5, #32
 800cd90:	432c      	orrs	r4, r5
 800cd92:	50d4      	str	r4, [r2, r3]
 800cd94:	e5cf      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800cd96:	680b      	ldr	r3, [r1, #0]
 800cd98:	4a4c      	ldr	r2, [pc, #304]	; (800cecc <RemapAndLinkDMAtoUARTRx+0x644>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d01b      	beq.n	800cdd6 <RemapAndLinkDMAtoUARTRx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800cd9e:	4a4c      	ldr	r2, [pc, #304]	; (800ced0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d023      	beq.n	800cdec <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800cda4:	4a4b      	ldr	r2, [pc, #300]	; (800ced4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d02c      	beq.n	800ce04 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800cdaa:	4a4b      	ldr	r2, [pc, #300]	; (800ced8 <RemapAndLinkDMAtoUARTRx+0x650>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d035      	beq.n	800ce1c <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800cdb0:	4a4a      	ldr	r2, [pc, #296]	; (800cedc <RemapAndLinkDMAtoUARTRx+0x654>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d03e      	beq.n	800ce34 <RemapAndLinkDMAtoUARTRx+0x5ac>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800cdb6:	4a4a      	ldr	r2, [pc, #296]	; (800cee0 <RemapAndLinkDMAtoUARTRx+0x658>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d000      	beq.n	800cdbe <RemapAndLinkDMAtoUARTRx+0x536>
 800cdbc:	e5bb      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800cdbe:	4a42      	ldr	r2, [pc, #264]	; (800cec8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cdc0:	23a8      	movs	r3, #168	; 0xa8
 800cdc2:	58d4      	ldr	r4, [r2, r3]
 800cdc4:	4d47      	ldr	r5, [pc, #284]	; (800cee4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800cdc6:	402c      	ands	r4, r5
 800cdc8:	50d4      	str	r4, [r2, r3]
 800cdca:	58d5      	ldr	r5, [r2, r3]
 800cdcc:	24e0      	movs	r4, #224	; 0xe0
 800cdce:	0124      	lsls	r4, r4, #4
 800cdd0:	432c      	orrs	r4, r5
 800cdd2:	50d4      	str	r4, [r2, r3]
 800cdd4:	e5af      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800cdd6:	4a39      	ldr	r2, [pc, #228]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cdd8:	23a8      	movs	r3, #168	; 0xa8
 800cdda:	58d4      	ldr	r4, [r2, r3]
 800cddc:	250f      	movs	r5, #15
 800cdde:	43ac      	bics	r4, r5
 800cde0:	50d4      	str	r4, [r2, r3]
 800cde2:	58d4      	ldr	r4, [r2, r3]
 800cde4:	3d01      	subs	r5, #1
 800cde6:	432c      	orrs	r4, r5
 800cde8:	50d4      	str	r4, [r2, r3]
 800cdea:	e5a4      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800cdec:	4a33      	ldr	r2, [pc, #204]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800cdee:	23a8      	movs	r3, #168	; 0xa8
 800cdf0:	58d4      	ldr	r4, [r2, r3]
 800cdf2:	4d3c      	ldr	r5, [pc, #240]	; (800cee4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800cdf4:	402c      	ands	r4, r5
 800cdf6:	50d4      	str	r4, [r2, r3]
 800cdf8:	58d5      	ldr	r5, [r2, r3]
 800cdfa:	24e0      	movs	r4, #224	; 0xe0
 800cdfc:	0124      	lsls	r4, r4, #4
 800cdfe:	432c      	orrs	r4, r5
 800ce00:	50d4      	str	r4, [r2, r3]
 800ce02:	e598      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800ce04:	4a2d      	ldr	r2, [pc, #180]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800ce06:	23a8      	movs	r3, #168	; 0xa8
 800ce08:	58d4      	ldr	r4, [r2, r3]
 800ce0a:	4d2d      	ldr	r5, [pc, #180]	; (800cec0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800ce0c:	402c      	ands	r4, r5
 800ce0e:	50d4      	str	r4, [r2, r3]
 800ce10:	58d5      	ldr	r5, [r2, r3]
 800ce12:	24e0      	movs	r4, #224	; 0xe0
 800ce14:	0324      	lsls	r4, r4, #12
 800ce16:	432c      	orrs	r4, r5
 800ce18:	50d4      	str	r4, [r2, r3]
 800ce1a:	e58c      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800ce1c:	4a27      	ldr	r2, [pc, #156]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800ce1e:	23a8      	movs	r3, #168	; 0xa8
 800ce20:	58d4      	ldr	r4, [r2, r3]
 800ce22:	4d28      	ldr	r5, [pc, #160]	; (800cec4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ce24:	402c      	ands	r4, r5
 800ce26:	50d4      	str	r4, [r2, r3]
 800ce28:	58d5      	ldr	r5, [r2, r3]
 800ce2a:	24e0      	movs	r4, #224	; 0xe0
 800ce2c:	0424      	lsls	r4, r4, #16
 800ce2e:	432c      	orrs	r4, r5
 800ce30:	50d4      	str	r4, [r2, r3]
 800ce32:	e580      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800ce34:	4a24      	ldr	r2, [pc, #144]	; (800cec8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ce36:	23a8      	movs	r3, #168	; 0xa8
 800ce38:	58d4      	ldr	r4, [r2, r3]
 800ce3a:	25f0      	movs	r5, #240	; 0xf0
 800ce3c:	43ac      	bics	r4, r5
 800ce3e:	50d4      	str	r4, [r2, r3]
 800ce40:	58d4      	ldr	r4, [r2, r3]
 800ce42:	3d10      	subs	r5, #16
 800ce44:	432c      	orrs	r4, r5
 800ce46:	50d4      	str	r4, [r2, r3]
 800ce48:	e575      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800ce4a:	4a1c      	ldr	r2, [pc, #112]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800ce4c:	23a8      	movs	r3, #168	; 0xa8
 800ce4e:	58d5      	ldr	r5, [r2, r3]
 800ce50:	260f      	movs	r6, #15
 800ce52:	43b5      	bics	r5, r6
 800ce54:	50d5      	str	r5, [r2, r3]
 800ce56:	58d4      	ldr	r4, [r2, r3]
 800ce58:	4334      	orrs	r4, r6
 800ce5a:	50d4      	str	r4, [r2, r3]
 800ce5c:	e56b      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800ce5e:	4a17      	ldr	r2, [pc, #92]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800ce60:	23a8      	movs	r3, #168	; 0xa8
 800ce62:	58d4      	ldr	r4, [r2, r3]
 800ce64:	4d1f      	ldr	r5, [pc, #124]	; (800cee4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800ce66:	402c      	ands	r4, r5
 800ce68:	50d4      	str	r4, [r2, r3]
 800ce6a:	58d5      	ldr	r5, [r2, r3]
 800ce6c:	24f0      	movs	r4, #240	; 0xf0
 800ce6e:	0124      	lsls	r4, r4, #4
 800ce70:	432c      	orrs	r4, r5
 800ce72:	50d4      	str	r4, [r2, r3]
 800ce74:	e55f      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800ce76:	4a11      	ldr	r2, [pc, #68]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800ce78:	23a8      	movs	r3, #168	; 0xa8
 800ce7a:	58d4      	ldr	r4, [r2, r3]
 800ce7c:	4d10      	ldr	r5, [pc, #64]	; (800cec0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800ce7e:	402c      	ands	r4, r5
 800ce80:	50d4      	str	r4, [r2, r3]
 800ce82:	58d5      	ldr	r5, [r2, r3]
 800ce84:	24f0      	movs	r4, #240	; 0xf0
 800ce86:	0324      	lsls	r4, r4, #12
 800ce88:	432c      	orrs	r4, r5
 800ce8a:	50d4      	str	r4, [r2, r3]
 800ce8c:	e553      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800ce8e:	4a0b      	ldr	r2, [pc, #44]	; (800cebc <RemapAndLinkDMAtoUARTRx+0x634>)
 800ce90:	23a8      	movs	r3, #168	; 0xa8
 800ce92:	58d4      	ldr	r4, [r2, r3]
 800ce94:	4d0b      	ldr	r5, [pc, #44]	; (800cec4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ce96:	402c      	ands	r4, r5
 800ce98:	50d4      	str	r4, [r2, r3]
 800ce9a:	58d5      	ldr	r5, [r2, r3]
 800ce9c:	24f0      	movs	r4, #240	; 0xf0
 800ce9e:	0424      	lsls	r4, r4, #16
 800cea0:	432c      	orrs	r4, r5
 800cea2:	50d4      	str	r4, [r2, r3]
 800cea4:	e547      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800cea6:	4a08      	ldr	r2, [pc, #32]	; (800cec8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cea8:	23a8      	movs	r3, #168	; 0xa8
 800ceaa:	58d5      	ldr	r5, [r2, r3]
 800ceac:	26f0      	movs	r6, #240	; 0xf0
 800ceae:	43b5      	bics	r5, r6
 800ceb0:	50d5      	str	r5, [r2, r3]
 800ceb2:	58d4      	ldr	r4, [r2, r3]
 800ceb4:	4334      	orrs	r4, r6
 800ceb6:	50d4      	str	r4, [r2, r3]
 800ceb8:	e53d      	b.n	800c936 <RemapAndLinkDMAtoUARTRx+0xae>
 800ceba:	46c0      	nop			; (mov r8, r8)
 800cebc:	40020000 	.word	0x40020000
 800cec0:	fff0ffff 	.word	0xfff0ffff
 800cec4:	ff0fffff 	.word	0xff0fffff
 800cec8:	40020400 	.word	0x40020400
 800cecc:	40020008 	.word	0x40020008
 800ced0:	40020030 	.word	0x40020030
 800ced4:	40020058 	.word	0x40020058
 800ced8:	4002006c 	.word	0x4002006c
 800cedc:	4002041c 	.word	0x4002041c
 800cee0:	40020430 	.word	0x40020430
 800cee4:	fffff0ff 	.word	0xfffff0ff

0800cee8 <DMA_MSG_RX_Setup>:
{	
 800cee8:	b570      	push	{r4, r5, r6, lr}
 800ceea:	0004      	movs	r4, r0
 800ceec:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800ceee:	f7ff fccb 	bl	800c888 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cef2:	2100      	movs	r1, #0
 800cef4:	0028      	movs	r0, r5
 800cef6:	f7ff fc0d 	bl	800c714 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800cefa:	0020      	movs	r0, r4
 800cefc:	f7ff fb4c 	bl	800c598 <GetPort>
 800cf00:	1e41      	subs	r1, r0, #1
 800cf02:	0189      	lsls	r1, r1, #6
 800cf04:	4803      	ldr	r0, [pc, #12]	; (800cf14 <DMA_MSG_RX_Setup+0x2c>)
 800cf06:	1809      	adds	r1, r1, r0
 800cf08:	2240      	movs	r2, #64	; 0x40
 800cf0a:	0020      	movs	r0, r4
 800cf0c:	f006 fa78 	bl	8013400 <HAL_UART_Receive_DMA>
}
 800cf10:	bd70      	pop	{r4, r5, r6, pc}
 800cf12:	46c0      	nop			; (mov r8, r8)
 800cf14:	200012d8 	.word	0x200012d8

0800cf18 <SetupMessagingRxDMAs>:
{	
 800cf18:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800cf1a:	4b1b      	ldr	r3, [pc, #108]	; (800cf88 <SetupMessagingRxDMAs+0x70>)
 800cf1c:	785b      	ldrb	r3, [r3, #1]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d014      	beq.n	800cf4c <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800cf22:	4b19      	ldr	r3, [pc, #100]	; (800cf88 <SetupMessagingRxDMAs+0x70>)
 800cf24:	789b      	ldrb	r3, [r3, #2]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d015      	beq.n	800cf56 <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800cf2a:	4b17      	ldr	r3, [pc, #92]	; (800cf88 <SetupMessagingRxDMAs+0x70>)
 800cf2c:	78db      	ldrb	r3, [r3, #3]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d016      	beq.n	800cf60 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800cf32:	4b15      	ldr	r3, [pc, #84]	; (800cf88 <SetupMessagingRxDMAs+0x70>)
 800cf34:	791b      	ldrb	r3, [r3, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d017      	beq.n	800cf6a <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800cf3a:	4b13      	ldr	r3, [pc, #76]	; (800cf88 <SetupMessagingRxDMAs+0x70>)
 800cf3c:	795b      	ldrb	r3, [r3, #5]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d018      	beq.n	800cf74 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800cf42:	4b11      	ldr	r3, [pc, #68]	; (800cf88 <SetupMessagingRxDMAs+0x70>)
 800cf44:	799b      	ldrb	r3, [r3, #6]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d019      	beq.n	800cf7e <SetupMessagingRxDMAs+0x66>
}
 800cf4a:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800cf4c:	490f      	ldr	r1, [pc, #60]	; (800cf8c <SetupMessagingRxDMAs+0x74>)
 800cf4e:	4810      	ldr	r0, [pc, #64]	; (800cf90 <SetupMessagingRxDMAs+0x78>)
 800cf50:	f7ff ffca 	bl	800cee8 <DMA_MSG_RX_Setup>
 800cf54:	e7e5      	b.n	800cf22 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800cf56:	490f      	ldr	r1, [pc, #60]	; (800cf94 <SetupMessagingRxDMAs+0x7c>)
 800cf58:	480f      	ldr	r0, [pc, #60]	; (800cf98 <SetupMessagingRxDMAs+0x80>)
 800cf5a:	f7ff ffc5 	bl	800cee8 <DMA_MSG_RX_Setup>
 800cf5e:	e7e4      	b.n	800cf2a <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800cf60:	490e      	ldr	r1, [pc, #56]	; (800cf9c <SetupMessagingRxDMAs+0x84>)
 800cf62:	480f      	ldr	r0, [pc, #60]	; (800cfa0 <SetupMessagingRxDMAs+0x88>)
 800cf64:	f7ff ffc0 	bl	800cee8 <DMA_MSG_RX_Setup>
 800cf68:	e7e3      	b.n	800cf32 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800cf6a:	490e      	ldr	r1, [pc, #56]	; (800cfa4 <SetupMessagingRxDMAs+0x8c>)
 800cf6c:	480e      	ldr	r0, [pc, #56]	; (800cfa8 <SetupMessagingRxDMAs+0x90>)
 800cf6e:	f7ff ffbb 	bl	800cee8 <DMA_MSG_RX_Setup>
 800cf72:	e7e2      	b.n	800cf3a <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800cf74:	490d      	ldr	r1, [pc, #52]	; (800cfac <SetupMessagingRxDMAs+0x94>)
 800cf76:	480e      	ldr	r0, [pc, #56]	; (800cfb0 <SetupMessagingRxDMAs+0x98>)
 800cf78:	f7ff ffb6 	bl	800cee8 <DMA_MSG_RX_Setup>
 800cf7c:	e7e1      	b.n	800cf42 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800cf7e:	490d      	ldr	r1, [pc, #52]	; (800cfb4 <SetupMessagingRxDMAs+0x9c>)
 800cf80:	480d      	ldr	r0, [pc, #52]	; (800cfb8 <SetupMessagingRxDMAs+0xa0>)
 800cf82:	f7ff ffb1 	bl	800cee8 <DMA_MSG_RX_Setup>
}
 800cf86:	e7e0      	b.n	800cf4a <SetupMessagingRxDMAs+0x32>
 800cf88:	20001100 	.word	0x20001100
 800cf8c:	20001880 	.word	0x20001880
 800cf90:	20006d88 	.word	0x20006d88
 800cf94:	200018b8 	.word	0x200018b8
 800cf98:	20006df8 	.word	0x20006df8
 800cf9c:	200018f0 	.word	0x200018f0
 800cfa0:	20006d18 	.word	0x20006d18
 800cfa4:	20001928 	.word	0x20001928
 800cfa8:	20006ca8 	.word	0x20006ca8
 800cfac:	20001960 	.word	0x20001960
 800cfb0:	20006c38 	.word	0x20006c38
 800cfb4:	20001998 	.word	0x20001998
 800cfb8:	20006bc8 	.word	0x20006bc8

0800cfbc <DMA_STREAM_Setup>:
{	
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	0005      	movs	r5, r0
 800cfc0:	000f      	movs	r7, r1
 800cfc2:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800cfc4:	f7ff fae8 	bl	800c598 <GetPort>
	hDMA = &streamDMA[port-1];
 800cfc8:	3801      	subs	r0, #1
 800cfca:	00c4      	lsls	r4, r0, #3
 800cfcc:	1a24      	subs	r4, r4, r0
 800cfce:	00e4      	lsls	r4, r4, #3
 800cfd0:	4809      	ldr	r0, [pc, #36]	; (800cff8 <DMA_STREAM_Setup+0x3c>)
 800cfd2:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800cfd4:	0021      	movs	r1, r4
 800cfd6:	0028      	movs	r0, r5
 800cfd8:	f7ff fc56 	bl	800c888 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800cfdc:	2101      	movs	r1, #1
 800cfde:	0020      	movs	r0, r4
 800cfe0:	f7ff fb98 	bl	800c714 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800cfe4:	2369      	movs	r3, #105	; 0x69
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800cfea:	6839      	ldr	r1, [r7, #0]
 800cfec:	3128      	adds	r1, #40	; 0x28
 800cfee:	0032      	movs	r2, r6
 800cff0:	0028      	movs	r0, r5
 800cff2:	f006 fa05 	bl	8013400 <HAL_UART_Receive_DMA>
}
 800cff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cff8:	20001a78 	.word	0x20001a78

0800cffc <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800cffc:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800cffe:	6803      	ldr	r3, [r0, #0]
 800d000:	4ac3      	ldr	r2, [pc, #780]	; (800d310 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d03e      	beq.n	800d084 <RemapAndLinkDMAtoUARTTx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d006:	4ac3      	ldr	r2, [pc, #780]	; (800d314 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d100      	bne.n	800d00e <RemapAndLinkDMAtoUARTTx+0x12>
 800d00c:	e096      	b.n	800d13c <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d00e:	4ac2      	ldr	r2, [pc, #776]	; (800d318 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d100      	bne.n	800d016 <RemapAndLinkDMAtoUARTTx+0x1a>
 800d014:	e0eb      	b.n	800d1ee <RemapAndLinkDMAtoUARTTx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d016:	4ac1      	ldr	r2, [pc, #772]	; (800d31c <RemapAndLinkDMAtoUARTTx+0x320>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d100      	bne.n	800d01e <RemapAndLinkDMAtoUARTTx+0x22>
 800d01c:	e141      	b.n	800d2a2 <RemapAndLinkDMAtoUARTTx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d01e:	4ac0      	ldr	r2, [pc, #768]	; (800d320 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d100      	bne.n	800d026 <RemapAndLinkDMAtoUARTTx+0x2a>
 800d024:	e1bd      	b.n	800d3a2 <RemapAndLinkDMAtoUARTTx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d026:	4abf      	ldr	r2, [pc, #764]	; (800d324 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d100      	bne.n	800d02e <RemapAndLinkDMAtoUARTTx+0x32>
 800d02c:	e213      	b.n	800d456 <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d02e:	4abe      	ldr	r2, [pc, #760]	; (800d328 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d100      	bne.n	800d036 <RemapAndLinkDMAtoUARTTx+0x3a>
 800d034:	e269      	b.n	800d50a <RemapAndLinkDMAtoUARTTx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d036:	4abd      	ldr	r2, [pc, #756]	; (800d32c <RemapAndLinkDMAtoUARTTx+0x330>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d136      	bne.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
 800d03c:	680b      	ldr	r3, [r1, #0]
 800d03e:	4abc      	ldr	r2, [pc, #752]	; (800d330 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d100      	bne.n	800d046 <RemapAndLinkDMAtoUARTTx+0x4a>
 800d044:	e2bb      	b.n	800d5be <RemapAndLinkDMAtoUARTTx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d046:	4abb      	ldr	r2, [pc, #748]	; (800d334 <RemapAndLinkDMAtoUARTTx+0x338>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d100      	bne.n	800d04e <RemapAndLinkDMAtoUARTTx+0x52>
 800d04c:	e2c1      	b.n	800d5d2 <RemapAndLinkDMAtoUARTTx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d04e:	4aba      	ldr	r2, [pc, #744]	; (800d338 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d100      	bne.n	800d056 <RemapAndLinkDMAtoUARTTx+0x5a>
 800d054:	e2c9      	b.n	800d5ea <RemapAndLinkDMAtoUARTTx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d056:	4ab9      	ldr	r2, [pc, #740]	; (800d33c <RemapAndLinkDMAtoUARTTx+0x340>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d100      	bne.n	800d05e <RemapAndLinkDMAtoUARTTx+0x62>
 800d05c:	e2d1      	b.n	800d602 <RemapAndLinkDMAtoUARTTx+0x606>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d05e:	4ab8      	ldr	r2, [pc, #736]	; (800d340 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d100      	bne.n	800d066 <RemapAndLinkDMAtoUARTTx+0x6a>
 800d064:	e2d7      	b.n	800d616 <RemapAndLinkDMAtoUARTTx+0x61a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800d066:	4ab7      	ldr	r2, [pc, #732]	; (800d344 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d11e      	bne.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800d06c:	4ab6      	ldr	r2, [pc, #728]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d06e:	23a8      	movs	r3, #168	; 0xa8
 800d070:	58d4      	ldr	r4, [r2, r3]
 800d072:	4db6      	ldr	r5, [pc, #728]	; (800d34c <RemapAndLinkDMAtoUARTTx+0x350>)
 800d074:	402c      	ands	r4, r5
 800d076:	50d4      	str	r4, [r2, r3]
 800d078:	58d5      	ldr	r5, [r2, r3]
 800d07a:	24f0      	movs	r4, #240	; 0xf0
 800d07c:	0324      	lsls	r4, r4, #12
 800d07e:	432c      	orrs	r4, r5
 800d080:	50d4      	str	r4, [r2, r3]
 800d082:	e012      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d084:	680b      	ldr	r3, [r1, #0]
 800d086:	4aaa      	ldr	r2, [pc, #680]	; (800d330 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d011      	beq.n	800d0b0 <RemapAndLinkDMAtoUARTTx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800d08c:	4aa9      	ldr	r2, [pc, #676]	; (800d334 <RemapAndLinkDMAtoUARTTx+0x338>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d019      	beq.n	800d0c6 <RemapAndLinkDMAtoUARTTx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800d092:	4aa9      	ldr	r2, [pc, #676]	; (800d338 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d022      	beq.n	800d0de <RemapAndLinkDMAtoUARTTx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800d098:	4aa8      	ldr	r2, [pc, #672]	; (800d33c <RemapAndLinkDMAtoUARTTx+0x340>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d02b      	beq.n	800d0f6 <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800d09e:	4aa8      	ldr	r2, [pc, #672]	; (800d340 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d033      	beq.n	800d10c <RemapAndLinkDMAtoUARTTx+0x110>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800d0a4:	4aa7      	ldr	r2, [pc, #668]	; (800d344 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d03c      	beq.n	800d124 <RemapAndLinkDMAtoUARTTx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800d0aa:	6601      	str	r1, [r0, #96]	; 0x60
 800d0ac:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d0ae:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800d0b0:	4aa7      	ldr	r2, [pc, #668]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d0b2:	23a8      	movs	r3, #168	; 0xa8
 800d0b4:	58d4      	ldr	r4, [r2, r3]
 800d0b6:	25f0      	movs	r5, #240	; 0xf0
 800d0b8:	43ac      	bics	r4, r5
 800d0ba:	50d4      	str	r4, [r2, r3]
 800d0bc:	58d4      	ldr	r4, [r2, r3]
 800d0be:	3d70      	subs	r5, #112	; 0x70
 800d0c0:	432c      	orrs	r4, r5
 800d0c2:	50d4      	str	r4, [r2, r3]
 800d0c4:	e7f1      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800d0c6:	4aa2      	ldr	r2, [pc, #648]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d0c8:	23a8      	movs	r3, #168	; 0xa8
 800d0ca:	58d4      	ldr	r4, [r2, r3]
 800d0cc:	4da1      	ldr	r5, [pc, #644]	; (800d354 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d0ce:	402c      	ands	r4, r5
 800d0d0:	50d4      	str	r4, [r2, r3]
 800d0d2:	58d5      	ldr	r5, [r2, r3]
 800d0d4:	2480      	movs	r4, #128	; 0x80
 800d0d6:	0224      	lsls	r4, r4, #8
 800d0d8:	432c      	orrs	r4, r5
 800d0da:	50d4      	str	r4, [r2, r3]
 800d0dc:	e7e5      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800d0de:	4a9c      	ldr	r2, [pc, #624]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d0e0:	23a8      	movs	r3, #168	; 0xa8
 800d0e2:	58d4      	ldr	r4, [r2, r3]
 800d0e4:	4d9c      	ldr	r5, [pc, #624]	; (800d358 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d0e6:	402c      	ands	r4, r5
 800d0e8:	50d4      	str	r4, [r2, r3]
 800d0ea:	58d5      	ldr	r5, [r2, r3]
 800d0ec:	2480      	movs	r4, #128	; 0x80
 800d0ee:	0524      	lsls	r4, r4, #20
 800d0f0:	432c      	orrs	r4, r5
 800d0f2:	50d4      	str	r4, [r2, r3]
 800d0f4:	e7d9      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800d0f6:	4a94      	ldr	r2, [pc, #592]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d0f8:	23a8      	movs	r3, #168	; 0xa8
 800d0fa:	58d4      	ldr	r4, [r2, r3]
 800d0fc:	250f      	movs	r5, #15
 800d0fe:	43ac      	bics	r4, r5
 800d100:	50d4      	str	r4, [r2, r3]
 800d102:	58d4      	ldr	r4, [r2, r3]
 800d104:	3d07      	subs	r5, #7
 800d106:	432c      	orrs	r4, r5
 800d108:	50d4      	str	r4, [r2, r3]
 800d10a:	e7ce      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800d10c:	4a8e      	ldr	r2, [pc, #568]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d10e:	23a8      	movs	r3, #168	; 0xa8
 800d110:	58d4      	ldr	r4, [r2, r3]
 800d112:	4d90      	ldr	r5, [pc, #576]	; (800d354 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d114:	402c      	ands	r4, r5
 800d116:	50d4      	str	r4, [r2, r3]
 800d118:	58d5      	ldr	r5, [r2, r3]
 800d11a:	2480      	movs	r4, #128	; 0x80
 800d11c:	0224      	lsls	r4, r4, #8
 800d11e:	432c      	orrs	r4, r5
 800d120:	50d4      	str	r4, [r2, r3]
 800d122:	e7c2      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800d124:	4a88      	ldr	r2, [pc, #544]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d126:	23a8      	movs	r3, #168	; 0xa8
 800d128:	58d4      	ldr	r4, [r2, r3]
 800d12a:	4d88      	ldr	r5, [pc, #544]	; (800d34c <RemapAndLinkDMAtoUARTTx+0x350>)
 800d12c:	402c      	ands	r4, r5
 800d12e:	50d4      	str	r4, [r2, r3]
 800d130:	58d5      	ldr	r5, [r2, r3]
 800d132:	2480      	movs	r4, #128	; 0x80
 800d134:	0324      	lsls	r4, r4, #12
 800d136:	432c      	orrs	r4, r5
 800d138:	50d4      	str	r4, [r2, r3]
 800d13a:	e7b6      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d13c:	680b      	ldr	r3, [r1, #0]
 800d13e:	4a7c      	ldr	r2, [pc, #496]	; (800d330 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d01a      	beq.n	800d17a <RemapAndLinkDMAtoUARTTx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800d144:	4a7b      	ldr	r2, [pc, #492]	; (800d334 <RemapAndLinkDMAtoUARTTx+0x338>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d022      	beq.n	800d190 <RemapAndLinkDMAtoUARTTx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800d14a:	4a7b      	ldr	r2, [pc, #492]	; (800d338 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d02b      	beq.n	800d1a8 <RemapAndLinkDMAtoUARTTx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800d150:	4a7a      	ldr	r2, [pc, #488]	; (800d33c <RemapAndLinkDMAtoUARTTx+0x340>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d034      	beq.n	800d1c0 <RemapAndLinkDMAtoUARTTx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800d156:	4a7a      	ldr	r2, [pc, #488]	; (800d340 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d03c      	beq.n	800d1d6 <RemapAndLinkDMAtoUARTTx+0x1da>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800d15c:	4a79      	ldr	r2, [pc, #484]	; (800d344 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d1a3      	bne.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800d162:	4a79      	ldr	r2, [pc, #484]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d164:	23a8      	movs	r3, #168	; 0xa8
 800d166:	58d4      	ldr	r4, [r2, r3]
 800d168:	4d78      	ldr	r5, [pc, #480]	; (800d34c <RemapAndLinkDMAtoUARTTx+0x350>)
 800d16a:	402c      	ands	r4, r5
 800d16c:	50d4      	str	r4, [r2, r3]
 800d16e:	58d5      	ldr	r5, [r2, r3]
 800d170:	2490      	movs	r4, #144	; 0x90
 800d172:	0324      	lsls	r4, r4, #12
 800d174:	432c      	orrs	r4, r5
 800d176:	50d4      	str	r4, [r2, r3]
 800d178:	e797      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800d17a:	4a75      	ldr	r2, [pc, #468]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d17c:	23a8      	movs	r3, #168	; 0xa8
 800d17e:	58d4      	ldr	r4, [r2, r3]
 800d180:	25f0      	movs	r5, #240	; 0xf0
 800d182:	43ac      	bics	r4, r5
 800d184:	50d4      	str	r4, [r2, r3]
 800d186:	58d4      	ldr	r4, [r2, r3]
 800d188:	3d60      	subs	r5, #96	; 0x60
 800d18a:	432c      	orrs	r4, r5
 800d18c:	50d4      	str	r4, [r2, r3]
 800d18e:	e78c      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800d190:	4a6f      	ldr	r2, [pc, #444]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d192:	23a8      	movs	r3, #168	; 0xa8
 800d194:	58d4      	ldr	r4, [r2, r3]
 800d196:	4d6f      	ldr	r5, [pc, #444]	; (800d354 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d198:	402c      	ands	r4, r5
 800d19a:	50d4      	str	r4, [r2, r3]
 800d19c:	58d5      	ldr	r5, [r2, r3]
 800d19e:	2490      	movs	r4, #144	; 0x90
 800d1a0:	0224      	lsls	r4, r4, #8
 800d1a2:	432c      	orrs	r4, r5
 800d1a4:	50d4      	str	r4, [r2, r3]
 800d1a6:	e780      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800d1a8:	4a69      	ldr	r2, [pc, #420]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d1aa:	23a8      	movs	r3, #168	; 0xa8
 800d1ac:	58d4      	ldr	r4, [r2, r3]
 800d1ae:	4d6a      	ldr	r5, [pc, #424]	; (800d358 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d1b0:	402c      	ands	r4, r5
 800d1b2:	50d4      	str	r4, [r2, r3]
 800d1b4:	58d5      	ldr	r5, [r2, r3]
 800d1b6:	2490      	movs	r4, #144	; 0x90
 800d1b8:	0524      	lsls	r4, r4, #20
 800d1ba:	432c      	orrs	r4, r5
 800d1bc:	50d4      	str	r4, [r2, r3]
 800d1be:	e774      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800d1c0:	4a61      	ldr	r2, [pc, #388]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d1c2:	23a8      	movs	r3, #168	; 0xa8
 800d1c4:	58d4      	ldr	r4, [r2, r3]
 800d1c6:	250f      	movs	r5, #15
 800d1c8:	43ac      	bics	r4, r5
 800d1ca:	50d4      	str	r4, [r2, r3]
 800d1cc:	58d4      	ldr	r4, [r2, r3]
 800d1ce:	3d06      	subs	r5, #6
 800d1d0:	432c      	orrs	r4, r5
 800d1d2:	50d4      	str	r4, [r2, r3]
 800d1d4:	e769      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d1d6:	4a5c      	ldr	r2, [pc, #368]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d1d8:	23a8      	movs	r3, #168	; 0xa8
 800d1da:	58d4      	ldr	r4, [r2, r3]
 800d1dc:	4d5d      	ldr	r5, [pc, #372]	; (800d354 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d1de:	402c      	ands	r4, r5
 800d1e0:	50d4      	str	r4, [r2, r3]
 800d1e2:	58d5      	ldr	r5, [r2, r3]
 800d1e4:	2490      	movs	r4, #144	; 0x90
 800d1e6:	0224      	lsls	r4, r4, #8
 800d1e8:	432c      	orrs	r4, r5
 800d1ea:	50d4      	str	r4, [r2, r3]
 800d1ec:	e75d      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d1ee:	680b      	ldr	r3, [r1, #0]
 800d1f0:	4a4f      	ldr	r2, [pc, #316]	; (800d330 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d01b      	beq.n	800d22e <RemapAndLinkDMAtoUARTTx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d1f6:	4a4f      	ldr	r2, [pc, #316]	; (800d334 <RemapAndLinkDMAtoUARTTx+0x338>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d023      	beq.n	800d244 <RemapAndLinkDMAtoUARTTx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d1fc:	4a4e      	ldr	r2, [pc, #312]	; (800d338 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d02c      	beq.n	800d25c <RemapAndLinkDMAtoUARTTx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d202:	4a4e      	ldr	r2, [pc, #312]	; (800d33c <RemapAndLinkDMAtoUARTTx+0x340>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d035      	beq.n	800d274 <RemapAndLinkDMAtoUARTTx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d208:	4a4d      	ldr	r2, [pc, #308]	; (800d340 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d03d      	beq.n	800d28a <RemapAndLinkDMAtoUARTTx+0x28e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d20e:	4a4d      	ldr	r2, [pc, #308]	; (800d344 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d000      	beq.n	800d216 <RemapAndLinkDMAtoUARTTx+0x21a>
 800d214:	e749      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800d216:	4a4c      	ldr	r2, [pc, #304]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d218:	23a8      	movs	r3, #168	; 0xa8
 800d21a:	58d4      	ldr	r4, [r2, r3]
 800d21c:	4d4b      	ldr	r5, [pc, #300]	; (800d34c <RemapAndLinkDMAtoUARTTx+0x350>)
 800d21e:	402c      	ands	r4, r5
 800d220:	50d4      	str	r4, [r2, r3]
 800d222:	58d5      	ldr	r5, [r2, r3]
 800d224:	24a0      	movs	r4, #160	; 0xa0
 800d226:	0324      	lsls	r4, r4, #12
 800d228:	432c      	orrs	r4, r5
 800d22a:	50d4      	str	r4, [r2, r3]
 800d22c:	e73d      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d22e:	4a48      	ldr	r2, [pc, #288]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d230:	23a8      	movs	r3, #168	; 0xa8
 800d232:	58d4      	ldr	r4, [r2, r3]
 800d234:	25f0      	movs	r5, #240	; 0xf0
 800d236:	43ac      	bics	r4, r5
 800d238:	50d4      	str	r4, [r2, r3]
 800d23a:	58d4      	ldr	r4, [r2, r3]
 800d23c:	3d50      	subs	r5, #80	; 0x50
 800d23e:	432c      	orrs	r4, r5
 800d240:	50d4      	str	r4, [r2, r3]
 800d242:	e732      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d244:	4a42      	ldr	r2, [pc, #264]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d246:	23a8      	movs	r3, #168	; 0xa8
 800d248:	58d4      	ldr	r4, [r2, r3]
 800d24a:	4d42      	ldr	r5, [pc, #264]	; (800d354 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d24c:	402c      	ands	r4, r5
 800d24e:	50d4      	str	r4, [r2, r3]
 800d250:	58d5      	ldr	r5, [r2, r3]
 800d252:	24a0      	movs	r4, #160	; 0xa0
 800d254:	0224      	lsls	r4, r4, #8
 800d256:	432c      	orrs	r4, r5
 800d258:	50d4      	str	r4, [r2, r3]
 800d25a:	e726      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d25c:	4a3c      	ldr	r2, [pc, #240]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d25e:	23a8      	movs	r3, #168	; 0xa8
 800d260:	58d4      	ldr	r4, [r2, r3]
 800d262:	4d3d      	ldr	r5, [pc, #244]	; (800d358 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d264:	402c      	ands	r4, r5
 800d266:	50d4      	str	r4, [r2, r3]
 800d268:	58d5      	ldr	r5, [r2, r3]
 800d26a:	24a0      	movs	r4, #160	; 0xa0
 800d26c:	0524      	lsls	r4, r4, #20
 800d26e:	432c      	orrs	r4, r5
 800d270:	50d4      	str	r4, [r2, r3]
 800d272:	e71a      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d274:	4a34      	ldr	r2, [pc, #208]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d276:	23a8      	movs	r3, #168	; 0xa8
 800d278:	58d4      	ldr	r4, [r2, r3]
 800d27a:	250f      	movs	r5, #15
 800d27c:	43ac      	bics	r4, r5
 800d27e:	50d4      	str	r4, [r2, r3]
 800d280:	58d4      	ldr	r4, [r2, r3]
 800d282:	3d05      	subs	r5, #5
 800d284:	432c      	orrs	r4, r5
 800d286:	50d4      	str	r4, [r2, r3]
 800d288:	e70f      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d28a:	4a2f      	ldr	r2, [pc, #188]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d28c:	23a8      	movs	r3, #168	; 0xa8
 800d28e:	58d4      	ldr	r4, [r2, r3]
 800d290:	4d30      	ldr	r5, [pc, #192]	; (800d354 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d292:	402c      	ands	r4, r5
 800d294:	50d4      	str	r4, [r2, r3]
 800d296:	58d5      	ldr	r5, [r2, r3]
 800d298:	24a0      	movs	r4, #160	; 0xa0
 800d29a:	0224      	lsls	r4, r4, #8
 800d29c:	432c      	orrs	r4, r5
 800d29e:	50d4      	str	r4, [r2, r3]
 800d2a0:	e703      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d2a2:	680b      	ldr	r3, [r1, #0]
 800d2a4:	4a22      	ldr	r2, [pc, #136]	; (800d330 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d01b      	beq.n	800d2e2 <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d2aa:	4a22      	ldr	r2, [pc, #136]	; (800d334 <RemapAndLinkDMAtoUARTTx+0x338>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d023      	beq.n	800d2f8 <RemapAndLinkDMAtoUARTTx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d2b0:	4a21      	ldr	r2, [pc, #132]	; (800d338 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d052      	beq.n	800d35c <RemapAndLinkDMAtoUARTTx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d2b6:	4a21      	ldr	r2, [pc, #132]	; (800d33c <RemapAndLinkDMAtoUARTTx+0x340>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d05b      	beq.n	800d374 <RemapAndLinkDMAtoUARTTx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d2bc:	4a20      	ldr	r2, [pc, #128]	; (800d340 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d063      	beq.n	800d38a <RemapAndLinkDMAtoUARTTx+0x38e>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d2c2:	4a20      	ldr	r2, [pc, #128]	; (800d344 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d000      	beq.n	800d2ca <RemapAndLinkDMAtoUARTTx+0x2ce>
 800d2c8:	e6ef      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800d2ca:	4a1f      	ldr	r2, [pc, #124]	; (800d348 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d2cc:	23a8      	movs	r3, #168	; 0xa8
 800d2ce:	58d4      	ldr	r4, [r2, r3]
 800d2d0:	4d1e      	ldr	r5, [pc, #120]	; (800d34c <RemapAndLinkDMAtoUARTTx+0x350>)
 800d2d2:	402c      	ands	r4, r5
 800d2d4:	50d4      	str	r4, [r2, r3]
 800d2d6:	58d5      	ldr	r5, [r2, r3]
 800d2d8:	24b0      	movs	r4, #176	; 0xb0
 800d2da:	0324      	lsls	r4, r4, #12
 800d2dc:	432c      	orrs	r4, r5
 800d2de:	50d4      	str	r4, [r2, r3]
 800d2e0:	e6e3      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d2e2:	4a1b      	ldr	r2, [pc, #108]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d2e4:	23a8      	movs	r3, #168	; 0xa8
 800d2e6:	58d4      	ldr	r4, [r2, r3]
 800d2e8:	25f0      	movs	r5, #240	; 0xf0
 800d2ea:	43ac      	bics	r4, r5
 800d2ec:	50d4      	str	r4, [r2, r3]
 800d2ee:	58d4      	ldr	r4, [r2, r3]
 800d2f0:	3d40      	subs	r5, #64	; 0x40
 800d2f2:	432c      	orrs	r4, r5
 800d2f4:	50d4      	str	r4, [r2, r3]
 800d2f6:	e6d8      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d2f8:	4a15      	ldr	r2, [pc, #84]	; (800d350 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d2fa:	23a8      	movs	r3, #168	; 0xa8
 800d2fc:	58d4      	ldr	r4, [r2, r3]
 800d2fe:	4d15      	ldr	r5, [pc, #84]	; (800d354 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d300:	402c      	ands	r4, r5
 800d302:	50d4      	str	r4, [r2, r3]
 800d304:	58d5      	ldr	r5, [r2, r3]
 800d306:	24b0      	movs	r4, #176	; 0xb0
 800d308:	0224      	lsls	r4, r4, #8
 800d30a:	432c      	orrs	r4, r5
 800d30c:	50d4      	str	r4, [r2, r3]
 800d30e:	e6cc      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
 800d310:	40013800 	.word	0x40013800
 800d314:	40004400 	.word	0x40004400
 800d318:	40004800 	.word	0x40004800
 800d31c:	40004c00 	.word	0x40004c00
 800d320:	40005000 	.word	0x40005000
 800d324:	40011400 	.word	0x40011400
 800d328:	40011800 	.word	0x40011800
 800d32c:	40011c00 	.word	0x40011c00
 800d330:	4002001c 	.word	0x4002001c
 800d334:	40020044 	.word	0x40020044
 800d338:	40020080 	.word	0x40020080
 800d33c:	40020408 	.word	0x40020408
 800d340:	40020444 	.word	0x40020444
 800d344:	40020458 	.word	0x40020458
 800d348:	40020400 	.word	0x40020400
 800d34c:	fff0ffff 	.word	0xfff0ffff
 800d350:	40020000 	.word	0x40020000
 800d354:	ffff0fff 	.word	0xffff0fff
 800d358:	f0ffffff 	.word	0xf0ffffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d35c:	4ab4      	ldr	r2, [pc, #720]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d35e:	23a8      	movs	r3, #168	; 0xa8
 800d360:	58d4      	ldr	r4, [r2, r3]
 800d362:	4db4      	ldr	r5, [pc, #720]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d364:	402c      	ands	r4, r5
 800d366:	50d4      	str	r4, [r2, r3]
 800d368:	58d5      	ldr	r5, [r2, r3]
 800d36a:	24b0      	movs	r4, #176	; 0xb0
 800d36c:	0524      	lsls	r4, r4, #20
 800d36e:	432c      	orrs	r4, r5
 800d370:	50d4      	str	r4, [r2, r3]
 800d372:	e69a      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d374:	4ab0      	ldr	r2, [pc, #704]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d376:	23a8      	movs	r3, #168	; 0xa8
 800d378:	58d4      	ldr	r4, [r2, r3]
 800d37a:	250f      	movs	r5, #15
 800d37c:	43ac      	bics	r4, r5
 800d37e:	50d4      	str	r4, [r2, r3]
 800d380:	58d4      	ldr	r4, [r2, r3]
 800d382:	3d04      	subs	r5, #4
 800d384:	432c      	orrs	r4, r5
 800d386:	50d4      	str	r4, [r2, r3]
 800d388:	e68f      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d38a:	4aab      	ldr	r2, [pc, #684]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d38c:	23a8      	movs	r3, #168	; 0xa8
 800d38e:	58d4      	ldr	r4, [r2, r3]
 800d390:	4daa      	ldr	r5, [pc, #680]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x640>)
 800d392:	402c      	ands	r4, r5
 800d394:	50d4      	str	r4, [r2, r3]
 800d396:	58d5      	ldr	r5, [r2, r3]
 800d398:	24b0      	movs	r4, #176	; 0xb0
 800d39a:	0224      	lsls	r4, r4, #8
 800d39c:	432c      	orrs	r4, r5
 800d39e:	50d4      	str	r4, [r2, r3]
 800d3a0:	e683      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d3a2:	680b      	ldr	r3, [r1, #0]
 800d3a4:	4aa6      	ldr	r2, [pc, #664]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d01b      	beq.n	800d3e2 <RemapAndLinkDMAtoUARTTx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d3aa:	4aa6      	ldr	r2, [pc, #664]	; (800d644 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d023      	beq.n	800d3f8 <RemapAndLinkDMAtoUARTTx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d3b0:	4aa5      	ldr	r2, [pc, #660]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d02c      	beq.n	800d410 <RemapAndLinkDMAtoUARTTx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d3b6:	4aa5      	ldr	r2, [pc, #660]	; (800d64c <RemapAndLinkDMAtoUARTTx+0x650>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d035      	beq.n	800d428 <RemapAndLinkDMAtoUARTTx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d3bc:	4aa4      	ldr	r2, [pc, #656]	; (800d650 <RemapAndLinkDMAtoUARTTx+0x654>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d03d      	beq.n	800d43e <RemapAndLinkDMAtoUARTTx+0x442>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d3c2:	4aa4      	ldr	r2, [pc, #656]	; (800d654 <RemapAndLinkDMAtoUARTTx+0x658>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d000      	beq.n	800d3ca <RemapAndLinkDMAtoUARTTx+0x3ce>
 800d3c8:	e66f      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d3ca:	4a9b      	ldr	r2, [pc, #620]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d3cc:	23a8      	movs	r3, #168	; 0xa8
 800d3ce:	58d4      	ldr	r4, [r2, r3]
 800d3d0:	4da1      	ldr	r5, [pc, #644]	; (800d658 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800d3d2:	402c      	ands	r4, r5
 800d3d4:	50d4      	str	r4, [r2, r3]
 800d3d6:	58d5      	ldr	r5, [r2, r3]
 800d3d8:	24c0      	movs	r4, #192	; 0xc0
 800d3da:	0324      	lsls	r4, r4, #12
 800d3dc:	432c      	orrs	r4, r5
 800d3de:	50d4      	str	r4, [r2, r3]
 800d3e0:	e663      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d3e2:	4a93      	ldr	r2, [pc, #588]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d3e4:	23a8      	movs	r3, #168	; 0xa8
 800d3e6:	58d4      	ldr	r4, [r2, r3]
 800d3e8:	25f0      	movs	r5, #240	; 0xf0
 800d3ea:	43ac      	bics	r4, r5
 800d3ec:	50d4      	str	r4, [r2, r3]
 800d3ee:	58d4      	ldr	r4, [r2, r3]
 800d3f0:	3d30      	subs	r5, #48	; 0x30
 800d3f2:	432c      	orrs	r4, r5
 800d3f4:	50d4      	str	r4, [r2, r3]
 800d3f6:	e658      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d3f8:	4a8d      	ldr	r2, [pc, #564]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d3fa:	23a8      	movs	r3, #168	; 0xa8
 800d3fc:	58d4      	ldr	r4, [r2, r3]
 800d3fe:	4d8f      	ldr	r5, [pc, #572]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x640>)
 800d400:	402c      	ands	r4, r5
 800d402:	50d4      	str	r4, [r2, r3]
 800d404:	58d5      	ldr	r5, [r2, r3]
 800d406:	24c0      	movs	r4, #192	; 0xc0
 800d408:	0224      	lsls	r4, r4, #8
 800d40a:	432c      	orrs	r4, r5
 800d40c:	50d4      	str	r4, [r2, r3]
 800d40e:	e64c      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d410:	4a87      	ldr	r2, [pc, #540]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d412:	23a8      	movs	r3, #168	; 0xa8
 800d414:	58d4      	ldr	r4, [r2, r3]
 800d416:	4d87      	ldr	r5, [pc, #540]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d418:	402c      	ands	r4, r5
 800d41a:	50d4      	str	r4, [r2, r3]
 800d41c:	58d5      	ldr	r5, [r2, r3]
 800d41e:	24c0      	movs	r4, #192	; 0xc0
 800d420:	0524      	lsls	r4, r4, #20
 800d422:	432c      	orrs	r4, r5
 800d424:	50d4      	str	r4, [r2, r3]
 800d426:	e640      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d428:	4a83      	ldr	r2, [pc, #524]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d42a:	23a8      	movs	r3, #168	; 0xa8
 800d42c:	58d4      	ldr	r4, [r2, r3]
 800d42e:	250f      	movs	r5, #15
 800d430:	43ac      	bics	r4, r5
 800d432:	50d4      	str	r4, [r2, r3]
 800d434:	58d4      	ldr	r4, [r2, r3]
 800d436:	3d03      	subs	r5, #3
 800d438:	432c      	orrs	r4, r5
 800d43a:	50d4      	str	r4, [r2, r3]
 800d43c:	e635      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d43e:	4a7e      	ldr	r2, [pc, #504]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d440:	23a8      	movs	r3, #168	; 0xa8
 800d442:	58d4      	ldr	r4, [r2, r3]
 800d444:	4d7d      	ldr	r5, [pc, #500]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x640>)
 800d446:	402c      	ands	r4, r5
 800d448:	50d4      	str	r4, [r2, r3]
 800d44a:	58d5      	ldr	r5, [r2, r3]
 800d44c:	24c0      	movs	r4, #192	; 0xc0
 800d44e:	0224      	lsls	r4, r4, #8
 800d450:	432c      	orrs	r4, r5
 800d452:	50d4      	str	r4, [r2, r3]
 800d454:	e629      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d456:	680b      	ldr	r3, [r1, #0]
 800d458:	4a79      	ldr	r2, [pc, #484]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d01b      	beq.n	800d496 <RemapAndLinkDMAtoUARTTx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d45e:	4a79      	ldr	r2, [pc, #484]	; (800d644 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d023      	beq.n	800d4ac <RemapAndLinkDMAtoUARTTx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d464:	4a78      	ldr	r2, [pc, #480]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d02c      	beq.n	800d4c4 <RemapAndLinkDMAtoUARTTx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d46a:	4a78      	ldr	r2, [pc, #480]	; (800d64c <RemapAndLinkDMAtoUARTTx+0x650>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d035      	beq.n	800d4dc <RemapAndLinkDMAtoUARTTx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d470:	4a77      	ldr	r2, [pc, #476]	; (800d650 <RemapAndLinkDMAtoUARTTx+0x654>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d03d      	beq.n	800d4f2 <RemapAndLinkDMAtoUARTTx+0x4f6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d476:	4a77      	ldr	r2, [pc, #476]	; (800d654 <RemapAndLinkDMAtoUARTTx+0x658>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d000      	beq.n	800d47e <RemapAndLinkDMAtoUARTTx+0x482>
 800d47c:	e615      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d47e:	4a6e      	ldr	r2, [pc, #440]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d480:	23a8      	movs	r3, #168	; 0xa8
 800d482:	58d4      	ldr	r4, [r2, r3]
 800d484:	4d74      	ldr	r5, [pc, #464]	; (800d658 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800d486:	402c      	ands	r4, r5
 800d488:	50d4      	str	r4, [r2, r3]
 800d48a:	58d5      	ldr	r5, [r2, r3]
 800d48c:	24d0      	movs	r4, #208	; 0xd0
 800d48e:	0324      	lsls	r4, r4, #12
 800d490:	432c      	orrs	r4, r5
 800d492:	50d4      	str	r4, [r2, r3]
 800d494:	e609      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d496:	4a66      	ldr	r2, [pc, #408]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d498:	23a8      	movs	r3, #168	; 0xa8
 800d49a:	58d4      	ldr	r4, [r2, r3]
 800d49c:	25f0      	movs	r5, #240	; 0xf0
 800d49e:	43ac      	bics	r4, r5
 800d4a0:	50d4      	str	r4, [r2, r3]
 800d4a2:	58d4      	ldr	r4, [r2, r3]
 800d4a4:	3d20      	subs	r5, #32
 800d4a6:	432c      	orrs	r4, r5
 800d4a8:	50d4      	str	r4, [r2, r3]
 800d4aa:	e5fe      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d4ac:	4a60      	ldr	r2, [pc, #384]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d4ae:	23a8      	movs	r3, #168	; 0xa8
 800d4b0:	58d4      	ldr	r4, [r2, r3]
 800d4b2:	4d62      	ldr	r5, [pc, #392]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x640>)
 800d4b4:	402c      	ands	r4, r5
 800d4b6:	50d4      	str	r4, [r2, r3]
 800d4b8:	58d5      	ldr	r5, [r2, r3]
 800d4ba:	24d0      	movs	r4, #208	; 0xd0
 800d4bc:	0224      	lsls	r4, r4, #8
 800d4be:	432c      	orrs	r4, r5
 800d4c0:	50d4      	str	r4, [r2, r3]
 800d4c2:	e5f2      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d4c4:	4a5a      	ldr	r2, [pc, #360]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d4c6:	23a8      	movs	r3, #168	; 0xa8
 800d4c8:	58d4      	ldr	r4, [r2, r3]
 800d4ca:	4d5a      	ldr	r5, [pc, #360]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d4cc:	402c      	ands	r4, r5
 800d4ce:	50d4      	str	r4, [r2, r3]
 800d4d0:	58d5      	ldr	r5, [r2, r3]
 800d4d2:	24d0      	movs	r4, #208	; 0xd0
 800d4d4:	0524      	lsls	r4, r4, #20
 800d4d6:	432c      	orrs	r4, r5
 800d4d8:	50d4      	str	r4, [r2, r3]
 800d4da:	e5e6      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d4dc:	4a56      	ldr	r2, [pc, #344]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d4de:	23a8      	movs	r3, #168	; 0xa8
 800d4e0:	58d4      	ldr	r4, [r2, r3]
 800d4e2:	250f      	movs	r5, #15
 800d4e4:	43ac      	bics	r4, r5
 800d4e6:	50d4      	str	r4, [r2, r3]
 800d4e8:	58d4      	ldr	r4, [r2, r3]
 800d4ea:	3d02      	subs	r5, #2
 800d4ec:	432c      	orrs	r4, r5
 800d4ee:	50d4      	str	r4, [r2, r3]
 800d4f0:	e5db      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d4f2:	4a51      	ldr	r2, [pc, #324]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d4f4:	23a8      	movs	r3, #168	; 0xa8
 800d4f6:	58d4      	ldr	r4, [r2, r3]
 800d4f8:	4d50      	ldr	r5, [pc, #320]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x640>)
 800d4fa:	402c      	ands	r4, r5
 800d4fc:	50d4      	str	r4, [r2, r3]
 800d4fe:	58d5      	ldr	r5, [r2, r3]
 800d500:	24d0      	movs	r4, #208	; 0xd0
 800d502:	0224      	lsls	r4, r4, #8
 800d504:	432c      	orrs	r4, r5
 800d506:	50d4      	str	r4, [r2, r3]
 800d508:	e5cf      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d50a:	680b      	ldr	r3, [r1, #0]
 800d50c:	4a4c      	ldr	r2, [pc, #304]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d01b      	beq.n	800d54a <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d512:	4a4c      	ldr	r2, [pc, #304]	; (800d644 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d023      	beq.n	800d560 <RemapAndLinkDMAtoUARTTx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d518:	4a4b      	ldr	r2, [pc, #300]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d02c      	beq.n	800d578 <RemapAndLinkDMAtoUARTTx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d51e:	4a4b      	ldr	r2, [pc, #300]	; (800d64c <RemapAndLinkDMAtoUARTTx+0x650>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d035      	beq.n	800d590 <RemapAndLinkDMAtoUARTTx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d524:	4a4a      	ldr	r2, [pc, #296]	; (800d650 <RemapAndLinkDMAtoUARTTx+0x654>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d03d      	beq.n	800d5a6 <RemapAndLinkDMAtoUARTTx+0x5aa>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d52a:	4a4a      	ldr	r2, [pc, #296]	; (800d654 <RemapAndLinkDMAtoUARTTx+0x658>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d000      	beq.n	800d532 <RemapAndLinkDMAtoUARTTx+0x536>
 800d530:	e5bb      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d532:	4a41      	ldr	r2, [pc, #260]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d534:	23a8      	movs	r3, #168	; 0xa8
 800d536:	58d4      	ldr	r4, [r2, r3]
 800d538:	4d47      	ldr	r5, [pc, #284]	; (800d658 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800d53a:	402c      	ands	r4, r5
 800d53c:	50d4      	str	r4, [r2, r3]
 800d53e:	58d5      	ldr	r5, [r2, r3]
 800d540:	24e0      	movs	r4, #224	; 0xe0
 800d542:	0324      	lsls	r4, r4, #12
 800d544:	432c      	orrs	r4, r5
 800d546:	50d4      	str	r4, [r2, r3]
 800d548:	e5af      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d54a:	4a39      	ldr	r2, [pc, #228]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d54c:	23a8      	movs	r3, #168	; 0xa8
 800d54e:	58d4      	ldr	r4, [r2, r3]
 800d550:	25f0      	movs	r5, #240	; 0xf0
 800d552:	43ac      	bics	r4, r5
 800d554:	50d4      	str	r4, [r2, r3]
 800d556:	58d4      	ldr	r4, [r2, r3]
 800d558:	3d10      	subs	r5, #16
 800d55a:	432c      	orrs	r4, r5
 800d55c:	50d4      	str	r4, [r2, r3]
 800d55e:	e5a4      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d560:	4a33      	ldr	r2, [pc, #204]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d562:	23a8      	movs	r3, #168	; 0xa8
 800d564:	58d4      	ldr	r4, [r2, r3]
 800d566:	4d35      	ldr	r5, [pc, #212]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x640>)
 800d568:	402c      	ands	r4, r5
 800d56a:	50d4      	str	r4, [r2, r3]
 800d56c:	58d5      	ldr	r5, [r2, r3]
 800d56e:	24e0      	movs	r4, #224	; 0xe0
 800d570:	0224      	lsls	r4, r4, #8
 800d572:	432c      	orrs	r4, r5
 800d574:	50d4      	str	r4, [r2, r3]
 800d576:	e598      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d578:	4a2d      	ldr	r2, [pc, #180]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d57a:	23a8      	movs	r3, #168	; 0xa8
 800d57c:	58d4      	ldr	r4, [r2, r3]
 800d57e:	4d2d      	ldr	r5, [pc, #180]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d580:	402c      	ands	r4, r5
 800d582:	50d4      	str	r4, [r2, r3]
 800d584:	58d5      	ldr	r5, [r2, r3]
 800d586:	24e0      	movs	r4, #224	; 0xe0
 800d588:	0524      	lsls	r4, r4, #20
 800d58a:	432c      	orrs	r4, r5
 800d58c:	50d4      	str	r4, [r2, r3]
 800d58e:	e58c      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d590:	4a29      	ldr	r2, [pc, #164]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d592:	23a8      	movs	r3, #168	; 0xa8
 800d594:	58d4      	ldr	r4, [r2, r3]
 800d596:	250f      	movs	r5, #15
 800d598:	43ac      	bics	r4, r5
 800d59a:	50d4      	str	r4, [r2, r3]
 800d59c:	58d4      	ldr	r4, [r2, r3]
 800d59e:	3d01      	subs	r5, #1
 800d5a0:	432c      	orrs	r4, r5
 800d5a2:	50d4      	str	r4, [r2, r3]
 800d5a4:	e581      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d5a6:	4a24      	ldr	r2, [pc, #144]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d5a8:	23a8      	movs	r3, #168	; 0xa8
 800d5aa:	58d4      	ldr	r4, [r2, r3]
 800d5ac:	4d23      	ldr	r5, [pc, #140]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x640>)
 800d5ae:	402c      	ands	r4, r5
 800d5b0:	50d4      	str	r4, [r2, r3]
 800d5b2:	58d5      	ldr	r5, [r2, r3]
 800d5b4:	24e0      	movs	r4, #224	; 0xe0
 800d5b6:	0224      	lsls	r4, r4, #8
 800d5b8:	432c      	orrs	r4, r5
 800d5ba:	50d4      	str	r4, [r2, r3]
 800d5bc:	e575      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d5be:	4a1c      	ldr	r2, [pc, #112]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d5c0:	23a8      	movs	r3, #168	; 0xa8
 800d5c2:	58d5      	ldr	r5, [r2, r3]
 800d5c4:	26f0      	movs	r6, #240	; 0xf0
 800d5c6:	43b5      	bics	r5, r6
 800d5c8:	50d5      	str	r5, [r2, r3]
 800d5ca:	58d4      	ldr	r4, [r2, r3]
 800d5cc:	4334      	orrs	r4, r6
 800d5ce:	50d4      	str	r4, [r2, r3]
 800d5d0:	e56b      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d5d2:	4a17      	ldr	r2, [pc, #92]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d5d4:	23a8      	movs	r3, #168	; 0xa8
 800d5d6:	58d4      	ldr	r4, [r2, r3]
 800d5d8:	4d18      	ldr	r5, [pc, #96]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x640>)
 800d5da:	402c      	ands	r4, r5
 800d5dc:	50d4      	str	r4, [r2, r3]
 800d5de:	58d5      	ldr	r5, [r2, r3]
 800d5e0:	24f0      	movs	r4, #240	; 0xf0
 800d5e2:	0224      	lsls	r4, r4, #8
 800d5e4:	432c      	orrs	r4, r5
 800d5e6:	50d4      	str	r4, [r2, r3]
 800d5e8:	e55f      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d5ea:	4a11      	ldr	r2, [pc, #68]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d5ec:	23a8      	movs	r3, #168	; 0xa8
 800d5ee:	58d4      	ldr	r4, [r2, r3]
 800d5f0:	4d10      	ldr	r5, [pc, #64]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d5f2:	402c      	ands	r4, r5
 800d5f4:	50d4      	str	r4, [r2, r3]
 800d5f6:	58d5      	ldr	r5, [r2, r3]
 800d5f8:	24f0      	movs	r4, #240	; 0xf0
 800d5fa:	0524      	lsls	r4, r4, #20
 800d5fc:	432c      	orrs	r4, r5
 800d5fe:	50d4      	str	r4, [r2, r3]
 800d600:	e553      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d602:	4a0d      	ldr	r2, [pc, #52]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d604:	23a8      	movs	r3, #168	; 0xa8
 800d606:	58d5      	ldr	r5, [r2, r3]
 800d608:	260f      	movs	r6, #15
 800d60a:	43b5      	bics	r5, r6
 800d60c:	50d5      	str	r5, [r2, r3]
 800d60e:	58d4      	ldr	r4, [r2, r3]
 800d610:	4334      	orrs	r4, r6
 800d612:	50d4      	str	r4, [r2, r3]
 800d614:	e549      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d616:	4a08      	ldr	r2, [pc, #32]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d618:	23a8      	movs	r3, #168	; 0xa8
 800d61a:	58d4      	ldr	r4, [r2, r3]
 800d61c:	4d07      	ldr	r5, [pc, #28]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x640>)
 800d61e:	402c      	ands	r4, r5
 800d620:	50d4      	str	r4, [r2, r3]
 800d622:	58d5      	ldr	r5, [r2, r3]
 800d624:	24f0      	movs	r4, #240	; 0xf0
 800d626:	0224      	lsls	r4, r4, #8
 800d628:	432c      	orrs	r4, r5
 800d62a:	50d4      	str	r4, [r2, r3]
 800d62c:	e53d      	b.n	800d0aa <RemapAndLinkDMAtoUARTTx+0xae>
 800d62e:	46c0      	nop			; (mov r8, r8)
 800d630:	40020000 	.word	0x40020000
 800d634:	f0ffffff 	.word	0xf0ffffff
 800d638:	40020400 	.word	0x40020400
 800d63c:	ffff0fff 	.word	0xffff0fff
 800d640:	4002001c 	.word	0x4002001c
 800d644:	40020044 	.word	0x40020044
 800d648:	40020080 	.word	0x40020080
 800d64c:	40020408 	.word	0x40020408
 800d650:	40020444 	.word	0x40020444
 800d654:	40020458 	.word	0x40020458
 800d658:	fff0ffff 	.word	0xfff0ffff

0800d65c <DMA_MSG_TX_Setup>:
{	
 800d65c:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d65e:	4b0d      	ldr	r3, [pc, #52]	; (800d694 <DMA_MSG_TX_Setup+0x38>)
 800d660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d662:	2b00      	cmp	r3, #0
 800d664:	d012      	beq.n	800d68c <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800d666:	4b0b      	ldr	r3, [pc, #44]	; (800d694 <DMA_MSG_TX_Setup+0x38>)
 800d668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d010      	beq.n	800d690 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800d66e:	4a09      	ldr	r2, [pc, #36]	; (800d694 <DMA_MSG_TX_Setup+0x38>)
 800d670:	2394      	movs	r3, #148	; 0x94
 800d672:	58d3      	ldr	r3, [r2, r3]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d007      	beq.n	800d688 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d678:	0021      	movs	r1, r4
 800d67a:	f7ff fcbf 	bl	800cffc <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d67e:	2100      	movs	r1, #0
 800d680:	0020      	movs	r0, r4
 800d682:	f7ff f847 	bl	800c714 <SetupDMAInterrupts>
}
 800d686:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800d688:	4c03      	ldr	r4, [pc, #12]	; (800d698 <DMA_MSG_TX_Setup+0x3c>)
 800d68a:	e7f5      	b.n	800d678 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800d68c:	4c01      	ldr	r4, [pc, #4]	; (800d694 <DMA_MSG_TX_Setup+0x38>)
 800d68e:	e7f3      	b.n	800d678 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800d690:	4c02      	ldr	r4, [pc, #8]	; (800d69c <DMA_MSG_TX_Setup+0x40>)
 800d692:	e7f1      	b.n	800d678 <DMA_MSG_TX_Setup+0x1c>
 800d694:	200019d0 	.word	0x200019d0
 800d698:	20001a40 	.word	0x20001a40
 800d69c:	20001a08 	.word	0x20001a08

0800d6a0 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800d6a0:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800d6a2:	4807      	ldr	r0, [pc, #28]	; (800d6c0 <CRC_Init+0x20>)
 800d6a4:	4b07      	ldr	r3, [pc, #28]	; (800d6c4 <CRC_Init+0x24>)
 800d6a6:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d6a8:	2310      	movs	r3, #16
 800d6aa:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d6b0:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800d6b2:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800d6b4:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d6b6:	3303      	adds	r3, #3
 800d6b8:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d6ba:	f003 fd33 	bl	8011124 <HAL_CRC_Init>
}
 800d6be:	bd10      	pop	{r4, pc}
 800d6c0:	20006e68 	.word	0x20006e68
 800d6c4:	40023000 	.word	0x40023000

0800d6c8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d6c8:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d6ca:	4a05      	ldr	r2, [pc, #20]	; (800d6e0 <HAL_CRC_MspInit+0x18>)
 800d6cc:	6951      	ldr	r1, [r2, #20]
 800d6ce:	2340      	movs	r3, #64	; 0x40
 800d6d0:	4319      	orrs	r1, r3
 800d6d2:	6151      	str	r1, [r2, #20]
 800d6d4:	6952      	ldr	r2, [r2, #20]
 800d6d6:	4013      	ands	r3, r2
 800d6d8:	9301      	str	r3, [sp, #4]
 800d6da:	9b01      	ldr	r3, [sp, #4]
}
 800d6dc:	b002      	add	sp, #8
 800d6de:	4770      	bx	lr
 800d6e0:	40021000 	.word	0x40021000

0800d6e4 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800d6e4:	b570      	push	{r4, r5, r6, lr}
 800d6e6:	0004      	movs	r4, r0
 800d6e8:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	d015      	beq.n	800d71a <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800d6ee:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800d6f0:	2900      	cmp	r1, #0
 800d6f2:	d100      	bne.n	800d6f6 <CalculateCRC8+0x12>
}
 800d6f4:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d6f6:	088e      	lsrs	r6, r1, #2
 800d6f8:	0032      	movs	r2, r6
 800d6fa:	0021      	movs	r1, r4
 800d6fc:	4808      	ldr	r0, [pc, #32]	; (800d720 <CalculateCRC8+0x3c>)
 800d6fe:	f003 fd6d 	bl	80111dc <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800d702:	07ab      	lsls	r3, r5, #30
 800d704:	d101      	bne.n	800d70a <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d706:	b2c0      	uxtb	r0, r0
 800d708:	e7f4      	b.n	800d6f4 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800d70a:	0131      	lsls	r1, r6, #4
 800d70c:	1861      	adds	r1, r4, r1
 800d70e:	2201      	movs	r2, #1
 800d710:	4803      	ldr	r0, [pc, #12]	; (800d720 <CalculateCRC8+0x3c>)
 800d712:	f003 fd38 	bl	8011186 <HAL_CRC_Accumulate>
 800d716:	b2c0      	uxtb	r0, r0
 800d718:	e7ec      	b.n	800d6f4 <CalculateCRC8+0x10>
	return 0;
 800d71a:	2000      	movs	r0, #0
 800d71c:	e7ea      	b.n	800d6f4 <CalculateCRC8+0x10>
 800d71e:	46c0      	nop			; (mov r8, r8)
 800d720:	20006e68 	.word	0x20006e68

0800d724 <IND_LED_Init>:
}

/* --- Configure indicator LED ---
*/
void IND_LED_Init(void)
{
 800d724:	b500      	push	{lr}
 800d726:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800d728:	2380      	movs	r3, #128	; 0x80
 800d72a:	011b      	lsls	r3, r3, #4
 800d72c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d72e:	2301      	movs	r3, #1
 800d730:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d732:	2300      	movs	r3, #0
 800d734:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d736:	3303      	adds	r3, #3
 800d738:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d73a:	2090      	movs	r0, #144	; 0x90
 800d73c:	a901      	add	r1, sp, #4
 800d73e:	05c0      	lsls	r0, r0, #23
 800d740:	f004 fbf0 	bl	8011f24 <HAL_GPIO_Init>
}
 800d744:	b007      	add	sp, #28
 800d746:	bd00      	pop	{pc}

0800d748 <GPIO_Init>:
{
 800d748:	b500      	push	{lr}
 800d74a:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d74c:	4b18      	ldr	r3, [pc, #96]	; (800d7b0 <GPIO_Init+0x68>)
 800d74e:	6959      	ldr	r1, [r3, #20]
 800d750:	2080      	movs	r0, #128	; 0x80
 800d752:	0300      	lsls	r0, r0, #12
 800d754:	4301      	orrs	r1, r0
 800d756:	6159      	str	r1, [r3, #20]
 800d758:	695a      	ldr	r2, [r3, #20]
 800d75a:	4002      	ands	r2, r0
 800d75c:	9201      	str	r2, [sp, #4]
 800d75e:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d760:	6959      	ldr	r1, [r3, #20]
 800d762:	2080      	movs	r0, #128	; 0x80
 800d764:	0280      	lsls	r0, r0, #10
 800d766:	4301      	orrs	r1, r0
 800d768:	6159      	str	r1, [r3, #20]
 800d76a:	695a      	ldr	r2, [r3, #20]
 800d76c:	4002      	ands	r2, r0
 800d76e:	9202      	str	r2, [sp, #8]
 800d770:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d772:	6959      	ldr	r1, [r3, #20]
 800d774:	2080      	movs	r0, #128	; 0x80
 800d776:	0340      	lsls	r0, r0, #13
 800d778:	4301      	orrs	r1, r0
 800d77a:	6159      	str	r1, [r3, #20]
 800d77c:	695a      	ldr	r2, [r3, #20]
 800d77e:	4002      	ands	r2, r0
 800d780:	9203      	str	r2, [sp, #12]
 800d782:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d784:	6959      	ldr	r1, [r3, #20]
 800d786:	2080      	movs	r0, #128	; 0x80
 800d788:	02c0      	lsls	r0, r0, #11
 800d78a:	4301      	orrs	r1, r0
 800d78c:	6159      	str	r1, [r3, #20]
 800d78e:	695a      	ldr	r2, [r3, #20]
 800d790:	4002      	ands	r2, r0
 800d792:	9204      	str	r2, [sp, #16]
 800d794:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d796:	695a      	ldr	r2, [r3, #20]
 800d798:	2180      	movs	r1, #128	; 0x80
 800d79a:	03c9      	lsls	r1, r1, #15
 800d79c:	430a      	orrs	r2, r1
 800d79e:	615a      	str	r2, [r3, #20]
 800d7a0:	695b      	ldr	r3, [r3, #20]
 800d7a2:	400b      	ands	r3, r1
 800d7a4:	9305      	str	r3, [sp, #20]
 800d7a6:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800d7a8:	f7ff ffbc 	bl	800d724 <IND_LED_Init>
}
 800d7ac:	b007      	add	sp, #28
 800d7ae:	bd00      	pop	{pc}
 800d7b0:	40021000 	.word	0x40021000

0800d7b4 <BT_RST_GPIO_Init>:


/* --- Configure BT800 EN_RST / BT900 RST GPO ---
*/
void BT_RST_GPIO_Init(void)
{
 800d7b4:	b500      	push	{lr}
 800d7b6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = _BT_RST_PIN;
 800d7b8:	2380      	movs	r3, #128	; 0x80
 800d7ba:	021b      	lsls	r3, r3, #8
 800d7bc:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d7c6:	3303      	adds	r3, #3
 800d7c8:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_BT_RST_PORT, &GPIO_InitStruct);
 800d7ca:	a901      	add	r1, sp, #4
 800d7cc:	4802      	ldr	r0, [pc, #8]	; (800d7d8 <BT_RST_GPIO_Init+0x24>)
 800d7ce:	f004 fba9 	bl	8011f24 <HAL_GPIO_Init>
}
 800d7d2:	b007      	add	sp, #28
 800d7d4:	bd00      	pop	{pc}
 800d7d6:	46c0      	nop			; (mov r8, r8)
 800d7d8:	48000400 	.word	0x48000400

0800d7dc <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	000e      	movs	r6, r1
 800d7e0:	0015      	movs	r5, r2
 800d7e2:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800d7e4:	f000 fd86 	bl	800e2f4 <GetUart>
 800d7e8:	0004      	movs	r4, r0
	
	if (huart == &huart1) 
 800d7ea:	482b      	ldr	r0, [pc, #172]	; (800d898 <GetPortGPIOs+0xbc>)
 800d7ec:	4284      	cmp	r4, r0
 800d7ee:	d01a      	beq.n	800d826 <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800d7f0:	4b2a      	ldr	r3, [pc, #168]	; (800d89c <GetPortGPIOs+0xc0>)
 800d7f2:	429c      	cmp	r4, r3
 800d7f4:	d024      	beq.n	800d840 <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800d7f6:	4b2a      	ldr	r3, [pc, #168]	; (800d8a0 <GetPortGPIOs+0xc4>)
 800d7f8:	429c      	cmp	r4, r3
 800d7fa:	d02c      	beq.n	800d856 <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800d7fc:	4b29      	ldr	r3, [pc, #164]	; (800d8a4 <GetPortGPIOs+0xc8>)
 800d7fe:	429c      	cmp	r4, r3
 800d800:	d035      	beq.n	800d86e <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800d802:	4b29      	ldr	r3, [pc, #164]	; (800d8a8 <GetPortGPIOs+0xcc>)
 800d804:	429c      	cmp	r4, r3
 800d806:	d03d      	beq.n	800d884 <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800d808:	4b28      	ldr	r3, [pc, #160]	; (800d8ac <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800d80a:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800d80c:	429c      	cmp	r4, r3
 800d80e:	d116      	bne.n	800d83e <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800d810:	2390      	movs	r3, #144	; 0x90
 800d812:	05db      	lsls	r3, r3, #23
 800d814:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800d816:	2210      	movs	r2, #16
 800d818:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800d81a:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800d81c:	2320      	movs	r3, #32
 800d81e:	9a06      	ldr	r2, [sp, #24]
 800d820:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d822:	2000      	movs	r0, #0
 800d824:	e00b      	b.n	800d83e <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800d826:	2390      	movs	r3, #144	; 0x90
 800d828:	05db      	lsls	r3, r3, #23
 800d82a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800d82c:	2280      	movs	r2, #128	; 0x80
 800d82e:	0092      	lsls	r2, r2, #2
 800d830:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800d832:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART1_RX_PIN;
 800d834:	2380      	movs	r3, #128	; 0x80
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	9a06      	ldr	r2, [sp, #24]
 800d83a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d83c:	2000      	movs	r0, #0
	
	return result;	
}
 800d83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800d840:	2390      	movs	r3, #144	; 0x90
 800d842:	05db      	lsls	r3, r3, #23
 800d844:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800d846:	2204      	movs	r2, #4
 800d848:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800d84a:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800d84c:	2308      	movs	r3, #8
 800d84e:	9a06      	ldr	r2, [sp, #24]
 800d850:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d852:	2000      	movs	r0, #0
 800d854:	e7f3      	b.n	800d83e <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800d856:	4b16      	ldr	r3, [pc, #88]	; (800d8b0 <GetPortGPIOs+0xd4>)
 800d858:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800d85a:	2280      	movs	r2, #128	; 0x80
 800d85c:	00d2      	lsls	r2, r2, #3
 800d85e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800d860:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800d862:	2380      	movs	r3, #128	; 0x80
 800d864:	011b      	lsls	r3, r3, #4
 800d866:	9a06      	ldr	r2, [sp, #24]
 800d868:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d86a:	2000      	movs	r0, #0
 800d86c:	e7e7      	b.n	800d83e <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800d86e:	2390      	movs	r3, #144	; 0x90
 800d870:	05db      	lsls	r3, r3, #23
 800d872:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800d874:	2201      	movs	r2, #1
 800d876:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800d878:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART4_RX_PIN;
 800d87a:	2302      	movs	r3, #2
 800d87c:	9a06      	ldr	r2, [sp, #24]
 800d87e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d880:	2000      	movs	r0, #0
 800d882:	e7dc      	b.n	800d83e <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800d884:	4b0a      	ldr	r3, [pc, #40]	; (800d8b0 <GetPortGPIOs+0xd4>)
 800d886:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800d888:	2208      	movs	r2, #8
 800d88a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800d88c:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART5_RX_PIN;
 800d88e:	2310      	movs	r3, #16
 800d890:	9a06      	ldr	r2, [sp, #24]
 800d892:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d894:	2000      	movs	r0, #0
 800d896:	e7d2      	b.n	800d83e <GetPortGPIOs+0x62>
 800d898:	20006ca8 	.word	0x20006ca8
 800d89c:	20006df8 	.word	0x20006df8
 800d8a0:	20006bc8 	.word	0x20006bc8
 800d8a4:	20006d88 	.word	0x20006d88
 800d8a8:	20006c38 	.word	0x20006c38
 800d8ac:	20006d18 	.word	0x20006d18
 800d8b0:	48000400 	.word	0x48000400

0800d8b4 <IsFactoryReset>:
{
 800d8b4:	b530      	push	{r4, r5, lr}
 800d8b6:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800d8b8:	4b39      	ldr	r3, [pc, #228]	; (800d9a0 <IsFactoryReset+0xec>)
 800d8ba:	6959      	ldr	r1, [r3, #20]
 800d8bc:	2080      	movs	r0, #128	; 0x80
 800d8be:	0280      	lsls	r0, r0, #10
 800d8c0:	4301      	orrs	r1, r0
 800d8c2:	6159      	str	r1, [r3, #20]
 800d8c4:	695a      	ldr	r2, [r3, #20]
 800d8c6:	4002      	ands	r2, r0
 800d8c8:	9203      	str	r2, [sp, #12]
 800d8ca:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d8cc:	6959      	ldr	r1, [r3, #20]
 800d8ce:	2080      	movs	r0, #128	; 0x80
 800d8d0:	02c0      	lsls	r0, r0, #11
 800d8d2:	4301      	orrs	r1, r0
 800d8d4:	6159      	str	r1, [r3, #20]
 800d8d6:	695a      	ldr	r2, [r3, #20]
 800d8d8:	4002      	ands	r2, r0
 800d8da:	9204      	str	r2, [sp, #16]
 800d8dc:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800d8de:	6959      	ldr	r1, [r3, #20]
 800d8e0:	2080      	movs	r0, #128	; 0x80
 800d8e2:	0300      	lsls	r0, r0, #12
 800d8e4:	4301      	orrs	r1, r0
 800d8e6:	6159      	str	r1, [r3, #20]
 800d8e8:	695a      	ldr	r2, [r3, #20]
 800d8ea:	4002      	ands	r2, r0
 800d8ec:	9205      	str	r2, [sp, #20]
 800d8ee:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800d8f0:	695a      	ldr	r2, [r3, #20]
 800d8f2:	2180      	movs	r1, #128	; 0x80
 800d8f4:	0349      	lsls	r1, r1, #13
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	615a      	str	r2, [r3, #20]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	400b      	ands	r3, r1
 800d8fe:	9306      	str	r3, [sp, #24]
 800d900:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d902:	ab08      	add	r3, sp, #32
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	ab0b      	add	r3, sp, #44	; 0x2c
 800d908:	2222      	movs	r2, #34	; 0x22
 800d90a:	446a      	add	r2, sp
 800d90c:	a90c      	add	r1, sp, #48	; 0x30
 800d90e:	2001      	movs	r0, #1
 800d910:	f7ff ff64 	bl	800d7dc <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d914:	ac07      	add	r4, sp, #28
 800d916:	9400      	str	r4, [sp, #0]
 800d918:	ab09      	add	r3, sp, #36	; 0x24
 800d91a:	221e      	movs	r2, #30
 800d91c:	446a      	add	r2, sp
 800d91e:	a90a      	add	r1, sp, #40	; 0x28
 800d920:	2006      	movs	r0, #6
 800d922:	f7ff ff5b 	bl	800d7dc <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d926:	2301      	movs	r3, #1
 800d928:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d92a:	2500      	movs	r5, #0
 800d92c:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d92e:	466b      	mov	r3, sp
 800d930:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d932:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d934:	a90d      	add	r1, sp, #52	; 0x34
 800d936:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d938:	f004 faf4 	bl	8011f24 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d93c:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800d93e:	2302      	movs	r3, #2
 800d940:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d942:	8823      	ldrh	r3, [r4, #0]
 800d944:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d946:	a90d      	add	r1, sp, #52	; 0x34
 800d948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d94a:	f004 faeb 	bl	8011f24 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800d94e:	466b      	mov	r3, sp
 800d950:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800d952:	2200      	movs	r2, #0
 800d954:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d956:	f004 fc69 	bl	801222c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800d95a:	2005      	movs	r0, #5
 800d95c:	f000 fae4 	bl	800df28 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800d960:	8821      	ldrh	r1, [r4, #0]
 800d962:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d964:	f004 fc5c 	bl	8012220 <HAL_GPIO_ReadPin>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d006      	beq.n	800d97a <IsFactoryReset+0xc6>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d96c:	4b0d      	ldr	r3, [pc, #52]	; (800d9a4 <IsFactoryReset+0xf0>)
 800d96e:	2201      	movs	r2, #1
 800d970:	4252      	negs	r2, r2
 800d972:	601a      	str	r2, [r3, #0]
	return 0;
 800d974:	2000      	movs	r0, #0
}
 800d976:	b013      	add	sp, #76	; 0x4c
 800d978:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800d97a:	2322      	movs	r3, #34	; 0x22
 800d97c:	446b      	add	r3, sp
 800d97e:	8819      	ldrh	r1, [r3, #0]
 800d980:	2201      	movs	r2, #1
 800d982:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d984:	f004 fc52 	bl	801222c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800d988:	2005      	movs	r0, #5
 800d98a:	f000 facd 	bl	800df28 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800d98e:	ab07      	add	r3, sp, #28
 800d990:	8819      	ldrh	r1, [r3, #0]
 800d992:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d994:	f004 fc44 	bl	8012220 <HAL_GPIO_ReadPin>
 800d998:	2801      	cmp	r0, #1
 800d99a:	d1e7      	bne.n	800d96c <IsFactoryReset+0xb8>
 800d99c:	e7eb      	b.n	800d976 <IsFactoryReset+0xc2>
 800d99e:	46c0      	nop			; (mov r8, r8)
 800d9a0:	40021000 	.word	0x40021000
 800d9a4:	20007ff0 	.word	0x20007ff0

0800d9a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d9a8:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d9aa:	f002 ffa9 	bl	8010900 <HAL_IncTick>
  osSystickHandler();  
 800d9ae:	f000 fe65 	bl	800e67c <osSystickHandler>

}
 800d9b2:	bd10      	pop	{r4, pc}

0800d9b4 <HardFault_Handler>:
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
	/* Loop here */
	for(;;) {};  
 800d9b4:	e7fe      	b.n	800d9b4 <HardFault_Handler>
	...

0800d9b8 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d9b8:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d9ba:	4802      	ldr	r0, [pc, #8]	; (800d9c4 <USART1_IRQHandler+0xc>)
 800d9bc:	f006 f939 	bl	8013c32 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d9c0:	bd10      	pop	{r4, pc}
 800d9c2:	46c0      	nop			; (mov r8, r8)
 800d9c4:	20006ca8 	.word	0x20006ca8

0800d9c8 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d9c8:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d9ca:	4802      	ldr	r0, [pc, #8]	; (800d9d4 <USART2_IRQHandler+0xc>)
 800d9cc:	f006 f931 	bl	8013c32 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d9d0:	bd10      	pop	{r4, pc}
 800d9d2:	46c0      	nop			; (mov r8, r8)
 800d9d4:	20006df8 	.word	0x20006df8

0800d9d8 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d9d8:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d9da:	4806      	ldr	r0, [pc, #24]	; (800d9f4 <USART3_8_IRQHandler+0x1c>)
 800d9dc:	f006 f929 	bl	8013c32 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d9e0:	4805      	ldr	r0, [pc, #20]	; (800d9f8 <USART3_8_IRQHandler+0x20>)
 800d9e2:	f006 f926 	bl	8013c32 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d9e6:	4805      	ldr	r0, [pc, #20]	; (800d9fc <USART3_8_IRQHandler+0x24>)
 800d9e8:	f006 f923 	bl	8013c32 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d9ec:	4804      	ldr	r0, [pc, #16]	; (800da00 <USART3_8_IRQHandler+0x28>)
 800d9ee:	f006 f920 	bl	8013c32 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d9f2:	bd10      	pop	{r4, pc}
 800d9f4:	20006bc8 	.word	0x20006bc8
 800d9f8:	20006d88 	.word	0x20006d88
 800d9fc:	20006c38 	.word	0x20006c38
 800da00:	20006d18 	.word	0x20006d18

0800da04 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800da04:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800da06:	2001      	movs	r0, #1
 800da08:	f7f9 fef6 	bl	80077f8 <DMA_IRQHandler>
	
}
 800da0c:	bd10      	pop	{r4, pc}
	...

0800da10 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800da10:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800da12:	4b0c      	ldr	r3, [pc, #48]	; (800da44 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	06db      	lsls	r3, r3, #27
 800da18:	d40b      	bmi.n	800da32 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800da1a:	4b0b      	ldr	r3, [pc, #44]	; (800da48 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	05db      	lsls	r3, r3, #23
 800da20:	d40b      	bmi.n	800da3a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800da22:	4b09      	ldr	r3, [pc, #36]	; (800da48 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	06db      	lsls	r3, r3, #27
 800da28:	d506      	bpl.n	800da38 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800da2a:	4808      	ldr	r0, [pc, #32]	; (800da4c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800da2c:	f003 fcd2 	bl	80113d4 <HAL_DMA_IRQHandler>
	}
}
 800da30:	e002      	b.n	800da38 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P5);
 800da32:	2005      	movs	r0, #5
 800da34:	f7f9 fee0 	bl	80077f8 <DMA_IRQHandler>
}
 800da38:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800da3a:	2002      	movs	r0, #2
 800da3c:	f7f9 fedc 	bl	80077f8 <DMA_IRQHandler>
 800da40:	e7fa      	b.n	800da38 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800da42:	46c0      	nop			; (mov r8, r8)
 800da44:	40020400 	.word	0x40020400
 800da48:	40020000 	.word	0x40020000
 800da4c:	200019d0 	.word	0x200019d0

0800da50 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800da50:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800da52:	4b14      	ldr	r3, [pc, #80]	; (800daa4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	03db      	lsls	r3, r3, #15
 800da58:	d413      	bmi.n	800da82 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800da5a:	4b12      	ldr	r3, [pc, #72]	; (800daa4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	02db      	lsls	r3, r3, #11
 800da60:	d413      	bmi.n	800da8a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800da62:	4b11      	ldr	r3, [pc, #68]	; (800daa8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	05db      	lsls	r3, r3, #23
 800da68:	d413      	bmi.n	800da92 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800da6a:	4b0e      	ldr	r3, [pc, #56]	; (800daa4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	04db      	lsls	r3, r3, #19
 800da70:	d413      	bmi.n	800da9a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800da72:	4b0c      	ldr	r3, [pc, #48]	; (800daa4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	01db      	lsls	r3, r3, #7
 800da78:	d506      	bpl.n	800da88 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800da7a:	480c      	ldr	r0, [pc, #48]	; (800daac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800da7c:	f003 fcaa 	bl	80113d4 <HAL_DMA_IRQHandler>
	}
}
 800da80:	e002      	b.n	800da88 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800da82:	2003      	movs	r0, #3
 800da84:	f7f9 feb8 	bl	80077f8 <DMA_IRQHandler>
}
 800da88:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800da8a:	2004      	movs	r0, #4
 800da8c:	f7f9 feb4 	bl	80077f8 <DMA_IRQHandler>
 800da90:	e7fa      	b.n	800da88 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800da92:	2006      	movs	r0, #6
 800da94:	f7f9 feb0 	bl	80077f8 <DMA_IRQHandler>
 800da98:	e7f6      	b.n	800da88 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800da9a:	4805      	ldr	r0, [pc, #20]	; (800dab0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800da9c:	f003 fc9a 	bl	80113d4 <HAL_DMA_IRQHandler>
 800daa0:	e7f2      	b.n	800da88 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800daa2:	46c0      	nop			; (mov r8, r8)
 800daa4:	40020000 	.word	0x40020000
 800daa8:	40020400 	.word	0x40020400
 800daac:	20001a40 	.word	0x20001a40
 800dab0:	20001a08 	.word	0x20001a08

0800dab4 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dab4:	b510      	push	{r4, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800daba:	2300      	movs	r3, #0
 800dabc:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800dabe:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d001      	beq.n	800dac8 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800dac4:	f7fe fed6 	bl	800c874 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800dac8:	0020      	movs	r0, r4
 800daca:	f7fe fd65 	bl	800c598 <GetPort>
 800dace:	0080      	lsls	r0, r0, #2
 800dad0:	4b03      	ldr	r3, [pc, #12]	; (800dae0 <HAL_UART_TxCpltCallback+0x2c>)
 800dad2:	58c0      	ldr	r0, [r0, r3]
 800dad4:	a901      	add	r1, sp, #4
 800dad6:	f001 fa40 	bl	800ef5a <xQueueGiveFromISR>
}
 800dada:	b002      	add	sp, #8
 800dadc:	bd10      	pop	{r4, pc}
 800dade:	46c0      	nop			; (mov r8, r8)
 800dae0:	20006b28 	.word	0x20006b28

0800dae4 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dae4:	b510      	push	{r4, lr}
 800dae6:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800dae8:	2369      	movs	r3, #105	; 0x69
 800daea:	2201      	movs	r2, #1
 800daec:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800daee:	f7fe fd53 	bl	800c598 <GetPort>
	if (portStatus[port] == STREAM) {
 800daf2:	4b0c      	ldr	r3, [pc, #48]	; (800db24 <HAL_UART_ErrorCallback+0x40>)
 800daf4:	5c1b      	ldrb	r3, [r3, r0]
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d005      	beq.n	800db06 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800dafa:	4b0b      	ldr	r3, [pc, #44]	; (800db28 <HAL_UART_ErrorCallback+0x44>)
 800dafc:	1818      	adds	r0, r3, r0
 800dafe:	3801      	subs	r0, #1
 800db00:	2301      	movs	r3, #1
 800db02:	7003      	strb	r3, [r0, #0]
	}	
}
 800db04:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800db06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	685a      	ldr	r2, [r3, #4]
 800db0c:	b292      	uxth	r2, r2
 800db0e:	1e43      	subs	r3, r0, #1
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4906      	ldr	r1, [pc, #24]	; (800db2c <HAL_UART_ErrorCallback+0x48>)
 800db14:	585b      	ldr	r3, [r3, r1]
 800db16:	6819      	ldr	r1, [r3, #0]
 800db18:	3128      	adds	r1, #40	; 0x28
 800db1a:	0020      	movs	r0, r4
 800db1c:	f005 fc70 	bl	8013400 <HAL_UART_Receive_DMA>
 800db20:	e7f0      	b.n	800db04 <HAL_UART_ErrorCallback+0x20>
 800db22:	46c0      	nop			; (mov r8, r8)
 800db24:	20001100 	.word	0x20001100
 800db28:	200012d0 	.word	0x200012d0
 800db2c:	200014b0 	.word	0x200014b0

0800db30 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800db30:	b510      	push	{r4, lr}
 800db32:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800db34:	f7fe fd30 	bl	800c598 <GetPort>
 800db38:	4b13      	ldr	r3, [pc, #76]	; (800db88 <HAL_UART_RxCpltCallback+0x58>)
 800db3a:	5c1b      	ldrb	r3, [r3, r0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d006      	beq.n	800db4e <HAL_UART_RxCpltCallback+0x1e>
 800db40:	0020      	movs	r0, r4
 800db42:	f7fe fd29 	bl	800c598 <GetPort>
 800db46:	4b10      	ldr	r3, [pc, #64]	; (800db88 <HAL_UART_RxCpltCallback+0x58>)
 800db48:	5c1b      	ldrb	r3, [r3, r0]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d11a      	bne.n	800db84 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800db4e:	0020      	movs	r0, r4
 800db50:	f7fe fd22 	bl	800c598 <GetPort>
 800db54:	4b0d      	ldr	r3, [pc, #52]	; (800db8c <HAL_UART_RxCpltCallback+0x5c>)
 800db56:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800db58:	0020      	movs	r0, r4
 800db5a:	f7fe fd1d 	bl	800c598 <GetPort>
 800db5e:	4b0a      	ldr	r3, [pc, #40]	; (800db88 <HAL_UART_RxCpltCallback+0x58>)
 800db60:	2205      	movs	r2, #5
 800db62:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800db64:	0020      	movs	r0, r4
 800db66:	f7fe fd17 	bl	800c598 <GetPort>
 800db6a:	4b09      	ldr	r3, [pc, #36]	; (800db90 <HAL_UART_RxCpltCallback+0x60>)
 800db6c:	181b      	adds	r3, r3, r0
 800db6e:	3b01      	subs	r3, #1
 800db70:	2200      	movs	r2, #0
 800db72:	701a      	strb	r2, [r3, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800db74:	0020      	movs	r0, r4
 800db76:	f7fe fd0f 	bl	800c598 <GetPort>
 800db7a:	4b06      	ldr	r3, [pc, #24]	; (800db94 <HAL_UART_RxCpltCallback+0x64>)
 800db7c:	181b      	adds	r3, r3, r0
 800db7e:	3b01      	subs	r3, #1
 800db80:	2201      	movs	r2, #1
 800db82:	701a      	strb	r2, [r3, #0]
	}
}
 800db84:	bd10      	pop	{r4, pc}
 800db86:	46c0      	nop			; (mov r8, r8)
 800db88:	20001100 	.word	0x20001100
 800db8c:	20006aa8 	.word	0x20006aa8
 800db90:	20001458 	.word	0x20001458
 800db94:	200012d0 	.word	0x200012d0

0800db98 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800db98:	b672      	cpsid	i
	for( ;; );
 800db9a:	e7fe      	b.n	800db9a <vApplicationStackOverflowHook+0x2>

0800db9c <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800db9c:	b672      	cpsid	i
	for( ;; );
 800db9e:	e7fe      	b.n	800db9e <vApplicationMallocFailedHook+0x2>

0800dba0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800dba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba2:	46ce      	mov	lr, r9
 800dba4:	4647      	mov	r7, r8
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b08f      	sub	sp, #60	; 0x3c
 800dbaa:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800dbac:	ac05      	add	r4, sp, #20
 800dbae:	4b34      	ldr	r3, [pc, #208]	; (800dc80 <RTC_CalendarConfig+0xe0>)
 800dbb0:	0022      	movs	r2, r4
 800dbb2:	cb43      	ldmia	r3!, {r0, r1, r6}
 800dbb4:	c243      	stmia	r2!, {r0, r1, r6}
 800dbb6:	aa02      	add	r2, sp, #8
 800dbb8:	4b32      	ldr	r3, [pc, #200]	; (800dc84 <RTC_CalendarConfig+0xe4>)
 800dbba:	cb03      	ldmia	r3!, {r0, r1}
 800dbbc:	c203      	stmia	r2!, {r0, r1}
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800dbc2:	2015      	movs	r0, #21
 800dbc4:	ab02      	add	r3, sp, #8
 800dbc6:	469c      	mov	ip, r3
 800dbc8:	4460      	add	r0, ip
 800dbca:	f006 f8ba 	bl	8013d42 <atoi>
 800dbce:	b2c3      	uxtb	r3, r0
 800dbd0:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800dbd2:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800dbd4:	a806      	add	r0, sp, #24
 800dbd6:	f006 f8b4 	bl	8013d42 <atoi>
 800dbda:	b2c3      	uxtb	r3, r0
 800dbdc:	4698      	mov	r8, r3
  *(comDate + 3) = 0;
 800dbde:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800dbe0:	4e29      	ldr	r6, [pc, #164]	; (800dc88 <RTC_CalendarConfig+0xe8>)
  *(comDate + 3) = 0;
 800dbe2:	2401      	movs	r4, #1
 800dbe4:	e003      	b.n	800dbee <RTC_CalendarConfig+0x4e>
  for (uint8_t i = 0; i < 12; i++)
 800dbe6:	3401      	adds	r4, #1
 800dbe8:	3604      	adds	r6, #4
 800dbea:	2c0d      	cmp	r4, #13
 800dbec:	d007      	beq.n	800dbfe <RTC_CalendarConfig+0x5e>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800dbee:	6831      	ldr	r1, [r6, #0]
 800dbf0:	a805      	add	r0, sp, #20
 800dbf2:	f7f2 fa87 	bl	8000104 <strcmp>
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d1f5      	bne.n	800dbe6 <RTC_CalendarConfig+0x46>
			month = i + 1;
 800dbfa:	b2e5      	uxtb	r5, r4
 800dbfc:	e7f3      	b.n	800dbe6 <RTC_CalendarConfig+0x46>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800dbfe:	ab02      	add	r3, sp, #8
 800dc00:	1d98      	adds	r0, r3, #6
 800dc02:	f006 f89e 	bl	8013d42 <atoi>
 800dc06:	9001      	str	r0, [sp, #4]
	*(comDate + 5) = 0;
 800dc08:	af05      	add	r7, sp, #20
 800dc0a:	2400      	movs	r4, #0
 800dc0c:	717c      	strb	r4, [r7, #5]
	minutes = atoi(comTime + 3);
 800dc0e:	ab02      	add	r3, sp, #8
 800dc10:	1cd8      	adds	r0, r3, #3
 800dc12:	f006 f896 	bl	8013d42 <atoi>
 800dc16:	0006      	movs	r6, r0
	*(comDate + 2) = 0;
 800dc18:	70bc      	strb	r4, [r7, #2]
	hours = atoi(comTime);
 800dc1a:	a802      	add	r0, sp, #8
 800dc1c:	f006 f891 	bl	8013d42 <atoi>
 800dc20:	0007      	movs	r7, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800dc22:	a90d      	add	r1, sp, #52	; 0x34
 800dc24:	464b      	mov	r3, r9
 800dc26:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800dc28:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800dc2a:	4643      	mov	r3, r8
 800dc2c:	708b      	strb	r3, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800dc2e:	2301      	movs	r3, #1
 800dc30:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800dc32:	2200      	movs	r2, #0
 800dc34:	4815      	ldr	r0, [pc, #84]	; (800dc8c <RTC_CalendarConfig+0xec>)
 800dc36:	f005 f939 	bl	8012eac <HAL_RTC_SetDate>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d11c      	bne.n	800dc78 <RTC_CalendarConfig+0xd8>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800dc3e:	a908      	add	r1, sp, #32
 800dc40:	700f      	strb	r7, [r1, #0]
  stimestructure.Minutes = minutes;
 800dc42:	704e      	strb	r6, [r1, #1]
  stimestructure.Seconds = seconds;
 800dc44:	9b01      	ldr	r3, [sp, #4]
 800dc46:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	720b      	strb	r3, [r1, #8]
 800dc4c:	4a10      	ldr	r2, [pc, #64]	; (800dc90 <RTC_CalendarConfig+0xf0>)
 800dc4e:	3018      	adds	r0, #24
 800dc50:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800dc52:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800dc54:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dc56:	2200      	movs	r2, #0
 800dc58:	480c      	ldr	r0, [pc, #48]	; (800dc8c <RTC_CalendarConfig+0xec>)
 800dc5a:	f005 f8a7 	bl	8012dac <HAL_RTC_SetTime>
 800dc5e:	1e04      	subs	r4, r0, #0
 800dc60:	d10c      	bne.n	800dc7c <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800dc62:	4a0c      	ldr	r2, [pc, #48]	; (800dc94 <RTC_CalendarConfig+0xf4>)
 800dc64:	2101      	movs	r1, #1
 800dc66:	4809      	ldr	r0, [pc, #36]	; (800dc8c <RTC_CalendarConfig+0xec>)
 800dc68:	f005 f9e4 	bl	8013034 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800dc6c:	0020      	movs	r0, r4
 800dc6e:	b00f      	add	sp, #60	; 0x3c
 800dc70:	bcc0      	pop	{r6, r7}
 800dc72:	46b9      	mov	r9, r7
 800dc74:	46b0      	mov	r8, r6
 800dc76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800dc78:	24ff      	movs	r4, #255	; 0xff
 800dc7a:	e7f7      	b.n	800dc6c <RTC_CalendarConfig+0xcc>
		return BOS_ERROR;
 800dc7c:	24ff      	movs	r4, #255	; 0xff
 800dc7e:	e7f5      	b.n	800dc6c <RTC_CalendarConfig+0xcc>
 800dc80:	0801a5c4 	.word	0x0801a5c4
 800dc84:	0801a5e8 	.word	0x0801a5e8
 800dc88:	20000020 	.word	0x20000020
 800dc8c:	20006e8c 	.word	0x20006e8c
 800dc90:	20006aa8 	.word	0x20006aa8
 800dc94:	000032f2 	.word	0x000032f2

0800dc98 <RTC_Init>:
{
 800dc98:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800dc9a:	4a1c      	ldr	r2, [pc, #112]	; (800dd0c <RTC_Init+0x74>)
 800dc9c:	6a11      	ldr	r1, [r2, #32]
 800dc9e:	2380      	movs	r3, #128	; 0x80
 800dca0:	021b      	lsls	r3, r3, #8
 800dca2:	430b      	orrs	r3, r1
 800dca4:	6213      	str	r3, [r2, #32]
  RtcHandle.Instance = RTC;
 800dca6:	481a      	ldr	r0, [pc, #104]	; (800dd10 <RTC_Init+0x78>)
 800dca8:	4b1a      	ldr	r3, [pc, #104]	; (800dd14 <RTC_Init+0x7c>)
 800dcaa:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800dcac:	2300      	movs	r3, #0
 800dcae:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800dcb0:	227c      	movs	r2, #124	; 0x7c
 800dcb2:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800dcb4:	4a18      	ldr	r2, [pc, #96]	; (800dd18 <RTC_Init+0x80>)
 800dcb6:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800dcb8:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800dcba:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dcbc:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800dcbe:	f005 f817 	bl	8012cf0 <HAL_RTC_Init>
 800dcc2:	1e04      	subs	r4, r0, #0
 800dcc4:	d11f      	bne.n	800dd06 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	4811      	ldr	r0, [pc, #68]	; (800dd10 <RTC_Init+0x78>)
 800dcca:	f005 f9b9 	bl	8013040 <HAL_RTCEx_BKUPRead>
 800dcce:	4b13      	ldr	r3, [pc, #76]	; (800dd1c <RTC_Init+0x84>)
 800dcd0:	4298      	cmp	r0, r3
 800dcd2:	d10e      	bne.n	800dcf2 <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800dcd4:	4b0d      	ldr	r3, [pc, #52]	; (800dd0c <RTC_Init+0x74>)
 800dcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd8:	011b      	lsls	r3, r3, #4
 800dcda:	d502      	bpl.n	800dce2 <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800dcdc:	4b10      	ldr	r3, [pc, #64]	; (800dd20 <RTC_Init+0x88>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800dce2:	4b0a      	ldr	r3, [pc, #40]	; (800dd0c <RTC_Init+0x74>)
 800dce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce6:	015b      	lsls	r3, r3, #5
 800dce8:	d505      	bpl.n	800dcf6 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800dcea:	4b0d      	ldr	r3, [pc, #52]	; (800dd20 <RTC_Init+0x88>)
 800dcec:	2201      	movs	r2, #1
 800dcee:	701a      	strb	r2, [r3, #0]
 800dcf0:	e001      	b.n	800dcf6 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800dcf2:	f7ff ff55 	bl	800dba0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800dcf6:	4a05      	ldr	r2, [pc, #20]	; (800dd0c <RTC_Init+0x74>)
 800dcf8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800dcfa:	2380      	movs	r3, #128	; 0x80
 800dcfc:	045b      	lsls	r3, r3, #17
 800dcfe:	430b      	orrs	r3, r1
 800dd00:	6253      	str	r3, [r2, #36]	; 0x24
}
 800dd02:	0020      	movs	r0, r4
 800dd04:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800dd06:	24ff      	movs	r4, #255	; 0xff
 800dd08:	e7fb      	b.n	800dd02 <RTC_Init+0x6a>
 800dd0a:	46c0      	nop			; (mov r8, r8)
 800dd0c:	40021000 	.word	0x40021000
 800dd10:	20006e8c 	.word	0x20006e8c
 800dd14:	40002800 	.word	0x40002800
 800dd18:	000007cf 	.word	0x000007cf
 800dd1c:	000032f2 	.word	0x000032f2
 800dd20:	20001bc8 	.word	0x20001bc8

0800dd24 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800dd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd26:	46c6      	mov	lr, r8
 800dd28:	b500      	push	{lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	ac0c      	add	r4, sp, #48	; 0x30
 800dd2e:	7827      	ldrb	r7, [r4, #0]
 800dd30:	ac0d      	add	r4, sp, #52	; 0x34
 800dd32:	7824      	ldrb	r4, [r4, #0]
 800dd34:	46a0      	mov	r8, r4
 800dd36:	ac0e      	add	r4, sp, #56	; 0x38
 800dd38:	7825      	ldrb	r5, [r4, #0]
 800dd3a:	ac0f      	add	r4, sp, #60	; 0x3c
 800dd3c:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800dd3e:	ac05      	add	r4, sp, #20
 800dd40:	3230      	adds	r2, #48	; 0x30
 800dd42:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800dd44:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800dd46:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800dd48:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	0021      	movs	r1, r4
 800dd4e:	481f      	ldr	r0, [pc, #124]	; (800ddcc <BOS_CalendarConfig+0xa8>)
 800dd50:	f005 f8ac 	bl	8012eac <HAL_RTC_SetDate>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d134      	bne.n	800ddc2 <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800dd58:	466b      	mov	r3, sp
 800dd5a:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800dd5c:	4642      	mov	r2, r8
 800dd5e:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800dd60:	709f      	strb	r7, [r3, #2]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800dd62:	2300      	movs	r3, #0
 800dd64:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800dd66:	2e01      	cmp	r6, #1
 800dd68:	d01e      	beq.n	800dda8 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800dd6a:	2e02      	cmp	r6, #2
 800dd6c:	d022      	beq.n	800ddb4 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800dd6e:	4b18      	ldr	r3, [pc, #96]	; (800ddd0 <BOS_CalendarConfig+0xac>)
 800dd70:	2218      	movs	r2, #24
 800dd72:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dd74:	2200      	movs	r2, #0
 800dd76:	4669      	mov	r1, sp
 800dd78:	4814      	ldr	r0, [pc, #80]	; (800ddcc <BOS_CalendarConfig+0xa8>)
 800dd7a:	f005 f817 	bl	8012dac <HAL_RTC_SetTime>
 800dd7e:	1e04      	subs	r4, r0, #0
 800dd80:	d121      	bne.n	800ddc6 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800dd82:	4a13      	ldr	r2, [pc, #76]	; (800ddd0 <BOS_CalendarConfig+0xac>)
 800dd84:	7b53      	ldrb	r3, [r2, #13]
 800dd86:	021b      	lsls	r3, r3, #8
 800dd88:	7911      	ldrb	r1, [r2, #4]
 800dd8a:	4319      	orrs	r1, r3
 800dd8c:	208d      	movs	r0, #141	; 0x8d
 800dd8e:	0040      	lsls	r0, r0, #1
 800dd90:	f7f9 fe16 	bl	80079c0 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800dd94:	4a0f      	ldr	r2, [pc, #60]	; (800ddd4 <BOS_CalendarConfig+0xb0>)
 800dd96:	2101      	movs	r1, #1
 800dd98:	480c      	ldr	r0, [pc, #48]	; (800ddcc <BOS_CalendarConfig+0xa8>)
 800dd9a:	f005 f94b 	bl	8013034 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800dd9e:	0020      	movs	r0, r4
 800dda0:	b006      	add	sp, #24
 800dda2:	bc80      	pop	{r7}
 800dda4:	46b8      	mov	r8, r7
 800dda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800dda8:	466a      	mov	r2, sp
 800ddaa:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800ddac:	4b08      	ldr	r3, [pc, #32]	; (800ddd0 <BOS_CalendarConfig+0xac>)
 800ddae:	220c      	movs	r2, #12
 800ddb0:	735a      	strb	r2, [r3, #13]
 800ddb2:	e7df      	b.n	800dd74 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800ddb4:	2340      	movs	r3, #64	; 0x40
 800ddb6:	466a      	mov	r2, sp
 800ddb8:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800ddba:	4b05      	ldr	r3, [pc, #20]	; (800ddd0 <BOS_CalendarConfig+0xac>)
 800ddbc:	220c      	movs	r2, #12
 800ddbe:	735a      	strb	r2, [r3, #13]
 800ddc0:	e7d8      	b.n	800dd74 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800ddc2:	24ff      	movs	r4, #255	; 0xff
 800ddc4:	e7eb      	b.n	800dd9e <BOS_CalendarConfig+0x7a>
		return BOS_ERROR;
 800ddc6:	24ff      	movs	r4, #255	; 0xff
 800ddc8:	e7e9      	b.n	800dd9e <BOS_CalendarConfig+0x7a>
 800ddca:	46c0      	nop			; (mov r8, r8)
 800ddcc:	20006e8c 	.word	0x20006e8c
 800ddd0:	20006aa8 	.word	0x20006aa8
 800ddd4:	000032f2 	.word	0x000032f2

0800ddd8 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800ddd8:	b530      	push	{r4, r5, lr}
 800ddda:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800dddc:	4d16      	ldr	r5, [pc, #88]	; (800de38 <GetTimeDate+0x60>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	a902      	add	r1, sp, #8
 800dde2:	0028      	movs	r0, r5
 800dde4:	f005 f8de 	bl	8012fa4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800dde8:	ac07      	add	r4, sp, #28
 800ddea:	2200      	movs	r2, #0
 800ddec:	0021      	movs	r1, r4
 800ddee:	0028      	movs	r0, r5
 800ddf0:	f005 f8fe 	bl	8012ff0 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800ddf4:	4b11      	ldr	r3, [pc, #68]	; (800de3c <GetTimeDate+0x64>)
 800ddf6:	aa02      	add	r2, sp, #8
 800ddf8:	7a12      	ldrb	r2, [r2, #8]
 800ddfa:	09d2      	lsrs	r2, r2, #7
 800ddfc:	3201      	adds	r2, #1
 800ddfe:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800de00:	9a03      	ldr	r2, [sp, #12]
 800de02:	9201      	str	r2, [sp, #4]
 800de04:	0852      	lsrs	r2, r2, #1
 800de06:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800de08:	aa02      	add	r2, sp, #8
 800de0a:	7892      	ldrb	r2, [r2, #2]
 800de0c:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800de0e:	aa02      	add	r2, sp, #8
 800de10:	7852      	ldrb	r2, [r2, #1]
 800de12:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800de14:	aa02      	add	r2, sp, #8
 800de16:	7812      	ldrb	r2, [r2, #0]
 800de18:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800de1a:	78a2      	ldrb	r2, [r4, #2]
 800de1c:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800de1e:	7862      	ldrb	r2, [r4, #1]
 800de20:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800de22:	7822      	ldrb	r2, [r4, #0]
 800de24:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800de26:	78e2      	ldrb	r2, [r4, #3]
 800de28:	21fa      	movs	r1, #250	; 0xfa
 800de2a:	00c9      	lsls	r1, r1, #3
 800de2c:	468c      	mov	ip, r1
 800de2e:	4462      	add	r2, ip
 800de30:	831a      	strh	r2, [r3, #24]
}
 800de32:	b009      	add	sp, #36	; 0x24
 800de34:	bd30      	pop	{r4, r5, pc}
 800de36:	46c0      	nop			; (mov r8, r8)
 800de38:	20006e8c 	.word	0x20006e8c
 800de3c:	20006aa8 	.word	0x20006aa8

0800de40 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800de40:	b530      	push	{r4, r5, lr}
 800de42:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800de44:	4a12      	ldr	r2, [pc, #72]	; (800de90 <TIM_USEC_Init+0x50>)
 800de46:	69d1      	ldr	r1, [r2, #28]
 800de48:	2080      	movs	r0, #128	; 0x80
 800de4a:	0040      	lsls	r0, r0, #1
 800de4c:	4301      	orrs	r1, r0
 800de4e:	61d1      	str	r1, [r2, #28]
 800de50:	69d3      	ldr	r3, [r2, #28]
 800de52:	4003      	ands	r3, r0
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800de58:	4c0e      	ldr	r4, [pc, #56]	; (800de94 <TIM_USEC_Init+0x54>)
 800de5a:	4b0f      	ldr	r3, [pc, #60]	; (800de98 <TIM_USEC_Init+0x58>)
 800de5c:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800de5e:	f004 fe5f 	bl	8012b20 <HAL_RCC_GetPCLK1Freq>
 800de62:	490e      	ldr	r1, [pc, #56]	; (800de9c <TIM_USEC_Init+0x5c>)
 800de64:	f7f2 f974 	bl	8000150 <__udivsi3>
 800de68:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de6a:	2500      	movs	r5, #0
 800de6c:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800de6e:	4b0c      	ldr	r3, [pc, #48]	; (800dea0 <TIM_USEC_Init+0x60>)
 800de70:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800de72:	0020      	movs	r0, r4
 800de74:	f005 f966 	bl	8013144 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de78:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de7a:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800de7c:	a902      	add	r1, sp, #8
 800de7e:	0020      	movs	r0, r4
 800de80:	f005 f97a 	bl	8013178 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800de84:	0020      	movs	r0, r4
 800de86:	f005 f8e2 	bl	801304e <HAL_TIM_Base_Start>
}
 800de8a:	b005      	add	sp, #20
 800de8c:	bd30      	pop	{r4, r5, pc}
 800de8e:	46c0      	nop			; (mov r8, r8)
 800de90:	40021000 	.word	0x40021000
 800de94:	20006ee8 	.word	0x20006ee8
 800de98:	40002000 	.word	0x40002000
 800de9c:	000f4240 	.word	0x000f4240
 800dea0:	0000ffff 	.word	0x0000ffff

0800dea4 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800dea4:	b530      	push	{r4, r5, lr}
 800dea6:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800dea8:	4a12      	ldr	r2, [pc, #72]	; (800def4 <TIM_MSEC_Init+0x50>)
 800deaa:	6991      	ldr	r1, [r2, #24]
 800deac:	2080      	movs	r0, #128	; 0x80
 800deae:	0240      	lsls	r0, r0, #9
 800deb0:	4301      	orrs	r1, r0
 800deb2:	6191      	str	r1, [r2, #24]
 800deb4:	6993      	ldr	r3, [r2, #24]
 800deb6:	4003      	ands	r3, r0
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800debc:	4c0e      	ldr	r4, [pc, #56]	; (800def8 <TIM_MSEC_Init+0x54>)
 800debe:	4b0f      	ldr	r3, [pc, #60]	; (800defc <TIM_MSEC_Init+0x58>)
 800dec0:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800dec2:	f004 fe2d 	bl	8012b20 <HAL_RCC_GetPCLK1Freq>
 800dec6:	21fa      	movs	r1, #250	; 0xfa
 800dec8:	0089      	lsls	r1, r1, #2
 800deca:	f7f2 f941 	bl	8000150 <__udivsi3>
 800dece:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ded0:	2500      	movs	r5, #0
 800ded2:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800ded4:	4b0a      	ldr	r3, [pc, #40]	; (800df00 <TIM_MSEC_Init+0x5c>)
 800ded6:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800ded8:	0020      	movs	r0, r4
 800deda:	f005 f933 	bl	8013144 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dede:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dee0:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800dee2:	a902      	add	r1, sp, #8
 800dee4:	0020      	movs	r0, r4
 800dee6:	f005 f947 	bl	8013178 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800deea:	0020      	movs	r0, r4
 800deec:	f005 f8af 	bl	801304e <HAL_TIM_Base_Start>
}
 800def0:	b005      	add	sp, #20
 800def2:	bd30      	pop	{r4, r5, pc}
 800def4:	40021000 	.word	0x40021000
 800def8:	20006eac 	.word	0x20006eac
 800defc:	40014000 	.word	0x40014000
 800df00:	0000ffff 	.word	0x0000ffff

0800df04 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800df04:	b510      	push	{r4, lr}
 800df06:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800df08:	f002 fb9a 	bl	8010640 <vPortEnterCritical>
	
	if (Delay)
 800df0c:	2c00      	cmp	r4, #0
 800df0e:	d006      	beq.n	800df1e <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800df10:	4b04      	ldr	r3, [pc, #16]	; (800df24 <StartMicroDelay+0x20>)
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800df16:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800df18:	1a5b      	subs	r3, r3, r1
 800df1a:	42a3      	cmp	r3, r4
 800df1c:	d9fb      	bls.n	800df16 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800df1e:	f002 fb9b 	bl	8010658 <vPortExitCritical>
}
 800df22:	bd10      	pop	{r4, pc}
 800df24:	20006ee8 	.word	0x20006ee8

0800df28 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800df28:	b510      	push	{r4, lr}
 800df2a:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800df2c:	f002 fb88 	bl	8010640 <vPortEnterCritical>
	
	if (Delay)
 800df30:	2c00      	cmp	r4, #0
 800df32:	d006      	beq.n	800df42 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800df34:	4b04      	ldr	r3, [pc, #16]	; (800df48 <StartMilliDelay+0x20>)
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800df3a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800df3c:	1a5b      	subs	r3, r3, r1
 800df3e:	42a3      	cmp	r3, r4
 800df40:	d9fb      	bls.n	800df3a <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800df42:	f002 fb89 	bl	8010658 <vPortExitCritical>
}
 800df46:	bd10      	pop	{r4, pc}
 800df48:	20006eac 	.word	0x20006eac

0800df4c <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800df4c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800df4e:	4809      	ldr	r0, [pc, #36]	; (800df74 <MX_USART1_UART_Init+0x28>)
 800df50:	4b09      	ldr	r3, [pc, #36]	; (800df78 <MX_USART1_UART_Init+0x2c>)
 800df52:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800df54:	23e1      	movs	r3, #225	; 0xe1
 800df56:	031b      	lsls	r3, r3, #12
 800df58:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800df5a:	2300      	movs	r3, #0
 800df5c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800df5e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800df60:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800df62:	220c      	movs	r2, #12
 800df64:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df66:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800df68:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800df6a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800df6c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800df6e:	f005 fd87 	bl	8013a80 <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif
}
 800df72:	bd10      	pop	{r4, pc}
 800df74:	20006ca8 	.word	0x20006ca8
 800df78:	40013800 	.word	0x40013800

0800df7c <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800df7c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800df7e:	4809      	ldr	r0, [pc, #36]	; (800dfa4 <MX_USART2_UART_Init+0x28>)
 800df80:	4b09      	ldr	r3, [pc, #36]	; (800dfa8 <MX_USART2_UART_Init+0x2c>)
 800df82:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800df84:	23e1      	movs	r3, #225	; 0xe1
 800df86:	031b      	lsls	r3, r3, #12
 800df88:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800df8a:	2300      	movs	r3, #0
 800df8c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800df8e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800df90:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800df92:	220c      	movs	r2, #12
 800df94:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df96:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800df98:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800df9a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800df9c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800df9e:	f005 fd6f 	bl	8013a80 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif
}
 800dfa2:	bd10      	pop	{r4, pc}
 800dfa4:	20006df8 	.word	0x20006df8
 800dfa8:	40004400 	.word	0x40004400

0800dfac <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800dfac:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800dfae:	4809      	ldr	r0, [pc, #36]	; (800dfd4 <MX_USART3_UART_Init+0x28>)
 800dfb0:	4b09      	ldr	r3, [pc, #36]	; (800dfd8 <MX_USART3_UART_Init+0x2c>)
 800dfb2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dfb4:	23e1      	movs	r3, #225	; 0xe1
 800dfb6:	031b      	lsls	r3, r3, #12
 800dfb8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800dfbe:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800dfc0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800dfc2:	220c      	movs	r2, #12
 800dfc4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dfc6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dfc8:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dfca:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dfcc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dfce:	f005 fd57 	bl	8013a80 <HAL_UART_Init>
	#if _P6pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif
}
 800dfd2:	bd10      	pop	{r4, pc}
 800dfd4:	20006bc8 	.word	0x20006bc8
 800dfd8:	40004800 	.word	0x40004800

0800dfdc <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800dfdc:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800dfde:	4809      	ldr	r0, [pc, #36]	; (800e004 <MX_USART4_UART_Init+0x28>)
 800dfe0:	4b09      	ldr	r3, [pc, #36]	; (800e008 <MX_USART4_UART_Init+0x2c>)
 800dfe2:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dfe4:	23e1      	movs	r3, #225	; 0xe1
 800dfe6:	031b      	lsls	r3, r3, #12
 800dfe8:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dfea:	2300      	movs	r3, #0
 800dfec:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dfee:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dff0:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800dff2:	220c      	movs	r2, #12
 800dff4:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dff6:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dff8:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dffa:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dffc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800dffe:	f005 fd3f 	bl	8013a80 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif
}
 800e002:	bd10      	pop	{r4, pc}
 800e004:	20006d88 	.word	0x20006d88
 800e008:	40004c00 	.word	0x40004c00

0800e00c <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800e00c:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800e00e:	4809      	ldr	r0, [pc, #36]	; (800e034 <MX_USART5_UART_Init+0x28>)
 800e010:	4b09      	ldr	r3, [pc, #36]	; (800e038 <MX_USART5_UART_Init+0x2c>)
 800e012:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e014:	23e1      	movs	r3, #225	; 0xe1
 800e016:	031b      	lsls	r3, r3, #12
 800e018:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e01a:	2300      	movs	r3, #0
 800e01c:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800e01e:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800e020:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e022:	220c      	movs	r2, #12
 800e024:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e026:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e028:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e02a:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e02c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800e02e:	f005 fd27 	bl	8013a80 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif
}
 800e032:	bd10      	pop	{r4, pc}
 800e034:	20006c38 	.word	0x20006c38
 800e038:	40005000 	.word	0x40005000

0800e03c <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800e03c:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800e03e:	4809      	ldr	r0, [pc, #36]	; (800e064 <MX_USART6_UART_Init+0x28>)
 800e040:	4b09      	ldr	r3, [pc, #36]	; (800e068 <MX_USART6_UART_Init+0x2c>)
 800e042:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e044:	23e1      	movs	r3, #225	; 0xe1
 800e046:	031b      	lsls	r3, r3, #12
 800e048:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e04a:	2300      	movs	r3, #0
 800e04c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800e04e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800e050:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800e052:	220c      	movs	r2, #12
 800e054:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e056:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e058:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e05a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e05c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800e05e:	f005 fd0f 	bl	8013a80 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif
}
 800e062:	bd10      	pop	{r4, pc}
 800e064:	20006d18 	.word	0x20006d18
 800e068:	40011400 	.word	0x40011400

0800e06c <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e06e:	46ce      	mov	lr, r9
 800e070:	4647      	mov	r7, r8
 800e072:	b580      	push	{r7, lr}
 800e074:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800e076:	6803      	ldr	r3, [r0, #0]
 800e078:	4a96      	ldr	r2, [pc, #600]	; (800e2d4 <HAL_UART_MspInit+0x268>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d016      	beq.n	800e0ac <HAL_UART_MspInit+0x40>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800e07e:	4a96      	ldr	r2, [pc, #600]	; (800e2d8 <HAL_UART_MspInit+0x26c>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d041      	beq.n	800e108 <HAL_UART_MspInit+0x9c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800e084:	4a95      	ldr	r2, [pc, #596]	; (800e2dc <HAL_UART_MspInit+0x270>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d06a      	beq.n	800e160 <HAL_UART_MspInit+0xf4>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800e08a:	4a95      	ldr	r2, [pc, #596]	; (800e2e0 <HAL_UART_MspInit+0x274>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d100      	bne.n	800e092 <HAL_UART_MspInit+0x26>
 800e090:	e096      	b.n	800e1c0 <HAL_UART_MspInit+0x154>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800e092:	4a94      	ldr	r2, [pc, #592]	; (800e2e4 <HAL_UART_MspInit+0x278>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d100      	bne.n	800e09a <HAL_UART_MspInit+0x2e>
 800e098:	e0bf      	b.n	800e21a <HAL_UART_MspInit+0x1ae>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800e09a:	4a93      	ldr	r2, [pc, #588]	; (800e2e8 <HAL_UART_MspInit+0x27c>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d100      	bne.n	800e0a2 <HAL_UART_MspInit+0x36>
 800e0a0:	e0e9      	b.n	800e276 <HAL_UART_MspInit+0x20a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800e0a2:	b00d      	add	sp, #52	; 0x34
 800e0a4:	bcc0      	pop	{r6, r7}
 800e0a6:	46b9      	mov	r9, r7
 800e0a8:	46b0      	mov	r8, r6
 800e0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800e0ac:	4a8f      	ldr	r2, [pc, #572]	; (800e2ec <HAL_UART_MspInit+0x280>)
 800e0ae:	6991      	ldr	r1, [r2, #24]
 800e0b0:	2080      	movs	r0, #128	; 0x80
 800e0b2:	01c0      	lsls	r0, r0, #7
 800e0b4:	4301      	orrs	r1, r0
 800e0b6:	6191      	str	r1, [r2, #24]
 800e0b8:	6993      	ldr	r3, [r2, #24]
 800e0ba:	4003      	ands	r3, r0
 800e0bc:	9301      	str	r3, [sp, #4]
 800e0be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN;
 800e0c0:	2380      	movs	r3, #128	; 0x80
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0c6:	2702      	movs	r7, #2
 800e0c8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e0ca:	2401      	movs	r4, #1
 800e0cc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e0ce:	2603      	movs	r6, #3
 800e0d0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800e0d2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800e0d4:	2590      	movs	r5, #144	; 0x90
 800e0d6:	05ed      	lsls	r5, r5, #23
 800e0d8:	a907      	add	r1, sp, #28
 800e0da:	0028      	movs	r0, r5
 800e0dc:	f003 ff22 	bl	8011f24 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;
 800e0e0:	2380      	movs	r3, #128	; 0x80
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0e6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e0e8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e0ea:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800e0ec:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800e0ee:	a907      	add	r1, sp, #28
 800e0f0:	0028      	movs	r0, r5
 800e0f2:	f003 ff17 	bl	8011f24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	2101      	movs	r1, #1
 800e0fa:	201b      	movs	r0, #27
 800e0fc:	f002 ff3c 	bl	8010f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e100:	201b      	movs	r0, #27
 800e102:	f002 ff6b 	bl	8010fdc <HAL_NVIC_EnableIRQ>
 800e106:	e7cc      	b.n	800e0a2 <HAL_UART_MspInit+0x36>
    __USART2_CLK_ENABLE();
 800e108:	4a78      	ldr	r2, [pc, #480]	; (800e2ec <HAL_UART_MspInit+0x280>)
 800e10a:	69d1      	ldr	r1, [r2, #28]
 800e10c:	2080      	movs	r0, #128	; 0x80
 800e10e:	0280      	lsls	r0, r0, #10
 800e110:	4301      	orrs	r1, r0
 800e112:	61d1      	str	r1, [r2, #28]
 800e114:	69d3      	ldr	r3, [r2, #28]
 800e116:	4003      	ands	r3, r0
 800e118:	9302      	str	r3, [sp, #8]
 800e11a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN;
 800e11c:	2304      	movs	r3, #4
 800e11e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e120:	2702      	movs	r7, #2
 800e122:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e124:	2401      	movs	r4, #1
 800e126:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e128:	2603      	movs	r6, #3
 800e12a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800e12c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800e12e:	2590      	movs	r5, #144	; 0x90
 800e130:	05ed      	lsls	r5, r5, #23
 800e132:	a907      	add	r1, sp, #28
 800e134:	0028      	movs	r0, r5
 800e136:	f003 fef5 	bl	8011f24 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;
 800e13a:	2308      	movs	r3, #8
 800e13c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e13e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e140:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e142:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800e144:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800e146:	a907      	add	r1, sp, #28
 800e148:	0028      	movs	r0, r5
 800e14a:	f003 feeb 	bl	8011f24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e14e:	2200      	movs	r2, #0
 800e150:	2101      	movs	r1, #1
 800e152:	201c      	movs	r0, #28
 800e154:	f002 ff10 	bl	8010f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e158:	201c      	movs	r0, #28
 800e15a:	f002 ff3f 	bl	8010fdc <HAL_NVIC_EnableIRQ>
 800e15e:	e7a0      	b.n	800e0a2 <HAL_UART_MspInit+0x36>
    __USART3_CLK_ENABLE();
 800e160:	4a62      	ldr	r2, [pc, #392]	; (800e2ec <HAL_UART_MspInit+0x280>)
 800e162:	69d1      	ldr	r1, [r2, #28]
 800e164:	2080      	movs	r0, #128	; 0x80
 800e166:	02c0      	lsls	r0, r0, #11
 800e168:	4301      	orrs	r1, r0
 800e16a:	61d1      	str	r1, [r2, #28]
 800e16c:	69d3      	ldr	r3, [r2, #28]
 800e16e:	4003      	ands	r3, r0
 800e170:	9303      	str	r3, [sp, #12]
 800e172:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN;
 800e174:	2380      	movs	r3, #128	; 0x80
 800e176:	00db      	lsls	r3, r3, #3
 800e178:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e17a:	2302      	movs	r3, #2
 800e17c:	4698      	mov	r8, r3
 800e17e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e180:	2701      	movs	r7, #1
 800e182:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e184:	2603      	movs	r6, #3
 800e186:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800e188:	2504      	movs	r5, #4
 800e18a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800e18c:	4c58      	ldr	r4, [pc, #352]	; (800e2f0 <HAL_UART_MspInit+0x284>)
 800e18e:	a907      	add	r1, sp, #28
 800e190:	0020      	movs	r0, r4
 800e192:	f003 fec7 	bl	8011f24 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;
 800e196:	2380      	movs	r3, #128	; 0x80
 800e198:	011b      	lsls	r3, r3, #4
 800e19a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e19c:	4643      	mov	r3, r8
 800e19e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e1a0:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e1a2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800e1a4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800e1a6:	a907      	add	r1, sp, #28
 800e1a8:	0020      	movs	r0, r4
 800e1aa:	f003 febb 	bl	8011f24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	2101      	movs	r1, #1
 800e1b2:	201d      	movs	r0, #29
 800e1b4:	f002 fee0 	bl	8010f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e1b8:	201d      	movs	r0, #29
 800e1ba:	f002 ff0f 	bl	8010fdc <HAL_NVIC_EnableIRQ>
 800e1be:	e770      	b.n	800e0a2 <HAL_UART_MspInit+0x36>
    __USART4_CLK_ENABLE();
 800e1c0:	4a4a      	ldr	r2, [pc, #296]	; (800e2ec <HAL_UART_MspInit+0x280>)
 800e1c2:	69d1      	ldr	r1, [r2, #28]
 800e1c4:	2080      	movs	r0, #128	; 0x80
 800e1c6:	0300      	lsls	r0, r0, #12
 800e1c8:	4301      	orrs	r1, r0
 800e1ca:	61d1      	str	r1, [r2, #28]
 800e1cc:	69d3      	ldr	r3, [r2, #28]
 800e1ce:	4003      	ands	r3, r0
 800e1d0:	9304      	str	r3, [sp, #16]
 800e1d2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN;
 800e1d4:	2401      	movs	r4, #1
 800e1d6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1d8:	2502      	movs	r5, #2
 800e1da:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e1dc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e1de:	2303      	movs	r3, #3
 800e1e0:	4698      	mov	r8, r3
 800e1e2:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800e1e4:	2704      	movs	r7, #4
 800e1e6:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800e1e8:	2690      	movs	r6, #144	; 0x90
 800e1ea:	05f6      	lsls	r6, r6, #23
 800e1ec:	a907      	add	r1, sp, #28
 800e1ee:	0030      	movs	r0, r6
 800e1f0:	f003 fe98 	bl	8011f24 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;
 800e1f4:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1f6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e1f8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e1fa:	4643      	mov	r3, r8
 800e1fc:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800e1fe:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800e200:	a907      	add	r1, sp, #28
 800e202:	0030      	movs	r0, r6
 800e204:	f003 fe8e 	bl	8011f24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e208:	2200      	movs	r2, #0
 800e20a:	2101      	movs	r1, #1
 800e20c:	201d      	movs	r0, #29
 800e20e:	f002 feb3 	bl	8010f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e212:	201d      	movs	r0, #29
 800e214:	f002 fee2 	bl	8010fdc <HAL_NVIC_EnableIRQ>
 800e218:	e743      	b.n	800e0a2 <HAL_UART_MspInit+0x36>
    __USART5_CLK_ENABLE();
 800e21a:	4a34      	ldr	r2, [pc, #208]	; (800e2ec <HAL_UART_MspInit+0x280>)
 800e21c:	69d1      	ldr	r1, [r2, #28]
 800e21e:	2080      	movs	r0, #128	; 0x80
 800e220:	0340      	lsls	r0, r0, #13
 800e222:	4301      	orrs	r1, r0
 800e224:	61d1      	str	r1, [r2, #28]
 800e226:	69d3      	ldr	r3, [r2, #28]
 800e228:	4003      	ands	r3, r0
 800e22a:	9305      	str	r3, [sp, #20]
 800e22c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN;
 800e22e:	2308      	movs	r3, #8
 800e230:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e232:	3b06      	subs	r3, #6
 800e234:	4698      	mov	r8, r3
 800e236:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e238:	2701      	movs	r7, #1
 800e23a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e23c:	2603      	movs	r6, #3
 800e23e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800e240:	2504      	movs	r5, #4
 800e242:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800e244:	4c2a      	ldr	r4, [pc, #168]	; (800e2f0 <HAL_UART_MspInit+0x284>)
 800e246:	a907      	add	r1, sp, #28
 800e248:	0020      	movs	r0, r4
 800e24a:	f003 fe6b 	bl	8011f24 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;
 800e24e:	2310      	movs	r3, #16
 800e250:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e252:	4643      	mov	r3, r8
 800e254:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e256:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e258:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800e25a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800e25c:	a907      	add	r1, sp, #28
 800e25e:	0020      	movs	r0, r4
 800e260:	f003 fe60 	bl	8011f24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e264:	2200      	movs	r2, #0
 800e266:	2101      	movs	r1, #1
 800e268:	201d      	movs	r0, #29
 800e26a:	f002 fe85 	bl	8010f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e26e:	201d      	movs	r0, #29
 800e270:	f002 feb4 	bl	8010fdc <HAL_NVIC_EnableIRQ>
 800e274:	e715      	b.n	800e0a2 <HAL_UART_MspInit+0x36>
    __USART6_CLK_ENABLE();
 800e276:	4b1d      	ldr	r3, [pc, #116]	; (800e2ec <HAL_UART_MspInit+0x280>)
 800e278:	699a      	ldr	r2, [r3, #24]
 800e27a:	2420      	movs	r4, #32
 800e27c:	4322      	orrs	r2, r4
 800e27e:	619a      	str	r2, [r3, #24]
 800e280:	699b      	ldr	r3, [r3, #24]
 800e282:	4023      	ands	r3, r4
 800e284:	9306      	str	r3, [sp, #24]
 800e286:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN;
 800e288:	2310      	movs	r3, #16
 800e28a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e28c:	3b0e      	subs	r3, #14
 800e28e:	4699      	mov	r9, r3
 800e290:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e292:	3b01      	subs	r3, #1
 800e294:	4698      	mov	r8, r3
 800e296:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e298:	2703      	movs	r7, #3
 800e29a:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800e29c:	2605      	movs	r6, #5
 800e29e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e2a0:	2590      	movs	r5, #144	; 0x90
 800e2a2:	05ed      	lsls	r5, r5, #23
 800e2a4:	a907      	add	r1, sp, #28
 800e2a6:	0028      	movs	r0, r5
 800e2a8:	f003 fe3c 	bl	8011f24 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;
 800e2ac:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2ae:	464b      	mov	r3, r9
 800e2b0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e2b2:	4643      	mov	r3, r8
 800e2b4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e2b6:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800e2b8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e2ba:	a907      	add	r1, sp, #28
 800e2bc:	0028      	movs	r0, r5
 800e2be:	f003 fe31 	bl	8011f24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	2101      	movs	r1, #1
 800e2c6:	201d      	movs	r0, #29
 800e2c8:	f002 fe56 	bl	8010f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e2cc:	201d      	movs	r0, #29
 800e2ce:	f002 fe85 	bl	8010fdc <HAL_NVIC_EnableIRQ>
}
 800e2d2:	e6e6      	b.n	800e0a2 <HAL_UART_MspInit+0x36>
 800e2d4:	40013800 	.word	0x40013800
 800e2d8:	40004400 	.word	0x40004400
 800e2dc:	40004800 	.word	0x40004800
 800e2e0:	40004c00 	.word	0x40004c00
 800e2e4:	40005000 	.word	0x40005000
 800e2e8:	40011400 	.word	0x40011400
 800e2ec:	40021000 	.word	0x40021000
 800e2f0:	48000400 	.word	0x48000400

0800e2f4 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800e2f4:	2806      	cmp	r0, #6
 800e2f6:	d80d      	bhi.n	800e314 <GetUart+0x20>
 800e2f8:	0080      	lsls	r0, r0, #2
 800e2fa:	4b08      	ldr	r3, [pc, #32]	; (800e31c <GetUart+0x28>)
 800e2fc:	581b      	ldr	r3, [r3, r0]
 800e2fe:	469f      	mov	pc, r3
		case P5 :
			return P5uart;
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800e300:	4807      	ldr	r0, [pc, #28]	; (800e320 <GetUart+0x2c>)
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800e302:	4770      	bx	lr
			return P3uart;
 800e304:	4807      	ldr	r0, [pc, #28]	; (800e324 <GetUart+0x30>)
 800e306:	e7fc      	b.n	800e302 <GetUart+0xe>
			return P4uart;
 800e308:	4807      	ldr	r0, [pc, #28]	; (800e328 <GetUart+0x34>)
 800e30a:	e7fa      	b.n	800e302 <GetUart+0xe>
			return P5uart;
 800e30c:	4807      	ldr	r0, [pc, #28]	; (800e32c <GetUart+0x38>)
 800e30e:	e7f8      	b.n	800e302 <GetUart+0xe>
			return P6uart;
 800e310:	4807      	ldr	r0, [pc, #28]	; (800e330 <GetUart+0x3c>)
 800e312:	e7f6      	b.n	800e302 <GetUart+0xe>
			return 0;
 800e314:	2000      	movs	r0, #0
 800e316:	e7f4      	b.n	800e302 <GetUart+0xe>
			return P1uart;	
 800e318:	4806      	ldr	r0, [pc, #24]	; (800e334 <GetUart+0x40>)
 800e31a:	e7f2      	b.n	800e302 <GetUart+0xe>
 800e31c:	0801d6f8 	.word	0x0801d6f8
 800e320:	20006df8 	.word	0x20006df8
 800e324:	20006d18 	.word	0x20006d18
 800e328:	20006ca8 	.word	0x20006ca8
 800e32c:	20006c38 	.word	0x20006c38
 800e330:	20006bc8 	.word	0x20006bc8
 800e334:	20006d88 	.word	0x20006d88

0800e338 <writePxMutex>:
{
 800e338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e33a:	46ce      	mov	lr, r9
 800e33c:	b500      	push	{lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	0006      	movs	r6, r0
 800e342:	000f      	movs	r7, r1
 800e344:	4691      	mov	r9, r2
 800e346:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e348:	f7ff ffd4 	bl	800e2f4 <GetUart>
 800e34c:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e34e:	2401      	movs	r4, #1
	if (GetUart(port) != NULL) {
 800e350:	2800      	cmp	r0, #0
 800e352:	d016      	beq.n	800e382 <writePxMutex+0x4a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e354:	00b3      	lsls	r3, r6, #2
 800e356:	4a0d      	ldr	r2, [pc, #52]	; (800e38c <writePxMutex+0x54>)
 800e358:	5898      	ldr	r0, [r3, r2]
 800e35a:	9901      	ldr	r1, [sp, #4]
 800e35c:	f000 f93a 	bl	800e5d4 <osSemaphoreWait>
 800e360:	2800      	cmp	r0, #0
 800e362:	d10e      	bne.n	800e382 <writePxMutex+0x4a>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e364:	9b08      	ldr	r3, [sp, #32]
 800e366:	464a      	mov	r2, r9
 800e368:	0039      	movs	r1, r7
 800e36a:	0028      	movs	r0, r5
 800e36c:	f005 fadc 	bl	8013928 <HAL_UART_Transmit>
 800e370:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e372:	d001      	beq.n	800e378 <writePxMutex+0x40>
 800e374:	2803      	cmp	r0, #3
 800e376:	d1f5      	bne.n	800e364 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e378:	00b6      	lsls	r6, r6, #2
 800e37a:	4b04      	ldr	r3, [pc, #16]	; (800e38c <writePxMutex+0x54>)
 800e37c:	58f0      	ldr	r0, [r6, r3]
 800e37e:	f000 f957 	bl	800e630 <osSemaphoreRelease>
}
 800e382:	0020      	movs	r0, r4
 800e384:	b002      	add	sp, #8
 800e386:	bc80      	pop	{r7}
 800e388:	46b9      	mov	r9, r7
 800e38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e38c:	20006b28 	.word	0x20006b28

0800e390 <writePxITMutex>:
{
 800e390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e392:	b083      	sub	sp, #12
 800e394:	0004      	movs	r4, r0
 800e396:	9101      	str	r1, [sp, #4]
 800e398:	0017      	movs	r7, r2
 800e39a:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {
 800e39c:	f7ff ffaa 	bl	800e2f4 <GetUart>
 800e3a0:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e3a2:	2001      	movs	r0, #1
	if (GetUart(port) != NULL) {
 800e3a4:	2e00      	cmp	r6, #0
 800e3a6:	d009      	beq.n	800e3bc <writePxITMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e3a8:	00a4      	lsls	r4, r4, #2
 800e3aa:	4b08      	ldr	r3, [pc, #32]	; (800e3cc <writePxITMutex+0x3c>)
 800e3ac:	58e0      	ldr	r0, [r4, r3]
 800e3ae:	0029      	movs	r1, r5
 800e3b0:	f000 f910 	bl	800e5d4 <osSemaphoreWait>
 800e3b4:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e3b6:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d001      	beq.n	800e3c0 <writePxITMutex+0x30>
}
 800e3bc:	b003      	add	sp, #12
 800e3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e3c0:	003a      	movs	r2, r7
 800e3c2:	9901      	ldr	r1, [sp, #4]
 800e3c4:	0030      	movs	r0, r6
 800e3c6:	f004 ff1a 	bl	80131fe <HAL_UART_Transmit_IT>
 800e3ca:	e7f7      	b.n	800e3bc <writePxITMutex+0x2c>
 800e3cc:	20006b28 	.word	0x20006b28

0800e3d0 <writePxDMAMutex>:
{
 800e3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	0004      	movs	r4, r0
 800e3d6:	9101      	str	r1, [sp, #4]
 800e3d8:	0017      	movs	r7, r2
 800e3da:	001d      	movs	r5, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800e3dc:	f7ff ff8a 	bl	800e2f4 <GetUart>
 800e3e0:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e3e2:	2001      	movs	r0, #1
	if (hUart != NULL) {	
 800e3e4:	2e00      	cmp	r6, #0
 800e3e6:	d009      	beq.n	800e3fc <writePxDMAMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e3e8:	00a4      	lsls	r4, r4, #2
 800e3ea:	4b0a      	ldr	r3, [pc, #40]	; (800e414 <writePxDMAMutex+0x44>)
 800e3ec:	58e0      	ldr	r0, [r4, r3]
 800e3ee:	0029      	movs	r1, r5
 800e3f0:	f000 f8f0 	bl	800e5d4 <osSemaphoreWait>
 800e3f4:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e3f6:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <writePxDMAMutex+0x30>
}
 800e3fc:	b003      	add	sp, #12
 800e3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e400:	0030      	movs	r0, r6
 800e402:	f7ff f92b 	bl	800d65c <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e406:	003a      	movs	r2, r7
 800e408:	9901      	ldr	r1, [sp, #4]
 800e40a:	0030      	movs	r0, r6
 800e40c:	f004 ffa6 	bl	801335c <HAL_UART_Transmit_DMA>
 800e410:	e7f4      	b.n	800e3fc <writePxDMAMutex+0x2c>
 800e412:	46c0      	nop			; (mov r8, r8)
 800e414:	20006b28 	.word	0x20006b28

0800e418 <UpdateBaudrate>:
{
 800e418:	b510      	push	{r4, lr}
 800e41a:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e41c:	f7ff ff6a 	bl	800e2f4 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e420:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e422:	f005 fb2d 	bl	8013a80 <HAL_UART_Init>
}
 800e426:	2000      	movs	r0, #0
 800e428:	bd10      	pop	{r4, pc}
	...

0800e42c <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e42c:	b570      	push	{r4, r5, r6, lr}
 800e42e:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e430:	d003      	beq.n	800e43a <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e432:	2901      	cmp	r1, #1
 800e434:	d002      	beq.n	800e43c <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e436:	2900      	cmp	r1, #0
 800e438:	d016      	beq.n	800e468 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e43a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e43c:	f7fe f8ac 	bl	800c598 <GetPort>
 800e440:	4b14      	ldr	r3, [pc, #80]	; (800e494 <SwapUartPins+0x68>)
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	3b01      	subs	r3, #1
 800e446:	4d14      	ldr	r5, [pc, #80]	; (800e498 <SwapUartPins+0x6c>)
 800e448:	005b      	lsls	r3, r3, #1
 800e44a:	3801      	subs	r0, #1
 800e44c:	2180      	movs	r1, #128	; 0x80
 800e44e:	0209      	lsls	r1, r1, #8
 800e450:	000a      	movs	r2, r1
 800e452:	4102      	asrs	r2, r0
 800e454:	5b58      	ldrh	r0, [r3, r5]
 800e456:	4302      	orrs	r2, r0
 800e458:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e45a:	2308      	movs	r3, #8
 800e45c:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e45e:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e460:	0020      	movs	r0, r4
 800e462:	f005 fb0d 	bl	8013a80 <HAL_UART_Init>
 800e466:	e7e8      	b.n	800e43a <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e468:	f7fe f896 	bl	800c598 <GetPort>
 800e46c:	4b09      	ldr	r3, [pc, #36]	; (800e494 <SwapUartPins+0x68>)
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	3b01      	subs	r3, #1
 800e472:	4d09      	ldr	r5, [pc, #36]	; (800e498 <SwapUartPins+0x6c>)
 800e474:	005b      	lsls	r3, r3, #1
 800e476:	3801      	subs	r0, #1
 800e478:	2180      	movs	r1, #128	; 0x80
 800e47a:	0209      	lsls	r1, r1, #8
 800e47c:	4101      	asrs	r1, r0
 800e47e:	5b5a      	ldrh	r2, [r3, r5]
 800e480:	438a      	bics	r2, r1
 800e482:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e484:	2308      	movs	r3, #8
 800e486:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e488:	2300      	movs	r3, #0
 800e48a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e48c:	0020      	movs	r0, r4
 800e48e:	f005 faf7 	bl	8013a80 <HAL_UART_Init>
}
 800e492:	e7d2      	b.n	800e43a <SwapUartPins+0xe>
 800e494:	2000107e 	.word	0x2000107e
 800e498:	20006f24 	.word	0x20006f24

0800e49c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e49c:	4816      	ldr	r0, [pc, #88]	; (800e4f8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e49e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e4a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e4a2:	e003      	b.n	800e4ac <LoopCopyDataInit>

0800e4a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e4a4:	4b15      	ldr	r3, [pc, #84]	; (800e4fc <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e4a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e4a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e4aa:	3104      	adds	r1, #4

0800e4ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e4ac:	4814      	ldr	r0, [pc, #80]	; (800e500 <LoopForever+0xc>)
  ldr r3, =_edata
 800e4ae:	4b15      	ldr	r3, [pc, #84]	; (800e504 <LoopForever+0x10>)
  adds r2, r0, r1
 800e4b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e4b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e4b4:	d3f6      	bcc.n	800e4a4 <CopyDataInit>
  ldr r2, =_sbss
 800e4b6:	4a14      	ldr	r2, [pc, #80]	; (800e508 <LoopForever+0x14>)
  b LoopFillZerobss
 800e4b8:	e002      	b.n	800e4c0 <LoopFillZerobss>

0800e4ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e4ba:	2300      	movs	r3, #0
  str  r3, [r2]
 800e4bc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e4be:	3204      	adds	r2, #4

0800e4c0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e4c0:	4b12      	ldr	r3, [pc, #72]	; (800e50c <LoopForever+0x18>)
  cmp r2, r3
 800e4c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e4c4:	d3f9      	bcc.n	800e4ba <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e4c6:	4812      	ldr	r0, [pc, #72]	; (800e510 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e4c8:	4912      	ldr	r1, [pc, #72]	; (800e514 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e4ca:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e4cc:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e4ce:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e4d0:	d005      	beq.n	800e4de <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e4d2:	f000 f82b 	bl	800e52c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e4d6:	f005 fc41 	bl	8013d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e4da:	f005 fc28 	bl	8013d2e <main>

0800e4de <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e4de:	480e      	ldr	r0, [pc, #56]	; (800e518 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e4e0:	490e      	ldr	r1, [pc, #56]	; (800e51c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e4e2:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e4e4:	480e      	ldr	r0, [pc, #56]	; (800e520 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e4e6:	490d      	ldr	r1, [pc, #52]	; (800e51c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e4e8:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e4ea:	480e      	ldr	r0, [pc, #56]	; (800e524 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e4ec:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e4ee:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e4f0:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e4f2:	4700      	bx	r0

0800e4f4 <LoopForever>:


LoopForever:
    b LoopForever
 800e4f4:	e7fe      	b.n	800e4f4 <LoopForever>
 800e4f6:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e4f8:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e4fc:	0801dd7c 	.word	0x0801dd7c
  ldr r0, =_sdata
 800e500:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e504:	20000a5c 	.word	0x20000a5c
  ldr r2, =_sbss
 800e508:	20000a60 	.word	0x20000a60
  ldr r3, = _ebss
 800e50c:	20006fc8 	.word	0x20006fc8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e510:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e514:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e518:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e51c:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e520:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e524:	1fffd800 	.word	0x1fffd800

0800e528 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e528:	e7fe      	b.n	800e528 <ADC1_COMP_IRQHandler>
	...

0800e52c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e52c:	4b11      	ldr	r3, [pc, #68]	; (800e574 <SystemInit+0x48>)
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	2101      	movs	r1, #1
 800e532:	430a      	orrs	r2, r1
 800e534:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e536:	685a      	ldr	r2, [r3, #4]
 800e538:	480f      	ldr	r0, [pc, #60]	; (800e578 <SystemInit+0x4c>)
 800e53a:	4002      	ands	r2, r0
 800e53c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	480e      	ldr	r0, [pc, #56]	; (800e57c <SystemInit+0x50>)
 800e542:	4002      	ands	r2, r0
 800e544:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	480d      	ldr	r0, [pc, #52]	; (800e580 <SystemInit+0x54>)
 800e54a:	4002      	ands	r2, r0
 800e54c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e54e:	685a      	ldr	r2, [r3, #4]
 800e550:	480c      	ldr	r0, [pc, #48]	; (800e584 <SystemInit+0x58>)
 800e552:	4002      	ands	r2, r0
 800e554:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e558:	200f      	movs	r0, #15
 800e55a:	4382      	bics	r2, r0
 800e55c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e55e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e560:	4809      	ldr	r0, [pc, #36]	; (800e588 <SystemInit+0x5c>)
 800e562:	4002      	ands	r2, r0
 800e564:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e568:	438a      	bics	r2, r1
 800e56a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e56c:	2200      	movs	r2, #0
 800e56e:	609a      	str	r2, [r3, #8]

}
 800e570:	4770      	bx	lr
 800e572:	46c0      	nop			; (mov r8, r8)
 800e574:	40021000 	.word	0x40021000
 800e578:	08ffb80c 	.word	0x08ffb80c
 800e57c:	fef6ffff 	.word	0xfef6ffff
 800e580:	fffbffff 	.word	0xfffbffff
 800e584:	ffc0ffff 	.word	0xffc0ffff
 800e588:	fff0feac 	.word	0xfff0feac

0800e58c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e58c:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e58e:	f001 f853 	bl	800f638 <vTaskStartScheduler>
  
  return osOK;
}
 800e592:	2000      	movs	r0, #0
 800e594:	bd10      	pop	{r4, pc}

0800e596 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e596:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e598:	2800      	cmp	r0, #0
 800e59a:	d100      	bne.n	800e59e <osDelay+0x8>
 800e59c:	3001      	adds	r0, #1
 800e59e:	f001 f993 	bl	800f8c8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	bd10      	pop	{r4, pc}

0800e5a6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e5a6:	b510      	push	{r4, lr}
 800e5a8:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e5aa:	2901      	cmp	r1, #1
 800e5ac:	d005      	beq.n	800e5ba <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e5ae:	2100      	movs	r1, #0
 800e5b0:	f000 fbdb 	bl	800ed6a <xQueueCreateCountingSemaphore>
 800e5b4:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e5b6:	0020      	movs	r0, r4
 800e5b8:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e5ba:	2203      	movs	r2, #3
 800e5bc:	2100      	movs	r1, #0
 800e5be:	f000 fbaf 	bl	800ed20 <xQueueGenericCreate>
 800e5c2:	1e04      	subs	r4, r0, #0
 800e5c4:	d0f7      	beq.n	800e5b6 <osSemaphoreCreate+0x10>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	f000 fbe1 	bl	800ed92 <xQueueGenericSend>
 800e5d0:	e7f1      	b.n	800e5b6 <osSemaphoreCreate+0x10>
	...

0800e5d4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e5d4:	b500      	push	{lr}
 800e5d6:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e5d8:	2300      	movs	r3, #0
 800e5da:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	d020      	beq.n	800e622 <osSemaphoreWait+0x4e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5e0:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00e      	beq.n	800e606 <osSemaphoreWait+0x32>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e5e8:	aa01      	add	r2, sp, #4
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	f000 fd9c 	bl	800f128 <xQueueReceiveFromISR>
 800e5f0:	2801      	cmp	r0, #1
 800e5f2:	d118      	bne.n	800e626 <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e5f4:	9801      	ldr	r0, [sp, #4]
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d011      	beq.n	800e61e <osSemaphoreWait+0x4a>
 800e5fa:	4b0c      	ldr	r3, [pc, #48]	; (800e62c <osSemaphoreWait+0x58>)
 800e5fc:	2280      	movs	r2, #128	; 0x80
 800e5fe:	0552      	lsls	r2, r2, #21
 800e600:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e602:	2000      	movs	r0, #0
 800e604:	e00b      	b.n	800e61e <osSemaphoreWait+0x4a>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e606:	2300      	movs	r3, #0
 800e608:	000a      	movs	r2, r1
 800e60a:	2100      	movs	r1, #0
 800e60c:	f000 fce1 	bl	800efd2 <xQueueGenericReceive>
    return osErrorOS;
 800e610:	3801      	subs	r0, #1
 800e612:	4243      	negs	r3, r0
 800e614:	4158      	adcs	r0, r3
 800e616:	4240      	negs	r0, r0
 800e618:	23fe      	movs	r3, #254	; 0xfe
 800e61a:	4398      	bics	r0, r3
 800e61c:	30ff      	adds	r0, #255	; 0xff
}
 800e61e:	b003      	add	sp, #12
 800e620:	bd00      	pop	{pc}
    return osErrorParameter;
 800e622:	2080      	movs	r0, #128	; 0x80
 800e624:	e7fb      	b.n	800e61e <osSemaphoreWait+0x4a>
      return osErrorOS;
 800e626:	20ff      	movs	r0, #255	; 0xff
 800e628:	e7f9      	b.n	800e61e <osSemaphoreWait+0x4a>
 800e62a:	46c0      	nop			; (mov r8, r8)
 800e62c:	e000ed04 	.word	0xe000ed04

0800e630 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e630:	b510      	push	{r4, lr}
 800e632:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e634:	2300      	movs	r3, #0
 800e636:	9301      	str	r3, [sp, #4]
 800e638:	f3ef 8405 	mrs	r4, IPSR
  
  
  if (inHandlerMode()) {
 800e63c:	2c00      	cmp	r4, #0
 800e63e:	d00d      	beq.n	800e65c <osSemaphoreRelease+0x2c>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e640:	a901      	add	r1, sp, #4
 800e642:	f000 fc8a 	bl	800ef5a <xQueueGiveFromISR>
 800e646:	2801      	cmp	r0, #1
 800e648:	d113      	bne.n	800e672 <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800e64a:	2400      	movs	r4, #0
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e64c:	9b01      	ldr	r3, [sp, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d00c      	beq.n	800e66c <osSemaphoreRelease+0x3c>
 800e652:	4b09      	ldr	r3, [pc, #36]	; (800e678 <osSemaphoreRelease+0x48>)
 800e654:	2280      	movs	r2, #128	; 0x80
 800e656:	0552      	lsls	r2, r2, #21
 800e658:	601a      	str	r2, [r3, #0]
 800e65a:	e007      	b.n	800e66c <osSemaphoreRelease+0x3c>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e65c:	2300      	movs	r3, #0
 800e65e:	2200      	movs	r2, #0
 800e660:	2100      	movs	r1, #0
 800e662:	f000 fb96 	bl	800ed92 <xQueueGenericSend>
 800e666:	2801      	cmp	r0, #1
 800e668:	d000      	beq.n	800e66c <osSemaphoreRelease+0x3c>
      result = osErrorOS;
 800e66a:	24ff      	movs	r4, #255	; 0xff
    }
  }
  
  return result;
}
 800e66c:	0020      	movs	r0, r4
 800e66e:	b002      	add	sp, #8
 800e670:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800e672:	24ff      	movs	r4, #255	; 0xff
 800e674:	e7fa      	b.n	800e66c <osSemaphoreRelease+0x3c>
 800e676:	46c0      	nop			; (mov r8, r8)
 800e678:	e000ed04 	.word	0xe000ed04

0800e67c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e67c:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e67e:	f001 fb85 	bl	800fd8c <xTaskGetSchedulerState>
 800e682:	2801      	cmp	r0, #1
 800e684:	d100      	bne.n	800e688 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e686:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800e688:	f002 f820 	bl	80106cc <xPortSysTickHandler>
}
 800e68c:	e7fb      	b.n	800e686 <osSystickHandler+0xa>
	...

0800e690 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800e694:	d011      	beq.n	800e6ba <FreeRTOS_CLIRegisterCommand+0x2a>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e696:	2008      	movs	r0, #8
 800e698:	f002 f854 	bl	8010744 <pvPortMalloc>
 800e69c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800e69e:	d00e      	beq.n	800e6be <FreeRTOS_CLIRegisterCommand+0x2e>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800e6a0:	f001 ffce 	bl	8010640 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e6a4:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e6aa:	4b06      	ldr	r3, [pc, #24]	; (800e6c4 <FreeRTOS_CLIRegisterCommand+0x34>)
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e6b0:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e6b2:	f001 ffd1 	bl	8010658 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800e6b6:	2001      	movs	r0, #1
 800e6b8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800e6ba:	b672      	cpsid	i
 800e6bc:	e7fe      	b.n	800e6bc <FreeRTOS_CLIRegisterCommand+0x2c>
	configASSERT( pxNewListItem );
 800e6be:	b672      	cpsid	i
 800e6c0:	e7fe      	b.n	800e6c0 <FreeRTOS_CLIRegisterCommand+0x30>
 800e6c2:	46c0      	nop			; (mov r8, r8)
 800e6c4:	20000094 	.word	0x20000094

0800e6c8 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ca:	46de      	mov	lr, fp
 800e6cc:	4657      	mov	r7, sl
 800e6ce:	464e      	mov	r6, r9
 800e6d0:	4645      	mov	r5, r8
 800e6d2:	b5e0      	push	{r5, r6, r7, lr}
 800e6d4:	b083      	sub	sp, #12
 800e6d6:	0006      	movs	r6, r0
 800e6d8:	4689      	mov	r9, r1
 800e6da:	9201      	str	r2, [sp, #4]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e6dc:	4b3b      	ldr	r3, [pc, #236]	; (800e7cc <FreeRTOS_CLIProcessCommand+0x104>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d012      	beq.n	800e70a <FreeRTOS_CLIProcessCommand+0x42>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	689b      	ldr	r3, [r3, #8]
 800e6e8:	0032      	movs	r2, r6
 800e6ea:	9901      	ldr	r1, [sp, #4]
 800e6ec:	4648      	mov	r0, r9
 800e6ee:	4798      	blx	r3
 800e6f0:	1e05      	subs	r5, r0, #0

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e6f2:	d102      	bne.n	800e6fa <FreeRTOS_CLIProcessCommand+0x32>
		{
			pxCommand = NULL;
 800e6f4:	4b35      	ldr	r3, [pc, #212]	; (800e7cc <FreeRTOS_CLIProcessCommand+0x104>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e6fa:	0028      	movs	r0, r5
 800e6fc:	b003      	add	sp, #12
 800e6fe:	bcf0      	pop	{r4, r5, r6, r7}
 800e700:	46bb      	mov	fp, r7
 800e702:	46b2      	mov	sl, r6
 800e704:	46a9      	mov	r9, r5
 800e706:	46a0      	mov	r8, r4
 800e708:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e70a:	4c31      	ldr	r4, [pc, #196]	; (800e7d0 <FreeRTOS_CLIProcessCommand+0x108>)
 800e70c:	4b2f      	ldr	r3, [pc, #188]	; (800e7cc <FreeRTOS_CLIProcessCommand+0x104>)
 800e70e:	601c      	str	r4, [r3, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e710:	2320      	movs	r3, #32
 800e712:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e714:	4b2d      	ldr	r3, [pc, #180]	; (800e7cc <FreeRTOS_CLIProcessCommand+0x104>)
 800e716:	469b      	mov	fp, r3
 800e718:	e00a      	b.n	800e730 <FreeRTOS_CLIProcessCommand+0x68>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e71a:	0029      	movs	r1, r5
 800e71c:	0030      	movs	r0, r6
 800e71e:	f005 ffb8 	bl	8014692 <strncmp>
 800e722:	1e05      	subs	r5, r0, #0
 800e724:	d012      	beq.n	800e74c <FreeRTOS_CLIProcessCommand+0x84>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e726:	6864      	ldr	r4, [r4, #4]
 800e728:	465b      	mov	r3, fp
 800e72a:	601c      	str	r4, [r3, #0]
 800e72c:	2c00      	cmp	r4, #0
 800e72e:	d015      	beq.n	800e75c <FreeRTOS_CLIProcessCommand+0x94>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e730:	6827      	ldr	r7, [r4, #0]
 800e732:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e734:	0028      	movs	r0, r5
 800e736:	f7f1 fcef 	bl	8000118 <strlen>
 800e73a:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e73c:	5c33      	ldrb	r3, [r6, r0]
 800e73e:	4651      	mov	r1, sl
 800e740:	438b      	bics	r3, r1
 800e742:	b259      	sxtb	r1, r3
 800e744:	4688      	mov	r8, r1
 800e746:	2b00      	cmp	r3, #0
 800e748:	d1ed      	bne.n	800e726 <FreeRTOS_CLIProcessCommand+0x5e>
 800e74a:	e7e6      	b.n	800e71a <FreeRTOS_CLIProcessCommand+0x52>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e74c:	7b3f      	ldrb	r7, [r7, #12]
 800e74e:	b27f      	sxtb	r7, r7
 800e750:	2f00      	cmp	r7, #0
 800e752:	da0a      	bge.n	800e76a <FreeRTOS_CLIProcessCommand+0xa2>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e754:	4b1d      	ldr	r3, [pc, #116]	; (800e7cc <FreeRTOS_CLIProcessCommand+0x104>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1c3      	bne.n	800e6e4 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e75c:	9a01      	ldr	r2, [sp, #4]
 800e75e:	491d      	ldr	r1, [pc, #116]	; (800e7d4 <FreeRTOS_CLIProcessCommand+0x10c>)
 800e760:	4648      	mov	r0, r9
 800e762:	f005 ffa7 	bl	80146b4 <strncpy>
		xReturn = pdFALSE;
 800e766:	2500      	movs	r5, #0
	return xReturn;
 800e768:	e7c7      	b.n	800e6fa <FreeRTOS_CLIProcessCommand+0x32>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e76a:	2300      	movs	r3, #0
 800e76c:	56f3      	ldrsb	r3, [r6, r3]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d02a      	beq.n	800e7c8 <FreeRTOS_CLIProcessCommand+0x100>
 800e772:	0034      	movs	r4, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e774:	0002      	movs	r2, r0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e776:	0001      	movs	r1, r0
				xLastCharacterWasSpace = pdTRUE;
 800e778:	2001      	movs	r0, #1
 800e77a:	e00b      	b.n	800e794 <FreeRTOS_CLIProcessCommand+0xcc>
			if( xLastCharacterWasSpace != pdTRUE )
 800e77c:	2a01      	cmp	r2, #1
 800e77e:	d004      	beq.n	800e78a <FreeRTOS_CLIProcessCommand+0xc2>
				cParameters++;
 800e780:	4643      	mov	r3, r8
 800e782:	3301      	adds	r3, #1
 800e784:	b25b      	sxtb	r3, r3
 800e786:	4698      	mov	r8, r3
				xLastCharacterWasSpace = pdTRUE;
 800e788:	0002      	movs	r2, r0
		}

		pcCommandString++;
 800e78a:	3401      	adds	r4, #1
	while( *pcCommandString != 0x00 )
 800e78c:	2300      	movs	r3, #0
 800e78e:	56e3      	ldrsb	r3, [r4, r3]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d003      	beq.n	800e79c <FreeRTOS_CLIProcessCommand+0xd4>
		if( ( *pcCommandString ) == ' ' )
 800e794:	2b20      	cmp	r3, #32
 800e796:	d0f1      	beq.n	800e77c <FreeRTOS_CLIProcessCommand+0xb4>
			xLastCharacterWasSpace = pdFALSE;
 800e798:	000a      	movs	r2, r1
 800e79a:	e7f6      	b.n	800e78a <FreeRTOS_CLIProcessCommand+0xc2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e79c:	2a01      	cmp	r2, #1
 800e79e:	d00e      	beq.n	800e7be <FreeRTOS_CLIProcessCommand+0xf6>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e7a0:	4b0a      	ldr	r3, [pc, #40]	; (800e7cc <FreeRTOS_CLIProcessCommand+0x104>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d0d9      	beq.n	800e75c <FreeRTOS_CLIProcessCommand+0x94>
 800e7a8:	4547      	cmp	r7, r8
 800e7aa:	d09b      	beq.n	800e6e4 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e7ac:	9a01      	ldr	r2, [sp, #4]
 800e7ae:	490a      	ldr	r1, [pc, #40]	; (800e7d8 <FreeRTOS_CLIProcessCommand+0x110>)
 800e7b0:	4648      	mov	r0, r9
 800e7b2:	f005 ff7f 	bl	80146b4 <strncpy>
		pxCommand = NULL;
 800e7b6:	4b05      	ldr	r3, [pc, #20]	; (800e7cc <FreeRTOS_CLIProcessCommand+0x104>)
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	e79d      	b.n	800e6fa <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
 800e7be:	4643      	mov	r3, r8
 800e7c0:	3b01      	subs	r3, #1
 800e7c2:	b25b      	sxtb	r3, r3
 800e7c4:	4698      	mov	r8, r3
 800e7c6:	e7eb      	b.n	800e7a0 <FreeRTOS_CLIProcessCommand+0xd8>
int8_t cParameters = 0;
 800e7c8:	4698      	mov	r8, r3
 800e7ca:	e7e9      	b.n	800e7a0 <FreeRTOS_CLIProcessCommand+0xd8>
 800e7cc:	20001e34 	.word	0x20001e34
 800e7d0:	20000098 	.word	0x20000098
 800e7d4:	0801d76c 	.word	0x0801d76c
 800e7d8:	0801d714 	.word	0x0801d714

0800e7dc <FreeRTOS_CLIGetOutputBuffer>:
}
 800e7dc:	4800      	ldr	r0, [pc, #0]	; (800e7e0 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e7de:	4770      	bx	lr
 800e7e0:	20001bcc 	.word	0x20001bcc

0800e7e4 <FreeRTOS_CLIGetParameter>:
{
 800e7e4:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e7ea:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e7ec:	e00d      	b.n	800e80a <FreeRTOS_CLIGetParameter+0x26>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	56c3      	ldrsb	r3, [r0, r3]
 800e7f2:	2b20      	cmp	r3, #32
 800e7f4:	d104      	bne.n	800e800 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800e7f6:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	56c3      	ldrsb	r3, [r0, r3]
 800e7fc:	2b20      	cmp	r3, #32
 800e7fe:	d0fa      	beq.n	800e7f6 <FreeRTOS_CLIGetParameter+0x12>
		if( *pcCommandString != 0x00 )
 800e800:	2b00      	cmp	r3, #0
 800e802:	d029      	beq.n	800e858 <FreeRTOS_CLIGetParameter+0x74>
			uxParametersFound++;
 800e804:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e806:	42a1      	cmp	r1, r4
 800e808:	d00f      	beq.n	800e82a <FreeRTOS_CLIGetParameter+0x46>
	while( uxParametersFound < uxWantedParameter )
 800e80a:	428c      	cmp	r4, r1
 800e80c:	d026      	beq.n	800e85c <FreeRTOS_CLIGetParameter+0x78>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e80e:	2300      	movs	r3, #0
 800e810:	56c3      	ldrsb	r3, [r0, r3]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d006      	beq.n	800e824 <FreeRTOS_CLIGetParameter+0x40>
 800e816:	2b20      	cmp	r3, #32
 800e818:	d0e9      	beq.n	800e7ee <FreeRTOS_CLIGetParameter+0xa>
			pcCommandString++;
 800e81a:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e81c:	2300      	movs	r3, #0
 800e81e:	56c3      	ldrsb	r3, [r0, r3]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d1f8      	bne.n	800e816 <FreeRTOS_CLIGetParameter+0x32>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e824:	2300      	movs	r3, #0
 800e826:	56c3      	ldrsb	r3, [r0, r3]
 800e828:	e7ea      	b.n	800e800 <FreeRTOS_CLIGetParameter+0x1c>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e82a:	2300      	movs	r3, #0
 800e82c:	56c3      	ldrsb	r3, [r0, r3]
 800e82e:	0001      	movs	r1, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00f      	beq.n	800e854 <FreeRTOS_CLIGetParameter+0x70>
 800e834:	2b20      	cmp	r3, #32
 800e836:	d007      	beq.n	800e848 <FreeRTOS_CLIGetParameter+0x64>
					( *pxParameterStringLength )++;
 800e838:	6813      	ldr	r3, [r2, #0]
 800e83a:	3301      	adds	r3, #1
 800e83c:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e83e:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e840:	2300      	movs	r3, #0
 800e842:	56cb      	ldrsb	r3, [r1, r3]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1f5      	bne.n	800e834 <FreeRTOS_CLIGetParameter+0x50>
				if( *pxParameterStringLength == 0 )
 800e848:	6813      	ldr	r3, [r2, #0]
					pcReturn = NULL;
 800e84a:	1e5a      	subs	r2, r3, #1
 800e84c:	4193      	sbcs	r3, r2
 800e84e:	425b      	negs	r3, r3
 800e850:	4018      	ands	r0, r3
 800e852:	e004      	b.n	800e85e <FreeRTOS_CLIGetParameter+0x7a>
 800e854:	2000      	movs	r0, #0
 800e856:	e002      	b.n	800e85e <FreeRTOS_CLIGetParameter+0x7a>
const int8_t *pcReturn = NULL;
 800e858:	2000      	movs	r0, #0
 800e85a:	e000      	b.n	800e85e <FreeRTOS_CLIGetParameter+0x7a>
 800e85c:	2000      	movs	r0, #0
}
 800e85e:	bd10      	pop	{r4, pc}

0800e860 <prvHelpCommand>:
{
 800e860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e862:	46c6      	mov	lr, r8
 800e864:	b500      	push	{lr}
 800e866:	b082      	sub	sp, #8
 800e868:	0005      	movs	r5, r0
 800e86a:	000c      	movs	r4, r1
 800e86c:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e872:	aa01      	add	r2, sp, #4
 800e874:	2101      	movs	r1, #1
 800e876:	f7ff ffb5 	bl	800e7e4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e87a:	2800      	cmp	r0, #0
 800e87c:	d02a      	beq.n	800e8d4 <prvHelpCommand+0x74>
 800e87e:	2206      	movs	r2, #6
 800e880:	4932      	ldr	r1, [pc, #200]	; (800e94c <prvHelpCommand+0xec>)
 800e882:	f005 ff06 	bl	8014692 <strncmp>
 800e886:	1e06      	subs	r6, r0, #0
 800e888:	d14b      	bne.n	800e922 <prvHelpCommand+0xc2>
		if( str == NumOfParamsHelpStrings )
 800e88a:	4b31      	ldr	r3, [pc, #196]	; (800e950 <prvHelpCommand+0xf0>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	2b07      	cmp	r3, #7
 800e890:	d015      	beq.n	800e8be <prvHelpCommand+0x5e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e892:	1c5a      	adds	r2, r3, #1
 800e894:	b2d2      	uxtb	r2, r2
 800e896:	4690      	mov	r8, r2
 800e898:	4a2d      	ldr	r2, [pc, #180]	; (800e950 <prvHelpCommand+0xf0>)
 800e89a:	4641      	mov	r1, r8
 800e89c:	7011      	strb	r1, [r2, #0]
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4a2c      	ldr	r2, [pc, #176]	; (800e954 <prvHelpCommand+0xf4>)
 800e8a2:	5899      	ldr	r1, [r3, r2]
 800e8a4:	0022      	movs	r2, r4
 800e8a6:	0028      	movs	r0, r5
 800e8a8:	f005 ff04 	bl	80146b4 <strncpy>
			xReturn = pdTRUE;
 800e8ac:	2701      	movs	r7, #1
		if( str == NumOfParamsHelpStrings )
 800e8ae:	4643      	mov	r3, r8
 800e8b0:	2b07      	cmp	r3, #7
 800e8b2:	d136      	bne.n	800e922 <prvHelpCommand+0xc2>
			xReturn = pdFALSE; str = 0;
 800e8b4:	4b26      	ldr	r3, [pc, #152]	; (800e950 <prvHelpCommand+0xf0>)
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	701a      	strb	r2, [r3, #0]
 800e8ba:	0037      	movs	r7, r6
 800e8bc:	e031      	b.n	800e922 <prvHelpCommand+0xc2>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e8be:	4b24      	ldr	r3, [pc, #144]	; (800e950 <prvHelpCommand+0xf0>)
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	701a      	strb	r2, [r3, #0]
 800e8c4:	4b23      	ldr	r3, [pc, #140]	; (800e954 <prvHelpCommand+0xf4>)
 800e8c6:	6819      	ldr	r1, [r3, #0]
 800e8c8:	0022      	movs	r2, r4
 800e8ca:	0028      	movs	r0, r5
 800e8cc:	f005 fef2 	bl	80146b4 <strncpy>
			xReturn = pdTRUE;
 800e8d0:	2701      	movs	r7, #1
 800e8d2:	e026      	b.n	800e922 <prvHelpCommand+0xc2>
		if( pxCommand == NULL )
 800e8d4:	4b20      	ldr	r3, [pc, #128]	; (800e958 <prvHelpCommand+0xf8>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d027      	beq.n	800e92c <prvHelpCommand+0xcc>
		if (counter > numOfBosCommands) {
 800e8dc:	4b1f      	ldr	r3, [pc, #124]	; (800e95c <prvHelpCommand+0xfc>)
 800e8de:	781e      	ldrb	r6, [r3, #0]
 800e8e0:	4b1f      	ldr	r3, [pc, #124]	; (800e960 <prvHelpCommand+0x100>)
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	42b3      	cmp	r3, r6
 800e8e6:	d228      	bcs.n	800e93a <prvHelpCommand+0xda>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e8e8:	0022      	movs	r2, r4
 800e8ea:	3a08      	subs	r2, #8
 800e8ec:	4b1a      	ldr	r3, [pc, #104]	; (800e958 <prvHelpCommand+0xf8>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	6859      	ldr	r1, [r3, #4]
 800e8f4:	0028      	movs	r0, r5
 800e8f6:	3008      	adds	r0, #8
 800e8f8:	f005 fedc 	bl	80146b4 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e8fc:	1c68      	adds	r0, r5, #1
 800e8fe:	4919      	ldr	r1, [pc, #100]	; (800e964 <prvHelpCommand+0x104>)
 800e900:	f005 febf 	bl	8014682 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e904:	2328      	movs	r3, #40	; 0x28
 800e906:	702b      	strb	r3, [r5, #0]
 800e908:	3301      	adds	r3, #1
 800e90a:	71ab      	strb	r3, [r5, #6]
 800e90c:	3b09      	subs	r3, #9
 800e90e:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800e910:	4b11      	ldr	r3, [pc, #68]	; (800e958 <prvHelpCommand+0xf8>)
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	6857      	ldr	r7, [r2, #4]
 800e916:	601f      	str	r7, [r3, #0]
		counter++;
 800e918:	3601      	adds	r6, #1
 800e91a:	4b10      	ldr	r3, [pc, #64]	; (800e95c <prvHelpCommand+0xfc>)
 800e91c:	701e      	strb	r6, [r3, #0]
			xReturn = pdTRUE;
 800e91e:	1e7b      	subs	r3, r7, #1
 800e920:	419f      	sbcs	r7, r3
}
 800e922:	0038      	movs	r0, r7
 800e924:	b002      	add	sp, #8
 800e926:	bc80      	pop	{r7}
 800e928:	46b8      	mov	r8, r7
 800e92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800e92c:	4b0a      	ldr	r3, [pc, #40]	; (800e958 <prvHelpCommand+0xf8>)
 800e92e:	4a0e      	ldr	r2, [pc, #56]	; (800e968 <prvHelpCommand+0x108>)
 800e930:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e932:	4b0a      	ldr	r3, [pc, #40]	; (800e95c <prvHelpCommand+0xfc>)
 800e934:	2201      	movs	r2, #1
 800e936:	701a      	strb	r2, [r3, #0]
 800e938:	e7d0      	b.n	800e8dc <prvHelpCommand+0x7c>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e93a:	4b07      	ldr	r3, [pc, #28]	; (800e958 <prvHelpCommand+0xf8>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	6859      	ldr	r1, [r3, #4]
 800e942:	0022      	movs	r2, r4
 800e944:	0028      	movs	r0, r5
 800e946:	f005 feb5 	bl	80146b4 <strncpy>
 800e94a:	e7e1      	b.n	800e910 <prvHelpCommand+0xb0>
 800e94c:	0801b5d4 	.word	0x0801b5d4
 800e950:	20001e3c 	.word	0x20001e3c
 800e954:	20000054 	.word	0x20000054
 800e958:	20001e38 	.word	0x20001e38
 800e95c:	20001e30 	.word	0x20001e30
 800e960:	20006a2c 	.word	0x20006a2c
 800e964:	0801a9c2 	.word	0x0801a9c2
 800e968:	20000098 	.word	0x20000098

0800e96c <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
 800e96c:	b510      	push	{r4, lr}
EventGroup_t *pxEventBits;

	pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800e96e:	201c      	movs	r0, #28
 800e970:	f001 fee8 	bl	8010744 <pvPortMalloc>
 800e974:	1e04      	subs	r4, r0, #0
	if( pxEventBits != NULL )
 800e976:	d003      	beq.n	800e980 <xEventGroupCreate+0x14>
	{
		pxEventBits->uxEventBits = 0;
 800e978:	2300      	movs	r3, #0
 800e97a:	c008      	stmia	r0!, {r3}
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e97c:	f000 f8cb 	bl	800eb16 <vListInitialise>
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
}
 800e980:	0020      	movs	r0, r4
 800e982:	bd10      	pop	{r4, pc}

0800e984 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e986:	46d6      	mov	lr, sl
 800e988:	464f      	mov	r7, r9
 800e98a:	b580      	push	{r7, lr}
 800e98c:	0006      	movs	r6, r0
 800e98e:	000d      	movs	r5, r1
 800e990:	0017      	movs	r7, r2
 800e992:	4699      	mov	r9, r3
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800e994:	2800      	cmp	r0, #0
 800e996:	d006      	beq.n	800e9a6 <xEventGroupWaitBits+0x22>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e998:	0e0b      	lsrs	r3, r1, #24
 800e99a:	061a      	lsls	r2, r3, #24
 800e99c:	4692      	mov	sl, r2
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d003      	beq.n	800e9aa <xEventGroupWaitBits+0x26>
 800e9a2:	b672      	cpsid	i
 800e9a4:	e7fe      	b.n	800e9a4 <xEventGroupWaitBits+0x20>
	configASSERT( xEventGroup );
 800e9a6:	b672      	cpsid	i
 800e9a8:	e7fe      	b.n	800e9a8 <xEventGroupWaitBits+0x24>
	configASSERT( uxBitsToWaitFor != 0 );
 800e9aa:	2900      	cmp	r1, #0
 800e9ac:	d101      	bne.n	800e9b2 <xEventGroupWaitBits+0x2e>
 800e9ae:	b672      	cpsid	i
 800e9b0:	e7fe      	b.n	800e9b0 <xEventGroupWaitBits+0x2c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9b2:	f001 f9eb 	bl	800fd8c <xTaskGetSchedulerState>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	d104      	bne.n	800e9c4 <xEventGroupWaitBits+0x40>
 800e9ba:	9b08      	ldr	r3, [sp, #32]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <xEventGroupWaitBits+0x40>
 800e9c0:	b672      	cpsid	i
 800e9c2:	e7fe      	b.n	800e9c2 <xEventGroupWaitBits+0x3e>
	}
	#endif

	vTaskSuspendAll();
 800e9c4:	f000 fe64 	bl	800f690 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e9c8:	6834      	ldr	r4, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 800e9ca:	464b      	mov	r3, r9
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d10d      	bne.n	800e9ec <xEventGroupWaitBits+0x68>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e9d0:	0022      	movs	r2, r4
 800e9d2:	402a      	ands	r2, r5
BaseType_t xWaitConditionMet = pdFALSE;
 800e9d4:	1e53      	subs	r3, r2, #1
 800e9d6:	419a      	sbcs	r2, r3
		if( xWaitConditionMet != pdFALSE )
 800e9d8:	2a00      	cmp	r2, #0
 800e9da:	d00d      	beq.n	800e9f8 <xEventGroupWaitBits+0x74>
			if( xClearOnExit != pdFALSE )
 800e9dc:	2f00      	cmp	r7, #0
 800e9de:	d002      	beq.n	800e9e6 <xEventGroupWaitBits+0x62>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e9e0:	0023      	movs	r3, r4
 800e9e2:	43ab      	bics	r3, r5
 800e9e4:	6033      	str	r3, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
 800e9e6:	f000 fefb 	bl	800f7e0 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 800e9ea:	e026      	b.n	800ea3a <xEventGroupWaitBits+0xb6>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e9ec:	0022      	movs	r2, r4
 800e9ee:	402a      	ands	r2, r5
 800e9f0:	1b52      	subs	r2, r2, r5
BaseType_t xWaitConditionMet = pdFALSE;
 800e9f2:	4253      	negs	r3, r2
 800e9f4:	415a      	adcs	r2, r3
 800e9f6:	e7ef      	b.n	800e9d8 <xEventGroupWaitBits+0x54>
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e9f8:	9b08      	ldr	r3, [sp, #32]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d0f3      	beq.n	800e9e6 <xEventGroupWaitBits+0x62>
			if( xClearOnExit != pdFALSE )
 800e9fe:	2f00      	cmp	r7, #0
 800ea00:	d002      	beq.n	800ea08 <xEventGroupWaitBits+0x84>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800ea02:	2380      	movs	r3, #128	; 0x80
 800ea04:	045b      	lsls	r3, r3, #17
 800ea06:	469a      	mov	sl, r3
			if( xWaitForAllBits != pdFALSE )
 800ea08:	464b      	mov	r3, r9
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d004      	beq.n	800ea18 <xEventGroupWaitBits+0x94>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800ea0e:	2380      	movs	r3, #128	; 0x80
 800ea10:	04db      	lsls	r3, r3, #19
 800ea12:	4652      	mov	r2, sl
 800ea14:	431a      	orrs	r2, r3
 800ea16:	4692      	mov	sl, r2
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800ea18:	4651      	mov	r1, sl
 800ea1a:	4329      	orrs	r1, r5
 800ea1c:	1d30      	adds	r0, r6, #4
 800ea1e:	9a08      	ldr	r2, [sp, #32]
 800ea20:	f001 f8a4 	bl	800fb6c <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 800ea24:	f000 fedc 	bl	800f7e0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d00b      	beq.n	800ea44 <xEventGroupWaitBits+0xc0>
		uxReturn = uxTaskResetEventItemValue();
 800ea2c:	f001 fb06 	bl	801003c <uxTaskResetEventItemValue>
 800ea30:	0004      	movs	r4, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800ea32:	0183      	lsls	r3, r0, #6
 800ea34:	d509      	bpl.n	800ea4a <xEventGroupWaitBits+0xc6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ea36:	0224      	lsls	r4, r4, #8
 800ea38:	0a24      	lsrs	r4, r4, #8
}
 800ea3a:	0020      	movs	r0, r4
 800ea3c:	bcc0      	pop	{r6, r7}
 800ea3e:	46ba      	mov	sl, r7
 800ea40:	46b1      	mov	r9, r6
 800ea42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			portYIELD_WITHIN_API();
 800ea44:	f001 fdf0 	bl	8010628 <vPortYield>
 800ea48:	e7f0      	b.n	800ea2c <xEventGroupWaitBits+0xa8>
			taskENTER_CRITICAL();
 800ea4a:	f001 fdf9 	bl	8010640 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 800ea4e:	6834      	ldr	r4, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 800ea50:	464b      	mov	r3, r9
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d10d      	bne.n	800ea72 <xEventGroupWaitBits+0xee>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ea56:	0023      	movs	r3, r4
 800ea58:	402b      	ands	r3, r5
BaseType_t xWaitConditionMet = pdFALSE;
 800ea5a:	1e5a      	subs	r2, r3, #1
 800ea5c:	4193      	sbcs	r3, r2
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d004      	beq.n	800ea6c <xEventGroupWaitBits+0xe8>
					if( xClearOnExit != pdFALSE )
 800ea62:	2f00      	cmp	r7, #0
 800ea64:	d002      	beq.n	800ea6c <xEventGroupWaitBits+0xe8>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ea66:	0023      	movs	r3, r4
 800ea68:	43ab      	bics	r3, r5
 800ea6a:	6033      	str	r3, [r6, #0]
			taskEXIT_CRITICAL();
 800ea6c:	f001 fdf4 	bl	8010658 <vPortExitCritical>
			xTimeoutOccurred = pdFALSE;
 800ea70:	e7e1      	b.n	800ea36 <xEventGroupWaitBits+0xb2>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800ea72:	0023      	movs	r3, r4
 800ea74:	402b      	ands	r3, r5
 800ea76:	1b5b      	subs	r3, r3, r5
BaseType_t xWaitConditionMet = pdFALSE;
 800ea78:	425a      	negs	r2, r3
 800ea7a:	4153      	adcs	r3, r2
 800ea7c:	e7ef      	b.n	800ea5e <xEventGroupWaitBits+0xda>

0800ea7e <xEventGroupSetBits>:
{
 800ea7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea80:	46d6      	mov	lr, sl
 800ea82:	464f      	mov	r7, r9
 800ea84:	4646      	mov	r6, r8
 800ea86:	b5c0      	push	{r6, r7, lr}
 800ea88:	1e04      	subs	r4, r0, #0
 800ea8a:	4688      	mov	r8, r1
	configASSERT( xEventGroup );
 800ea8c:	d005      	beq.n	800ea9a <xEventGroupSetBits+0x1c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ea8e:	0e0b      	lsrs	r3, r1, #24
 800ea90:	061e      	lsls	r6, r3, #24
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d003      	beq.n	800ea9e <xEventGroupSetBits+0x20>
 800ea96:	b672      	cpsid	i
 800ea98:	e7fe      	b.n	800ea98 <xEventGroupSetBits+0x1a>
	configASSERT( xEventGroup );
 800ea9a:	b672      	cpsid	i
 800ea9c:	e7fe      	b.n	800ea9c <xEventGroupSetBits+0x1e>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea9e:	0007      	movs	r7, r0
 800eaa0:	370c      	adds	r7, #12
	vTaskSuspendAll();
 800eaa2:	f000 fdf5 	bl	800f690 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 800eaa6:	6925      	ldr	r5, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 800eaa8:	4641      	mov	r1, r8
 800eaaa:	6823      	ldr	r3, [r4, #0]
 800eaac:	4319      	orrs	r1, r3
 800eaae:	6021      	str	r1, [r4, #0]
		while( pxListItem != pxListEnd )
 800eab0:	42af      	cmp	r7, r5
 800eab2:	d025      	beq.n	800eb00 <xEventGroupSetBits+0x82>
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800eab4:	2380      	movs	r3, #128	; 0x80
 800eab6:	04db      	lsls	r3, r3, #19
 800eab8:	469a      	mov	sl, r3
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800eaba:	2380      	movs	r3, #128	; 0x80
 800eabc:	045b      	lsls	r3, r3, #17
 800eabe:	4699      	mov	r9, r3
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800eac0:	2380      	movs	r3, #128	; 0x80
 800eac2:	049b      	lsls	r3, r3, #18
 800eac4:	4698      	mov	r8, r3
 800eac6:	e00b      	b.n	800eae0 <xEventGroupSetBits+0x62>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800eac8:	6821      	ldr	r1, [r4, #0]
 800eaca:	4019      	ands	r1, r3
 800eacc:	4299      	cmp	r1, r3
 800eace:	d105      	bne.n	800eadc <xEventGroupSetBits+0x5e>
 800ead0:	e011      	b.n	800eaf6 <xEventGroupSetBits+0x78>
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800ead2:	4641      	mov	r1, r8
 800ead4:	6823      	ldr	r3, [r4, #0]
 800ead6:	4319      	orrs	r1, r3
 800ead8:	f001 f8d4 	bl	800fc84 <xTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 800eadc:	42af      	cmp	r7, r5
 800eade:	d00f      	beq.n	800eb00 <xEventGroupSetBits+0x82>
			pxNext = listGET_NEXT( pxListItem );
 800eae0:	0028      	movs	r0, r5
 800eae2:	686d      	ldr	r5, [r5, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800eae4:	6802      	ldr	r2, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800eae6:	0213      	lsls	r3, r2, #8
 800eae8:	0a1b      	lsrs	r3, r3, #8
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800eaea:	4651      	mov	r1, sl
 800eaec:	420a      	tst	r2, r1
 800eaee:	d1eb      	bne.n	800eac8 <xEventGroupSetBits+0x4a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800eaf0:	6821      	ldr	r1, [r4, #0]
 800eaf2:	4219      	tst	r1, r3
 800eaf4:	d0f2      	beq.n	800eadc <xEventGroupSetBits+0x5e>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800eaf6:	4649      	mov	r1, r9
 800eaf8:	420a      	tst	r2, r1
 800eafa:	d0ea      	beq.n	800ead2 <xEventGroupSetBits+0x54>
					uxBitsToClear |= uxBitsWaitedFor;
 800eafc:	431e      	orrs	r6, r3
 800eafe:	e7e8      	b.n	800ead2 <xEventGroupSetBits+0x54>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800eb00:	6823      	ldr	r3, [r4, #0]
 800eb02:	43b3      	bics	r3, r6
 800eb04:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800eb06:	f000 fe6b 	bl	800f7e0 <xTaskResumeAll>
	return pxEventBits->uxEventBits;
 800eb0a:	6820      	ldr	r0, [r4, #0]
}
 800eb0c:	bce0      	pop	{r5, r6, r7}
 800eb0e:	46ba      	mov	sl, r7
 800eb10:	46b1      	mov	r9, r6
 800eb12:	46a8      	mov	r8, r5
 800eb14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb16 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb16:	0003      	movs	r3, r0
 800eb18:	3308      	adds	r3, #8
 800eb1a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	4252      	negs	r2, r2
 800eb20:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb22:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb24:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eb26:	2300      	movs	r3, #0
 800eb28:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eb2a:	4770      	bx	lr

0800eb2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eb30:	4770      	bx	lr

0800eb32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800eb32:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eb34:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eb36:	689a      	ldr	r2, [r3, #8]
 800eb38:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eb3a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eb3c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800eb3e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800eb40:	6803      	ldr	r3, [r0, #0]
 800eb42:	3301      	adds	r3, #1
 800eb44:	6003      	str	r3, [r0, #0]
}
 800eb46:	4770      	bx	lr

0800eb48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb48:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eb4a:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb4c:	0003      	movs	r3, r0
 800eb4e:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800eb50:	1c62      	adds	r2, r4, #1
 800eb52:	d00e      	beq.n	800eb72 <vListInsert+0x2a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb54:	001a      	movs	r2, r3
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	681d      	ldr	r5, [r3, #0]
 800eb5a:	42a5      	cmp	r5, r4
 800eb5c:	d9fa      	bls.n	800eb54 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eb5e:	6853      	ldr	r3, [r2, #4]
 800eb60:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eb62:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eb64:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800eb66:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800eb68:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800eb6a:	6803      	ldr	r3, [r0, #0]
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	6003      	str	r3, [r0, #0]
}
 800eb70:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800eb72:	6902      	ldr	r2, [r0, #16]
 800eb74:	e7f3      	b.n	800eb5e <vListInsert+0x16>

0800eb76 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800eb76:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eb78:	6841      	ldr	r1, [r0, #4]
 800eb7a:	6882      	ldr	r2, [r0, #8]
 800eb7c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eb7e:	6841      	ldr	r1, [r0, #4]
 800eb80:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eb82:	685a      	ldr	r2, [r3, #4]
 800eb84:	4282      	cmp	r2, r0
 800eb86:	d005      	beq.n	800eb94 <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800eb88:	2200      	movs	r2, #0
 800eb8a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	1e50      	subs	r0, r2, #1
 800eb90:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800eb92:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eb94:	6882      	ldr	r2, [r0, #8]
 800eb96:	605a      	str	r2, [r3, #4]
 800eb98:	e7f6      	b.n	800eb88 <uxListRemove+0x12>

0800eb9a <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eb9a:	b570      	push	{r4, r5, r6, lr}
 800eb9c:	0004      	movs	r4, r0
 800eb9e:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eba0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800eba2:	2a00      	cmp	r2, #0
 800eba4:	d10d      	bne.n	800ebc2 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800eba6:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eba8:	6823      	ldr	r3, [r4, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d003      	beq.n	800ebb6 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ebae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800ebb4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ebb6:	6860      	ldr	r0, [r4, #4]
 800ebb8:	f001 f936 	bl	800fe28 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	6063      	str	r3, [r4, #4]
 800ebc0:	e7f5      	b.n	800ebae <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ebc2:	2d00      	cmp	r5, #0
 800ebc4:	d10e      	bne.n	800ebe4 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ebc6:	6880      	ldr	r0, [r0, #8]
 800ebc8:	f005 fb22 	bl	8014210 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ebcc:	68a3      	ldr	r3, [r4, #8]
 800ebce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ebd0:	4694      	mov	ip, r2
 800ebd2:	4463      	add	r3, ip
 800ebd4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800ebd6:	0028      	movs	r0, r5
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ebd8:	6862      	ldr	r2, [r4, #4]
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d3e7      	bcc.n	800ebae <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ebde:	6823      	ldr	r3, [r4, #0]
 800ebe0:	60a3      	str	r3, [r4, #8]
 800ebe2:	e7e4      	b.n	800ebae <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebe4:	68c0      	ldr	r0, [r0, #12]
 800ebe6:	f005 fb13 	bl	8014210 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ebea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebec:	425a      	negs	r2, r3
 800ebee:	68e1      	ldr	r1, [r4, #12]
 800ebf0:	1acb      	subs	r3, r1, r3
 800ebf2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ebf4:	6821      	ldr	r1, [r4, #0]
 800ebf6:	428b      	cmp	r3, r1
 800ebf8:	d203      	bcs.n	800ec02 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ebfa:	6863      	ldr	r3, [r4, #4]
 800ebfc:	469c      	mov	ip, r3
 800ebfe:	4462      	add	r2, ip
 800ec00:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800ec02:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800ec04:	2d02      	cmp	r5, #2
 800ec06:	d1d2      	bne.n	800ebae <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d0cf      	beq.n	800ebae <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800ec0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec10:	3b01      	subs	r3, #1
 800ec12:	63a3      	str	r3, [r4, #56]	; 0x38
 800ec14:	e7cb      	b.n	800ebae <prvCopyDataToQueue+0x14>

0800ec16 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ec16:	b510      	push	{r4, lr}
 800ec18:	0003      	movs	r3, r0
 800ec1a:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ec1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec1e:	2a00      	cmp	r2, #0
 800ec20:	d00a      	beq.n	800ec38 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ec22:	68d9      	ldr	r1, [r3, #12]
 800ec24:	1889      	adds	r1, r1, r2
 800ec26:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ec28:	685c      	ldr	r4, [r3, #4]
 800ec2a:	42a1      	cmp	r1, r4
 800ec2c:	d301      	bcc.n	800ec32 <prvCopyDataFromQueue+0x1c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ec2e:	6819      	ldr	r1, [r3, #0]
 800ec30:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ec32:	68d9      	ldr	r1, [r3, #12]
 800ec34:	f005 faec 	bl	8014210 <memcpy>
	}
}
 800ec38:	bd10      	pop	{r4, pc}

0800ec3a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ec3a:	b570      	push	{r4, r5, r6, lr}
 800ec3c:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ec3e:	f001 fcff 	bl	8010640 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ec42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	dd13      	ble.n	800ec70 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec48:	0025      	movs	r5, r4
 800ec4a:	3524      	adds	r5, #36	; 0x24
 800ec4c:	e007      	b.n	800ec5e <prvUnlockQueue+0x24>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800ec4e:	f001 f897 	bl	800fd80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800ec52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec54:	3b01      	subs	r3, #1
 800ec56:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ec58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	dd08      	ble.n	800ec70 <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d005      	beq.n	800ec70 <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec64:	0028      	movs	r0, r5
 800ec66:	f000 ffcd 	bl	800fc04 <xTaskRemoveFromEventList>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d0f1      	beq.n	800ec52 <prvUnlockQueue+0x18>
 800ec6e:	e7ee      	b.n	800ec4e <prvUnlockQueue+0x14>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800ec70:	2301      	movs	r3, #1
 800ec72:	425b      	negs	r3, r3
 800ec74:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800ec76:	f001 fcef 	bl	8010658 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ec7a:	f001 fce1 	bl	8010640 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ec7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	dd13      	ble.n	800ecac <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec84:	0025      	movs	r5, r4
 800ec86:	3510      	adds	r5, #16
 800ec88:	e007      	b.n	800ec9a <prvUnlockQueue+0x60>
				{
					vTaskMissedYield();
 800ec8a:	f001 f879 	bl	800fd80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800ec8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ec90:	3b01      	subs	r3, #1
 800ec92:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ec94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	dd08      	ble.n	800ecac <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec9a:	6923      	ldr	r3, [r4, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d005      	beq.n	800ecac <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eca0:	0028      	movs	r0, r5
 800eca2:	f000 ffaf 	bl	800fc04 <xTaskRemoveFromEventList>
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d0f1      	beq.n	800ec8e <prvUnlockQueue+0x54>
 800ecaa:	e7ee      	b.n	800ec8a <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800ecac:	2301      	movs	r3, #1
 800ecae:	425b      	negs	r3, r3
 800ecb0:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ecb2:	f001 fcd1 	bl	8010658 <vPortExitCritical>
}
 800ecb6:	bd70      	pop	{r4, r5, r6, pc}

0800ecb8 <xQueueGenericReset>:
{
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	0004      	movs	r4, r0
 800ecbc:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d01a      	beq.n	800ecf8 <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800ecc2:	f001 fcbd 	bl	8010640 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ecc6:	6822      	ldr	r2, [r4, #0]
 800ecc8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ecca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eccc:	434b      	muls	r3, r1
 800ecce:	18d0      	adds	r0, r2, r3
 800ecd0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ecd6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ecd8:	1a5b      	subs	r3, r3, r1
 800ecda:	18d3      	adds	r3, r2, r3
 800ecdc:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800ecde:	2301      	movs	r3, #1
 800ece0:	425b      	negs	r3, r3
 800ece2:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800ece4:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800ece6:	2d00      	cmp	r5, #0
 800ece8:	d111      	bne.n	800ed0e <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecea:	6923      	ldr	r3, [r4, #16]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d105      	bne.n	800ecfc <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800ecf0:	f001 fcb2 	bl	8010658 <vPortExitCritical>
}
 800ecf4:	2001      	movs	r0, #1
 800ecf6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800ecf8:	b672      	cpsid	i
 800ecfa:	e7fe      	b.n	800ecfa <xQueueGenericReset+0x42>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ecfc:	0020      	movs	r0, r4
 800ecfe:	3010      	adds	r0, #16
 800ed00:	f000 ff80 	bl	800fc04 <xTaskRemoveFromEventList>
 800ed04:	2801      	cmp	r0, #1
 800ed06:	d1f3      	bne.n	800ecf0 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800ed08:	f001 fc8e 	bl	8010628 <vPortYield>
 800ed0c:	e7f0      	b.n	800ecf0 <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ed0e:	0020      	movs	r0, r4
 800ed10:	3010      	adds	r0, #16
 800ed12:	f7ff ff00 	bl	800eb16 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ed16:	0020      	movs	r0, r4
 800ed18:	3024      	adds	r0, #36	; 0x24
 800ed1a:	f7ff fefc 	bl	800eb16 <vListInitialise>
 800ed1e:	e7e7      	b.n	800ecf0 <xQueueGenericReset+0x38>

0800ed20 <xQueueGenericCreate>:
{
 800ed20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed22:	0005      	movs	r5, r0
 800ed24:	000e      	movs	r6, r1
 800ed26:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d101      	bne.n	800ed30 <xQueueGenericCreate+0x10>
 800ed2c:	b672      	cpsid	i
 800ed2e:	e7fe      	b.n	800ed2e <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ed30:	2900      	cmp	r1, #0
 800ed32:	d013      	beq.n	800ed5c <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed34:	0008      	movs	r0, r1
 800ed36:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ed38:	3055      	adds	r0, #85	; 0x55
 800ed3a:	f001 fd03 	bl	8010744 <pvPortMalloc>
 800ed3e:	0004      	movs	r4, r0
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800ed40:	3054      	adds	r0, #84	; 0x54
	if( pcAllocatedBuffer != NULL )
 800ed42:	2c00      	cmp	r4, #0
 800ed44:	d00f      	beq.n	800ed66 <xQueueGenericCreate+0x46>
 800ed46:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800ed48:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800ed4a:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ed4c:	2101      	movs	r1, #1
 800ed4e:	0020      	movs	r0, r4
 800ed50:	f7ff ffb2 	bl	800ecb8 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800ed54:	2350      	movs	r3, #80	; 0x50
 800ed56:	54e7      	strb	r7, [r4, r3]
}
 800ed58:	0020      	movs	r0, r4
 800ed5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ed5c:	2054      	movs	r0, #84	; 0x54
 800ed5e:	f001 fcf1 	bl	8010744 <pvPortMalloc>
 800ed62:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800ed64:	d1ef      	bne.n	800ed46 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800ed66:	b672      	cpsid	i
 800ed68:	e7fe      	b.n	800ed68 <xQueueGenericCreate+0x48>

0800ed6a <xQueueCreateCountingSemaphore>:
	{
 800ed6a:	b510      	push	{r4, lr}
 800ed6c:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d101      	bne.n	800ed76 <xQueueCreateCountingSemaphore+0xc>
 800ed72:	b672      	cpsid	i
 800ed74:	e7fe      	b.n	800ed74 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ed76:	4288      	cmp	r0, r1
 800ed78:	d201      	bcs.n	800ed7e <xQueueCreateCountingSemaphore+0x14>
 800ed7a:	b672      	cpsid	i
 800ed7c:	e7fe      	b.n	800ed7c <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ed7e:	2202      	movs	r2, #2
 800ed80:	2100      	movs	r1, #0
 800ed82:	f7ff ffcd 	bl	800ed20 <xQueueGenericCreate>
		if( xHandle != NULL )
 800ed86:	2800      	cmp	r0, #0
 800ed88:	d001      	beq.n	800ed8e <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ed8a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ed8c:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800ed8e:	b672      	cpsid	i
 800ed90:	e7fe      	b.n	800ed90 <xQueueCreateCountingSemaphore+0x26>

0800ed92 <xQueueGenericSend>:
{
 800ed92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed94:	46ce      	mov	lr, r9
 800ed96:	4647      	mov	r7, r8
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	0004      	movs	r4, r0
 800ed9e:	000e      	movs	r6, r1
 800eda0:	9201      	str	r2, [sp, #4]
 800eda2:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d008      	beq.n	800edba <xQueueGenericSend+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eda8:	2900      	cmp	r1, #0
 800edaa:	d008      	beq.n	800edbe <xQueueGenericSend+0x2c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800edac:	2d02      	cmp	r5, #2
 800edae:	d10b      	bne.n	800edc8 <xQueueGenericSend+0x36>
 800edb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d008      	beq.n	800edc8 <xQueueGenericSend+0x36>
 800edb6:	b672      	cpsid	i
 800edb8:	e7fe      	b.n	800edb8 <xQueueGenericSend+0x26>
	configASSERT( pxQueue );
 800edba:	b672      	cpsid	i
 800edbc:	e7fe      	b.n	800edbc <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800edbe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d0f3      	beq.n	800edac <xQueueGenericSend+0x1a>
 800edc4:	b672      	cpsid	i
 800edc6:	e7fe      	b.n	800edc6 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800edc8:	f000 ffe0 	bl	800fd8c <xTaskGetSchedulerState>
 800edcc:	2800      	cmp	r0, #0
 800edce:	d104      	bne.n	800edda <xQueueGenericSend+0x48>
 800edd0:	9b01      	ldr	r3, [sp, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d005      	beq.n	800ede2 <xQueueGenericSend+0x50>
 800edd6:	b672      	cpsid	i
 800edd8:	e7fe      	b.n	800edd8 <xQueueGenericSend+0x46>
 800edda:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800eddc:	2300      	movs	r3, #0
 800edde:	4698      	mov	r8, r3
 800ede0:	e033      	b.n	800ee4a <xQueueGenericSend+0xb8>
 800ede2:	2700      	movs	r7, #0
 800ede4:	e7fa      	b.n	800eddc <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ede6:	002a      	movs	r2, r5
 800ede8:	0031      	movs	r1, r6
 800edea:	0020      	movs	r0, r4
 800edec:	f7ff fed5 	bl	800eb9a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d109      	bne.n	800ee0a <xQueueGenericSend+0x78>
					else if( xYieldRequired != pdFALSE )
 800edf6:	2800      	cmp	r0, #0
 800edf8:	d110      	bne.n	800ee1c <xQueueGenericSend+0x8a>
				taskEXIT_CRITICAL();
 800edfa:	f001 fc2d 	bl	8010658 <vPortExitCritical>
				return pdPASS;
 800edfe:	2001      	movs	r0, #1
}
 800ee00:	b005      	add	sp, #20
 800ee02:	bcc0      	pop	{r6, r7}
 800ee04:	46b9      	mov	r9, r7
 800ee06:	46b0      	mov	r8, r6
 800ee08:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800ee0a:	0020      	movs	r0, r4
 800ee0c:	3024      	adds	r0, #36	; 0x24
 800ee0e:	f000 fef9 	bl	800fc04 <xTaskRemoveFromEventList>
 800ee12:	2801      	cmp	r0, #1
 800ee14:	d1f1      	bne.n	800edfa <xQueueGenericSend+0x68>
							queueYIELD_IF_USING_PREEMPTION();
 800ee16:	f001 fc07 	bl	8010628 <vPortYield>
 800ee1a:	e7ee      	b.n	800edfa <xQueueGenericSend+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800ee1c:	f001 fc04 	bl	8010628 <vPortYield>
 800ee20:	e7eb      	b.n	800edfa <xQueueGenericSend+0x68>
					taskEXIT_CRITICAL();
 800ee22:	f001 fc19 	bl	8010658 <vPortExitCritical>
					return errQUEUE_FULL;
 800ee26:	2000      	movs	r0, #0
 800ee28:	e7ea      	b.n	800ee00 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 800ee2a:	a802      	add	r0, sp, #8
 800ee2c:	f000 ff66 	bl	800fcfc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee30:	e018      	b.n	800ee64 <xQueueGenericSend+0xd2>
		prvLockQueue( pxQueue );
 800ee32:	4643      	mov	r3, r8
 800ee34:	6463      	str	r3, [r4, #68]	; 0x44
 800ee36:	e01e      	b.n	800ee76 <xQueueGenericSend+0xe4>
 800ee38:	4643      	mov	r3, r8
 800ee3a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ee3c:	e01e      	b.n	800ee7c <xQueueGenericSend+0xea>
				prvUnlockQueue( pxQueue );
 800ee3e:	0020      	movs	r0, r4
 800ee40:	f7ff fefb 	bl	800ec3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee44:	f000 fccc 	bl	800f7e0 <xTaskResumeAll>
 800ee48:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800ee4a:	f001 fbf9 	bl	8010640 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d3c7      	bcc.n	800ede6 <xQueueGenericSend+0x54>
 800ee56:	2d02      	cmp	r5, #2
 800ee58:	d0c5      	beq.n	800ede6 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee5a:	9b01      	ldr	r3, [sp, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d0e0      	beq.n	800ee22 <xQueueGenericSend+0x90>
				else if( xEntryTimeSet == pdFALSE )
 800ee60:	2f00      	cmp	r7, #0
 800ee62:	d0e2      	beq.n	800ee2a <xQueueGenericSend+0x98>
		taskEXIT_CRITICAL();
 800ee64:	f001 fbf8 	bl	8010658 <vPortExitCritical>
		vTaskSuspendAll();
 800ee68:	f000 fc12 	bl	800f690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee6c:	f001 fbe8 	bl	8010640 <vPortEnterCritical>
 800ee70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee72:	3301      	adds	r3, #1
 800ee74:	d0dd      	beq.n	800ee32 <xQueueGenericSend+0xa0>
 800ee76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee78:	3301      	adds	r3, #1
 800ee7a:	d0dd      	beq.n	800ee38 <xQueueGenericSend+0xa6>
 800ee7c:	f001 fbec 	bl	8010658 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee80:	a901      	add	r1, sp, #4
 800ee82:	a802      	add	r0, sp, #8
 800ee84:	f000 ff4a 	bl	800fd1c <xTaskCheckForTimeOut>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d117      	bne.n	800eebc <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee8c:	f001 fbd8 	bl	8010640 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee92:	4699      	mov	r9, r3
 800ee94:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ee96:	f001 fbdf 	bl	8010658 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ee9a:	45b9      	cmp	r9, r7
 800ee9c:	d1cf      	bne.n	800ee3e <xQueueGenericSend+0xac>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee9e:	0020      	movs	r0, r4
 800eea0:	3010      	adds	r0, #16
 800eea2:	9901      	ldr	r1, [sp, #4]
 800eea4:	f000 fe3e 	bl	800fb24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eea8:	0020      	movs	r0, r4
 800eeaa:	f7ff fec6 	bl	800ec3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eeae:	f000 fc97 	bl	800f7e0 <xTaskResumeAll>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d1c8      	bne.n	800ee48 <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
 800eeb6:	f001 fbb7 	bl	8010628 <vPortYield>
 800eeba:	e7c5      	b.n	800ee48 <xQueueGenericSend+0xb6>
			prvUnlockQueue( pxQueue );
 800eebc:	0020      	movs	r0, r4
 800eebe:	f7ff febc 	bl	800ec3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eec2:	f000 fc8d 	bl	800f7e0 <xTaskResumeAll>
			return errQUEUE_FULL;
 800eec6:	2000      	movs	r0, #0
 800eec8:	e79a      	b.n	800ee00 <xQueueGenericSend+0x6e>

0800eeca <xQueueGenericSendFromISR>:
{
 800eeca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eecc:	b083      	sub	sp, #12
 800eece:	0004      	movs	r4, r0
 800eed0:	000d      	movs	r5, r1
 800eed2:	0017      	movs	r7, r2
 800eed4:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 800eed6:	2800      	cmp	r0, #0
 800eed8:	d008      	beq.n	800eeec <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eeda:	2900      	cmp	r1, #0
 800eedc:	d008      	beq.n	800eef0 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eede:	2e02      	cmp	r6, #2
 800eee0:	d12d      	bne.n	800ef3e <xQueueGenericSendFromISR+0x74>
 800eee2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d019      	beq.n	800ef1c <xQueueGenericSendFromISR+0x52>
 800eee8:	b672      	cpsid	i
 800eeea:	e7fe      	b.n	800eeea <xQueueGenericSendFromISR+0x20>
	configASSERT( pxQueue );
 800eeec:	b672      	cpsid	i
 800eeee:	e7fe      	b.n	800eeee <xQueueGenericSendFromISR+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eef0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d0f3      	beq.n	800eede <xQueueGenericSendFromISR+0x14>
 800eef6:	b672      	cpsid	i
 800eef8:	e7fe      	b.n	800eef8 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800eefa:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eefc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d025      	beq.n	800ef4e <xQueueGenericSendFromISR+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef02:	0020      	movs	r0, r4
 800ef04:	3024      	adds	r0, #36	; 0x24
 800ef06:	f000 fe7d 	bl	800fc04 <xTaskRemoveFromEventList>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	d01f      	beq.n	800ef4e <xQueueGenericSendFromISR+0x84>
							if( pxHigherPriorityTaskWoken != NULL )
 800ef0e:	2f00      	cmp	r7, #0
 800ef10:	d002      	beq.n	800ef18 <xQueueGenericSendFromISR+0x4e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ef12:	2301      	movs	r3, #1
 800ef14:	603b      	str	r3, [r7, #0]
 800ef16:	e01a      	b.n	800ef4e <xQueueGenericSendFromISR+0x84>
			xReturn = pdPASS;
 800ef18:	2501      	movs	r5, #1
 800ef1a:	e018      	b.n	800ef4e <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef1c:	f001 fbac 	bl	8010678 <ulSetInterruptMaskFromISR>
 800ef20:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef24:	0032      	movs	r2, r6
 800ef26:	0029      	movs	r1, r5
 800ef28:	0020      	movs	r0, r4
 800ef2a:	f7ff fe36 	bl	800eb9a <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ef2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef30:	3301      	adds	r3, #1
 800ef32:	d0e2      	beq.n	800eefa <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800ef34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef36:	3301      	adds	r3, #1
 800ef38:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800ef3a:	2501      	movs	r5, #1
 800ef3c:	e007      	b.n	800ef4e <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef3e:	f001 fb9b 	bl	8010678 <ulSetInterruptMaskFromISR>
 800ef42:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d3eb      	bcc.n	800ef24 <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800ef4c:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ef4e:	9801      	ldr	r0, [sp, #4]
 800ef50:	f001 fb97 	bl	8010682 <vClearInterruptMaskFromISR>
}
 800ef54:	0028      	movs	r0, r5
 800ef56:	b003      	add	sp, #12
 800ef58:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef5a <xQueueGiveFromISR>:
{
 800ef5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef5c:	0004      	movs	r4, r0
 800ef5e:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800ef60:	2800      	cmp	r0, #0
 800ef62:	d004      	beq.n	800ef6e <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef64:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d003      	beq.n	800ef72 <xQueueGiveFromISR+0x18>
 800ef6a:	b672      	cpsid	i
 800ef6c:	e7fe      	b.n	800ef6c <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800ef6e:	b672      	cpsid	i
 800ef70:	e7fe      	b.n	800ef70 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ef72:	6803      	ldr	r3, [r0, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d016      	beq.n	800efa6 <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef78:	f001 fb7e 	bl	8010678 <ulSetInterruptMaskFromISR>
 800ef7c:	0007      	movs	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ef7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800ef80:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ef82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d209      	bcs.n	800ef9c <xQueueGiveFromISR+0x42>
			++( pxQueue->uxMessagesWaiting );
 800ef88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ef8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef90:	3301      	adds	r3, #1
 800ef92:	d00d      	beq.n	800efb0 <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800ef94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef96:	3301      	adds	r3, #1
 800ef98:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800ef9a:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ef9c:	0038      	movs	r0, r7
 800ef9e:	f001 fb70 	bl	8010682 <vClearInterruptMaskFromISR>
}
 800efa2:	0028      	movs	r0, r5
 800efa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800efa6:	6843      	ldr	r3, [r0, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d0e5      	beq.n	800ef78 <xQueueGiveFromISR+0x1e>
 800efac:	b672      	cpsid	i
 800efae:	e7fe      	b.n	800efae <xQueueGiveFromISR+0x54>
			xReturn = pdPASS;
 800efb0:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d0f1      	beq.n	800ef9c <xQueueGiveFromISR+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efb8:	0020      	movs	r0, r4
 800efba:	3024      	adds	r0, #36	; 0x24
 800efbc:	f000 fe22 	bl	800fc04 <xTaskRemoveFromEventList>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d0eb      	beq.n	800ef9c <xQueueGiveFromISR+0x42>
							if( pxHigherPriorityTaskWoken != NULL )
 800efc4:	2e00      	cmp	r6, #0
 800efc6:	d002      	beq.n	800efce <xQueueGiveFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800efc8:	2301      	movs	r3, #1
 800efca:	6033      	str	r3, [r6, #0]
 800efcc:	e7e6      	b.n	800ef9c <xQueueGiveFromISR+0x42>
			xReturn = pdPASS;
 800efce:	2501      	movs	r5, #1
 800efd0:	e7e4      	b.n	800ef9c <xQueueGiveFromISR+0x42>

0800efd2 <xQueueGenericReceive>:
{
 800efd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efd4:	46c6      	mov	lr, r8
 800efd6:	b500      	push	{lr}
 800efd8:	b084      	sub	sp, #16
 800efda:	0004      	movs	r4, r0
 800efdc:	000d      	movs	r5, r1
 800efde:	9201      	str	r2, [sp, #4]
 800efe0:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d00a      	beq.n	800effc <xQueueGenericReceive+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800efe6:	2900      	cmp	r1, #0
 800efe8:	d00a      	beq.n	800f000 <xQueueGenericReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800efea:	f000 fecf 	bl	800fd8c <xTaskGetSchedulerState>
 800efee:	2800      	cmp	r0, #0
 800eff0:	d10b      	bne.n	800f00a <xQueueGenericReceive+0x38>
 800eff2:	9b01      	ldr	r3, [sp, #4]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00b      	beq.n	800f010 <xQueueGenericReceive+0x3e>
 800eff8:	b672      	cpsid	i
 800effa:	e7fe      	b.n	800effa <xQueueGenericReceive+0x28>
	configASSERT( pxQueue );
 800effc:	b672      	cpsid	i
 800effe:	e7fe      	b.n	800effe <xQueueGenericReceive+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f000:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f002:	2b00      	cmp	r3, #0
 800f004:	d0f1      	beq.n	800efea <xQueueGenericReceive+0x18>
 800f006:	b672      	cpsid	i
 800f008:	e7fe      	b.n	800f008 <xQueueGenericReceive+0x36>
 800f00a:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800f00c:	2600      	movs	r6, #0
 800f00e:	e04d      	b.n	800f0ac <xQueueGenericReceive+0xda>
 800f010:	2700      	movs	r7, #0
 800f012:	e7fb      	b.n	800f00c <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f014:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f016:	0029      	movs	r1, r5
 800f018:	0020      	movs	r0, r4
 800f01a:	f7ff fdfc 	bl	800ec16 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f01e:	4643      	mov	r3, r8
 800f020:	2b00      	cmp	r3, #0
 800f022:	d11c      	bne.n	800f05e <xQueueGenericReceive+0x8c>
					--( pxQueue->uxMessagesWaiting );
 800f024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f026:	3b01      	subs	r3, #1
 800f028:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d009      	beq.n	800f044 <xQueueGenericReceive+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f030:	6923      	ldr	r3, [r4, #16]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d10a      	bne.n	800f04c <xQueueGenericReceive+0x7a>
				taskEXIT_CRITICAL();
 800f036:	f001 fb0f 	bl	8010658 <vPortExitCritical>
				return pdPASS;
 800f03a:	2001      	movs	r0, #1
}
 800f03c:	b004      	add	sp, #16
 800f03e:	bc80      	pop	{r7}
 800f040:	46b8      	mov	r8, r7
 800f042:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f044:	f001 f806 	bl	8010054 <pvTaskIncrementMutexHeldCount>
 800f048:	6060      	str	r0, [r4, #4]
 800f04a:	e7f1      	b.n	800f030 <xQueueGenericReceive+0x5e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f04c:	0020      	movs	r0, r4
 800f04e:	3010      	adds	r0, #16
 800f050:	f000 fdd8 	bl	800fc04 <xTaskRemoveFromEventList>
 800f054:	2801      	cmp	r0, #1
 800f056:	d1ee      	bne.n	800f036 <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800f058:	f001 fae6 	bl	8010628 <vPortYield>
 800f05c:	e7eb      	b.n	800f036 <xQueueGenericReceive+0x64>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f05e:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f062:	2b00      	cmp	r3, #0
 800f064:	d0e7      	beq.n	800f036 <xQueueGenericReceive+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f066:	0020      	movs	r0, r4
 800f068:	3024      	adds	r0, #36	; 0x24
 800f06a:	f000 fdcb 	bl	800fc04 <xTaskRemoveFromEventList>
 800f06e:	2800      	cmp	r0, #0
 800f070:	d0e1      	beq.n	800f036 <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800f072:	f001 fad9 	bl	8010628 <vPortYield>
 800f076:	e7de      	b.n	800f036 <xQueueGenericReceive+0x64>
					taskEXIT_CRITICAL();
 800f078:	f001 faee 	bl	8010658 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f07c:	2000      	movs	r0, #0
 800f07e:	e7dd      	b.n	800f03c <xQueueGenericReceive+0x6a>
					vTaskSetTimeOutState( &xTimeOut );
 800f080:	a802      	add	r0, sp, #8
 800f082:	f000 fe3b 	bl	800fcfc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f086:	e01b      	b.n	800f0c0 <xQueueGenericReceive+0xee>
		prvLockQueue( pxQueue );
 800f088:	6466      	str	r6, [r4, #68]	; 0x44
 800f08a:	e022      	b.n	800f0d2 <xQueueGenericReceive+0x100>
 800f08c:	64a6      	str	r6, [r4, #72]	; 0x48
 800f08e:	e023      	b.n	800f0d8 <xQueueGenericReceive+0x106>
						taskENTER_CRITICAL();
 800f090:	f001 fad6 	bl	8010640 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f094:	6860      	ldr	r0, [r4, #4]
 800f096:	f000 fe89 	bl	800fdac <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f09a:	f001 fadd 	bl	8010658 <vPortExitCritical>
 800f09e:	e02d      	b.n	800f0fc <xQueueGenericReceive+0x12a>
				prvUnlockQueue( pxQueue );
 800f0a0:	0020      	movs	r0, r4
 800f0a2:	f7ff fdca 	bl	800ec3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0a6:	f000 fb9b 	bl	800f7e0 <xTaskResumeAll>
 800f0aa:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800f0ac:	f001 fac8 	bl	8010640 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1ae      	bne.n	800f014 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0b6:	9b01      	ldr	r3, [sp, #4]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d0dd      	beq.n	800f078 <xQueueGenericReceive+0xa6>
				else if( xEntryTimeSet == pdFALSE )
 800f0bc:	2f00      	cmp	r7, #0
 800f0be:	d0df      	beq.n	800f080 <xQueueGenericReceive+0xae>
		taskEXIT_CRITICAL();
 800f0c0:	f001 faca 	bl	8010658 <vPortExitCritical>
		vTaskSuspendAll();
 800f0c4:	f000 fae4 	bl	800f690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0c8:	f001 faba 	bl	8010640 <vPortEnterCritical>
 800f0cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	d0da      	beq.n	800f088 <xQueueGenericReceive+0xb6>
 800f0d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	d0d9      	beq.n	800f08c <xQueueGenericReceive+0xba>
 800f0d8:	f001 fabe 	bl	8010658 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0dc:	a901      	add	r1, sp, #4
 800f0de:	a802      	add	r0, sp, #8
 800f0e0:	f000 fe1c 	bl	800fd1c <xTaskCheckForTimeOut>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	d118      	bne.n	800f11a <xQueueGenericReceive+0x148>
	taskENTER_CRITICAL();
 800f0e8:	f001 faaa 	bl	8010640 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f0ec:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800f0ee:	f001 fab3 	bl	8010658 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0f2:	2f00      	cmp	r7, #0
 800f0f4:	d1d4      	bne.n	800f0a0 <xQueueGenericReceive+0xce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d0c9      	beq.n	800f090 <xQueueGenericReceive+0xbe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f0fc:	0020      	movs	r0, r4
 800f0fe:	3024      	adds	r0, #36	; 0x24
 800f100:	9901      	ldr	r1, [sp, #4]
 800f102:	f000 fd0f 	bl	800fb24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f106:	0020      	movs	r0, r4
 800f108:	f7ff fd97 	bl	800ec3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f10c:	f000 fb68 	bl	800f7e0 <xTaskResumeAll>
 800f110:	2800      	cmp	r0, #0
 800f112:	d1ca      	bne.n	800f0aa <xQueueGenericReceive+0xd8>
					portYIELD_WITHIN_API();
 800f114:	f001 fa88 	bl	8010628 <vPortYield>
 800f118:	e7c7      	b.n	800f0aa <xQueueGenericReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800f11a:	0020      	movs	r0, r4
 800f11c:	f7ff fd8d 	bl	800ec3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f120:	f000 fb5e 	bl	800f7e0 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f124:	2000      	movs	r0, #0
 800f126:	e789      	b.n	800f03c <xQueueGenericReceive+0x6a>

0800f128 <xQueueReceiveFromISR>:
{
 800f128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f12a:	46c6      	mov	lr, r8
 800f12c:	b500      	push	{lr}
 800f12e:	0004      	movs	r4, r0
 800f130:	000f      	movs	r7, r1
 800f132:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800f134:	2800      	cmp	r0, #0
 800f136:	d00f      	beq.n	800f158 <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f138:	2900      	cmp	r1, #0
 800f13a:	d00f      	beq.n	800f15c <xQueueReceiveFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f13c:	f001 fa9c 	bl	8010678 <ulSetInterruptMaskFromISR>
 800f140:	4680      	mov	r8, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f142:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800f144:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f146:	2b00      	cmp	r3, #0
 800f148:	d10d      	bne.n	800f166 <xQueueReceiveFromISR+0x3e>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f14a:	4640      	mov	r0, r8
 800f14c:	f001 fa99 	bl	8010682 <vClearInterruptMaskFromISR>
}
 800f150:	0028      	movs	r0, r5
 800f152:	bc80      	pop	{r7}
 800f154:	46b8      	mov	r8, r7
 800f156:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800f158:	b672      	cpsid	i
 800f15a:	e7fe      	b.n	800f15a <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f15c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d0ec      	beq.n	800f13c <xQueueReceiveFromISR+0x14>
 800f162:	b672      	cpsid	i
 800f164:	e7fe      	b.n	800f164 <xQueueReceiveFromISR+0x3c>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f166:	0039      	movs	r1, r7
 800f168:	0020      	movs	r0, r4
 800f16a:	f7ff fd54 	bl	800ec16 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800f16e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f170:	3b01      	subs	r3, #1
 800f172:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800f174:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f176:	3301      	adds	r3, #1
 800f178:	d004      	beq.n	800f184 <xQueueReceiveFromISR+0x5c>
				++( pxQueue->xRxLock );
 800f17a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f17c:	3301      	adds	r3, #1
 800f17e:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f180:	2501      	movs	r5, #1
 800f182:	e7e2      	b.n	800f14a <xQueueReceiveFromISR+0x22>
 800f184:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f186:	6923      	ldr	r3, [r4, #16]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d0de      	beq.n	800f14a <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f18c:	0020      	movs	r0, r4
 800f18e:	3010      	adds	r0, #16
 800f190:	f000 fd38 	bl	800fc04 <xTaskRemoveFromEventList>
 800f194:	2800      	cmp	r0, #0
 800f196:	d0d8      	beq.n	800f14a <xQueueReceiveFromISR+0x22>
						if( pxHigherPriorityTaskWoken != NULL )
 800f198:	2e00      	cmp	r6, #0
 800f19a:	d002      	beq.n	800f1a2 <xQueueReceiveFromISR+0x7a>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f19c:	2301      	movs	r3, #1
 800f19e:	6033      	str	r3, [r6, #0]
 800f1a0:	e7d3      	b.n	800f14a <xQueueReceiveFromISR+0x22>
			xReturn = pdPASS;
 800f1a2:	2501      	movs	r5, #1
 800f1a4:	e7d1      	b.n	800f14a <xQueueReceiveFromISR+0x22>
	...

0800f1a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f1a8:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1aa:	4a08      	ldr	r2, [pc, #32]	; (800f1cc <vQueueAddToRegistry+0x24>)
 800f1ac:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f1ae:	6814      	ldr	r4, [r2, #0]
 800f1b0:	2c00      	cmp	r4, #0
 800f1b2:	d004      	beq.n	800f1be <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	3208      	adds	r2, #8
 800f1b8:	2b08      	cmp	r3, #8
 800f1ba:	d1f8      	bne.n	800f1ae <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f1bc:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f1be:	4a03      	ldr	r2, [pc, #12]	; (800f1cc <vQueueAddToRegistry+0x24>)
 800f1c0:	00db      	lsls	r3, r3, #3
 800f1c2:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f1c4:	18d3      	adds	r3, r2, r3
 800f1c6:	6058      	str	r0, [r3, #4]
				break;
 800f1c8:	e7f8      	b.n	800f1bc <vQueueAddToRegistry+0x14>
 800f1ca:	46c0      	nop			; (mov r8, r8)
 800f1cc:	20006f58 	.word	0x20006f58

0800f1d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	0004      	movs	r4, r0
 800f1d4:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f1d6:	f001 fa33 	bl	8010640 <vPortEnterCritical>
 800f1da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f1dc:	3301      	adds	r3, #1
 800f1de:	d00b      	beq.n	800f1f8 <vQueueWaitForMessageRestricted+0x28>
 800f1e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	d00b      	beq.n	800f1fe <vQueueWaitForMessageRestricted+0x2e>
 800f1e6:	f001 fa37 	bl	8010658 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f1ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d009      	beq.n	800f204 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f1f0:	0020      	movs	r0, r4
 800f1f2:	f7ff fd22 	bl	800ec3a <prvUnlockQueue>
	}
 800f1f6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	6463      	str	r3, [r4, #68]	; 0x44
 800f1fc:	e7f0      	b.n	800f1e0 <vQueueWaitForMessageRestricted+0x10>
 800f1fe:	2300      	movs	r3, #0
 800f200:	64a3      	str	r3, [r4, #72]	; 0x48
 800f202:	e7f0      	b.n	800f1e6 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f204:	0020      	movs	r0, r4
 800f206:	3024      	adds	r0, #36	; 0x24
 800f208:	0029      	movs	r1, r5
 800f20a:	f000 fce1 	bl	800fbd0 <vTaskPlaceOnEventListRestricted>
 800f20e:	e7ef      	b.n	800f1f0 <vQueueWaitForMessageRestricted+0x20>

0800f210 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f210:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f212:	46de      	mov	lr, fp
 800f214:	4657      	mov	r7, sl
 800f216:	464e      	mov	r6, r9
 800f218:	4645      	mov	r5, r8
 800f21a:	b5e0      	push	{r5, r6, r7, lr}
 800f21c:	0004      	movs	r4, r0
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f21e:	680b      	ldr	r3, [r1, #0]
 800f220:	469b      	mov	fp, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d045      	beq.n	800f2b2 <prvListTaskWithinSingleList+0xa2>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f226:	684b      	ldr	r3, [r1, #4]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	604b      	str	r3, [r1, #4]
 800f22c:	2008      	movs	r0, #8
 800f22e:	4684      	mov	ip, r0
 800f230:	448c      	add	ip, r1
 800f232:	4563      	cmp	r3, ip
 800f234:	d007      	beq.n	800f246 <prvListTaskWithinSingleList+0x36>
 800f236:	684b      	ldr	r3, [r1, #4]
 800f238:	68db      	ldr	r3, [r3, #12]
 800f23a:	4698      	mov	r8, r3
	UBaseType_t uxTask = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	469b      	mov	fp, r3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f240:	3302      	adds	r3, #2
 800f242:	4699      	mov	r9, r3
 800f244:	e01c      	b.n	800f280 <prvListTaskWithinSingleList+0x70>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f246:	68cb      	ldr	r3, [r1, #12]
 800f248:	604b      	str	r3, [r1, #4]
 800f24a:	e7f4      	b.n	800f236 <prvListTaskWithinSingleList+0x26>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	604b      	str	r3, [r1, #4]
 800f250:	e01b      	b.n	800f28a <prvListTaskWithinSingleList+0x7a>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f252:	4648      	mov	r0, r9
 800f254:	7320      	strb	r0, [r4, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f256:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800f258:	6175      	str	r5, [r6, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f25a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800f25c:	61b5      	str	r5, [r6, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f25e:	6b1f      	ldr	r7, [r3, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f260:	783d      	ldrb	r5, [r7, #0]
 800f262:	2da5      	cmp	r5, #165	; 0xa5
 800f264:	d123      	bne.n	800f2ae <prvListTaskWithinSingleList+0x9e>
	uint32_t ulCount = 0U;
 800f266:	2500      	movs	r5, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800f268:	3501      	adds	r5, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f26a:	5d78      	ldrb	r0, [r7, r5]
 800f26c:	28a5      	cmp	r0, #165	; 0xa5
 800f26e:	d0fb      	beq.n	800f268 <prvListTaskWithinSingleList+0x58>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f270:	08ad      	lsrs	r5, r5, #2

		return ( uint16_t ) ulCount;
 800f272:	83b5      	strh	r5, [r6, #28]
				uxTask++;
 800f274:	2001      	movs	r0, #1
 800f276:	4682      	mov	sl, r0
 800f278:	44d3      	add	fp, sl
			} while( pxNextTCB != pxFirstTCB );
 800f27a:	3420      	adds	r4, #32
 800f27c:	4598      	cmp	r8, r3
 800f27e:	d018      	beq.n	800f2b2 <prvListTaskWithinSingleList+0xa2>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f280:	684b      	ldr	r3, [r1, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	604b      	str	r3, [r1, #4]
 800f286:	459c      	cmp	ip, r3
 800f288:	d0e0      	beq.n	800f24c <prvListTaskWithinSingleList+0x3c>
 800f28a:	684b      	ldr	r3, [r1, #4]
 800f28c:	68db      	ldr	r3, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800f28e:	0026      	movs	r6, r4
 800f290:	6023      	str	r3, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800f292:	001d      	movs	r5, r3
 800f294:	3534      	adds	r5, #52	; 0x34
 800f296:	6065      	str	r5, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800f298:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800f29a:	60a5      	str	r5, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800f29c:	7322      	strb	r2, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800f29e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800f2a0:	6125      	str	r5, [r4, #16]
					if( eState == eSuspended )
 800f2a2:	2a03      	cmp	r2, #3
 800f2a4:	d1d7      	bne.n	800f256 <prvListTaskWithinSingleList+0x46>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800f2a6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800f2a8:	2d00      	cmp	r5, #0
 800f2aa:	d1d2      	bne.n	800f252 <prvListTaskWithinSingleList+0x42>
 800f2ac:	e7d3      	b.n	800f256 <prvListTaskWithinSingleList+0x46>
	uint32_t ulCount = 0U;
 800f2ae:	2500      	movs	r5, #0
 800f2b0:	e7de      	b.n	800f270 <prvListTaskWithinSingleList+0x60>
	}
 800f2b2:	4658      	mov	r0, fp
 800f2b4:	bcf0      	pop	{r4, r5, r6, r7}
 800f2b6:	46bb      	mov	fp, r7
 800f2b8:	46b2      	mov	sl, r6
 800f2ba:	46a9      	mov	r9, r5
 800f2bc:	46a0      	mov	r8, r4
 800f2be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2c0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2c0:	4b08      	ldr	r3, [pc, #32]	; (800f2e4 <prvResetNextTaskUnblockTime+0x24>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d104      	bne.n	800f2d4 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f2ca:	4b07      	ldr	r3, [pc, #28]	; (800f2e8 <prvResetNextTaskUnblockTime+0x28>)
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	4252      	negs	r2, r2
 800f2d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800f2d2:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f2d4:	4b03      	ldr	r3, [pc, #12]	; (800f2e4 <prvResetNextTaskUnblockTime+0x24>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	4b02      	ldr	r3, [pc, #8]	; (800f2e8 <prvResetNextTaskUnblockTime+0x28>)
 800f2e0:	601a      	str	r2, [r3, #0]
}
 800f2e2:	e7f6      	b.n	800f2d2 <prvResetNextTaskUnblockTime+0x12>
 800f2e4:	20001e44 	.word	0x20001e44
 800f2e8:	200000a0 	.word	0x200000a0

0800f2ec <prvAddCurrentTaskToDelayedList>:
{
 800f2ec:	b510      	push	{r4, lr}
 800f2ee:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f2f0:	4b0e      	ldr	r3, [pc, #56]	; (800f32c <prvAddCurrentTaskToDelayedList+0x40>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f2f6:	4b0e      	ldr	r3, [pc, #56]	; (800f330 <prvAddCurrentTaskToDelayedList+0x44>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	4283      	cmp	r3, r0
 800f2fc:	d907      	bls.n	800f30e <prvAddCurrentTaskToDelayedList+0x22>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f2fe:	4b0d      	ldr	r3, [pc, #52]	; (800f334 <prvAddCurrentTaskToDelayedList+0x48>)
 800f300:	6818      	ldr	r0, [r3, #0]
 800f302:	4b0a      	ldr	r3, [pc, #40]	; (800f32c <prvAddCurrentTaskToDelayedList+0x40>)
 800f304:	6819      	ldr	r1, [r3, #0]
 800f306:	3104      	adds	r1, #4
 800f308:	f7ff fc1e 	bl	800eb48 <vListInsert>
}
 800f30c:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f30e:	4b0a      	ldr	r3, [pc, #40]	; (800f338 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f310:	6818      	ldr	r0, [r3, #0]
 800f312:	4b06      	ldr	r3, [pc, #24]	; (800f32c <prvAddCurrentTaskToDelayedList+0x40>)
 800f314:	6819      	ldr	r1, [r3, #0]
 800f316:	3104      	adds	r1, #4
 800f318:	f7ff fc16 	bl	800eb48 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f31c:	4b07      	ldr	r3, [pc, #28]	; (800f33c <prvAddCurrentTaskToDelayedList+0x50>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	42a3      	cmp	r3, r4
 800f322:	d9f3      	bls.n	800f30c <prvAddCurrentTaskToDelayedList+0x20>
			xNextTaskUnblockTime = xTimeToWake;
 800f324:	4b05      	ldr	r3, [pc, #20]	; (800f33c <prvAddCurrentTaskToDelayedList+0x50>)
 800f326:	601c      	str	r4, [r3, #0]
}
 800f328:	e7f0      	b.n	800f30c <prvAddCurrentTaskToDelayedList+0x20>
 800f32a:	46c0      	nop			; (mov r8, r8)
 800f32c:	20001e40 	.word	0x20001e40
 800f330:	20001f60 	.word	0x20001f60
 800f334:	20001e48 	.word	0x20001e48
 800f338:	20001e44 	.word	0x20001e44
 800f33c:	200000a0 	.word	0x200000a0

0800f340 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f340:	b510      	push	{r4, lr}
 800f342:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f344:	f005 f99d 	bl	8014682 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f348:	0020      	movs	r0, r4
 800f34a:	f7f0 fee5 	bl	8000118 <strlen>
 800f34e:	280b      	cmp	r0, #11
 800f350:	dc08      	bgt.n	800f364 <prvWriteNameToBuffer+0x24>
 800f352:	1823      	adds	r3, r4, r0
 800f354:	0021      	movs	r1, r4
 800f356:	310c      	adds	r1, #12
		{
			pcBuffer[ x ] = ' ';
 800f358:	2220      	movs	r2, #32
 800f35a:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f35c:	3301      	adds	r3, #1
 800f35e:	428b      	cmp	r3, r1
 800f360:	d1fb      	bne.n	800f35a <prvWriteNameToBuffer+0x1a>
 800f362:	200c      	movs	r0, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f364:	1820      	adds	r0, r4, r0
 800f366:	2300      	movs	r3, #0
 800f368:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f36a:	bd10      	pop	{r4, pc}

0800f36c <xTaskGenericCreate>:
{
 800f36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f36e:	46de      	mov	lr, fp
 800f370:	4657      	mov	r7, sl
 800f372:	464e      	mov	r6, r9
 800f374:	4645      	mov	r5, r8
 800f376:	b5e0      	push	{r5, r6, r7, lr}
 800f378:	b083      	sub	sp, #12
 800f37a:	9001      	str	r0, [sp, #4]
 800f37c:	4688      	mov	r8, r1
 800f37e:	0017      	movs	r7, r2
 800f380:	469a      	mov	sl, r3
 800f382:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f384:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
 800f386:	2800      	cmp	r0, #0
 800f388:	d003      	beq.n	800f392 <xTaskGenericCreate+0x26>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800f38a:	2e06      	cmp	r6, #6
 800f38c:	d903      	bls.n	800f396 <xTaskGenericCreate+0x2a>
 800f38e:	b672      	cpsid	i
 800f390:	e7fe      	b.n	800f390 <xTaskGenericCreate+0x24>
	configASSERT( pxTaskCode );
 800f392:	b672      	cpsid	i
 800f394:	e7fe      	b.n	800f394 <xTaskGenericCreate+0x28>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f396:	2d00      	cmp	r5, #0
 800f398:	d05b      	beq.n	800f452 <xTaskGenericCreate+0xe6>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f39a:	2060      	movs	r0, #96	; 0x60
 800f39c:	f001 f9d2 	bl	8010744 <pvPortMalloc>
 800f3a0:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800f3a2:	d064      	beq.n	800f46e <xTaskGenericCreate+0x102>
				pxNewTCB->pxStack = pxStack;
 800f3a4:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f3a6:	00ba      	lsls	r2, r7, #2
 800f3a8:	21a5      	movs	r1, #165	; 0xa5
 800f3aa:	0028      	movs	r0, r5
 800f3ac:	f004 ff39 	bl	8014222 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f3b0:	4b5e      	ldr	r3, [pc, #376]	; (800f52c <xTaskGenericCreate+0x1c0>)
 800f3b2:	18fd      	adds	r5, r7, r3
 800f3b4:	00ad      	lsls	r5, r5, #2
 800f3b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f3b8:	469c      	mov	ip, r3
 800f3ba:	4465      	add	r5, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f3bc:	2307      	movs	r3, #7
 800f3be:	439d      	bics	r5, r3
 800f3c0:	46a9      	mov	r9, r5
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3c2:	2300      	movs	r3, #0
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f3c4:	0021      	movs	r1, r4
 800f3c6:	3134      	adds	r1, #52	; 0x34
 800f3c8:	4642      	mov	r2, r8
 800f3ca:	5cd2      	ldrb	r2, [r2, r3]
 800f3cc:	54ca      	strb	r2, [r1, r3]
		if( pcName[ x ] == 0x00 )
 800f3ce:	2a00      	cmp	r2, #0
 800f3d0:	d002      	beq.n	800f3d8 <xTaskGenericCreate+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	2b0d      	cmp	r3, #13
 800f3d6:	d1f7      	bne.n	800f3c8 <xTaskGenericCreate+0x5c>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f3d8:	2340      	movs	r3, #64	; 0x40
 800f3da:	2200      	movs	r2, #0
 800f3dc:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f3de:	0035      	movs	r5, r6
 800f3e0:	2e06      	cmp	r6, #6
 800f3e2:	d900      	bls.n	800f3e6 <xTaskGenericCreate+0x7a>
 800f3e4:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800f3e6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f3e8:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f3ea:	2700      	movs	r7, #0
 800f3ec:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f3ee:	1d23      	adds	r3, r4, #4
 800f3f0:	469b      	mov	fp, r3
 800f3f2:	0018      	movs	r0, r3
 800f3f4:	f7ff fb9a 	bl	800eb2c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f3f8:	0020      	movs	r0, r4
 800f3fa:	3018      	adds	r0, #24
 800f3fc:	f7ff fb96 	bl	800eb2c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f400:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f402:	2307      	movs	r3, #7
 800f404:	1b5b      	subs	r3, r3, r5
 800f406:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f408:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f40a:	6567      	str	r7, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f40c:	65a7      	str	r7, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f40e:	235c      	movs	r3, #92	; 0x5c
 800f410:	54e7      	strb	r7, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f412:	4652      	mov	r2, sl
 800f414:	9901      	ldr	r1, [sp, #4]
 800f416:	4648      	mov	r0, r9
 800f418:	f001 f8ca 	bl	80105b0 <pxPortInitialiseStack>
 800f41c:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f41e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f420:	2b00      	cmp	r3, #0
 800f422:	d000      	beq.n	800f426 <xTaskGenericCreate+0xba>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f424:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f426:	f001 f90b 	bl	8010640 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f42a:	4a41      	ldr	r2, [pc, #260]	; (800f530 <xTaskGenericCreate+0x1c4>)
 800f42c:	6813      	ldr	r3, [r2, #0]
 800f42e:	3301      	adds	r3, #1
 800f430:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f432:	4b40      	ldr	r3, [pc, #256]	; (800f534 <xTaskGenericCreate+0x1c8>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d01d      	beq.n	800f476 <xTaskGenericCreate+0x10a>
				if( xSchedulerRunning == pdFALSE )
 800f43a:	4b3f      	ldr	r3, [pc, #252]	; (800f538 <xTaskGenericCreate+0x1cc>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d11e      	bne.n	800f480 <xTaskGenericCreate+0x114>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f442:	4b3c      	ldr	r3, [pc, #240]	; (800f534 <xTaskGenericCreate+0x1c8>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f448:	42b3      	cmp	r3, r6
 800f44a:	d819      	bhi.n	800f480 <xTaskGenericCreate+0x114>
						pxCurrentTCB = pxNewTCB;
 800f44c:	4b39      	ldr	r3, [pc, #228]	; (800f534 <xTaskGenericCreate+0x1c8>)
 800f44e:	601c      	str	r4, [r3, #0]
 800f450:	e016      	b.n	800f480 <xTaskGenericCreate+0x114>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f452:	0090      	lsls	r0, r2, #2
 800f454:	f001 f976 	bl	8010744 <pvPortMalloc>
 800f458:	1e05      	subs	r5, r0, #0
		if( pxStack != NULL )
 800f45a:	d19e      	bne.n	800f39a <xTaskGenericCreate+0x2e>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f45c:	2001      	movs	r0, #1
 800f45e:	4240      	negs	r0, r0
}
 800f460:	b003      	add	sp, #12
 800f462:	bcf0      	pop	{r4, r5, r6, r7}
 800f464:	46bb      	mov	fp, r7
 800f466:	46b2      	mov	sl, r6
 800f468:	46a9      	mov	r9, r5
 800f46a:	46a0      	mov	r8, r4
 800f46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree( pxStack );
 800f46e:	0028      	movs	r0, r5
 800f470:	f001 f9fa 	bl	8010868 <vPortFree>
	if( pxNewTCB != NULL )
 800f474:	e7f2      	b.n	800f45c <xTaskGenericCreate+0xf0>
				pxCurrentTCB =  pxNewTCB;
 800f476:	4b2f      	ldr	r3, [pc, #188]	; (800f534 <xTaskGenericCreate+0x1c8>)
 800f478:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f47a:	6813      	ldr	r3, [r2, #0]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d023      	beq.n	800f4c8 <xTaskGenericCreate+0x15c>
			uxTaskNumber++;
 800f480:	4a2e      	ldr	r2, [pc, #184]	; (800f53c <xTaskGenericCreate+0x1d0>)
 800f482:	6813      	ldr	r3, [r2, #0]
 800f484:	3301      	adds	r3, #1
 800f486:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f488:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f48a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f48c:	4a2c      	ldr	r2, [pc, #176]	; (800f540 <xTaskGenericCreate+0x1d4>)
 800f48e:	6812      	ldr	r2, [r2, #0]
 800f490:	4293      	cmp	r3, r2
 800f492:	d901      	bls.n	800f498 <xTaskGenericCreate+0x12c>
 800f494:	4a2a      	ldr	r2, [pc, #168]	; (800f540 <xTaskGenericCreate+0x1d4>)
 800f496:	6013      	str	r3, [r2, #0]
 800f498:	0098      	lsls	r0, r3, #2
 800f49a:	18c0      	adds	r0, r0, r3
 800f49c:	0080      	lsls	r0, r0, #2
 800f49e:	4b29      	ldr	r3, [pc, #164]	; (800f544 <xTaskGenericCreate+0x1d8>)
 800f4a0:	18c0      	adds	r0, r0, r3
 800f4a2:	4659      	mov	r1, fp
 800f4a4:	f7ff fb45 	bl	800eb32 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f4a8:	f001 f8d6 	bl	8010658 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f4ac:	4b22      	ldr	r3, [pc, #136]	; (800f538 <xTaskGenericCreate+0x1cc>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f4b0:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d0d4      	beq.n	800f460 <xTaskGenericCreate+0xf4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f4b6:	4b1f      	ldr	r3, [pc, #124]	; (800f534 <xTaskGenericCreate+0x1c8>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4bc:	42b3      	cmp	r3, r6
 800f4be:	d2cf      	bcs.n	800f460 <xTaskGenericCreate+0xf4>
				taskYIELD_IF_USING_PREEMPTION();
 800f4c0:	f001 f8b2 	bl	8010628 <vPortYield>
			xReturn = pdPASS;
 800f4c4:	2001      	movs	r0, #1
 800f4c6:	e7cb      	b.n	800f460 <xTaskGenericCreate+0xf4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f4c8:	4d1e      	ldr	r5, [pc, #120]	; (800f544 <xTaskGenericCreate+0x1d8>)
 800f4ca:	0028      	movs	r0, r5
 800f4cc:	f7ff fb23 	bl	800eb16 <vListInitialise>
 800f4d0:	0028      	movs	r0, r5
 800f4d2:	3014      	adds	r0, #20
 800f4d4:	f7ff fb1f 	bl	800eb16 <vListInitialise>
 800f4d8:	0028      	movs	r0, r5
 800f4da:	3028      	adds	r0, #40	; 0x28
 800f4dc:	f7ff fb1b 	bl	800eb16 <vListInitialise>
 800f4e0:	0028      	movs	r0, r5
 800f4e2:	303c      	adds	r0, #60	; 0x3c
 800f4e4:	f7ff fb17 	bl	800eb16 <vListInitialise>
 800f4e8:	0028      	movs	r0, r5
 800f4ea:	3050      	adds	r0, #80	; 0x50
 800f4ec:	f7ff fb13 	bl	800eb16 <vListInitialise>
 800f4f0:	0028      	movs	r0, r5
 800f4f2:	3064      	adds	r0, #100	; 0x64
 800f4f4:	f7ff fb0f 	bl	800eb16 <vListInitialise>
 800f4f8:	0028      	movs	r0, r5
 800f4fa:	3078      	adds	r0, #120	; 0x78
 800f4fc:	f7ff fb0b 	bl	800eb16 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 800f500:	4f11      	ldr	r7, [pc, #68]	; (800f548 <xTaskGenericCreate+0x1dc>)
 800f502:	0038      	movs	r0, r7
 800f504:	f7ff fb07 	bl	800eb16 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f508:	4d10      	ldr	r5, [pc, #64]	; (800f54c <xTaskGenericCreate+0x1e0>)
 800f50a:	0028      	movs	r0, r5
 800f50c:	f7ff fb03 	bl	800eb16 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f510:	480f      	ldr	r0, [pc, #60]	; (800f550 <xTaskGenericCreate+0x1e4>)
 800f512:	f7ff fb00 	bl	800eb16 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f516:	480f      	ldr	r0, [pc, #60]	; (800f554 <xTaskGenericCreate+0x1e8>)
 800f518:	f7ff fafd 	bl	800eb16 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f51c:	480e      	ldr	r0, [pc, #56]	; (800f558 <xTaskGenericCreate+0x1ec>)
 800f51e:	f7ff fafa 	bl	800eb16 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f522:	4b0e      	ldr	r3, [pc, #56]	; (800f55c <xTaskGenericCreate+0x1f0>)
 800f524:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f526:	4b0e      	ldr	r3, [pc, #56]	; (800f560 <xTaskGenericCreate+0x1f4>)
 800f528:	601d      	str	r5, [r3, #0]
}
 800f52a:	e7a9      	b.n	800f480 <xTaskGenericCreate+0x114>
 800f52c:	3fffffff 	.word	0x3fffffff
 800f530:	20001edc 	.word	0x20001edc
 800f534:	20001e40 	.word	0x20001e40
 800f538:	20001f34 	.word	0x20001f34
 800f53c:	20001ee8 	.word	0x20001ee8
 800f540:	20001ef0 	.word	0x20001ef0
 800f544:	20001e4c 	.word	0x20001e4c
 800f548:	20001ef4 	.word	0x20001ef4
 800f54c:	20001f08 	.word	0x20001f08
 800f550:	20001f20 	.word	0x20001f20
 800f554:	20001f4c 	.word	0x20001f4c
 800f558:	20001f38 	.word	0x20001f38
 800f55c:	20001e44 	.word	0x20001e44
 800f560:	20001e48 	.word	0x20001e48

0800f564 <uxTaskPriorityGet>:
	{
 800f564:	b510      	push	{r4, lr}
 800f566:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f568:	f001 f86a 	bl	8010640 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f56c:	2c00      	cmp	r4, #0
 800f56e:	d004      	beq.n	800f57a <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f570:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f572:	f001 f871 	bl	8010658 <vPortExitCritical>
	}
 800f576:	0020      	movs	r0, r4
 800f578:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f57a:	4b01      	ldr	r3, [pc, #4]	; (800f580 <uxTaskPriorityGet+0x1c>)
 800f57c:	681c      	ldr	r4, [r3, #0]
 800f57e:	e7f7      	b.n	800f570 <uxTaskPriorityGet+0xc>
 800f580:	20001e40 	.word	0x20001e40

0800f584 <vTaskPrioritySet>:
	{
 800f584:	b570      	push	{r4, r5, r6, lr}
 800f586:	0004      	movs	r4, r0
 800f588:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f58a:	2906      	cmp	r1, #6
 800f58c:	d901      	bls.n	800f592 <vTaskPrioritySet+0xe>
 800f58e:	b672      	cpsid	i
 800f590:	e7fe      	b.n	800f590 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f592:	f001 f855 	bl	8010640 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f596:	2c00      	cmp	r4, #0
 800f598:	d00e      	beq.n	800f5b8 <vTaskPrioritySet+0x34>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f59a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f59c:	428d      	cmp	r5, r1
 800f59e:	d027      	beq.n	800f5f0 <vTaskPrioritySet+0x6c>
				if( uxNewPriority > uxCurrentBasePriority )
 800f5a0:	d90d      	bls.n	800f5be <vTaskPrioritySet+0x3a>
					if( pxTCB != pxCurrentTCB )
 800f5a2:	4b22      	ldr	r3, [pc, #136]	; (800f62c <vTaskPrioritySet+0xa8>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	42a3      	cmp	r3, r4
 800f5a8:	d025      	beq.n	800f5f6 <vTaskPrioritySet+0x72>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f5aa:	4b20      	ldr	r3, [pc, #128]	; (800f62c <vTaskPrioritySet+0xa8>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b0:	2600      	movs	r6, #0
 800f5b2:	429d      	cmp	r5, r3
 800f5b4:	4176      	adcs	r6, r6
 800f5b6:	e007      	b.n	800f5c8 <vTaskPrioritySet+0x44>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f5b8:	4b1c      	ldr	r3, [pc, #112]	; (800f62c <vTaskPrioritySet+0xa8>)
 800f5ba:	681c      	ldr	r4, [r3, #0]
 800f5bc:	e7ed      	b.n	800f59a <vTaskPrioritySet+0x16>
				else if( pxTCB == pxCurrentTCB )
 800f5be:	4b1b      	ldr	r3, [pc, #108]	; (800f62c <vTaskPrioritySet+0xa8>)
 800f5c0:	681e      	ldr	r6, [r3, #0]
 800f5c2:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f5c4:	4273      	negs	r3, r6
 800f5c6:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f5c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f5ca:	4291      	cmp	r1, r2
 800f5cc:	d015      	beq.n	800f5fa <vTaskPrioritySet+0x76>
					pxTCB->uxBasePriority = uxNewPriority;
 800f5ce:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f5d0:	69a3      	ldr	r3, [r4, #24]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	db02      	blt.n	800f5dc <vTaskPrioritySet+0x58>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5d6:	2307      	movs	r3, #7
 800f5d8:	1b5d      	subs	r5, r3, r5
 800f5da:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f5dc:	0093      	lsls	r3, r2, #2
 800f5de:	189b      	adds	r3, r3, r2
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	4a13      	ldr	r2, [pc, #76]	; (800f630 <vTaskPrioritySet+0xac>)
 800f5e4:	189b      	adds	r3, r3, r2
 800f5e6:	6962      	ldr	r2, [r4, #20]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d008      	beq.n	800f5fe <vTaskPrioritySet+0x7a>
				if( xYieldRequired == pdTRUE )
 800f5ec:	2e01      	cmp	r6, #1
 800f5ee:	d01a      	beq.n	800f626 <vTaskPrioritySet+0xa2>
		taskEXIT_CRITICAL();
 800f5f0:	f001 f832 	bl	8010658 <vPortExitCritical>
	}
 800f5f4:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800f5f6:	2600      	movs	r6, #0
 800f5f8:	e7e6      	b.n	800f5c8 <vTaskPrioritySet+0x44>
						pxTCB->uxPriority = uxNewPriority;
 800f5fa:	62e5      	str	r5, [r4, #44]	; 0x2c
 800f5fc:	e7e7      	b.n	800f5ce <vTaskPrioritySet+0x4a>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f5fe:	1d25      	adds	r5, r4, #4
 800f600:	0028      	movs	r0, r5
 800f602:	f7ff fab8 	bl	800eb76 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f606:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f608:	4a0a      	ldr	r2, [pc, #40]	; (800f634 <vTaskPrioritySet+0xb0>)
 800f60a:	6812      	ldr	r2, [r2, #0]
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d901      	bls.n	800f614 <vTaskPrioritySet+0x90>
 800f610:	4a08      	ldr	r2, [pc, #32]	; (800f634 <vTaskPrioritySet+0xb0>)
 800f612:	6013      	str	r3, [r2, #0]
 800f614:	0098      	lsls	r0, r3, #2
 800f616:	18c0      	adds	r0, r0, r3
 800f618:	0080      	lsls	r0, r0, #2
 800f61a:	4b05      	ldr	r3, [pc, #20]	; (800f630 <vTaskPrioritySet+0xac>)
 800f61c:	18c0      	adds	r0, r0, r3
 800f61e:	0029      	movs	r1, r5
 800f620:	f7ff fa87 	bl	800eb32 <vListInsertEnd>
 800f624:	e7e2      	b.n	800f5ec <vTaskPrioritySet+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 800f626:	f000 ffff 	bl	8010628 <vPortYield>
 800f62a:	e7e1      	b.n	800f5f0 <vTaskPrioritySet+0x6c>
 800f62c:	20001e40 	.word	0x20001e40
 800f630:	20001e4c 	.word	0x20001e4c
 800f634:	20001ef0 	.word	0x20001ef0

0800f638 <vTaskStartScheduler>:
{
 800f638:	b500      	push	{lr}
 800f63a:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f63c:	2300      	movs	r3, #0
 800f63e:	9303      	str	r3, [sp, #12]
 800f640:	9302      	str	r3, [sp, #8]
 800f642:	9301      	str	r3, [sp, #4]
 800f644:	9300      	str	r3, [sp, #0]
 800f646:	22a0      	movs	r2, #160	; 0xa0
 800f648:	490d      	ldr	r1, [pc, #52]	; (800f680 <vTaskStartScheduler+0x48>)
 800f64a:	480e      	ldr	r0, [pc, #56]	; (800f684 <vTaskStartScheduler+0x4c>)
 800f64c:	f7ff fe8e 	bl	800f36c <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f650:	2801      	cmp	r0, #1
 800f652:	d003      	beq.n	800f65c <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800f654:	2800      	cmp	r0, #0
 800f656:	d110      	bne.n	800f67a <vTaskStartScheduler+0x42>
 800f658:	b672      	cpsid	i
 800f65a:	e7fe      	b.n	800f65a <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800f65c:	f000 fe06 	bl	801026c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f660:	2801      	cmp	r0, #1
 800f662:	d1f7      	bne.n	800f654 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f664:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f666:	4b08      	ldr	r3, [pc, #32]	; (800f688 <vTaskStartScheduler+0x50>)
 800f668:	2201      	movs	r2, #1
 800f66a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f66c:	4b07      	ldr	r3, [pc, #28]	; (800f68c <vTaskStartScheduler+0x54>)
 800f66e:	2200      	movs	r2, #0
 800f670:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f672:	f7f8 fddf 	bl	8008234 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f676:	f000 ffad 	bl	80105d4 <xPortStartScheduler>
}
 800f67a:	b005      	add	sp, #20
 800f67c:	bd00      	pop	{pc}
 800f67e:	46c0      	nop			; (mov r8, r8)
 800f680:	0801d850 	.word	0x0801d850
 800f684:	0800f911 	.word	0x0800f911
 800f688:	20001f34 	.word	0x20001f34
 800f68c:	20001f60 	.word	0x20001f60

0800f690 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f690:	4a02      	ldr	r2, [pc, #8]	; (800f69c <vTaskSuspendAll+0xc>)
 800f692:	6813      	ldr	r3, [r2, #0]
 800f694:	3301      	adds	r3, #1
 800f696:	6013      	str	r3, [r2, #0]
}
 800f698:	4770      	bx	lr
 800f69a:	46c0      	nop			; (mov r8, r8)
 800f69c:	20001ee4 	.word	0x20001ee4

0800f6a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f6a0:	4b01      	ldr	r3, [pc, #4]	; (800f6a8 <xTaskGetTickCount+0x8>)
 800f6a2:	6818      	ldr	r0, [r3, #0]
}
 800f6a4:	4770      	bx	lr
 800f6a6:	46c0      	nop			; (mov r8, r8)
 800f6a8:	20001f60 	.word	0x20001f60

0800f6ac <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f6ac:	4b01      	ldr	r3, [pc, #4]	; (800f6b4 <xTaskGetTickCountFromISR+0x8>)
 800f6ae:	6818      	ldr	r0, [r3, #0]
}
 800f6b0:	4770      	bx	lr
 800f6b2:	46c0      	nop			; (mov r8, r8)
 800f6b4:	20001f60 	.word	0x20001f60

0800f6b8 <xTaskIncrementTick>:
{
 800f6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6ba:	46ce      	mov	lr, r9
 800f6bc:	b500      	push	{lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6be:	4b3d      	ldr	r3, [pc, #244]	; (800f7b4 <xTaskIncrementTick+0xfc>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d167      	bne.n	800f796 <xTaskIncrementTick+0xde>
		++xTickCount;
 800f6c6:	4b3c      	ldr	r3, [pc, #240]	; (800f7b8 <xTaskIncrementTick+0x100>)
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	3201      	adds	r2, #1
 800f6cc:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f6ce:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f6d0:	2e00      	cmp	r6, #0
 800f6d2:	d112      	bne.n	800f6fa <xTaskIncrementTick+0x42>
				taskSWITCH_DELAYED_LISTS();
 800f6d4:	4b39      	ldr	r3, [pc, #228]	; (800f7bc <xTaskIncrementTick+0x104>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d001      	beq.n	800f6e2 <xTaskIncrementTick+0x2a>
 800f6de:	b672      	cpsid	i
 800f6e0:	e7fe      	b.n	800f6e0 <xTaskIncrementTick+0x28>
 800f6e2:	4a36      	ldr	r2, [pc, #216]	; (800f7bc <xTaskIncrementTick+0x104>)
 800f6e4:	6811      	ldr	r1, [r2, #0]
 800f6e6:	4b36      	ldr	r3, [pc, #216]	; (800f7c0 <xTaskIncrementTick+0x108>)
 800f6e8:	6818      	ldr	r0, [r3, #0]
 800f6ea:	6010      	str	r0, [r2, #0]
 800f6ec:	6019      	str	r1, [r3, #0]
 800f6ee:	4a35      	ldr	r2, [pc, #212]	; (800f7c4 <xTaskIncrementTick+0x10c>)
 800f6f0:	6813      	ldr	r3, [r2, #0]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	6013      	str	r3, [r2, #0]
 800f6f6:	f7ff fde3 	bl	800f2c0 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f6fa:	4b33      	ldr	r3, [pc, #204]	; (800f7c8 <xTaskIncrementTick+0x110>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f6fe:	2400      	movs	r4, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f700:	42b3      	cmp	r3, r6
 800f702:	d80b      	bhi.n	800f71c <xTaskIncrementTick+0x64>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f704:	4b2d      	ldr	r3, [pc, #180]	; (800f7bc <xTaskIncrementTick+0x104>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d001      	beq.n	800f712 <xTaskIncrementTick+0x5a>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f70e:	4d2b      	ldr	r5, [pc, #172]	; (800f7bc <xTaskIncrementTick+0x104>)
 800f710:	e027      	b.n	800f762 <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 800f712:	2400      	movs	r4, #0
						xNextTaskUnblockTime = portMAX_DELAY;
 800f714:	4b2c      	ldr	r3, [pc, #176]	; (800f7c8 <xTaskIncrementTick+0x110>)
 800f716:	2201      	movs	r2, #1
 800f718:	4252      	negs	r2, r2
 800f71a:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f71c:	4b2b      	ldr	r3, [pc, #172]	; (800f7cc <xTaskIncrementTick+0x114>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f722:	0093      	lsls	r3, r2, #2
 800f724:	189b      	adds	r3, r3, r2
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	4a29      	ldr	r2, [pc, #164]	; (800f7d0 <xTaskIncrementTick+0x118>)
 800f72a:	589b      	ldr	r3, [r3, r2]
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	d937      	bls.n	800f7a0 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800f730:	2401      	movs	r4, #1
 800f732:	e035      	b.n	800f7a0 <xTaskIncrementTick+0xe8>
							xNextTaskUnblockTime = xItemValue;
 800f734:	4a24      	ldr	r2, [pc, #144]	; (800f7c8 <xTaskIncrementTick+0x110>)
 800f736:	6013      	str	r3, [r2, #0]
							break;
 800f738:	e7f0      	b.n	800f71c <xTaskIncrementTick+0x64>
						prvAddTaskToReadyList( pxTCB );
 800f73a:	0098      	lsls	r0, r3, #2
 800f73c:	18c0      	adds	r0, r0, r3
 800f73e:	0080      	lsls	r0, r0, #2
 800f740:	4b23      	ldr	r3, [pc, #140]	; (800f7d0 <xTaskIncrementTick+0x118>)
 800f742:	18c0      	adds	r0, r0, r3
 800f744:	4649      	mov	r1, r9
 800f746:	f7ff f9f4 	bl	800eb32 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f74a:	4b20      	ldr	r3, [pc, #128]	; (800f7cc <xTaskIncrementTick+0x114>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f752:	429a      	cmp	r2, r3
 800f754:	d300      	bcc.n	800f758 <xTaskIncrementTick+0xa0>
								xSwitchRequired = pdTRUE;
 800f756:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f758:	4b18      	ldr	r3, [pc, #96]	; (800f7bc <xTaskIncrementTick+0x104>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d0d8      	beq.n	800f714 <xTaskIncrementTick+0x5c>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f762:	682b      	ldr	r3, [r5, #0]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f768:	687b      	ldr	r3, [r7, #4]
						if( xConstTickCount < xItemValue )
 800f76a:	429e      	cmp	r6, r3
 800f76c:	d3e2      	bcc.n	800f734 <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f76e:	1d3b      	adds	r3, r7, #4
 800f770:	4699      	mov	r9, r3
 800f772:	0018      	movs	r0, r3
 800f774:	f7ff f9ff 	bl	800eb76 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d003      	beq.n	800f786 <xTaskIncrementTick+0xce>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f77e:	0038      	movs	r0, r7
 800f780:	3018      	adds	r0, #24
 800f782:	f7ff f9f8 	bl	800eb76 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f788:	4a12      	ldr	r2, [pc, #72]	; (800f7d4 <xTaskIncrementTick+0x11c>)
 800f78a:	6812      	ldr	r2, [r2, #0]
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d9d4      	bls.n	800f73a <xTaskIncrementTick+0x82>
 800f790:	4a10      	ldr	r2, [pc, #64]	; (800f7d4 <xTaskIncrementTick+0x11c>)
 800f792:	6013      	str	r3, [r2, #0]
 800f794:	e7d1      	b.n	800f73a <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800f796:	4a10      	ldr	r2, [pc, #64]	; (800f7d8 <xTaskIncrementTick+0x120>)
 800f798:	6813      	ldr	r3, [r2, #0]
 800f79a:	3301      	adds	r3, #1
 800f79c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f79e:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800f7a0:	4b0e      	ldr	r3, [pc, #56]	; (800f7dc <xTaskIncrementTick+0x124>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d000      	beq.n	800f7aa <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 800f7a8:	2401      	movs	r4, #1
}
 800f7aa:	0020      	movs	r0, r4
 800f7ac:	bc80      	pop	{r7}
 800f7ae:	46b9      	mov	r9, r7
 800f7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7b2:	46c0      	nop			; (mov r8, r8)
 800f7b4:	20001ee4 	.word	0x20001ee4
 800f7b8:	20001f60 	.word	0x20001f60
 800f7bc:	20001e44 	.word	0x20001e44
 800f7c0:	20001e48 	.word	0x20001e48
 800f7c4:	20001f1c 	.word	0x20001f1c
 800f7c8:	200000a0 	.word	0x200000a0
 800f7cc:	20001e40 	.word	0x20001e40
 800f7d0:	20001e4c 	.word	0x20001e4c
 800f7d4:	20001ef0 	.word	0x20001ef0
 800f7d8:	20001ee0 	.word	0x20001ee0
 800f7dc:	20001f64 	.word	0x20001f64

0800f7e0 <xTaskResumeAll>:
{
 800f7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800f7e2:	4b31      	ldr	r3, [pc, #196]	; (800f8a8 <xTaskResumeAll+0xc8>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d101      	bne.n	800f7ee <xTaskResumeAll+0xe>
 800f7ea:	b672      	cpsid	i
 800f7ec:	e7fe      	b.n	800f7ec <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800f7ee:	f000 ff27 	bl	8010640 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f7f2:	4b2d      	ldr	r3, [pc, #180]	; (800f8a8 <xTaskResumeAll+0xc8>)
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	3a01      	subs	r2, #1
 800f7f8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7fa:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7fc:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d14b      	bne.n	800f89a <xTaskResumeAll+0xba>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f802:	4b2a      	ldr	r3, [pc, #168]	; (800f8ac <xTaskResumeAll+0xcc>)
 800f804:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f806:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d046      	beq.n	800f89a <xTaskResumeAll+0xba>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f80c:	4d28      	ldr	r5, [pc, #160]	; (800f8b0 <xTaskResumeAll+0xd0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f80e:	002c      	movs	r4, r5
 800f810:	e00d      	b.n	800f82e <xTaskResumeAll+0x4e>
					prvAddTaskToReadyList( pxTCB );
 800f812:	0098      	lsls	r0, r3, #2
 800f814:	18c0      	adds	r0, r0, r3
 800f816:	0080      	lsls	r0, r0, #2
 800f818:	4b26      	ldr	r3, [pc, #152]	; (800f8b4 <xTaskResumeAll+0xd4>)
 800f81a:	18c0      	adds	r0, r0, r3
 800f81c:	0039      	movs	r1, r7
 800f81e:	f7ff f988 	bl	800eb32 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f822:	4b25      	ldr	r3, [pc, #148]	; (800f8b8 <xTaskResumeAll+0xd8>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800f828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d214      	bcs.n	800f858 <xTaskResumeAll+0x78>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f82e:	682b      	ldr	r3, [r5, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d015      	beq.n	800f860 <xTaskResumeAll+0x80>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f834:	68e3      	ldr	r3, [r4, #12]
 800f836:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f838:	0030      	movs	r0, r6
 800f83a:	3018      	adds	r0, #24
 800f83c:	f7ff f99b 	bl	800eb76 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f840:	1d37      	adds	r7, r6, #4
 800f842:	0038      	movs	r0, r7
 800f844:	f7ff f997 	bl	800eb76 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f848:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f84a:	4a1c      	ldr	r2, [pc, #112]	; (800f8bc <xTaskResumeAll+0xdc>)
 800f84c:	6812      	ldr	r2, [r2, #0]
 800f84e:	4293      	cmp	r3, r2
 800f850:	d9df      	bls.n	800f812 <xTaskResumeAll+0x32>
 800f852:	4a1a      	ldr	r2, [pc, #104]	; (800f8bc <xTaskResumeAll+0xdc>)
 800f854:	6013      	str	r3, [r2, #0]
 800f856:	e7dc      	b.n	800f812 <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 800f858:	4b19      	ldr	r3, [pc, #100]	; (800f8c0 <xTaskResumeAll+0xe0>)
 800f85a:	2201      	movs	r2, #1
 800f85c:	601a      	str	r2, [r3, #0]
 800f85e:	e7e6      	b.n	800f82e <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f860:	4b18      	ldr	r3, [pc, #96]	; (800f8c4 <xTaskResumeAll+0xe4>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d013      	beq.n	800f890 <xTaskResumeAll+0xb0>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f868:	4b16      	ldr	r3, [pc, #88]	; (800f8c4 <xTaskResumeAll+0xe4>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00f      	beq.n	800f890 <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
 800f870:	4d13      	ldr	r5, [pc, #76]	; (800f8c0 <xTaskResumeAll+0xe0>)
 800f872:	2601      	movs	r6, #1
						--uxPendedTicks;
 800f874:	4c13      	ldr	r4, [pc, #76]	; (800f8c4 <xTaskResumeAll+0xe4>)
 800f876:	e005      	b.n	800f884 <xTaskResumeAll+0xa4>
 800f878:	6823      	ldr	r3, [r4, #0]
 800f87a:	3b01      	subs	r3, #1
 800f87c:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f87e:	6823      	ldr	r3, [r4, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d005      	beq.n	800f890 <xTaskResumeAll+0xb0>
						if( xTaskIncrementTick() != pdFALSE )
 800f884:	f7ff ff18 	bl	800f6b8 <xTaskIncrementTick>
 800f888:	2800      	cmp	r0, #0
 800f88a:	d0f5      	beq.n	800f878 <xTaskResumeAll+0x98>
							xYieldPending = pdTRUE;
 800f88c:	602e      	str	r6, [r5, #0]
 800f88e:	e7f3      	b.n	800f878 <xTaskResumeAll+0x98>
				if( xYieldPending == pdTRUE )
 800f890:	4b0b      	ldr	r3, [pc, #44]	; (800f8c0 <xTaskResumeAll+0xe0>)
 800f892:	681c      	ldr	r4, [r3, #0]
 800f894:	2c01      	cmp	r4, #1
 800f896:	d004      	beq.n	800f8a2 <xTaskResumeAll+0xc2>
BaseType_t xAlreadyYielded = pdFALSE;
 800f898:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f89a:	f000 fedd 	bl	8010658 <vPortExitCritical>
}
 800f89e:	0020      	movs	r0, r4
 800f8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800f8a2:	f000 fec1 	bl	8010628 <vPortYield>
 800f8a6:	e7f8      	b.n	800f89a <xTaskResumeAll+0xba>
 800f8a8:	20001ee4 	.word	0x20001ee4
 800f8ac:	20001edc 	.word	0x20001edc
 800f8b0:	20001f20 	.word	0x20001f20
 800f8b4:	20001e4c 	.word	0x20001e4c
 800f8b8:	20001e40 	.word	0x20001e40
 800f8bc:	20001ef0 	.word	0x20001ef0
 800f8c0:	20001f64 	.word	0x20001f64
 800f8c4:	20001ee0 	.word	0x20001ee0

0800f8c8 <vTaskDelay>:
	{
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f8cc:	d016      	beq.n	800f8fc <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800f8ce:	4b0d      	ldr	r3, [pc, #52]	; (800f904 <vTaskDelay+0x3c>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d001      	beq.n	800f8da <vTaskDelay+0x12>
 800f8d6:	b672      	cpsid	i
 800f8d8:	e7fe      	b.n	800f8d8 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800f8da:	f7ff fed9 	bl	800f690 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f8de:	4b0a      	ldr	r3, [pc, #40]	; (800f908 <vTaskDelay+0x40>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f8e4:	4b09      	ldr	r3, [pc, #36]	; (800f90c <vTaskDelay+0x44>)
 800f8e6:	6818      	ldr	r0, [r3, #0]
 800f8e8:	3004      	adds	r0, #4
 800f8ea:	f7ff f944 	bl	800eb76 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f8ee:	0020      	movs	r0, r4
 800f8f0:	f7ff fcfc 	bl	800f2ec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f8f4:	f7ff ff74 	bl	800f7e0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	d101      	bne.n	800f900 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800f8fc:	f000 fe94 	bl	8010628 <vPortYield>
	}
 800f900:	bd10      	pop	{r4, pc}
 800f902:	46c0      	nop			; (mov r8, r8)
 800f904:	20001ee4 	.word	0x20001ee4
 800f908:	20001f60 	.word	0x20001f60
 800f90c:	20001e40 	.word	0x20001e40

0800f910 <prvIdleTask>:
{
 800f910:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f912:	4e16      	ldr	r6, [pc, #88]	; (800f96c <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f914:	4d16      	ldr	r5, [pc, #88]	; (800f970 <prvIdleTask+0x60>)
 800f916:	e003      	b.n	800f920 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f918:	4b16      	ldr	r3, [pc, #88]	; (800f974 <prvIdleTask+0x64>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d822      	bhi.n	800f966 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f920:	6833      	ldr	r3, [r6, #0]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d0f8      	beq.n	800f918 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800f926:	f7ff feb3 	bl	800f690 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f92a:	682c      	ldr	r4, [r5, #0]
			( void ) xTaskResumeAll();
 800f92c:	f7ff ff58 	bl	800f7e0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f930:	2c00      	cmp	r4, #0
 800f932:	d0f5      	beq.n	800f920 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800f934:	f000 fe84 	bl	8010640 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f938:	4b0d      	ldr	r3, [pc, #52]	; (800f970 <prvIdleTask+0x60>)
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f93e:	1d20      	adds	r0, r4, #4
 800f940:	f7ff f919 	bl	800eb76 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f944:	4a0c      	ldr	r2, [pc, #48]	; (800f978 <prvIdleTask+0x68>)
 800f946:	6813      	ldr	r3, [r2, #0]
 800f948:	3b01      	subs	r3, #1
 800f94a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f94c:	4a07      	ldr	r2, [pc, #28]	; (800f96c <prvIdleTask+0x5c>)
 800f94e:	6813      	ldr	r3, [r2, #0]
 800f950:	3b01      	subs	r3, #1
 800f952:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f954:	f000 fe80 	bl	8010658 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800f958:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f95a:	f000 ff85 	bl	8010868 <vPortFree>
		vPortFree( pxTCB );
 800f95e:	0020      	movs	r0, r4
 800f960:	f000 ff82 	bl	8010868 <vPortFree>
	}
 800f964:	e7dc      	b.n	800f920 <prvIdleTask+0x10>
				taskYIELD();
 800f966:	f000 fe5f 	bl	8010628 <vPortYield>
 800f96a:	e7d9      	b.n	800f920 <prvIdleTask+0x10>
 800f96c:	20001eec 	.word	0x20001eec
 800f970:	20001f4c 	.word	0x20001f4c
 800f974:	20001e4c 	.word	0x20001e4c
 800f978:	20001edc 	.word	0x20001edc

0800f97c <uxTaskGetSystemState>:
	{
 800f97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f97e:	46c6      	mov	lr, r8
 800f980:	b500      	push	{lr}
 800f982:	0006      	movs	r6, r0
 800f984:	000d      	movs	r5, r1
 800f986:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800f988:	f7ff fe82 	bl	800f690 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f98c:	4b1e      	ldr	r3, [pc, #120]	; (800fa08 <uxTaskGetSystemState+0x8c>)
 800f98e:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f990:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f992:	42ab      	cmp	r3, r5
 800f994:	d832      	bhi.n	800f9fc <uxTaskGetSystemState+0x80>
 800f996:	4d1d      	ldr	r5, [pc, #116]	; (800fa0c <uxTaskGetSystemState+0x90>)
 800f998:	002f      	movs	r7, r5
 800f99a:	3f78      	subs	r7, #120	; 0x78
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f99c:	0160      	lsls	r0, r4, #5
 800f99e:	1830      	adds	r0, r6, r0
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	0029      	movs	r1, r5
 800f9a4:	f7ff fc34 	bl	800f210 <prvListTaskWithinSingleList>
 800f9a8:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9aa:	002b      	movs	r3, r5
 800f9ac:	3d14      	subs	r5, #20
 800f9ae:	42bb      	cmp	r3, r7
 800f9b0:	d1f4      	bne.n	800f99c <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f9b2:	4b17      	ldr	r3, [pc, #92]	; (800fa10 <uxTaskGetSystemState+0x94>)
 800f9b4:	6819      	ldr	r1, [r3, #0]
 800f9b6:	0160      	lsls	r0, r4, #5
 800f9b8:	1830      	adds	r0, r6, r0
 800f9ba:	2202      	movs	r2, #2
 800f9bc:	f7ff fc28 	bl	800f210 <prvListTaskWithinSingleList>
 800f9c0:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f9c2:	4b14      	ldr	r3, [pc, #80]	; (800fa14 <uxTaskGetSystemState+0x98>)
 800f9c4:	6819      	ldr	r1, [r3, #0]
 800f9c6:	0160      	lsls	r0, r4, #5
 800f9c8:	1830      	adds	r0, r6, r0
 800f9ca:	2202      	movs	r2, #2
 800f9cc:	f7ff fc20 	bl	800f210 <prvListTaskWithinSingleList>
 800f9d0:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f9d2:	0160      	lsls	r0, r4, #5
 800f9d4:	1830      	adds	r0, r6, r0
 800f9d6:	2204      	movs	r2, #4
 800f9d8:	490f      	ldr	r1, [pc, #60]	; (800fa18 <uxTaskGetSystemState+0x9c>)
 800f9da:	f7ff fc19 	bl	800f210 <prvListTaskWithinSingleList>
 800f9de:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f9e0:	0160      	lsls	r0, r4, #5
 800f9e2:	1830      	adds	r0, r6, r0
 800f9e4:	2203      	movs	r2, #3
 800f9e6:	490d      	ldr	r1, [pc, #52]	; (800fa1c <uxTaskGetSystemState+0xa0>)
 800f9e8:	f7ff fc12 	bl	800f210 <prvListTaskWithinSingleList>
 800f9ec:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f9ee:	4643      	mov	r3, r8
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d003      	beq.n	800f9fc <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f9f4:	f7f8 fc2e 	bl	8008254 <ulMainGetRunTimeCounterValue>
 800f9f8:	4643      	mov	r3, r8
 800f9fa:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800f9fc:	f7ff fef0 	bl	800f7e0 <xTaskResumeAll>
	}
 800fa00:	0020      	movs	r0, r4
 800fa02:	bc80      	pop	{r7}
 800fa04:	46b8      	mov	r8, r7
 800fa06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa08:	20001edc 	.word	0x20001edc
 800fa0c:	20001ec4 	.word	0x20001ec4
 800fa10:	20001e44 	.word	0x20001e44
 800fa14:	20001e48 	.word	0x20001e48
 800fa18:	20001f4c 	.word	0x20001f4c
 800fa1c:	20001f38 	.word	0x20001f38

0800fa20 <vTaskSwitchContext>:
{
 800fa20:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa22:	4b39      	ldr	r3, [pc, #228]	; (800fb08 <vTaskSwitchContext+0xe8>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d003      	beq.n	800fa32 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800fa2a:	4b38      	ldr	r3, [pc, #224]	; (800fb0c <vTaskSwitchContext+0xec>)
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	601a      	str	r2, [r3, #0]
}
 800fa30:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800fa32:	4b36      	ldr	r3, [pc, #216]	; (800fb0c <vTaskSwitchContext+0xec>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fa38:	f7f8 fc0c 	bl	8008254 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fa3c:	4b34      	ldr	r3, [pc, #208]	; (800fb10 <vTaskSwitchContext+0xf0>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4298      	cmp	r0, r3
 800fa42:	d905      	bls.n	800fa50 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fa44:	4a33      	ldr	r2, [pc, #204]	; (800fb14 <vTaskSwitchContext+0xf4>)
 800fa46:	6812      	ldr	r2, [r2, #0]
 800fa48:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fa4a:	1acb      	subs	r3, r1, r3
 800fa4c:	181b      	adds	r3, r3, r0
 800fa4e:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800fa50:	4b2f      	ldr	r3, [pc, #188]	; (800fb10 <vTaskSwitchContext+0xf0>)
 800fa52:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fa54:	4b2f      	ldr	r3, [pc, #188]	; (800fb14 <vTaskSwitchContext+0xf4>)
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	6812      	ldr	r2, [r2, #0]
 800fa5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d93b      	bls.n	800fada <vTaskSwitchContext+0xba>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fa62:	4b2c      	ldr	r3, [pc, #176]	; (800fb14 <vTaskSwitchContext+0xf4>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fa68:	2214      	movs	r2, #20
 800fa6a:	492b      	ldr	r1, [pc, #172]	; (800fb18 <vTaskSwitchContext+0xf8>)
 800fa6c:	f004 fbc2 	bl	80141f4 <memcmp>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	d139      	bne.n	800fae8 <vTaskSwitchContext+0xc8>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fa74:	4b29      	ldr	r3, [pc, #164]	; (800fb1c <vTaskSwitchContext+0xfc>)
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	0093      	lsls	r3, r2, #2
 800fa7a:	189b      	adds	r3, r3, r2
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	4a28      	ldr	r2, [pc, #160]	; (800fb20 <vTaskSwitchContext+0x100>)
 800fa80:	589b      	ldr	r3, [r3, r2]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d10f      	bne.n	800faa6 <vTaskSwitchContext+0x86>
 800fa86:	4825      	ldr	r0, [pc, #148]	; (800fb1c <vTaskSwitchContext+0xfc>)
 800fa88:	0002      	movs	r2, r0
 800fa8a:	6803      	ldr	r3, [r0, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d032      	beq.n	800faf6 <vTaskSwitchContext+0xd6>
 800fa90:	6813      	ldr	r3, [r2, #0]
 800fa92:	3b01      	subs	r3, #1
 800fa94:	6013      	str	r3, [r2, #0]
 800fa96:	6811      	ldr	r1, [r2, #0]
 800fa98:	008b      	lsls	r3, r1, #2
 800fa9a:	185b      	adds	r3, r3, r1
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	4920      	ldr	r1, [pc, #128]	; (800fb20 <vTaskSwitchContext+0x100>)
 800faa0:	585b      	ldr	r3, [r3, r1]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d0f1      	beq.n	800fa8a <vTaskSwitchContext+0x6a>
 800faa6:	4b1d      	ldr	r3, [pc, #116]	; (800fb1c <vTaskSwitchContext+0xfc>)
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	4c1d      	ldr	r4, [pc, #116]	; (800fb20 <vTaskSwitchContext+0x100>)
 800faac:	0093      	lsls	r3, r2, #2
 800faae:	1899      	adds	r1, r3, r2
 800fab0:	0089      	lsls	r1, r1, #2
 800fab2:	1861      	adds	r1, r4, r1
 800fab4:	6848      	ldr	r0, [r1, #4]
 800fab6:	6840      	ldr	r0, [r0, #4]
 800fab8:	6048      	str	r0, [r1, #4]
 800faba:	189b      	adds	r3, r3, r2
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	3308      	adds	r3, #8
 800fac0:	191b      	adds	r3, r3, r4
 800fac2:	4298      	cmp	r0, r3
 800fac4:	d019      	beq.n	800fafa <vTaskSwitchContext+0xda>
 800fac6:	0093      	lsls	r3, r2, #2
 800fac8:	189a      	adds	r2, r3, r2
 800faca:	0092      	lsls	r2, r2, #2
 800facc:	4b14      	ldr	r3, [pc, #80]	; (800fb20 <vTaskSwitchContext+0x100>)
 800face:	189a      	adds	r2, r3, r2
 800fad0:	6853      	ldr	r3, [r2, #4]
 800fad2:	68da      	ldr	r2, [r3, #12]
 800fad4:	4b0f      	ldr	r3, [pc, #60]	; (800fb14 <vTaskSwitchContext+0xf4>)
 800fad6:	601a      	str	r2, [r3, #0]
}
 800fad8:	e7aa      	b.n	800fa30 <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fada:	4b0e      	ldr	r3, [pc, #56]	; (800fb14 <vTaskSwitchContext+0xf4>)
 800fadc:	6818      	ldr	r0, [r3, #0]
 800fade:	6819      	ldr	r1, [r3, #0]
 800fae0:	3134      	adds	r1, #52	; 0x34
 800fae2:	f7fe f859 	bl	800db98 <vApplicationStackOverflowHook>
 800fae6:	e7bc      	b.n	800fa62 <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fae8:	4b0a      	ldr	r3, [pc, #40]	; (800fb14 <vTaskSwitchContext+0xf4>)
 800faea:	6818      	ldr	r0, [r3, #0]
 800faec:	6819      	ldr	r1, [r3, #0]
 800faee:	3134      	adds	r1, #52	; 0x34
 800faf0:	f7fe f852 	bl	800db98 <vApplicationStackOverflowHook>
 800faf4:	e7be      	b.n	800fa74 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800faf6:	b672      	cpsid	i
 800faf8:	e7fe      	b.n	800faf8 <vTaskSwitchContext+0xd8>
 800fafa:	6840      	ldr	r0, [r0, #4]
 800fafc:	0093      	lsls	r3, r2, #2
 800fafe:	189b      	adds	r3, r3, r2
 800fb00:	009b      	lsls	r3, r3, #2
 800fb02:	18e3      	adds	r3, r4, r3
 800fb04:	6058      	str	r0, [r3, #4]
 800fb06:	e7de      	b.n	800fac6 <vTaskSwitchContext+0xa6>
 800fb08:	20001ee4 	.word	0x20001ee4
 800fb0c:	20001f64 	.word	0x20001f64
 800fb10:	20001ed8 	.word	0x20001ed8
 800fb14:	20001e40 	.word	0x20001e40
 800fb18:	0801d880 	.word	0x0801d880
 800fb1c:	20001ef0 	.word	0x20001ef0
 800fb20:	20001e4c 	.word	0x20001e4c

0800fb24 <vTaskPlaceOnEventList>:
{
 800fb24:	b570      	push	{r4, r5, r6, lr}
 800fb26:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	d010      	beq.n	800fb4e <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb2c:	4d0c      	ldr	r5, [pc, #48]	; (800fb60 <vTaskPlaceOnEventList+0x3c>)
 800fb2e:	6829      	ldr	r1, [r5, #0]
 800fb30:	3118      	adds	r1, #24
 800fb32:	f7ff f809 	bl	800eb48 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fb36:	6828      	ldr	r0, [r5, #0]
 800fb38:	3004      	adds	r0, #4
 800fb3a:	f7ff f81c 	bl	800eb76 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800fb3e:	1c63      	adds	r3, r4, #1
 800fb40:	d007      	beq.n	800fb52 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800fb42:	4b08      	ldr	r3, [pc, #32]	; (800fb64 <vTaskPlaceOnEventList+0x40>)
 800fb44:	6818      	ldr	r0, [r3, #0]
 800fb46:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fb48:	f7ff fbd0 	bl	800f2ec <prvAddCurrentTaskToDelayedList>
}
 800fb4c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800fb4e:	b672      	cpsid	i
 800fb50:	e7fe      	b.n	800fb50 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fb52:	4b03      	ldr	r3, [pc, #12]	; (800fb60 <vTaskPlaceOnEventList+0x3c>)
 800fb54:	6819      	ldr	r1, [r3, #0]
 800fb56:	3104      	adds	r1, #4
 800fb58:	4803      	ldr	r0, [pc, #12]	; (800fb68 <vTaskPlaceOnEventList+0x44>)
 800fb5a:	f7fe ffea 	bl	800eb32 <vListInsertEnd>
 800fb5e:	e7f5      	b.n	800fb4c <vTaskPlaceOnEventList+0x28>
 800fb60:	20001e40 	.word	0x20001e40
 800fb64:	20001f60 	.word	0x20001f60
 800fb68:	20001f38 	.word	0x20001f38

0800fb6c <vTaskPlaceOnUnorderedEventList>:
{
 800fb6c:	b570      	push	{r4, r5, r6, lr}
 800fb6e:	0014      	movs	r4, r2
	configASSERT( pxEventList );
 800fb70:	2800      	cmp	r0, #0
 800fb72:	d005      	beq.n	800fb80 <vTaskPlaceOnUnorderedEventList+0x14>
	configASSERT( uxSchedulerSuspended != 0 );
 800fb74:	4b12      	ldr	r3, [pc, #72]	; (800fbc0 <vTaskPlaceOnUnorderedEventList+0x54>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d103      	bne.n	800fb84 <vTaskPlaceOnUnorderedEventList+0x18>
 800fb7c:	b672      	cpsid	i
 800fb7e:	e7fe      	b.n	800fb7e <vTaskPlaceOnUnorderedEventList+0x12>
	configASSERT( pxEventList );
 800fb80:	b672      	cpsid	i
 800fb82:	e7fe      	b.n	800fb82 <vTaskPlaceOnUnorderedEventList+0x16>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fb84:	4d0f      	ldr	r5, [pc, #60]	; (800fbc4 <vTaskPlaceOnUnorderedEventList+0x58>)
 800fb86:	682a      	ldr	r2, [r5, #0]
 800fb88:	2380      	movs	r3, #128	; 0x80
 800fb8a:	061b      	lsls	r3, r3, #24
 800fb8c:	430b      	orrs	r3, r1
 800fb8e:	6193      	str	r3, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb90:	6829      	ldr	r1, [r5, #0]
 800fb92:	3118      	adds	r1, #24
 800fb94:	f7fe ffcd 	bl	800eb32 <vListInsertEnd>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fb98:	6828      	ldr	r0, [r5, #0]
 800fb9a:	3004      	adds	r0, #4
 800fb9c:	f7fe ffeb 	bl	800eb76 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800fba0:	1c63      	adds	r3, r4, #1
 800fba2:	d005      	beq.n	800fbb0 <vTaskPlaceOnUnorderedEventList+0x44>
			xTimeToWake = xTickCount + xTicksToWait;
 800fba4:	4b08      	ldr	r3, [pc, #32]	; (800fbc8 <vTaskPlaceOnUnorderedEventList+0x5c>)
 800fba6:	6818      	ldr	r0, [r3, #0]
 800fba8:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fbaa:	f7ff fb9f 	bl	800f2ec <prvAddCurrentTaskToDelayedList>
}
 800fbae:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fbb0:	4b04      	ldr	r3, [pc, #16]	; (800fbc4 <vTaskPlaceOnUnorderedEventList+0x58>)
 800fbb2:	6819      	ldr	r1, [r3, #0]
 800fbb4:	3104      	adds	r1, #4
 800fbb6:	4805      	ldr	r0, [pc, #20]	; (800fbcc <vTaskPlaceOnUnorderedEventList+0x60>)
 800fbb8:	f7fe ffbb 	bl	800eb32 <vListInsertEnd>
 800fbbc:	e7f7      	b.n	800fbae <vTaskPlaceOnUnorderedEventList+0x42>
 800fbbe:	46c0      	nop			; (mov r8, r8)
 800fbc0:	20001ee4 	.word	0x20001ee4
 800fbc4:	20001e40 	.word	0x20001e40
 800fbc8:	20001f60 	.word	0x20001f60
 800fbcc:	20001f38 	.word	0x20001f38

0800fbd0 <vTaskPlaceOnEventListRestricted>:
	{
 800fbd0:	b570      	push	{r4, r5, r6, lr}
 800fbd2:	000c      	movs	r4, r1
		configASSERT( pxEventList );
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d00e      	beq.n	800fbf6 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbd8:	4d08      	ldr	r5, [pc, #32]	; (800fbfc <vTaskPlaceOnEventListRestricted+0x2c>)
 800fbda:	6829      	ldr	r1, [r5, #0]
 800fbdc:	3118      	adds	r1, #24
 800fbde:	f7fe ffa8 	bl	800eb32 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fbe2:	6828      	ldr	r0, [r5, #0]
 800fbe4:	3004      	adds	r0, #4
 800fbe6:	f7fe ffc6 	bl	800eb76 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800fbea:	4b05      	ldr	r3, [pc, #20]	; (800fc00 <vTaskPlaceOnEventListRestricted+0x30>)
 800fbec:	6818      	ldr	r0, [r3, #0]
 800fbee:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fbf0:	f7ff fb7c 	bl	800f2ec <prvAddCurrentTaskToDelayedList>
	}
 800fbf4:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800fbf6:	b672      	cpsid	i
 800fbf8:	e7fe      	b.n	800fbf8 <vTaskPlaceOnEventListRestricted+0x28>
 800fbfa:	46c0      	nop			; (mov r8, r8)
 800fbfc:	20001e40 	.word	0x20001e40
 800fc00:	20001f60 	.word	0x20001f60

0800fc04 <xTaskRemoveFromEventList>:
{
 800fc04:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fc06:	68c3      	ldr	r3, [r0, #12]
 800fc08:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800fc0a:	2c00      	cmp	r4, #0
 800fc0c:	d027      	beq.n	800fc5e <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fc0e:	0025      	movs	r5, r4
 800fc10:	3518      	adds	r5, #24
 800fc12:	0028      	movs	r0, r5
 800fc14:	f7fe ffaf 	bl	800eb76 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc18:	4b14      	ldr	r3, [pc, #80]	; (800fc6c <xTaskRemoveFromEventList+0x68>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d120      	bne.n	800fc62 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800fc20:	1d25      	adds	r5, r4, #4
 800fc22:	0028      	movs	r0, r5
 800fc24:	f7fe ffa7 	bl	800eb76 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fc28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fc2a:	4a11      	ldr	r2, [pc, #68]	; (800fc70 <xTaskRemoveFromEventList+0x6c>)
 800fc2c:	6812      	ldr	r2, [r2, #0]
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d901      	bls.n	800fc36 <xTaskRemoveFromEventList+0x32>
 800fc32:	4a0f      	ldr	r2, [pc, #60]	; (800fc70 <xTaskRemoveFromEventList+0x6c>)
 800fc34:	6013      	str	r3, [r2, #0]
 800fc36:	0098      	lsls	r0, r3, #2
 800fc38:	18c0      	adds	r0, r0, r3
 800fc3a:	0080      	lsls	r0, r0, #2
 800fc3c:	4b0d      	ldr	r3, [pc, #52]	; (800fc74 <xTaskRemoveFromEventList+0x70>)
 800fc3e:	18c0      	adds	r0, r0, r3
 800fc40:	0029      	movs	r1, r5
 800fc42:	f7fe ff76 	bl	800eb32 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc46:	4b0c      	ldr	r3, [pc, #48]	; (800fc78 <xTaskRemoveFromEventList+0x74>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800fc4e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d903      	bls.n	800fc5c <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 800fc54:	4b09      	ldr	r3, [pc, #36]	; (800fc7c <xTaskRemoveFromEventList+0x78>)
 800fc56:	2201      	movs	r2, #1
 800fc58:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800fc5a:	3001      	adds	r0, #1
}
 800fc5c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800fc5e:	b672      	cpsid	i
 800fc60:	e7fe      	b.n	800fc60 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc62:	0029      	movs	r1, r5
 800fc64:	4806      	ldr	r0, [pc, #24]	; (800fc80 <xTaskRemoveFromEventList+0x7c>)
 800fc66:	f7fe ff64 	bl	800eb32 <vListInsertEnd>
 800fc6a:	e7ec      	b.n	800fc46 <xTaskRemoveFromEventList+0x42>
 800fc6c:	20001ee4 	.word	0x20001ee4
 800fc70:	20001ef0 	.word	0x20001ef0
 800fc74:	20001e4c 	.word	0x20001e4c
 800fc78:	20001e40 	.word	0x20001e40
 800fc7c:	20001f64 	.word	0x20001f64
 800fc80:	20001f20 	.word	0x20001f20

0800fc84 <xTaskRemoveFromUnorderedEventList>:
{
 800fc84:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800fc86:	4b18      	ldr	r3, [pc, #96]	; (800fce8 <xTaskRemoveFromUnorderedEventList+0x64>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d101      	bne.n	800fc92 <xTaskRemoveFromUnorderedEventList+0xe>
 800fc8e:	b672      	cpsid	i
 800fc90:	e7fe      	b.n	800fc90 <xTaskRemoveFromUnorderedEventList+0xc>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fc92:	2380      	movs	r3, #128	; 0x80
 800fc94:	061b      	lsls	r3, r3, #24
 800fc96:	430b      	orrs	r3, r1
 800fc98:	6003      	str	r3, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800fc9a:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 800fc9c:	2c00      	cmp	r4, #0
 800fc9e:	d020      	beq.n	800fce2 <xTaskRemoveFromUnorderedEventList+0x5e>
	( void ) uxListRemove( pxEventListItem );
 800fca0:	f7fe ff69 	bl	800eb76 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800fca4:	1d25      	adds	r5, r4, #4
 800fca6:	0028      	movs	r0, r5
 800fca8:	f7fe ff65 	bl	800eb76 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800fcac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fcae:	4a0f      	ldr	r2, [pc, #60]	; (800fcec <xTaskRemoveFromUnorderedEventList+0x68>)
 800fcb0:	6812      	ldr	r2, [r2, #0]
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d901      	bls.n	800fcba <xTaskRemoveFromUnorderedEventList+0x36>
 800fcb6:	4a0d      	ldr	r2, [pc, #52]	; (800fcec <xTaskRemoveFromUnorderedEventList+0x68>)
 800fcb8:	6013      	str	r3, [r2, #0]
 800fcba:	0098      	lsls	r0, r3, #2
 800fcbc:	18c0      	adds	r0, r0, r3
 800fcbe:	0080      	lsls	r0, r0, #2
 800fcc0:	4b0b      	ldr	r3, [pc, #44]	; (800fcf0 <xTaskRemoveFromUnorderedEventList+0x6c>)
 800fcc2:	18c0      	adds	r0, r0, r3
 800fcc4:	0029      	movs	r1, r5
 800fcc6:	f7fe ff34 	bl	800eb32 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fcca:	4b0a      	ldr	r3, [pc, #40]	; (800fcf4 <xTaskRemoveFromUnorderedEventList+0x70>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fcd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800fcd2:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d903      	bls.n	800fce0 <xTaskRemoveFromUnorderedEventList+0x5c>
		xYieldPending = pdTRUE;
 800fcd8:	4b07      	ldr	r3, [pc, #28]	; (800fcf8 <xTaskRemoveFromUnorderedEventList+0x74>)
 800fcda:	2201      	movs	r2, #1
 800fcdc:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800fcde:	3001      	adds	r0, #1
}
 800fce0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800fce2:	b672      	cpsid	i
 800fce4:	e7fe      	b.n	800fce4 <xTaskRemoveFromUnorderedEventList+0x60>
 800fce6:	46c0      	nop			; (mov r8, r8)
 800fce8:	20001ee4 	.word	0x20001ee4
 800fcec:	20001ef0 	.word	0x20001ef0
 800fcf0:	20001e4c 	.word	0x20001e4c
 800fcf4:	20001e40 	.word	0x20001e40
 800fcf8:	20001f64 	.word	0x20001f64

0800fcfc <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	d006      	beq.n	800fd0e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd00:	4b04      	ldr	r3, [pc, #16]	; (800fd14 <vTaskSetTimeOutState+0x18>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd06:	4b04      	ldr	r3, [pc, #16]	; (800fd18 <vTaskSetTimeOutState+0x1c>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	6043      	str	r3, [r0, #4]
}
 800fd0c:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800fd0e:	b672      	cpsid	i
 800fd10:	e7fe      	b.n	800fd10 <vTaskSetTimeOutState+0x14>
 800fd12:	46c0      	nop			; (mov r8, r8)
 800fd14:	20001f1c 	.word	0x20001f1c
 800fd18:	20001f60 	.word	0x20001f60

0800fd1c <xTaskCheckForTimeOut>:
{
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	0004      	movs	r4, r0
 800fd20:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 800fd22:	2800      	cmp	r0, #0
 800fd24:	d01e      	beq.n	800fd64 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 800fd26:	2900      	cmp	r1, #0
 800fd28:	d01e      	beq.n	800fd68 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800fd2a:	f000 fc89 	bl	8010640 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fd2e:	4b12      	ldr	r3, [pc, #72]	; (800fd78 <xTaskCheckForTimeOut+0x5c>)
 800fd30:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800fd32:	682b      	ldr	r3, [r5, #0]
 800fd34:	1c59      	adds	r1, r3, #1
 800fd36:	d019      	beq.n	800fd6c <xTaskCheckForTimeOut+0x50>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd38:	4910      	ldr	r1, [pc, #64]	; (800fd7c <xTaskCheckForTimeOut+0x60>)
 800fd3a:	6809      	ldr	r1, [r1, #0]
 800fd3c:	6820      	ldr	r0, [r4, #0]
 800fd3e:	4288      	cmp	r0, r1
 800fd40:	d003      	beq.n	800fd4a <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 800fd42:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd44:	6861      	ldr	r1, [r4, #4]
 800fd46:	4291      	cmp	r1, r2
 800fd48:	d911      	bls.n	800fd6e <xTaskCheckForTimeOut+0x52>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800fd4a:	6861      	ldr	r1, [r4, #4]
 800fd4c:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800fd4e:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800fd50:	4283      	cmp	r3, r0
 800fd52:	d90c      	bls.n	800fd6e <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800fd54:	1a9b      	subs	r3, r3, r2
 800fd56:	185b      	adds	r3, r3, r1
 800fd58:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800fd5a:	0020      	movs	r0, r4
 800fd5c:	f7ff ffce 	bl	800fcfc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800fd60:	2600      	movs	r6, #0
 800fd62:	e004      	b.n	800fd6e <xTaskCheckForTimeOut+0x52>
	configASSERT( pxTimeOut );
 800fd64:	b672      	cpsid	i
 800fd66:	e7fe      	b.n	800fd66 <xTaskCheckForTimeOut+0x4a>
	configASSERT( pxTicksToWait );
 800fd68:	b672      	cpsid	i
 800fd6a:	e7fe      	b.n	800fd6a <xTaskCheckForTimeOut+0x4e>
				xReturn = pdFALSE;
 800fd6c:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800fd6e:	f000 fc73 	bl	8010658 <vPortExitCritical>
}
 800fd72:	0030      	movs	r0, r6
 800fd74:	bd70      	pop	{r4, r5, r6, pc}
 800fd76:	46c0      	nop			; (mov r8, r8)
 800fd78:	20001f60 	.word	0x20001f60
 800fd7c:	20001f1c 	.word	0x20001f1c

0800fd80 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800fd80:	4b01      	ldr	r3, [pc, #4]	; (800fd88 <vTaskMissedYield+0x8>)
 800fd82:	2201      	movs	r2, #1
 800fd84:	601a      	str	r2, [r3, #0]
}
 800fd86:	4770      	bx	lr
 800fd88:	20001f64 	.word	0x20001f64

0800fd8c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800fd8c:	4b05      	ldr	r3, [pc, #20]	; (800fda4 <xTaskGetSchedulerState+0x18>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fd90:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d004      	beq.n	800fda0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd96:	4b04      	ldr	r3, [pc, #16]	; (800fda8 <xTaskGetSchedulerState+0x1c>)
 800fd98:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800fd9a:	4243      	negs	r3, r0
 800fd9c:	4158      	adcs	r0, r3
 800fd9e:	0040      	lsls	r0, r0, #1
	}
 800fda0:	4770      	bx	lr
 800fda2:	46c0      	nop			; (mov r8, r8)
 800fda4:	20001f34 	.word	0x20001f34
 800fda8:	20001ee4 	.word	0x20001ee4

0800fdac <vTaskPriorityInherit>:
	{
 800fdac:	b570      	push	{r4, r5, r6, lr}
 800fdae:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fdb0:	d01a      	beq.n	800fde8 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fdb2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fdb4:	4b19      	ldr	r3, [pc, #100]	; (800fe1c <vTaskPriorityInherit+0x70>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d214      	bcs.n	800fde8 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fdbe:	6983      	ldr	r3, [r0, #24]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	db05      	blt.n	800fdd0 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdc4:	4b15      	ldr	r3, [pc, #84]	; (800fe1c <vTaskPriorityInherit+0x70>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fdca:	2307      	movs	r3, #7
 800fdcc:	1a5b      	subs	r3, r3, r1
 800fdce:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800fdd0:	0093      	lsls	r3, r2, #2
 800fdd2:	189b      	adds	r3, r3, r2
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4a12      	ldr	r2, [pc, #72]	; (800fe20 <vTaskPriorityInherit+0x74>)
 800fdd8:	189b      	adds	r3, r3, r2
 800fdda:	6962      	ldr	r2, [r4, #20]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d004      	beq.n	800fdea <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fde0:	4b0e      	ldr	r3, [pc, #56]	; (800fe1c <vTaskPriorityInherit+0x70>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde6:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800fde8:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fdea:	1d25      	adds	r5, r4, #4
 800fdec:	0028      	movs	r0, r5
 800fdee:	f7fe fec2 	bl	800eb76 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fdf2:	4b0a      	ldr	r3, [pc, #40]	; (800fe1c <vTaskPriorityInherit+0x70>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800fdfa:	4a0a      	ldr	r2, [pc, #40]	; (800fe24 <vTaskPriorityInherit+0x78>)
 800fdfc:	6812      	ldr	r2, [r2, #0]
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d808      	bhi.n	800fe14 <vTaskPriorityInherit+0x68>
 800fe02:	0098      	lsls	r0, r3, #2
 800fe04:	18c0      	adds	r0, r0, r3
 800fe06:	0080      	lsls	r0, r0, #2
 800fe08:	4b05      	ldr	r3, [pc, #20]	; (800fe20 <vTaskPriorityInherit+0x74>)
 800fe0a:	18c0      	adds	r0, r0, r3
 800fe0c:	0029      	movs	r1, r5
 800fe0e:	f7fe fe90 	bl	800eb32 <vListInsertEnd>
	}
 800fe12:	e7e9      	b.n	800fde8 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800fe14:	4a03      	ldr	r2, [pc, #12]	; (800fe24 <vTaskPriorityInherit+0x78>)
 800fe16:	6013      	str	r3, [r2, #0]
 800fe18:	e7f3      	b.n	800fe02 <vTaskPriorityInherit+0x56>
 800fe1a:	46c0      	nop			; (mov r8, r8)
 800fe1c:	20001e40 	.word	0x20001e40
 800fe20:	20001e4c 	.word	0x20001e4c
 800fe24:	20001ef0 	.word	0x20001ef0

0800fe28 <xTaskPriorityDisinherit>:
	{
 800fe28:	b570      	push	{r4, r5, r6, lr}
 800fe2a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fe2c:	d02c      	beq.n	800fe88 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
 800fe2e:	4b18      	ldr	r3, [pc, #96]	; (800fe90 <xTaskPriorityDisinherit+0x68>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4283      	cmp	r3, r0
 800fe34:	d001      	beq.n	800fe3a <xTaskPriorityDisinherit+0x12>
 800fe36:	b672      	cpsid	i
 800fe38:	e7fe      	b.n	800fe38 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe3a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d101      	bne.n	800fe44 <xTaskPriorityDisinherit+0x1c>
 800fe40:	b672      	cpsid	i
 800fe42:	e7fe      	b.n	800fe42 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800fe44:	3b01      	subs	r3, #1
 800fe46:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe48:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fe4a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800fe4c:	428a      	cmp	r2, r1
 800fe4e:	d01d      	beq.n	800fe8c <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 800fe50:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d119      	bne.n	800fe8a <xTaskPriorityDisinherit+0x62>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fe56:	1d25      	adds	r5, r4, #4
 800fe58:	0028      	movs	r0, r5
 800fe5a:	f7fe fe8c 	bl	800eb76 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fe5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fe60:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe62:	2207      	movs	r2, #7
 800fe64:	1ad2      	subs	r2, r2, r3
 800fe66:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe68:	4a0a      	ldr	r2, [pc, #40]	; (800fe94 <xTaskPriorityDisinherit+0x6c>)
 800fe6a:	6812      	ldr	r2, [r2, #0]
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d901      	bls.n	800fe74 <xTaskPriorityDisinherit+0x4c>
 800fe70:	4a08      	ldr	r2, [pc, #32]	; (800fe94 <xTaskPriorityDisinherit+0x6c>)
 800fe72:	6013      	str	r3, [r2, #0]
 800fe74:	0098      	lsls	r0, r3, #2
 800fe76:	18c0      	adds	r0, r0, r3
 800fe78:	0080      	lsls	r0, r0, #2
 800fe7a:	4b07      	ldr	r3, [pc, #28]	; (800fe98 <xTaskPriorityDisinherit+0x70>)
 800fe7c:	18c0      	adds	r0, r0, r3
 800fe7e:	0029      	movs	r1, r5
 800fe80:	f7fe fe57 	bl	800eb32 <vListInsertEnd>
					xReturn = pdTRUE;
 800fe84:	2001      	movs	r0, #1
 800fe86:	e000      	b.n	800fe8a <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800fe88:	2000      	movs	r0, #0
	}
 800fe8a:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	e7fc      	b.n	800fe8a <xTaskPriorityDisinherit+0x62>
 800fe90:	20001e40 	.word	0x20001e40
 800fe94:	20001ef0 	.word	0x20001ef0
 800fe98:	20001e4c 	.word	0x20001e4c

0800fe9c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800fe9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe9e:	46ce      	mov	lr, r9
 800fea0:	4647      	mov	r7, r8
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b085      	sub	sp, #20
 800fea6:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800fea8:	2300      	movs	r3, #0
 800feaa:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800feac:	4b30      	ldr	r3, [pc, #192]	; (800ff70 <vTaskList+0xd4>)
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800feb2:	6818      	ldr	r0, [r3, #0]
 800feb4:	0140      	lsls	r0, r0, #5
 800feb6:	f000 fc45 	bl	8010744 <pvPortMalloc>
 800feba:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800febc:	d053      	beq.n	800ff66 <vTaskList+0xca>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800febe:	9903      	ldr	r1, [sp, #12]
 800fec0:	2200      	movs	r2, #0
 800fec2:	f7ff fd5b 	bl	800f97c <uxTaskGetSystemState>
 800fec6:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800fec8:	2300      	movs	r3, #0
 800feca:	9302      	str	r3, [sp, #8]
 800fecc:	9a02      	ldr	r2, [sp, #8]
 800fece:	9b03      	ldr	r3, [sp, #12]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d245      	bcs.n	800ff60 <vTaskList+0xc4>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
										break;

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800fed4:	2343      	movs	r3, #67	; 0x43
 800fed6:	4698      	mov	r8, r3
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fed8:	2741      	movs	r7, #65	; 0x41
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800feda:	4b26      	ldr	r3, [pc, #152]	; (800ff74 <vTaskList+0xd8>)
 800fedc:	4699      	mov	r9, r3
 800fede:	e02a      	b.n	800ff36 <vTaskList+0x9a>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fee0:	3a02      	subs	r2, #2
 800fee2:	1e53      	subs	r3, r2, #1
 800fee4:	419a      	sbcs	r2, r3
 800fee6:	4256      	negs	r6, r2
 800fee8:	43be      	bics	r6, r7
 800feea:	3642      	adds	r6, #66	; 0x42
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800feec:	9b02      	ldr	r3, [sp, #8]
 800feee:	015b      	lsls	r3, r3, #5
 800fef0:	18eb      	adds	r3, r5, r3
 800fef2:	6859      	ldr	r1, [r3, #4]
 800fef4:	0020      	movs	r0, r4
 800fef6:	f7ff fa23 	bl	800f340 <prvWriteNameToBuffer>
 800fefa:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800fefc:	9b02      	ldr	r3, [sp, #8]
 800fefe:	9a02      	ldr	r2, [sp, #8]
 800ff00:	9902      	ldr	r1, [sp, #8]
 800ff02:	015b      	lsls	r3, r3, #5
 800ff04:	18eb      	adds	r3, r5, r3
 800ff06:	691b      	ldr	r3, [r3, #16]
 800ff08:	0149      	lsls	r1, r1, #5
 800ff0a:	1869      	adds	r1, r5, r1
 800ff0c:	6889      	ldr	r1, [r1, #8]
 800ff0e:	9101      	str	r1, [sp, #4]
 800ff10:	0152      	lsls	r2, r2, #5
 800ff12:	18aa      	adds	r2, r5, r2
 800ff14:	8b92      	ldrh	r2, [r2, #28]
 800ff16:	9200      	str	r2, [sp, #0]
 800ff18:	0032      	movs	r2, r6
 800ff1a:	4649      	mov	r1, r9
 800ff1c:	f004 fb76 	bl	801460c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ff20:	0020      	movs	r0, r4
 800ff22:	f7f0 f8f9 	bl	8000118 <strlen>
 800ff26:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ff28:	9b02      	ldr	r3, [sp, #8]
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	9302      	str	r3, [sp, #8]
 800ff2e:	9a02      	ldr	r2, [sp, #8]
 800ff30:	9b03      	ldr	r3, [sp, #12]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d214      	bcs.n	800ff60 <vTaskList+0xc4>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff36:	9b02      	ldr	r3, [sp, #8]
 800ff38:	015b      	lsls	r3, r3, #5
 800ff3a:	18eb      	adds	r3, r5, r3
 800ff3c:	7b1a      	ldrb	r2, [r3, #12]
 800ff3e:	2a03      	cmp	r2, #3
 800ff40:	d00c      	beq.n	800ff5c <vTaskList+0xc0>
 800ff42:	d803      	bhi.n	800ff4c <vTaskList+0xb0>
					case eReady:		cStatus = tskREADY_CHAR;
 800ff44:	2652      	movs	r6, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff46:	2a01      	cmp	r2, #1
 800ff48:	d1ca      	bne.n	800fee0 <vTaskList+0x44>
 800ff4a:	e7cf      	b.n	800feec <vTaskList+0x50>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ff4c:	3a04      	subs	r2, #4
 800ff4e:	1e53      	subs	r3, r2, #1
 800ff50:	419a      	sbcs	r2, r3
 800ff52:	4256      	negs	r6, r2
 800ff54:	4643      	mov	r3, r8
 800ff56:	439e      	bics	r6, r3
 800ff58:	3644      	adds	r6, #68	; 0x44
 800ff5a:	e7c7      	b.n	800feec <vTaskList+0x50>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ff5c:	2653      	movs	r6, #83	; 0x53
 800ff5e:	e7c5      	b.n	800feec <vTaskList+0x50>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ff60:	0028      	movs	r0, r5
 800ff62:	f000 fc81 	bl	8010868 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff66:	b005      	add	sp, #20
 800ff68:	bcc0      	pop	{r6, r7}
 800ff6a:	46b9      	mov	r9, r7
 800ff6c:	46b0      	mov	r8, r6
 800ff6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff70:	20001edc 	.word	0x20001edc
 800ff74:	0801d858 	.word	0x0801d858

0800ff78 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ff78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7a:	46c6      	mov	lr, r8
 800ff7c:	b500      	push	{lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ff82:	2300      	movs	r3, #0
 800ff84:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ff86:	4b2a      	ldr	r3, [pc, #168]	; (8010030 <vTaskGetRunTimeStats+0xb8>)
 800ff88:	681a      	ldr	r2, [r3, #0]
 800ff8a:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ff8c:	6818      	ldr	r0, [r3, #0]
 800ff8e:	0140      	lsls	r0, r0, #5
 800ff90:	f000 fbd8 	bl	8010744 <pvPortMalloc>
 800ff94:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800ff96:	d015      	beq.n	800ffc4 <vTaskGetRunTimeStats+0x4c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ff98:	9903      	ldr	r1, [sp, #12]
 800ff9a:	aa01      	add	r2, sp, #4
 800ff9c:	f7ff fcee 	bl	800f97c <uxTaskGetSystemState>
 800ffa0:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ffa2:	9d01      	ldr	r5, [sp, #4]
 800ffa4:	2164      	movs	r1, #100	; 0x64
 800ffa6:	0028      	movs	r0, r5
 800ffa8:	f7f0 f8d2 	bl	8000150 <__udivsi3>
 800ffac:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ffae:	2d63      	cmp	r5, #99	; 0x63
 800ffb0:	d905      	bls.n	800ffbe <vTaskGetRunTimeStats+0x46>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	9302      	str	r3, [sp, #8]
 800ffb6:	9a02      	ldr	r2, [sp, #8]
 800ffb8:	9b03      	ldr	r3, [sp, #12]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d318      	bcc.n	800fff0 <vTaskGetRunTimeStats+0x78>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ffbe:	0038      	movs	r0, r7
 800ffc0:	f000 fc52 	bl	8010868 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ffc4:	b004      	add	sp, #16
 800ffc6:	bc80      	pop	{r7}
 800ffc8:	46b8      	mov	r8, r7
 800ffca:	bdf0      	pop	{r4, r5, r6, r7, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ffcc:	9b02      	ldr	r3, [sp, #8]
 800ffce:	015b      	lsls	r3, r3, #5
 800ffd0:	18fb      	adds	r3, r7, r3
 800ffd2:	699a      	ldr	r2, [r3, #24]
 800ffd4:	4917      	ldr	r1, [pc, #92]	; (8010034 <vTaskGetRunTimeStats+0xbc>)
 800ffd6:	f004 fb19 	bl	801460c <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800ffda:	0020      	movs	r0, r4
 800ffdc:	f7f0 f89c 	bl	8000118 <strlen>
 800ffe0:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800ffe2:	9b02      	ldr	r3, [sp, #8]
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	9302      	str	r3, [sp, #8]
 800ffe8:	9a02      	ldr	r2, [sp, #8]
 800ffea:	9b03      	ldr	r3, [sp, #12]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d2e6      	bcs.n	800ffbe <vTaskGetRunTimeStats+0x46>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800fff0:	9b02      	ldr	r3, [sp, #8]
 800fff2:	015b      	lsls	r3, r3, #5
 800fff4:	18fb      	adds	r3, r7, r3
 800fff6:	699e      	ldr	r6, [r3, #24]
 800fff8:	9d01      	ldr	r5, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fffa:	9b02      	ldr	r3, [sp, #8]
 800fffc:	015b      	lsls	r3, r3, #5
 800fffe:	18fb      	adds	r3, r7, r3
 8010000:	6859      	ldr	r1, [r3, #4]
 8010002:	0020      	movs	r0, r4
 8010004:	f7ff f99c 	bl	800f340 <prvWriteNameToBuffer>
 8010008:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 801000a:	42ae      	cmp	r6, r5
 801000c:	d3de      	bcc.n	800ffcc <vTaskGetRunTimeStats+0x54>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 801000e:	9b02      	ldr	r3, [sp, #8]
 8010010:	4698      	mov	r8, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010012:	0029      	movs	r1, r5
 8010014:	0030      	movs	r0, r6
 8010016:	f7f0 f89b 	bl	8000150 <__udivsi3>
 801001a:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 801001c:	4642      	mov	r2, r8
 801001e:	0152      	lsls	r2, r2, #5
 8010020:	18ba      	adds	r2, r7, r2
 8010022:	6992      	ldr	r2, [r2, #24]
 8010024:	4904      	ldr	r1, [pc, #16]	; (8010038 <vTaskGetRunTimeStats+0xc0>)
 8010026:	0020      	movs	r0, r4
 8010028:	f004 faf0 	bl	801460c <sprintf>
 801002c:	e7d5      	b.n	800ffda <vTaskGetRunTimeStats+0x62>
 801002e:	46c0      	nop			; (mov r8, r8)
 8010030:	20001edc 	.word	0x20001edc
 8010034:	0801d874 	.word	0x0801d874
 8010038:	0801d868 	.word	0x0801d868

0801003c <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801003c:	4b04      	ldr	r3, [pc, #16]	; (8010050 <uxTaskResetEventItemValue+0x14>)
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	6990      	ldr	r0, [r2, #24]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010042:	6819      	ldr	r1, [r3, #0]
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8010048:	2307      	movs	r3, #7
 801004a:	1a5b      	subs	r3, r3, r1
 801004c:	6193      	str	r3, [r2, #24]

	return uxReturn;
}
 801004e:	4770      	bx	lr
 8010050:	20001e40 	.word	0x20001e40

08010054 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010054:	4b05      	ldr	r3, [pc, #20]	; (801006c <pvTaskIncrementMutexHeldCount+0x18>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d004      	beq.n	8010066 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801005c:	4b03      	ldr	r3, [pc, #12]	; (801006c <pvTaskIncrementMutexHeldCount+0x18>)
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8010062:	3301      	adds	r3, #1
 8010064:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010066:	4b01      	ldr	r3, [pc, #4]	; (801006c <pvTaskIncrementMutexHeldCount+0x18>)
 8010068:	6818      	ldr	r0, [r3, #0]
	}
 801006a:	4770      	bx	lr
 801006c:	20001e40 	.word	0x20001e40

08010070 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010070:	b570      	push	{r4, r5, r6, lr}
 8010072:	0004      	movs	r4, r0
 8010074:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8010076:	f000 fae3 	bl	8010640 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801007a:	4b20      	ldr	r3, [pc, #128]	; (80100fc <ulTaskNotifyTake+0x8c>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010080:	2b00      	cmp	r3, #0
 8010082:	d106      	bne.n	8010092 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8010084:	4b1d      	ldr	r3, [pc, #116]	; (80100fc <ulTaskNotifyTake+0x8c>)
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	235c      	movs	r3, #92	; 0x5c
 801008a:	2101      	movs	r1, #1
 801008c:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 801008e:	2d00      	cmp	r5, #0
 8010090:	d117      	bne.n	80100c2 <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010092:	f000 fae1 	bl	8010658 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010096:	f000 fad3 	bl	8010640 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801009a:	4b18      	ldr	r3, [pc, #96]	; (80100fc <ulTaskNotifyTake+0x8c>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 80100a0:	2d00      	cmp	r5, #0
 80100a2:	d005      	beq.n	80100b0 <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 80100a4:	2c00      	cmp	r4, #0
 80100a6:	d022      	beq.n	80100ee <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80100a8:	4b14      	ldr	r3, [pc, #80]	; (80100fc <ulTaskNotifyTake+0x8c>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2200      	movs	r2, #0
 80100ae:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80100b0:	4b12      	ldr	r3, [pc, #72]	; (80100fc <ulTaskNotifyTake+0x8c>)
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	235c      	movs	r3, #92	; 0x5c
 80100b6:	2100      	movs	r1, #0
 80100b8:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 80100ba:	f000 facd 	bl	8010658 <vPortExitCritical>

		return ulReturn;
	}
 80100be:	0028      	movs	r0, r5
 80100c0:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80100c2:	4b0e      	ldr	r3, [pc, #56]	; (80100fc <ulTaskNotifyTake+0x8c>)
 80100c4:	6818      	ldr	r0, [r3, #0]
 80100c6:	3004      	adds	r0, #4
 80100c8:	f7fe fd55 	bl	800eb76 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 80100cc:	1c6b      	adds	r3, r5, #1
 80100ce:	d007      	beq.n	80100e0 <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 80100d0:	4b0b      	ldr	r3, [pc, #44]	; (8010100 <ulTaskNotifyTake+0x90>)
 80100d2:	6818      	ldr	r0, [r3, #0]
 80100d4:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 80100d6:	f7ff f909 	bl	800f2ec <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80100da:	f000 faa5 	bl	8010628 <vPortYield>
 80100de:	e7d8      	b.n	8010092 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80100e0:	4b06      	ldr	r3, [pc, #24]	; (80100fc <ulTaskNotifyTake+0x8c>)
 80100e2:	6819      	ldr	r1, [r3, #0]
 80100e4:	3104      	adds	r1, #4
 80100e6:	4807      	ldr	r0, [pc, #28]	; (8010104 <ulTaskNotifyTake+0x94>)
 80100e8:	f7fe fd23 	bl	800eb32 <vListInsertEnd>
 80100ec:	e7f5      	b.n	80100da <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 80100ee:	4b03      	ldr	r3, [pc, #12]	; (80100fc <ulTaskNotifyTake+0x8c>)
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80100f4:	3b01      	subs	r3, #1
 80100f6:	6593      	str	r3, [r2, #88]	; 0x58
 80100f8:	e7da      	b.n	80100b0 <ulTaskNotifyTake+0x40>
 80100fa:	46c0      	nop			; (mov r8, r8)
 80100fc:	20001e40 	.word	0x20001e40
 8010100:	20001f60 	.word	0x20001f60
 8010104:	20001f38 	.word	0x20001f38

08010108 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801010a:	0004      	movs	r4, r0
 801010c:	000e      	movs	r6, r1
 801010e:	0015      	movs	r5, r2
 8010110:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 8010112:	2800      	cmp	r0, #0
 8010114:	d015      	beq.n	8010142 <xTaskGenericNotify+0x3a>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8010116:	f000 fa93 	bl	8010640 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801011a:	2f00      	cmp	r7, #0
 801011c:	d001      	beq.n	8010122 <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801011e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010120:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8010122:	225c      	movs	r2, #92	; 0x5c
 8010124:	5ca3      	ldrb	r3, [r4, r2]
 8010126:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 8010128:	2102      	movs	r1, #2
 801012a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 801012c:	2d03      	cmp	r5, #3
 801012e:	d01a      	beq.n	8010166 <xTaskGenericNotify+0x5e>
 8010130:	d809      	bhi.n	8010146 <xTaskGenericNotify+0x3e>
 8010132:	2d01      	cmp	r5, #1
 8010134:	d00d      	beq.n	8010152 <xTaskGenericNotify+0x4a>
 8010136:	2d02      	cmp	r5, #2
 8010138:	d10e      	bne.n	8010158 <xTaskGenericNotify+0x50>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801013a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801013c:	3201      	adds	r2, #1
 801013e:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 8010140:	e00a      	b.n	8010158 <xTaskGenericNotify+0x50>
		configASSERT( xTaskToNotify );
 8010142:	b672      	cpsid	i
 8010144:	e7fe      	b.n	8010144 <xTaskGenericNotify+0x3c>
			switch( eAction )
 8010146:	2d04      	cmp	r5, #4
 8010148:	d106      	bne.n	8010158 <xTaskGenericNotify+0x50>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 801014a:	2b02      	cmp	r3, #2
 801014c:	d02f      	beq.n	80101ae <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801014e:	65a6      	str	r6, [r4, #88]	; 0x58
 8010150:	e002      	b.n	8010158 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 8010152:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010154:	4316      	orrs	r6, r2
 8010156:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8010158:	2501      	movs	r5, #1
 801015a:	2b01      	cmp	r3, #1
 801015c:	d005      	beq.n	801016a <xTaskGenericNotify+0x62>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801015e:	f000 fa7b 	bl	8010658 <vPortExitCritical>

		return xReturn;
	}
 8010162:	0028      	movs	r0, r5
 8010164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue = ulValue;
 8010166:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 8010168:	e7f6      	b.n	8010158 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 801016a:	1d25      	adds	r5, r4, #4
 801016c:	0028      	movs	r0, r5
 801016e:	f7fe fd02 	bl	800eb76 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010172:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010174:	4a0f      	ldr	r2, [pc, #60]	; (80101b4 <xTaskGenericNotify+0xac>)
 8010176:	6812      	ldr	r2, [r2, #0]
 8010178:	4293      	cmp	r3, r2
 801017a:	d901      	bls.n	8010180 <xTaskGenericNotify+0x78>
 801017c:	4a0d      	ldr	r2, [pc, #52]	; (80101b4 <xTaskGenericNotify+0xac>)
 801017e:	6013      	str	r3, [r2, #0]
 8010180:	0098      	lsls	r0, r3, #2
 8010182:	18c0      	adds	r0, r0, r3
 8010184:	0080      	lsls	r0, r0, #2
 8010186:	4b0c      	ldr	r3, [pc, #48]	; (80101b8 <xTaskGenericNotify+0xb0>)
 8010188:	18c0      	adds	r0, r0, r3
 801018a:	0029      	movs	r1, r5
 801018c:	f7fe fcd1 	bl	800eb32 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010190:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010192:	2b00      	cmp	r3, #0
 8010194:	d001      	beq.n	801019a <xTaskGenericNotify+0x92>
 8010196:	b672      	cpsid	i
 8010198:	e7fe      	b.n	8010198 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801019a:	4b08      	ldr	r3, [pc, #32]	; (80101bc <xTaskGenericNotify+0xb4>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80101a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101a2:	2501      	movs	r5, #1
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d9da      	bls.n	801015e <xTaskGenericNotify+0x56>
					taskYIELD_IF_USING_PREEMPTION();
 80101a8:	f000 fa3e 	bl	8010628 <vPortYield>
 80101ac:	e7d7      	b.n	801015e <xTaskGenericNotify+0x56>
						xReturn = pdFAIL;
 80101ae:	2500      	movs	r5, #0
 80101b0:	e7d5      	b.n	801015e <xTaskGenericNotify+0x56>
 80101b2:	46c0      	nop			; (mov r8, r8)
 80101b4:	20001ef0 	.word	0x20001ef0
 80101b8:	20001e4c 	.word	0x20001e4c
 80101bc:	20001e40 	.word	0x20001e40

080101c0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80101c0:	b510      	push	{r4, lr}
 80101c2:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80101c4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80101c6:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80101c8:	4291      	cmp	r1, r2
 80101ca:	d80c      	bhi.n	80101e6 <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80101cc:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80101ce:	2001      	movs	r0, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80101d0:	69a3      	ldr	r3, [r4, #24]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d300      	bcc.n	80101d8 <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80101d6:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80101d8:	1d21      	adds	r1, r4, #4
 80101da:	4b09      	ldr	r3, [pc, #36]	; (8010200 <prvInsertTimerInActiveList+0x40>)
 80101dc:	6818      	ldr	r0, [r3, #0]
 80101de:	f7fe fcb3 	bl	800eb48 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80101e2:	2000      	movs	r0, #0
 80101e4:	e7f7      	b.n	80101d6 <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d202      	bcs.n	80101f0 <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 80101ea:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80101ec:	4299      	cmp	r1, r3
 80101ee:	d2f2      	bcs.n	80101d6 <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80101f0:	1d21      	adds	r1, r4, #4
 80101f2:	4b04      	ldr	r3, [pc, #16]	; (8010204 <prvInsertTimerInActiveList+0x44>)
 80101f4:	6818      	ldr	r0, [r3, #0]
 80101f6:	f7fe fca7 	bl	800eb48 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80101fa:	2000      	movs	r0, #0
 80101fc:	e7eb      	b.n	80101d6 <prvInsertTimerInActiveList+0x16>
 80101fe:	46c0      	nop			; (mov r8, r8)
 8010200:	20001f6c 	.word	0x20001f6c
 8010204:	20001f68 	.word	0x20001f68

08010208 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010208:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801020a:	f000 fa19 	bl	8010640 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801020e:	4b11      	ldr	r3, [pc, #68]	; (8010254 <prvCheckForValidListAndQueue+0x4c>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d002      	beq.n	801021c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010216:	f000 fa1f 	bl	8010658 <vPortExitCritical>
}
 801021a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 801021c:	4d0e      	ldr	r5, [pc, #56]	; (8010258 <prvCheckForValidListAndQueue+0x50>)
 801021e:	0028      	movs	r0, r5
 8010220:	f7fe fc79 	bl	800eb16 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010224:	4c0d      	ldr	r4, [pc, #52]	; (801025c <prvCheckForValidListAndQueue+0x54>)
 8010226:	0020      	movs	r0, r4
 8010228:	f7fe fc75 	bl	800eb16 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801022c:	4b0c      	ldr	r3, [pc, #48]	; (8010260 <prvCheckForValidListAndQueue+0x58>)
 801022e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010230:	4b0c      	ldr	r3, [pc, #48]	; (8010264 <prvCheckForValidListAndQueue+0x5c>)
 8010232:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010234:	2200      	movs	r2, #0
 8010236:	2110      	movs	r1, #16
 8010238:	2004      	movs	r0, #4
 801023a:	f7fe fd71 	bl	800ed20 <xQueueGenericCreate>
 801023e:	4b05      	ldr	r3, [pc, #20]	; (8010254 <prvCheckForValidListAndQueue+0x4c>)
 8010240:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 8010242:	2800      	cmp	r0, #0
 8010244:	d003      	beq.n	801024e <prvCheckForValidListAndQueue+0x46>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010246:	4908      	ldr	r1, [pc, #32]	; (8010268 <prvCheckForValidListAndQueue+0x60>)
 8010248:	f7fe ffae 	bl	800f1a8 <vQueueAddToRegistry>
 801024c:	e7e3      	b.n	8010216 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 801024e:	b672      	cpsid	i
 8010250:	e7fe      	b.n	8010250 <prvCheckForValidListAndQueue+0x48>
 8010252:	46c0      	nop			; (mov r8, r8)
 8010254:	20001f9c 	.word	0x20001f9c
 8010258:	20001f70 	.word	0x20001f70
 801025c:	20001f84 	.word	0x20001f84
 8010260:	20001f68 	.word	0x20001f68
 8010264:	20001f6c 	.word	0x20001f6c
 8010268:	0801d894 	.word	0x0801d894

0801026c <xTimerCreateTimerTask>:
{
 801026c:	b500      	push	{lr}
 801026e:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 8010270:	f7ff ffca 	bl	8010208 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010274:	4b0a      	ldr	r3, [pc, #40]	; (80102a0 <xTimerCreateTimerTask+0x34>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d00d      	beq.n	8010298 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 801027c:	2300      	movs	r3, #0
 801027e:	9303      	str	r3, [sp, #12]
 8010280:	9302      	str	r3, [sp, #8]
 8010282:	9301      	str	r3, [sp, #4]
 8010284:	3303      	adds	r3, #3
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	2300      	movs	r3, #0
 801028a:	22a0      	movs	r2, #160	; 0xa0
 801028c:	4905      	ldr	r1, [pc, #20]	; (80102a4 <xTimerCreateTimerTask+0x38>)
 801028e:	4806      	ldr	r0, [pc, #24]	; (80102a8 <xTimerCreateTimerTask+0x3c>)
 8010290:	f7ff f86c 	bl	800f36c <xTaskGenericCreate>
	configASSERT( xReturn );
 8010294:	2800      	cmp	r0, #0
 8010296:	d101      	bne.n	801029c <xTimerCreateTimerTask+0x30>
 8010298:	b672      	cpsid	i
 801029a:	e7fe      	b.n	801029a <xTimerCreateTimerTask+0x2e>
}
 801029c:	b005      	add	sp, #20
 801029e:	bd00      	pop	{pc}
 80102a0:	20001f9c 	.word	0x20001f9c
 80102a4:	0801d89c 	.word	0x0801d89c
 80102a8:	080103f5 	.word	0x080103f5

080102ac <xTimerCreate>:
{
 80102ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ae:	46c6      	mov	lr, r8
 80102b0:	b500      	push	{lr}
 80102b2:	4680      	mov	r8, r0
 80102b4:	000d      	movs	r5, r1
 80102b6:	0017      	movs	r7, r2
 80102b8:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 80102ba:	2900      	cmp	r1, #0
 80102bc:	d014      	beq.n	80102e8 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80102be:	202c      	movs	r0, #44	; 0x2c
 80102c0:	f000 fa40 	bl	8010744 <pvPortMalloc>
 80102c4:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 80102c6:	d00b      	beq.n	80102e0 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 80102c8:	f7ff ff9e 	bl	8010208 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 80102cc:	4643      	mov	r3, r8
 80102ce:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80102d0:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 80102d2:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 80102d4:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80102d6:	9b06      	ldr	r3, [sp, #24]
 80102d8:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80102da:	1d20      	adds	r0, r4, #4
 80102dc:	f7fe fc26 	bl	800eb2c <vListInitialiseItem>
}
 80102e0:	0020      	movs	r0, r4
 80102e2:	bc80      	pop	{r7}
 80102e4:	46b8      	mov	r8, r7
 80102e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80102e8:	b672      	cpsid	i
 80102ea:	e7fe      	b.n	80102ea <xTimerCreate+0x3e>

080102ec <xTimerGenericCommand>:
{
 80102ec:	b530      	push	{r4, r5, lr}
 80102ee:	b085      	sub	sp, #20
 80102f0:	0004      	movs	r4, r0
 80102f2:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 80102f4:	4b12      	ldr	r3, [pc, #72]	; (8010340 <xTimerGenericCommand+0x54>)
 80102f6:	6818      	ldr	r0, [r3, #0]
 80102f8:	2800      	cmp	r0, #0
 80102fa:	d01f      	beq.n	801033c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 80102fc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80102fe:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8010300:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010302:	2905      	cmp	r1, #5
 8010304:	dc13      	bgt.n	801032e <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010306:	f7ff fd41 	bl	800fd8c <xTaskGetSchedulerState>
 801030a:	2802      	cmp	r0, #2
 801030c:	d007      	beq.n	801031e <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801030e:	4b0c      	ldr	r3, [pc, #48]	; (8010340 <xTimerGenericCommand+0x54>)
 8010310:	6818      	ldr	r0, [r3, #0]
 8010312:	2300      	movs	r3, #0
 8010314:	2200      	movs	r2, #0
 8010316:	4669      	mov	r1, sp
 8010318:	f7fe fd3b 	bl	800ed92 <xQueueGenericSend>
 801031c:	e00c      	b.n	8010338 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801031e:	4b08      	ldr	r3, [pc, #32]	; (8010340 <xTimerGenericCommand+0x54>)
 8010320:	6818      	ldr	r0, [r3, #0]
 8010322:	2300      	movs	r3, #0
 8010324:	9a08      	ldr	r2, [sp, #32]
 8010326:	4669      	mov	r1, sp
 8010328:	f7fe fd33 	bl	800ed92 <xQueueGenericSend>
 801032c:	e004      	b.n	8010338 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801032e:	2300      	movs	r3, #0
 8010330:	002a      	movs	r2, r5
 8010332:	4669      	mov	r1, sp
 8010334:	f7fe fdc9 	bl	800eeca <xQueueGenericSendFromISR>
}
 8010338:	b005      	add	sp, #20
 801033a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 801033c:	2000      	movs	r0, #0
	return xReturn;
 801033e:	e7fb      	b.n	8010338 <xTimerGenericCommand+0x4c>
 8010340:	20001f9c 	.word	0x20001f9c

08010344 <prvSampleTimeNow>:
{
 8010344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010346:	46d6      	mov	lr, sl
 8010348:	464f      	mov	r7, r9
 801034a:	4646      	mov	r6, r8
 801034c:	b5c0      	push	{r6, r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	0006      	movs	r6, r0
	xTimeNow = xTaskGetTickCount();
 8010352:	f7ff f9a5 	bl	800f6a0 <xTaskGetTickCount>
 8010356:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8010358:	4b23      	ldr	r3, [pc, #140]	; (80103e8 <prvSampleTimeNow+0xa4>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4283      	cmp	r3, r0
 801035e:	d80a      	bhi.n	8010376 <prvSampleTimeNow+0x32>
		*pxTimerListsWereSwitched = pdFALSE;
 8010360:	2300      	movs	r3, #0
 8010362:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8010364:	4b20      	ldr	r3, [pc, #128]	; (80103e8 <prvSampleTimeNow+0xa4>)
 8010366:	601c      	str	r4, [r3, #0]
}
 8010368:	0020      	movs	r0, r4
 801036a:	b004      	add	sp, #16
 801036c:	bce0      	pop	{r5, r6, r7}
 801036e:	46ba      	mov	sl, r7
 8010370:	46b1      	mov	r9, r6
 8010372:	46a8      	mov	r8, r5
 8010374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010376:	4b1d      	ldr	r3, [pc, #116]	; (80103ec <prvSampleTimeNow+0xa8>)
 8010378:	4698      	mov	r8, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801037a:	2300      	movs	r3, #0
 801037c:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801037e:	4643      	mov	r3, r8
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	2a00      	cmp	r2, #0
 8010386:	d026      	beq.n	80103d6 <prvSampleTimeNow+0x92>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801038e:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010390:	1d2f      	adds	r7, r5, #4
 8010392:	0038      	movs	r0, r7
 8010394:	f7fe fbef 	bl	800eb76 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010398:	0028      	movs	r0, r5
 801039a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801039c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801039e:	69eb      	ldr	r3, [r5, #28]
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d1ec      	bne.n	801037e <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80103a4:	69ab      	ldr	r3, [r5, #24]
 80103a6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80103a8:	459a      	cmp	sl, r3
 80103aa:	d209      	bcs.n	80103c0 <prvSampleTimeNow+0x7c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80103ac:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80103ae:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103b0:	4b0e      	ldr	r3, [pc, #56]	; (80103ec <prvSampleTimeNow+0xa8>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	9303      	str	r3, [sp, #12]
 80103b6:	0039      	movs	r1, r7
 80103b8:	0018      	movs	r0, r3
 80103ba:	f7fe fbc5 	bl	800eb48 <vListInsert>
 80103be:	e7de      	b.n	801037e <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103c0:	464b      	mov	r3, r9
 80103c2:	9300      	str	r3, [sp, #0]
 80103c4:	4652      	mov	r2, sl
 80103c6:	4649      	mov	r1, r9
 80103c8:	0028      	movs	r0, r5
 80103ca:	f7ff ff8f 	bl	80102ec <xTimerGenericCommand>
				configASSERT( xResult );
 80103ce:	2800      	cmp	r0, #0
 80103d0:	d1d5      	bne.n	801037e <prvSampleTimeNow+0x3a>
 80103d2:	b672      	cpsid	i
 80103d4:	e7fe      	b.n	80103d4 <prvSampleTimeNow+0x90>
	pxCurrentTimerList = pxOverflowTimerList;
 80103d6:	4a06      	ldr	r2, [pc, #24]	; (80103f0 <prvSampleTimeNow+0xac>)
 80103d8:	4904      	ldr	r1, [pc, #16]	; (80103ec <prvSampleTimeNow+0xa8>)
 80103da:	6810      	ldr	r0, [r2, #0]
 80103dc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80103de:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80103e0:	2301      	movs	r3, #1
 80103e2:	6033      	str	r3, [r6, #0]
 80103e4:	e7be      	b.n	8010364 <prvSampleTimeNow+0x20>
 80103e6:	46c0      	nop			; (mov r8, r8)
 80103e8:	20001f98 	.word	0x20001f98
 80103ec:	20001f68 	.word	0x20001f68
 80103f0:	20001f6c 	.word	0x20001f6c

080103f4 <prvTimerTask>:
{
 80103f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103f6:	b08d      	sub	sp, #52	; 0x34
 80103f8:	4d57      	ldr	r5, [pc, #348]	; (8010558 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80103fa:	4b58      	ldr	r3, [pc, #352]	; (801055c <prvTimerTask+0x168>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	681e      	ldr	r6, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010400:	2e00      	cmp	r6, #0
 8010402:	d100      	bne.n	8010406 <prvTimerTask+0x12>
 8010404:	e09b      	b.n	801053e <prvTimerTask+0x14a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 801040a:	f7ff f941 	bl	800f690 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801040e:	a808      	add	r0, sp, #32
 8010410:	f7ff ff98 	bl	8010344 <prvSampleTimeNow>
 8010414:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010416:	9b08      	ldr	r3, [sp, #32]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d000      	beq.n	801041e <prvTimerTask+0x2a>
 801041c:	e099      	b.n	8010552 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801041e:	4286      	cmp	r6, r0
 8010420:	d90a      	bls.n	8010438 <prvTimerTask+0x44>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8010422:	1b31      	subs	r1, r6, r4
 8010424:	4b4e      	ldr	r3, [pc, #312]	; (8010560 <prvTimerTask+0x16c>)
 8010426:	6818      	ldr	r0, [r3, #0]
 8010428:	f7fe fed2 	bl	800f1d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801042c:	f7ff f9d8 	bl	800f7e0 <xTaskResumeAll>
 8010430:	2800      	cmp	r0, #0
 8010432:	d025      	beq.n	8010480 <prvTimerTask+0x8c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010434:	4c4a      	ldr	r4, [pc, #296]	; (8010560 <prvTimerTask+0x16c>)
}
 8010436:	e033      	b.n	80104a0 <prvTimerTask+0xac>
				( void ) xTaskResumeAll();
 8010438:	f7ff f9d2 	bl	800f7e0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801043c:	4b47      	ldr	r3, [pc, #284]	; (801055c <prvTimerTask+0x168>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010444:	1d38      	adds	r0, r7, #4
 8010446:	f7fe fb96 	bl	800eb76 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	2b01      	cmp	r3, #1
 801044e:	d003      	beq.n	8010458 <prvTimerTask+0x64>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010452:	0038      	movs	r0, r7
 8010454:	4798      	blx	r3
}
 8010456:	e7ed      	b.n	8010434 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	18f1      	adds	r1, r6, r3
 801045c:	0033      	movs	r3, r6
 801045e:	0022      	movs	r2, r4
 8010460:	0038      	movs	r0, r7
 8010462:	f7ff fead 	bl	80101c0 <prvInsertTimerInActiveList>
 8010466:	2801      	cmp	r0, #1
 8010468:	d1f2      	bne.n	8010450 <prvTimerTask+0x5c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801046a:	2100      	movs	r1, #0
 801046c:	9100      	str	r1, [sp, #0]
 801046e:	000b      	movs	r3, r1
 8010470:	0032      	movs	r2, r6
 8010472:	0038      	movs	r0, r7
 8010474:	f7ff ff3a 	bl	80102ec <xTimerGenericCommand>
			configASSERT( xResult );
 8010478:	2800      	cmp	r0, #0
 801047a:	d1e9      	bne.n	8010450 <prvTimerTask+0x5c>
 801047c:	b672      	cpsid	i
 801047e:	e7fe      	b.n	801047e <prvTimerTask+0x8a>
					portYIELD_WITHIN_API();
 8010480:	f000 f8d2 	bl	8010628 <vPortYield>
 8010484:	e7d6      	b.n	8010434 <prvTimerTask+0x40>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010488:	9303      	str	r3, [sp, #12]
 801048a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801048c:	9304      	str	r3, [sp, #16]
 801048e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010490:	9305      	str	r3, [sp, #20]
 8010492:	9903      	ldr	r1, [sp, #12]
 8010494:	9804      	ldr	r0, [sp, #16]
 8010496:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010498:	9b08      	ldr	r3, [sp, #32]
 801049a:	9303      	str	r3, [sp, #12]
 801049c:	2b00      	cmp	r3, #0
 801049e:	da0b      	bge.n	80104b8 <prvTimerTask+0xc4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80104a0:	2300      	movs	r3, #0
 80104a2:	2200      	movs	r2, #0
 80104a4:	a908      	add	r1, sp, #32
 80104a6:	6820      	ldr	r0, [r4, #0]
 80104a8:	f7fe fd93 	bl	800efd2 <xQueueGenericReceive>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d0a4      	beq.n	80103fa <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80104b0:	9b08      	ldr	r3, [sp, #32]
 80104b2:	9303      	str	r3, [sp, #12]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	dbe6      	blt.n	8010486 <prvTimerTask+0x92>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80104b8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80104ba:	6973      	ldr	r3, [r6, #20]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d002      	beq.n	80104c6 <prvTimerTask+0xd2>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80104c0:	1d30      	adds	r0, r6, #4
 80104c2:	f7fe fb58 	bl	800eb76 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104c6:	a807      	add	r0, sp, #28
 80104c8:	f7ff ff3c 	bl	8010344 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80104cc:	9b08      	ldr	r3, [sp, #32]
 80104ce:	9303      	str	r3, [sp, #12]
 80104d0:	2b09      	cmp	r3, #9
 80104d2:	d8e5      	bhi.n	80104a0 <prvTimerTask+0xac>
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	58eb      	ldr	r3, [r5, r3]
 80104d8:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 80104da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104dc:	69b2      	ldr	r2, [r6, #24]
 80104de:	4694      	mov	ip, r2
 80104e0:	4463      	add	r3, ip
 80104e2:	0019      	movs	r1, r3
 80104e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e6:	0002      	movs	r2, r0
 80104e8:	0030      	movs	r0, r6
 80104ea:	f7ff fe69 	bl	80101c0 <prvInsertTimerInActiveList>
 80104ee:	2801      	cmp	r0, #1
 80104f0:	d1d6      	bne.n	80104a0 <prvTimerTask+0xac>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80104f2:	0030      	movs	r0, r6
 80104f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80104f6:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80104f8:	69f3      	ldr	r3, [r6, #28]
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d1d0      	bne.n	80104a0 <prvTimerTask+0xac>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80104fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010500:	69b1      	ldr	r1, [r6, #24]
 8010502:	468c      	mov	ip, r1
 8010504:	4463      	add	r3, ip
 8010506:	001a      	movs	r2, r3
 8010508:	2300      	movs	r3, #0
 801050a:	9300      	str	r3, [sp, #0]
 801050c:	2100      	movs	r1, #0
 801050e:	0030      	movs	r0, r6
 8010510:	f7ff feec 	bl	80102ec <xTimerGenericCommand>
							configASSERT( xResult );
 8010514:	2800      	cmp	r0, #0
 8010516:	d1c3      	bne.n	80104a0 <prvTimerTask+0xac>
 8010518:	b672      	cpsid	i
 801051a:	e7fe      	b.n	801051a <prvTimerTask+0x126>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801051c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801051e:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010520:	2900      	cmp	r1, #0
 8010522:	d006      	beq.n	8010532 <prvTimerTask+0x13e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010524:	1841      	adds	r1, r0, r1
 8010526:	0003      	movs	r3, r0
 8010528:	0002      	movs	r2, r0
 801052a:	0030      	movs	r0, r6
 801052c:	f7ff fe48 	bl	80101c0 <prvInsertTimerInActiveList>
					break;
 8010530:	e7b6      	b.n	80104a0 <prvTimerTask+0xac>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010532:	b672      	cpsid	i
 8010534:	e7fe      	b.n	8010534 <prvTimerTask+0x140>
					vPortFree( pxTimer );
 8010536:	0030      	movs	r0, r6
 8010538:	f000 f996 	bl	8010868 <vPortFree>
					break;
 801053c:	e7b0      	b.n	80104a0 <prvTimerTask+0xac>
	vTaskSuspendAll();
 801053e:	f7ff f8a7 	bl	800f690 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010542:	a808      	add	r0, sp, #32
 8010544:	f7ff fefe 	bl	8010344 <prvSampleTimeNow>
 8010548:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 801054a:	9b08      	ldr	r3, [sp, #32]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d100      	bne.n	8010552 <prvTimerTask+0x15e>
 8010550:	e767      	b.n	8010422 <prvTimerTask+0x2e>
			( void ) xTaskResumeAll();
 8010552:	f7ff f945 	bl	800f7e0 <xTaskResumeAll>
 8010556:	e76d      	b.n	8010434 <prvTimerTask+0x40>
 8010558:	0801d8a4 	.word	0x0801d8a4
 801055c:	20001f68 	.word	0x20001f68
 8010560:	20001f9c 	.word	0x20001f9c

08010564 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010564:	b510      	push	{r4, lr}
 8010566:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8010568:	d006      	beq.n	8010578 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 801056a:	f000 f869 	bl	8010640 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801056e:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8010570:	f000 f872 	bl	8010658 <vPortExitCritical>

	return pvReturn;
}
 8010574:	0020      	movs	r0, r4
 8010576:	bd10      	pop	{r4, pc}
	configASSERT( xTimer );
 8010578:	b672      	cpsid	i
 801057a:	e7fe      	b.n	801057a <pvTimerGetTimerID+0x16>

0801057c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801057c:	4b03      	ldr	r3, [pc, #12]	; (801058c <prvTaskExitError+0x10>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	3301      	adds	r3, #1
 8010582:	d001      	beq.n	8010588 <prvTaskExitError+0xc>
 8010584:	b672      	cpsid	i
 8010586:	e7fe      	b.n	8010586 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8010588:	b672      	cpsid	i
	for( ;; );
 801058a:	e7fe      	b.n	801058a <prvTaskExitError+0xe>
 801058c:	200000a4 	.word	0x200000a4

08010590 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010590:	4a06      	ldr	r2, [pc, #24]	; (80105ac <pxCurrentTCBConst2>)
 8010592:	6813      	ldr	r3, [r2, #0]
 8010594:	6818      	ldr	r0, [r3, #0]
 8010596:	3020      	adds	r0, #32
 8010598:	f380 8809 	msr	PSP, r0
 801059c:	2002      	movs	r0, #2
 801059e:	f380 8814 	msr	CONTROL, r0
 80105a2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80105a4:	46ae      	mov	lr, r5
 80105a6:	b662      	cpsie	i
 80105a8:	bd00      	pop	{pc}
 80105aa:	46c0      	nop			; (mov r8, r8)

080105ac <pxCurrentTCBConst2>:
 80105ac:	20001e40 	.word	0x20001e40

080105b0 <pxPortInitialiseStack>:
{
 80105b0:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80105b2:	1f03      	subs	r3, r0, #4
 80105b4:	2480      	movs	r4, #128	; 0x80
 80105b6:	0464      	lsls	r4, r4, #17
 80105b8:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80105ba:	3b04      	subs	r3, #4
 80105bc:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80105be:	3b04      	subs	r3, #4
 80105c0:	4902      	ldr	r1, [pc, #8]	; (80105cc <pxPortInitialiseStack+0x1c>)
 80105c2:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80105c4:	3b14      	subs	r3, #20
 80105c6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80105c8:	3840      	subs	r0, #64	; 0x40
}
 80105ca:	bd10      	pop	{r4, pc}
 80105cc:	0801057d 	.word	0x0801057d

080105d0 <SVC_Handler>:
}
 80105d0:	4770      	bx	lr
	...

080105d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105d4:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80105d6:	4b0f      	ldr	r3, [pc, #60]	; (8010614 <xPortStartScheduler+0x40>)
 80105d8:	6819      	ldr	r1, [r3, #0]
 80105da:	22ff      	movs	r2, #255	; 0xff
 80105dc:	0412      	lsls	r2, r2, #16
 80105de:	430a      	orrs	r2, r1
 80105e0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80105e2:	6819      	ldr	r1, [r3, #0]
 80105e4:	22ff      	movs	r2, #255	; 0xff
 80105e6:	0612      	lsls	r2, r2, #24
 80105e8:	430a      	orrs	r2, r1
 80105ea:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80105ec:	4b0a      	ldr	r3, [pc, #40]	; (8010618 <xPortStartScheduler+0x44>)
 80105ee:	6818      	ldr	r0, [r3, #0]
 80105f0:	21fa      	movs	r1, #250	; 0xfa
 80105f2:	0089      	lsls	r1, r1, #2
 80105f4:	f7ef fdac 	bl	8000150 <__udivsi3>
 80105f8:	3801      	subs	r0, #1
 80105fa:	4b08      	ldr	r3, [pc, #32]	; (801061c <xPortStartScheduler+0x48>)
 80105fc:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80105fe:	4b08      	ldr	r3, [pc, #32]	; (8010620 <xPortStartScheduler+0x4c>)
 8010600:	2207      	movs	r2, #7
 8010602:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8010604:	4b07      	ldr	r3, [pc, #28]	; (8010624 <xPortStartScheduler+0x50>)
 8010606:	2200      	movs	r2, #0
 8010608:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 801060a:	f7ff ffc1 	bl	8010590 <vPortStartFirstTask>
	prvTaskExitError();
 801060e:	f7ff ffb5 	bl	801057c <prvTaskExitError>
 8010612:	46c0      	nop			; (mov r8, r8)
 8010614:	e000ed20 	.word	0xe000ed20
 8010618:	20000090 	.word	0x20000090
 801061c:	e000e014 	.word	0xe000e014
 8010620:	e000e010 	.word	0xe000e010
 8010624:	200000a4 	.word	0x200000a4

08010628 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010628:	4b04      	ldr	r3, [pc, #16]	; (801063c <vPortYield+0x14>)
 801062a:	2280      	movs	r2, #128	; 0x80
 801062c:	0552      	lsls	r2, r2, #21
 801062e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010630:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010634:	f3bf 8f6f 	isb	sy
}
 8010638:	4770      	bx	lr
 801063a:	46c0      	nop			; (mov r8, r8)
 801063c:	e000ed04 	.word	0xe000ed04

08010640 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010640:	b672      	cpsid	i
    uxCriticalNesting++;
 8010642:	4a04      	ldr	r2, [pc, #16]	; (8010654 <vPortEnterCritical+0x14>)
 8010644:	6813      	ldr	r3, [r2, #0]
 8010646:	3301      	adds	r3, #1
 8010648:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 801064a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801064e:	f3bf 8f6f 	isb	sy
}
 8010652:	4770      	bx	lr
 8010654:	200000a4 	.word	0x200000a4

08010658 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010658:	4b06      	ldr	r3, [pc, #24]	; (8010674 <vPortExitCritical+0x1c>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d101      	bne.n	8010664 <vPortExitCritical+0xc>
 8010660:	b672      	cpsid	i
 8010662:	e7fe      	b.n	8010662 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8010664:	3b01      	subs	r3, #1
 8010666:	4a03      	ldr	r2, [pc, #12]	; (8010674 <vPortExitCritical+0x1c>)
 8010668:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 801066a:	2b00      	cmp	r3, #0
 801066c:	d100      	bne.n	8010670 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 801066e:	b662      	cpsie	i
}
 8010670:	4770      	bx	lr
 8010672:	46c0      	nop			; (mov r8, r8)
 8010674:	200000a4 	.word	0x200000a4

08010678 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8010678:	f3ef 8010 	mrs	r0, PRIMASK
 801067c:	b672      	cpsid	i
 801067e:	4770      	bx	lr
}
 8010680:	2000      	movs	r0, #0

08010682 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8010682:	f380 8810 	msr	PRIMASK, r0
 8010686:	4770      	bx	lr

08010688 <PendSV_Handler>:
	__asm volatile
 8010688:	f3ef 8009 	mrs	r0, PSP
 801068c:	4b0e      	ldr	r3, [pc, #56]	; (80106c8 <pxCurrentTCBConst>)
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	3820      	subs	r0, #32
 8010692:	6010      	str	r0, [r2, #0]
 8010694:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010696:	4644      	mov	r4, r8
 8010698:	464d      	mov	r5, r9
 801069a:	4656      	mov	r6, sl
 801069c:	465f      	mov	r7, fp
 801069e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80106a0:	b508      	push	{r3, lr}
 80106a2:	b672      	cpsid	i
 80106a4:	f7ff f9bc 	bl	800fa20 <vTaskSwitchContext>
 80106a8:	b662      	cpsie	i
 80106aa:	bc0c      	pop	{r2, r3}
 80106ac:	6811      	ldr	r1, [r2, #0]
 80106ae:	6808      	ldr	r0, [r1, #0]
 80106b0:	3010      	adds	r0, #16
 80106b2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80106b4:	46a0      	mov	r8, r4
 80106b6:	46a9      	mov	r9, r5
 80106b8:	46b2      	mov	sl, r6
 80106ba:	46bb      	mov	fp, r7
 80106bc:	f380 8809 	msr	PSP, r0
 80106c0:	3820      	subs	r0, #32
 80106c2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80106c4:	4718      	bx	r3
 80106c6:	46c0      	nop			; (mov r8, r8)

080106c8 <pxCurrentTCBConst>:
 80106c8:	20001e40 	.word	0x20001e40

080106cc <xPortSysTickHandler>:
{
 80106cc:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80106ce:	f7ff ffd3 	bl	8010678 <ulSetInterruptMaskFromISR>
 80106d2:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 80106d4:	f7fe fff0 	bl	800f6b8 <xTaskIncrementTick>
 80106d8:	2800      	cmp	r0, #0
 80106da:	d003      	beq.n	80106e4 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80106dc:	4b03      	ldr	r3, [pc, #12]	; (80106ec <xPortSysTickHandler+0x20>)
 80106de:	2280      	movs	r2, #128	; 0x80
 80106e0:	0552      	lsls	r2, r2, #21
 80106e2:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80106e4:	0020      	movs	r0, r4
 80106e6:	f7ff ffcc 	bl	8010682 <vClearInterruptMaskFromISR>
}
 80106ea:	bd10      	pop	{r4, pc}
 80106ec:	e000ed04 	.word	0xe000ed04

080106f0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80106f0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80106f2:	4b12      	ldr	r3, [pc, #72]	; (801073c <prvInsertBlockIntoFreeList+0x4c>)
 80106f4:	001a      	movs	r2, r3
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	4283      	cmp	r3, r0
 80106fa:	d3fb      	bcc.n	80106f4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80106fc:	6851      	ldr	r1, [r2, #4]
 80106fe:	1854      	adds	r4, r2, r1
 8010700:	42a0      	cmp	r0, r4
 8010702:	d008      	beq.n	8010716 <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010704:	6841      	ldr	r1, [r0, #4]
 8010706:	1844      	adds	r4, r0, r1
 8010708:	42a3      	cmp	r3, r4
 801070a:	d009      	beq.n	8010720 <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801070c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801070e:	4290      	cmp	r0, r2
 8010710:	d000      	beq.n	8010714 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010712:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010714:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010716:	6840      	ldr	r0, [r0, #4]
 8010718:	1841      	adds	r1, r0, r1
 801071a:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801071c:	0010      	movs	r0, r2
 801071e:	e7f1      	b.n	8010704 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010720:	4c07      	ldr	r4, [pc, #28]	; (8010740 <prvInsertBlockIntoFreeList+0x50>)
 8010722:	6824      	ldr	r4, [r4, #0]
 8010724:	42a3      	cmp	r3, r4
 8010726:	d006      	beq.n	8010736 <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	1859      	adds	r1, r3, r1
 801072c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801072e:	6813      	ldr	r3, [r2, #0]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	6003      	str	r3, [r0, #0]
 8010734:	e7eb      	b.n	801070e <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010736:	6004      	str	r4, [r0, #0]
 8010738:	e7e9      	b.n	801070e <prvInsertBlockIntoFreeList+0x1e>
 801073a:	46c0      	nop			; (mov r8, r8)
 801073c:	200069e8 	.word	0x200069e8
 8010740:	20001fa0 	.word	0x20001fa0

08010744 <pvPortMalloc>:
{
 8010744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010746:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010748:	f7fe ffa2 	bl	800f690 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801074c:	4b3f      	ldr	r3, [pc, #252]	; (801084c <pvPortMalloc+0x108>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d015      	beq.n	8010780 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010754:	4b3e      	ldr	r3, [pc, #248]	; (8010850 <pvPortMalloc+0x10c>)
 8010756:	681e      	ldr	r6, [r3, #0]
 8010758:	4234      	tst	r4, r6
 801075a:	d135      	bne.n	80107c8 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 801075c:	2c00      	cmp	r4, #0
 801075e:	d03a      	beq.n	80107d6 <pvPortMalloc+0x92>
				xWantedSize += xHeapStructSize;
 8010760:	0023      	movs	r3, r4
 8010762:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010764:	0762      	lsls	r2, r4, #29
 8010766:	d002      	beq.n	801076e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010768:	2207      	movs	r2, #7
 801076a:	4393      	bics	r3, r2
 801076c:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801076e:	2b00      	cmp	r3, #0
 8010770:	d031      	beq.n	80107d6 <pvPortMalloc+0x92>
 8010772:	4a38      	ldr	r2, [pc, #224]	; (8010854 <pvPortMalloc+0x110>)
 8010774:	6815      	ldr	r5, [r2, #0]
 8010776:	429d      	cmp	r5, r3
 8010778:	d330      	bcc.n	80107dc <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 801077a:	4a37      	ldr	r2, [pc, #220]	; (8010858 <pvPortMalloc+0x114>)
 801077c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801077e:	e032      	b.n	80107e6 <pvPortMalloc+0xa2>
	ulAddress = ( uint32_t ) ucHeap;
 8010780:	4a36      	ldr	r2, [pc, #216]	; (801085c <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010782:	0753      	lsls	r3, r2, #29
 8010784:	d01e      	beq.n	80107c4 <pvPortMalloc+0x80>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8010786:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010788:	2307      	movs	r3, #7
 801078a:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 801078c:	4b34      	ldr	r3, [pc, #208]	; (8010860 <pvPortMalloc+0x11c>)
 801078e:	18d3      	adds	r3, r2, r3
 8010790:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010792:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010794:	4830      	ldr	r0, [pc, #192]	; (8010858 <pvPortMalloc+0x114>)
 8010796:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010798:	2100      	movs	r1, #0
 801079a:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 801079c:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 801079e:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80107a0:	2007      	movs	r0, #7
 80107a2:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 80107a4:	4829      	ldr	r0, [pc, #164]	; (801084c <pvPortMalloc+0x108>)
 80107a6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80107a8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107aa:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80107ac:	1a99      	subs	r1, r3, r2
 80107ae:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80107b0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107b2:	4b2c      	ldr	r3, [pc, #176]	; (8010864 <pvPortMalloc+0x120>)
 80107b4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107b6:	4b27      	ldr	r3, [pc, #156]	; (8010854 <pvPortMalloc+0x110>)
 80107b8:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80107ba:	4b25      	ldr	r3, [pc, #148]	; (8010850 <pvPortMalloc+0x10c>)
 80107bc:	2280      	movs	r2, #128	; 0x80
 80107be:	0612      	lsls	r2, r2, #24
 80107c0:	601a      	str	r2, [r3, #0]
}
 80107c2:	e7c7      	b.n	8010754 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80107c4:	4b26      	ldr	r3, [pc, #152]	; (8010860 <pvPortMalloc+0x11c>)
 80107c6:	e7e5      	b.n	8010794 <pvPortMalloc+0x50>
	( void ) xTaskResumeAll();
 80107c8:	f7ff f80a 	bl	800f7e0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80107cc:	f7fd f9e6 	bl	800db9c <vApplicationMallocFailedHook>
 80107d0:	2700      	movs	r7, #0
}
 80107d2:	0038      	movs	r0, r7
 80107d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 80107d6:	f7ff f803 	bl	800f7e0 <xTaskResumeAll>
		if( pvReturn == NULL )
 80107da:	e7f7      	b.n	80107cc <pvPortMalloc+0x88>
	( void ) xTaskResumeAll();
 80107dc:	f7ff f800 	bl	800f7e0 <xTaskResumeAll>
		if( pvReturn == NULL )
 80107e0:	e7f4      	b.n	80107cc <pvPortMalloc+0x88>
 80107e2:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80107e4:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107e6:	6861      	ldr	r1, [r4, #4]
 80107e8:	4299      	cmp	r1, r3
 80107ea:	d202      	bcs.n	80107f2 <pvPortMalloc+0xae>
 80107ec:	6821      	ldr	r1, [r4, #0]
 80107ee:	2900      	cmp	r1, #0
 80107f0:	d1f7      	bne.n	80107e2 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 80107f2:	4916      	ldr	r1, [pc, #88]	; (801084c <pvPortMalloc+0x108>)
 80107f4:	6809      	ldr	r1, [r1, #0]
 80107f6:	42a1      	cmp	r1, r4
 80107f8:	d00c      	beq.n	8010814 <pvPortMalloc+0xd0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80107fa:	6817      	ldr	r7, [r2, #0]
 80107fc:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80107fe:	6821      	ldr	r1, [r4, #0]
 8010800:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010802:	6862      	ldr	r2, [r4, #4]
 8010804:	1ad2      	subs	r2, r2, r3
 8010806:	2a10      	cmp	r2, #16
 8010808:	d90b      	bls.n	8010822 <pvPortMalloc+0xde>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801080a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801080c:	0741      	lsls	r1, r0, #29
 801080e:	d004      	beq.n	801081a <pvPortMalloc+0xd6>
 8010810:	b672      	cpsid	i
 8010812:	e7fe      	b.n	8010812 <pvPortMalloc+0xce>
	( void ) xTaskResumeAll();
 8010814:	f7fe ffe4 	bl	800f7e0 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010818:	e7d8      	b.n	80107cc <pvPortMalloc+0x88>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801081a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801081c:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 801081e:	f7ff ff67 	bl	80106f0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010822:	6862      	ldr	r2, [r4, #4]
 8010824:	1aad      	subs	r5, r5, r2
 8010826:	490b      	ldr	r1, [pc, #44]	; (8010854 <pvPortMalloc+0x110>)
 8010828:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801082a:	490e      	ldr	r1, [pc, #56]	; (8010864 <pvPortMalloc+0x120>)
 801082c:	6809      	ldr	r1, [r1, #0]
 801082e:	428d      	cmp	r5, r1
 8010830:	d201      	bcs.n	8010836 <pvPortMalloc+0xf2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010832:	490c      	ldr	r1, [pc, #48]	; (8010864 <pvPortMalloc+0x120>)
 8010834:	600d      	str	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010836:	4316      	orrs	r6, r2
 8010838:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801083a:	2300      	movs	r3, #0
 801083c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 801083e:	f7fe ffcf 	bl	800f7e0 <xTaskResumeAll>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010842:	077b      	lsls	r3, r7, #29
 8010844:	d0c5      	beq.n	80107d2 <pvPortMalloc+0x8e>
 8010846:	b672      	cpsid	i
 8010848:	e7fe      	b.n	8010848 <pvPortMalloc+0x104>
 801084a:	46c0      	nop			; (mov r8, r8)
 801084c:	20001fa0 	.word	0x20001fa0
 8010850:	200069dc 	.word	0x200069dc
 8010854:	200069e0 	.word	0x200069e0
 8010858:	200069e8 	.word	0x200069e8
 801085c:	20001fa4 	.word	0x20001fa4
 8010860:	00004a38 	.word	0x00004a38
 8010864:	200069e4 	.word	0x200069e4

08010868 <vPortFree>:
{
 8010868:	b510      	push	{r4, lr}
	if( pv != NULL )
 801086a:	2800      	cmp	r0, #0
 801086c:	d020      	beq.n	80108b0 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801086e:	0003      	movs	r3, r0
 8010870:	3b08      	subs	r3, #8
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	4a0f      	ldr	r2, [pc, #60]	; (80108b4 <vPortFree+0x4c>)
 8010876:	6812      	ldr	r2, [r2, #0]
 8010878:	421a      	tst	r2, r3
 801087a:	d101      	bne.n	8010880 <vPortFree+0x18>
 801087c:	b672      	cpsid	i
 801087e:	e7fe      	b.n	801087e <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010880:	0001      	movs	r1, r0
 8010882:	3908      	subs	r1, #8
 8010884:	6809      	ldr	r1, [r1, #0]
 8010886:	2900      	cmp	r1, #0
 8010888:	d001      	beq.n	801088e <vPortFree+0x26>
 801088a:	b672      	cpsid	i
 801088c:	e7fe      	b.n	801088c <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801088e:	3808      	subs	r0, #8
 8010890:	0004      	movs	r4, r0
 8010892:	4393      	bics	r3, r2
 8010894:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8010896:	f7fe fefb 	bl	800f690 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801089a:	4a07      	ldr	r2, [pc, #28]	; (80108b8 <vPortFree+0x50>)
 801089c:	6863      	ldr	r3, [r4, #4]
 801089e:	6811      	ldr	r1, [r2, #0]
 80108a0:	468c      	mov	ip, r1
 80108a2:	4463      	add	r3, ip
 80108a4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80108a6:	0020      	movs	r0, r4
 80108a8:	f7ff ff22 	bl	80106f0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80108ac:	f7fe ff98 	bl	800f7e0 <xTaskResumeAll>
}
 80108b0:	bd10      	pop	{r4, pc}
 80108b2:	46c0      	nop			; (mov r8, r8)
 80108b4:	200069dc 	.word	0x200069dc
 80108b8:	200069e0 	.word	0x200069e0

080108bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80108bc:	b510      	push	{r4, lr}
 80108be:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80108c0:	f002 f91a 	bl	8012af8 <HAL_RCC_GetHCLKFreq>
 80108c4:	21fa      	movs	r1, #250	; 0xfa
 80108c6:	0089      	lsls	r1, r1, #2
 80108c8:	f7ef fc42 	bl	8000150 <__udivsi3>
 80108cc:	f000 fb9a 	bl	8011004 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80108d0:	2001      	movs	r0, #1
 80108d2:	2200      	movs	r2, #0
 80108d4:	0021      	movs	r1, r4
 80108d6:	4240      	negs	r0, r0
 80108d8:	f000 fb4e 	bl	8010f78 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80108dc:	2000      	movs	r0, #0
 80108de:	bd10      	pop	{r4, pc}

080108e0 <HAL_Init>:
{
 80108e0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80108e2:	4a06      	ldr	r2, [pc, #24]	; (80108fc <HAL_Init+0x1c>)
 80108e4:	6813      	ldr	r3, [r2, #0]
 80108e6:	2110      	movs	r1, #16
 80108e8:	430b      	orrs	r3, r1
 80108ea:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80108ec:	2000      	movs	r0, #0
 80108ee:	f7ff ffe5 	bl	80108bc <HAL_InitTick>
  HAL_MspInit();
 80108f2:	f001 fca5 	bl	8012240 <HAL_MspInit>
}
 80108f6:	2000      	movs	r0, #0
 80108f8:	bd10      	pop	{r4, pc}
 80108fa:	46c0      	nop			; (mov r8, r8)
 80108fc:	40022000 	.word	0x40022000

08010900 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010900:	4a02      	ldr	r2, [pc, #8]	; (801090c <HAL_IncTick+0xc>)
 8010902:	6813      	ldr	r3, [r2, #0]
 8010904:	3301      	adds	r3, #1
 8010906:	6013      	str	r3, [r2, #0]
}
 8010908:	4770      	bx	lr
 801090a:	46c0      	nop			; (mov r8, r8)
 801090c:	200069f0 	.word	0x200069f0

08010910 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010910:	4b01      	ldr	r3, [pc, #4]	; (8010918 <HAL_GetTick+0x8>)
 8010912:	6818      	ldr	r0, [r3, #0]
}
 8010914:	4770      	bx	lr
 8010916:	46c0      	nop			; (mov r8, r8)
 8010918:	200069f0 	.word	0x200069f0

0801091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 801091c:	b510      	push	{r4, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8010922:	f7ff fff5 	bl	8010910 <HAL_GetTick>
 8010926:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010928:	f7ff fff2 	bl	8010910 <HAL_GetTick>
 801092c:	9b01      	ldr	r3, [sp, #4]
 801092e:	1b00      	subs	r0, r0, r4
 8010930:	4298      	cmp	r0, r3
 8010932:	d3f9      	bcc.n	8010928 <HAL_Delay+0xc>
  {
  }
}
 8010934:	b002      	add	sp, #8
 8010936:	bd10      	pop	{r4, pc}

08010938 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010938:	4b01      	ldr	r3, [pc, #4]	; (8010940 <HAL_GetREVID+0x8>)
 801093a:	6818      	ldr	r0, [r3, #0]
 801093c:	0c00      	lsrs	r0, r0, #16
}
 801093e:	4770      	bx	lr
 8010940:	40015800 	.word	0x40015800

08010944 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010944:	4b02      	ldr	r3, [pc, #8]	; (8010950 <HAL_GetDEVID+0xc>)
 8010946:	6818      	ldr	r0, [r3, #0]
 8010948:	0500      	lsls	r0, r0, #20
 801094a:	0d00      	lsrs	r0, r0, #20
}
 801094c:	4770      	bx	lr
 801094e:	46c0      	nop			; (mov r8, r8)
 8010950:	40015800 	.word	0x40015800

08010954 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010958:	6803      	ldr	r3, [r0, #0]
 801095a:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 801095c:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 801095e:	0752      	lsls	r2, r2, #29
 8010960:	d521      	bpl.n	80109a6 <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010962:	689a      	ldr	r2, [r3, #8]
 8010964:	0752      	lsls	r2, r2, #29
 8010966:	d506      	bpl.n	8010976 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010968:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 801096a:	0792      	lsls	r2, r2, #30
 801096c:	d403      	bmi.n	8010976 <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 801096e:	689a      	ldr	r2, [r3, #8]
 8010970:	2110      	movs	r1, #16
 8010972:	430a      	orrs	r2, r1
 8010974:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8010976:	f7ff ffcb 	bl	8010910 <HAL_GetTick>
 801097a:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 801097c:	2604      	movs	r6, #4
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	689b      	ldr	r3, [r3, #8]
 8010982:	421e      	tst	r6, r3
 8010984:	d00e      	beq.n	80109a4 <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8010986:	f7ff ffc3 	bl	8010910 <HAL_GetTick>
 801098a:	1b40      	subs	r0, r0, r5
 801098c:	2802      	cmp	r0, #2
 801098e:	d9f6      	bls.n	801097e <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010990:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010992:	2210      	movs	r2, #16
 8010994:	4313      	orrs	r3, r2
 8010996:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010998:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801099a:	3a0f      	subs	r2, #15
 801099c:	4313      	orrs	r3, r2
 801099e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80109a0:	2001      	movs	r0, #1
 80109a2:	e000      	b.n	80109a6 <ADC_ConversionStop+0x52>
  return HAL_OK;
 80109a4:	2000      	movs	r0, #0
}
 80109a6:	bd70      	pop	{r4, r5, r6, pc}

080109a8 <ADC_Disable>:
{
 80109a8:	b570      	push	{r4, r5, r6, lr}
 80109aa:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80109ac:	6802      	ldr	r2, [r0, #0]
 80109ae:	6891      	ldr	r1, [r2, #8]
 80109b0:	2303      	movs	r3, #3
 80109b2:	400b      	ands	r3, r1
  return HAL_OK;
 80109b4:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80109b6:	2b01      	cmp	r3, #1
 80109b8:	d000      	beq.n	80109bc <ADC_Disable+0x14>
}
 80109ba:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80109bc:	6813      	ldr	r3, [r2, #0]
 80109be:	07db      	lsls	r3, r3, #31
 80109c0:	d402      	bmi.n	80109c8 <ADC_Disable+0x20>
 80109c2:	68d3      	ldr	r3, [r2, #12]
 80109c4:	041b      	lsls	r3, r3, #16
 80109c6:	d5f8      	bpl.n	80109ba <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80109c8:	6891      	ldr	r1, [r2, #8]
 80109ca:	2305      	movs	r3, #5
 80109cc:	400b      	ands	r3, r1
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d009      	beq.n	80109e6 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80109d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80109d4:	2210      	movs	r2, #16
 80109d6:	4313      	orrs	r3, r2
 80109d8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80109da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80109dc:	3a0f      	subs	r2, #15
 80109de:	4313      	orrs	r3, r2
 80109e0:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80109e2:	2001      	movs	r0, #1
 80109e4:	e7e9      	b.n	80109ba <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 80109e6:	6893      	ldr	r3, [r2, #8]
 80109e8:	2102      	movs	r1, #2
 80109ea:	430b      	orrs	r3, r1
 80109ec:	6093      	str	r3, [r2, #8]
 80109ee:	6823      	ldr	r3, [r4, #0]
 80109f0:	2203      	movs	r2, #3
 80109f2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80109f4:	f7ff ff8c 	bl	8010910 <HAL_GetTick>
 80109f8:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80109fa:	2601      	movs	r6, #1
 80109fc:	6823      	ldr	r3, [r4, #0]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	421e      	tst	r6, r3
 8010a02:	d00e      	beq.n	8010a22 <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8010a04:	f7ff ff84 	bl	8010910 <HAL_GetTick>
 8010a08:	1b40      	subs	r0, r0, r5
 8010a0a:	2802      	cmp	r0, #2
 8010a0c:	d9f6      	bls.n	80109fc <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010a0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a10:	2210      	movs	r2, #16
 8010a12:	4313      	orrs	r3, r2
 8010a14:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010a16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010a18:	3a0f      	subs	r2, #15
 8010a1a:	4313      	orrs	r3, r2
 8010a1c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010a1e:	2001      	movs	r0, #1
 8010a20:	e7cb      	b.n	80109ba <ADC_Disable+0x12>
  return HAL_OK;
 8010a22:	2000      	movs	r0, #0
 8010a24:	e7c9      	b.n	80109ba <ADC_Disable+0x12>
	...

08010a28 <ADC_Enable>:
{
 8010a28:	b570      	push	{r4, r5, r6, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010a32:	6803      	ldr	r3, [r0, #0]
 8010a34:	6899      	ldr	r1, [r3, #8]
 8010a36:	2203      	movs	r2, #3
 8010a38:	400a      	ands	r2, r1
 8010a3a:	2a01      	cmp	r2, #1
 8010a3c:	d02d      	beq.n	8010a9a <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8010a3e:	6899      	ldr	r1, [r3, #8]
 8010a40:	4a20      	ldr	r2, [pc, #128]	; (8010ac4 <ADC_Enable+0x9c>)
 8010a42:	4211      	tst	r1, r2
 8010a44:	d131      	bne.n	8010aaa <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 8010a46:	689a      	ldr	r2, [r3, #8]
 8010a48:	2101      	movs	r1, #1
 8010a4a:	430a      	orrs	r2, r1
 8010a4c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8010a4e:	4b1e      	ldr	r3, [pc, #120]	; (8010ac8 <ADC_Enable+0xa0>)
 8010a50:	6818      	ldr	r0, [r3, #0]
 8010a52:	491e      	ldr	r1, [pc, #120]	; (8010acc <ADC_Enable+0xa4>)
 8010a54:	f7ef fb7c 	bl	8000150 <__udivsi3>
 8010a58:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010a5a:	9b01      	ldr	r3, [sp, #4]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d005      	beq.n	8010a6c <ADC_Enable+0x44>
      wait_loop_index--;
 8010a60:	9b01      	ldr	r3, [sp, #4]
 8010a62:	3b01      	subs	r3, #1
 8010a64:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8010a66:	9b01      	ldr	r3, [sp, #4]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d1f9      	bne.n	8010a60 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8010a6c:	f7ff ff50 	bl	8010910 <HAL_GetTick>
 8010a70:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010a72:	2601      	movs	r6, #1
 8010a74:	6823      	ldr	r3, [r4, #0]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	421e      	tst	r6, r3
 8010a7a:	d121      	bne.n	8010ac0 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010a7c:	f7ff ff48 	bl	8010910 <HAL_GetTick>
 8010a80:	1b40      	subs	r0, r0, r5
 8010a82:	2802      	cmp	r0, #2
 8010a84:	d9f6      	bls.n	8010a74 <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010a86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a88:	2210      	movs	r2, #16
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010a8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010a90:	3a0f      	subs	r2, #15
 8010a92:	4313      	orrs	r3, r2
 8010a94:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010a96:	2001      	movs	r0, #1
 8010a98:	e010      	b.n	8010abc <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010a9a:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8010a9c:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010a9e:	07d2      	lsls	r2, r2, #31
 8010aa0:	d40c      	bmi.n	8010abc <ADC_Enable+0x94>
 8010aa2:	68da      	ldr	r2, [r3, #12]
 8010aa4:	0412      	lsls	r2, r2, #16
 8010aa6:	d409      	bmi.n	8010abc <ADC_Enable+0x94>
 8010aa8:	e7c9      	b.n	8010a3e <ADC_Enable+0x16>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010aaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010aac:	2210      	movs	r2, #16
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010ab2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010ab4:	3a0f      	subs	r2, #15
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010aba:	2001      	movs	r0, #1
}
 8010abc:	b002      	add	sp, #8
 8010abe:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8010ac0:	2000      	movs	r0, #0
 8010ac2:	e7fb      	b.n	8010abc <ADC_Enable+0x94>
 8010ac4:	80000017 	.word	0x80000017
 8010ac8:	20000090 	.word	0x20000090
 8010acc:	000f4240 	.word	0x000f4240

08010ad0 <HAL_ADC_Init>:
{
 8010ad0:	b570      	push	{r4, r5, r6, lr}
 8010ad2:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8010ad4:	d100      	bne.n	8010ad8 <HAL_ADC_Init+0x8>
 8010ad6:	e09e      	b.n	8010c16 <HAL_ADC_Init+0x146>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010ad8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d074      	beq.n	8010bc8 <HAL_ADC_Init+0xf8>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8010ade:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010ae0:	06db      	lsls	r3, r3, #27
 8010ae2:	d500      	bpl.n	8010ae6 <HAL_ADC_Init+0x16>
 8010ae4:	e091      	b.n	8010c0a <HAL_ADC_Init+0x13a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8010ae6:	6822      	ldr	r2, [r4, #0]
 8010ae8:	6891      	ldr	r1, [r2, #8]
 8010aea:	2004      	movs	r0, #4
 8010aec:	0005      	movs	r5, r0
 8010aee:	400d      	ands	r5, r1
      (tmp_hal_status == HAL_OK)                                &&
 8010af0:	4208      	tst	r0, r1
 8010af2:	d000      	beq.n	8010af6 <HAL_ADC_Init+0x26>
 8010af4:	e089      	b.n	8010c0a <HAL_ADC_Init+0x13a>
    ADC_STATE_CLR_SET(hadc->State,
 8010af6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010af8:	4b48      	ldr	r3, [pc, #288]	; (8010c1c <HAL_ADC_Init+0x14c>)
 8010afa:	4019      	ands	r1, r3
 8010afc:	3306      	adds	r3, #6
 8010afe:	33ff      	adds	r3, #255	; 0xff
 8010b00:	4319      	orrs	r1, r3
 8010b02:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010b04:	6891      	ldr	r1, [r2, #8]
 8010b06:	3301      	adds	r3, #1
 8010b08:	400b      	ands	r3, r1
 8010b0a:	2b01      	cmp	r3, #1
 8010b0c:	d062      	beq.n	8010bd4 <HAL_ADC_Init+0x104>
      MODIFY_REG(hadc->Instance->CFGR1,
 8010b0e:	68d3      	ldr	r3, [r2, #12]
 8010b10:	2118      	movs	r1, #24
 8010b12:	438b      	bics	r3, r1
 8010b14:	68a1      	ldr	r1, [r4, #8]
 8010b16:	430b      	orrs	r3, r1
 8010b18:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8010b1a:	6822      	ldr	r2, [r4, #0]
 8010b1c:	6913      	ldr	r3, [r2, #16]
 8010b1e:	009b      	lsls	r3, r3, #2
 8010b20:	089b      	lsrs	r3, r3, #2
 8010b22:	6861      	ldr	r1, [r4, #4]
 8010b24:	430b      	orrs	r3, r1
 8010b26:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8010b28:	6822      	ldr	r2, [r4, #0]
 8010b2a:	68d3      	ldr	r3, [r2, #12]
 8010b2c:	493c      	ldr	r1, [pc, #240]	; (8010c20 <HAL_ADC_Init+0x150>)
 8010b2e:	400b      	ands	r3, r1
 8010b30:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010b32:	69a3      	ldr	r3, [r4, #24]
 8010b34:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8010b36:	69e3      	ldr	r3, [r4, #28]
 8010b38:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010b3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010b3c:	6a21      	ldr	r1, [r4, #32]
 8010b3e:	034b      	lsls	r3, r1, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010b40:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8010b42:	2801      	cmp	r0, #1
 8010b44:	d04d      	beq.n	8010be2 <HAL_ADC_Init+0x112>
 8010b46:	2080      	movs	r0, #128	; 0x80
 8010b48:	0140      	lsls	r0, r0, #5
 8010b4a:	68e6      	ldr	r6, [r4, #12]
 8010b4c:	4332      	orrs	r2, r6
 8010b4e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010b50:	6923      	ldr	r3, [r4, #16]
 8010b52:	2b02      	cmp	r3, #2
 8010b54:	d047      	beq.n	8010be6 <HAL_ADC_Init+0x116>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8010b56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010b58:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	4303      	orrs	r3, r0
 8010b5e:	432b      	orrs	r3, r5
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010b60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010b62:	2a01      	cmp	r2, #1
 8010b64:	d041      	beq.n	8010bea <HAL_ADC_Init+0x11a>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010b66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010b68:	21c2      	movs	r1, #194	; 0xc2
 8010b6a:	31ff      	adds	r1, #255	; 0xff
 8010b6c:	428a      	cmp	r2, r1
 8010b6e:	d002      	beq.n	8010b76 <HAL_ADC_Init+0xa6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8010b70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010b72:	430a      	orrs	r2, r1
 8010b74:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8010b76:	6821      	ldr	r1, [r4, #0]
 8010b78:	68ca      	ldr	r2, [r1, #12]
 8010b7a:	431a      	orrs	r2, r3
 8010b7c:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010b7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010b80:	2180      	movs	r1, #128	; 0x80
 8010b82:	0549      	lsls	r1, r1, #21
 8010b84:	428a      	cmp	r2, r1
 8010b86:	d002      	beq.n	8010b8e <HAL_ADC_Init+0xbe>
 8010b88:	3a01      	subs	r2, #1
 8010b8a:	2a06      	cmp	r2, #6
 8010b8c:	d80a      	bhi.n	8010ba4 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010b8e:	6820      	ldr	r0, [r4, #0]
 8010b90:	6941      	ldr	r1, [r0, #20]
 8010b92:	2207      	movs	r2, #7
 8010b94:	4391      	bics	r1, r2
 8010b96:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8010b98:	6821      	ldr	r1, [r4, #0]
 8010b9a:	6948      	ldr	r0, [r1, #20]
 8010b9c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010b9e:	402a      	ands	r2, r5
 8010ba0:	4302      	orrs	r2, r0
 8010ba2:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8010ba4:	6822      	ldr	r2, [r4, #0]
 8010ba6:	68d2      	ldr	r2, [r2, #12]
 8010ba8:	491e      	ldr	r1, [pc, #120]	; (8010c24 <HAL_ADC_Init+0x154>)
 8010baa:	400a      	ands	r2, r1
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d022      	beq.n	8010bf6 <HAL_ADC_Init+0x126>
      ADC_STATE_CLR_SET(hadc->State,
 8010bb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010bb2:	2212      	movs	r2, #18
 8010bb4:	4393      	bics	r3, r2
 8010bb6:	3a02      	subs	r2, #2
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010bbc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010bbe:	3a0f      	subs	r2, #15
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8010bc4:	2001      	movs	r0, #1
 8010bc6:	e025      	b.n	8010c14 <HAL_ADC_Init+0x144>
    ADC_CLEAR_ERRORCODE(hadc);
 8010bc8:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8010bca:	2240      	movs	r2, #64	; 0x40
 8010bcc:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8010bce:	f7f7 feb9 	bl	8008944 <HAL_ADC_MspInit>
 8010bd2:	e784      	b.n	8010ade <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010bd4:	6813      	ldr	r3, [r2, #0]
 8010bd6:	07db      	lsls	r3, r3, #31
 8010bd8:	d4a6      	bmi.n	8010b28 <HAL_ADC_Init+0x58>
 8010bda:	68d3      	ldr	r3, [r2, #12]
 8010bdc:	041b      	lsls	r3, r3, #16
 8010bde:	d4a3      	bmi.n	8010b28 <HAL_ADC_Init+0x58>
 8010be0:	e795      	b.n	8010b0e <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010be2:	0028      	movs	r0, r5
 8010be4:	e7b1      	b.n	8010b4a <HAL_ADC_Init+0x7a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010be6:	2504      	movs	r5, #4
 8010be8:	e7b5      	b.n	8010b56 <HAL_ADC_Init+0x86>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010bea:	2900      	cmp	r1, #0
 8010bec:	d1bb      	bne.n	8010b66 <HAL_ADC_Init+0x96>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010bee:	2280      	movs	r2, #128	; 0x80
 8010bf0:	0252      	lsls	r2, r2, #9
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	e7b7      	b.n	8010b66 <HAL_ADC_Init+0x96>
      ADC_CLEAR_ERRORCODE(hadc);
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8010bfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010bfc:	2203      	movs	r2, #3
 8010bfe:	4393      	bics	r3, r2
 8010c00:	3a02      	subs	r2, #2
 8010c02:	4313      	orrs	r3, r2
 8010c04:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010c06:	2000      	movs	r0, #0
 8010c08:	e004      	b.n	8010c14 <HAL_ADC_Init+0x144>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c0c:	2210      	movs	r2, #16
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010c12:	2001      	movs	r0, #1
}
 8010c14:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010c16:	2001      	movs	r0, #1
 8010c18:	e7fc      	b.n	8010c14 <HAL_ADC_Init+0x144>
 8010c1a:	46c0      	nop			; (mov r8, r8)
 8010c1c:	fffffefd 	.word	0xfffffefd
 8010c20:	fffe0219 	.word	0xfffe0219
 8010c24:	833fffe7 	.word	0x833fffe7

08010c28 <HAL_ADC_Start>:
{
 8010c28:	b510      	push	{r4, lr}
 8010c2a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010c2c:	6803      	ldr	r3, [r0, #0]
 8010c2e:	689b      	ldr	r3, [r3, #8]
 8010c30:	075b      	lsls	r3, r3, #29
 8010c32:	d423      	bmi.n	8010c7c <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010c34:	2340      	movs	r3, #64	; 0x40
 8010c36:	5cc3      	ldrb	r3, [r0, r3]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d021      	beq.n	8010c80 <HAL_ADC_Start+0x58>
 8010c3c:	2340      	movs	r3, #64	; 0x40
 8010c3e:	2201      	movs	r2, #1
 8010c40:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010c42:	69c3      	ldr	r3, [r0, #28]
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	d114      	bne.n	8010c72 <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8010c48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c4a:	4a0e      	ldr	r2, [pc, #56]	; (8010c84 <HAL_ADC_Start+0x5c>)
 8010c4c:	401a      	ands	r2, r3
 8010c4e:	2380      	movs	r3, #128	; 0x80
 8010c50:	005b      	lsls	r3, r3, #1
 8010c52:	4313      	orrs	r3, r2
 8010c54:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010c56:	2300      	movs	r3, #0
 8010c58:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010c5a:	2240      	movs	r2, #64	; 0x40
 8010c5c:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	3a24      	subs	r2, #36	; 0x24
 8010c62:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010c64:	6822      	ldr	r2, [r4, #0]
 8010c66:	6893      	ldr	r3, [r2, #8]
 8010c68:	2104      	movs	r1, #4
 8010c6a:	430b      	orrs	r3, r1
 8010c6c:	6093      	str	r3, [r2, #8]
 8010c6e:	2000      	movs	r0, #0
}
 8010c70:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010c72:	f7ff fed9 	bl	8010a28 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d1fa      	bne.n	8010c70 <HAL_ADC_Start+0x48>
 8010c7a:	e7e5      	b.n	8010c48 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 8010c7c:	2002      	movs	r0, #2
 8010c7e:	e7f7      	b.n	8010c70 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010c80:	2002      	movs	r0, #2
 8010c82:	e7f5      	b.n	8010c70 <HAL_ADC_Start+0x48>
 8010c84:	fffff0fe 	.word	0xfffff0fe

08010c88 <HAL_ADC_Stop>:
{ 
 8010c88:	b510      	push	{r4, lr}
 8010c8a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010c8c:	2340      	movs	r3, #64	; 0x40
 8010c8e:	5cc3      	ldrb	r3, [r0, r3]
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d017      	beq.n	8010cc4 <HAL_ADC_Stop+0x3c>
 8010c94:	2340      	movs	r3, #64	; 0x40
 8010c96:	2201      	movs	r2, #1
 8010c98:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010c9a:	f7ff fe5b 	bl	8010954 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d003      	beq.n	8010caa <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8010ca2:	2340      	movs	r3, #64	; 0x40
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	54e2      	strb	r2, [r4, r3]
}
 8010ca8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8010caa:	0020      	movs	r0, r4
 8010cac:	f7ff fe7c 	bl	80109a8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	d1f6      	bne.n	8010ca2 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010cb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010cb6:	4a04      	ldr	r2, [pc, #16]	; (8010cc8 <HAL_ADC_Stop+0x40>)
 8010cb8:	4013      	ands	r3, r2
 8010cba:	3204      	adds	r2, #4
 8010cbc:	32ff      	adds	r2, #255	; 0xff
 8010cbe:	4313      	orrs	r3, r2
 8010cc0:	6463      	str	r3, [r4, #68]	; 0x44
 8010cc2:	e7ee      	b.n	8010ca2 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8010cc4:	2002      	movs	r0, #2
 8010cc6:	e7ef      	b.n	8010ca8 <HAL_ADC_Stop+0x20>
 8010cc8:	fffffefe 	.word	0xfffffefe

08010ccc <HAL_ADC_PollForConversion>:
{
 8010ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cce:	0006      	movs	r6, r0
 8010cd0:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8010cd2:	6945      	ldr	r5, [r0, #20]
 8010cd4:	2d08      	cmp	r5, #8
 8010cd6:	d004      	beq.n	8010ce2 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010cd8:	6803      	ldr	r3, [r0, #0]
 8010cda:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8010cdc:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010cde:	07db      	lsls	r3, r3, #31
 8010ce0:	d418      	bmi.n	8010d14 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 8010ce2:	f7ff fe15 	bl	8010910 <HAL_GetTick>
 8010ce6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8010ce8:	6832      	ldr	r2, [r6, #0]
 8010cea:	6813      	ldr	r3, [r2, #0]
 8010cec:	421d      	tst	r5, r3
 8010cee:	d11a      	bne.n	8010d26 <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 8010cf0:	1c63      	adds	r3, r4, #1
 8010cf2:	d0fa      	beq.n	8010cea <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010cf4:	2c00      	cmp	r4, #0
 8010cf6:	d004      	beq.n	8010d02 <HAL_ADC_PollForConversion+0x36>
 8010cf8:	f7ff fe0a 	bl	8010910 <HAL_GetTick>
 8010cfc:	1bc0      	subs	r0, r0, r7
 8010cfe:	42a0      	cmp	r0, r4
 8010d00:	d9f2      	bls.n	8010ce8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010d02:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010d04:	2204      	movs	r2, #4
 8010d06:	4313      	orrs	r3, r2
 8010d08:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8010d0a:	2340      	movs	r3, #64	; 0x40
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010d10:	2003      	movs	r0, #3
 8010d12:	e02d      	b.n	8010d70 <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010d14:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010d16:	2220      	movs	r2, #32
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010d1c:	2340      	movs	r3, #64	; 0x40
 8010d1e:	2200      	movs	r2, #0
 8010d20:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010d22:	2001      	movs	r0, #1
 8010d24:	e024      	b.n	8010d70 <HAL_ADC_PollForConversion+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010d26:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8010d28:	2380      	movs	r3, #128	; 0x80
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	430b      	orrs	r3, r1
 8010d2e:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010d30:	68d1      	ldr	r1, [r2, #12]
 8010d32:	23c0      	movs	r3, #192	; 0xc0
 8010d34:	011b      	lsls	r3, r3, #4
 8010d36:	4219      	tst	r1, r3
 8010d38:	d113      	bne.n	8010d62 <HAL_ADC_PollForConversion+0x96>
 8010d3a:	6a33      	ldr	r3, [r6, #32]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d110      	bne.n	8010d62 <HAL_ADC_PollForConversion+0x96>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010d40:	6813      	ldr	r3, [r2, #0]
 8010d42:	071b      	lsls	r3, r3, #28
 8010d44:	d50d      	bpl.n	8010d62 <HAL_ADC_PollForConversion+0x96>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010d46:	6893      	ldr	r3, [r2, #8]
 8010d48:	075b      	lsls	r3, r3, #29
 8010d4a:	d412      	bmi.n	8010d72 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010d4c:	6853      	ldr	r3, [r2, #4]
 8010d4e:	210c      	movs	r1, #12
 8010d50:	438b      	bics	r3, r1
 8010d52:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010d54:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010d56:	4a0b      	ldr	r2, [pc, #44]	; (8010d84 <HAL_ADC_PollForConversion+0xb8>)
 8010d58:	4013      	ands	r3, r2
 8010d5a:	3204      	adds	r2, #4
 8010d5c:	32ff      	adds	r2, #255	; 0xff
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8010d62:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010d64:	69b3      	ldr	r3, [r6, #24]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d102      	bne.n	8010d70 <HAL_ADC_PollForConversion+0xa4>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010d6a:	6833      	ldr	r3, [r6, #0]
 8010d6c:	220c      	movs	r2, #12
 8010d6e:	601a      	str	r2, [r3, #0]
}
 8010d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010d72:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010d74:	2220      	movs	r2, #32
 8010d76:	4313      	orrs	r3, r2
 8010d78:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010d7a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010d7c:	3a1f      	subs	r2, #31
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	64b3      	str	r3, [r6, #72]	; 0x48
 8010d82:	e7ee      	b.n	8010d62 <HAL_ADC_PollForConversion+0x96>
 8010d84:	fffffefe 	.word	0xfffffefe

08010d88 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8010d88:	6803      	ldr	r3, [r0, #0]
 8010d8a:	2208      	movs	r2, #8
 8010d8c:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010d8e:	6803      	ldr	r3, [r0, #0]
 8010d90:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8010d92:	4770      	bx	lr

08010d94 <HAL_ADC_ConfigChannel>:
{
 8010d94:	b530      	push	{r4, r5, lr}
 8010d96:	b083      	sub	sp, #12
 8010d98:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8010d9e:	3340      	adds	r3, #64	; 0x40
 8010da0:	5cc3      	ldrb	r3, [r0, r3]
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	d100      	bne.n	8010da8 <HAL_ADC_ConfigChannel+0x14>
 8010da6:	e088      	b.n	8010eba <HAL_ADC_ConfigChannel+0x126>
 8010da8:	2340      	movs	r3, #64	; 0x40
 8010daa:	2201      	movs	r2, #1
 8010dac:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010dae:	6803      	ldr	r3, [r0, #0]
 8010db0:	689a      	ldr	r2, [r3, #8]
 8010db2:	0752      	lsls	r2, r2, #29
 8010db4:	d475      	bmi.n	8010ea2 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 8010db6:	4a42      	ldr	r2, [pc, #264]	; (8010ec0 <HAL_ADC_ConfigChannel+0x12c>)
 8010db8:	6848      	ldr	r0, [r1, #4]
 8010dba:	4290      	cmp	r0, r2
 8010dbc:	d050      	beq.n	8010e60 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010dbe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	680d      	ldr	r5, [r1, #0]
 8010dc4:	40aa      	lsls	r2, r5
 8010dc6:	4302      	orrs	r2, r0
 8010dc8:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010dcc:	2280      	movs	r2, #128	; 0x80
 8010dce:	0552      	lsls	r2, r2, #21
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d013      	beq.n	8010dfc <HAL_ADC_ConfigChannel+0x68>
 8010dd4:	3b01      	subs	r3, #1
 8010dd6:	2b06      	cmp	r3, #6
 8010dd8:	d910      	bls.n	8010dfc <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8010dda:	6822      	ldr	r2, [r4, #0]
 8010ddc:	6950      	ldr	r0, [r2, #20]
 8010dde:	2307      	movs	r3, #7
 8010de0:	4003      	ands	r3, r0
 8010de2:	6888      	ldr	r0, [r1, #8]
 8010de4:	4298      	cmp	r0, r3
 8010de6:	d009      	beq.n	8010dfc <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010de8:	6950      	ldr	r0, [r2, #20]
 8010dea:	2307      	movs	r3, #7
 8010dec:	4398      	bics	r0, r3
 8010dee:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8010df0:	6822      	ldr	r2, [r4, #0]
 8010df2:	6950      	ldr	r0, [r2, #20]
 8010df4:	688d      	ldr	r5, [r1, #8]
 8010df6:	402b      	ands	r3, r5
 8010df8:	4303      	orrs	r3, r0
 8010dfa:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010dfc:	680b      	ldr	r3, [r1, #0]
 8010dfe:	001a      	movs	r2, r3
 8010e00:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e02:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010e04:	2a02      	cmp	r2, #2
 8010e06:	d851      	bhi.n	8010eac <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010e08:	4a2e      	ldr	r2, [pc, #184]	; (8010ec4 <HAL_ADC_ConfigChannel+0x130>)
 8010e0a:	6810      	ldr	r0, [r2, #0]
 8010e0c:	2b10      	cmp	r3, #16
 8010e0e:	d024      	beq.n	8010e5a <HAL_ADC_ConfigChannel+0xc6>
 8010e10:	3b11      	subs	r3, #17
 8010e12:	425a      	negs	r2, r3
 8010e14:	415a      	adcs	r2, r3
 8010e16:	4253      	negs	r3, r2
 8010e18:	4a2b      	ldr	r2, [pc, #172]	; (8010ec8 <HAL_ADC_ConfigChannel+0x134>)
 8010e1a:	4013      	ands	r3, r2
 8010e1c:	2280      	movs	r2, #128	; 0x80
 8010e1e:	0452      	lsls	r2, r2, #17
 8010e20:	4694      	mov	ip, r2
 8010e22:	4463      	add	r3, ip
 8010e24:	4303      	orrs	r3, r0
 8010e26:	4a27      	ldr	r2, [pc, #156]	; (8010ec4 <HAL_ADC_ConfigChannel+0x130>)
 8010e28:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010e2a:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e2c:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010e2e:	2b10      	cmp	r3, #16
 8010e30:	d13c      	bne.n	8010eac <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010e32:	4b26      	ldr	r3, [pc, #152]	; (8010ecc <HAL_ADC_ConfigChannel+0x138>)
 8010e34:	6818      	ldr	r0, [r3, #0]
 8010e36:	4926      	ldr	r1, [pc, #152]	; (8010ed0 <HAL_ADC_ConfigChannel+0x13c>)
 8010e38:	f7ef f98a 	bl	8000150 <__udivsi3>
 8010e3c:	0083      	lsls	r3, r0, #2
 8010e3e:	181b      	adds	r3, r3, r0
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010e44:	9b01      	ldr	r3, [sp, #4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d035      	beq.n	8010eb6 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8010e4a:	9b01      	ldr	r3, [sp, #4]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010e50:	9b01      	ldr	r3, [sp, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d1f9      	bne.n	8010e4a <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e56:	2000      	movs	r0, #0
 8010e58:	e028      	b.n	8010eac <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010e5a:	2380      	movs	r3, #128	; 0x80
 8010e5c:	041b      	lsls	r3, r3, #16
 8010e5e:	e7e1      	b.n	8010e24 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e62:	2001      	movs	r0, #1
 8010e64:	680d      	ldr	r5, [r1, #0]
 8010e66:	40a8      	lsls	r0, r5
 8010e68:	4382      	bics	r2, r0
 8010e6a:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010e6c:	680b      	ldr	r3, [r1, #0]
 8010e6e:	001a      	movs	r2, r3
 8010e70:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e72:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010e74:	2a02      	cmp	r2, #2
 8010e76:	d819      	bhi.n	8010eac <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010e78:	4a12      	ldr	r2, [pc, #72]	; (8010ec4 <HAL_ADC_ConfigChannel+0x130>)
 8010e7a:	6811      	ldr	r1, [r2, #0]
 8010e7c:	2b10      	cmp	r3, #16
 8010e7e:	d00e      	beq.n	8010e9e <HAL_ADC_ConfigChannel+0x10a>
 8010e80:	3b11      	subs	r3, #17
 8010e82:	425a      	negs	r2, r3
 8010e84:	415a      	adcs	r2, r3
 8010e86:	4252      	negs	r2, r2
 8010e88:	23c0      	movs	r3, #192	; 0xc0
 8010e8a:	041b      	lsls	r3, r3, #16
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	4a11      	ldr	r2, [pc, #68]	; (8010ed4 <HAL_ADC_ConfigChannel+0x140>)
 8010e90:	4694      	mov	ip, r2
 8010e92:	4463      	add	r3, ip
 8010e94:	400b      	ands	r3, r1
 8010e96:	4a0b      	ldr	r2, [pc, #44]	; (8010ec4 <HAL_ADC_ConfigChannel+0x130>)
 8010e98:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	e006      	b.n	8010eac <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010e9e:	4b0e      	ldr	r3, [pc, #56]	; (8010ed8 <HAL_ADC_ConfigChannel+0x144>)
 8010ea0:	e7f8      	b.n	8010e94 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010ea2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010ea4:	2220      	movs	r2, #32
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010eaa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8010eac:	2340      	movs	r3, #64	; 0x40
 8010eae:	2200      	movs	r2, #0
 8010eb0:	54e2      	strb	r2, [r4, r3]
}
 8010eb2:	b003      	add	sp, #12
 8010eb4:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	e7f8      	b.n	8010eac <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 8010eba:	2002      	movs	r0, #2
 8010ebc:	e7f9      	b.n	8010eb2 <HAL_ADC_ConfigChannel+0x11e>
 8010ebe:	46c0      	nop			; (mov r8, r8)
 8010ec0:	00001001 	.word	0x00001001
 8010ec4:	40012708 	.word	0x40012708
 8010ec8:	ff400000 	.word	0xff400000
 8010ecc:	20000090 	.word	0x20000090
 8010ed0:	000f4240 	.word	0x000f4240
 8010ed4:	feffffff 	.word	0xfeffffff
 8010ed8:	ff7fffff 	.word	0xff7fffff

08010edc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8010edc:	b570      	push	{r4, r5, r6, lr}
 8010ede:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8010ee0:	2340      	movs	r3, #64	; 0x40
 8010ee2:	5cc3      	ldrb	r3, [r0, r3]
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	d042      	beq.n	8010f6e <HAL_ADCEx_Calibration_Start+0x92>
 8010ee8:	2340      	movs	r3, #64	; 0x40
 8010eea:	2201      	movs	r2, #1
 8010eec:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010eee:	6803      	ldr	r3, [r0, #0]
 8010ef0:	6899      	ldr	r1, [r3, #8]
 8010ef2:	3202      	adds	r2, #2
 8010ef4:	400a      	ands	r2, r1
 8010ef6:	2a01      	cmp	r2, #1
 8010ef8:	d105      	bne.n	8010f06 <HAL_ADCEx_Calibration_Start+0x2a>
 8010efa:	681a      	ldr	r2, [r3, #0]
 8010efc:	07d2      	lsls	r2, r2, #31
 8010efe:	d42d      	bmi.n	8010f5c <HAL_ADCEx_Calibration_Start+0x80>
 8010f00:	68da      	ldr	r2, [r3, #12]
 8010f02:	0412      	lsls	r2, r2, #16
 8010f04:	d42a      	bmi.n	8010f5c <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8010f06:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010f08:	491a      	ldr	r1, [pc, #104]	; (8010f74 <HAL_ADCEx_Calibration_Start+0x98>)
 8010f0a:	400a      	ands	r2, r1
 8010f0c:	3106      	adds	r1, #6
 8010f0e:	31ff      	adds	r1, #255	; 0xff
 8010f10:	430a      	orrs	r2, r1
 8010f12:	6462      	str	r2, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8010f14:	6899      	ldr	r1, [r3, #8]
 8010f16:	2280      	movs	r2, #128	; 0x80
 8010f18:	0612      	lsls	r2, r2, #24
 8010f1a:	430a      	orrs	r2, r1
 8010f1c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8010f1e:	f7ff fcf7 	bl	8010910 <HAL_GetTick>
 8010f22:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	689b      	ldr	r3, [r3, #8]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	da0f      	bge.n	8010f4c <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8010f2c:	f7ff fcf0 	bl	8010910 <HAL_GetTick>
 8010f30:	1b40      	subs	r0, r0, r5
 8010f32:	2802      	cmp	r0, #2
 8010f34:	d9f6      	bls.n	8010f24 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8010f36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010f38:	2212      	movs	r2, #18
 8010f3a:	4393      	bics	r3, r2
 8010f3c:	3a02      	subs	r2, #2
 8010f3e:	4313      	orrs	r3, r2
 8010f40:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8010f42:	2340      	movs	r3, #64	; 0x40
 8010f44:	2200      	movs	r2, #0
 8010f46:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 8010f48:	2001      	movs	r0, #1
 8010f4a:	e00f      	b.n	8010f6c <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010f4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010f4e:	2203      	movs	r2, #3
 8010f50:	4393      	bics	r3, r2
 8010f52:	3a02      	subs	r2, #2
 8010f54:	4313      	orrs	r3, r2
 8010f56:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010f58:	2000      	movs	r0, #0
 8010f5a:	e004      	b.n	8010f66 <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010f5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010f5e:	2220      	movs	r2, #32
 8010f60:	4313      	orrs	r3, r2
 8010f62:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8010f64:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010f66:	2340      	movs	r3, #64	; 0x40
 8010f68:	2200      	movs	r2, #0
 8010f6a:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8010f6c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8010f6e:	2002      	movs	r0, #2
 8010f70:	e7fc      	b.n	8010f6c <HAL_ADCEx_Calibration_Start+0x90>
 8010f72:	46c0      	nop			; (mov r8, r8)
 8010f74:	fffffefd 	.word	0xfffffefd

08010f78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010f78:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	db14      	blt.n	8010fa8 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010f7e:	0884      	lsrs	r4, r0, #2
 8010f80:	00a4      	lsls	r4, r4, #2
 8010f82:	4b14      	ldr	r3, [pc, #80]	; (8010fd4 <HAL_NVIC_SetPriority+0x5c>)
 8010f84:	469c      	mov	ip, r3
 8010f86:	4464      	add	r4, ip
 8010f88:	26c0      	movs	r6, #192	; 0xc0
 8010f8a:	00b6      	lsls	r6, r6, #2
 8010f8c:	59a5      	ldr	r5, [r4, r6]
 8010f8e:	2203      	movs	r2, #3
 8010f90:	4010      	ands	r0, r2
 8010f92:	00c0      	lsls	r0, r0, #3
 8010f94:	23ff      	movs	r3, #255	; 0xff
 8010f96:	001a      	movs	r2, r3
 8010f98:	4082      	lsls	r2, r0
 8010f9a:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010f9c:	0189      	lsls	r1, r1, #6
 8010f9e:	400b      	ands	r3, r1
 8010fa0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010fa2:	432b      	orrs	r3, r5
 8010fa4:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010fa6:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010fa8:	230f      	movs	r3, #15
 8010faa:	4003      	ands	r3, r0
 8010fac:	3b08      	subs	r3, #8
 8010fae:	089b      	lsrs	r3, r3, #2
 8010fb0:	009b      	lsls	r3, r3, #2
 8010fb2:	4a09      	ldr	r2, [pc, #36]	; (8010fd8 <HAL_NVIC_SetPriority+0x60>)
 8010fb4:	4694      	mov	ip, r2
 8010fb6:	4463      	add	r3, ip
 8010fb8:	69dd      	ldr	r5, [r3, #28]
 8010fba:	2403      	movs	r4, #3
 8010fbc:	4020      	ands	r0, r4
 8010fbe:	00c0      	lsls	r0, r0, #3
 8010fc0:	22ff      	movs	r2, #255	; 0xff
 8010fc2:	0014      	movs	r4, r2
 8010fc4:	4084      	lsls	r4, r0
 8010fc6:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010fc8:	0189      	lsls	r1, r1, #6
 8010fca:	400a      	ands	r2, r1
 8010fcc:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010fce:	432a      	orrs	r2, r5
 8010fd0:	61da      	str	r2, [r3, #28]
 8010fd2:	e7e8      	b.n	8010fa6 <HAL_NVIC_SetPriority+0x2e>
 8010fd4:	e000e100 	.word	0xe000e100
 8010fd8:	e000ed00 	.word	0xe000ed00

08010fdc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010fdc:	231f      	movs	r3, #31
 8010fde:	4018      	ands	r0, r3
 8010fe0:	3b1e      	subs	r3, #30
 8010fe2:	4083      	lsls	r3, r0
 8010fe4:	4a01      	ldr	r2, [pc, #4]	; (8010fec <HAL_NVIC_EnableIRQ+0x10>)
 8010fe6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010fe8:	4770      	bx	lr
 8010fea:	46c0      	nop			; (mov r8, r8)
 8010fec:	e000e100 	.word	0xe000e100

08010ff0 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010ff0:	231f      	movs	r3, #31
 8010ff2:	4018      	ands	r0, r3
 8010ff4:	3b1e      	subs	r3, #30
 8010ff6:	4083      	lsls	r3, r0
 8010ff8:	4901      	ldr	r1, [pc, #4]	; (8011000 <HAL_NVIC_DisableIRQ+0x10>)
 8010ffa:	2280      	movs	r2, #128	; 0x80
 8010ffc:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010ffe:	4770      	bx	lr
 8011000:	e000e100 	.word	0xe000e100

08011004 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8011004:	3801      	subs	r0, #1
 8011006:	2380      	movs	r3, #128	; 0x80
 8011008:	045b      	lsls	r3, r3, #17
 801100a:	4298      	cmp	r0, r3
 801100c:	d20f      	bcs.n	801102e <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801100e:	4a09      	ldr	r2, [pc, #36]	; (8011034 <HAL_SYSTICK_Config+0x30>)
 8011010:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011012:	4809      	ldr	r0, [pc, #36]	; (8011038 <HAL_SYSTICK_Config+0x34>)
 8011014:	6a03      	ldr	r3, [r0, #32]
 8011016:	021b      	lsls	r3, r3, #8
 8011018:	0a1b      	lsrs	r3, r3, #8
 801101a:	21c0      	movs	r1, #192	; 0xc0
 801101c:	0609      	lsls	r1, r1, #24
 801101e:	430b      	orrs	r3, r1
 8011020:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011022:	2300      	movs	r3, #0
 8011024:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011026:	3307      	adds	r3, #7
 8011028:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801102a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 801102c:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 801102e:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8011030:	e7fc      	b.n	801102c <HAL_SYSTICK_Config+0x28>
 8011032:	46c0      	nop			; (mov r8, r8)
 8011034:	e000e010 	.word	0xe000e010
 8011038:	e000ed00 	.word	0xe000ed00

0801103c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 801103c:	2804      	cmp	r0, #4
 801103e:	d005      	beq.n	801104c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8011040:	4a05      	ldr	r2, [pc, #20]	; (8011058 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8011042:	6813      	ldr	r3, [r2, #0]
 8011044:	2104      	movs	r1, #4
 8011046:	438b      	bics	r3, r1
 8011048:	6013      	str	r3, [r2, #0]
  }
}
 801104a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 801104c:	4a02      	ldr	r2, [pc, #8]	; (8011058 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801104e:	6813      	ldr	r3, [r2, #0]
 8011050:	2104      	movs	r1, #4
 8011052:	430b      	orrs	r3, r1
 8011054:	6013      	str	r3, [r2, #0]
 8011056:	e7f8      	b.n	801104a <HAL_SYSTICK_CLKSourceConfig+0xe>
 8011058:	e000e010 	.word	0xe000e010

0801105c <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 801105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801105e:	0015      	movs	r5, r2
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8011060:	0892      	lsrs	r2, r2, #2
 8011062:	2d03      	cmp	r5, #3
 8011064:	d927      	bls.n	80110b6 <CRC_Handle_8+0x5a>
 8011066:	000c      	movs	r4, r1
 8011068:	2700      	movs	r7, #0
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 801106a:	7823      	ldrb	r3, [r4, #0]
 801106c:	061b      	lsls	r3, r3, #24
 801106e:	7866      	ldrb	r6, [r4, #1]
 8011070:	0436      	lsls	r6, r6, #16
 8011072:	4333      	orrs	r3, r6
 8011074:	78e6      	ldrb	r6, [r4, #3]
 8011076:	4333      	orrs	r3, r6
 8011078:	78a6      	ldrb	r6, [r4, #2]
 801107a:	0236      	lsls	r6, r6, #8
 801107c:	4333      	orrs	r3, r6
 801107e:	6806      	ldr	r6, [r0, #0]
 8011080:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8011082:	3701      	adds	r7, #1
 8011084:	3404      	adds	r4, #4
 8011086:	4297      	cmp	r7, r2
 8011088:	d3ef      	bcc.n	801106a <CRC_Handle_8+0xe>
 801108a:	2301      	movs	r3, #1
 801108c:	2d03      	cmp	r5, #3
 801108e:	d900      	bls.n	8011092 <CRC_Handle_8+0x36>
 8011090:	0013      	movs	r3, r2
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8011092:	2203      	movs	r2, #3
 8011094:	0014      	movs	r4, r2
 8011096:	402c      	ands	r4, r5
 8011098:	422a      	tst	r2, r5
 801109a:	d012      	beq.n	80110c2 <CRC_Handle_8+0x66>
   {
     if  (BufferLength%4 == 1)
 801109c:	2c01      	cmp	r4, #1
 801109e:	d00c      	beq.n	80110ba <CRC_Handle_8+0x5e>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 80110a0:	2c02      	cmp	r4, #2
 80110a2:	d111      	bne.n	80110c8 <CRC_Handle_8+0x6c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80110a4:	009b      	lsls	r3, r3, #2
 80110a6:	5cca      	ldrb	r2, [r1, r3]
 80110a8:	0212      	lsls	r2, r2, #8
 80110aa:	18cb      	adds	r3, r1, r3
 80110ac:	785b      	ldrb	r3, [r3, #1]
 80110ae:	4313      	orrs	r3, r2
 80110b0:	6802      	ldr	r2, [r0, #0]
 80110b2:	8013      	strh	r3, [r2, #0]
     }
     if  (BufferLength%4 == 3)
 80110b4:	e005      	b.n	80110c2 <CRC_Handle_8+0x66>
   for(i = 0; i < (BufferLength/4); i++)
 80110b6:	2300      	movs	r3, #0
 80110b8:	e7eb      	b.n	8011092 <CRC_Handle_8+0x36>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80110ba:	009b      	lsls	r3, r3, #2
 80110bc:	5c5b      	ldrb	r3, [r3, r1]
 80110be:	6802      	ldr	r2, [r0, #0]
 80110c0:	7013      	strb	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80110c2:	6803      	ldr	r3, [r0, #0]
 80110c4:	6818      	ldr	r0, [r3, #0]
}
 80110c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     if  (BufferLength%4 == 3)
 80110c8:	2c03      	cmp	r4, #3
 80110ca:	d1fa      	bne.n	80110c2 <CRC_Handle_8+0x66>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80110cc:	009b      	lsls	r3, r3, #2
 80110ce:	5ccc      	ldrb	r4, [r1, r3]
 80110d0:	0224      	lsls	r4, r4, #8
 80110d2:	18cb      	adds	r3, r1, r3
 80110d4:	785a      	ldrb	r2, [r3, #1]
 80110d6:	4322      	orrs	r2, r4
 80110d8:	6801      	ldr	r1, [r0, #0]
 80110da:	800a      	strh	r2, [r1, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 80110dc:	789b      	ldrb	r3, [r3, #2]
 80110de:	6802      	ldr	r2, [r0, #0]
 80110e0:	7013      	strb	r3, [r2, #0]
 80110e2:	e7ee      	b.n	80110c2 <CRC_Handle_8+0x66>

080110e4 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80110e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110e6:	0016      	movs	r6, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 80110e8:	0852      	lsrs	r2, r2, #1
 80110ea:	2e01      	cmp	r6, #1
 80110ec:	d918      	bls.n	8011120 <CRC_Handle_16+0x3c>
 80110ee:	000c      	movs	r4, r1
 80110f0:	2500      	movs	r5, #0
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 80110f2:	8823      	ldrh	r3, [r4, #0]
 80110f4:	041b      	lsls	r3, r3, #16
 80110f6:	8867      	ldrh	r7, [r4, #2]
 80110f8:	433b      	orrs	r3, r7
 80110fa:	6807      	ldr	r7, [r0, #0]
 80110fc:	603b      	str	r3, [r7, #0]
  for(i = 0; i < (BufferLength/2); i++)
 80110fe:	3501      	adds	r5, #1
 8011100:	3404      	adds	r4, #4
 8011102:	4295      	cmp	r5, r2
 8011104:	d3f5      	bcc.n	80110f2 <CRC_Handle_16+0xe>
 8011106:	2301      	movs	r3, #1
 8011108:	2e01      	cmp	r6, #1
 801110a:	d900      	bls.n	801110e <CRC_Handle_16+0x2a>
 801110c:	0013      	movs	r3, r2
  }
  if ((BufferLength%2) != 0)
 801110e:	07f2      	lsls	r2, r6, #31
 8011110:	d503      	bpl.n	801111a <CRC_Handle_16+0x36>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8011112:	009b      	lsls	r3, r3, #2
 8011114:	5a5b      	ldrh	r3, [r3, r1]
 8011116:	6802      	ldr	r2, [r0, #0]
 8011118:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 801111a:	6803      	ldr	r3, [r0, #0]
 801111c:	6818      	ldr	r0, [r3, #0]
}
 801111e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for(i = 0; i < (BufferLength/2); i++)
 8011120:	2300      	movs	r3, #0
 8011122:	e7f4      	b.n	801110e <CRC_Handle_16+0x2a>

08011124 <HAL_CRC_Init>:
{
 8011124:	b510      	push	{r4, lr}
 8011126:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8011128:	d029      	beq.n	801117e <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 801112a:	7f43      	ldrb	r3, [r0, #29]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d01e      	beq.n	801116e <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8011130:	2302      	movs	r3, #2
 8011132:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8011134:	0020      	movs	r0, r4
 8011136:	f000 f8ab 	bl	8011290 <HAL_CRCEx_Init>
 801113a:	2800      	cmp	r0, #0
 801113c:	d121      	bne.n	8011182 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 801113e:	7963      	ldrb	r3, [r4, #5]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d118      	bne.n	8011176 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8011144:	6823      	ldr	r3, [r4, #0]
 8011146:	2201      	movs	r2, #1
 8011148:	4252      	negs	r2, r2
 801114a:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 801114c:	6822      	ldr	r2, [r4, #0]
 801114e:	6893      	ldr	r3, [r2, #8]
 8011150:	2160      	movs	r1, #96	; 0x60
 8011152:	438b      	bics	r3, r1
 8011154:	6961      	ldr	r1, [r4, #20]
 8011156:	430b      	orrs	r3, r1
 8011158:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 801115a:	6822      	ldr	r2, [r4, #0]
 801115c:	6893      	ldr	r3, [r2, #8]
 801115e:	2180      	movs	r1, #128	; 0x80
 8011160:	438b      	bics	r3, r1
 8011162:	69a1      	ldr	r1, [r4, #24]
 8011164:	430b      	orrs	r3, r1
 8011166:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8011168:	2301      	movs	r3, #1
 801116a:	7763      	strb	r3, [r4, #29]
}
 801116c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 801116e:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8011170:	f7fc faaa 	bl	800d6c8 <HAL_CRC_MspInit>
 8011174:	e7dc      	b.n	8011130 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8011176:	6823      	ldr	r3, [r4, #0]
 8011178:	6922      	ldr	r2, [r4, #16]
 801117a:	611a      	str	r2, [r3, #16]
 801117c:	e7e6      	b.n	801114c <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 801117e:	2001      	movs	r0, #1
 8011180:	e7f4      	b.n	801116c <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8011182:	2001      	movs	r0, #1
 8011184:	e7f2      	b.n	801116c <HAL_CRC_Init+0x48>

08011186 <HAL_CRC_Accumulate>:
{
 8011186:	b510      	push	{r4, lr}
 8011188:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 801118a:	7f03      	ldrb	r3, [r0, #28]
 801118c:	2b01      	cmp	r3, #1
 801118e:	d023      	beq.n	80111d8 <HAL_CRC_Accumulate+0x52>
 8011190:	2301      	movs	r3, #1
 8011192:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8011194:	3301      	adds	r3, #1
 8011196:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8011198:	6a03      	ldr	r3, [r0, #32]
 801119a:	2b02      	cmp	r3, #2
 801119c:	d019      	beq.n	80111d2 <HAL_CRC_Accumulate+0x4c>
 801119e:	2b03      	cmp	r3, #3
 80111a0:	d007      	beq.n	80111b2 <HAL_CRC_Accumulate+0x2c>
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d012      	beq.n	80111cc <HAL_CRC_Accumulate+0x46>
 80111a6:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 80111a8:	2301      	movs	r3, #1
 80111aa:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80111ac:	2300      	movs	r3, #0
 80111ae:	7723      	strb	r3, [r4, #28]
}
 80111b0:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 80111b2:	2a00      	cmp	r2, #0
 80111b4:	d007      	beq.n	80111c6 <HAL_CRC_Accumulate+0x40>
 80111b6:	000b      	movs	r3, r1
 80111b8:	0092      	lsls	r2, r2, #2
 80111ba:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80111bc:	6822      	ldr	r2, [r4, #0]
 80111be:	cb01      	ldmia	r3!, {r0}
 80111c0:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 80111c2:	428b      	cmp	r3, r1
 80111c4:	d1fa      	bne.n	80111bc <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 80111c6:	6823      	ldr	r3, [r4, #0]
 80111c8:	6818      	ldr	r0, [r3, #0]
      break;
 80111ca:	e7ed      	b.n	80111a8 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80111cc:	f7ff ff46 	bl	801105c <CRC_Handle_8>
      break;
 80111d0:	e7ea      	b.n	80111a8 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80111d2:	f7ff ff87 	bl	80110e4 <CRC_Handle_16>
      break;
 80111d6:	e7e7      	b.n	80111a8 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 80111d8:	2002      	movs	r0, #2
 80111da:	e7e9      	b.n	80111b0 <HAL_CRC_Accumulate+0x2a>

080111dc <HAL_CRC_Calculate>:
{
 80111dc:	b570      	push	{r4, r5, r6, lr}
 80111de:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80111e0:	7f03      	ldrb	r3, [r0, #28]
 80111e2:	2b01      	cmp	r3, #1
 80111e4:	d029      	beq.n	801123a <HAL_CRC_Calculate+0x5e>
 80111e6:	2501      	movs	r5, #1
 80111e8:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80111ea:	2302      	movs	r3, #2
 80111ec:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80111ee:	6800      	ldr	r0, [r0, #0]
 80111f0:	6883      	ldr	r3, [r0, #8]
 80111f2:	432b      	orrs	r3, r5
 80111f4:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 80111f6:	6a23      	ldr	r3, [r4, #32]
 80111f8:	2b02      	cmp	r3, #2
 80111fa:	d01a      	beq.n	8011232 <HAL_CRC_Calculate+0x56>
 80111fc:	2b03      	cmp	r3, #3
 80111fe:	d007      	beq.n	8011210 <HAL_CRC_Calculate+0x34>
 8011200:	2b01      	cmp	r3, #1
 8011202:	d012      	beq.n	801122a <HAL_CRC_Calculate+0x4e>
 8011204:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8011206:	2301      	movs	r3, #1
 8011208:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801120a:	2300      	movs	r3, #0
 801120c:	7723      	strb	r3, [r4, #28]
}
 801120e:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8011210:	2a00      	cmp	r2, #0
 8011212:	d007      	beq.n	8011224 <HAL_CRC_Calculate+0x48>
 8011214:	000b      	movs	r3, r1
 8011216:	0092      	lsls	r2, r2, #2
 8011218:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 801121a:	6822      	ldr	r2, [r4, #0]
 801121c:	cb01      	ldmia	r3!, {r0}
 801121e:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8011220:	428b      	cmp	r3, r1
 8011222:	d1fa      	bne.n	801121a <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8011224:	6823      	ldr	r3, [r4, #0]
 8011226:	6818      	ldr	r0, [r3, #0]
      break;
 8011228:	e7ed      	b.n	8011206 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 801122a:	0020      	movs	r0, r4
 801122c:	f7ff ff16 	bl	801105c <CRC_Handle_8>
      break;
 8011230:	e7e9      	b.n	8011206 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8011232:	0020      	movs	r0, r4
 8011234:	f7ff ff56 	bl	80110e4 <CRC_Handle_16>
      break;
 8011238:	e7e5      	b.n	8011206 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 801123a:	2002      	movs	r0, #2
 801123c:	e7e7      	b.n	801120e <HAL_CRC_Calculate+0x32>

0801123e <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 801123e:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011240:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8011242:	2501      	movs	r5, #1
 8011244:	002c      	movs	r4, r5
 8011246:	409c      	lsls	r4, r3
 8011248:	4221      	tst	r1, r4
 801124a:	d105      	bne.n	8011258 <HAL_CRCEx_Polynomial_Set+0x1a>
 801124c:	3b01      	subs	r3, #1
 801124e:	d2f9      	bcs.n	8011244 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8011250:	2a10      	cmp	r2, #16
 8011252:	d103      	bne.n	801125c <HAL_CRCEx_Polynomial_Set+0x1e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      { 
        return  HAL_ERROR;
 8011254:	2001      	movs	r0, #1
 8011256:	e00e      	b.n	8011276 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8011258:	2a10      	cmp	r2, #16
 801125a:	d011      	beq.n	8011280 <HAL_CRCEx_Polynomial_Set+0x42>
 801125c:	2a18      	cmp	r2, #24
 801125e:	d00b      	beq.n	8011278 <HAL_CRCEx_Polynomial_Set+0x3a>
 8011260:	2a08      	cmp	r2, #8
 8011262:	d011      	beq.n	8011288 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8011264:	6803      	ldr	r3, [r0, #0]
 8011266:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8011268:	6801      	ldr	r1, [r0, #0]
 801126a:	688b      	ldr	r3, [r1, #8]
 801126c:	2018      	movs	r0, #24
 801126e:	4383      	bics	r3, r0
 8011270:	431a      	orrs	r2, r3
 8011272:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8011274:	2000      	movs	r0, #0
}
 8011276:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8011278:	2b06      	cmp	r3, #6
 801127a:	d9f3      	bls.n	8011264 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 801127c:	2001      	movs	r0, #1
 801127e:	e7fa      	b.n	8011276 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 8011280:	2b07      	cmp	r3, #7
 8011282:	d9ef      	bls.n	8011264 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8011284:	2001      	movs	r0, #1
 8011286:	e7f6      	b.n	8011276 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 8011288:	2b0f      	cmp	r3, #15
 801128a:	d9eb      	bls.n	8011264 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 801128c:	2001      	movs	r0, #1
 801128e:	e7f2      	b.n	8011276 <HAL_CRCEx_Polynomial_Set+0x38>

08011290 <HAL_CRCEx_Init>:
{
 8011290:	b510      	push	{r4, lr}
 8011292:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8011294:	7900      	ldrb	r0, [r0, #4]
 8011296:	2800      	cmp	r0, #0
 8011298:	d108      	bne.n	80112ac <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	4908      	ldr	r1, [pc, #32]	; (80112c0 <HAL_CRCEx_Init+0x30>)
 801129e:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	6893      	ldr	r3, [r2, #8]
 80112a4:	2118      	movs	r1, #24
 80112a6:	438b      	bics	r3, r1
 80112a8:	6093      	str	r3, [r2, #8]
}
 80112aa:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80112ac:	68da      	ldr	r2, [r3, #12]
 80112ae:	6899      	ldr	r1, [r3, #8]
 80112b0:	0018      	movs	r0, r3
 80112b2:	f7ff ffc4 	bl	801123e <HAL_CRCEx_Polynomial_Set>
 80112b6:	1e43      	subs	r3, r0, #1
 80112b8:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 80112ba:	b2c0      	uxtb	r0, r0
 80112bc:	e7f5      	b.n	80112aa <HAL_CRCEx_Init+0x1a>
 80112be:	46c0      	nop			; (mov r8, r8)
 80112c0:	04c11db7 	.word	0x04c11db7

080112c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80112c4:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80112c6:	2800      	cmp	r0, #0
 80112c8:	d022      	beq.n	8011310 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 80112ca:	2321      	movs	r3, #33	; 0x21
 80112cc:	5cc3      	ldrb	r3, [r0, r3]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d102      	bne.n	80112d8 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80112d2:	3320      	adds	r3, #32
 80112d4:	2200      	movs	r2, #0
 80112d6:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80112d8:	2121      	movs	r1, #33	; 0x21
 80112da:	2302      	movs	r3, #2
 80112dc:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80112de:	6804      	ldr	r4, [r0, #0]
 80112e0:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80112e2:	4a0c      	ldr	r2, [pc, #48]	; (8011314 <HAL_DMA_Init+0x50>)
 80112e4:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80112e6:	6843      	ldr	r3, [r0, #4]
 80112e8:	6885      	ldr	r5, [r0, #8]
 80112ea:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80112ec:	68c5      	ldr	r5, [r0, #12]
 80112ee:	432b      	orrs	r3, r5
 80112f0:	6905      	ldr	r5, [r0, #16]
 80112f2:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80112f4:	6945      	ldr	r5, [r0, #20]
 80112f6:	432b      	orrs	r3, r5
 80112f8:	6985      	ldr	r5, [r0, #24]
 80112fa:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80112fc:	69c5      	ldr	r5, [r0, #28]
 80112fe:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8011300:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8011302:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011304:	2300      	movs	r3, #0
 8011306:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011308:	3301      	adds	r3, #1
 801130a:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 801130c:	2000      	movs	r0, #0
}  
 801130e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8011310:	2001      	movs	r0, #1
 8011312:	e7fc      	b.n	801130e <HAL_DMA_Init+0x4a>
 8011314:	ffffc00f 	.word	0xffffc00f

08011318 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011318:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 801131a:	2420      	movs	r4, #32
 801131c:	5d04      	ldrb	r4, [r0, r4]
 801131e:	2c01      	cmp	r4, #1
 8011320:	d02d      	beq.n	801137e <HAL_DMA_Start_IT+0x66>
 8011322:	2601      	movs	r6, #1
 8011324:	2420      	movs	r4, #32
 8011326:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8011328:	3401      	adds	r4, #1
 801132a:	2502      	movs	r5, #2
 801132c:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801132e:	6805      	ldr	r5, [r0, #0]
 8011330:	682c      	ldr	r4, [r5, #0]
 8011332:	43b4      	bics	r4, r6
 8011334:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8011336:	6804      	ldr	r4, [r0, #0]
 8011338:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801133a:	6843      	ldr	r3, [r0, #4]
 801133c:	2b10      	cmp	r3, #16
 801133e:	d019      	beq.n	8011374 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8011340:	6803      	ldr	r3, [r0, #0]
 8011342:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8011344:	6803      	ldr	r3, [r0, #0]
 8011346:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8011348:	6802      	ldr	r2, [r0, #0]
 801134a:	6813      	ldr	r3, [r2, #0]
 801134c:	2102      	movs	r1, #2
 801134e:	430b      	orrs	r3, r1
 8011350:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8011352:	6802      	ldr	r2, [r0, #0]
 8011354:	6813      	ldr	r3, [r2, #0]
 8011356:	3102      	adds	r1, #2
 8011358:	430b      	orrs	r3, r1
 801135a:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 801135c:	6802      	ldr	r2, [r0, #0]
 801135e:	6813      	ldr	r3, [r2, #0]
 8011360:	3104      	adds	r1, #4
 8011362:	430b      	orrs	r3, r1
 8011364:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8011366:	6802      	ldr	r2, [r0, #0]
 8011368:	6813      	ldr	r3, [r2, #0]
 801136a:	3907      	subs	r1, #7
 801136c:	430b      	orrs	r3, r1
 801136e:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8011370:	2000      	movs	r0, #0
} 
 8011372:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8011374:	6803      	ldr	r3, [r0, #0]
 8011376:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8011378:	6803      	ldr	r3, [r0, #0]
 801137a:	60d9      	str	r1, [r3, #12]
 801137c:	e7e4      	b.n	8011348 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 801137e:	2002      	movs	r0, #2
 8011380:	e7f7      	b.n	8011372 <HAL_DMA_Start_IT+0x5a>

08011382 <HAL_DMA_Abort>:
{
 8011382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011384:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8011386:	6802      	ldr	r2, [r0, #0]
 8011388:	6813      	ldr	r3, [r2, #0]
 801138a:	2101      	movs	r1, #1
 801138c:	438b      	bics	r3, r1
 801138e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8011390:	f7ff fabe 	bl	8010910 <HAL_GetTick>
 8011394:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8011396:	2601      	movs	r6, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8011398:	27fa      	movs	r7, #250	; 0xfa
 801139a:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801139c:	6823      	ldr	r3, [r4, #0]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	421e      	tst	r6, r3
 80113a2:	d00f      	beq.n	80113c4 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80113a4:	f7ff fab4 	bl	8010910 <HAL_GetTick>
 80113a8:	1b40      	subs	r0, r0, r5
 80113aa:	42b8      	cmp	r0, r7
 80113ac:	d9f6      	bls.n	801139c <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80113ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80113b0:	2220      	movs	r2, #32
 80113b2:	4313      	orrs	r3, r2
 80113b4:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80113b6:	2321      	movs	r3, #33	; 0x21
 80113b8:	2103      	movs	r1, #3
 80113ba:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80113bc:	2300      	movs	r3, #0
 80113be:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 80113c0:	2003      	movs	r0, #3
 80113c2:	e006      	b.n	80113d2 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 80113c4:	2321      	movs	r3, #33	; 0x21
 80113c6:	2201      	movs	r2, #1
 80113c8:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 80113ca:	3b01      	subs	r3, #1
 80113cc:	2200      	movs	r2, #0
 80113ce:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80113d0:	2000      	movs	r0, #0
}
 80113d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113d4 <HAL_DMA_IRQHandler>:
{        
 80113d4:	b510      	push	{r4, lr}
 80113d6:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80113d8:	6803      	ldr	r3, [r0, #0]
 80113da:	4ab1      	ldr	r2, [pc, #708]	; (80116a0 <HAL_DMA_IRQHandler+0x2cc>)
 80113dc:	4293      	cmp	r3, r2
 80113de:	d97e      	bls.n	80114de <HAL_DMA_IRQHandler+0x10a>
 80113e0:	4ab0      	ldr	r2, [pc, #704]	; (80116a4 <HAL_DMA_IRQHandler+0x2d0>)
 80113e2:	6811      	ldr	r1, [r2, #0]
 80113e4:	4ab0      	ldr	r2, [pc, #704]	; (80116a8 <HAL_DMA_IRQHandler+0x2d4>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d026      	beq.n	8011438 <HAL_DMA_IRQHandler+0x64>
 80113ea:	4ab0      	ldr	r2, [pc, #704]	; (80116ac <HAL_DMA_IRQHandler+0x2d8>)
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d05e      	beq.n	80114ae <HAL_DMA_IRQHandler+0xda>
 80113f0:	4aaf      	ldr	r2, [pc, #700]	; (80116b0 <HAL_DMA_IRQHandler+0x2dc>)
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d05d      	beq.n	80114b2 <HAL_DMA_IRQHandler+0xde>
 80113f6:	4aaf      	ldr	r2, [pc, #700]	; (80116b4 <HAL_DMA_IRQHandler+0x2e0>)
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d05d      	beq.n	80114b8 <HAL_DMA_IRQHandler+0xe4>
 80113fc:	4aae      	ldr	r2, [pc, #696]	; (80116b8 <HAL_DMA_IRQHandler+0x2e4>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d05d      	beq.n	80114be <HAL_DMA_IRQHandler+0xea>
 8011402:	4aae      	ldr	r2, [pc, #696]	; (80116bc <HAL_DMA_IRQHandler+0x2e8>)
 8011404:	4293      	cmp	r3, r2
 8011406:	d05d      	beq.n	80114c4 <HAL_DMA_IRQHandler+0xf0>
 8011408:	4aa5      	ldr	r2, [pc, #660]	; (80116a0 <HAL_DMA_IRQHandler+0x2cc>)
 801140a:	4293      	cmp	r3, r2
 801140c:	d05d      	beq.n	80114ca <HAL_DMA_IRQHandler+0xf6>
 801140e:	4aac      	ldr	r2, [pc, #688]	; (80116c0 <HAL_DMA_IRQHandler+0x2ec>)
 8011410:	4293      	cmp	r3, r2
 8011412:	d05d      	beq.n	80114d0 <HAL_DMA_IRQHandler+0xfc>
 8011414:	4aab      	ldr	r2, [pc, #684]	; (80116c4 <HAL_DMA_IRQHandler+0x2f0>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d05c      	beq.n	80114d4 <HAL_DMA_IRQHandler+0x100>
 801141a:	4aab      	ldr	r2, [pc, #684]	; (80116c8 <HAL_DMA_IRQHandler+0x2f4>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d05b      	beq.n	80114d8 <HAL_DMA_IRQHandler+0x104>
 8011420:	4aaa      	ldr	r2, [pc, #680]	; (80116cc <HAL_DMA_IRQHandler+0x2f8>)
 8011422:	189a      	adds	r2, r3, r2
 8011424:	4250      	negs	r0, r2
 8011426:	4142      	adcs	r2, r0
 8011428:	4252      	negs	r2, r2
 801142a:	48a9      	ldr	r0, [pc, #676]	; (80116d0 <HAL_DMA_IRQHandler+0x2fc>)
 801142c:	4002      	ands	r2, r0
 801142e:	2080      	movs	r0, #128	; 0x80
 8011430:	0300      	lsls	r0, r0, #12
 8011432:	4684      	mov	ip, r0
 8011434:	4462      	add	r2, ip
 8011436:	e000      	b.n	801143a <HAL_DMA_IRQHandler+0x66>
 8011438:	2208      	movs	r2, #8
 801143a:	420a      	tst	r2, r1
 801143c:	d001      	beq.n	8011442 <HAL_DMA_IRQHandler+0x6e>
 801143e:	f000 fbfb 	bl	8011c38 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011442:	4a98      	ldr	r2, [pc, #608]	; (80116a4 <HAL_DMA_IRQHandler+0x2d0>)
 8011444:	6811      	ldr	r1, [r2, #0]
 8011446:	4a98      	ldr	r2, [pc, #608]	; (80116a8 <HAL_DMA_IRQHandler+0x2d4>)
 8011448:	4293      	cmp	r3, r2
 801144a:	d100      	bne.n	801144e <HAL_DMA_IRQHandler+0x7a>
 801144c:	e18d      	b.n	801176a <HAL_DMA_IRQHandler+0x396>
 801144e:	4a97      	ldr	r2, [pc, #604]	; (80116ac <HAL_DMA_IRQHandler+0x2d8>)
 8011450:	4293      	cmp	r3, r2
 8011452:	d100      	bne.n	8011456 <HAL_DMA_IRQHandler+0x82>
 8011454:	e18e      	b.n	8011774 <HAL_DMA_IRQHandler+0x3a0>
 8011456:	4a96      	ldr	r2, [pc, #600]	; (80116b0 <HAL_DMA_IRQHandler+0x2dc>)
 8011458:	4293      	cmp	r3, r2
 801145a:	d100      	bne.n	801145e <HAL_DMA_IRQHandler+0x8a>
 801145c:	e18c      	b.n	8011778 <HAL_DMA_IRQHandler+0x3a4>
 801145e:	4a95      	ldr	r2, [pc, #596]	; (80116b4 <HAL_DMA_IRQHandler+0x2e0>)
 8011460:	4293      	cmp	r3, r2
 8011462:	d100      	bne.n	8011466 <HAL_DMA_IRQHandler+0x92>
 8011464:	e18b      	b.n	801177e <HAL_DMA_IRQHandler+0x3aa>
 8011466:	4a94      	ldr	r2, [pc, #592]	; (80116b8 <HAL_DMA_IRQHandler+0x2e4>)
 8011468:	4293      	cmp	r3, r2
 801146a:	d100      	bne.n	801146e <HAL_DMA_IRQHandler+0x9a>
 801146c:	e18a      	b.n	8011784 <HAL_DMA_IRQHandler+0x3b0>
 801146e:	4a93      	ldr	r2, [pc, #588]	; (80116bc <HAL_DMA_IRQHandler+0x2e8>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d100      	bne.n	8011476 <HAL_DMA_IRQHandler+0xa2>
 8011474:	e189      	b.n	801178a <HAL_DMA_IRQHandler+0x3b6>
 8011476:	4a8a      	ldr	r2, [pc, #552]	; (80116a0 <HAL_DMA_IRQHandler+0x2cc>)
 8011478:	4293      	cmp	r3, r2
 801147a:	d100      	bne.n	801147e <HAL_DMA_IRQHandler+0xaa>
 801147c:	e188      	b.n	8011790 <HAL_DMA_IRQHandler+0x3bc>
 801147e:	4a90      	ldr	r2, [pc, #576]	; (80116c0 <HAL_DMA_IRQHandler+0x2ec>)
 8011480:	4293      	cmp	r3, r2
 8011482:	d100      	bne.n	8011486 <HAL_DMA_IRQHandler+0xb2>
 8011484:	e187      	b.n	8011796 <HAL_DMA_IRQHandler+0x3c2>
 8011486:	4a8f      	ldr	r2, [pc, #572]	; (80116c4 <HAL_DMA_IRQHandler+0x2f0>)
 8011488:	4293      	cmp	r3, r2
 801148a:	d100      	bne.n	801148e <HAL_DMA_IRQHandler+0xba>
 801148c:	e185      	b.n	801179a <HAL_DMA_IRQHandler+0x3c6>
 801148e:	4a8e      	ldr	r2, [pc, #568]	; (80116c8 <HAL_DMA_IRQHandler+0x2f4>)
 8011490:	4293      	cmp	r3, r2
 8011492:	d100      	bne.n	8011496 <HAL_DMA_IRQHandler+0xc2>
 8011494:	e183      	b.n	801179e <HAL_DMA_IRQHandler+0x3ca>
 8011496:	4a8d      	ldr	r2, [pc, #564]	; (80116cc <HAL_DMA_IRQHandler+0x2f8>)
 8011498:	189a      	adds	r2, r3, r2
 801149a:	4250      	negs	r0, r2
 801149c:	4142      	adcs	r2, r0
 801149e:	4252      	negs	r2, r2
 80114a0:	488c      	ldr	r0, [pc, #560]	; (80116d4 <HAL_DMA_IRQHandler+0x300>)
 80114a2:	4002      	ands	r2, r0
 80114a4:	2080      	movs	r0, #128	; 0x80
 80114a6:	02c0      	lsls	r0, r0, #11
 80114a8:	4684      	mov	ip, r0
 80114aa:	4462      	add	r2, ip
 80114ac:	e15e      	b.n	801176c <HAL_DMA_IRQHandler+0x398>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80114ae:	2280      	movs	r2, #128	; 0x80
 80114b0:	e7c3      	b.n	801143a <HAL_DMA_IRQHandler+0x66>
 80114b2:	2280      	movs	r2, #128	; 0x80
 80114b4:	0112      	lsls	r2, r2, #4
 80114b6:	e7c0      	b.n	801143a <HAL_DMA_IRQHandler+0x66>
 80114b8:	2280      	movs	r2, #128	; 0x80
 80114ba:	0212      	lsls	r2, r2, #8
 80114bc:	e7bd      	b.n	801143a <HAL_DMA_IRQHandler+0x66>
 80114be:	2280      	movs	r2, #128	; 0x80
 80114c0:	0312      	lsls	r2, r2, #12
 80114c2:	e7ba      	b.n	801143a <HAL_DMA_IRQHandler+0x66>
 80114c4:	2280      	movs	r2, #128	; 0x80
 80114c6:	0412      	lsls	r2, r2, #16
 80114c8:	e7b7      	b.n	801143a <HAL_DMA_IRQHandler+0x66>
 80114ca:	2280      	movs	r2, #128	; 0x80
 80114cc:	0512      	lsls	r2, r2, #20
 80114ce:	e7b4      	b.n	801143a <HAL_DMA_IRQHandler+0x66>
 80114d0:	2208      	movs	r2, #8
 80114d2:	e7b2      	b.n	801143a <HAL_DMA_IRQHandler+0x66>
 80114d4:	2280      	movs	r2, #128	; 0x80
 80114d6:	e7b0      	b.n	801143a <HAL_DMA_IRQHandler+0x66>
 80114d8:	2280      	movs	r2, #128	; 0x80
 80114da:	0112      	lsls	r2, r2, #4
 80114dc:	e7ad      	b.n	801143a <HAL_DMA_IRQHandler+0x66>
 80114de:	4a7e      	ldr	r2, [pc, #504]	; (80116d8 <HAL_DMA_IRQHandler+0x304>)
 80114e0:	6811      	ldr	r1, [r2, #0]
 80114e2:	4a71      	ldr	r2, [pc, #452]	; (80116a8 <HAL_DMA_IRQHandler+0x2d4>)
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d026      	beq.n	8011536 <HAL_DMA_IRQHandler+0x162>
 80114e8:	4a70      	ldr	r2, [pc, #448]	; (80116ac <HAL_DMA_IRQHandler+0x2d8>)
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d05d      	beq.n	80115aa <HAL_DMA_IRQHandler+0x1d6>
 80114ee:	4a70      	ldr	r2, [pc, #448]	; (80116b0 <HAL_DMA_IRQHandler+0x2dc>)
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d05c      	beq.n	80115ae <HAL_DMA_IRQHandler+0x1da>
 80114f4:	4a6f      	ldr	r2, [pc, #444]	; (80116b4 <HAL_DMA_IRQHandler+0x2e0>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d05c      	beq.n	80115b4 <HAL_DMA_IRQHandler+0x1e0>
 80114fa:	4a6f      	ldr	r2, [pc, #444]	; (80116b8 <HAL_DMA_IRQHandler+0x2e4>)
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d05c      	beq.n	80115ba <HAL_DMA_IRQHandler+0x1e6>
 8011500:	4a6e      	ldr	r2, [pc, #440]	; (80116bc <HAL_DMA_IRQHandler+0x2e8>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d05c      	beq.n	80115c0 <HAL_DMA_IRQHandler+0x1ec>
 8011506:	4a66      	ldr	r2, [pc, #408]	; (80116a0 <HAL_DMA_IRQHandler+0x2cc>)
 8011508:	4293      	cmp	r3, r2
 801150a:	d05c      	beq.n	80115c6 <HAL_DMA_IRQHandler+0x1f2>
 801150c:	4a6c      	ldr	r2, [pc, #432]	; (80116c0 <HAL_DMA_IRQHandler+0x2ec>)
 801150e:	4293      	cmp	r3, r2
 8011510:	d05c      	beq.n	80115cc <HAL_DMA_IRQHandler+0x1f8>
 8011512:	4a6c      	ldr	r2, [pc, #432]	; (80116c4 <HAL_DMA_IRQHandler+0x2f0>)
 8011514:	4293      	cmp	r3, r2
 8011516:	d05b      	beq.n	80115d0 <HAL_DMA_IRQHandler+0x1fc>
 8011518:	4a6b      	ldr	r2, [pc, #428]	; (80116c8 <HAL_DMA_IRQHandler+0x2f4>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d05a      	beq.n	80115d4 <HAL_DMA_IRQHandler+0x200>
 801151e:	4a6b      	ldr	r2, [pc, #428]	; (80116cc <HAL_DMA_IRQHandler+0x2f8>)
 8011520:	189a      	adds	r2, r3, r2
 8011522:	4250      	negs	r0, r2
 8011524:	4142      	adcs	r2, r0
 8011526:	4252      	negs	r2, r2
 8011528:	4869      	ldr	r0, [pc, #420]	; (80116d0 <HAL_DMA_IRQHandler+0x2fc>)
 801152a:	4002      	ands	r2, r0
 801152c:	2080      	movs	r0, #128	; 0x80
 801152e:	0300      	lsls	r0, r0, #12
 8011530:	4684      	mov	ip, r0
 8011532:	4462      	add	r2, ip
 8011534:	e000      	b.n	8011538 <HAL_DMA_IRQHandler+0x164>
 8011536:	2208      	movs	r2, #8
 8011538:	420a      	tst	r2, r1
 801153a:	d000      	beq.n	801153e <HAL_DMA_IRQHandler+0x16a>
 801153c:	e376      	b.n	8011c2c <HAL_DMA_IRQHandler+0x858>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801153e:	4a66      	ldr	r2, [pc, #408]	; (80116d8 <HAL_DMA_IRQHandler+0x304>)
 8011540:	6811      	ldr	r1, [r2, #0]
 8011542:	4a59      	ldr	r2, [pc, #356]	; (80116a8 <HAL_DMA_IRQHandler+0x2d4>)
 8011544:	4293      	cmp	r3, r2
 8011546:	d100      	bne.n	801154a <HAL_DMA_IRQHandler+0x176>
 8011548:	e12c      	b.n	80117a4 <HAL_DMA_IRQHandler+0x3d0>
 801154a:	4a58      	ldr	r2, [pc, #352]	; (80116ac <HAL_DMA_IRQHandler+0x2d8>)
 801154c:	4293      	cmp	r3, r2
 801154e:	d100      	bne.n	8011552 <HAL_DMA_IRQHandler+0x17e>
 8011550:	e16e      	b.n	8011830 <HAL_DMA_IRQHandler+0x45c>
 8011552:	4a57      	ldr	r2, [pc, #348]	; (80116b0 <HAL_DMA_IRQHandler+0x2dc>)
 8011554:	4293      	cmp	r3, r2
 8011556:	d100      	bne.n	801155a <HAL_DMA_IRQHandler+0x186>
 8011558:	e16c      	b.n	8011834 <HAL_DMA_IRQHandler+0x460>
 801155a:	4a56      	ldr	r2, [pc, #344]	; (80116b4 <HAL_DMA_IRQHandler+0x2e0>)
 801155c:	4293      	cmp	r3, r2
 801155e:	d100      	bne.n	8011562 <HAL_DMA_IRQHandler+0x18e>
 8011560:	e16b      	b.n	801183a <HAL_DMA_IRQHandler+0x466>
 8011562:	4a55      	ldr	r2, [pc, #340]	; (80116b8 <HAL_DMA_IRQHandler+0x2e4>)
 8011564:	4293      	cmp	r3, r2
 8011566:	d100      	bne.n	801156a <HAL_DMA_IRQHandler+0x196>
 8011568:	e16a      	b.n	8011840 <HAL_DMA_IRQHandler+0x46c>
 801156a:	4a54      	ldr	r2, [pc, #336]	; (80116bc <HAL_DMA_IRQHandler+0x2e8>)
 801156c:	4293      	cmp	r3, r2
 801156e:	d100      	bne.n	8011572 <HAL_DMA_IRQHandler+0x19e>
 8011570:	e169      	b.n	8011846 <HAL_DMA_IRQHandler+0x472>
 8011572:	4a4b      	ldr	r2, [pc, #300]	; (80116a0 <HAL_DMA_IRQHandler+0x2cc>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d100      	bne.n	801157a <HAL_DMA_IRQHandler+0x1a6>
 8011578:	e168      	b.n	801184c <HAL_DMA_IRQHandler+0x478>
 801157a:	4a51      	ldr	r2, [pc, #324]	; (80116c0 <HAL_DMA_IRQHandler+0x2ec>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d100      	bne.n	8011582 <HAL_DMA_IRQHandler+0x1ae>
 8011580:	e167      	b.n	8011852 <HAL_DMA_IRQHandler+0x47e>
 8011582:	4a50      	ldr	r2, [pc, #320]	; (80116c4 <HAL_DMA_IRQHandler+0x2f0>)
 8011584:	4293      	cmp	r3, r2
 8011586:	d100      	bne.n	801158a <HAL_DMA_IRQHandler+0x1b6>
 8011588:	e165      	b.n	8011856 <HAL_DMA_IRQHandler+0x482>
 801158a:	4a4f      	ldr	r2, [pc, #316]	; (80116c8 <HAL_DMA_IRQHandler+0x2f4>)
 801158c:	4293      	cmp	r3, r2
 801158e:	d100      	bne.n	8011592 <HAL_DMA_IRQHandler+0x1be>
 8011590:	e163      	b.n	801185a <HAL_DMA_IRQHandler+0x486>
 8011592:	4a4e      	ldr	r2, [pc, #312]	; (80116cc <HAL_DMA_IRQHandler+0x2f8>)
 8011594:	189a      	adds	r2, r3, r2
 8011596:	4250      	negs	r0, r2
 8011598:	4142      	adcs	r2, r0
 801159a:	4252      	negs	r2, r2
 801159c:	484d      	ldr	r0, [pc, #308]	; (80116d4 <HAL_DMA_IRQHandler+0x300>)
 801159e:	4002      	ands	r2, r0
 80115a0:	2080      	movs	r0, #128	; 0x80
 80115a2:	02c0      	lsls	r0, r0, #11
 80115a4:	4684      	mov	ip, r0
 80115a6:	4462      	add	r2, ip
 80115a8:	e0fd      	b.n	80117a6 <HAL_DMA_IRQHandler+0x3d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80115aa:	2280      	movs	r2, #128	; 0x80
 80115ac:	e7c4      	b.n	8011538 <HAL_DMA_IRQHandler+0x164>
 80115ae:	2280      	movs	r2, #128	; 0x80
 80115b0:	0112      	lsls	r2, r2, #4
 80115b2:	e7c1      	b.n	8011538 <HAL_DMA_IRQHandler+0x164>
 80115b4:	2280      	movs	r2, #128	; 0x80
 80115b6:	0212      	lsls	r2, r2, #8
 80115b8:	e7be      	b.n	8011538 <HAL_DMA_IRQHandler+0x164>
 80115ba:	2280      	movs	r2, #128	; 0x80
 80115bc:	0312      	lsls	r2, r2, #12
 80115be:	e7bb      	b.n	8011538 <HAL_DMA_IRQHandler+0x164>
 80115c0:	2280      	movs	r2, #128	; 0x80
 80115c2:	0412      	lsls	r2, r2, #16
 80115c4:	e7b8      	b.n	8011538 <HAL_DMA_IRQHandler+0x164>
 80115c6:	2280      	movs	r2, #128	; 0x80
 80115c8:	0512      	lsls	r2, r2, #20
 80115ca:	e7b5      	b.n	8011538 <HAL_DMA_IRQHandler+0x164>
 80115cc:	2208      	movs	r2, #8
 80115ce:	e7b3      	b.n	8011538 <HAL_DMA_IRQHandler+0x164>
 80115d0:	2280      	movs	r2, #128	; 0x80
 80115d2:	e7b1      	b.n	8011538 <HAL_DMA_IRQHandler+0x164>
 80115d4:	2280      	movs	r2, #128	; 0x80
 80115d6:	0112      	lsls	r2, r2, #4
 80115d8:	e7ae      	b.n	8011538 <HAL_DMA_IRQHandler+0x164>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80115da:	681a      	ldr	r2, [r3, #0]
 80115dc:	2108      	movs	r1, #8
 80115de:	438a      	bics	r2, r1
 80115e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80115e2:	6823      	ldr	r3, [r4, #0]
 80115e4:	4a2e      	ldr	r2, [pc, #184]	; (80116a0 <HAL_DMA_IRQHandler+0x2cc>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d978      	bls.n	80116dc <HAL_DMA_IRQHandler+0x308>
 80115ea:	4a2f      	ldr	r2, [pc, #188]	; (80116a8 <HAL_DMA_IRQHandler+0x2d4>)
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d027      	beq.n	8011640 <HAL_DMA_IRQHandler+0x26c>
 80115f0:	4a2e      	ldr	r2, [pc, #184]	; (80116ac <HAL_DMA_IRQHandler+0x2d8>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d03c      	beq.n	8011670 <HAL_DMA_IRQHandler+0x29c>
 80115f6:	4a2e      	ldr	r2, [pc, #184]	; (80116b0 <HAL_DMA_IRQHandler+0x2dc>)
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d03b      	beq.n	8011674 <HAL_DMA_IRQHandler+0x2a0>
 80115fc:	4a2d      	ldr	r2, [pc, #180]	; (80116b4 <HAL_DMA_IRQHandler+0x2e0>)
 80115fe:	4293      	cmp	r3, r2
 8011600:	d03b      	beq.n	801167a <HAL_DMA_IRQHandler+0x2a6>
 8011602:	4a2d      	ldr	r2, [pc, #180]	; (80116b8 <HAL_DMA_IRQHandler+0x2e4>)
 8011604:	4293      	cmp	r3, r2
 8011606:	d03b      	beq.n	8011680 <HAL_DMA_IRQHandler+0x2ac>
 8011608:	4a2c      	ldr	r2, [pc, #176]	; (80116bc <HAL_DMA_IRQHandler+0x2e8>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d03b      	beq.n	8011686 <HAL_DMA_IRQHandler+0x2b2>
 801160e:	4a24      	ldr	r2, [pc, #144]	; (80116a0 <HAL_DMA_IRQHandler+0x2cc>)
 8011610:	4293      	cmp	r3, r2
 8011612:	d03b      	beq.n	801168c <HAL_DMA_IRQHandler+0x2b8>
 8011614:	4a2a      	ldr	r2, [pc, #168]	; (80116c0 <HAL_DMA_IRQHandler+0x2ec>)
 8011616:	4293      	cmp	r3, r2
 8011618:	d03b      	beq.n	8011692 <HAL_DMA_IRQHandler+0x2be>
 801161a:	4a2a      	ldr	r2, [pc, #168]	; (80116c4 <HAL_DMA_IRQHandler+0x2f0>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d03a      	beq.n	8011696 <HAL_DMA_IRQHandler+0x2c2>
 8011620:	4a29      	ldr	r2, [pc, #164]	; (80116c8 <HAL_DMA_IRQHandler+0x2f4>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d039      	beq.n	801169a <HAL_DMA_IRQHandler+0x2c6>
 8011626:	4a29      	ldr	r2, [pc, #164]	; (80116cc <HAL_DMA_IRQHandler+0x2f8>)
 8011628:	4694      	mov	ip, r2
 801162a:	4463      	add	r3, ip
 801162c:	425a      	negs	r2, r3
 801162e:	4153      	adcs	r3, r2
 8011630:	425b      	negs	r3, r3
 8011632:	4a27      	ldr	r2, [pc, #156]	; (80116d0 <HAL_DMA_IRQHandler+0x2fc>)
 8011634:	4013      	ands	r3, r2
 8011636:	2280      	movs	r2, #128	; 0x80
 8011638:	0312      	lsls	r2, r2, #12
 801163a:	4694      	mov	ip, r2
 801163c:	4463      	add	r3, ip
 801163e:	e000      	b.n	8011642 <HAL_DMA_IRQHandler+0x26e>
 8011640:	2308      	movs	r3, #8
 8011642:	4a18      	ldr	r2, [pc, #96]	; (80116a4 <HAL_DMA_IRQHandler+0x2d0>)
 8011644:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011646:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011648:	2201      	movs	r2, #1
 801164a:	4313      	orrs	r3, r2
 801164c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801164e:	2321      	movs	r3, #33	; 0x21
 8011650:	3203      	adds	r2, #3
 8011652:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8011654:	3b01      	subs	r3, #1
 8011656:	2200      	movs	r2, #0
 8011658:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801165a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801165c:	2b00      	cmp	r3, #0
 801165e:	d001      	beq.n	8011664 <HAL_DMA_IRQHandler+0x290>
        hdma->XferErrorCallback(hdma);
 8011660:	0020      	movs	r0, r4
 8011662:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011664:	6823      	ldr	r3, [r4, #0]
 8011666:	4a0e      	ldr	r2, [pc, #56]	; (80116a0 <HAL_DMA_IRQHandler+0x2cc>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d800      	bhi.n	801166e <HAL_DMA_IRQHandler+0x29a>
 801166c:	e767      	b.n	801153e <HAL_DMA_IRQHandler+0x16a>
 801166e:	e6e8      	b.n	8011442 <HAL_DMA_IRQHandler+0x6e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011670:	2380      	movs	r3, #128	; 0x80
 8011672:	e7e6      	b.n	8011642 <HAL_DMA_IRQHandler+0x26e>
 8011674:	2380      	movs	r3, #128	; 0x80
 8011676:	011b      	lsls	r3, r3, #4
 8011678:	e7e3      	b.n	8011642 <HAL_DMA_IRQHandler+0x26e>
 801167a:	2380      	movs	r3, #128	; 0x80
 801167c:	021b      	lsls	r3, r3, #8
 801167e:	e7e0      	b.n	8011642 <HAL_DMA_IRQHandler+0x26e>
 8011680:	2380      	movs	r3, #128	; 0x80
 8011682:	031b      	lsls	r3, r3, #12
 8011684:	e7dd      	b.n	8011642 <HAL_DMA_IRQHandler+0x26e>
 8011686:	2380      	movs	r3, #128	; 0x80
 8011688:	041b      	lsls	r3, r3, #16
 801168a:	e7da      	b.n	8011642 <HAL_DMA_IRQHandler+0x26e>
 801168c:	2380      	movs	r3, #128	; 0x80
 801168e:	051b      	lsls	r3, r3, #20
 8011690:	e7d7      	b.n	8011642 <HAL_DMA_IRQHandler+0x26e>
 8011692:	2308      	movs	r3, #8
 8011694:	e7d5      	b.n	8011642 <HAL_DMA_IRQHandler+0x26e>
 8011696:	2380      	movs	r3, #128	; 0x80
 8011698:	e7d3      	b.n	8011642 <HAL_DMA_IRQHandler+0x26e>
 801169a:	2380      	movs	r3, #128	; 0x80
 801169c:	011b      	lsls	r3, r3, #4
 801169e:	e7d0      	b.n	8011642 <HAL_DMA_IRQHandler+0x26e>
 80116a0:	40020080 	.word	0x40020080
 80116a4:	40020400 	.word	0x40020400
 80116a8:	40020008 	.word	0x40020008
 80116ac:	4002001c 	.word	0x4002001c
 80116b0:	40020030 	.word	0x40020030
 80116b4:	40020044 	.word	0x40020044
 80116b8:	40020058 	.word	0x40020058
 80116bc:	4002006c 	.word	0x4002006c
 80116c0:	40020408 	.word	0x40020408
 80116c4:	4002041c 	.word	0x4002041c
 80116c8:	40020430 	.word	0x40020430
 80116cc:	bffdfbbc 	.word	0xbffdfbbc
 80116d0:	fff88000 	.word	0xfff88000
 80116d4:	fffc4000 	.word	0xfffc4000
 80116d8:	40020000 	.word	0x40020000
 80116dc:	4ab3      	ldr	r2, [pc, #716]	; (80119ac <HAL_DMA_IRQHandler+0x5d8>)
 80116de:	4293      	cmp	r3, r2
 80116e0:	d027      	beq.n	8011732 <HAL_DMA_IRQHandler+0x35e>
 80116e2:	4ab3      	ldr	r2, [pc, #716]	; (80119b0 <HAL_DMA_IRQHandler+0x5dc>)
 80116e4:	4293      	cmp	r3, r2
 80116e6:	d028      	beq.n	801173a <HAL_DMA_IRQHandler+0x366>
 80116e8:	4ab2      	ldr	r2, [pc, #712]	; (80119b4 <HAL_DMA_IRQHandler+0x5e0>)
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d027      	beq.n	801173e <HAL_DMA_IRQHandler+0x36a>
 80116ee:	4ab2      	ldr	r2, [pc, #712]	; (80119b8 <HAL_DMA_IRQHandler+0x5e4>)
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d027      	beq.n	8011744 <HAL_DMA_IRQHandler+0x370>
 80116f4:	4ab1      	ldr	r2, [pc, #708]	; (80119bc <HAL_DMA_IRQHandler+0x5e8>)
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d027      	beq.n	801174a <HAL_DMA_IRQHandler+0x376>
 80116fa:	4ab1      	ldr	r2, [pc, #708]	; (80119c0 <HAL_DMA_IRQHandler+0x5ec>)
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d027      	beq.n	8011750 <HAL_DMA_IRQHandler+0x37c>
 8011700:	4ab0      	ldr	r2, [pc, #704]	; (80119c4 <HAL_DMA_IRQHandler+0x5f0>)
 8011702:	4293      	cmp	r3, r2
 8011704:	d027      	beq.n	8011756 <HAL_DMA_IRQHandler+0x382>
 8011706:	4ab0      	ldr	r2, [pc, #704]	; (80119c8 <HAL_DMA_IRQHandler+0x5f4>)
 8011708:	4293      	cmp	r3, r2
 801170a:	d027      	beq.n	801175c <HAL_DMA_IRQHandler+0x388>
 801170c:	4aaf      	ldr	r2, [pc, #700]	; (80119cc <HAL_DMA_IRQHandler+0x5f8>)
 801170e:	4293      	cmp	r3, r2
 8011710:	d026      	beq.n	8011760 <HAL_DMA_IRQHandler+0x38c>
 8011712:	4aaf      	ldr	r2, [pc, #700]	; (80119d0 <HAL_DMA_IRQHandler+0x5fc>)
 8011714:	4293      	cmp	r3, r2
 8011716:	d025      	beq.n	8011764 <HAL_DMA_IRQHandler+0x390>
 8011718:	4aae      	ldr	r2, [pc, #696]	; (80119d4 <HAL_DMA_IRQHandler+0x600>)
 801171a:	4694      	mov	ip, r2
 801171c:	4463      	add	r3, ip
 801171e:	425a      	negs	r2, r3
 8011720:	4153      	adcs	r3, r2
 8011722:	425b      	negs	r3, r3
 8011724:	4aac      	ldr	r2, [pc, #688]	; (80119d8 <HAL_DMA_IRQHandler+0x604>)
 8011726:	4013      	ands	r3, r2
 8011728:	2280      	movs	r2, #128	; 0x80
 801172a:	0312      	lsls	r2, r2, #12
 801172c:	4694      	mov	ip, r2
 801172e:	4463      	add	r3, ip
 8011730:	e000      	b.n	8011734 <HAL_DMA_IRQHandler+0x360>
 8011732:	2308      	movs	r3, #8
 8011734:	4aa9      	ldr	r2, [pc, #676]	; (80119dc <HAL_DMA_IRQHandler+0x608>)
 8011736:	6053      	str	r3, [r2, #4]
 8011738:	e785      	b.n	8011646 <HAL_DMA_IRQHandler+0x272>
 801173a:	2380      	movs	r3, #128	; 0x80
 801173c:	e7fa      	b.n	8011734 <HAL_DMA_IRQHandler+0x360>
 801173e:	2380      	movs	r3, #128	; 0x80
 8011740:	011b      	lsls	r3, r3, #4
 8011742:	e7f7      	b.n	8011734 <HAL_DMA_IRQHandler+0x360>
 8011744:	2380      	movs	r3, #128	; 0x80
 8011746:	021b      	lsls	r3, r3, #8
 8011748:	e7f4      	b.n	8011734 <HAL_DMA_IRQHandler+0x360>
 801174a:	2380      	movs	r3, #128	; 0x80
 801174c:	031b      	lsls	r3, r3, #12
 801174e:	e7f1      	b.n	8011734 <HAL_DMA_IRQHandler+0x360>
 8011750:	2380      	movs	r3, #128	; 0x80
 8011752:	041b      	lsls	r3, r3, #16
 8011754:	e7ee      	b.n	8011734 <HAL_DMA_IRQHandler+0x360>
 8011756:	2380      	movs	r3, #128	; 0x80
 8011758:	051b      	lsls	r3, r3, #20
 801175a:	e7eb      	b.n	8011734 <HAL_DMA_IRQHandler+0x360>
 801175c:	2308      	movs	r3, #8
 801175e:	e7e9      	b.n	8011734 <HAL_DMA_IRQHandler+0x360>
 8011760:	2380      	movs	r3, #128	; 0x80
 8011762:	e7e7      	b.n	8011734 <HAL_DMA_IRQHandler+0x360>
 8011764:	2380      	movs	r3, #128	; 0x80
 8011766:	011b      	lsls	r3, r3, #4
 8011768:	e7e4      	b.n	8011734 <HAL_DMA_IRQHandler+0x360>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801176a:	2204      	movs	r2, #4
 801176c:	420a      	tst	r2, r1
 801176e:	d11d      	bne.n	80117ac <HAL_DMA_IRQHandler+0x3d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011770:	6821      	ldr	r1, [r4, #0]
 8011772:	e085      	b.n	8011880 <HAL_DMA_IRQHandler+0x4ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011774:	2240      	movs	r2, #64	; 0x40
 8011776:	e7f9      	b.n	801176c <HAL_DMA_IRQHandler+0x398>
 8011778:	2280      	movs	r2, #128	; 0x80
 801177a:	00d2      	lsls	r2, r2, #3
 801177c:	e7f6      	b.n	801176c <HAL_DMA_IRQHandler+0x398>
 801177e:	2280      	movs	r2, #128	; 0x80
 8011780:	01d2      	lsls	r2, r2, #7
 8011782:	e7f3      	b.n	801176c <HAL_DMA_IRQHandler+0x398>
 8011784:	2280      	movs	r2, #128	; 0x80
 8011786:	02d2      	lsls	r2, r2, #11
 8011788:	e7f0      	b.n	801176c <HAL_DMA_IRQHandler+0x398>
 801178a:	2280      	movs	r2, #128	; 0x80
 801178c:	03d2      	lsls	r2, r2, #15
 801178e:	e7ed      	b.n	801176c <HAL_DMA_IRQHandler+0x398>
 8011790:	2280      	movs	r2, #128	; 0x80
 8011792:	04d2      	lsls	r2, r2, #19
 8011794:	e7ea      	b.n	801176c <HAL_DMA_IRQHandler+0x398>
 8011796:	2204      	movs	r2, #4
 8011798:	e7e8      	b.n	801176c <HAL_DMA_IRQHandler+0x398>
 801179a:	2240      	movs	r2, #64	; 0x40
 801179c:	e7e6      	b.n	801176c <HAL_DMA_IRQHandler+0x398>
 801179e:	2280      	movs	r2, #128	; 0x80
 80117a0:	00d2      	lsls	r2, r2, #3
 80117a2:	e7e3      	b.n	801176c <HAL_DMA_IRQHandler+0x398>
 80117a4:	2204      	movs	r2, #4
 80117a6:	420a      	tst	r2, r1
 80117a8:	d100      	bne.n	80117ac <HAL_DMA_IRQHandler+0x3d8>
 80117aa:	e208      	b.n	8011bbe <HAL_DMA_IRQHandler+0x7ea>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80117ac:	681a      	ldr	r2, [r3, #0]
 80117ae:	0752      	lsls	r2, r2, #29
 80117b0:	d561      	bpl.n	8011876 <HAL_DMA_IRQHandler+0x4a2>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	0692      	lsls	r2, r2, #26
 80117b6:	d403      	bmi.n	80117c0 <HAL_DMA_IRQHandler+0x3ec>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	2104      	movs	r1, #4
 80117bc:	438a      	bics	r2, r1
 80117be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80117c0:	6823      	ldr	r3, [r4, #0]
 80117c2:	4a80      	ldr	r2, [pc, #512]	; (80119c4 <HAL_DMA_IRQHandler+0x5f0>)
 80117c4:	4293      	cmp	r3, r2
 80117c6:	d800      	bhi.n	80117ca <HAL_DMA_IRQHandler+0x3f6>
 80117c8:	e0a8      	b.n	801191c <HAL_DMA_IRQHandler+0x548>
 80117ca:	4a78      	ldr	r2, [pc, #480]	; (80119ac <HAL_DMA_IRQHandler+0x5d8>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d047      	beq.n	8011860 <HAL_DMA_IRQHandler+0x48c>
 80117d0:	4a77      	ldr	r2, [pc, #476]	; (80119b0 <HAL_DMA_IRQHandler+0x5dc>)
 80117d2:	4293      	cmp	r3, r2
 80117d4:	d100      	bne.n	80117d8 <HAL_DMA_IRQHandler+0x404>
 80117d6:	e089      	b.n	80118ec <HAL_DMA_IRQHandler+0x518>
 80117d8:	4a76      	ldr	r2, [pc, #472]	; (80119b4 <HAL_DMA_IRQHandler+0x5e0>)
 80117da:	4293      	cmp	r3, r2
 80117dc:	d100      	bne.n	80117e0 <HAL_DMA_IRQHandler+0x40c>
 80117de:	e087      	b.n	80118f0 <HAL_DMA_IRQHandler+0x51c>
 80117e0:	4a75      	ldr	r2, [pc, #468]	; (80119b8 <HAL_DMA_IRQHandler+0x5e4>)
 80117e2:	4293      	cmp	r3, r2
 80117e4:	d100      	bne.n	80117e8 <HAL_DMA_IRQHandler+0x414>
 80117e6:	e086      	b.n	80118f6 <HAL_DMA_IRQHandler+0x522>
 80117e8:	4a74      	ldr	r2, [pc, #464]	; (80119bc <HAL_DMA_IRQHandler+0x5e8>)
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d100      	bne.n	80117f0 <HAL_DMA_IRQHandler+0x41c>
 80117ee:	e085      	b.n	80118fc <HAL_DMA_IRQHandler+0x528>
 80117f0:	4a73      	ldr	r2, [pc, #460]	; (80119c0 <HAL_DMA_IRQHandler+0x5ec>)
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d100      	bne.n	80117f8 <HAL_DMA_IRQHandler+0x424>
 80117f6:	e084      	b.n	8011902 <HAL_DMA_IRQHandler+0x52e>
 80117f8:	4a72      	ldr	r2, [pc, #456]	; (80119c4 <HAL_DMA_IRQHandler+0x5f0>)
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d100      	bne.n	8011800 <HAL_DMA_IRQHandler+0x42c>
 80117fe:	e083      	b.n	8011908 <HAL_DMA_IRQHandler+0x534>
 8011800:	4a71      	ldr	r2, [pc, #452]	; (80119c8 <HAL_DMA_IRQHandler+0x5f4>)
 8011802:	4293      	cmp	r3, r2
 8011804:	d100      	bne.n	8011808 <HAL_DMA_IRQHandler+0x434>
 8011806:	e082      	b.n	801190e <HAL_DMA_IRQHandler+0x53a>
 8011808:	4a70      	ldr	r2, [pc, #448]	; (80119cc <HAL_DMA_IRQHandler+0x5f8>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d100      	bne.n	8011810 <HAL_DMA_IRQHandler+0x43c>
 801180e:	e080      	b.n	8011912 <HAL_DMA_IRQHandler+0x53e>
 8011810:	4a6f      	ldr	r2, [pc, #444]	; (80119d0 <HAL_DMA_IRQHandler+0x5fc>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d07f      	beq.n	8011916 <HAL_DMA_IRQHandler+0x542>
 8011816:	4a6f      	ldr	r2, [pc, #444]	; (80119d4 <HAL_DMA_IRQHandler+0x600>)
 8011818:	4694      	mov	ip, r2
 801181a:	4463      	add	r3, ip
 801181c:	425a      	negs	r2, r3
 801181e:	4153      	adcs	r3, r2
 8011820:	425b      	negs	r3, r3
 8011822:	4a6f      	ldr	r2, [pc, #444]	; (80119e0 <HAL_DMA_IRQHandler+0x60c>)
 8011824:	4013      	ands	r3, r2
 8011826:	2280      	movs	r2, #128	; 0x80
 8011828:	02d2      	lsls	r2, r2, #11
 801182a:	4694      	mov	ip, r2
 801182c:	4463      	add	r3, ip
 801182e:	e018      	b.n	8011862 <HAL_DMA_IRQHandler+0x48e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011830:	2240      	movs	r2, #64	; 0x40
 8011832:	e7b8      	b.n	80117a6 <HAL_DMA_IRQHandler+0x3d2>
 8011834:	2280      	movs	r2, #128	; 0x80
 8011836:	00d2      	lsls	r2, r2, #3
 8011838:	e7b5      	b.n	80117a6 <HAL_DMA_IRQHandler+0x3d2>
 801183a:	2280      	movs	r2, #128	; 0x80
 801183c:	01d2      	lsls	r2, r2, #7
 801183e:	e7b2      	b.n	80117a6 <HAL_DMA_IRQHandler+0x3d2>
 8011840:	2280      	movs	r2, #128	; 0x80
 8011842:	02d2      	lsls	r2, r2, #11
 8011844:	e7af      	b.n	80117a6 <HAL_DMA_IRQHandler+0x3d2>
 8011846:	2280      	movs	r2, #128	; 0x80
 8011848:	03d2      	lsls	r2, r2, #15
 801184a:	e7ac      	b.n	80117a6 <HAL_DMA_IRQHandler+0x3d2>
 801184c:	2280      	movs	r2, #128	; 0x80
 801184e:	04d2      	lsls	r2, r2, #19
 8011850:	e7a9      	b.n	80117a6 <HAL_DMA_IRQHandler+0x3d2>
 8011852:	2204      	movs	r2, #4
 8011854:	e7a7      	b.n	80117a6 <HAL_DMA_IRQHandler+0x3d2>
 8011856:	2240      	movs	r2, #64	; 0x40
 8011858:	e7a5      	b.n	80117a6 <HAL_DMA_IRQHandler+0x3d2>
 801185a:	2280      	movs	r2, #128	; 0x80
 801185c:	00d2      	lsls	r2, r2, #3
 801185e:	e7a2      	b.n	80117a6 <HAL_DMA_IRQHandler+0x3d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011860:	2304      	movs	r3, #4
 8011862:	4a60      	ldr	r2, [pc, #384]	; (80119e4 <HAL_DMA_IRQHandler+0x610>)
 8011864:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8011866:	2321      	movs	r3, #33	; 0x21
 8011868:	2211      	movs	r2, #17
 801186a:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801186c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801186e:	2b00      	cmp	r3, #0
 8011870:	d001      	beq.n	8011876 <HAL_DMA_IRQHandler+0x4a2>
        hdma->XferHalfCpltCallback(hdma);
 8011872:	0020      	movs	r0, r4
 8011874:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011876:	6821      	ldr	r1, [r4, #0]
 8011878:	4b52      	ldr	r3, [pc, #328]	; (80119c4 <HAL_DMA_IRQHandler+0x5f0>)
 801187a:	4299      	cmp	r1, r3
 801187c:	d800      	bhi.n	8011880 <HAL_DMA_IRQHandler+0x4ac>
 801187e:	e19f      	b.n	8011bc0 <HAL_DMA_IRQHandler+0x7ec>
 8011880:	4b58      	ldr	r3, [pc, #352]	; (80119e4 <HAL_DMA_IRQHandler+0x610>)
 8011882:	6818      	ldr	r0, [r3, #0]
 8011884:	4a49      	ldr	r2, [pc, #292]	; (80119ac <HAL_DMA_IRQHandler+0x5d8>)
 8011886:	4291      	cmp	r1, r2
 8011888:	d100      	bne.n	801188c <HAL_DMA_IRQHandler+0x4b8>
 801188a:	e0af      	b.n	80119ec <HAL_DMA_IRQHandler+0x618>
 801188c:	4a48      	ldr	r2, [pc, #288]	; (80119b0 <HAL_DMA_IRQHandler+0x5dc>)
 801188e:	4291      	cmp	r1, r2
 8011890:	d100      	bne.n	8011894 <HAL_DMA_IRQHandler+0x4c0>
 8011892:	e0ee      	b.n	8011a72 <HAL_DMA_IRQHandler+0x69e>
 8011894:	4a47      	ldr	r2, [pc, #284]	; (80119b4 <HAL_DMA_IRQHandler+0x5e0>)
 8011896:	4291      	cmp	r1, r2
 8011898:	d100      	bne.n	801189c <HAL_DMA_IRQHandler+0x4c8>
 801189a:	e0ec      	b.n	8011a76 <HAL_DMA_IRQHandler+0x6a2>
 801189c:	4a46      	ldr	r2, [pc, #280]	; (80119b8 <HAL_DMA_IRQHandler+0x5e4>)
 801189e:	4291      	cmp	r1, r2
 80118a0:	d100      	bne.n	80118a4 <HAL_DMA_IRQHandler+0x4d0>
 80118a2:	e0eb      	b.n	8011a7c <HAL_DMA_IRQHandler+0x6a8>
 80118a4:	4b45      	ldr	r3, [pc, #276]	; (80119bc <HAL_DMA_IRQHandler+0x5e8>)
 80118a6:	4299      	cmp	r1, r3
 80118a8:	d100      	bne.n	80118ac <HAL_DMA_IRQHandler+0x4d8>
 80118aa:	e0ea      	b.n	8011a82 <HAL_DMA_IRQHandler+0x6ae>
 80118ac:	4b44      	ldr	r3, [pc, #272]	; (80119c0 <HAL_DMA_IRQHandler+0x5ec>)
 80118ae:	4299      	cmp	r1, r3
 80118b0:	d100      	bne.n	80118b4 <HAL_DMA_IRQHandler+0x4e0>
 80118b2:	e0e9      	b.n	8011a88 <HAL_DMA_IRQHandler+0x6b4>
 80118b4:	4b43      	ldr	r3, [pc, #268]	; (80119c4 <HAL_DMA_IRQHandler+0x5f0>)
 80118b6:	4299      	cmp	r1, r3
 80118b8:	d100      	bne.n	80118bc <HAL_DMA_IRQHandler+0x4e8>
 80118ba:	e0e8      	b.n	8011a8e <HAL_DMA_IRQHandler+0x6ba>
 80118bc:	4b42      	ldr	r3, [pc, #264]	; (80119c8 <HAL_DMA_IRQHandler+0x5f4>)
 80118be:	4299      	cmp	r1, r3
 80118c0:	d100      	bne.n	80118c4 <HAL_DMA_IRQHandler+0x4f0>
 80118c2:	e0e7      	b.n	8011a94 <HAL_DMA_IRQHandler+0x6c0>
 80118c4:	4b41      	ldr	r3, [pc, #260]	; (80119cc <HAL_DMA_IRQHandler+0x5f8>)
 80118c6:	4299      	cmp	r1, r3
 80118c8:	d100      	bne.n	80118cc <HAL_DMA_IRQHandler+0x4f8>
 80118ca:	e0e5      	b.n	8011a98 <HAL_DMA_IRQHandler+0x6c4>
 80118cc:	4b40      	ldr	r3, [pc, #256]	; (80119d0 <HAL_DMA_IRQHandler+0x5fc>)
 80118ce:	4299      	cmp	r1, r3
 80118d0:	d100      	bne.n	80118d4 <HAL_DMA_IRQHandler+0x500>
 80118d2:	e0e3      	b.n	8011a9c <HAL_DMA_IRQHandler+0x6c8>
 80118d4:	4b3f      	ldr	r3, [pc, #252]	; (80119d4 <HAL_DMA_IRQHandler+0x600>)
 80118d6:	18ca      	adds	r2, r1, r3
 80118d8:	4253      	negs	r3, r2
 80118da:	415a      	adcs	r2, r3
 80118dc:	4252      	negs	r2, r2
 80118de:	4b42      	ldr	r3, [pc, #264]	; (80119e8 <HAL_DMA_IRQHandler+0x614>)
 80118e0:	4013      	ands	r3, r2
 80118e2:	2280      	movs	r2, #128	; 0x80
 80118e4:	0292      	lsls	r2, r2, #10
 80118e6:	4694      	mov	ip, r2
 80118e8:	4463      	add	r3, ip
 80118ea:	e080      	b.n	80119ee <HAL_DMA_IRQHandler+0x61a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80118ec:	2340      	movs	r3, #64	; 0x40
 80118ee:	e7b8      	b.n	8011862 <HAL_DMA_IRQHandler+0x48e>
 80118f0:	2380      	movs	r3, #128	; 0x80
 80118f2:	00db      	lsls	r3, r3, #3
 80118f4:	e7b5      	b.n	8011862 <HAL_DMA_IRQHandler+0x48e>
 80118f6:	2380      	movs	r3, #128	; 0x80
 80118f8:	01db      	lsls	r3, r3, #7
 80118fa:	e7b2      	b.n	8011862 <HAL_DMA_IRQHandler+0x48e>
 80118fc:	2380      	movs	r3, #128	; 0x80
 80118fe:	02db      	lsls	r3, r3, #11
 8011900:	e7af      	b.n	8011862 <HAL_DMA_IRQHandler+0x48e>
 8011902:	2380      	movs	r3, #128	; 0x80
 8011904:	03db      	lsls	r3, r3, #15
 8011906:	e7ac      	b.n	8011862 <HAL_DMA_IRQHandler+0x48e>
 8011908:	2380      	movs	r3, #128	; 0x80
 801190a:	04db      	lsls	r3, r3, #19
 801190c:	e7a9      	b.n	8011862 <HAL_DMA_IRQHandler+0x48e>
 801190e:	2304      	movs	r3, #4
 8011910:	e7a7      	b.n	8011862 <HAL_DMA_IRQHandler+0x48e>
 8011912:	2340      	movs	r3, #64	; 0x40
 8011914:	e7a5      	b.n	8011862 <HAL_DMA_IRQHandler+0x48e>
 8011916:	2380      	movs	r3, #128	; 0x80
 8011918:	00db      	lsls	r3, r3, #3
 801191a:	e7a2      	b.n	8011862 <HAL_DMA_IRQHandler+0x48e>
 801191c:	4a23      	ldr	r2, [pc, #140]	; (80119ac <HAL_DMA_IRQHandler+0x5d8>)
 801191e:	4293      	cmp	r3, r2
 8011920:	d027      	beq.n	8011972 <HAL_DMA_IRQHandler+0x59e>
 8011922:	4a23      	ldr	r2, [pc, #140]	; (80119b0 <HAL_DMA_IRQHandler+0x5dc>)
 8011924:	4293      	cmp	r3, r2
 8011926:	d028      	beq.n	801197a <HAL_DMA_IRQHandler+0x5a6>
 8011928:	4a22      	ldr	r2, [pc, #136]	; (80119b4 <HAL_DMA_IRQHandler+0x5e0>)
 801192a:	4293      	cmp	r3, r2
 801192c:	d027      	beq.n	801197e <HAL_DMA_IRQHandler+0x5aa>
 801192e:	4a22      	ldr	r2, [pc, #136]	; (80119b8 <HAL_DMA_IRQHandler+0x5e4>)
 8011930:	4293      	cmp	r3, r2
 8011932:	d027      	beq.n	8011984 <HAL_DMA_IRQHandler+0x5b0>
 8011934:	4a21      	ldr	r2, [pc, #132]	; (80119bc <HAL_DMA_IRQHandler+0x5e8>)
 8011936:	4293      	cmp	r3, r2
 8011938:	d027      	beq.n	801198a <HAL_DMA_IRQHandler+0x5b6>
 801193a:	4a21      	ldr	r2, [pc, #132]	; (80119c0 <HAL_DMA_IRQHandler+0x5ec>)
 801193c:	4293      	cmp	r3, r2
 801193e:	d027      	beq.n	8011990 <HAL_DMA_IRQHandler+0x5bc>
 8011940:	4a20      	ldr	r2, [pc, #128]	; (80119c4 <HAL_DMA_IRQHandler+0x5f0>)
 8011942:	4293      	cmp	r3, r2
 8011944:	d027      	beq.n	8011996 <HAL_DMA_IRQHandler+0x5c2>
 8011946:	4a20      	ldr	r2, [pc, #128]	; (80119c8 <HAL_DMA_IRQHandler+0x5f4>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d027      	beq.n	801199c <HAL_DMA_IRQHandler+0x5c8>
 801194c:	4a1f      	ldr	r2, [pc, #124]	; (80119cc <HAL_DMA_IRQHandler+0x5f8>)
 801194e:	4293      	cmp	r3, r2
 8011950:	d026      	beq.n	80119a0 <HAL_DMA_IRQHandler+0x5cc>
 8011952:	4a1f      	ldr	r2, [pc, #124]	; (80119d0 <HAL_DMA_IRQHandler+0x5fc>)
 8011954:	4293      	cmp	r3, r2
 8011956:	d025      	beq.n	80119a4 <HAL_DMA_IRQHandler+0x5d0>
 8011958:	4a1e      	ldr	r2, [pc, #120]	; (80119d4 <HAL_DMA_IRQHandler+0x600>)
 801195a:	4694      	mov	ip, r2
 801195c:	4463      	add	r3, ip
 801195e:	425a      	negs	r2, r3
 8011960:	4153      	adcs	r3, r2
 8011962:	425b      	negs	r3, r3
 8011964:	4a1e      	ldr	r2, [pc, #120]	; (80119e0 <HAL_DMA_IRQHandler+0x60c>)
 8011966:	4013      	ands	r3, r2
 8011968:	2280      	movs	r2, #128	; 0x80
 801196a:	02d2      	lsls	r2, r2, #11
 801196c:	4694      	mov	ip, r2
 801196e:	4463      	add	r3, ip
 8011970:	e000      	b.n	8011974 <HAL_DMA_IRQHandler+0x5a0>
 8011972:	2304      	movs	r3, #4
 8011974:	4a19      	ldr	r2, [pc, #100]	; (80119dc <HAL_DMA_IRQHandler+0x608>)
 8011976:	6053      	str	r3, [r2, #4]
 8011978:	e775      	b.n	8011866 <HAL_DMA_IRQHandler+0x492>
 801197a:	2340      	movs	r3, #64	; 0x40
 801197c:	e7fa      	b.n	8011974 <HAL_DMA_IRQHandler+0x5a0>
 801197e:	2380      	movs	r3, #128	; 0x80
 8011980:	00db      	lsls	r3, r3, #3
 8011982:	e7f7      	b.n	8011974 <HAL_DMA_IRQHandler+0x5a0>
 8011984:	2380      	movs	r3, #128	; 0x80
 8011986:	01db      	lsls	r3, r3, #7
 8011988:	e7f4      	b.n	8011974 <HAL_DMA_IRQHandler+0x5a0>
 801198a:	2380      	movs	r3, #128	; 0x80
 801198c:	02db      	lsls	r3, r3, #11
 801198e:	e7f1      	b.n	8011974 <HAL_DMA_IRQHandler+0x5a0>
 8011990:	2380      	movs	r3, #128	; 0x80
 8011992:	03db      	lsls	r3, r3, #15
 8011994:	e7ee      	b.n	8011974 <HAL_DMA_IRQHandler+0x5a0>
 8011996:	2380      	movs	r3, #128	; 0x80
 8011998:	04db      	lsls	r3, r3, #19
 801199a:	e7eb      	b.n	8011974 <HAL_DMA_IRQHandler+0x5a0>
 801199c:	2304      	movs	r3, #4
 801199e:	e7e9      	b.n	8011974 <HAL_DMA_IRQHandler+0x5a0>
 80119a0:	2340      	movs	r3, #64	; 0x40
 80119a2:	e7e7      	b.n	8011974 <HAL_DMA_IRQHandler+0x5a0>
 80119a4:	2380      	movs	r3, #128	; 0x80
 80119a6:	00db      	lsls	r3, r3, #3
 80119a8:	e7e4      	b.n	8011974 <HAL_DMA_IRQHandler+0x5a0>
 80119aa:	46c0      	nop			; (mov r8, r8)
 80119ac:	40020008 	.word	0x40020008
 80119b0:	4002001c 	.word	0x4002001c
 80119b4:	40020030 	.word	0x40020030
 80119b8:	40020044 	.word	0x40020044
 80119bc:	40020058 	.word	0x40020058
 80119c0:	4002006c 	.word	0x4002006c
 80119c4:	40020080 	.word	0x40020080
 80119c8:	40020408 	.word	0x40020408
 80119cc:	4002041c 	.word	0x4002041c
 80119d0:	40020430 	.word	0x40020430
 80119d4:	bffdfbbc 	.word	0xbffdfbbc
 80119d8:	fff88000 	.word	0xfff88000
 80119dc:	40020000 	.word	0x40020000
 80119e0:	fffc4000 	.word	0xfffc4000
 80119e4:	40020400 	.word	0x40020400
 80119e8:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80119ec:	2302      	movs	r3, #2
 80119ee:	4003      	ands	r3, r0
 80119f0:	1e5a      	subs	r2, r3, #1
 80119f2:	4193      	sbcs	r3, r2
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d100      	bne.n	80119fc <HAL_DMA_IRQHandler+0x628>
 80119fa:	e080      	b.n	8011afe <HAL_DMA_IRQHandler+0x72a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80119fc:	680b      	ldr	r3, [r1, #0]
 80119fe:	079b      	lsls	r3, r3, #30
 8011a00:	d57d      	bpl.n	8011afe <HAL_DMA_IRQHandler+0x72a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011a02:	680b      	ldr	r3, [r1, #0]
 8011a04:	069b      	lsls	r3, r3, #26
 8011a06:	d403      	bmi.n	8011a10 <HAL_DMA_IRQHandler+0x63c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011a08:	680b      	ldr	r3, [r1, #0]
 8011a0a:	2202      	movs	r2, #2
 8011a0c:	4393      	bics	r3, r2
 8011a0e:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011a10:	6823      	ldr	r3, [r4, #0]
 8011a12:	4a8d      	ldr	r2, [pc, #564]	; (8011c48 <HAL_DMA_IRQHandler+0x874>)
 8011a14:	4293      	cmp	r3, r2
 8011a16:	d800      	bhi.n	8011a1a <HAL_DMA_IRQHandler+0x646>
 8011a18:	e08a      	b.n	8011b30 <HAL_DMA_IRQHandler+0x75c>
 8011a1a:	4a8c      	ldr	r2, [pc, #560]	; (8011c4c <HAL_DMA_IRQHandler+0x878>)
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	d05e      	beq.n	8011ade <HAL_DMA_IRQHandler+0x70a>
 8011a20:	4a8b      	ldr	r2, [pc, #556]	; (8011c50 <HAL_DMA_IRQHandler+0x87c>)
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d100      	bne.n	8011a28 <HAL_DMA_IRQHandler+0x654>
 8011a26:	e06b      	b.n	8011b00 <HAL_DMA_IRQHandler+0x72c>
 8011a28:	4a8a      	ldr	r2, [pc, #552]	; (8011c54 <HAL_DMA_IRQHandler+0x880>)
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	d06a      	beq.n	8011b04 <HAL_DMA_IRQHandler+0x730>
 8011a2e:	4a8a      	ldr	r2, [pc, #552]	; (8011c58 <HAL_DMA_IRQHandler+0x884>)
 8011a30:	4293      	cmp	r3, r2
 8011a32:	d06a      	beq.n	8011b0a <HAL_DMA_IRQHandler+0x736>
 8011a34:	4a89      	ldr	r2, [pc, #548]	; (8011c5c <HAL_DMA_IRQHandler+0x888>)
 8011a36:	4293      	cmp	r3, r2
 8011a38:	d06a      	beq.n	8011b10 <HAL_DMA_IRQHandler+0x73c>
 8011a3a:	4a89      	ldr	r2, [pc, #548]	; (8011c60 <HAL_DMA_IRQHandler+0x88c>)
 8011a3c:	4293      	cmp	r3, r2
 8011a3e:	d06a      	beq.n	8011b16 <HAL_DMA_IRQHandler+0x742>
 8011a40:	4a81      	ldr	r2, [pc, #516]	; (8011c48 <HAL_DMA_IRQHandler+0x874>)
 8011a42:	4293      	cmp	r3, r2
 8011a44:	d06a      	beq.n	8011b1c <HAL_DMA_IRQHandler+0x748>
 8011a46:	4a87      	ldr	r2, [pc, #540]	; (8011c64 <HAL_DMA_IRQHandler+0x890>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d06a      	beq.n	8011b22 <HAL_DMA_IRQHandler+0x74e>
 8011a4c:	4a86      	ldr	r2, [pc, #536]	; (8011c68 <HAL_DMA_IRQHandler+0x894>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d069      	beq.n	8011b26 <HAL_DMA_IRQHandler+0x752>
 8011a52:	4a86      	ldr	r2, [pc, #536]	; (8011c6c <HAL_DMA_IRQHandler+0x898>)
 8011a54:	4293      	cmp	r3, r2
 8011a56:	d068      	beq.n	8011b2a <HAL_DMA_IRQHandler+0x756>
 8011a58:	4a85      	ldr	r2, [pc, #532]	; (8011c70 <HAL_DMA_IRQHandler+0x89c>)
 8011a5a:	4694      	mov	ip, r2
 8011a5c:	4463      	add	r3, ip
 8011a5e:	425a      	negs	r2, r3
 8011a60:	4153      	adcs	r3, r2
 8011a62:	425b      	negs	r3, r3
 8011a64:	4a83      	ldr	r2, [pc, #524]	; (8011c74 <HAL_DMA_IRQHandler+0x8a0>)
 8011a66:	4013      	ands	r3, r2
 8011a68:	2280      	movs	r2, #128	; 0x80
 8011a6a:	0292      	lsls	r2, r2, #10
 8011a6c:	4694      	mov	ip, r2
 8011a6e:	4463      	add	r3, ip
 8011a70:	e036      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x70c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011a72:	2320      	movs	r3, #32
 8011a74:	e7bb      	b.n	80119ee <HAL_DMA_IRQHandler+0x61a>
 8011a76:	2380      	movs	r3, #128	; 0x80
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	e7b8      	b.n	80119ee <HAL_DMA_IRQHandler+0x61a>
 8011a7c:	2380      	movs	r3, #128	; 0x80
 8011a7e:	019b      	lsls	r3, r3, #6
 8011a80:	e7b5      	b.n	80119ee <HAL_DMA_IRQHandler+0x61a>
 8011a82:	2380      	movs	r3, #128	; 0x80
 8011a84:	029b      	lsls	r3, r3, #10
 8011a86:	e7b2      	b.n	80119ee <HAL_DMA_IRQHandler+0x61a>
 8011a88:	2380      	movs	r3, #128	; 0x80
 8011a8a:	039b      	lsls	r3, r3, #14
 8011a8c:	e7af      	b.n	80119ee <HAL_DMA_IRQHandler+0x61a>
 8011a8e:	2380      	movs	r3, #128	; 0x80
 8011a90:	049b      	lsls	r3, r3, #18
 8011a92:	e7ac      	b.n	80119ee <HAL_DMA_IRQHandler+0x61a>
 8011a94:	2302      	movs	r3, #2
 8011a96:	e7aa      	b.n	80119ee <HAL_DMA_IRQHandler+0x61a>
 8011a98:	2320      	movs	r3, #32
 8011a9a:	e7a8      	b.n	80119ee <HAL_DMA_IRQHandler+0x61a>
 8011a9c:	2380      	movs	r3, #128	; 0x80
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	e7a5      	b.n	80119ee <HAL_DMA_IRQHandler+0x61a>
 8011aa2:	2302      	movs	r3, #2
 8011aa4:	4003      	ands	r3, r0
 8011aa6:	1e5a      	subs	r2, r3, #1
 8011aa8:	4193      	sbcs	r3, r2
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	e7a3      	b.n	80119f6 <HAL_DMA_IRQHandler+0x622>
 8011aae:	2320      	movs	r3, #32
 8011ab0:	e7f8      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x6d0>
 8011ab2:	2380      	movs	r3, #128	; 0x80
 8011ab4:	009b      	lsls	r3, r3, #2
 8011ab6:	e7f5      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x6d0>
 8011ab8:	2380      	movs	r3, #128	; 0x80
 8011aba:	019b      	lsls	r3, r3, #6
 8011abc:	e7f2      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x6d0>
 8011abe:	2380      	movs	r3, #128	; 0x80
 8011ac0:	029b      	lsls	r3, r3, #10
 8011ac2:	e7ef      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x6d0>
 8011ac4:	2380      	movs	r3, #128	; 0x80
 8011ac6:	039b      	lsls	r3, r3, #14
 8011ac8:	e7ec      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x6d0>
 8011aca:	2380      	movs	r3, #128	; 0x80
 8011acc:	049b      	lsls	r3, r3, #18
 8011ace:	e7e9      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x6d0>
 8011ad0:	2302      	movs	r3, #2
 8011ad2:	e7e7      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x6d0>
 8011ad4:	2320      	movs	r3, #32
 8011ad6:	e7e5      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x6d0>
 8011ad8:	2380      	movs	r3, #128	; 0x80
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	e7e2      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x6d0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011ade:	2302      	movs	r3, #2
 8011ae0:	4a65      	ldr	r2, [pc, #404]	; (8011c78 <HAL_DMA_IRQHandler+0x8a4>)
 8011ae2:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011ae4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ae6:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011ae8:	2321      	movs	r3, #33	; 0x21
 8011aea:	2201      	movs	r2, #1
 8011aec:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011aee:	3b01      	subs	r3, #1
 8011af0:	2200      	movs	r2, #0
 8011af2:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011af4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d001      	beq.n	8011afe <HAL_DMA_IRQHandler+0x72a>
        hdma->XferCpltCallback(hdma);
 8011afa:	0020      	movs	r0, r4
 8011afc:	4798      	blx	r3
}  
 8011afe:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011b00:	2320      	movs	r3, #32
 8011b02:	e7ed      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x70c>
 8011b04:	2380      	movs	r3, #128	; 0x80
 8011b06:	009b      	lsls	r3, r3, #2
 8011b08:	e7ea      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x70c>
 8011b0a:	2380      	movs	r3, #128	; 0x80
 8011b0c:	019b      	lsls	r3, r3, #6
 8011b0e:	e7e7      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x70c>
 8011b10:	2380      	movs	r3, #128	; 0x80
 8011b12:	029b      	lsls	r3, r3, #10
 8011b14:	e7e4      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x70c>
 8011b16:	2380      	movs	r3, #128	; 0x80
 8011b18:	039b      	lsls	r3, r3, #14
 8011b1a:	e7e1      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x70c>
 8011b1c:	2380      	movs	r3, #128	; 0x80
 8011b1e:	049b      	lsls	r3, r3, #18
 8011b20:	e7de      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x70c>
 8011b22:	2302      	movs	r3, #2
 8011b24:	e7dc      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x70c>
 8011b26:	2320      	movs	r3, #32
 8011b28:	e7da      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x70c>
 8011b2a:	2380      	movs	r3, #128	; 0x80
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	e7d7      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x70c>
 8011b30:	4a46      	ldr	r2, [pc, #280]	; (8011c4c <HAL_DMA_IRQHandler+0x878>)
 8011b32:	4293      	cmp	r3, r2
 8011b34:	d027      	beq.n	8011b86 <HAL_DMA_IRQHandler+0x7b2>
 8011b36:	4a46      	ldr	r2, [pc, #280]	; (8011c50 <HAL_DMA_IRQHandler+0x87c>)
 8011b38:	4293      	cmp	r3, r2
 8011b3a:	d028      	beq.n	8011b8e <HAL_DMA_IRQHandler+0x7ba>
 8011b3c:	4a45      	ldr	r2, [pc, #276]	; (8011c54 <HAL_DMA_IRQHandler+0x880>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d027      	beq.n	8011b92 <HAL_DMA_IRQHandler+0x7be>
 8011b42:	4a45      	ldr	r2, [pc, #276]	; (8011c58 <HAL_DMA_IRQHandler+0x884>)
 8011b44:	4293      	cmp	r3, r2
 8011b46:	d027      	beq.n	8011b98 <HAL_DMA_IRQHandler+0x7c4>
 8011b48:	4a44      	ldr	r2, [pc, #272]	; (8011c5c <HAL_DMA_IRQHandler+0x888>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d027      	beq.n	8011b9e <HAL_DMA_IRQHandler+0x7ca>
 8011b4e:	4a44      	ldr	r2, [pc, #272]	; (8011c60 <HAL_DMA_IRQHandler+0x88c>)
 8011b50:	4293      	cmp	r3, r2
 8011b52:	d027      	beq.n	8011ba4 <HAL_DMA_IRQHandler+0x7d0>
 8011b54:	4a3c      	ldr	r2, [pc, #240]	; (8011c48 <HAL_DMA_IRQHandler+0x874>)
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d027      	beq.n	8011baa <HAL_DMA_IRQHandler+0x7d6>
 8011b5a:	4a42      	ldr	r2, [pc, #264]	; (8011c64 <HAL_DMA_IRQHandler+0x890>)
 8011b5c:	4293      	cmp	r3, r2
 8011b5e:	d027      	beq.n	8011bb0 <HAL_DMA_IRQHandler+0x7dc>
 8011b60:	4a41      	ldr	r2, [pc, #260]	; (8011c68 <HAL_DMA_IRQHandler+0x894>)
 8011b62:	4293      	cmp	r3, r2
 8011b64:	d026      	beq.n	8011bb4 <HAL_DMA_IRQHandler+0x7e0>
 8011b66:	4a41      	ldr	r2, [pc, #260]	; (8011c6c <HAL_DMA_IRQHandler+0x898>)
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d025      	beq.n	8011bb8 <HAL_DMA_IRQHandler+0x7e4>
 8011b6c:	4a40      	ldr	r2, [pc, #256]	; (8011c70 <HAL_DMA_IRQHandler+0x89c>)
 8011b6e:	4694      	mov	ip, r2
 8011b70:	4463      	add	r3, ip
 8011b72:	425a      	negs	r2, r3
 8011b74:	4153      	adcs	r3, r2
 8011b76:	425b      	negs	r3, r3
 8011b78:	4a3e      	ldr	r2, [pc, #248]	; (8011c74 <HAL_DMA_IRQHandler+0x8a0>)
 8011b7a:	4013      	ands	r3, r2
 8011b7c:	2280      	movs	r2, #128	; 0x80
 8011b7e:	0292      	lsls	r2, r2, #10
 8011b80:	4694      	mov	ip, r2
 8011b82:	4463      	add	r3, ip
 8011b84:	e000      	b.n	8011b88 <HAL_DMA_IRQHandler+0x7b4>
 8011b86:	2302      	movs	r3, #2
 8011b88:	4a3c      	ldr	r2, [pc, #240]	; (8011c7c <HAL_DMA_IRQHandler+0x8a8>)
 8011b8a:	6053      	str	r3, [r2, #4]
 8011b8c:	e7aa      	b.n	8011ae4 <HAL_DMA_IRQHandler+0x710>
 8011b8e:	2320      	movs	r3, #32
 8011b90:	e7fa      	b.n	8011b88 <HAL_DMA_IRQHandler+0x7b4>
 8011b92:	2380      	movs	r3, #128	; 0x80
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	e7f7      	b.n	8011b88 <HAL_DMA_IRQHandler+0x7b4>
 8011b98:	2380      	movs	r3, #128	; 0x80
 8011b9a:	019b      	lsls	r3, r3, #6
 8011b9c:	e7f4      	b.n	8011b88 <HAL_DMA_IRQHandler+0x7b4>
 8011b9e:	2380      	movs	r3, #128	; 0x80
 8011ba0:	029b      	lsls	r3, r3, #10
 8011ba2:	e7f1      	b.n	8011b88 <HAL_DMA_IRQHandler+0x7b4>
 8011ba4:	2380      	movs	r3, #128	; 0x80
 8011ba6:	039b      	lsls	r3, r3, #14
 8011ba8:	e7ee      	b.n	8011b88 <HAL_DMA_IRQHandler+0x7b4>
 8011baa:	2380      	movs	r3, #128	; 0x80
 8011bac:	049b      	lsls	r3, r3, #18
 8011bae:	e7eb      	b.n	8011b88 <HAL_DMA_IRQHandler+0x7b4>
 8011bb0:	2302      	movs	r3, #2
 8011bb2:	e7e9      	b.n	8011b88 <HAL_DMA_IRQHandler+0x7b4>
 8011bb4:	2320      	movs	r3, #32
 8011bb6:	e7e7      	b.n	8011b88 <HAL_DMA_IRQHandler+0x7b4>
 8011bb8:	2380      	movs	r3, #128	; 0x80
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	e7e4      	b.n	8011b88 <HAL_DMA_IRQHandler+0x7b4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011bbe:	6821      	ldr	r1, [r4, #0]
 8011bc0:	4b2e      	ldr	r3, [pc, #184]	; (8011c7c <HAL_DMA_IRQHandler+0x8a8>)
 8011bc2:	6818      	ldr	r0, [r3, #0]
 8011bc4:	4a21      	ldr	r2, [pc, #132]	; (8011c4c <HAL_DMA_IRQHandler+0x878>)
 8011bc6:	4291      	cmp	r1, r2
 8011bc8:	d100      	bne.n	8011bcc <HAL_DMA_IRQHandler+0x7f8>
 8011bca:	e76a      	b.n	8011aa2 <HAL_DMA_IRQHandler+0x6ce>
 8011bcc:	4a20      	ldr	r2, [pc, #128]	; (8011c50 <HAL_DMA_IRQHandler+0x87c>)
 8011bce:	4291      	cmp	r1, r2
 8011bd0:	d100      	bne.n	8011bd4 <HAL_DMA_IRQHandler+0x800>
 8011bd2:	e76c      	b.n	8011aae <HAL_DMA_IRQHandler+0x6da>
 8011bd4:	4a1f      	ldr	r2, [pc, #124]	; (8011c54 <HAL_DMA_IRQHandler+0x880>)
 8011bd6:	4291      	cmp	r1, r2
 8011bd8:	d100      	bne.n	8011bdc <HAL_DMA_IRQHandler+0x808>
 8011bda:	e76a      	b.n	8011ab2 <HAL_DMA_IRQHandler+0x6de>
 8011bdc:	4a1e      	ldr	r2, [pc, #120]	; (8011c58 <HAL_DMA_IRQHandler+0x884>)
 8011bde:	4291      	cmp	r1, r2
 8011be0:	d100      	bne.n	8011be4 <HAL_DMA_IRQHandler+0x810>
 8011be2:	e769      	b.n	8011ab8 <HAL_DMA_IRQHandler+0x6e4>
 8011be4:	4b1d      	ldr	r3, [pc, #116]	; (8011c5c <HAL_DMA_IRQHandler+0x888>)
 8011be6:	4299      	cmp	r1, r3
 8011be8:	d100      	bne.n	8011bec <HAL_DMA_IRQHandler+0x818>
 8011bea:	e768      	b.n	8011abe <HAL_DMA_IRQHandler+0x6ea>
 8011bec:	4b1c      	ldr	r3, [pc, #112]	; (8011c60 <HAL_DMA_IRQHandler+0x88c>)
 8011bee:	4299      	cmp	r1, r3
 8011bf0:	d100      	bne.n	8011bf4 <HAL_DMA_IRQHandler+0x820>
 8011bf2:	e767      	b.n	8011ac4 <HAL_DMA_IRQHandler+0x6f0>
 8011bf4:	4b14      	ldr	r3, [pc, #80]	; (8011c48 <HAL_DMA_IRQHandler+0x874>)
 8011bf6:	4299      	cmp	r1, r3
 8011bf8:	d100      	bne.n	8011bfc <HAL_DMA_IRQHandler+0x828>
 8011bfa:	e766      	b.n	8011aca <HAL_DMA_IRQHandler+0x6f6>
 8011bfc:	4b19      	ldr	r3, [pc, #100]	; (8011c64 <HAL_DMA_IRQHandler+0x890>)
 8011bfe:	4299      	cmp	r1, r3
 8011c00:	d100      	bne.n	8011c04 <HAL_DMA_IRQHandler+0x830>
 8011c02:	e765      	b.n	8011ad0 <HAL_DMA_IRQHandler+0x6fc>
 8011c04:	4b18      	ldr	r3, [pc, #96]	; (8011c68 <HAL_DMA_IRQHandler+0x894>)
 8011c06:	4299      	cmp	r1, r3
 8011c08:	d100      	bne.n	8011c0c <HAL_DMA_IRQHandler+0x838>
 8011c0a:	e763      	b.n	8011ad4 <HAL_DMA_IRQHandler+0x700>
 8011c0c:	4b17      	ldr	r3, [pc, #92]	; (8011c6c <HAL_DMA_IRQHandler+0x898>)
 8011c0e:	4299      	cmp	r1, r3
 8011c10:	d100      	bne.n	8011c14 <HAL_DMA_IRQHandler+0x840>
 8011c12:	e761      	b.n	8011ad8 <HAL_DMA_IRQHandler+0x704>
 8011c14:	4b16      	ldr	r3, [pc, #88]	; (8011c70 <HAL_DMA_IRQHandler+0x89c>)
 8011c16:	18ca      	adds	r2, r1, r3
 8011c18:	4253      	negs	r3, r2
 8011c1a:	415a      	adcs	r2, r3
 8011c1c:	4252      	negs	r2, r2
 8011c1e:	4b15      	ldr	r3, [pc, #84]	; (8011c74 <HAL_DMA_IRQHandler+0x8a0>)
 8011c20:	4013      	ands	r3, r2
 8011c22:	2280      	movs	r2, #128	; 0x80
 8011c24:	0292      	lsls	r2, r2, #10
 8011c26:	4694      	mov	ip, r2
 8011c28:	4463      	add	r3, ip
 8011c2a:	e73b      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x6d0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011c2c:	681a      	ldr	r2, [r3, #0]
 8011c2e:	0712      	lsls	r2, r2, #28
 8011c30:	d500      	bpl.n	8011c34 <HAL_DMA_IRQHandler+0x860>
 8011c32:	e4d2      	b.n	80115da <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011c34:	6823      	ldr	r3, [r4, #0]
 8011c36:	e482      	b.n	801153e <HAL_DMA_IRQHandler+0x16a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	0712      	lsls	r2, r2, #28
 8011c3c:	d500      	bpl.n	8011c40 <HAL_DMA_IRQHandler+0x86c>
 8011c3e:	e4cc      	b.n	80115da <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011c40:	6823      	ldr	r3, [r4, #0]
 8011c42:	f7ff fbfe 	bl	8011442 <HAL_DMA_IRQHandler+0x6e>
 8011c46:	46c0      	nop			; (mov r8, r8)
 8011c48:	40020080 	.word	0x40020080
 8011c4c:	40020008 	.word	0x40020008
 8011c50:	4002001c 	.word	0x4002001c
 8011c54:	40020030 	.word	0x40020030
 8011c58:	40020044 	.word	0x40020044
 8011c5c:	40020058 	.word	0x40020058
 8011c60:	4002006c 	.word	0x4002006c
 8011c64:	40020408 	.word	0x40020408
 8011c68:	4002041c 	.word	0x4002041c
 8011c6c:	40020430 	.word	0x40020430
 8011c70:	bffdfbbc 	.word	0xbffdfbbc
 8011c74:	fffe2000 	.word	0xfffe2000
 8011c78:	40020400 	.word	0x40020400
 8011c7c:	40020000 	.word	0x40020000

08011c80 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011c80:	4b0a      	ldr	r3, [pc, #40]	; (8011cac <FLASH_SetErrorCode+0x2c>)
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	06db      	lsls	r3, r3, #27
 8011c86:	d504      	bpl.n	8011c92 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011c88:	4a09      	ldr	r2, [pc, #36]	; (8011cb0 <FLASH_SetErrorCode+0x30>)
 8011c8a:	69d3      	ldr	r3, [r2, #28]
 8011c8c:	2102      	movs	r1, #2
 8011c8e:	430b      	orrs	r3, r1
 8011c90:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011c92:	4b06      	ldr	r3, [pc, #24]	; (8011cac <FLASH_SetErrorCode+0x2c>)
 8011c94:	68db      	ldr	r3, [r3, #12]
 8011c96:	075b      	lsls	r3, r3, #29
 8011c98:	d504      	bpl.n	8011ca4 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011c9a:	4a05      	ldr	r2, [pc, #20]	; (8011cb0 <FLASH_SetErrorCode+0x30>)
 8011c9c:	69d3      	ldr	r3, [r2, #28]
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	430b      	orrs	r3, r1
 8011ca2:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011ca4:	4b01      	ldr	r3, [pc, #4]	; (8011cac <FLASH_SetErrorCode+0x2c>)
 8011ca6:	2214      	movs	r2, #20
 8011ca8:	60da      	str	r2, [r3, #12]
}  
 8011caa:	4770      	bx	lr
 8011cac:	40022000 	.word	0x40022000
 8011cb0:	20006f98 	.word	0x20006f98

08011cb4 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011cb4:	4b06      	ldr	r3, [pc, #24]	; (8011cd0 <HAL_FLASH_Unlock+0x1c>)
 8011cb6:	691b      	ldr	r3, [r3, #16]
 8011cb8:	061b      	lsls	r3, r3, #24
 8011cba:	d506      	bpl.n	8011cca <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011cbc:	4b04      	ldr	r3, [pc, #16]	; (8011cd0 <HAL_FLASH_Unlock+0x1c>)
 8011cbe:	4a05      	ldr	r2, [pc, #20]	; (8011cd4 <HAL_FLASH_Unlock+0x20>)
 8011cc0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011cc2:	4a05      	ldr	r2, [pc, #20]	; (8011cd8 <HAL_FLASH_Unlock+0x24>)
 8011cc4:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011cc6:	2000      	movs	r0, #0
}
 8011cc8:	4770      	bx	lr
    return HAL_ERROR;
 8011cca:	2001      	movs	r0, #1
 8011ccc:	e7fc      	b.n	8011cc8 <HAL_FLASH_Unlock+0x14>
 8011cce:	46c0      	nop			; (mov r8, r8)
 8011cd0:	40022000 	.word	0x40022000
 8011cd4:	45670123 	.word	0x45670123
 8011cd8:	cdef89ab 	.word	0xcdef89ab

08011cdc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011cdc:	4a03      	ldr	r2, [pc, #12]	; (8011cec <HAL_FLASH_Lock+0x10>)
 8011cde:	6913      	ldr	r3, [r2, #16]
 8011ce0:	2180      	movs	r1, #128	; 0x80
 8011ce2:	430b      	orrs	r3, r1
 8011ce4:	6113      	str	r3, [r2, #16]
}
 8011ce6:	2000      	movs	r0, #0
 8011ce8:	4770      	bx	lr
 8011cea:	46c0      	nop			; (mov r8, r8)
 8011cec:	40022000 	.word	0x40022000

08011cf0 <FLASH_WaitForLastOperation>:
{
 8011cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011cf4:	f7fe fe0c 	bl	8010910 <HAL_GetTick>
 8011cf8:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011cfa:	4e13      	ldr	r6, [pc, #76]	; (8011d48 <FLASH_WaitForLastOperation+0x58>)
 8011cfc:	2501      	movs	r5, #1
 8011cfe:	68f3      	ldr	r3, [r6, #12]
 8011d00:	421d      	tst	r5, r3
 8011d02:	d00a      	beq.n	8011d1a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011d04:	1c63      	adds	r3, r4, #1
 8011d06:	d0fa      	beq.n	8011cfe <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011d08:	2c00      	cmp	r4, #0
 8011d0a:	d01b      	beq.n	8011d44 <FLASH_WaitForLastOperation+0x54>
 8011d0c:	f7fe fe00 	bl	8010910 <HAL_GetTick>
 8011d10:	1bc0      	subs	r0, r0, r7
 8011d12:	42a0      	cmp	r0, r4
 8011d14:	d9f3      	bls.n	8011cfe <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8011d16:	2003      	movs	r0, #3
 8011d18:	e00f      	b.n	8011d3a <FLASH_WaitForLastOperation+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011d1a:	4b0b      	ldr	r3, [pc, #44]	; (8011d48 <FLASH_WaitForLastOperation+0x58>)
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	069b      	lsls	r3, r3, #26
 8011d20:	d502      	bpl.n	8011d28 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011d22:	4b09      	ldr	r3, [pc, #36]	; (8011d48 <FLASH_WaitForLastOperation+0x58>)
 8011d24:	2220      	movs	r2, #32
 8011d26:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011d28:	4b07      	ldr	r3, [pc, #28]	; (8011d48 <FLASH_WaitForLastOperation+0x58>)
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	06db      	lsls	r3, r3, #27
 8011d2e:	d405      	bmi.n	8011d3c <FLASH_WaitForLastOperation+0x4c>
 8011d30:	4b05      	ldr	r3, [pc, #20]	; (8011d48 <FLASH_WaitForLastOperation+0x58>)
 8011d32:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011d34:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011d36:	075b      	lsls	r3, r3, #29
 8011d38:	d400      	bmi.n	8011d3c <FLASH_WaitForLastOperation+0x4c>
}
 8011d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FLASH_SetErrorCode();
 8011d3c:	f7ff ffa0 	bl	8011c80 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011d40:	2001      	movs	r0, #1
 8011d42:	e7fa      	b.n	8011d3a <FLASH_WaitForLastOperation+0x4a>
        return HAL_TIMEOUT;
 8011d44:	2003      	movs	r0, #3
 8011d46:	e7f8      	b.n	8011d3a <FLASH_WaitForLastOperation+0x4a>
 8011d48:	40022000 	.word	0x40022000

08011d4c <HAL_FLASH_Program>:
{
 8011d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d4e:	46de      	mov	lr, fp
 8011d50:	4657      	mov	r7, sl
 8011d52:	464e      	mov	r6, r9
 8011d54:	4645      	mov	r5, r8
 8011d56:	b5e0      	push	{r5, r6, r7, lr}
 8011d58:	b083      	sub	sp, #12
 8011d5a:	0004      	movs	r4, r0
 8011d5c:	000e      	movs	r6, r1
 8011d5e:	9201      	str	r2, [sp, #4]
 8011d60:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011d62:	4b2a      	ldr	r3, [pc, #168]	; (8011e0c <HAL_FLASH_Program+0xc0>)
 8011d64:	7e1b      	ldrb	r3, [r3, #24]
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	d04e      	beq.n	8011e08 <HAL_FLASH_Program+0xbc>
 8011d6a:	4b28      	ldr	r3, [pc, #160]	; (8011e0c <HAL_FLASH_Program+0xc0>)
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011d70:	4827      	ldr	r0, [pc, #156]	; (8011e10 <HAL_FLASH_Program+0xc4>)
 8011d72:	f7ff ffbd 	bl	8011cf0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d13c      	bne.n	8011df4 <HAL_FLASH_Program+0xa8>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011d7a:	2c01      	cmp	r4, #1
 8011d7c:	d010      	beq.n	8011da0 <HAL_FLASH_Program+0x54>
      nbiterations = 4;
 8011d7e:	3c02      	subs	r4, #2
 8011d80:	4260      	negs	r0, r4
 8011d82:	4144      	adcs	r4, r0
 8011d84:	4264      	negs	r4, r4
 8011d86:	2301      	movs	r3, #1
 8011d88:	439c      	bics	r4, r3
 8011d8a:	46a0      	mov	r8, r4
 8011d8c:	3303      	adds	r3, #3
 8011d8e:	469c      	mov	ip, r3
 8011d90:	44e0      	add	r8, ip
 8011d92:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011d94:	4b1d      	ldr	r3, [pc, #116]	; (8011e0c <HAL_FLASH_Program+0xc0>)
 8011d96:	469b      	mov	fp, r3
 8011d98:	2300      	movs	r3, #0
 8011d9a:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011d9c:	4c1d      	ldr	r4, [pc, #116]	; (8011e14 <HAL_FLASH_Program+0xc8>)
 8011d9e:	e021      	b.n	8011de4 <HAL_FLASH_Program+0x98>
      nbiterations = 1;
 8011da0:	2301      	movs	r3, #1
 8011da2:	4698      	mov	r8, r3
 8011da4:	e7f5      	b.n	8011d92 <HAL_FLASH_Program+0x46>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011da6:	2220      	movs	r2, #32
 8011da8:	1ad2      	subs	r2, r2, r3
 8011daa:	4649      	mov	r1, r9
 8011dac:	4091      	lsls	r1, r2
 8011dae:	000a      	movs	r2, r1
 8011db0:	9901      	ldr	r1, [sp, #4]
 8011db2:	40d9      	lsrs	r1, r3
 8011db4:	000b      	movs	r3, r1
 8011db6:	4313      	orrs	r3, r2
 8011db8:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011dba:	465a      	mov	r2, fp
 8011dbc:	4651      	mov	r1, sl
 8011dbe:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011dc0:	6922      	ldr	r2, [r4, #16]
 8011dc2:	2701      	movs	r7, #1
 8011dc4:	433a      	orrs	r2, r7
 8011dc6:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011dc8:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011dca:	4811      	ldr	r0, [pc, #68]	; (8011e10 <HAL_FLASH_Program+0xc4>)
 8011dcc:	f7ff ff90 	bl	8011cf0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011dd0:	6923      	ldr	r3, [r4, #16]
 8011dd2:	43bb      	bics	r3, r7
 8011dd4:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d10c      	bne.n	8011df4 <HAL_FLASH_Program+0xa8>
    for (index = 0; index < nbiterations; index++)
 8011dda:	3501      	adds	r5, #1
 8011ddc:	3602      	adds	r6, #2
 8011dde:	b2eb      	uxtb	r3, r5
 8011de0:	4598      	cmp	r8, r3
 8011de2:	d907      	bls.n	8011df4 <HAL_FLASH_Program+0xa8>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011de4:	012b      	lsls	r3, r5, #4
 8011de6:	2220      	movs	r2, #32
 8011de8:	4252      	negs	r2, r2
 8011dea:	189a      	adds	r2, r3, r2
 8011dec:	d4db      	bmi.n	8011da6 <HAL_FLASH_Program+0x5a>
 8011dee:	464b      	mov	r3, r9
 8011df0:	40d3      	lsrs	r3, r2
 8011df2:	e7e1      	b.n	8011db8 <HAL_FLASH_Program+0x6c>
  __HAL_UNLOCK(&pFlash);
 8011df4:	4b05      	ldr	r3, [pc, #20]	; (8011e0c <HAL_FLASH_Program+0xc0>)
 8011df6:	2200      	movs	r2, #0
 8011df8:	761a      	strb	r2, [r3, #24]
}
 8011dfa:	b003      	add	sp, #12
 8011dfc:	bcf0      	pop	{r4, r5, r6, r7}
 8011dfe:	46bb      	mov	fp, r7
 8011e00:	46b2      	mov	sl, r6
 8011e02:	46a9      	mov	r9, r5
 8011e04:	46a0      	mov	r8, r4
 8011e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011e08:	2002      	movs	r0, #2
 8011e0a:	e7f6      	b.n	8011dfa <HAL_FLASH_Program+0xae>
 8011e0c:	20006f98 	.word	0x20006f98
 8011e10:	0000c350 	.word	0x0000c350
 8011e14:	40022000 	.word	0x40022000

08011e18 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011e18:	4b06      	ldr	r3, [pc, #24]	; (8011e34 <FLASH_MassErase+0x1c>)
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011e1e:	4b06      	ldr	r3, [pc, #24]	; (8011e38 <FLASH_MassErase+0x20>)
 8011e20:	691a      	ldr	r2, [r3, #16]
 8011e22:	2104      	movs	r1, #4
 8011e24:	430a      	orrs	r2, r1
 8011e26:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011e28:	691a      	ldr	r2, [r3, #16]
 8011e2a:	313c      	adds	r1, #60	; 0x3c
 8011e2c:	430a      	orrs	r2, r1
 8011e2e:	611a      	str	r2, [r3, #16]
}
 8011e30:	4770      	bx	lr
 8011e32:	46c0      	nop			; (mov r8, r8)
 8011e34:	20006f98 	.word	0x20006f98
 8011e38:	40022000 	.word	0x40022000

08011e3c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011e3c:	4b06      	ldr	r3, [pc, #24]	; (8011e58 <FLASH_PageErase+0x1c>)
 8011e3e:	2200      	movs	r2, #0
 8011e40:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011e42:	4b06      	ldr	r3, [pc, #24]	; (8011e5c <FLASH_PageErase+0x20>)
 8011e44:	691a      	ldr	r2, [r3, #16]
 8011e46:	2102      	movs	r1, #2
 8011e48:	430a      	orrs	r2, r1
 8011e4a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011e4c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011e4e:	691a      	ldr	r2, [r3, #16]
 8011e50:	313e      	adds	r1, #62	; 0x3e
 8011e52:	430a      	orrs	r2, r1
 8011e54:	611a      	str	r2, [r3, #16]
}
 8011e56:	4770      	bx	lr
 8011e58:	20006f98 	.word	0x20006f98
 8011e5c:	40022000 	.word	0x40022000

08011e60 <HAL_FLASHEx_Erase>:
{
 8011e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e62:	46ce      	mov	lr, r9
 8011e64:	4647      	mov	r7, r8
 8011e66:	b580      	push	{r7, lr}
 8011e68:	0005      	movs	r5, r0
 8011e6a:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8011e6c:	4b2a      	ldr	r3, [pc, #168]	; (8011f18 <HAL_FLASHEx_Erase+0xb8>)
 8011e6e:	7e1b      	ldrb	r3, [r3, #24]
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d04e      	beq.n	8011f12 <HAL_FLASHEx_Erase+0xb2>
 8011e74:	4b28      	ldr	r3, [pc, #160]	; (8011f18 <HAL_FLASHEx_Erase+0xb8>)
 8011e76:	2201      	movs	r2, #1
 8011e78:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011e7a:	6803      	ldr	r3, [r0, #0]
 8011e7c:	2b01      	cmp	r3, #1
 8011e7e:	d02a      	beq.n	8011ed6 <HAL_FLASHEx_Erase+0x76>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011e80:	4826      	ldr	r0, [pc, #152]	; (8011f1c <HAL_FLASHEx_Erase+0xbc>)
 8011e82:	f7ff ff35 	bl	8011cf0 <FLASH_WaitForLastOperation>
 8011e86:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8011e88:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d12a      	bne.n	8011ee4 <HAL_FLASHEx_Erase+0x84>
        *PageError = 0xFFFFFFFF;
 8011e8e:	3b01      	subs	r3, #1
 8011e90:	4642      	mov	r2, r8
 8011e92:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8011e94:	686c      	ldr	r4, [r5, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011e96:	68ab      	ldr	r3, [r5, #8]
 8011e98:	02db      	lsls	r3, r3, #11
 8011e9a:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8011e9c:	429c      	cmp	r4, r3
 8011e9e:	d236      	bcs.n	8011f0e <HAL_FLASHEx_Erase+0xae>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011ea0:	4b1e      	ldr	r3, [pc, #120]	; (8011f1c <HAL_FLASHEx_Erase+0xbc>)
 8011ea2:	4699      	mov	r9, r3
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011ea4:	4e1e      	ldr	r6, [pc, #120]	; (8011f20 <HAL_FLASHEx_Erase+0xc0>)
 8011ea6:	2702      	movs	r7, #2
          FLASH_PageErase(address);
 8011ea8:	0020      	movs	r0, r4
 8011eaa:	f7ff ffc7 	bl	8011e3c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011eae:	4648      	mov	r0, r9
 8011eb0:	f7ff ff1e 	bl	8011cf0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011eb4:	6933      	ldr	r3, [r6, #16]
 8011eb6:	43bb      	bics	r3, r7
 8011eb8:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 8011eba:	2800      	cmp	r0, #0
 8011ebc:	d124      	bne.n	8011f08 <HAL_FLASHEx_Erase+0xa8>
            address += FLASH_PAGE_SIZE)
 8011ebe:	2380      	movs	r3, #128	; 0x80
 8011ec0:	011b      	lsls	r3, r3, #4
 8011ec2:	469c      	mov	ip, r3
 8011ec4:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011ec6:	68ab      	ldr	r3, [r5, #8]
 8011ec8:	02db      	lsls	r3, r3, #11
 8011eca:	686a      	ldr	r2, [r5, #4]
 8011ecc:	4694      	mov	ip, r2
 8011ece:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011ed0:	42a3      	cmp	r3, r4
 8011ed2:	d8e9      	bhi.n	8011ea8 <HAL_FLASHEx_Erase+0x48>
 8011ed4:	e006      	b.n	8011ee4 <HAL_FLASHEx_Erase+0x84>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011ed6:	4811      	ldr	r0, [pc, #68]	; (8011f1c <HAL_FLASHEx_Erase+0xbc>)
 8011ed8:	f7ff ff0a 	bl	8011cf0 <FLASH_WaitForLastOperation>
 8011edc:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8011ede:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d006      	beq.n	8011ef2 <HAL_FLASHEx_Erase+0x92>
  __HAL_UNLOCK(&pFlash);
 8011ee4:	4b0c      	ldr	r3, [pc, #48]	; (8011f18 <HAL_FLASHEx_Erase+0xb8>)
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	761a      	strb	r2, [r3, #24]
}
 8011eea:	bcc0      	pop	{r6, r7}
 8011eec:	46b9      	mov	r9, r7
 8011eee:	46b0      	mov	r8, r6
 8011ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8011ef2:	f7ff ff91 	bl	8011e18 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011ef6:	4809      	ldr	r0, [pc, #36]	; (8011f1c <HAL_FLASHEx_Erase+0xbc>)
 8011ef8:	f7ff fefa 	bl	8011cf0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011efc:	4a08      	ldr	r2, [pc, #32]	; (8011f20 <HAL_FLASHEx_Erase+0xc0>)
 8011efe:	6913      	ldr	r3, [r2, #16]
 8011f00:	2104      	movs	r1, #4
 8011f02:	438b      	bics	r3, r1
 8011f04:	6113      	str	r3, [r2, #16]
 8011f06:	e7ed      	b.n	8011ee4 <HAL_FLASHEx_Erase+0x84>
            *PageError = address;
 8011f08:	4643      	mov	r3, r8
 8011f0a:	601c      	str	r4, [r3, #0]
            break;
 8011f0c:	e7ea      	b.n	8011ee4 <HAL_FLASHEx_Erase+0x84>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011f0e:	2001      	movs	r0, #1
 8011f10:	e7e8      	b.n	8011ee4 <HAL_FLASHEx_Erase+0x84>
  __HAL_LOCK(&pFlash);
 8011f12:	2002      	movs	r0, #2
 8011f14:	e7e9      	b.n	8011eea <HAL_FLASHEx_Erase+0x8a>
 8011f16:	46c0      	nop			; (mov r8, r8)
 8011f18:	20006f98 	.word	0x20006f98
 8011f1c:	0000c350 	.word	0x0000c350
 8011f20:	40022000 	.word	0x40022000

08011f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f26:	46de      	mov	lr, fp
 8011f28:	4657      	mov	r7, sl
 8011f2a:	464e      	mov	r6, r9
 8011f2c:	4645      	mov	r5, r8
 8011f2e:	b5e0      	push	{r5, r6, r7, lr}
 8011f30:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011f32:	680a      	ldr	r2, [r1, #0]
 8011f34:	2a00      	cmp	r2, #0
 8011f36:	d100      	bne.n	8011f3a <HAL_GPIO_Init+0x16>
 8011f38:	e0c9      	b.n	80120ce <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00;
 8011f3a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011f3c:	2401      	movs	r4, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011f3e:	2510      	movs	r5, #16
 8011f40:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011f42:	2580      	movs	r5, #128	; 0x80
 8011f44:	056d      	lsls	r5, r5, #21
 8011f46:	46a8      	mov	r8, r5
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011f48:	4d64      	ldr	r5, [pc, #400]	; (80120dc <HAL_GPIO_Init+0x1b8>)
 8011f4a:	1945      	adds	r5, r0, r5
 8011f4c:	1e6e      	subs	r6, r5, #1
 8011f4e:	41b5      	sbcs	r5, r6
 8011f50:	3504      	adds	r5, #4
 8011f52:	46a9      	mov	r9, r5
 8011f54:	e044      	b.n	8011fe0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8011f56:	08da      	lsrs	r2, r3, #3
 8011f58:	0092      	lsls	r2, r2, #2
 8011f5a:	1882      	adds	r2, r0, r2
 8011f5c:	9201      	str	r2, [sp, #4]
 8011f5e:	6a15      	ldr	r5, [r2, #32]
 8011f60:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011f62:	2507      	movs	r5, #7
 8011f64:	401d      	ands	r5, r3
 8011f66:	00ad      	lsls	r5, r5, #2
 8011f68:	270f      	movs	r7, #15
 8011f6a:	40af      	lsls	r7, r5
 8011f6c:	46bb      	mov	fp, r7
 8011f6e:	4657      	mov	r7, sl
 8011f70:	465a      	mov	r2, fp
 8011f72:	4397      	bics	r7, r2
 8011f74:	46ba      	mov	sl, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011f76:	690f      	ldr	r7, [r1, #16]
 8011f78:	40af      	lsls	r7, r5
 8011f7a:	003d      	movs	r5, r7
 8011f7c:	4652      	mov	r2, sl
 8011f7e:	4315      	orrs	r5, r2
        GPIOx->AFR[position >> 3] = temp;
 8011f80:	9a01      	ldr	r2, [sp, #4]
 8011f82:	6215      	str	r5, [r2, #32]
 8011f84:	e037      	b.n	8011ff6 <HAL_GPIO_Init+0xd2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011f86:	2500      	movs	r5, #0
 8011f88:	465f      	mov	r7, fp
 8011f8a:	40bd      	lsls	r5, r7
 8011f8c:	4657      	mov	r7, sl
 8011f8e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011f90:	6095      	str	r5, [r2, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011f92:	4a53      	ldr	r2, [pc, #332]	; (80120e0 <HAL_GPIO_Init+0x1bc>)
 8011f94:	6812      	ldr	r2, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011f96:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011f98:	684f      	ldr	r7, [r1, #4]
 8011f9a:	03ff      	lsls	r7, r7, #15
 8011f9c:	d500      	bpl.n	8011fa0 <HAL_GPIO_Init+0x7c>
 8011f9e:	e08e      	b.n	80120be <HAL_GPIO_Init+0x19a>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011fa0:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011fa2:	4f4f      	ldr	r7, [pc, #316]	; (80120e0 <HAL_GPIO_Init+0x1bc>)
 8011fa4:	603a      	str	r2, [r7, #0]

        temp = EXTI->EMR;
 8011fa6:	687a      	ldr	r2, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011fa8:	684f      	ldr	r7, [r1, #4]
 8011faa:	03bf      	lsls	r7, r7, #14
 8011fac:	d500      	bpl.n	8011fb0 <HAL_GPIO_Init+0x8c>
 8011fae:	e088      	b.n	80120c2 <HAL_GPIO_Init+0x19e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011fb0:	402a      	ands	r2, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011fb2:	4f4b      	ldr	r7, [pc, #300]	; (80120e0 <HAL_GPIO_Init+0x1bc>)
 8011fb4:	607a      	str	r2, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011fb6:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011fb8:	684f      	ldr	r7, [r1, #4]
 8011fba:	02ff      	lsls	r7, r7, #11
 8011fbc:	d500      	bpl.n	8011fc0 <HAL_GPIO_Init+0x9c>
 8011fbe:	e082      	b.n	80120c6 <HAL_GPIO_Init+0x1a2>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011fc0:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011fc2:	4f47      	ldr	r7, [pc, #284]	; (80120e0 <HAL_GPIO_Init+0x1bc>)
 8011fc4:	60ba      	str	r2, [r7, #8]

        temp = EXTI->FTSR;
 8011fc6:	68fa      	ldr	r2, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011fc8:	684f      	ldr	r7, [r1, #4]
 8011fca:	02bf      	lsls	r7, r7, #10
 8011fcc:	d47d      	bmi.n	80120ca <HAL_GPIO_Init+0x1a6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011fce:	402a      	ands	r2, r5
 8011fd0:	0016      	movs	r6, r2
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011fd2:	4a43      	ldr	r2, [pc, #268]	; (80120e0 <HAL_GPIO_Init+0x1bc>)
 8011fd4:	60d6      	str	r6, [r2, #12]
      }
    }
    
    position++;
 8011fd6:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011fd8:	680a      	ldr	r2, [r1, #0]
 8011fda:	0015      	movs	r5, r2
 8011fdc:	40dd      	lsrs	r5, r3
 8011fde:	d076      	beq.n	80120ce <HAL_GPIO_Init+0x1aa>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011fe0:	0025      	movs	r5, r4
 8011fe2:	409d      	lsls	r5, r3
 8011fe4:	0016      	movs	r6, r2
 8011fe6:	402e      	ands	r6, r5
    if(iocurrent)
 8011fe8:	422a      	tst	r2, r5
 8011fea:	d0f4      	beq.n	8011fd6 <HAL_GPIO_Init+0xb2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011fec:	684a      	ldr	r2, [r1, #4]
 8011fee:	4665      	mov	r5, ip
 8011ff0:	43aa      	bics	r2, r5
 8011ff2:	2a02      	cmp	r2, #2
 8011ff4:	d0af      	beq.n	8011f56 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8011ff6:	6802      	ldr	r2, [r0, #0]
 8011ff8:	4693      	mov	fp, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011ffa:	005d      	lsls	r5, r3, #1
 8011ffc:	2203      	movs	r2, #3
 8011ffe:	40aa      	lsls	r2, r5
 8012000:	43d7      	mvns	r7, r2
 8012002:	46ba      	mov	sl, r7
 8012004:	465f      	mov	r7, fp
 8012006:	4397      	bics	r7, r2
 8012008:	46bb      	mov	fp, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801200a:	684a      	ldr	r2, [r1, #4]
 801200c:	2703      	movs	r7, #3
 801200e:	403a      	ands	r2, r7
 8012010:	40aa      	lsls	r2, r5
 8012012:	465f      	mov	r7, fp
 8012014:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8012016:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012018:	684a      	ldr	r2, [r1, #4]
 801201a:	4667      	mov	r7, ip
 801201c:	43ba      	bics	r2, r7
 801201e:	3a01      	subs	r2, #1
 8012020:	2a01      	cmp	r2, #1
 8012022:	d812      	bhi.n	801204a <HAL_GPIO_Init+0x126>
        temp = GPIOx->OSPEEDR; 
 8012024:	6882      	ldr	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8012026:	4657      	mov	r7, sl
 8012028:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 801202a:	68ca      	ldr	r2, [r1, #12]
 801202c:	40aa      	lsls	r2, r5
 801202e:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 8012030:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8012032:	6842      	ldr	r2, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8012034:	0027      	movs	r7, r4
 8012036:	409f      	lsls	r7, r3
 8012038:	43ba      	bics	r2, r7
 801203a:	4693      	mov	fp, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801203c:	684a      	ldr	r2, [r1, #4]
 801203e:	0912      	lsrs	r2, r2, #4
 8012040:	4022      	ands	r2, r4
 8012042:	409a      	lsls	r2, r3
 8012044:	465f      	mov	r7, fp
 8012046:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 8012048:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 801204a:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 801204c:	4657      	mov	r7, sl
 801204e:	4017      	ands	r7, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8012050:	688a      	ldr	r2, [r1, #8]
 8012052:	40aa      	lsls	r2, r5
 8012054:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8012056:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8012058:	684a      	ldr	r2, [r1, #4]
 801205a:	4645      	mov	r5, r8
 801205c:	422a      	tst	r2, r5
 801205e:	d0ba      	beq.n	8011fd6 <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012060:	4a20      	ldr	r2, [pc, #128]	; (80120e4 <HAL_GPIO_Init+0x1c0>)
 8012062:	6995      	ldr	r5, [r2, #24]
 8012064:	4325      	orrs	r5, r4
 8012066:	6195      	str	r5, [r2, #24]
 8012068:	6992      	ldr	r2, [r2, #24]
 801206a:	4022      	ands	r2, r4
 801206c:	9203      	str	r2, [sp, #12]
 801206e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8012070:	089a      	lsrs	r2, r3, #2
 8012072:	0092      	lsls	r2, r2, #2
 8012074:	4d1c      	ldr	r5, [pc, #112]	; (80120e8 <HAL_GPIO_Init+0x1c4>)
 8012076:	46aa      	mov	sl, r5
 8012078:	4452      	add	r2, sl
 801207a:	6895      	ldr	r5, [r2, #8]
 801207c:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801207e:	2503      	movs	r5, #3
 8012080:	401d      	ands	r5, r3
 8012082:	00ad      	lsls	r5, r5, #2
 8012084:	46ab      	mov	fp, r5
 8012086:	250f      	movs	r5, #15
 8012088:	465f      	mov	r7, fp
 801208a:	40bd      	lsls	r5, r7
 801208c:	4657      	mov	r7, sl
 801208e:	43af      	bics	r7, r5
 8012090:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8012092:	2590      	movs	r5, #144	; 0x90
 8012094:	05ed      	lsls	r5, r5, #23
 8012096:	42a8      	cmp	r0, r5
 8012098:	d100      	bne.n	801209c <HAL_GPIO_Init+0x178>
 801209a:	e774      	b.n	8011f86 <HAL_GPIO_Init+0x62>
 801209c:	4d13      	ldr	r5, [pc, #76]	; (80120ec <HAL_GPIO_Init+0x1c8>)
 801209e:	42a8      	cmp	r0, r5
 80120a0:	d007      	beq.n	80120b2 <HAL_GPIO_Init+0x18e>
 80120a2:	4d13      	ldr	r5, [pc, #76]	; (80120f0 <HAL_GPIO_Init+0x1cc>)
 80120a4:	42a8      	cmp	r0, r5
 80120a6:	d006      	beq.n	80120b6 <HAL_GPIO_Init+0x192>
 80120a8:	4d12      	ldr	r5, [pc, #72]	; (80120f4 <HAL_GPIO_Init+0x1d0>)
 80120aa:	42a8      	cmp	r0, r5
 80120ac:	d005      	beq.n	80120ba <HAL_GPIO_Init+0x196>
 80120ae:	464d      	mov	r5, r9
 80120b0:	e76a      	b.n	8011f88 <HAL_GPIO_Init+0x64>
 80120b2:	0025      	movs	r5, r4
 80120b4:	e768      	b.n	8011f88 <HAL_GPIO_Init+0x64>
 80120b6:	2502      	movs	r5, #2
 80120b8:	e766      	b.n	8011f88 <HAL_GPIO_Init+0x64>
 80120ba:	2503      	movs	r5, #3
 80120bc:	e764      	b.n	8011f88 <HAL_GPIO_Init+0x64>
          SET_BIT(temp, iocurrent); 
 80120be:	4332      	orrs	r2, r6
 80120c0:	e76f      	b.n	8011fa2 <HAL_GPIO_Init+0x7e>
          SET_BIT(temp, iocurrent); 
 80120c2:	4332      	orrs	r2, r6
 80120c4:	e775      	b.n	8011fb2 <HAL_GPIO_Init+0x8e>
          SET_BIT(temp, iocurrent); 
 80120c6:	4332      	orrs	r2, r6
 80120c8:	e77b      	b.n	8011fc2 <HAL_GPIO_Init+0x9e>
          SET_BIT(temp, iocurrent); 
 80120ca:	4316      	orrs	r6, r2
 80120cc:	e781      	b.n	8011fd2 <HAL_GPIO_Init+0xae>
  } 
}
 80120ce:	b005      	add	sp, #20
 80120d0:	bcf0      	pop	{r4, r5, r6, r7}
 80120d2:	46bb      	mov	fp, r7
 80120d4:	46b2      	mov	sl, r6
 80120d6:	46a9      	mov	r9, r5
 80120d8:	46a0      	mov	r8, r4
 80120da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120dc:	b7fff000 	.word	0xb7fff000
 80120e0:	40010400 	.word	0x40010400
 80120e4:	40021000 	.word	0x40021000
 80120e8:	40010000 	.word	0x40010000
 80120ec:	48000400 	.word	0x48000400
 80120f0:	48000800 	.word	0x48000800
 80120f4:	48000c00 	.word	0x48000c00

080120f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80120f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120fa:	46de      	mov	lr, fp
 80120fc:	4657      	mov	r7, sl
 80120fe:	464e      	mov	r6, r9
 8012100:	4645      	mov	r5, r8
 8012102:	b5e0      	push	{r5, r6, r7, lr}
 8012104:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8012106:	2900      	cmp	r1, #0
 8012108:	d076      	beq.n	80121f8 <HAL_GPIO_DeInit+0x100>
  uint32_t position = 0x00;
 801210a:	2300      	movs	r3, #0

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 801210c:	2203      	movs	r2, #3
 801210e:	4691      	mov	r9, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8012110:	3204      	adds	r2, #4
 8012112:	4693      	mov	fp, r2
 8012114:	3208      	adds	r2, #8
 8012116:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8012118:	4a3b      	ldr	r2, [pc, #236]	; (8012208 <HAL_GPIO_DeInit+0x110>)
 801211a:	1882      	adds	r2, r0, r2
 801211c:	1e54      	subs	r4, r2, #1
 801211e:	41a2      	sbcs	r2, r4
 8012120:	3204      	adds	r2, #4
 8012122:	9201      	str	r2, [sp, #4]
 8012124:	e009      	b.n	801213a <HAL_GPIO_DeInit+0x42>
 8012126:	2700      	movs	r7, #0
 8012128:	46b8      	mov	r8, r7
 801212a:	4647      	mov	r7, r8
 801212c:	40a7      	lsls	r7, r4
 801212e:	42b7      	cmp	r7, r6
 8012130:	d050      	beq.n	80121d4 <HAL_GPIO_DeInit+0xdc>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8012132:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8012134:	000a      	movs	r2, r1
 8012136:	40da      	lsrs	r2, r3
 8012138:	d05e      	beq.n	80121f8 <HAL_GPIO_DeInit+0x100>
    iocurrent = (GPIO_Pin) & (1 << position);
 801213a:	2201      	movs	r2, #1
 801213c:	409a      	lsls	r2, r3
 801213e:	000d      	movs	r5, r1
 8012140:	4015      	ands	r5, r2
    if (iocurrent)
 8012142:	4211      	tst	r1, r2
 8012144:	d0f5      	beq.n	8012132 <HAL_GPIO_DeInit+0x3a>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8012146:	6802      	ldr	r2, [r0, #0]
 8012148:	005c      	lsls	r4, r3, #1
 801214a:	464e      	mov	r6, r9
 801214c:	40a6      	lsls	r6, r4
 801214e:	0034      	movs	r4, r6
 8012150:	43b2      	bics	r2, r6
 8012152:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8012154:	08da      	lsrs	r2, r3, #3
 8012156:	0092      	lsls	r2, r2, #2
 8012158:	1882      	adds	r2, r0, r2
 801215a:	6a16      	ldr	r6, [r2, #32]
 801215c:	46b0      	mov	r8, r6
 801215e:	465f      	mov	r7, fp
 8012160:	401f      	ands	r7, r3
 8012162:	00bf      	lsls	r7, r7, #2
 8012164:	46bc      	mov	ip, r7
 8012166:	4657      	mov	r7, sl
 8012168:	4666      	mov	r6, ip
 801216a:	40b7      	lsls	r7, r6
 801216c:	003e      	movs	r6, r7
 801216e:	4647      	mov	r7, r8
 8012170:	43b7      	bics	r7, r6
 8012172:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8012174:	6882      	ldr	r2, [r0, #8]
 8012176:	43a2      	bics	r2, r4
 8012178:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 801217a:	6842      	ldr	r2, [r0, #4]
 801217c:	2601      	movs	r6, #1
 801217e:	409e      	lsls	r6, r3
 8012180:	43b2      	bics	r2, r6
 8012182:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8012184:	68c2      	ldr	r2, [r0, #12]
 8012186:	43a2      	bics	r2, r4
 8012188:	60c2      	str	r2, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 801218a:	089a      	lsrs	r2, r3, #2
 801218c:	0092      	lsls	r2, r2, #2
 801218e:	4c1f      	ldr	r4, [pc, #124]	; (801220c <HAL_GPIO_DeInit+0x114>)
 8012190:	46a4      	mov	ip, r4
 8012192:	4462      	add	r2, ip
 8012194:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012196:	464c      	mov	r4, r9
 8012198:	401c      	ands	r4, r3
 801219a:	00a4      	lsls	r4, r4, #2
 801219c:	4657      	mov	r7, sl
 801219e:	40a7      	lsls	r7, r4
 80121a0:	46bc      	mov	ip, r7
 80121a2:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80121a4:	2790      	movs	r7, #144	; 0x90
 80121a6:	05ff      	lsls	r7, r7, #23
 80121a8:	42b8      	cmp	r0, r7
 80121aa:	d0bc      	beq.n	8012126 <HAL_GPIO_DeInit+0x2e>
 80121ac:	4f18      	ldr	r7, [pc, #96]	; (8012210 <HAL_GPIO_DeInit+0x118>)
 80121ae:	42b8      	cmp	r0, r7
 80121b0:	d008      	beq.n	80121c4 <HAL_GPIO_DeInit+0xcc>
 80121b2:	4f18      	ldr	r7, [pc, #96]	; (8012214 <HAL_GPIO_DeInit+0x11c>)
 80121b4:	42b8      	cmp	r0, r7
 80121b6:	d008      	beq.n	80121ca <HAL_GPIO_DeInit+0xd2>
 80121b8:	4f17      	ldr	r7, [pc, #92]	; (8012218 <HAL_GPIO_DeInit+0x120>)
 80121ba:	42b8      	cmp	r0, r7
 80121bc:	d008      	beq.n	80121d0 <HAL_GPIO_DeInit+0xd8>
 80121be:	9f01      	ldr	r7, [sp, #4]
 80121c0:	46b8      	mov	r8, r7
 80121c2:	e7b2      	b.n	801212a <HAL_GPIO_DeInit+0x32>
 80121c4:	2701      	movs	r7, #1
 80121c6:	46b8      	mov	r8, r7
 80121c8:	e7af      	b.n	801212a <HAL_GPIO_DeInit+0x32>
 80121ca:	2702      	movs	r7, #2
 80121cc:	46b8      	mov	r8, r7
 80121ce:	e7ac      	b.n	801212a <HAL_GPIO_DeInit+0x32>
 80121d0:	46c8      	mov	r8, r9
 80121d2:	e7aa      	b.n	801212a <HAL_GPIO_DeInit+0x32>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80121d4:	6894      	ldr	r4, [r2, #8]
 80121d6:	4666      	mov	r6, ip
 80121d8:	43b4      	bics	r4, r6
 80121da:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80121dc:	4a0f      	ldr	r2, [pc, #60]	; (801221c <HAL_GPIO_DeInit+0x124>)
 80121de:	6814      	ldr	r4, [r2, #0]
 80121e0:	43ac      	bics	r4, r5
 80121e2:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80121e4:	6854      	ldr	r4, [r2, #4]
 80121e6:	43ac      	bics	r4, r5
 80121e8:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80121ea:	6894      	ldr	r4, [r2, #8]
 80121ec:	43ac      	bics	r4, r5
 80121ee:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80121f0:	68d4      	ldr	r4, [r2, #12]
 80121f2:	43ac      	bics	r4, r5
 80121f4:	60d4      	str	r4, [r2, #12]
 80121f6:	e79c      	b.n	8012132 <HAL_GPIO_DeInit+0x3a>
  }
}
 80121f8:	b003      	add	sp, #12
 80121fa:	bcf0      	pop	{r4, r5, r6, r7}
 80121fc:	46bb      	mov	fp, r7
 80121fe:	46b2      	mov	sl, r6
 8012200:	46a9      	mov	r9, r5
 8012202:	46a0      	mov	r8, r4
 8012204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012206:	46c0      	nop			; (mov r8, r8)
 8012208:	b7fff000 	.word	0xb7fff000
 801220c:	40010000 	.word	0x40010000
 8012210:	48000400 	.word	0x48000400
 8012214:	48000800 	.word	0x48000800
 8012218:	48000c00 	.word	0x48000c00
 801221c:	40010400 	.word	0x40010400

08012220 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012220:	6900      	ldr	r0, [r0, #16]
 8012222:	4008      	ands	r0, r1
 8012224:	1e41      	subs	r1, r0, #1
 8012226:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8012228:	b2c0      	uxtb	r0, r0
  }
 801222a:	4770      	bx	lr

0801222c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801222c:	2a00      	cmp	r2, #0
 801222e:	d001      	beq.n	8012234 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012230:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8012232:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8012234:	6281      	str	r1, [r0, #40]	; 0x28
}
 8012236:	e7fc      	b.n	8012232 <HAL_GPIO_WritePin+0x6>

08012238 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8012238:	6943      	ldr	r3, [r0, #20]
 801223a:	4059      	eors	r1, r3
 801223c:	6141      	str	r1, [r0, #20]
}
 801223e:	4770      	bx	lr

08012240 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8012240:	4770      	bx	lr
	...

08012244 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8012244:	4a03      	ldr	r2, [pc, #12]	; (8012254 <HAL_PWR_EnableBkUpAccess+0x10>)
 8012246:	6811      	ldr	r1, [r2, #0]
 8012248:	2380      	movs	r3, #128	; 0x80
 801224a:	005b      	lsls	r3, r3, #1
 801224c:	430b      	orrs	r3, r1
 801224e:	6013      	str	r3, [r2, #0]
}
 8012250:	4770      	bx	lr
 8012252:	46c0      	nop			; (mov r8, r8)
 8012254:	40007000 	.word	0x40007000

08012258 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801225a:	46c6      	mov	lr, r8
 801225c:	b500      	push	{lr}
 801225e:	b082      	sub	sp, #8
 8012260:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012262:	6803      	ldr	r3, [r0, #0]
 8012264:	07db      	lsls	r3, r3, #31
 8012266:	d538      	bpl.n	80122da <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8012268:	4bbd      	ldr	r3, [pc, #756]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 801226a:	685a      	ldr	r2, [r3, #4]
 801226c:	230c      	movs	r3, #12
 801226e:	4013      	ands	r3, r2
 8012270:	2b04      	cmp	r3, #4
 8012272:	d02a      	beq.n	80122ca <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8012274:	4bba      	ldr	r3, [pc, #744]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012276:	685a      	ldr	r2, [r3, #4]
 8012278:	230c      	movs	r3, #12
 801227a:	4013      	ands	r3, r2
 801227c:	2b08      	cmp	r3, #8
 801227e:	d108      	bne.n	8012292 <HAL_RCC_OscConfig+0x3a>
 8012280:	4bb7      	ldr	r3, [pc, #732]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	22c0      	movs	r2, #192	; 0xc0
 8012286:	0252      	lsls	r2, r2, #9
 8012288:	4013      	ands	r3, r2
 801228a:	2280      	movs	r2, #128	; 0x80
 801228c:	0252      	lsls	r2, r2, #9
 801228e:	4293      	cmp	r3, r2
 8012290:	d01b      	beq.n	80122ca <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8012292:	4bb3      	ldr	r3, [pc, #716]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012294:	681a      	ldr	r2, [r3, #0]
 8012296:	49b3      	ldr	r1, [pc, #716]	; (8012564 <HAL_RCC_OscConfig+0x30c>)
 8012298:	400a      	ands	r2, r1
 801229a:	601a      	str	r2, [r3, #0]
 801229c:	681a      	ldr	r2, [r3, #0]
 801229e:	49b2      	ldr	r1, [pc, #712]	; (8012568 <HAL_RCC_OscConfig+0x310>)
 80122a0:	400a      	ands	r2, r1
 80122a2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80122a4:	f7fe fb34 	bl	8010910 <HAL_GetTick>
 80122a8:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80122aa:	4fad      	ldr	r7, [pc, #692]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80122ac:	2680      	movs	r6, #128	; 0x80
 80122ae:	02b6      	lsls	r6, r6, #10
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	4233      	tst	r3, r6
 80122b4:	d039      	beq.n	801232a <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80122b6:	f7fe fb2b 	bl	8010910 <HAL_GetTick>
 80122ba:	1b40      	subs	r0, r0, r5
 80122bc:	2864      	cmp	r0, #100	; 0x64
 80122be:	d9f7      	bls.n	80122b0 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 80122c0:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80122c2:	b002      	add	sp, #8
 80122c4:	bc80      	pop	{r7}
 80122c6:	46b8      	mov	r8, r7
 80122c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80122ca:	4ba5      	ldr	r3, [pc, #660]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	039b      	lsls	r3, r3, #14
 80122d0:	d503      	bpl.n	80122da <HAL_RCC_OscConfig+0x82>
 80122d2:	6863      	ldr	r3, [r4, #4]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d100      	bne.n	80122da <HAL_RCC_OscConfig+0x82>
 80122d8:	e274      	b.n	80127c4 <HAL_RCC_OscConfig+0x56c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80122da:	6823      	ldr	r3, [r4, #0]
 80122dc:	079b      	lsls	r3, r3, #30
 80122de:	d400      	bmi.n	80122e2 <HAL_RCC_OscConfig+0x8a>
 80122e0:	e08d      	b.n	80123fe <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80122e2:	4b9f      	ldr	r3, [pc, #636]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	220c      	movs	r2, #12
 80122e8:	421a      	tst	r2, r3
 80122ea:	d077      	beq.n	80123dc <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80122ec:	4b9c      	ldr	r3, [pc, #624]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80122ee:	685a      	ldr	r2, [r3, #4]
 80122f0:	230c      	movs	r3, #12
 80122f2:	4013      	ands	r3, r2
 80122f4:	2b08      	cmp	r3, #8
 80122f6:	d068      	beq.n	80123ca <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80122f8:	68e3      	ldr	r3, [r4, #12]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d100      	bne.n	8012300 <HAL_RCC_OscConfig+0xa8>
 80122fe:	e0a1      	b.n	8012444 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8012300:	4a97      	ldr	r2, [pc, #604]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012302:	6813      	ldr	r3, [r2, #0]
 8012304:	2101      	movs	r1, #1
 8012306:	430b      	orrs	r3, r1
 8012308:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801230a:	f7fe fb01 	bl	8010910 <HAL_GetTick>
 801230e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012310:	4f93      	ldr	r7, [pc, #588]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012312:	2602      	movs	r6, #2
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	421e      	tst	r6, r3
 8012318:	d000      	beq.n	801231c <HAL_RCC_OscConfig+0xc4>
 801231a:	e08a      	b.n	8012432 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801231c:	f7fe faf8 	bl	8010910 <HAL_GetTick>
 8012320:	1b40      	subs	r0, r0, r5
 8012322:	2864      	cmp	r0, #100	; 0x64
 8012324:	d9f6      	bls.n	8012314 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8012326:	2003      	movs	r0, #3
 8012328:	e7cb      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801232a:	6863      	ldr	r3, [r4, #4]
 801232c:	2b01      	cmp	r3, #1
 801232e:	d00b      	beq.n	8012348 <HAL_RCC_OscConfig+0xf0>
 8012330:	2b00      	cmp	r3, #0
 8012332:	d122      	bne.n	801237a <HAL_RCC_OscConfig+0x122>
 8012334:	4b8a      	ldr	r3, [pc, #552]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012336:	681a      	ldr	r2, [r3, #0]
 8012338:	498a      	ldr	r1, [pc, #552]	; (8012564 <HAL_RCC_OscConfig+0x30c>)
 801233a:	400a      	ands	r2, r1
 801233c:	601a      	str	r2, [r3, #0]
 801233e:	681a      	ldr	r2, [r3, #0]
 8012340:	4989      	ldr	r1, [pc, #548]	; (8012568 <HAL_RCC_OscConfig+0x310>)
 8012342:	400a      	ands	r2, r1
 8012344:	601a      	str	r2, [r3, #0]
 8012346:	e005      	b.n	8012354 <HAL_RCC_OscConfig+0xfc>
 8012348:	4a85      	ldr	r2, [pc, #532]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 801234a:	6811      	ldr	r1, [r2, #0]
 801234c:	2380      	movs	r3, #128	; 0x80
 801234e:	025b      	lsls	r3, r3, #9
 8012350:	430b      	orrs	r3, r1
 8012352:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012354:	6863      	ldr	r3, [r4, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d027      	beq.n	80123aa <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 801235a:	f7fe fad9 	bl	8010910 <HAL_GetTick>
 801235e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012360:	4f7f      	ldr	r7, [pc, #508]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012362:	2680      	movs	r6, #128	; 0x80
 8012364:	02b6      	lsls	r6, r6, #10
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	4233      	tst	r3, r6
 801236a:	d1b6      	bne.n	80122da <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801236c:	f7fe fad0 	bl	8010910 <HAL_GetTick>
 8012370:	1b40      	subs	r0, r0, r5
 8012372:	2864      	cmp	r0, #100	; 0x64
 8012374:	d9f7      	bls.n	8012366 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8012376:	2003      	movs	r0, #3
 8012378:	e7a3      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801237a:	2b05      	cmp	r3, #5
 801237c:	d009      	beq.n	8012392 <HAL_RCC_OscConfig+0x13a>
 801237e:	4b78      	ldr	r3, [pc, #480]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	4978      	ldr	r1, [pc, #480]	; (8012564 <HAL_RCC_OscConfig+0x30c>)
 8012384:	400a      	ands	r2, r1
 8012386:	601a      	str	r2, [r3, #0]
 8012388:	681a      	ldr	r2, [r3, #0]
 801238a:	4977      	ldr	r1, [pc, #476]	; (8012568 <HAL_RCC_OscConfig+0x310>)
 801238c:	400a      	ands	r2, r1
 801238e:	601a      	str	r2, [r3, #0]
 8012390:	e7e0      	b.n	8012354 <HAL_RCC_OscConfig+0xfc>
 8012392:	4b73      	ldr	r3, [pc, #460]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012394:	6819      	ldr	r1, [r3, #0]
 8012396:	2280      	movs	r2, #128	; 0x80
 8012398:	02d2      	lsls	r2, r2, #11
 801239a:	430a      	orrs	r2, r1
 801239c:	601a      	str	r2, [r3, #0]
 801239e:	6819      	ldr	r1, [r3, #0]
 80123a0:	2280      	movs	r2, #128	; 0x80
 80123a2:	0252      	lsls	r2, r2, #9
 80123a4:	430a      	orrs	r2, r1
 80123a6:	601a      	str	r2, [r3, #0]
 80123a8:	e7d4      	b.n	8012354 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80123aa:	f7fe fab1 	bl	8010910 <HAL_GetTick>
 80123ae:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80123b0:	4f6b      	ldr	r7, [pc, #428]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80123b2:	2680      	movs	r6, #128	; 0x80
 80123b4:	02b6      	lsls	r6, r6, #10
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	4233      	tst	r3, r6
 80123ba:	d08e      	beq.n	80122da <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80123bc:	f7fe faa8 	bl	8010910 <HAL_GetTick>
 80123c0:	1b40      	subs	r0, r0, r5
 80123c2:	2864      	cmp	r0, #100	; 0x64
 80123c4:	d9f7      	bls.n	80123b6 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80123c6:	2003      	movs	r0, #3
 80123c8:	e77b      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80123ca:	4b65      	ldr	r3, [pc, #404]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	22c0      	movs	r2, #192	; 0xc0
 80123d0:	0252      	lsls	r2, r2, #9
 80123d2:	4013      	ands	r3, r2
 80123d4:	2280      	movs	r2, #128	; 0x80
 80123d6:	0212      	lsls	r2, r2, #8
 80123d8:	4293      	cmp	r3, r2
 80123da:	d18d      	bne.n	80122f8 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80123dc:	4b60      	ldr	r3, [pc, #384]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	079b      	lsls	r3, r3, #30
 80123e2:	d504      	bpl.n	80123ee <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 80123e4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80123e6:	68e3      	ldr	r3, [r4, #12]
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d000      	beq.n	80123ee <HAL_RCC_OscConfig+0x196>
 80123ec:	e769      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80123ee:	495c      	ldr	r1, [pc, #368]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80123f0:	680a      	ldr	r2, [r1, #0]
 80123f2:	6923      	ldr	r3, [r4, #16]
 80123f4:	00db      	lsls	r3, r3, #3
 80123f6:	20f8      	movs	r0, #248	; 0xf8
 80123f8:	4382      	bics	r2, r0
 80123fa:	4313      	orrs	r3, r2
 80123fc:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80123fe:	6823      	ldr	r3, [r4, #0]
 8012400:	071b      	lsls	r3, r3, #28
 8012402:	d547      	bpl.n	8012494 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012404:	6a23      	ldr	r3, [r4, #32]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d030      	beq.n	801246c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 801240a:	4a55      	ldr	r2, [pc, #340]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 801240c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801240e:	2101      	movs	r1, #1
 8012410:	430b      	orrs	r3, r1
 8012412:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012414:	f7fe fa7c 	bl	8010910 <HAL_GetTick>
 8012418:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801241a:	4f51      	ldr	r7, [pc, #324]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 801241c:	2602      	movs	r6, #2
 801241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012420:	421e      	tst	r6, r3
 8012422:	d137      	bne.n	8012494 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012424:	f7fe fa74 	bl	8010910 <HAL_GetTick>
 8012428:	1b40      	subs	r0, r0, r5
 801242a:	2864      	cmp	r0, #100	; 0x64
 801242c:	d9f7      	bls.n	801241e <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 801242e:	2003      	movs	r0, #3
 8012430:	e747      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012432:	494b      	ldr	r1, [pc, #300]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012434:	680a      	ldr	r2, [r1, #0]
 8012436:	6923      	ldr	r3, [r4, #16]
 8012438:	00db      	lsls	r3, r3, #3
 801243a:	20f8      	movs	r0, #248	; 0xf8
 801243c:	4382      	bics	r2, r0
 801243e:	4313      	orrs	r3, r2
 8012440:	600b      	str	r3, [r1, #0]
 8012442:	e7dc      	b.n	80123fe <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8012444:	4a46      	ldr	r2, [pc, #280]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012446:	6813      	ldr	r3, [r2, #0]
 8012448:	2101      	movs	r1, #1
 801244a:	438b      	bics	r3, r1
 801244c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801244e:	f7fe fa5f 	bl	8010910 <HAL_GetTick>
 8012452:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012454:	4f42      	ldr	r7, [pc, #264]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012456:	2602      	movs	r6, #2
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	421e      	tst	r6, r3
 801245c:	d0cf      	beq.n	80123fe <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801245e:	f7fe fa57 	bl	8010910 <HAL_GetTick>
 8012462:	1b40      	subs	r0, r0, r5
 8012464:	2864      	cmp	r0, #100	; 0x64
 8012466:	d9f7      	bls.n	8012458 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8012468:	2003      	movs	r0, #3
 801246a:	e72a      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 801246c:	4a3c      	ldr	r2, [pc, #240]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 801246e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012470:	2101      	movs	r1, #1
 8012472:	438b      	bics	r3, r1
 8012474:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012476:	f7fe fa4b 	bl	8010910 <HAL_GetTick>
 801247a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801247c:	4f38      	ldr	r7, [pc, #224]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 801247e:	2602      	movs	r6, #2
 8012480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012482:	421e      	tst	r6, r3
 8012484:	d006      	beq.n	8012494 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012486:	f7fe fa43 	bl	8010910 <HAL_GetTick>
 801248a:	1b40      	subs	r0, r0, r5
 801248c:	2864      	cmp	r0, #100	; 0x64
 801248e:	d9f7      	bls.n	8012480 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 8012490:	2003      	movs	r0, #3
 8012492:	e716      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012494:	6823      	ldr	r3, [r4, #0]
 8012496:	075b      	lsls	r3, r3, #29
 8012498:	d442      	bmi.n	8012520 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 801249a:	6823      	ldr	r3, [r4, #0]
 801249c:	06db      	lsls	r3, r3, #27
 801249e:	d512      	bpl.n	80124c6 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80124a0:	6963      	ldr	r3, [r4, #20]
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	d100      	bne.n	80124a8 <HAL_RCC_OscConfig+0x250>
 80124a6:	e0ce      	b.n	8012646 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80124a8:	3305      	adds	r3, #5
 80124aa:	d000      	beq.n	80124ae <HAL_RCC_OscConfig+0x256>
 80124ac:	e0ec      	b.n	8012688 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80124ae:	4a2c      	ldr	r2, [pc, #176]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80124b0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80124b2:	2104      	movs	r1, #4
 80124b4:	438b      	bics	r3, r1
 80124b6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80124b8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80124ba:	69a3      	ldr	r3, [r4, #24]
 80124bc:	00db      	lsls	r3, r3, #3
 80124be:	20f8      	movs	r0, #248	; 0xf8
 80124c0:	4381      	bics	r1, r0
 80124c2:	430b      	orrs	r3, r1
 80124c4:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80124c6:	6823      	ldr	r3, [r4, #0]
 80124c8:	069b      	lsls	r3, r3, #26
 80124ca:	d400      	bmi.n	80124ce <HAL_RCC_OscConfig+0x276>
 80124cc:	e106      	b.n	80126dc <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80124ce:	4b24      	ldr	r3, [pc, #144]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80124d0:	685a      	ldr	r2, [r3, #4]
 80124d2:	230c      	movs	r3, #12
 80124d4:	4013      	ands	r3, r2
 80124d6:	2b0c      	cmp	r3, #12
 80124d8:	d100      	bne.n	80124dc <HAL_RCC_OscConfig+0x284>
 80124da:	e0f6      	b.n	80126ca <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80124dc:	4b20      	ldr	r3, [pc, #128]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80124de:	685a      	ldr	r2, [r3, #4]
 80124e0:	230c      	movs	r3, #12
 80124e2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80124e4:	2b08      	cmp	r3, #8
 80124e6:	d100      	bne.n	80124ea <HAL_RCC_OscConfig+0x292>
 80124e8:	e0e7      	b.n	80126ba <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80124ea:	69e3      	ldr	r3, [r4, #28]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d100      	bne.n	80124f2 <HAL_RCC_OscConfig+0x29a>
 80124f0:	e116      	b.n	8012720 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 80124f2:	4a1b      	ldr	r2, [pc, #108]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 80124f4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80124f6:	2380      	movs	r3, #128	; 0x80
 80124f8:	025b      	lsls	r3, r3, #9
 80124fa:	430b      	orrs	r3, r1
 80124fc:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80124fe:	f7fe fa07 	bl	8010910 <HAL_GetTick>
 8012502:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012504:	4f16      	ldr	r7, [pc, #88]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012506:	2680      	movs	r6, #128	; 0x80
 8012508:	0276      	lsls	r6, r6, #9
 801250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801250c:	4233      	tst	r3, r6
 801250e:	d000      	beq.n	8012512 <HAL_RCC_OscConfig+0x2ba>
 8012510:	e0e4      	b.n	80126dc <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012512:	f7fe f9fd 	bl	8010910 <HAL_GetTick>
 8012516:	1b40      	subs	r0, r0, r5
 8012518:	2864      	cmp	r0, #100	; 0x64
 801251a:	d9f6      	bls.n	801250a <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 801251c:	2003      	movs	r0, #3
 801251e:	e6d0      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012520:	4a0f      	ldr	r2, [pc, #60]	; (8012560 <HAL_RCC_OscConfig+0x308>)
 8012522:	69d1      	ldr	r1, [r2, #28]
 8012524:	2080      	movs	r0, #128	; 0x80
 8012526:	0540      	lsls	r0, r0, #21
 8012528:	4301      	orrs	r1, r0
 801252a:	61d1      	str	r1, [r2, #28]
 801252c:	69d3      	ldr	r3, [r2, #28]
 801252e:	4003      	ands	r3, r0
 8012530:	9301      	str	r3, [sp, #4]
 8012532:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012534:	4a0d      	ldr	r2, [pc, #52]	; (801256c <HAL_RCC_OscConfig+0x314>)
 8012536:	6811      	ldr	r1, [r2, #0]
 8012538:	2380      	movs	r3, #128	; 0x80
 801253a:	005b      	lsls	r3, r3, #1
 801253c:	430b      	orrs	r3, r1
 801253e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012540:	f7fe f9e6 	bl	8010910 <HAL_GetTick>
 8012544:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012546:	4f09      	ldr	r7, [pc, #36]	; (801256c <HAL_RCC_OscConfig+0x314>)
 8012548:	2680      	movs	r6, #128	; 0x80
 801254a:	0076      	lsls	r6, r6, #1
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	4233      	tst	r3, r6
 8012550:	d10e      	bne.n	8012570 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012552:	f7fe f9dd 	bl	8010910 <HAL_GetTick>
 8012556:	1b40      	subs	r0, r0, r5
 8012558:	2864      	cmp	r0, #100	; 0x64
 801255a:	d9f7      	bls.n	801254c <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 801255c:	2003      	movs	r0, #3
 801255e:	e6b0      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
 8012560:	40021000 	.word	0x40021000
 8012564:	fffeffff 	.word	0xfffeffff
 8012568:	fffbffff 	.word	0xfffbffff
 801256c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8012570:	4b96      	ldr	r3, [pc, #600]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 8012572:	6a1a      	ldr	r2, [r3, #32]
 8012574:	2101      	movs	r1, #1
 8012576:	438a      	bics	r2, r1
 8012578:	621a      	str	r2, [r3, #32]
 801257a:	6a1a      	ldr	r2, [r3, #32]
 801257c:	3103      	adds	r1, #3
 801257e:	438a      	bics	r2, r1
 8012580:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8012582:	f7fe f9c5 	bl	8010910 <HAL_GetTick>
 8012586:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012588:	4f90      	ldr	r7, [pc, #576]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 801258a:	2602      	movs	r6, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801258c:	4b90      	ldr	r3, [pc, #576]	; (80127d0 <HAL_RCC_OscConfig+0x578>)
 801258e:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012590:	6a3b      	ldr	r3, [r7, #32]
 8012592:	421e      	tst	r6, r3
 8012594:	d006      	beq.n	80125a4 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012596:	f7fe f9bb 	bl	8010910 <HAL_GetTick>
 801259a:	1b40      	subs	r0, r0, r5
 801259c:	4540      	cmp	r0, r8
 801259e:	d9f7      	bls.n	8012590 <HAL_RCC_OscConfig+0x338>
        return HAL_TIMEOUT;
 80125a0:	2003      	movs	r0, #3
 80125a2:	e68e      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80125a4:	68a3      	ldr	r3, [r4, #8]
 80125a6:	2b01      	cmp	r3, #1
 80125a8:	d00b      	beq.n	80125c2 <HAL_RCC_OscConfig+0x36a>
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d123      	bne.n	80125f6 <HAL_RCC_OscConfig+0x39e>
 80125ae:	4b87      	ldr	r3, [pc, #540]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 80125b0:	6a1a      	ldr	r2, [r3, #32]
 80125b2:	2101      	movs	r1, #1
 80125b4:	438a      	bics	r2, r1
 80125b6:	621a      	str	r2, [r3, #32]
 80125b8:	6a1a      	ldr	r2, [r3, #32]
 80125ba:	3103      	adds	r1, #3
 80125bc:	438a      	bics	r2, r1
 80125be:	621a      	str	r2, [r3, #32]
 80125c0:	e004      	b.n	80125cc <HAL_RCC_OscConfig+0x374>
 80125c2:	4a82      	ldr	r2, [pc, #520]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 80125c4:	6a13      	ldr	r3, [r2, #32]
 80125c6:	2101      	movs	r1, #1
 80125c8:	430b      	orrs	r3, r1
 80125ca:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80125cc:	68a3      	ldr	r3, [r4, #8]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d027      	beq.n	8012622 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80125d2:	f7fe f99d 	bl	8010910 <HAL_GetTick>
 80125d6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80125d8:	4f7c      	ldr	r7, [pc, #496]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 80125da:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80125dc:	4b7c      	ldr	r3, [pc, #496]	; (80127d0 <HAL_RCC_OscConfig+0x578>)
 80125de:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80125e0:	6a3b      	ldr	r3, [r7, #32]
 80125e2:	421e      	tst	r6, r3
 80125e4:	d000      	beq.n	80125e8 <HAL_RCC_OscConfig+0x390>
 80125e6:	e758      	b.n	801249a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80125e8:	f7fe f992 	bl	8010910 <HAL_GetTick>
 80125ec:	1b40      	subs	r0, r0, r5
 80125ee:	4540      	cmp	r0, r8
 80125f0:	d9f6      	bls.n	80125e0 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 80125f2:	2003      	movs	r0, #3
 80125f4:	e665      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80125f6:	2b05      	cmp	r3, #5
 80125f8:	d009      	beq.n	801260e <HAL_RCC_OscConfig+0x3b6>
 80125fa:	4b74      	ldr	r3, [pc, #464]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 80125fc:	6a1a      	ldr	r2, [r3, #32]
 80125fe:	2101      	movs	r1, #1
 8012600:	438a      	bics	r2, r1
 8012602:	621a      	str	r2, [r3, #32]
 8012604:	6a1a      	ldr	r2, [r3, #32]
 8012606:	3103      	adds	r1, #3
 8012608:	438a      	bics	r2, r1
 801260a:	621a      	str	r2, [r3, #32]
 801260c:	e7de      	b.n	80125cc <HAL_RCC_OscConfig+0x374>
 801260e:	4b6f      	ldr	r3, [pc, #444]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 8012610:	6a1a      	ldr	r2, [r3, #32]
 8012612:	2104      	movs	r1, #4
 8012614:	430a      	orrs	r2, r1
 8012616:	621a      	str	r2, [r3, #32]
 8012618:	6a1a      	ldr	r2, [r3, #32]
 801261a:	3903      	subs	r1, #3
 801261c:	430a      	orrs	r2, r1
 801261e:	621a      	str	r2, [r3, #32]
 8012620:	e7d4      	b.n	80125cc <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012622:	f7fe f975 	bl	8010910 <HAL_GetTick>
 8012626:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012628:	4f68      	ldr	r7, [pc, #416]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 801262a:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801262c:	4b68      	ldr	r3, [pc, #416]	; (80127d0 <HAL_RCC_OscConfig+0x578>)
 801262e:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012630:	6a3b      	ldr	r3, [r7, #32]
 8012632:	421e      	tst	r6, r3
 8012634:	d100      	bne.n	8012638 <HAL_RCC_OscConfig+0x3e0>
 8012636:	e730      	b.n	801249a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012638:	f7fe f96a 	bl	8010910 <HAL_GetTick>
 801263c:	1b40      	subs	r0, r0, r5
 801263e:	4540      	cmp	r0, r8
 8012640:	d9f6      	bls.n	8012630 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 8012642:	2003      	movs	r0, #3
 8012644:	e63d      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012646:	4b61      	ldr	r3, [pc, #388]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 8012648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801264a:	2104      	movs	r1, #4
 801264c:	430a      	orrs	r2, r1
 801264e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012652:	3903      	subs	r1, #3
 8012654:	430a      	orrs	r2, r1
 8012656:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012658:	f7fe f95a 	bl	8010910 <HAL_GetTick>
 801265c:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801265e:	4f5b      	ldr	r7, [pc, #364]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 8012660:	2602      	movs	r6, #2
 8012662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012664:	421e      	tst	r6, r3
 8012666:	d106      	bne.n	8012676 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012668:	f7fe f952 	bl	8010910 <HAL_GetTick>
 801266c:	1b40      	subs	r0, r0, r5
 801266e:	2864      	cmp	r0, #100	; 0x64
 8012670:	d9f7      	bls.n	8012662 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8012672:	2003      	movs	r0, #3
 8012674:	e625      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012676:	4955      	ldr	r1, [pc, #340]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 8012678:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801267a:	69a3      	ldr	r3, [r4, #24]
 801267c:	00db      	lsls	r3, r3, #3
 801267e:	20f8      	movs	r0, #248	; 0xf8
 8012680:	4382      	bics	r2, r0
 8012682:	4313      	orrs	r3, r2
 8012684:	634b      	str	r3, [r1, #52]	; 0x34
 8012686:	e71e      	b.n	80124c6 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012688:	4b50      	ldr	r3, [pc, #320]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 801268a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801268c:	2104      	movs	r1, #4
 801268e:	430a      	orrs	r2, r1
 8012690:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8012692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012694:	3903      	subs	r1, #3
 8012696:	438a      	bics	r2, r1
 8012698:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 801269a:	f7fe f939 	bl	8010910 <HAL_GetTick>
 801269e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80126a0:	4f4a      	ldr	r7, [pc, #296]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 80126a2:	2602      	movs	r6, #2
 80126a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126a6:	421e      	tst	r6, r3
 80126a8:	d100      	bne.n	80126ac <HAL_RCC_OscConfig+0x454>
 80126aa:	e70c      	b.n	80124c6 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80126ac:	f7fe f930 	bl	8010910 <HAL_GetTick>
 80126b0:	1b40      	subs	r0, r0, r5
 80126b2:	2864      	cmp	r0, #100	; 0x64
 80126b4:	d9f6      	bls.n	80126a4 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80126b6:	2003      	movs	r0, #3
 80126b8:	e603      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80126ba:	4b44      	ldr	r3, [pc, #272]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	22c0      	movs	r2, #192	; 0xc0
 80126c0:	0252      	lsls	r2, r2, #9
 80126c2:	4013      	ands	r3, r2
 80126c4:	4293      	cmp	r3, r2
 80126c6:	d000      	beq.n	80126ca <HAL_RCC_OscConfig+0x472>
 80126c8:	e70f      	b.n	80124ea <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80126ca:	4b40      	ldr	r3, [pc, #256]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 80126cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126ce:	03db      	lsls	r3, r3, #15
 80126d0:	d504      	bpl.n	80126dc <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 80126d2:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80126d4:	69e3      	ldr	r3, [r4, #28]
 80126d6:	2b01      	cmp	r3, #1
 80126d8:	d000      	beq.n	80126dc <HAL_RCC_OscConfig+0x484>
 80126da:	e5f2      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80126dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80126de:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d100      	bne.n	80126e6 <HAL_RCC_OscConfig+0x48e>
 80126e4:	e5ed      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80126e6:	4a39      	ldr	r2, [pc, #228]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 80126e8:	6851      	ldr	r1, [r2, #4]
 80126ea:	220c      	movs	r2, #12
 80126ec:	400a      	ands	r2, r1
 80126ee:	2a08      	cmp	r2, #8
 80126f0:	d06a      	beq.n	80127c8 <HAL_RCC_OscConfig+0x570>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	d029      	beq.n	801274a <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 80126f6:	4a35      	ldr	r2, [pc, #212]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 80126f8:	6813      	ldr	r3, [r2, #0]
 80126fa:	4936      	ldr	r1, [pc, #216]	; (80127d4 <HAL_RCC_OscConfig+0x57c>)
 80126fc:	400b      	ands	r3, r1
 80126fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012700:	f7fe f906 	bl	8010910 <HAL_GetTick>
 8012704:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012706:	4e31      	ldr	r6, [pc, #196]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 8012708:	2580      	movs	r5, #128	; 0x80
 801270a:	04ad      	lsls	r5, r5, #18
 801270c:	6833      	ldr	r3, [r6, #0]
 801270e:	422b      	tst	r3, r5
 8012710:	d056      	beq.n	80127c0 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012712:	f7fe f8fd 	bl	8010910 <HAL_GetTick>
 8012716:	1b00      	subs	r0, r0, r4
 8012718:	2864      	cmp	r0, #100	; 0x64
 801271a:	d9f7      	bls.n	801270c <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 801271c:	2003      	movs	r0, #3
 801271e:	e5d0      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012720:	4a2a      	ldr	r2, [pc, #168]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 8012722:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012724:	492c      	ldr	r1, [pc, #176]	; (80127d8 <HAL_RCC_OscConfig+0x580>)
 8012726:	400b      	ands	r3, r1
 8012728:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801272a:	f7fe f8f1 	bl	8010910 <HAL_GetTick>
 801272e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012730:	4f26      	ldr	r7, [pc, #152]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 8012732:	2680      	movs	r6, #128	; 0x80
 8012734:	0276      	lsls	r6, r6, #9
 8012736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012738:	4233      	tst	r3, r6
 801273a:	d0cf      	beq.n	80126dc <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801273c:	f7fe f8e8 	bl	8010910 <HAL_GetTick>
 8012740:	1b40      	subs	r0, r0, r5
 8012742:	2864      	cmp	r0, #100	; 0x64
 8012744:	d9f7      	bls.n	8012736 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8012746:	2003      	movs	r0, #3
 8012748:	e5bb      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 801274a:	4a20      	ldr	r2, [pc, #128]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 801274c:	6813      	ldr	r3, [r2, #0]
 801274e:	4921      	ldr	r1, [pc, #132]	; (80127d4 <HAL_RCC_OscConfig+0x57c>)
 8012750:	400b      	ands	r3, r1
 8012752:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012754:	f7fe f8dc 	bl	8010910 <HAL_GetTick>
 8012758:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801275a:	4f1c      	ldr	r7, [pc, #112]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 801275c:	2680      	movs	r6, #128	; 0x80
 801275e:	04b6      	lsls	r6, r6, #18
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	4233      	tst	r3, r6
 8012764:	d006      	beq.n	8012774 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012766:	f7fe f8d3 	bl	8010910 <HAL_GetTick>
 801276a:	1b40      	subs	r0, r0, r5
 801276c:	2864      	cmp	r0, #100	; 0x64
 801276e:	d9f7      	bls.n	8012760 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8012770:	2003      	movs	r0, #3
 8012772:	e5a6      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012774:	4b15      	ldr	r3, [pc, #84]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 8012776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012778:	210f      	movs	r1, #15
 801277a:	438a      	bics	r2, r1
 801277c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801277e:	430a      	orrs	r2, r1
 8012780:	62da      	str	r2, [r3, #44]	; 0x2c
 8012782:	6859      	ldr	r1, [r3, #4]
 8012784:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012786:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012788:	4302      	orrs	r2, r0
 801278a:	4814      	ldr	r0, [pc, #80]	; (80127dc <HAL_RCC_OscConfig+0x584>)
 801278c:	4001      	ands	r1, r0
 801278e:	430a      	orrs	r2, r1
 8012790:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8012792:	6819      	ldr	r1, [r3, #0]
 8012794:	2280      	movs	r2, #128	; 0x80
 8012796:	0452      	lsls	r2, r2, #17
 8012798:	430a      	orrs	r2, r1
 801279a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801279c:	f7fe f8b8 	bl	8010910 <HAL_GetTick>
 80127a0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80127a2:	4e0a      	ldr	r6, [pc, #40]	; (80127cc <HAL_RCC_OscConfig+0x574>)
 80127a4:	2580      	movs	r5, #128	; 0x80
 80127a6:	04ad      	lsls	r5, r5, #18
 80127a8:	6833      	ldr	r3, [r6, #0]
 80127aa:	422b      	tst	r3, r5
 80127ac:	d106      	bne.n	80127bc <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80127ae:	f7fe f8af 	bl	8010910 <HAL_GetTick>
 80127b2:	1b00      	subs	r0, r0, r4
 80127b4:	2864      	cmp	r0, #100	; 0x64
 80127b6:	d9f7      	bls.n	80127a8 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80127b8:	2003      	movs	r0, #3
 80127ba:	e582      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80127bc:	2000      	movs	r0, #0
 80127be:	e580      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
 80127c0:	2000      	movs	r0, #0
 80127c2:	e57e      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
        return HAL_ERROR;
 80127c4:	2001      	movs	r0, #1
 80127c6:	e57c      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80127c8:	2001      	movs	r0, #1
 80127ca:	e57a      	b.n	80122c2 <HAL_RCC_OscConfig+0x6a>
 80127cc:	40021000 	.word	0x40021000
 80127d0:	00001388 	.word	0x00001388
 80127d4:	feffffff 	.word	0xfeffffff
 80127d8:	fffeffff 	.word	0xfffeffff
 80127dc:	ffc27fff 	.word	0xffc27fff

080127e0 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80127e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e2:	46ce      	mov	lr, r9
 80127e4:	4647      	mov	r7, r8
 80127e6:	b580      	push	{r7, lr}
 80127e8:	0004      	movs	r4, r0
 80127ea:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80127ec:	4b96      	ldr	r3, [pc, #600]	; (8012a48 <HAL_RCC_ClockConfig+0x268>)
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	2301      	movs	r3, #1
 80127f2:	4013      	ands	r3, r2
 80127f4:	428b      	cmp	r3, r1
 80127f6:	d300      	bcc.n	80127fa <HAL_RCC_ClockConfig+0x1a>
 80127f8:	e086      	b.n	8012908 <HAL_RCC_ClockConfig+0x128>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80127fa:	4993      	ldr	r1, [pc, #588]	; (8012a48 <HAL_RCC_ClockConfig+0x268>)
 80127fc:	680b      	ldr	r3, [r1, #0]
 80127fe:	2201      	movs	r2, #1
 8012800:	4393      	bics	r3, r2
 8012802:	432b      	orrs	r3, r5
 8012804:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012806:	680b      	ldr	r3, [r1, #0]
 8012808:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801280a:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801280c:	42aa      	cmp	r2, r5
 801280e:	d000      	beq.n	8012812 <HAL_RCC_ClockConfig+0x32>
 8012810:	e111      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012812:	6823      	ldr	r3, [r4, #0]
 8012814:	079b      	lsls	r3, r3, #30
 8012816:	d506      	bpl.n	8012826 <HAL_RCC_ClockConfig+0x46>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012818:	4a8c      	ldr	r2, [pc, #560]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 801281a:	6853      	ldr	r3, [r2, #4]
 801281c:	21f0      	movs	r1, #240	; 0xf0
 801281e:	438b      	bics	r3, r1
 8012820:	68a1      	ldr	r1, [r4, #8]
 8012822:	430b      	orrs	r3, r1
 8012824:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012826:	6823      	ldr	r3, [r4, #0]
 8012828:	07db      	lsls	r3, r3, #31
 801282a:	d400      	bmi.n	801282e <HAL_RCC_ClockConfig+0x4e>
 801282c:	e0f5      	b.n	8012a1a <HAL_RCC_ClockConfig+0x23a>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801282e:	6862      	ldr	r2, [r4, #4]
 8012830:	2a01      	cmp	r2, #1
 8012832:	d009      	beq.n	8012848 <HAL_RCC_ClockConfig+0x68>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012834:	2a02      	cmp	r2, #2
 8012836:	d02b      	beq.n	8012890 <HAL_RCC_ClockConfig+0xb0>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012838:	2a03      	cmp	r2, #3
 801283a:	d02f      	beq.n	801289c <HAL_RCC_ClockConfig+0xbc>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801283c:	4b83      	ldr	r3, [pc, #524]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	079b      	lsls	r3, r3, #30
 8012842:	d406      	bmi.n	8012852 <HAL_RCC_ClockConfig+0x72>
        {
          return HAL_ERROR;
 8012844:	2001      	movs	r0, #1
 8012846:	e0f6      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012848:	4b80      	ldr	r3, [pc, #512]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	039b      	lsls	r3, r3, #14
 801284e:	d400      	bmi.n	8012852 <HAL_RCC_ClockConfig+0x72>
 8012850:	e0f5      	b.n	8012a3e <HAL_RCC_ClockConfig+0x25e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012852:	497e      	ldr	r1, [pc, #504]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 8012854:	684b      	ldr	r3, [r1, #4]
 8012856:	2003      	movs	r0, #3
 8012858:	4383      	bics	r3, r0
 801285a:	4313      	orrs	r3, r2
 801285c:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801285e:	f7fe f857 	bl	8010910 <HAL_GetTick>
 8012862:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012864:	6863      	ldr	r3, [r4, #4]
 8012866:	2b01      	cmp	r3, #1
 8012868:	d01e      	beq.n	80128a8 <HAL_RCC_ClockConfig+0xc8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801286a:	2b02      	cmp	r3, #2
 801286c:	d02c      	beq.n	80128c8 <HAL_RCC_ClockConfig+0xe8>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801286e:	2b03      	cmp	r3, #3
 8012870:	d03a      	beq.n	80128e8 <HAL_RCC_ClockConfig+0x108>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012872:	4f76      	ldr	r7, [pc, #472]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 8012874:	260c      	movs	r6, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012876:	4b76      	ldr	r3, [pc, #472]	; (8012a50 <HAL_RCC_ClockConfig+0x270>)
 8012878:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	421e      	tst	r6, r3
 801287e:	d100      	bne.n	8012882 <HAL_RCC_ClockConfig+0xa2>
 8012880:	e0cb      	b.n	8012a1a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012882:	f7fe f845 	bl	8010910 <HAL_GetTick>
 8012886:	1b40      	subs	r0, r0, r5
 8012888:	4540      	cmp	r0, r8
 801288a:	d9f6      	bls.n	801287a <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 801288c:	2003      	movs	r0, #3
 801288e:	e0d2      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012890:	4b6e      	ldr	r3, [pc, #440]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	019b      	lsls	r3, r3, #6
 8012896:	d4dc      	bmi.n	8012852 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8012898:	2001      	movs	r0, #1
 801289a:	e0cc      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801289c:	4b6b      	ldr	r3, [pc, #428]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 801289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128a0:	03db      	lsls	r3, r3, #15
 80128a2:	d4d6      	bmi.n	8012852 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 80128a4:	2001      	movs	r0, #1
 80128a6:	e0c6      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80128a8:	4f68      	ldr	r7, [pc, #416]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 80128aa:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128ac:	4b68      	ldr	r3, [pc, #416]	; (8012a50 <HAL_RCC_ClockConfig+0x270>)
 80128ae:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	4033      	ands	r3, r6
 80128b4:	2b04      	cmp	r3, #4
 80128b6:	d100      	bne.n	80128ba <HAL_RCC_ClockConfig+0xda>
 80128b8:	e0af      	b.n	8012a1a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128ba:	f7fe f829 	bl	8010910 <HAL_GetTick>
 80128be:	1b40      	subs	r0, r0, r5
 80128c0:	4540      	cmp	r0, r8
 80128c2:	d9f5      	bls.n	80128b0 <HAL_RCC_ClockConfig+0xd0>
            return HAL_TIMEOUT;
 80128c4:	2003      	movs	r0, #3
 80128c6:	e0b6      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80128c8:	4f60      	ldr	r7, [pc, #384]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 80128ca:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128cc:	4b60      	ldr	r3, [pc, #384]	; (8012a50 <HAL_RCC_ClockConfig+0x270>)
 80128ce:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	4033      	ands	r3, r6
 80128d4:	2b08      	cmp	r3, #8
 80128d6:	d100      	bne.n	80128da <HAL_RCC_ClockConfig+0xfa>
 80128d8:	e09f      	b.n	8012a1a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128da:	f7fe f819 	bl	8010910 <HAL_GetTick>
 80128de:	1b40      	subs	r0, r0, r5
 80128e0:	4540      	cmp	r0, r8
 80128e2:	d9f5      	bls.n	80128d0 <HAL_RCC_ClockConfig+0xf0>
            return HAL_TIMEOUT;
 80128e4:	2003      	movs	r0, #3
 80128e6:	e0a6      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80128e8:	4f58      	ldr	r7, [pc, #352]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 80128ea:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128ec:	4b58      	ldr	r3, [pc, #352]	; (8012a50 <HAL_RCC_ClockConfig+0x270>)
 80128ee:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	4033      	ands	r3, r6
 80128f4:	2b0c      	cmp	r3, #12
 80128f6:	d100      	bne.n	80128fa <HAL_RCC_ClockConfig+0x11a>
 80128f8:	e08f      	b.n	8012a1a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128fa:	f7fe f809 	bl	8010910 <HAL_GetTick>
 80128fe:	1b40      	subs	r0, r0, r5
 8012900:	4540      	cmp	r0, r8
 8012902:	d9f5      	bls.n	80128f0 <HAL_RCC_ClockConfig+0x110>
            return HAL_TIMEOUT;
 8012904:	2003      	movs	r0, #3
 8012906:	e096      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012908:	6803      	ldr	r3, [r0, #0]
 801290a:	079b      	lsls	r3, r3, #30
 801290c:	d506      	bpl.n	801291c <HAL_RCC_ClockConfig+0x13c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801290e:	4a4f      	ldr	r2, [pc, #316]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 8012910:	6853      	ldr	r3, [r2, #4]
 8012912:	21f0      	movs	r1, #240	; 0xf0
 8012914:	438b      	bics	r3, r1
 8012916:	6881      	ldr	r1, [r0, #8]
 8012918:	430b      	orrs	r3, r1
 801291a:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801291c:	6823      	ldr	r3, [r4, #0]
 801291e:	07db      	lsls	r3, r3, #31
 8012920:	d570      	bpl.n	8012a04 <HAL_RCC_ClockConfig+0x224>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012922:	6862      	ldr	r2, [r4, #4]
 8012924:	2a01      	cmp	r2, #1
 8012926:	d009      	beq.n	801293c <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012928:	2a02      	cmp	r2, #2
 801292a:	d02c      	beq.n	8012986 <HAL_RCC_ClockConfig+0x1a6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801292c:	2a03      	cmp	r2, #3
 801292e:	d030      	beq.n	8012992 <HAL_RCC_ClockConfig+0x1b2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012930:	4b46      	ldr	r3, [pc, #280]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	079b      	lsls	r3, r3, #30
 8012936:	d406      	bmi.n	8012946 <HAL_RCC_ClockConfig+0x166>
        {
          return HAL_ERROR;
 8012938:	2001      	movs	r0, #1
 801293a:	e07c      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801293c:	4b43      	ldr	r3, [pc, #268]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	039b      	lsls	r3, r3, #14
 8012942:	d400      	bmi.n	8012946 <HAL_RCC_ClockConfig+0x166>
 8012944:	e07d      	b.n	8012a42 <HAL_RCC_ClockConfig+0x262>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012946:	4941      	ldr	r1, [pc, #260]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 8012948:	684b      	ldr	r3, [r1, #4]
 801294a:	2003      	movs	r0, #3
 801294c:	4383      	bics	r3, r0
 801294e:	4313      	orrs	r3, r2
 8012950:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012952:	f7fd ffdd 	bl	8010910 <HAL_GetTick>
 8012956:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012958:	6863      	ldr	r3, [r4, #4]
 801295a:	2b01      	cmp	r3, #1
 801295c:	d01f      	beq.n	801299e <HAL_RCC_ClockConfig+0x1be>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801295e:	2b02      	cmp	r3, #2
 8012960:	d02e      	beq.n	80129c0 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012962:	2b03      	cmp	r3, #3
 8012964:	d03d      	beq.n	80129e2 <HAL_RCC_ClockConfig+0x202>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012966:	4b39      	ldr	r3, [pc, #228]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 8012968:	4698      	mov	r8, r3
 801296a:	270c      	movs	r7, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801296c:	4b38      	ldr	r3, [pc, #224]	; (8012a50 <HAL_RCC_ClockConfig+0x270>)
 801296e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012970:	4643      	mov	r3, r8
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	421f      	tst	r7, r3
 8012976:	d045      	beq.n	8012a04 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012978:	f7fd ffca 	bl	8010910 <HAL_GetTick>
 801297c:	1b80      	subs	r0, r0, r6
 801297e:	4548      	cmp	r0, r9
 8012980:	d9f6      	bls.n	8012970 <HAL_RCC_ClockConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012982:	2003      	movs	r0, #3
 8012984:	e057      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012986:	4b31      	ldr	r3, [pc, #196]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	019b      	lsls	r3, r3, #6
 801298c:	d4db      	bmi.n	8012946 <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 801298e:	2001      	movs	r0, #1
 8012990:	e051      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012992:	4b2e      	ldr	r3, [pc, #184]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 8012994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012996:	03db      	lsls	r3, r3, #15
 8012998:	d4d5      	bmi.n	8012946 <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 801299a:	2001      	movs	r0, #1
 801299c:	e04b      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801299e:	4b2b      	ldr	r3, [pc, #172]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 80129a0:	4698      	mov	r8, r3
 80129a2:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129a4:	4b2a      	ldr	r3, [pc, #168]	; (8012a50 <HAL_RCC_ClockConfig+0x270>)
 80129a6:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80129a8:	4643      	mov	r3, r8
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	403b      	ands	r3, r7
 80129ae:	2b04      	cmp	r3, #4
 80129b0:	d028      	beq.n	8012a04 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129b2:	f7fd ffad 	bl	8010910 <HAL_GetTick>
 80129b6:	1b80      	subs	r0, r0, r6
 80129b8:	4548      	cmp	r0, r9
 80129ba:	d9f5      	bls.n	80129a8 <HAL_RCC_ClockConfig+0x1c8>
            return HAL_TIMEOUT;
 80129bc:	2003      	movs	r0, #3
 80129be:	e03a      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80129c0:	4b22      	ldr	r3, [pc, #136]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 80129c2:	4698      	mov	r8, r3
 80129c4:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129c6:	4b22      	ldr	r3, [pc, #136]	; (8012a50 <HAL_RCC_ClockConfig+0x270>)
 80129c8:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80129ca:	4643      	mov	r3, r8
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	403b      	ands	r3, r7
 80129d0:	2b08      	cmp	r3, #8
 80129d2:	d017      	beq.n	8012a04 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129d4:	f7fd ff9c 	bl	8010910 <HAL_GetTick>
 80129d8:	1b80      	subs	r0, r0, r6
 80129da:	4548      	cmp	r0, r9
 80129dc:	d9f5      	bls.n	80129ca <HAL_RCC_ClockConfig+0x1ea>
            return HAL_TIMEOUT;
 80129de:	2003      	movs	r0, #3
 80129e0:	e029      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80129e2:	4b1a      	ldr	r3, [pc, #104]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 80129e4:	4698      	mov	r8, r3
 80129e6:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129e8:	4b19      	ldr	r3, [pc, #100]	; (8012a50 <HAL_RCC_ClockConfig+0x270>)
 80129ea:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80129ec:	4643      	mov	r3, r8
 80129ee:	685b      	ldr	r3, [r3, #4]
 80129f0:	403b      	ands	r3, r7
 80129f2:	2b0c      	cmp	r3, #12
 80129f4:	d006      	beq.n	8012a04 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129f6:	f7fd ff8b 	bl	8010910 <HAL_GetTick>
 80129fa:	1b80      	subs	r0, r0, r6
 80129fc:	4548      	cmp	r0, r9
 80129fe:	d9f5      	bls.n	80129ec <HAL_RCC_ClockConfig+0x20c>
            return HAL_TIMEOUT;
 8012a00:	2003      	movs	r0, #3
 8012a02:	e018      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012a04:	4910      	ldr	r1, [pc, #64]	; (8012a48 <HAL_RCC_ClockConfig+0x268>)
 8012a06:	680b      	ldr	r3, [r1, #0]
 8012a08:	2201      	movs	r2, #1
 8012a0a:	4393      	bics	r3, r2
 8012a0c:	432b      	orrs	r3, r5
 8012a0e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012a10:	680b      	ldr	r3, [r1, #0]
 8012a12:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012a14:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012a16:	42aa      	cmp	r2, r5
 8012a18:	d10d      	bne.n	8012a36 <HAL_RCC_ClockConfig+0x256>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012a1a:	6823      	ldr	r3, [r4, #0]
 8012a1c:	075b      	lsls	r3, r3, #29
 8012a1e:	d506      	bpl.n	8012a2e <HAL_RCC_ClockConfig+0x24e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012a20:	4a0a      	ldr	r2, [pc, #40]	; (8012a4c <HAL_RCC_ClockConfig+0x26c>)
 8012a22:	6853      	ldr	r3, [r2, #4]
 8012a24:	490b      	ldr	r1, [pc, #44]	; (8012a54 <HAL_RCC_ClockConfig+0x274>)
 8012a26:	400b      	ands	r3, r1
 8012a28:	68e1      	ldr	r1, [r4, #12]
 8012a2a:	430b      	orrs	r3, r1
 8012a2c:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8012a2e:	2000      	movs	r0, #0
 8012a30:	f7fd ff44 	bl	80108bc <HAL_InitTick>
  
  return HAL_OK;
 8012a34:	2000      	movs	r0, #0
}
 8012a36:	bcc0      	pop	{r6, r7}
 8012a38:	46b9      	mov	r9, r7
 8012a3a:	46b0      	mov	r8, r6
 8012a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8012a3e:	2001      	movs	r0, #1
 8012a40:	e7f9      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
          return HAL_ERROR;
 8012a42:	2001      	movs	r0, #1
 8012a44:	e7f7      	b.n	8012a36 <HAL_RCC_ClockConfig+0x256>
 8012a46:	46c0      	nop			; (mov r8, r8)
 8012a48:	40022000 	.word	0x40022000
 8012a4c:	40021000 	.word	0x40021000
 8012a50:	00001388 	.word	0x00001388
 8012a54:	fffff8ff 	.word	0xfffff8ff

08012a58 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012a58:	b510      	push	{r4, lr}
 8012a5a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012a5c:	aa04      	add	r2, sp, #16
 8012a5e:	4b20      	ldr	r3, [pc, #128]	; (8012ae0 <HAL_RCC_GetSysClockFreq+0x88>)
 8012a60:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012a62:	c213      	stmia	r2!, {r0, r1, r4}
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012a68:	466a      	mov	r2, sp
 8012a6a:	4b1e      	ldr	r3, [pc, #120]	; (8012ae4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8012a6c:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012a6e:	c213      	stmia	r2!, {r0, r1, r4}
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012a74:	4b1c      	ldr	r3, [pc, #112]	; (8012ae8 <HAL_RCC_GetSysClockFreq+0x90>)
 8012a76:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012a78:	200c      	movs	r0, #12
 8012a7a:	4018      	ands	r0, r3
 8012a7c:	2808      	cmp	r0, #8
 8012a7e:	d00a      	beq.n	8012a96 <HAL_RCC_GetSysClockFreq+0x3e>
 8012a80:	380c      	subs	r0, #12
 8012a82:	1e43      	subs	r3, r0, #1
 8012a84:	4198      	sbcs	r0, r3
 8012a86:	4240      	negs	r0, r0
 8012a88:	4b18      	ldr	r3, [pc, #96]	; (8012aec <HAL_RCC_GetSysClockFreq+0x94>)
 8012a8a:	4018      	ands	r0, r3
 8012a8c:	4b18      	ldr	r3, [pc, #96]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8012a8e:	469c      	mov	ip, r3
 8012a90:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8012a92:	b008      	add	sp, #32
 8012a94:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8012a96:	0c99      	lsrs	r1, r3, #18
 8012a98:	220f      	movs	r2, #15
 8012a9a:	4011      	ands	r1, r2
 8012a9c:	a804      	add	r0, sp, #16
 8012a9e:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012aa0:	4911      	ldr	r1, [pc, #68]	; (8012ae8 <HAL_RCC_GetSysClockFreq+0x90>)
 8012aa2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012aa4:	400a      	ands	r2, r1
 8012aa6:	4669      	mov	r1, sp
 8012aa8:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012aaa:	22c0      	movs	r2, #192	; 0xc0
 8012aac:	0252      	lsls	r2, r2, #9
 8012aae:	4013      	ands	r3, r2
 8012ab0:	2280      	movs	r2, #128	; 0x80
 8012ab2:	0252      	lsls	r2, r2, #9
 8012ab4:	4293      	cmp	r3, r2
 8012ab6:	d008      	beq.n	8012aca <HAL_RCC_GetSysClockFreq+0x72>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8012ab8:	22c0      	movs	r2, #192	; 0xc0
 8012aba:	0252      	lsls	r2, r2, #9
 8012abc:	4293      	cmp	r3, r2
 8012abe:	d009      	beq.n	8012ad4 <HAL_RCC_GetSysClockFreq+0x7c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012ac0:	480c      	ldr	r0, [pc, #48]	; (8012af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012ac2:	f7ed fb45 	bl	8000150 <__udivsi3>
 8012ac6:	4360      	muls	r0, r4
 8012ac8:	e7e3      	b.n	8012a92 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8012aca:	480a      	ldr	r0, [pc, #40]	; (8012af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012acc:	f7ed fb40 	bl	8000150 <__udivsi3>
 8012ad0:	4360      	muls	r0, r4
 8012ad2:	e7de      	b.n	8012a92 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8012ad4:	4806      	ldr	r0, [pc, #24]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8012ad6:	f7ed fb3b 	bl	8000150 <__udivsi3>
 8012ada:	4360      	muls	r0, r4
 8012adc:	e7d9      	b.n	8012a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8012ade:	46c0      	nop			; (mov r8, r8)
 8012ae0:	0801d8cc 	.word	0x0801d8cc
 8012ae4:	0801d8e0 	.word	0x0801d8e0
 8012ae8:	40021000 	.word	0x40021000
 8012aec:	fd9da600 	.word	0xfd9da600
 8012af0:	02dc6c00 	.word	0x02dc6c00
 8012af4:	007a1200 	.word	0x007a1200

08012af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012af8:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012afa:	f7ff ffad 	bl	8012a58 <HAL_RCC_GetSysClockFreq>
 8012afe:	4b05      	ldr	r3, [pc, #20]	; (8012b14 <HAL_RCC_GetHCLKFreq+0x1c>)
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	061b      	lsls	r3, r3, #24
 8012b04:	0f1b      	lsrs	r3, r3, #28
 8012b06:	4a04      	ldr	r2, [pc, #16]	; (8012b18 <HAL_RCC_GetHCLKFreq+0x20>)
 8012b08:	5cd3      	ldrb	r3, [r2, r3]
 8012b0a:	40d8      	lsrs	r0, r3
 8012b0c:	4b03      	ldr	r3, [pc, #12]	; (8012b1c <HAL_RCC_GetHCLKFreq+0x24>)
 8012b0e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012b10:	bd10      	pop	{r4, pc}
 8012b12:	46c0      	nop			; (mov r8, r8)
 8012b14:	40021000 	.word	0x40021000
 8012b18:	0801d8f4 	.word	0x0801d8f4
 8012b1c:	20000090 	.word	0x20000090

08012b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012b20:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012b22:	f7ff ffe9 	bl	8012af8 <HAL_RCC_GetHCLKFreq>
 8012b26:	4b04      	ldr	r3, [pc, #16]	; (8012b38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	055b      	lsls	r3, r3, #21
 8012b2c:	0f5b      	lsrs	r3, r3, #29
 8012b2e:	4a03      	ldr	r2, [pc, #12]	; (8012b3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012b30:	5cd3      	ldrb	r3, [r2, r3]
 8012b32:	40d8      	lsrs	r0, r3
}    
 8012b34:	bd10      	pop	{r4, pc}
 8012b36:	46c0      	nop			; (mov r8, r8)
 8012b38:	40021000 	.word	0x40021000
 8012b3c:	0801d8f4 	.word	0x0801d8f4

08012b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b42:	46c6      	mov	lr, r8
 8012b44:	b500      	push	{lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012b4a:	6803      	ldr	r3, [r0, #0]
 8012b4c:	03db      	lsls	r3, r3, #15
 8012b4e:	d507      	bpl.n	8012b60 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012b50:	4b43      	ldr	r3, [pc, #268]	; (8012c60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012b52:	6a1b      	ldr	r3, [r3, #32]
 8012b54:	6842      	ldr	r2, [r0, #4]
 8012b56:	4053      	eors	r3, r2
 8012b58:	22c0      	movs	r2, #192	; 0xc0
 8012b5a:	0092      	lsls	r2, r2, #2
 8012b5c:	4213      	tst	r3, r2
 8012b5e:	d136      	bne.n	8012bce <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012b60:	6823      	ldr	r3, [r4, #0]
 8012b62:	07db      	lsls	r3, r3, #31
 8012b64:	d506      	bpl.n	8012b74 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012b66:	4a3e      	ldr	r2, [pc, #248]	; (8012c60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012b68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012b6a:	2103      	movs	r1, #3
 8012b6c:	438b      	bics	r3, r1
 8012b6e:	68a1      	ldr	r1, [r4, #8]
 8012b70:	430b      	orrs	r3, r1
 8012b72:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012b74:	6823      	ldr	r3, [r4, #0]
 8012b76:	079b      	lsls	r3, r3, #30
 8012b78:	d506      	bpl.n	8012b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012b7a:	4a39      	ldr	r2, [pc, #228]	; (8012c60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012b7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012b7e:	4939      	ldr	r1, [pc, #228]	; (8012c64 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012b80:	400b      	ands	r3, r1
 8012b82:	68e1      	ldr	r1, [r4, #12]
 8012b84:	430b      	orrs	r3, r1
 8012b86:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012b88:	6823      	ldr	r3, [r4, #0]
 8012b8a:	035b      	lsls	r3, r3, #13
 8012b8c:	d506      	bpl.n	8012b9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012b8e:	4a34      	ldr	r2, [pc, #208]	; (8012c60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012b90:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012b92:	4935      	ldr	r1, [pc, #212]	; (8012c68 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012b94:	400b      	ands	r3, r1
 8012b96:	6921      	ldr	r1, [r4, #16]
 8012b98:	430b      	orrs	r3, r1
 8012b9a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012b9c:	6823      	ldr	r3, [r4, #0]
 8012b9e:	069b      	lsls	r3, r3, #26
 8012ba0:	d506      	bpl.n	8012bb0 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012ba2:	4a2f      	ldr	r2, [pc, #188]	; (8012c60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012ba4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012ba6:	2110      	movs	r1, #16
 8012ba8:	438b      	bics	r3, r1
 8012baa:	6961      	ldr	r1, [r4, #20]
 8012bac:	430b      	orrs	r3, r1
 8012bae:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012bb0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012bb2:	6823      	ldr	r3, [r4, #0]
 8012bb4:	055b      	lsls	r3, r3, #21
 8012bb6:	d506      	bpl.n	8012bc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012bb8:	4a29      	ldr	r2, [pc, #164]	; (8012c60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012bba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012bbc:	2140      	movs	r1, #64	; 0x40
 8012bbe:	438b      	bics	r3, r1
 8012bc0:	69a1      	ldr	r1, [r4, #24]
 8012bc2:	430b      	orrs	r3, r1
 8012bc4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8012bc6:	b002      	add	sp, #8
 8012bc8:	bc80      	pop	{r7}
 8012bca:	46b8      	mov	r8, r7
 8012bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8012bce:	4a24      	ldr	r2, [pc, #144]	; (8012c60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012bd0:	69d1      	ldr	r1, [r2, #28]
 8012bd2:	2080      	movs	r0, #128	; 0x80
 8012bd4:	0540      	lsls	r0, r0, #21
 8012bd6:	4301      	orrs	r1, r0
 8012bd8:	61d1      	str	r1, [r2, #28]
 8012bda:	69d3      	ldr	r3, [r2, #28]
 8012bdc:	4003      	ands	r3, r0
 8012bde:	9301      	str	r3, [sp, #4]
 8012be0:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012be2:	4a22      	ldr	r2, [pc, #136]	; (8012c6c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012be4:	6811      	ldr	r1, [r2, #0]
 8012be6:	2380      	movs	r3, #128	; 0x80
 8012be8:	005b      	lsls	r3, r3, #1
 8012bea:	430b      	orrs	r3, r1
 8012bec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012bee:	f7fd fe8f 	bl	8010910 <HAL_GetTick>
 8012bf2:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012bf4:	4f1d      	ldr	r7, [pc, #116]	; (8012c6c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012bf6:	2680      	movs	r6, #128	; 0x80
 8012bf8:	0076      	lsls	r6, r6, #1
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	4233      	tst	r3, r6
 8012bfe:	d106      	bne.n	8012c0e <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012c00:	f7fd fe86 	bl	8010910 <HAL_GetTick>
 8012c04:	1b40      	subs	r0, r0, r5
 8012c06:	2864      	cmp	r0, #100	; 0x64
 8012c08:	d9f7      	bls.n	8012bfa <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8012c0a:	2003      	movs	r0, #3
 8012c0c:	e7db      	b.n	8012bc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012c0e:	4b14      	ldr	r3, [pc, #80]	; (8012c60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c10:	6a18      	ldr	r0, [r3, #32]
 8012c12:	4a17      	ldr	r2, [pc, #92]	; (8012c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012c14:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8012c16:	6a1d      	ldr	r5, [r3, #32]
 8012c18:	2180      	movs	r1, #128	; 0x80
 8012c1a:	0249      	lsls	r1, r1, #9
 8012c1c:	4329      	orrs	r1, r5
 8012c1e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012c20:	6a19      	ldr	r1, [r3, #32]
 8012c22:	4d14      	ldr	r5, [pc, #80]	; (8012c74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012c24:	4029      	ands	r1, r5
 8012c26:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012c28:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012c2a:	0783      	lsls	r3, r0, #30
 8012c2c:	d407      	bmi.n	8012c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012c2e:	4a0c      	ldr	r2, [pc, #48]	; (8012c60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c30:	6a13      	ldr	r3, [r2, #32]
 8012c32:	490f      	ldr	r1, [pc, #60]	; (8012c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012c34:	400b      	ands	r3, r1
 8012c36:	6861      	ldr	r1, [r4, #4]
 8012c38:	430b      	orrs	r3, r1
 8012c3a:	6213      	str	r3, [r2, #32]
 8012c3c:	e790      	b.n	8012b60 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8012c3e:	f7fd fe67 	bl	8010910 <HAL_GetTick>
 8012c42:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c44:	4f06      	ldr	r7, [pc, #24]	; (8012c60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c46:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012c48:	4b0b      	ldr	r3, [pc, #44]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8012c4a:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c4c:	6a3b      	ldr	r3, [r7, #32]
 8012c4e:	421e      	tst	r6, r3
 8012c50:	d1ed      	bne.n	8012c2e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012c52:	f7fd fe5d 	bl	8010910 <HAL_GetTick>
 8012c56:	1b40      	subs	r0, r0, r5
 8012c58:	4540      	cmp	r0, r8
 8012c5a:	d9f7      	bls.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            return HAL_TIMEOUT;
 8012c5c:	2003      	movs	r0, #3
 8012c5e:	e7b2      	b.n	8012bc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8012c60:	40021000 	.word	0x40021000
 8012c64:	fffcffff 	.word	0xfffcffff
 8012c68:	fff3ffff 	.word	0xfff3ffff
 8012c6c:	40007000 	.word	0x40007000
 8012c70:	fffffcff 	.word	0xfffffcff
 8012c74:	fffeffff 	.word	0xfffeffff
 8012c78:	00001388 	.word	0x00001388

08012c7c <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012c7c:	4770      	bx	lr

08012c7e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c80:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012c82:	6802      	ldr	r2, [r0, #0]
 8012c84:	68d3      	ldr	r3, [r2, #12]
 8012c86:	21a0      	movs	r1, #160	; 0xa0
 8012c88:	438b      	bics	r3, r1
 8012c8a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012c8c:	f7fd fe40 	bl	8010910 <HAL_GetTick>
 8012c90:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012c92:	2620      	movs	r6, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012c94:	27fa      	movs	r7, #250	; 0xfa
 8012c96:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	421e      	tst	r6, r3
 8012c9e:	d106      	bne.n	8012cae <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012ca0:	f7fd fe36 	bl	8010910 <HAL_GetTick>
 8012ca4:	1b40      	subs	r0, r0, r5
 8012ca6:	42b8      	cmp	r0, r7
 8012ca8:	d9f6      	bls.n	8012c98 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8012caa:	2003      	movs	r0, #3
 8012cac:	e000      	b.n	8012cb0 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8012cae:	2000      	movs	r0, #0
}
 8012cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012cb2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cb4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012cb6:	6803      	ldr	r3, [r0, #0]
 8012cb8:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012cba:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012cbc:	0652      	lsls	r2, r2, #25
 8012cbe:	d500      	bpl.n	8012cc2 <RTC_EnterInitMode+0x10>
}
 8012cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	4252      	negs	r2, r2
 8012cc6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012cc8:	f7fd fe22 	bl	8010910 <HAL_GetTick>
 8012ccc:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012cce:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012cd0:	27fa      	movs	r7, #250	; 0xfa
 8012cd2:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012cd4:	6823      	ldr	r3, [r4, #0]
 8012cd6:	68db      	ldr	r3, [r3, #12]
 8012cd8:	421e      	tst	r6, r3
 8012cda:	d106      	bne.n	8012cea <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012cdc:	f7fd fe18 	bl	8010910 <HAL_GetTick>
 8012ce0:	1b40      	subs	r0, r0, r5
 8012ce2:	42b8      	cmp	r0, r7
 8012ce4:	d9f6      	bls.n	8012cd4 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8012ce6:	2003      	movs	r0, #3
 8012ce8:	e7ea      	b.n	8012cc0 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012cea:	2000      	movs	r0, #0
 8012cec:	e7e8      	b.n	8012cc0 <RTC_EnterInitMode+0xe>
	...

08012cf0 <HAL_RTC_Init>:
{
 8012cf0:	b570      	push	{r4, r5, r6, lr}
 8012cf2:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012cf4:	d046      	beq.n	8012d84 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012cf6:	7f43      	ldrb	r3, [r0, #29]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d013      	beq.n	8012d24 <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012cfc:	2302      	movs	r3, #2
 8012cfe:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012d00:	6823      	ldr	r3, [r4, #0]
 8012d02:	22ca      	movs	r2, #202	; 0xca
 8012d04:	625a      	str	r2, [r3, #36]	; 0x24
 8012d06:	6823      	ldr	r3, [r4, #0]
 8012d08:	3a77      	subs	r2, #119	; 0x77
 8012d0a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012d0c:	0020      	movs	r0, r4
 8012d0e:	f7ff ffd0 	bl	8012cb2 <RTC_EnterInitMode>
 8012d12:	2800      	cmp	r0, #0
 8012d14:	d00a      	beq.n	8012d2c <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012d16:	6823      	ldr	r3, [r4, #0]
 8012d18:	22ff      	movs	r2, #255	; 0xff
 8012d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012d1c:	2304      	movs	r3, #4
 8012d1e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012d20:	2001      	movs	r0, #1
}
 8012d22:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012d24:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012d26:	f7ff ffa9 	bl	8012c7c <HAL_RTC_MspInit>
 8012d2a:	e7e7      	b.n	8012cfc <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012d2c:	6822      	ldr	r2, [r4, #0]
 8012d2e:	6893      	ldr	r3, [r2, #8]
 8012d30:	4915      	ldr	r1, [pc, #84]	; (8012d88 <HAL_RTC_Init+0x98>)
 8012d32:	400b      	ands	r3, r1
 8012d34:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012d36:	6822      	ldr	r2, [r4, #0]
 8012d38:	6891      	ldr	r1, [r2, #8]
 8012d3a:	6863      	ldr	r3, [r4, #4]
 8012d3c:	6925      	ldr	r5, [r4, #16]
 8012d3e:	432b      	orrs	r3, r5
 8012d40:	6965      	ldr	r5, [r4, #20]
 8012d42:	432b      	orrs	r3, r5
 8012d44:	430b      	orrs	r3, r1
 8012d46:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012d48:	6823      	ldr	r3, [r4, #0]
 8012d4a:	68e2      	ldr	r2, [r4, #12]
 8012d4c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012d4e:	6822      	ldr	r2, [r4, #0]
 8012d50:	6911      	ldr	r1, [r2, #16]
 8012d52:	68a3      	ldr	r3, [r4, #8]
 8012d54:	041b      	lsls	r3, r3, #16
 8012d56:	430b      	orrs	r3, r1
 8012d58:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012d5a:	6822      	ldr	r2, [r4, #0]
 8012d5c:	68d3      	ldr	r3, [r2, #12]
 8012d5e:	2180      	movs	r1, #128	; 0x80
 8012d60:	438b      	bics	r3, r1
 8012d62:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012d64:	6822      	ldr	r2, [r4, #0]
 8012d66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012d68:	4908      	ldr	r1, [pc, #32]	; (8012d8c <HAL_RTC_Init+0x9c>)
 8012d6a:	400b      	ands	r3, r1
 8012d6c:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012d6e:	6822      	ldr	r2, [r4, #0]
 8012d70:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012d72:	69a1      	ldr	r1, [r4, #24]
 8012d74:	430b      	orrs	r3, r1
 8012d76:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012d78:	6823      	ldr	r3, [r4, #0]
 8012d7a:	22ff      	movs	r2, #255	; 0xff
 8012d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012d7e:	2301      	movs	r3, #1
 8012d80:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8012d82:	e7ce      	b.n	8012d22 <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 8012d84:	2001      	movs	r0, #1
 8012d86:	e7cc      	b.n	8012d22 <HAL_RTC_Init+0x32>
 8012d88:	ff8fffbf 	.word	0xff8fffbf
 8012d8c:	fffbffff 	.word	0xfffbffff

08012d90 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8012d90:	2809      	cmp	r0, #9
 8012d92:	d909      	bls.n	8012da8 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8012d94:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8012d96:	3301      	adds	r3, #1
    Value -= 10;
 8012d98:	380a      	subs	r0, #10
 8012d9a:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012d9c:	2809      	cmp	r0, #9
 8012d9e:	d8fa      	bhi.n	8012d96 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012da0:	011b      	lsls	r3, r3, #4
 8012da2:	4318      	orrs	r0, r3
 8012da4:	b2c0      	uxtb	r0, r0
}
 8012da6:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8012da8:	2300      	movs	r3, #0
 8012daa:	e7f9      	b.n	8012da0 <RTC_ByteToBcd2+0x10>

08012dac <HAL_RTC_SetTime>:
{
 8012dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dae:	0004      	movs	r4, r0
 8012db0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012db2:	7f03      	ldrb	r3, [r0, #28]
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	d100      	bne.n	8012dba <HAL_RTC_SetTime+0xe>
 8012db8:	e072      	b.n	8012ea0 <HAL_RTC_SetTime+0xf4>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012dc2:	2a00      	cmp	r2, #0
 8012dc4:	d144      	bne.n	8012e50 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012dc6:	6803      	ldr	r3, [r0, #0]
 8012dc8:	689b      	ldr	r3, [r3, #8]
 8012dca:	065b      	lsls	r3, r3, #25
 8012dcc:	d401      	bmi.n	8012dd2 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012dd2:	7830      	ldrb	r0, [r6, #0]
 8012dd4:	f7ff ffdc 	bl	8012d90 <RTC_ByteToBcd2>
 8012dd8:	0005      	movs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012dda:	7870      	ldrb	r0, [r6, #1]
 8012ddc:	f7ff ffd8 	bl	8012d90 <RTC_ByteToBcd2>
 8012de0:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012de2:	78b0      	ldrb	r0, [r6, #2]
 8012de4:	f7ff ffd4 	bl	8012d90 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012de8:	7a33      	ldrb	r3, [r6, #8]
 8012dea:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012dec:	4303      	orrs	r3, r0
 8012dee:	042d      	lsls	r5, r5, #16
 8012df0:	431d      	orrs	r5, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012df2:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012df4:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012df6:	6823      	ldr	r3, [r4, #0]
 8012df8:	22ca      	movs	r2, #202	; 0xca
 8012dfa:	625a      	str	r2, [r3, #36]	; 0x24
 8012dfc:	6823      	ldr	r3, [r4, #0]
 8012dfe:	3a77      	subs	r2, #119	; 0x77
 8012e00:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012e02:	0020      	movs	r0, r4
 8012e04:	f7ff ff55 	bl	8012cb2 <RTC_EnterInitMode>
 8012e08:	1e07      	subs	r7, r0, #0
 8012e0a:	d132      	bne.n	8012e72 <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012e0c:	6823      	ldr	r3, [r4, #0]
 8012e0e:	4825      	ldr	r0, [pc, #148]	; (8012ea4 <HAL_RTC_SetTime+0xf8>)
 8012e10:	4005      	ands	r5, r0
 8012e12:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012e14:	6822      	ldr	r2, [r4, #0]
 8012e16:	6893      	ldr	r3, [r2, #8]
 8012e18:	4923      	ldr	r1, [pc, #140]	; (8012ea8 <HAL_RTC_SetTime+0xfc>)
 8012e1a:	400b      	ands	r3, r1
 8012e1c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012e1e:	6822      	ldr	r2, [r4, #0]
 8012e20:	6891      	ldr	r1, [r2, #8]
 8012e22:	68f3      	ldr	r3, [r6, #12]
 8012e24:	6930      	ldr	r0, [r6, #16]
 8012e26:	4303      	orrs	r3, r0
 8012e28:	430b      	orrs	r3, r1
 8012e2a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012e2c:	6822      	ldr	r2, [r4, #0]
 8012e2e:	68d3      	ldr	r3, [r2, #12]
 8012e30:	2180      	movs	r1, #128	; 0x80
 8012e32:	438b      	bics	r3, r1
 8012e34:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012e36:	6823      	ldr	r3, [r4, #0]
 8012e38:	689b      	ldr	r3, [r3, #8]
 8012e3a:	069b      	lsls	r3, r3, #26
 8012e3c:	d522      	bpl.n	8012e84 <HAL_RTC_SetTime+0xd8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012e3e:	6823      	ldr	r3, [r4, #0]
 8012e40:	22ff      	movs	r2, #255	; 0xff
 8012e42:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012e44:	2301      	movs	r3, #1
 8012e46:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012e48:	2300      	movs	r3, #0
 8012e4a:	7723      	strb	r3, [r4, #28]
}
 8012e4c:	0038      	movs	r0, r7
 8012e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012e50:	6803      	ldr	r3, [r0, #0]
 8012e52:	689b      	ldr	r3, [r3, #8]
 8012e54:	065b      	lsls	r3, r3, #25
 8012e56:	d401      	bmi.n	8012e5c <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012e5c:	7835      	ldrb	r5, [r6, #0]
 8012e5e:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012e60:	7870      	ldrb	r0, [r6, #1]
 8012e62:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012e64:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012e66:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012e68:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012e6a:	7a30      	ldrb	r0, [r6, #8]
 8012e6c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012e6e:	4305      	orrs	r5, r0
 8012e70:	e7c1      	b.n	8012df6 <HAL_RTC_SetTime+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012e72:	6823      	ldr	r3, [r4, #0]
 8012e74:	22ff      	movs	r2, #255	; 0xff
 8012e76:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012e78:	2304      	movs	r3, #4
 8012e7a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012e80:	2701      	movs	r7, #1
 8012e82:	e7e3      	b.n	8012e4c <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012e84:	0020      	movs	r0, r4
 8012e86:	f7ff fefa 	bl	8012c7e <HAL_RTC_WaitForSynchro>
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	d0d7      	beq.n	8012e3e <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012e8e:	6823      	ldr	r3, [r4, #0]
 8012e90:	22ff      	movs	r2, #255	; 0xff
 8012e92:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012e94:	2304      	movs	r3, #4
 8012e96:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012e98:	2300      	movs	r3, #0
 8012e9a:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012e9c:	2701      	movs	r7, #1
 8012e9e:	e7d5      	b.n	8012e4c <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8012ea0:	2702      	movs	r7, #2
 8012ea2:	e7d3      	b.n	8012e4c <HAL_RTC_SetTime+0xa0>
 8012ea4:	007f7f7f 	.word	0x007f7f7f
 8012ea8:	fffbffff 	.word	0xfffbffff

08012eac <HAL_RTC_SetDate>:
{
 8012eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eae:	46c6      	mov	lr, r8
 8012eb0:	b500      	push	{lr}
 8012eb2:	0004      	movs	r4, r0
 8012eb4:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012eb6:	7f03      	ldrb	r3, [r0, #28]
 8012eb8:	2b01      	cmp	r3, #1
 8012eba:	d037      	beq.n	8012f2c <HAL_RTC_SetDate+0x80>
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012ec0:	3301      	adds	r3, #1
 8012ec2:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012ec4:	2a00      	cmp	r2, #0
 8012ec6:	d133      	bne.n	8012f30 <HAL_RTC_SetDate+0x84>
 8012ec8:	784b      	ldrb	r3, [r1, #1]
 8012eca:	06da      	lsls	r2, r3, #27
 8012ecc:	d503      	bpl.n	8012ed6 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012ece:	2210      	movs	r2, #16
 8012ed0:	4393      	bics	r3, r2
 8012ed2:	330a      	adds	r3, #10
 8012ed4:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012ed6:	78f0      	ldrb	r0, [r6, #3]
 8012ed8:	f7ff ff5a 	bl	8012d90 <RTC_ByteToBcd2>
 8012edc:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012ede:	7870      	ldrb	r0, [r6, #1]
 8012ee0:	f7ff ff56 	bl	8012d90 <RTC_ByteToBcd2>
 8012ee4:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012ee6:	78b0      	ldrb	r0, [r6, #2]
 8012ee8:	f7ff ff52 	bl	8012d90 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012eec:	7833      	ldrb	r3, [r6, #0]
 8012eee:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012ef0:	4303      	orrs	r3, r0
 8012ef2:	042d      	lsls	r5, r5, #16
 8012ef4:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012ef6:	4643      	mov	r3, r8
 8012ef8:	0218      	lsls	r0, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012efa:	4305      	orrs	r5, r0
 8012efc:	e022      	b.n	8012f44 <HAL_RTC_SetDate+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012efe:	6823      	ldr	r3, [r4, #0]
 8012f00:	22ff      	movs	r2, #255	; 0xff
 8012f02:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012f04:	2304      	movs	r3, #4
 8012f06:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012f08:	2300      	movs	r3, #0
 8012f0a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012f0c:	2601      	movs	r6, #1
 8012f0e:	e038      	b.n	8012f82 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012f10:	0020      	movs	r0, r4
 8012f12:	f7ff feb4 	bl	8012c7e <HAL_RTC_WaitForSynchro>
 8012f16:	2800      	cmp	r0, #0
 8012f18:	d02c      	beq.n	8012f74 <HAL_RTC_SetDate+0xc8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012f1a:	6823      	ldr	r3, [r4, #0]
 8012f1c:	22ff      	movs	r2, #255	; 0xff
 8012f1e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012f20:	2304      	movs	r3, #4
 8012f22:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012f24:	2300      	movs	r3, #0
 8012f26:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012f28:	2601      	movs	r6, #1
 8012f2a:	e02a      	b.n	8012f82 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8012f2c:	2602      	movs	r6, #2
 8012f2e:	e028      	b.n	8012f82 <HAL_RTC_SetDate+0xd6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012f30:	78cd      	ldrb	r5, [r1, #3]
 8012f32:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012f34:	7848      	ldrb	r0, [r1, #1]
 8012f36:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012f38:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8012f3a:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8012f3c:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012f3e:	7808      	ldrb	r0, [r1, #0]
 8012f40:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012f42:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012f44:	6823      	ldr	r3, [r4, #0]
 8012f46:	22ca      	movs	r2, #202	; 0xca
 8012f48:	625a      	str	r2, [r3, #36]	; 0x24
 8012f4a:	6823      	ldr	r3, [r4, #0]
 8012f4c:	3a77      	subs	r2, #119	; 0x77
 8012f4e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012f50:	0020      	movs	r0, r4
 8012f52:	f7ff feae 	bl	8012cb2 <RTC_EnterInitMode>
 8012f56:	1e06      	subs	r6, r0, #0
 8012f58:	d1d1      	bne.n	8012efe <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012f5a:	6823      	ldr	r3, [r4, #0]
 8012f5c:	480b      	ldr	r0, [pc, #44]	; (8012f8c <HAL_RTC_SetDate+0xe0>)
 8012f5e:	4005      	ands	r5, r0
 8012f60:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012f62:	6822      	ldr	r2, [r4, #0]
 8012f64:	68d3      	ldr	r3, [r2, #12]
 8012f66:	2180      	movs	r1, #128	; 0x80
 8012f68:	438b      	bics	r3, r1
 8012f6a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012f6c:	6823      	ldr	r3, [r4, #0]
 8012f6e:	689b      	ldr	r3, [r3, #8]
 8012f70:	069b      	lsls	r3, r3, #26
 8012f72:	d5cd      	bpl.n	8012f10 <HAL_RTC_SetDate+0x64>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012f74:	6823      	ldr	r3, [r4, #0]
 8012f76:	22ff      	movs	r2, #255	; 0xff
 8012f78:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012f7e:	2300      	movs	r3, #0
 8012f80:	7723      	strb	r3, [r4, #28]
}
 8012f82:	0030      	movs	r0, r6
 8012f84:	bc80      	pop	{r7}
 8012f86:	46b8      	mov	r8, r7
 8012f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f8a:	46c0      	nop			; (mov r8, r8)
 8012f8c:	00ffff3f 	.word	0x00ffff3f

08012f90 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012f90:	0003      	movs	r3, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012f92:	0902      	lsrs	r2, r0, #4
 8012f94:	0090      	lsls	r0, r2, #2
 8012f96:	1880      	adds	r0, r0, r2
 8012f98:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012f9a:	220f      	movs	r2, #15
 8012f9c:	4013      	ands	r3, r2
 8012f9e:	18c0      	adds	r0, r0, r3
 8012fa0:	b2c0      	uxtb	r0, r0
}
 8012fa2:	4770      	bx	lr

08012fa4 <HAL_RTC_GetTime>:
{
 8012fa4:	b570      	push	{r4, r5, r6, lr}
 8012fa6:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012fa8:	6803      	ldr	r3, [r0, #0]
 8012faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fac:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012fae:	6803      	ldr	r3, [r0, #0]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	490e      	ldr	r1, [pc, #56]	; (8012fec <HAL_RTC_GetTime+0x48>)
 8012fb4:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012fb6:	0c19      	lsrs	r1, r3, #16
 8012fb8:	203f      	movs	r0, #63	; 0x3f
 8012fba:	4008      	ands	r0, r1
 8012fbc:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012fbe:	0a1e      	lsrs	r6, r3, #8
 8012fc0:	b2f6      	uxtb	r6, r6
 8012fc2:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012fc4:	b2dd      	uxtb	r5, r3
 8012fc6:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012fc8:	2340      	movs	r3, #64	; 0x40
 8012fca:	400b      	ands	r3, r1
 8012fcc:	7223      	strb	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8012fce:	2a00      	cmp	r2, #0
 8012fd0:	d10a      	bne.n	8012fe8 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012fd2:	f7ff ffdd 	bl	8012f90 <RTC_Bcd2ToByte>
 8012fd6:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012fd8:	0030      	movs	r0, r6
 8012fda:	f7ff ffd9 	bl	8012f90 <RTC_Bcd2ToByte>
 8012fde:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012fe0:	0028      	movs	r0, r5
 8012fe2:	f7ff ffd5 	bl	8012f90 <RTC_Bcd2ToByte>
 8012fe6:	70a0      	strb	r0, [r4, #2]
}
 8012fe8:	2000      	movs	r0, #0
 8012fea:	bd70      	pop	{r4, r5, r6, pc}
 8012fec:	007f7f7f 	.word	0x007f7f7f

08012ff0 <HAL_RTC_GetDate>:
{
 8012ff0:	b570      	push	{r4, r5, r6, lr}
 8012ff2:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012ff4:	6803      	ldr	r3, [r0, #0]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	490d      	ldr	r1, [pc, #52]	; (8013030 <HAL_RTC_GetDate+0x40>)
 8012ffa:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012ffc:	0c18      	lsrs	r0, r3, #16
 8012ffe:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8013000:	04dd      	lsls	r5, r3, #19
 8013002:	0eed      	lsrs	r5, r5, #27
 8013004:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8013006:	b2de      	uxtb	r6, r3
 8013008:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801300a:	041b      	lsls	r3, r3, #16
 801300c:	0f5b      	lsrs	r3, r3, #29
 801300e:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8013010:	2a00      	cmp	r2, #0
 8013012:	d10a      	bne.n	801302a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013014:	f7ff ffbc 	bl	8012f90 <RTC_Bcd2ToByte>
 8013018:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801301a:	0028      	movs	r0, r5
 801301c:	f7ff ffb8 	bl	8012f90 <RTC_Bcd2ToByte>
 8013020:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8013022:	0030      	movs	r0, r6
 8013024:	f7ff ffb4 	bl	8012f90 <RTC_Bcd2ToByte>
 8013028:	70a0      	strb	r0, [r4, #2]
}
 801302a:	2000      	movs	r0, #0
 801302c:	bd70      	pop	{r4, r5, r6, pc}
 801302e:	46c0      	nop			; (mov r8, r8)
 8013030:	00ffff3f 	.word	0x00ffff3f

08013034 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013034:	6803      	ldr	r3, [r0, #0]
 8013036:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013038:	0089      	lsls	r1, r1, #2
 801303a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801303c:	600a      	str	r2, [r1, #0]
}
 801303e:	4770      	bx	lr

08013040 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013040:	6803      	ldr	r3, [r0, #0]
 8013042:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013044:	0089      	lsls	r1, r1, #2
 8013046:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8013048:	6808      	ldr	r0, [r1, #0]
}
 801304a:	4770      	bx	lr

0801304c <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801304c:	4770      	bx	lr

0801304e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801304e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8013050:	2239      	movs	r2, #57	; 0x39
 8013052:	2302      	movs	r3, #2
 8013054:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013056:	6804      	ldr	r4, [r0, #0]
 8013058:	6823      	ldr	r3, [r4, #0]
 801305a:	2101      	movs	r1, #1
 801305c:	430b      	orrs	r3, r1
 801305e:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8013060:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8013062:	2000      	movs	r0, #0
 8013064:	bd10      	pop	{r4, pc}
	...

08013068 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8013068:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801306a:	4a2f      	ldr	r2, [pc, #188]	; (8013128 <TIM_Base_SetConfig+0xc0>)
 801306c:	4290      	cmp	r0, r2
 801306e:	d044      	beq.n	80130fa <TIM_Base_SetConfig+0x92>
 8013070:	2280      	movs	r2, #128	; 0x80
 8013072:	05d2      	lsls	r2, r2, #23
 8013074:	4290      	cmp	r0, r2
 8013076:	d032      	beq.n	80130de <TIM_Base_SetConfig+0x76>
 8013078:	4a2c      	ldr	r2, [pc, #176]	; (801312c <TIM_Base_SetConfig+0xc4>)
 801307a:	4290      	cmp	r0, r2
 801307c:	d04f      	beq.n	801311e <TIM_Base_SetConfig+0xb6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801307e:	4a2c      	ldr	r2, [pc, #176]	; (8013130 <TIM_Base_SetConfig+0xc8>)
 8013080:	4290      	cmp	r0, r2
 8013082:	d030      	beq.n	80130e6 <TIM_Base_SetConfig+0x7e>
 8013084:	4a2b      	ldr	r2, [pc, #172]	; (8013134 <TIM_Base_SetConfig+0xcc>)
 8013086:	4290      	cmp	r0, r2
 8013088:	d01f      	beq.n	80130ca <TIM_Base_SetConfig+0x62>
 801308a:	4a2b      	ldr	r2, [pc, #172]	; (8013138 <TIM_Base_SetConfig+0xd0>)
 801308c:	4290      	cmp	r0, r2
 801308e:	d012      	beq.n	80130b6 <TIM_Base_SetConfig+0x4e>
 8013090:	4a2a      	ldr	r2, [pc, #168]	; (801313c <TIM_Base_SetConfig+0xd4>)
 8013092:	4290      	cmp	r0, r2
 8013094:	d005      	beq.n	80130a2 <TIM_Base_SetConfig+0x3a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8013096:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013098:	688b      	ldr	r3, [r1, #8]
 801309a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801309c:	680b      	ldr	r3, [r1, #0]
 801309e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80130a0:	e03a      	b.n	8013118 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 80130a2:	4a27      	ldr	r2, [pc, #156]	; (8013140 <TIM_Base_SetConfig+0xd8>)
 80130a4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80130a6:	68ca      	ldr	r2, [r1, #12]
 80130a8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80130aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80130ac:	688b      	ldr	r3, [r1, #8]
 80130ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80130b0:	680b      	ldr	r3, [r1, #0]
 80130b2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80130b4:	e02e      	b.n	8013114 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 80130b6:	4a22      	ldr	r2, [pc, #136]	; (8013140 <TIM_Base_SetConfig+0xd8>)
 80130b8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80130ba:	68ca      	ldr	r2, [r1, #12]
 80130bc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80130be:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80130c0:	688b      	ldr	r3, [r1, #8]
 80130c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80130c4:	680b      	ldr	r3, [r1, #0]
 80130c6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80130c8:	e024      	b.n	8013114 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 80130ca:	4a1d      	ldr	r2, [pc, #116]	; (8013140 <TIM_Base_SetConfig+0xd8>)
 80130cc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80130ce:	68ca      	ldr	r2, [r1, #12]
 80130d0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80130d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80130d4:	688b      	ldr	r3, [r1, #8]
 80130d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80130d8:	680b      	ldr	r3, [r1, #0]
 80130da:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80130dc:	e01a      	b.n	8013114 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80130de:	2270      	movs	r2, #112	; 0x70
 80130e0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80130e2:	684a      	ldr	r2, [r1, #4]
 80130e4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80130e6:	4a16      	ldr	r2, [pc, #88]	; (8013140 <TIM_Base_SetConfig+0xd8>)
 80130e8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80130ea:	68ca      	ldr	r2, [r1, #12]
 80130ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80130ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80130f0:	688b      	ldr	r3, [r1, #8]
 80130f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80130f4:	680b      	ldr	r3, [r1, #0]
 80130f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80130f8:	e00e      	b.n	8013118 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80130fa:	2270      	movs	r2, #112	; 0x70
 80130fc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80130fe:	684a      	ldr	r2, [r1, #4]
 8013100:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8013102:	4a0f      	ldr	r2, [pc, #60]	; (8013140 <TIM_Base_SetConfig+0xd8>)
 8013104:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013106:	68ca      	ldr	r2, [r1, #12]
 8013108:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801310a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801310c:	688b      	ldr	r3, [r1, #8]
 801310e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013110:	680b      	ldr	r3, [r1, #0]
 8013112:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013114:	690b      	ldr	r3, [r1, #16]
 8013116:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8013118:	2301      	movs	r3, #1
 801311a:	6143      	str	r3, [r0, #20]
}
 801311c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801311e:	2270      	movs	r2, #112	; 0x70
 8013120:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013122:	684a      	ldr	r2, [r1, #4]
 8013124:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013126:	e7de      	b.n	80130e6 <TIM_Base_SetConfig+0x7e>
 8013128:	40012c00 	.word	0x40012c00
 801312c:	40000400 	.word	0x40000400
 8013130:	40002000 	.word	0x40002000
 8013134:	40014000 	.word	0x40014000
 8013138:	40014400 	.word	0x40014400
 801313c:	40014800 	.word	0x40014800
 8013140:	fffffcff 	.word	0xfffffcff

08013144 <HAL_TIM_Base_Init>:
{
 8013144:	b570      	push	{r4, r5, r6, lr}
 8013146:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8013148:	d014      	beq.n	8013174 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801314a:	2339      	movs	r3, #57	; 0x39
 801314c:	5cc3      	ldrb	r3, [r0, r3]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d00a      	beq.n	8013168 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8013152:	2539      	movs	r5, #57	; 0x39
 8013154:	2302      	movs	r3, #2
 8013156:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013158:	0021      	movs	r1, r4
 801315a:	c901      	ldmia	r1!, {r0}
 801315c:	f7ff ff84 	bl	8013068 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8013160:	2301      	movs	r3, #1
 8013162:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8013164:	2000      	movs	r0, #0
}
 8013166:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8013168:	3338      	adds	r3, #56	; 0x38
 801316a:	2200      	movs	r2, #0
 801316c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 801316e:	f7ff ff6d 	bl	801304c <HAL_TIM_Base_MspInit>
 8013172:	e7ee      	b.n	8013152 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8013174:	2001      	movs	r0, #1
 8013176:	e7f6      	b.n	8013166 <HAL_TIM_Base_Init+0x22>

08013178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8013178:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801317a:	2338      	movs	r3, #56	; 0x38
 801317c:	5cc3      	ldrb	r3, [r0, r3]
 801317e:	2b01      	cmp	r3, #1
 8013180:	d01e      	beq.n	80131c0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8013182:	2238      	movs	r2, #56	; 0x38
 8013184:	2501      	movs	r5, #1
 8013186:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8013188:	2439      	movs	r4, #57	; 0x39
 801318a:	2302      	movs	r3, #2
 801318c:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801318e:	6806      	ldr	r6, [r0, #0]
 8013190:	6873      	ldr	r3, [r6, #4]
 8013192:	2770      	movs	r7, #112	; 0x70
 8013194:	43bb      	bics	r3, r7
 8013196:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8013198:	6806      	ldr	r6, [r0, #0]
 801319a:	6873      	ldr	r3, [r6, #4]
 801319c:	680f      	ldr	r7, [r1, #0]
 801319e:	433b      	orrs	r3, r7
 80131a0:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80131a2:	6806      	ldr	r6, [r0, #0]
 80131a4:	68b3      	ldr	r3, [r6, #8]
 80131a6:	2780      	movs	r7, #128	; 0x80
 80131a8:	43bb      	bics	r3, r7
 80131aa:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80131ac:	6806      	ldr	r6, [r0, #0]
 80131ae:	68b3      	ldr	r3, [r6, #8]
 80131b0:	6849      	ldr	r1, [r1, #4]
 80131b2:	430b      	orrs	r3, r1
 80131b4:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80131b6:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80131b8:	2300      	movs	r3, #0
 80131ba:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80131bc:	2000      	movs	r0, #0
}
 80131be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80131c0:	2002      	movs	r0, #2
 80131c2:	e7fc      	b.n	80131be <HAL_TIMEx_MasterConfigSynchronization+0x46>

080131c4 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80131c4:	4770      	bx	lr

080131c6 <HAL_UART_DeInit>:
{
 80131c6:	b570      	push	{r4, r5, r6, lr}
 80131c8:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80131ca:	d016      	beq.n	80131fa <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 80131cc:	2669      	movs	r6, #105	; 0x69
 80131ce:	2302      	movs	r3, #2
 80131d0:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 80131d2:	6802      	ldr	r2, [r0, #0]
 80131d4:	6813      	ldr	r3, [r2, #0]
 80131d6:	2101      	movs	r1, #1
 80131d8:	438b      	bics	r3, r1
 80131da:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 80131dc:	6803      	ldr	r3, [r0, #0]
 80131de:	2500      	movs	r5, #0
 80131e0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80131e2:	6803      	ldr	r3, [r0, #0]
 80131e4:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80131e6:	6803      	ldr	r3, [r0, #0]
 80131e8:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80131ea:	f7ff ffeb 	bl	80131c4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131ee:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 80131f0:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 80131f2:	2368      	movs	r3, #104	; 0x68
 80131f4:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 80131f6:	2000      	movs	r0, #0
}
 80131f8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80131fa:	2001      	movs	r0, #1
 80131fc:	e7fc      	b.n	80131f8 <HAL_UART_DeInit+0x32>

080131fe <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80131fe:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013200:	2369      	movs	r3, #105	; 0x69
 8013202:	5cc3      	ldrb	r3, [r0, r3]
 8013204:	2b01      	cmp	r3, #1
 8013206:	d003      	beq.n	8013210 <HAL_UART_Transmit_IT+0x12>
 8013208:	2369      	movs	r3, #105	; 0x69
 801320a:	5cc3      	ldrb	r3, [r0, r3]
 801320c:	2b22      	cmp	r3, #34	; 0x22
 801320e:	d12b      	bne.n	8013268 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8013210:	2900      	cmp	r1, #0
 8013212:	d02b      	beq.n	801326c <HAL_UART_Transmit_IT+0x6e>
 8013214:	2a00      	cmp	r2, #0
 8013216:	d02b      	beq.n	8013270 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013218:	2368      	movs	r3, #104	; 0x68
 801321a:	5cc3      	ldrb	r3, [r0, r3]
 801321c:	2b01      	cmp	r3, #1
 801321e:	d029      	beq.n	8013274 <HAL_UART_Transmit_IT+0x76>
 8013220:	2368      	movs	r3, #104	; 0x68
 8013222:	2401      	movs	r4, #1
 8013224:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 8013226:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8013228:	3b18      	subs	r3, #24
 801322a:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 801322c:	3302      	adds	r3, #2
 801322e:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013230:	2300      	movs	r3, #0
 8013232:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013234:	3369      	adds	r3, #105	; 0x69
 8013236:	5cc3      	ldrb	r3, [r0, r3]
 8013238:	2b22      	cmp	r3, #34	; 0x22
 801323a:	d011      	beq.n	8013260 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 801323c:	2369      	movs	r3, #105	; 0x69
 801323e:	2212      	movs	r2, #18
 8013240:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013242:	6802      	ldr	r2, [r0, #0]
 8013244:	6893      	ldr	r3, [r2, #8]
 8013246:	2101      	movs	r1, #1
 8013248:	430b      	orrs	r3, r1
 801324a:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801324c:	2368      	movs	r3, #104	; 0x68
 801324e:	2200      	movs	r2, #0
 8013250:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8013252:	6802      	ldr	r2, [r0, #0]
 8013254:	6813      	ldr	r3, [r2, #0]
 8013256:	317f      	adds	r1, #127	; 0x7f
 8013258:	430b      	orrs	r3, r1
 801325a:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 801325c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801325e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013260:	3347      	adds	r3, #71	; 0x47
 8013262:	2232      	movs	r2, #50	; 0x32
 8013264:	54c2      	strb	r2, [r0, r3]
 8013266:	e7ec      	b.n	8013242 <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 8013268:	2002      	movs	r0, #2
 801326a:	e7f8      	b.n	801325e <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 801326c:	2001      	movs	r0, #1
 801326e:	e7f6      	b.n	801325e <HAL_UART_Transmit_IT+0x60>
 8013270:	2001      	movs	r0, #1
 8013272:	e7f4      	b.n	801325e <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 8013274:	2002      	movs	r0, #2
 8013276:	e7f2      	b.n	801325e <HAL_UART_Transmit_IT+0x60>

08013278 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013278:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801327a:	2369      	movs	r3, #105	; 0x69
 801327c:	5cc3      	ldrb	r3, [r0, r3]
 801327e:	2b01      	cmp	r3, #1
 8013280:	d003      	beq.n	801328a <HAL_UART_Receive_IT+0x12>
 8013282:	2369      	movs	r3, #105	; 0x69
 8013284:	5cc3      	ldrb	r3, [r0, r3]
 8013286:	2b12      	cmp	r3, #18
 8013288:	d15d      	bne.n	8013346 <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 801328a:	2900      	cmp	r1, #0
 801328c:	d05d      	beq.n	801334a <HAL_UART_Receive_IT+0xd2>
 801328e:	2a00      	cmp	r2, #0
 8013290:	d05d      	beq.n	801334e <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013292:	2368      	movs	r3, #104	; 0x68
 8013294:	5cc3      	ldrb	r3, [r0, r3]
 8013296:	2b01      	cmp	r3, #1
 8013298:	d05b      	beq.n	8013352 <HAL_UART_Receive_IT+0xda>
 801329a:	2368      	movs	r3, #104	; 0x68
 801329c:	2401      	movs	r4, #1
 801329e:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 80132a0:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80132a2:	3b10      	subs	r3, #16
 80132a4:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80132a6:	3302      	adds	r3, #2
 80132a8:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80132aa:	6883      	ldr	r3, [r0, #8]
 80132ac:	2280      	movs	r2, #128	; 0x80
 80132ae:	0152      	lsls	r2, r2, #5
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d008      	beq.n	80132c6 <HAL_UART_Receive_IT+0x4e>
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d115      	bne.n	80132e4 <HAL_UART_Receive_IT+0x6c>
 80132b8:	6903      	ldr	r3, [r0, #16]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d10e      	bne.n	80132dc <HAL_UART_Receive_IT+0x64>
 80132be:	335c      	adds	r3, #92	; 0x5c
 80132c0:	22ff      	movs	r2, #255	; 0xff
 80132c2:	52c2      	strh	r2, [r0, r3]
 80132c4:	e012      	b.n	80132ec <HAL_UART_Receive_IT+0x74>
 80132c6:	6903      	ldr	r3, [r0, #16]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d103      	bne.n	80132d4 <HAL_UART_Receive_IT+0x5c>
 80132cc:	335c      	adds	r3, #92	; 0x5c
 80132ce:	4a22      	ldr	r2, [pc, #136]	; (8013358 <HAL_UART_Receive_IT+0xe0>)
 80132d0:	52c2      	strh	r2, [r0, r3]
 80132d2:	e00b      	b.n	80132ec <HAL_UART_Receive_IT+0x74>
 80132d4:	235c      	movs	r3, #92	; 0x5c
 80132d6:	22ff      	movs	r2, #255	; 0xff
 80132d8:	52c2      	strh	r2, [r0, r3]
 80132da:	e007      	b.n	80132ec <HAL_UART_Receive_IT+0x74>
 80132dc:	235c      	movs	r3, #92	; 0x5c
 80132de:	227f      	movs	r2, #127	; 0x7f
 80132e0:	52c2      	strh	r2, [r0, r3]
 80132e2:	e003      	b.n	80132ec <HAL_UART_Receive_IT+0x74>
 80132e4:	2280      	movs	r2, #128	; 0x80
 80132e6:	0552      	lsls	r2, r2, #21
 80132e8:	4293      	cmp	r3, r2
 80132ea:	d01d      	beq.n	8013328 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132ec:	2300      	movs	r3, #0
 80132ee:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80132f0:	3369      	adds	r3, #105	; 0x69
 80132f2:	5cc3      	ldrb	r3, [r0, r3]
 80132f4:	2b12      	cmp	r3, #18
 80132f6:	d022      	beq.n	801333e <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80132f8:	2369      	movs	r3, #105	; 0x69
 80132fa:	2222      	movs	r2, #34	; 0x22
 80132fc:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80132fe:	6802      	ldr	r2, [r0, #0]
 8013300:	6811      	ldr	r1, [r2, #0]
 8013302:	2380      	movs	r3, #128	; 0x80
 8013304:	005b      	lsls	r3, r3, #1
 8013306:	430b      	orrs	r3, r1
 8013308:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801330a:	6802      	ldr	r2, [r0, #0]
 801330c:	6893      	ldr	r3, [r2, #8]
 801330e:	2101      	movs	r1, #1
 8013310:	430b      	orrs	r3, r1
 8013312:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013314:	2368      	movs	r3, #104	; 0x68
 8013316:	2200      	movs	r2, #0
 8013318:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801331a:	6802      	ldr	r2, [r0, #0]
 801331c:	6813      	ldr	r3, [r2, #0]
 801331e:	311f      	adds	r1, #31
 8013320:	430b      	orrs	r3, r1
 8013322:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8013324:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013326:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8013328:	6903      	ldr	r3, [r0, #16]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d103      	bne.n	8013336 <HAL_UART_Receive_IT+0xbe>
 801332e:	335c      	adds	r3, #92	; 0x5c
 8013330:	227f      	movs	r2, #127	; 0x7f
 8013332:	52c2      	strh	r2, [r0, r3]
 8013334:	e7da      	b.n	80132ec <HAL_UART_Receive_IT+0x74>
 8013336:	235c      	movs	r3, #92	; 0x5c
 8013338:	223f      	movs	r2, #63	; 0x3f
 801333a:	52c2      	strh	r2, [r0, r3]
 801333c:	e7d6      	b.n	80132ec <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801333e:	3357      	adds	r3, #87	; 0x57
 8013340:	2232      	movs	r2, #50	; 0x32
 8013342:	54c2      	strb	r2, [r0, r3]
 8013344:	e7db      	b.n	80132fe <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 8013346:	2002      	movs	r0, #2
 8013348:	e7ed      	b.n	8013326 <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 801334a:	2001      	movs	r0, #1
 801334c:	e7eb      	b.n	8013326 <HAL_UART_Receive_IT+0xae>
 801334e:	2001      	movs	r0, #1
 8013350:	e7e9      	b.n	8013326 <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 8013352:	2002      	movs	r0, #2
 8013354:	e7e7      	b.n	8013326 <HAL_UART_Receive_IT+0xae>
 8013356:	46c0      	nop			; (mov r8, r8)
 8013358:	000001ff 	.word	0x000001ff

0801335c <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801335c:	b510      	push	{r4, lr}
 801335e:	0004      	movs	r4, r0
 8013360:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013362:	2269      	movs	r2, #105	; 0x69
 8013364:	5c82      	ldrb	r2, [r0, r2]
 8013366:	2a01      	cmp	r2, #1
 8013368:	d003      	beq.n	8013372 <HAL_UART_Transmit_DMA+0x16>
 801336a:	2269      	movs	r2, #105	; 0x69
 801336c:	5c82      	ldrb	r2, [r0, r2]
 801336e:	2a22      	cmp	r2, #34	; 0x22
 8013370:	d137      	bne.n	80133e2 <HAL_UART_Transmit_DMA+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8013372:	2900      	cmp	r1, #0
 8013374:	d037      	beq.n	80133e6 <HAL_UART_Transmit_DMA+0x8a>
 8013376:	2b00      	cmp	r3, #0
 8013378:	d037      	beq.n	80133ea <HAL_UART_Transmit_DMA+0x8e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801337a:	2268      	movs	r2, #104	; 0x68
 801337c:	5ca2      	ldrb	r2, [r4, r2]
 801337e:	2a01      	cmp	r2, #1
 8013380:	d035      	beq.n	80133ee <HAL_UART_Transmit_DMA+0x92>
 8013382:	2268      	movs	r2, #104	; 0x68
 8013384:	2001      	movs	r0, #1
 8013386:	54a0      	strb	r0, [r4, r2]

    huart->pTxBuffPtr = pData;
 8013388:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 801338a:	3a18      	subs	r2, #24
 801338c:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 801338e:	3202      	adds	r2, #2
 8013390:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013392:	2200      	movs	r2, #0
 8013394:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013396:	3269      	adds	r2, #105	; 0x69
 8013398:	5ca2      	ldrb	r2, [r4, r2]
 801339a:	2a22      	cmp	r2, #34	; 0x22
 801339c:	d01d      	beq.n	80133da <HAL_UART_Transmit_DMA+0x7e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 801339e:	2269      	movs	r2, #105	; 0x69
 80133a0:	2012      	movs	r0, #18
 80133a2:	54a0      	strb	r0, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80133a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80133a6:	4813      	ldr	r0, [pc, #76]	; (80133f4 <HAL_UART_Transmit_DMA+0x98>)
 80133a8:	6290      	str	r0, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80133aa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80133ac:	4812      	ldr	r0, [pc, #72]	; (80133f8 <HAL_UART_Transmit_DMA+0x9c>)
 80133ae:	62d0      	str	r0, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80133b0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80133b2:	4812      	ldr	r0, [pc, #72]	; (80133fc <HAL_UART_Transmit_DMA+0xa0>)
 80133b4:	6310      	str	r0, [r2, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80133b6:	6822      	ldr	r2, [r4, #0]
 80133b8:	3228      	adds	r2, #40	; 0x28
 80133ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80133bc:	f7fd ffac 	bl	8011318 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80133c0:	6823      	ldr	r3, [r4, #0]
 80133c2:	2240      	movs	r2, #64	; 0x40
 80133c4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 80133c6:	6822      	ldr	r2, [r4, #0]
 80133c8:	6893      	ldr	r3, [r2, #8]
 80133ca:	2180      	movs	r1, #128	; 0x80
 80133cc:	430b      	orrs	r3, r1
 80133ce:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80133d0:	2368      	movs	r3, #104	; 0x68
 80133d2:	2200      	movs	r2, #0
 80133d4:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 80133d6:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80133d8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80133da:	3247      	adds	r2, #71	; 0x47
 80133dc:	3031      	adds	r0, #49	; 0x31
 80133de:	54a0      	strb	r0, [r4, r2]
 80133e0:	e7e0      	b.n	80133a4 <HAL_UART_Transmit_DMA+0x48>
    return HAL_BUSY;
 80133e2:	2002      	movs	r0, #2
 80133e4:	e7f8      	b.n	80133d8 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 80133e6:	2001      	movs	r0, #1
 80133e8:	e7f6      	b.n	80133d8 <HAL_UART_Transmit_DMA+0x7c>
 80133ea:	2001      	movs	r0, #1
 80133ec:	e7f4      	b.n	80133d8 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 80133ee:	2002      	movs	r0, #2
 80133f0:	e7f2      	b.n	80133d8 <HAL_UART_Transmit_DMA+0x7c>
 80133f2:	46c0      	nop			; (mov r8, r8)
 80133f4:	0801349d 	.word	0x0801349d
 80133f8:	080134cf 	.word	0x080134cf
 80133fc:	0801351f 	.word	0x0801351f

08013400 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013400:	b510      	push	{r4, lr}
 8013402:	0004      	movs	r4, r0
 8013404:	0008      	movs	r0, r1
 8013406:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013408:	2269      	movs	r2, #105	; 0x69
 801340a:	5ca2      	ldrb	r2, [r4, r2]
 801340c:	2a01      	cmp	r2, #1
 801340e:	d003      	beq.n	8013418 <HAL_UART_Receive_DMA+0x18>
 8013410:	2269      	movs	r2, #105	; 0x69
 8013412:	5ca2      	ldrb	r2, [r4, r2]
 8013414:	2a12      	cmp	r2, #18
 8013416:	d133      	bne.n	8013480 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8013418:	2800      	cmp	r0, #0
 801341a:	d033      	beq.n	8013484 <HAL_UART_Receive_DMA+0x84>
 801341c:	2b00      	cmp	r3, #0
 801341e:	d033      	beq.n	8013488 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013420:	2268      	movs	r2, #104	; 0x68
 8013422:	5ca2      	ldrb	r2, [r4, r2]
 8013424:	2a01      	cmp	r2, #1
 8013426:	d031      	beq.n	801348c <HAL_UART_Receive_DMA+0x8c>
 8013428:	2268      	movs	r2, #104	; 0x68
 801342a:	2101      	movs	r1, #1
 801342c:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 801342e:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8013430:	3a10      	subs	r2, #16
 8013432:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013434:	2200      	movs	r2, #0
 8013436:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013438:	3269      	adds	r2, #105	; 0x69
 801343a:	5ca2      	ldrb	r2, [r4, r2]
 801343c:	2a12      	cmp	r2, #18
 801343e:	d01b      	beq.n	8013478 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013440:	2269      	movs	r2, #105	; 0x69
 8013442:	2122      	movs	r1, #34	; 0x22
 8013444:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013448:	4911      	ldr	r1, [pc, #68]	; (8013490 <HAL_UART_Receive_DMA+0x90>)
 801344a:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801344c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801344e:	4911      	ldr	r1, [pc, #68]	; (8013494 <HAL_UART_Receive_DMA+0x94>)
 8013450:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013454:	4910      	ldr	r1, [pc, #64]	; (8013498 <HAL_UART_Receive_DMA+0x98>)
 8013456:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013458:	6821      	ldr	r1, [r4, #0]
 801345a:	3124      	adds	r1, #36	; 0x24
 801345c:	0002      	movs	r2, r0
 801345e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8013460:	f7fd ff5a 	bl	8011318 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8013464:	6822      	ldr	r2, [r4, #0]
 8013466:	6893      	ldr	r3, [r2, #8]
 8013468:	2140      	movs	r1, #64	; 0x40
 801346a:	430b      	orrs	r3, r1
 801346c:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 801346e:	2368      	movs	r3, #104	; 0x68
 8013470:	2200      	movs	r2, #0
 8013472:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8013474:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013476:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013478:	3257      	adds	r2, #87	; 0x57
 801347a:	3131      	adds	r1, #49	; 0x31
 801347c:	54a1      	strb	r1, [r4, r2]
 801347e:	e7e2      	b.n	8013446 <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 8013480:	2002      	movs	r0, #2
 8013482:	e7f8      	b.n	8013476 <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 8013484:	2001      	movs	r0, #1
 8013486:	e7f6      	b.n	8013476 <HAL_UART_Receive_DMA+0x76>
 8013488:	2001      	movs	r0, #1
 801348a:	e7f4      	b.n	8013476 <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 801348c:	2002      	movs	r0, #2
 801348e:	e7f2      	b.n	8013476 <HAL_UART_Receive_DMA+0x76>
 8013490:	080134d9 	.word	0x080134d9
 8013494:	08013515 	.word	0x08013515
 8013498:	0801351f 	.word	0x0801351f

0801349c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801349c:	b510      	push	{r4, lr}
 801349e:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80134a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	069b      	lsls	r3, r3, #26
 80134a8:	d40d      	bmi.n	80134c6 <UART_DMATransmitCplt+0x2a>
  {  
    huart->TxXferCount = 0;
 80134aa:	2352      	movs	r3, #82	; 0x52
 80134ac:	2200      	movs	r2, #0
 80134ae:	52c2      	strh	r2, [r0, r3]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80134b0:	6802      	ldr	r2, [r0, #0]
 80134b2:	6893      	ldr	r3, [r2, #8]
 80134b4:	2180      	movs	r1, #128	; 0x80
 80134b6:	438b      	bics	r3, r1
 80134b8:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80134ba:	6802      	ldr	r2, [r0, #0]
 80134bc:	6813      	ldr	r3, [r2, #0]
 80134be:	3940      	subs	r1, #64	; 0x40
 80134c0:	430b      	orrs	r3, r1
 80134c2:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80134c4:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80134c6:	f7fa faf5 	bl	800dab4 <HAL_UART_TxCpltCallback>
}
 80134ca:	e7fb      	b.n	80134c4 <UART_DMATransmitCplt+0x28>

080134cc <HAL_UART_TxHalfCpltCallback>:
}
 80134cc:	4770      	bx	lr

080134ce <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80134ce:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 80134d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80134d2:	f7ff fffb 	bl	80134cc <HAL_UART_TxHalfCpltCallback>
}
 80134d6:	bd10      	pop	{r4, pc}

080134d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80134d8:	b510      	push	{r4, lr}
 80134da:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80134dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	069b      	lsls	r3, r3, #26
 80134e4:	d40e      	bmi.n	8013504 <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 80134e6:	235a      	movs	r3, #90	; 0x5a
 80134e8:	2200      	movs	r2, #0
 80134ea:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80134ec:	6802      	ldr	r2, [r0, #0]
 80134ee:	6893      	ldr	r3, [r2, #8]
 80134f0:	2140      	movs	r1, #64	; 0x40
 80134f2:	438b      	bics	r3, r1
 80134f4:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80134f6:	2369      	movs	r3, #105	; 0x69
 80134f8:	5cc3      	ldrb	r3, [r0, r3]
 80134fa:	2b32      	cmp	r3, #50	; 0x32
 80134fc:	d005      	beq.n	801350a <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80134fe:	2369      	movs	r3, #105	; 0x69
 8013500:	2201      	movs	r2, #1
 8013502:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8013504:	f7fa fb14 	bl	800db30 <HAL_UART_RxCpltCallback>
}
 8013508:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801350a:	3337      	adds	r3, #55	; 0x37
 801350c:	2212      	movs	r2, #18
 801350e:	54c2      	strb	r2, [r0, r3]
 8013510:	e7f8      	b.n	8013504 <UART_DMAReceiveCplt+0x2c>

08013512 <HAL_UART_RxHalfCpltCallback>:
}
 8013512:	4770      	bx	lr

08013514 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013514:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013516:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013518:	f7ff fffb 	bl	8013512 <HAL_UART_RxHalfCpltCallback>
}
 801351c:	bd10      	pop	{r4, pc}

0801351e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801351e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013520:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8013522:	2300      	movs	r3, #0
 8013524:	225a      	movs	r2, #90	; 0x5a
 8013526:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013528:	3a08      	subs	r2, #8
 801352a:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 801352c:	3369      	adds	r3, #105	; 0x69
 801352e:	3a51      	subs	r2, #81	; 0x51
 8013530:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013532:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013534:	320f      	adds	r2, #15
 8013536:	4313      	orrs	r3, r2
 8013538:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801353a:	f7fa fad3 	bl	800dae4 <HAL_UART_ErrorCallback>
}
 801353e:	bd10      	pop	{r4, pc}

08013540 <UART_SetConfig>:
{
 8013540:	b570      	push	{r4, r5, r6, lr}
 8013542:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013544:	6801      	ldr	r1, [r0, #0]
 8013546:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013548:	6883      	ldr	r3, [r0, #8]
 801354a:	6900      	ldr	r0, [r0, #16]
 801354c:	4303      	orrs	r3, r0
 801354e:	6960      	ldr	r0, [r4, #20]
 8013550:	4303      	orrs	r3, r0
 8013552:	69e0      	ldr	r0, [r4, #28]
 8013554:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013556:	487a      	ldr	r0, [pc, #488]	; (8013740 <UART_SetConfig+0x200>)
 8013558:	4002      	ands	r2, r0
 801355a:	4313      	orrs	r3, r2
 801355c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801355e:	6822      	ldr	r2, [r4, #0]
 8013560:	6853      	ldr	r3, [r2, #4]
 8013562:	4978      	ldr	r1, [pc, #480]	; (8013744 <UART_SetConfig+0x204>)
 8013564:	400b      	ands	r3, r1
 8013566:	68e1      	ldr	r1, [r4, #12]
 8013568:	430b      	orrs	r3, r1
 801356a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801356c:	6821      	ldr	r1, [r4, #0]
 801356e:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013570:	69a3      	ldr	r3, [r4, #24]
 8013572:	6a20      	ldr	r0, [r4, #32]
 8013574:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013576:	4874      	ldr	r0, [pc, #464]	; (8013748 <UART_SetConfig+0x208>)
 8013578:	4002      	ands	r2, r0
 801357a:	4313      	orrs	r3, r2
 801357c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801357e:	6825      	ldr	r5, [r4, #0]
 8013580:	4b72      	ldr	r3, [pc, #456]	; (801374c <UART_SetConfig+0x20c>)
 8013582:	429d      	cmp	r5, r3
 8013584:	d021      	beq.n	80135ca <UART_SetConfig+0x8a>
 8013586:	4b72      	ldr	r3, [pc, #456]	; (8013750 <UART_SetConfig+0x210>)
 8013588:	429d      	cmp	r5, r3
 801358a:	d03a      	beq.n	8013602 <UART_SetConfig+0xc2>
 801358c:	4b71      	ldr	r3, [pc, #452]	; (8013754 <UART_SetConfig+0x214>)
 801358e:	429d      	cmp	r5, r3
 8013590:	d061      	beq.n	8013656 <UART_SetConfig+0x116>
 8013592:	4b71      	ldr	r3, [pc, #452]	; (8013758 <UART_SetConfig+0x218>)
 8013594:	429d      	cmp	r5, r3
 8013596:	d100      	bne.n	801359a <UART_SetConfig+0x5a>
 8013598:	e0a8      	b.n	80136ec <UART_SetConfig+0x1ac>
 801359a:	4b70      	ldr	r3, [pc, #448]	; (801375c <UART_SetConfig+0x21c>)
 801359c:	429d      	cmp	r5, r3
 801359e:	d100      	bne.n	80135a2 <UART_SetConfig+0x62>
 80135a0:	e0a4      	b.n	80136ec <UART_SetConfig+0x1ac>
 80135a2:	4b6f      	ldr	r3, [pc, #444]	; (8013760 <UART_SetConfig+0x220>)
 80135a4:	429d      	cmp	r5, r3
 80135a6:	d100      	bne.n	80135aa <UART_SetConfig+0x6a>
 80135a8:	e0a0      	b.n	80136ec <UART_SetConfig+0x1ac>
 80135aa:	4b6e      	ldr	r3, [pc, #440]	; (8013764 <UART_SetConfig+0x224>)
 80135ac:	429d      	cmp	r5, r3
 80135ae:	d100      	bne.n	80135b2 <UART_SetConfig+0x72>
 80135b0:	e09c      	b.n	80136ec <UART_SetConfig+0x1ac>
 80135b2:	4b6d      	ldr	r3, [pc, #436]	; (8013768 <UART_SetConfig+0x228>)
 80135b4:	429d      	cmp	r5, r3
 80135b6:	d100      	bne.n	80135ba <UART_SetConfig+0x7a>
 80135b8:	e098      	b.n	80136ec <UART_SetConfig+0x1ac>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80135ba:	2380      	movs	r3, #128	; 0x80
 80135bc:	021b      	lsls	r3, r3, #8
 80135be:	69e2      	ldr	r2, [r4, #28]
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d100      	bne.n	80135c6 <UART_SetConfig+0x86>
 80135c4:	e08c      	b.n	80136e0 <UART_SetConfig+0x1a0>
 80135c6:	2001      	movs	r0, #1
 80135c8:	e089      	b.n	80136de <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80135ca:	4b68      	ldr	r3, [pc, #416]	; (801376c <UART_SetConfig+0x22c>)
 80135cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135ce:	2303      	movs	r3, #3
 80135d0:	4013      	ands	r3, r2
 80135d2:	2b02      	cmp	r3, #2
 80135d4:	d100      	bne.n	80135d8 <UART_SetConfig+0x98>
 80135d6:	e0a6      	b.n	8013726 <UART_SetConfig+0x1e6>
 80135d8:	d82f      	bhi.n	801363a <UART_SetConfig+0xfa>
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d069      	beq.n	80136b2 <UART_SetConfig+0x172>
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d120      	bne.n	8013624 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80135e2:	2380      	movs	r3, #128	; 0x80
 80135e4:	021b      	lsls	r3, r3, #8
 80135e6:	69e2      	ldr	r2, [r4, #28]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d049      	beq.n	8013680 <UART_SetConfig+0x140>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80135ec:	f7ff fa34 	bl	8012a58 <HAL_RCC_GetSysClockFreq>
 80135f0:	6825      	ldr	r5, [r4, #0]
 80135f2:	6861      	ldr	r1, [r4, #4]
 80135f4:	f7ec fdac 	bl	8000150 <__udivsi3>
 80135f8:	0400      	lsls	r0, r0, #16
 80135fa:	0c00      	lsrs	r0, r0, #16
 80135fc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80135fe:	2000      	movs	r0, #0
        break;
 8013600:	e06d      	b.n	80136de <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013602:	4b5a      	ldr	r3, [pc, #360]	; (801376c <UART_SetConfig+0x22c>)
 8013604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013606:	22c0      	movs	r2, #192	; 0xc0
 8013608:	0292      	lsls	r2, r2, #10
 801360a:	4013      	ands	r3, r2
 801360c:	2280      	movs	r2, #128	; 0x80
 801360e:	0292      	lsls	r2, r2, #10
 8013610:	4293      	cmp	r3, r2
 8013612:	d100      	bne.n	8013616 <UART_SetConfig+0xd6>
 8013614:	e087      	b.n	8013726 <UART_SetConfig+0x1e6>
 8013616:	d80c      	bhi.n	8013632 <UART_SetConfig+0xf2>
 8013618:	2b00      	cmp	r3, #0
 801361a:	d04a      	beq.n	80136b2 <UART_SetConfig+0x172>
 801361c:	2280      	movs	r2, #128	; 0x80
 801361e:	0252      	lsls	r2, r2, #9
 8013620:	4293      	cmp	r3, r2
 8013622:	d0de      	beq.n	80135e2 <UART_SetConfig+0xa2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013624:	2380      	movs	r3, #128	; 0x80
 8013626:	021b      	lsls	r3, r3, #8
 8013628:	69e2      	ldr	r2, [r4, #28]
 801362a:	429a      	cmp	r2, r3
 801362c:	d05b      	beq.n	80136e6 <UART_SetConfig+0x1a6>
        ret = HAL_ERROR;
 801362e:	2001      	movs	r0, #1
 8013630:	e055      	b.n	80136de <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013632:	22c0      	movs	r2, #192	; 0xc0
 8013634:	0292      	lsls	r2, r2, #10
 8013636:	4293      	cmp	r3, r2
 8013638:	d1f4      	bne.n	8013624 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801363a:	2380      	movs	r3, #128	; 0x80
 801363c:	021b      	lsls	r3, r3, #8
 801363e:	69e2      	ldr	r2, [r4, #28]
 8013640:	429a      	cmp	r2, r3
 8013642:	d02f      	beq.n	80136a4 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013644:	6861      	ldr	r1, [r4, #4]
 8013646:	484a      	ldr	r0, [pc, #296]	; (8013770 <UART_SetConfig+0x230>)
 8013648:	f7ec fd82 	bl	8000150 <__udivsi3>
 801364c:	0400      	lsls	r0, r0, #16
 801364e:	0c00      	lsrs	r0, r0, #16
 8013650:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013652:	2000      	movs	r0, #0
        break;
 8013654:	e043      	b.n	80136de <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013656:	4b45      	ldr	r3, [pc, #276]	; (801376c <UART_SetConfig+0x22c>)
 8013658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801365a:	22c0      	movs	r2, #192	; 0xc0
 801365c:	0312      	lsls	r2, r2, #12
 801365e:	4013      	ands	r3, r2
 8013660:	2280      	movs	r2, #128	; 0x80
 8013662:	0312      	lsls	r2, r2, #12
 8013664:	4293      	cmp	r3, r2
 8013666:	d051      	beq.n	801370c <UART_SetConfig+0x1cc>
 8013668:	d813      	bhi.n	8013692 <UART_SetConfig+0x152>
 801366a:	2b00      	cmp	r3, #0
 801366c:	d021      	beq.n	80136b2 <UART_SetConfig+0x172>
 801366e:	2280      	movs	r2, #128	; 0x80
 8013670:	02d2      	lsls	r2, r2, #11
 8013672:	4293      	cmp	r3, r2
 8013674:	d1d6      	bne.n	8013624 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013676:	2380      	movs	r3, #128	; 0x80
 8013678:	021b      	lsls	r3, r3, #8
 801367a:	69e2      	ldr	r2, [r4, #28]
 801367c:	429a      	cmp	r2, r3
 801367e:	d1b5      	bne.n	80135ec <UART_SetConfig+0xac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013680:	f7ff f9ea 	bl	8012a58 <HAL_RCC_GetSysClockFreq>
 8013684:	0040      	lsls	r0, r0, #1
 8013686:	6861      	ldr	r1, [r4, #4]
 8013688:	f7ec fd62 	bl	8000150 <__udivsi3>
 801368c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801368e:	2000      	movs	r0, #0
        break;
 8013690:	e01c      	b.n	80136cc <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013692:	22c0      	movs	r2, #192	; 0xc0
 8013694:	0312      	lsls	r2, r2, #12
 8013696:	4293      	cmp	r3, r2
 8013698:	d1c4      	bne.n	8013624 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801369a:	2380      	movs	r3, #128	; 0x80
 801369c:	021b      	lsls	r3, r3, #8
 801369e:	69e2      	ldr	r2, [r4, #28]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d1cf      	bne.n	8013644 <UART_SetConfig+0x104>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80136a4:	6861      	ldr	r1, [r4, #4]
 80136a6:	4833      	ldr	r0, [pc, #204]	; (8013774 <UART_SetConfig+0x234>)
 80136a8:	f7ec fd52 	bl	8000150 <__udivsi3>
 80136ac:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80136ae:	2000      	movs	r0, #0
        break;
 80136b0:	e00c      	b.n	80136cc <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80136b2:	2380      	movs	r3, #128	; 0x80
 80136b4:	021b      	lsls	r3, r3, #8
 80136b6:	69e2      	ldr	r2, [r4, #28]
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d11c      	bne.n	80136f6 <UART_SetConfig+0x1b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80136bc:	f7ff fa30 	bl	8012b20 <HAL_RCC_GetPCLK1Freq>
 80136c0:	0040      	lsls	r0, r0, #1
 80136c2:	6861      	ldr	r1, [r4, #4]
 80136c4:	f7ec fd44 	bl	8000150 <__udivsi3>
 80136c8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80136ca:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80136cc:	220f      	movs	r2, #15
 80136ce:	0019      	movs	r1, r3
 80136d0:	4391      	bics	r1, r2
 80136d2:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80136d4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80136d6:	071b      	lsls	r3, r3, #28
 80136d8:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80136da:	4313      	orrs	r3, r2
 80136dc:	60cb      	str	r3, [r1, #12]
}
 80136de:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 80136e0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80136e2:	2300      	movs	r3, #0
 80136e4:	e7f2      	b.n	80136cc <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80136e6:	2001      	movs	r0, #1
 80136e8:	2300      	movs	r3, #0
 80136ea:	e7ef      	b.n	80136cc <UART_SetConfig+0x18c>
 80136ec:	2380      	movs	r3, #128	; 0x80
 80136ee:	021b      	lsls	r3, r3, #8
 80136f0:	69e2      	ldr	r2, [r4, #28]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d0e2      	beq.n	80136bc <UART_SetConfig+0x17c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80136f6:	f7ff fa13 	bl	8012b20 <HAL_RCC_GetPCLK1Freq>
 80136fa:	6825      	ldr	r5, [r4, #0]
 80136fc:	6861      	ldr	r1, [r4, #4]
 80136fe:	f7ec fd27 	bl	8000150 <__udivsi3>
 8013702:	0400      	lsls	r0, r0, #16
 8013704:	0c00      	lsrs	r0, r0, #16
 8013706:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013708:	2000      	movs	r0, #0
  return ret;
 801370a:	e7e8      	b.n	80136de <UART_SetConfig+0x19e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801370c:	2380      	movs	r3, #128	; 0x80
 801370e:	021b      	lsls	r3, r3, #8
 8013710:	69e2      	ldr	r2, [r4, #28]
 8013712:	429a      	cmp	r2, r3
 8013714:	d10c      	bne.n	8013730 <UART_SetConfig+0x1f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013716:	6861      	ldr	r1, [r4, #4]
 8013718:	2080      	movs	r0, #128	; 0x80
 801371a:	0240      	lsls	r0, r0, #9
 801371c:	f7ec fd18 	bl	8000150 <__udivsi3>
 8013720:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013722:	2000      	movs	r0, #0
        break;
 8013724:	e7d2      	b.n	80136cc <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013726:	2380      	movs	r3, #128	; 0x80
 8013728:	021b      	lsls	r3, r3, #8
 801372a:	69e2      	ldr	r2, [r4, #28]
 801372c:	429a      	cmp	r2, r3
 801372e:	d0f2      	beq.n	8013716 <UART_SetConfig+0x1d6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013730:	6861      	ldr	r1, [r4, #4]
 8013732:	2080      	movs	r0, #128	; 0x80
 8013734:	0200      	lsls	r0, r0, #8
 8013736:	f7ec fd0b 	bl	8000150 <__udivsi3>
 801373a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801373c:	2000      	movs	r0, #0
        break;
 801373e:	e7ce      	b.n	80136de <UART_SetConfig+0x19e>
 8013740:	efff69f3 	.word	0xefff69f3
 8013744:	ffffcfff 	.word	0xffffcfff
 8013748:	fffff4ff 	.word	0xfffff4ff
 801374c:	40013800 	.word	0x40013800
 8013750:	40004400 	.word	0x40004400
 8013754:	40004800 	.word	0x40004800
 8013758:	40004c00 	.word	0x40004c00
 801375c:	40005000 	.word	0x40005000
 8013760:	40011400 	.word	0x40011400
 8013764:	40011800 	.word	0x40011800
 8013768:	40011c00 	.word	0x40011c00
 801376c:	40021000 	.word	0x40021000
 8013770:	007a1200 	.word	0x007a1200
 8013774:	00f42400 	.word	0x00f42400

08013778 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013778:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801377a:	07db      	lsls	r3, r3, #31
 801377c:	d506      	bpl.n	801378c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801377e:	6802      	ldr	r2, [r0, #0]
 8013780:	6853      	ldr	r3, [r2, #4]
 8013782:	492c      	ldr	r1, [pc, #176]	; (8013834 <UART_AdvFeatureConfig+0xbc>)
 8013784:	400b      	ands	r3, r1
 8013786:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013788:	430b      	orrs	r3, r1
 801378a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801378c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801378e:	079b      	lsls	r3, r3, #30
 8013790:	d506      	bpl.n	80137a0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013792:	6802      	ldr	r2, [r0, #0]
 8013794:	6853      	ldr	r3, [r2, #4]
 8013796:	4928      	ldr	r1, [pc, #160]	; (8013838 <UART_AdvFeatureConfig+0xc0>)
 8013798:	400b      	ands	r3, r1
 801379a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801379c:	430b      	orrs	r3, r1
 801379e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80137a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80137a2:	075b      	lsls	r3, r3, #29
 80137a4:	d506      	bpl.n	80137b4 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80137a6:	6802      	ldr	r2, [r0, #0]
 80137a8:	6853      	ldr	r3, [r2, #4]
 80137aa:	4924      	ldr	r1, [pc, #144]	; (801383c <UART_AdvFeatureConfig+0xc4>)
 80137ac:	400b      	ands	r3, r1
 80137ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80137b0:	430b      	orrs	r3, r1
 80137b2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80137b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80137b6:	071b      	lsls	r3, r3, #28
 80137b8:	d506      	bpl.n	80137c8 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80137ba:	6802      	ldr	r2, [r0, #0]
 80137bc:	6853      	ldr	r3, [r2, #4]
 80137be:	4920      	ldr	r1, [pc, #128]	; (8013840 <UART_AdvFeatureConfig+0xc8>)
 80137c0:	400b      	ands	r3, r1
 80137c2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80137c4:	430b      	orrs	r3, r1
 80137c6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80137c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80137ca:	06db      	lsls	r3, r3, #27
 80137cc:	d506      	bpl.n	80137dc <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80137ce:	6802      	ldr	r2, [r0, #0]
 80137d0:	6893      	ldr	r3, [r2, #8]
 80137d2:	491c      	ldr	r1, [pc, #112]	; (8013844 <UART_AdvFeatureConfig+0xcc>)
 80137d4:	400b      	ands	r3, r1
 80137d6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80137d8:	430b      	orrs	r3, r1
 80137da:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80137dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80137de:	069b      	lsls	r3, r3, #26
 80137e0:	d506      	bpl.n	80137f0 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80137e2:	6802      	ldr	r2, [r0, #0]
 80137e4:	6893      	ldr	r3, [r2, #8]
 80137e6:	4918      	ldr	r1, [pc, #96]	; (8013848 <UART_AdvFeatureConfig+0xd0>)
 80137e8:	400b      	ands	r3, r1
 80137ea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80137ec:	430b      	orrs	r3, r1
 80137ee:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80137f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80137f2:	065b      	lsls	r3, r3, #25
 80137f4:	d50b      	bpl.n	801380e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80137f6:	6802      	ldr	r2, [r0, #0]
 80137f8:	6853      	ldr	r3, [r2, #4]
 80137fa:	4914      	ldr	r1, [pc, #80]	; (801384c <UART_AdvFeatureConfig+0xd4>)
 80137fc:	400b      	ands	r3, r1
 80137fe:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013800:	430b      	orrs	r3, r1
 8013802:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013804:	2380      	movs	r3, #128	; 0x80
 8013806:	035b      	lsls	r3, r3, #13
 8013808:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801380a:	429a      	cmp	r2, r3
 801380c:	d00a      	beq.n	8013824 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801380e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013810:	061b      	lsls	r3, r3, #24
 8013812:	d506      	bpl.n	8013822 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013814:	6802      	ldr	r2, [r0, #0]
 8013816:	6853      	ldr	r3, [r2, #4]
 8013818:	490d      	ldr	r1, [pc, #52]	; (8013850 <UART_AdvFeatureConfig+0xd8>)
 801381a:	400b      	ands	r3, r1
 801381c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801381e:	430b      	orrs	r3, r1
 8013820:	6053      	str	r3, [r2, #4]
}
 8013822:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013824:	6802      	ldr	r2, [r0, #0]
 8013826:	6853      	ldr	r3, [r2, #4]
 8013828:	490a      	ldr	r1, [pc, #40]	; (8013854 <UART_AdvFeatureConfig+0xdc>)
 801382a:	400b      	ands	r3, r1
 801382c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801382e:	430b      	orrs	r3, r1
 8013830:	6053      	str	r3, [r2, #4]
 8013832:	e7ec      	b.n	801380e <UART_AdvFeatureConfig+0x96>
 8013834:	fffdffff 	.word	0xfffdffff
 8013838:	fffeffff 	.word	0xfffeffff
 801383c:	fffbffff 	.word	0xfffbffff
 8013840:	ffff7fff 	.word	0xffff7fff
 8013844:	ffffefff 	.word	0xffffefff
 8013848:	ffffdfff 	.word	0xffffdfff
 801384c:	ffefffff 	.word	0xffefffff
 8013850:	fff7ffff 	.word	0xfff7ffff
 8013854:	ff9fffff 	.word	0xff9fffff

08013858 <UART_WaitOnFlagUntilTimeout>:
{
 8013858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801385a:	46c6      	mov	lr, r8
 801385c:	b500      	push	{lr}
 801385e:	0007      	movs	r7, r0
 8013860:	000c      	movs	r4, r1
 8013862:	0016      	movs	r6, r2
 8013864:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8013866:	f7fd f853 	bl	8010910 <HAL_GetTick>
 801386a:	4680      	mov	r8, r0
  if(Status == RESET)
 801386c:	2e00      	cmp	r6, #0
 801386e:	d029      	beq.n	80138c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	69da      	ldr	r2, [r3, #28]
 8013874:	4022      	ands	r2, r4
 8013876:	42a2      	cmp	r2, r4
 8013878:	d152      	bne.n	8013920 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 801387a:	1c6a      	adds	r2, r5, #1
 801387c:	d0f9      	beq.n	8013872 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801387e:	2d00      	cmp	r5, #0
 8013880:	d005      	beq.n	801388e <UART_WaitOnFlagUntilTimeout+0x36>
 8013882:	f7fd f845 	bl	8010910 <HAL_GetTick>
 8013886:	4643      	mov	r3, r8
 8013888:	1ac0      	subs	r0, r0, r3
 801388a:	42a8      	cmp	r0, r5
 801388c:	d9f0      	bls.n	8013870 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801388e:	683a      	ldr	r2, [r7, #0]
 8013890:	6813      	ldr	r3, [r2, #0]
 8013892:	2180      	movs	r1, #128	; 0x80
 8013894:	438b      	bics	r3, r1
 8013896:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013898:	683a      	ldr	r2, [r7, #0]
 801389a:	6813      	ldr	r3, [r2, #0]
 801389c:	3960      	subs	r1, #96	; 0x60
 801389e:	438b      	bics	r3, r1
 80138a0:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80138a2:	683a      	ldr	r2, [r7, #0]
 80138a4:	6813      	ldr	r3, [r2, #0]
 80138a6:	491f      	ldr	r1, [pc, #124]	; (8013924 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80138a8:	400b      	ands	r3, r1
 80138aa:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80138ac:	6839      	ldr	r1, [r7, #0]
 80138ae:	688b      	ldr	r3, [r1, #8]
 80138b0:	2201      	movs	r2, #1
 80138b2:	4393      	bics	r3, r2
 80138b4:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80138b6:	2369      	movs	r3, #105	; 0x69
 80138b8:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 80138ba:	3b01      	subs	r3, #1
 80138bc:	2200      	movs	r2, #0
 80138be:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80138c0:	2003      	movs	r0, #3
 80138c2:	e02a      	b.n	801391a <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	69d9      	ldr	r1, [r3, #28]
 80138c8:	4021      	ands	r1, r4
 80138ca:	42a1      	cmp	r1, r4
 80138cc:	d024      	beq.n	8013918 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 80138ce:	1c6a      	adds	r2, r5, #1
 80138d0:	d0f9      	beq.n	80138c6 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80138d2:	2d00      	cmp	r5, #0
 80138d4:	d005      	beq.n	80138e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80138d6:	f7fd f81b 	bl	8010910 <HAL_GetTick>
 80138da:	4643      	mov	r3, r8
 80138dc:	1ac0      	subs	r0, r0, r3
 80138de:	42a8      	cmp	r0, r5
 80138e0:	d9f0      	bls.n	80138c4 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80138e2:	683a      	ldr	r2, [r7, #0]
 80138e4:	6813      	ldr	r3, [r2, #0]
 80138e6:	2180      	movs	r1, #128	; 0x80
 80138e8:	438b      	bics	r3, r1
 80138ea:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80138ec:	683a      	ldr	r2, [r7, #0]
 80138ee:	6813      	ldr	r3, [r2, #0]
 80138f0:	3960      	subs	r1, #96	; 0x60
 80138f2:	438b      	bics	r3, r1
 80138f4:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80138f6:	683a      	ldr	r2, [r7, #0]
 80138f8:	6813      	ldr	r3, [r2, #0]
 80138fa:	490a      	ldr	r1, [pc, #40]	; (8013924 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80138fc:	400b      	ands	r3, r1
 80138fe:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013900:	6839      	ldr	r1, [r7, #0]
 8013902:	688b      	ldr	r3, [r1, #8]
 8013904:	2201      	movs	r2, #1
 8013906:	4393      	bics	r3, r2
 8013908:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801390a:	2369      	movs	r3, #105	; 0x69
 801390c:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 801390e:	3b01      	subs	r3, #1
 8013910:	2200      	movs	r2, #0
 8013912:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8013914:	2003      	movs	r0, #3
 8013916:	e000      	b.n	801391a <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8013918:	0030      	movs	r0, r6
}
 801391a:	bc80      	pop	{r7}
 801391c:	46b8      	mov	r8, r7
 801391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013920:	2000      	movs	r0, #0
 8013922:	e7fa      	b.n	801391a <UART_WaitOnFlagUntilTimeout+0xc2>
 8013924:	fffffeff 	.word	0xfffffeff

08013928 <HAL_UART_Transmit>:
{
 8013928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801392a:	46c6      	mov	lr, r8
 801392c:	b500      	push	{lr}
 801392e:	0004      	movs	r4, r0
 8013930:	000d      	movs	r5, r1
 8013932:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013934:	2369      	movs	r3, #105	; 0x69
 8013936:	5cc3      	ldrb	r3, [r0, r3]
 8013938:	2b01      	cmp	r3, #1
 801393a:	d003      	beq.n	8013944 <HAL_UART_Transmit+0x1c>
 801393c:	2369      	movs	r3, #105	; 0x69
 801393e:	5cc3      	ldrb	r3, [r0, r3]
 8013940:	2b22      	cmp	r3, #34	; 0x22
 8013942:	d152      	bne.n	80139ea <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 8013944:	2d00      	cmp	r5, #0
 8013946:	d054      	beq.n	80139f2 <HAL_UART_Transmit+0xca>
 8013948:	2a00      	cmp	r2, #0
 801394a:	d054      	beq.n	80139f6 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 801394c:	2368      	movs	r3, #104	; 0x68
 801394e:	5ce3      	ldrb	r3, [r4, r3]
 8013950:	2b01      	cmp	r3, #1
 8013952:	d052      	beq.n	80139fa <HAL_UART_Transmit+0xd2>
 8013954:	2368      	movs	r3, #104	; 0x68
 8013956:	2101      	movs	r1, #1
 8013958:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801395a:	2300      	movs	r3, #0
 801395c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801395e:	3369      	adds	r3, #105	; 0x69
 8013960:	5ce3      	ldrb	r3, [r4, r3]
 8013962:	2b22      	cmp	r3, #34	; 0x22
 8013964:	d009      	beq.n	801397a <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013966:	2369      	movs	r3, #105	; 0x69
 8013968:	2112      	movs	r1, #18
 801396a:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 801396c:	2350      	movs	r3, #80	; 0x50
 801396e:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8013970:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013972:	2380      	movs	r3, #128	; 0x80
 8013974:	015b      	lsls	r3, r3, #5
 8013976:	4698      	mov	r8, r3
 8013978:	e00a      	b.n	8013990 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801397a:	3347      	adds	r3, #71	; 0x47
 801397c:	3131      	adds	r1, #49	; 0x31
 801397e:	54e1      	strb	r1, [r4, r3]
 8013980:	e7f4      	b.n	801396c <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8013982:	782b      	ldrb	r3, [r5, #0]
 8013984:	6822      	ldr	r2, [r4, #0]
 8013986:	8513      	strh	r3, [r2, #40]	; 0x28
 8013988:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 801398a:	5ba2      	ldrh	r2, [r4, r6]
 801398c:	2a00      	cmp	r2, #0
 801398e:	d016      	beq.n	80139be <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013990:	3a01      	subs	r2, #1
 8013992:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013994:	003b      	movs	r3, r7
 8013996:	2200      	movs	r2, #0
 8013998:	2180      	movs	r1, #128	; 0x80
 801399a:	0020      	movs	r0, r4
 801399c:	f7ff ff5c 	bl	8013858 <UART_WaitOnFlagUntilTimeout>
 80139a0:	2800      	cmp	r0, #0
 80139a2:	d12c      	bne.n	80139fe <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80139a4:	68a3      	ldr	r3, [r4, #8]
 80139a6:	4543      	cmp	r3, r8
 80139a8:	d1eb      	bne.n	8013982 <HAL_UART_Transmit+0x5a>
 80139aa:	6923      	ldr	r3, [r4, #16]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d1e8      	bne.n	8013982 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80139b0:	882b      	ldrh	r3, [r5, #0]
 80139b2:	05db      	lsls	r3, r3, #23
 80139b4:	0ddb      	lsrs	r3, r3, #23
 80139b6:	6822      	ldr	r2, [r4, #0]
 80139b8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80139ba:	3502      	adds	r5, #2
 80139bc:	e7e5      	b.n	801398a <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80139be:	003b      	movs	r3, r7
 80139c0:	2140      	movs	r1, #64	; 0x40
 80139c2:	0020      	movs	r0, r4
 80139c4:	f7ff ff48 	bl	8013858 <UART_WaitOnFlagUntilTimeout>
 80139c8:	2800      	cmp	r0, #0
 80139ca:	d11a      	bne.n	8013a02 <HAL_UART_Transmit+0xda>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80139cc:	2369      	movs	r3, #105	; 0x69
 80139ce:	5ce3      	ldrb	r3, [r4, r3]
 80139d0:	2b32      	cmp	r3, #50	; 0x32
 80139d2:	d006      	beq.n	80139e2 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 80139d4:	2369      	movs	r3, #105	; 0x69
 80139d6:	2201      	movs	r2, #1
 80139d8:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80139da:	2368      	movs	r3, #104	; 0x68
 80139dc:	2200      	movs	r2, #0
 80139de:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80139e0:	e004      	b.n	80139ec <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80139e2:	3337      	adds	r3, #55	; 0x37
 80139e4:	2222      	movs	r2, #34	; 0x22
 80139e6:	54e2      	strb	r2, [r4, r3]
 80139e8:	e7f7      	b.n	80139da <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 80139ea:	2002      	movs	r0, #2
}
 80139ec:	bc80      	pop	{r7}
 80139ee:	46b8      	mov	r8, r7
 80139f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 80139f2:	2001      	movs	r0, #1
 80139f4:	e7fa      	b.n	80139ec <HAL_UART_Transmit+0xc4>
 80139f6:	2001      	movs	r0, #1
 80139f8:	e7f8      	b.n	80139ec <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80139fa:	2002      	movs	r0, #2
 80139fc:	e7f6      	b.n	80139ec <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80139fe:	2003      	movs	r0, #3
 8013a00:	e7f4      	b.n	80139ec <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8013a02:	2003      	movs	r0, #3
 8013a04:	e7f2      	b.n	80139ec <HAL_UART_Transmit+0xc4>
	...

08013a08 <UART_CheckIdleState>:
{
 8013a08:	b510      	push	{r4, lr}
 8013a0a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013a10:	6803      	ldr	r3, [r0, #0]
 8013a12:	4a18      	ldr	r2, [pc, #96]	; (8013a74 <UART_CheckIdleState+0x6c>)
 8013a14:	4293      	cmp	r3, r2
 8013a16:	d005      	beq.n	8013a24 <UART_CheckIdleState+0x1c>
 8013a18:	4a17      	ldr	r2, [pc, #92]	; (8013a78 <UART_CheckIdleState+0x70>)
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	d002      	beq.n	8013a24 <UART_CheckIdleState+0x1c>
 8013a1e:	4a17      	ldr	r2, [pc, #92]	; (8013a7c <UART_CheckIdleState+0x74>)
 8013a20:	4293      	cmp	r3, r2
 8013a22:	d106      	bne.n	8013a32 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	071b      	lsls	r3, r3, #28
 8013a28:	d40b      	bmi.n	8013a42 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013a2a:	6823      	ldr	r3, [r4, #0]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	075b      	lsls	r3, r3, #29
 8013a30:	d413      	bmi.n	8013a5a <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8013a32:	2369      	movs	r3, #105	; 0x69
 8013a34:	2201      	movs	r2, #1
 8013a36:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8013a38:	3b01      	subs	r3, #1
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8013a3e:	2000      	movs	r0, #0
}
 8013a40:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013a42:	23fa      	movs	r3, #250	; 0xfa
 8013a44:	2180      	movs	r1, #128	; 0x80
 8013a46:	009b      	lsls	r3, r3, #2
 8013a48:	2200      	movs	r2, #0
 8013a4a:	0389      	lsls	r1, r1, #14
 8013a4c:	0020      	movs	r0, r4
 8013a4e:	f7ff ff03 	bl	8013858 <UART_WaitOnFlagUntilTimeout>
 8013a52:	2800      	cmp	r0, #0
 8013a54:	d0e9      	beq.n	8013a2a <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8013a56:	2003      	movs	r0, #3
 8013a58:	e7f2      	b.n	8013a40 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013a5a:	23fa      	movs	r3, #250	; 0xfa
 8013a5c:	2180      	movs	r1, #128	; 0x80
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	2200      	movs	r2, #0
 8013a62:	03c9      	lsls	r1, r1, #15
 8013a64:	0020      	movs	r0, r4
 8013a66:	f7ff fef7 	bl	8013858 <UART_WaitOnFlagUntilTimeout>
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	d0e1      	beq.n	8013a32 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8013a6e:	2003      	movs	r0, #3
 8013a70:	e7e6      	b.n	8013a40 <UART_CheckIdleState+0x38>
 8013a72:	46c0      	nop			; (mov r8, r8)
 8013a74:	40013800 	.word	0x40013800
 8013a78:	40004400 	.word	0x40004400
 8013a7c:	40004800 	.word	0x40004800

08013a80 <HAL_UART_Init>:
{
 8013a80:	b510      	push	{r4, lr}
 8013a82:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013a84:	d030      	beq.n	8013ae8 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8013a86:	2369      	movs	r3, #105	; 0x69
 8013a88:	5cc3      	ldrb	r3, [r0, r3]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d022      	beq.n	8013ad4 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8013a8e:	2369      	movs	r3, #105	; 0x69
 8013a90:	2202      	movs	r2, #2
 8013a92:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013a94:	6822      	ldr	r2, [r4, #0]
 8013a96:	6813      	ldr	r3, [r2, #0]
 8013a98:	2101      	movs	r1, #1
 8013a9a:	438b      	bics	r3, r1
 8013a9c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013a9e:	0020      	movs	r0, r4
 8013aa0:	f7ff fd4e 	bl	8013540 <UART_SetConfig>
 8013aa4:	2801      	cmp	r0, #1
 8013aa6:	d014      	beq.n	8013ad2 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d118      	bne.n	8013ae0 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013aae:	6822      	ldr	r2, [r4, #0]
 8013ab0:	6853      	ldr	r3, [r2, #4]
 8013ab2:	490e      	ldr	r1, [pc, #56]	; (8013aec <HAL_UART_Init+0x6c>)
 8013ab4:	400b      	ands	r3, r1
 8013ab6:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013ab8:	6822      	ldr	r2, [r4, #0]
 8013aba:	6893      	ldr	r3, [r2, #8]
 8013abc:	212a      	movs	r1, #42	; 0x2a
 8013abe:	438b      	bics	r3, r1
 8013ac0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013ac2:	6822      	ldr	r2, [r4, #0]
 8013ac4:	6813      	ldr	r3, [r2, #0]
 8013ac6:	3929      	subs	r1, #41	; 0x29
 8013ac8:	430b      	orrs	r3, r1
 8013aca:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013acc:	0020      	movs	r0, r4
 8013ace:	f7ff ff9b 	bl	8013a08 <UART_CheckIdleState>
}
 8013ad2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013ad4:	3368      	adds	r3, #104	; 0x68
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8013ada:	f7fa fac7 	bl	800e06c <HAL_UART_MspInit>
 8013ade:	e7d6      	b.n	8013a8e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013ae0:	0020      	movs	r0, r4
 8013ae2:	f7ff fe49 	bl	8013778 <UART_AdvFeatureConfig>
 8013ae6:	e7e2      	b.n	8013aae <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013ae8:	2001      	movs	r0, #1
 8013aea:	e7f2      	b.n	8013ad2 <HAL_UART_Init+0x52>
 8013aec:	ffffb7ff 	.word	0xffffb7ff

08013af0 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013af0:	2369      	movs	r3, #105	; 0x69
 8013af2:	5cc3      	ldrb	r3, [r0, r3]
 8013af4:	2b12      	cmp	r3, #18
 8013af6:	d003      	beq.n	8013b00 <UART_Transmit_IT+0x10>
 8013af8:	2369      	movs	r3, #105	; 0x69
 8013afa:	5cc3      	ldrb	r3, [r0, r3]
 8013afc:	2b32      	cmp	r3, #50	; 0x32
 8013afe:	d12d      	bne.n	8013b5c <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8013b00:	2352      	movs	r3, #82	; 0x52
 8013b02:	5ac3      	ldrh	r3, [r0, r3]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d10b      	bne.n	8013b20 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013b08:	6802      	ldr	r2, [r0, #0]
 8013b0a:	6813      	ldr	r3, [r2, #0]
 8013b0c:	2180      	movs	r1, #128	; 0x80
 8013b0e:	438b      	bics	r3, r1
 8013b10:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013b12:	6802      	ldr	r2, [r0, #0]
 8013b14:	6813      	ldr	r3, [r2, #0]
 8013b16:	3940      	subs	r1, #64	; 0x40
 8013b18:	430b      	orrs	r3, r1
 8013b1a:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 8013b1c:	2000      	movs	r0, #0
 8013b1e:	e00f      	b.n	8013b40 <UART_Transmit_IT+0x50>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b20:	2380      	movs	r3, #128	; 0x80
 8013b22:	015b      	lsls	r3, r3, #5
 8013b24:	6882      	ldr	r2, [r0, #8]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d00b      	beq.n	8013b42 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013b2a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013b2c:	1c5a      	adds	r2, r3, #1
 8013b2e:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013b30:	781b      	ldrb	r3, [r3, #0]
 8013b32:	6802      	ldr	r2, [r0, #0]
 8013b34:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8013b36:	2252      	movs	r2, #82	; 0x52
 8013b38:	5a83      	ldrh	r3, [r0, r2]
 8013b3a:	3b01      	subs	r3, #1
 8013b3c:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8013b3e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013b40:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b42:	6903      	ldr	r3, [r0, #16]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d1f0      	bne.n	8013b2a <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013b48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013b4a:	881b      	ldrh	r3, [r3, #0]
 8013b4c:	05db      	lsls	r3, r3, #23
 8013b4e:	0ddb      	lsrs	r3, r3, #23
 8013b50:	6802      	ldr	r2, [r0, #0]
 8013b52:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8013b54:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013b56:	3302      	adds	r3, #2
 8013b58:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013b5a:	e7ec      	b.n	8013b36 <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 8013b5c:	2002      	movs	r0, #2
 8013b5e:	e7ef      	b.n	8013b40 <UART_Transmit_IT+0x50>

08013b60 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013b60:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013b62:	6802      	ldr	r2, [r0, #0]
 8013b64:	6813      	ldr	r3, [r2, #0]
 8013b66:	2140      	movs	r1, #64	; 0x40
 8013b68:	438b      	bics	r3, r1
 8013b6a:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013b6c:	2369      	movs	r3, #105	; 0x69
 8013b6e:	5cc3      	ldrb	r3, [r0, r3]
 8013b70:	2b32      	cmp	r3, #50	; 0x32
 8013b72:	d00a      	beq.n	8013b8a <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013b74:	6801      	ldr	r1, [r0, #0]
 8013b76:	688b      	ldr	r3, [r1, #8]
 8013b78:	2201      	movs	r2, #1
 8013b7a:	4393      	bics	r3, r2
 8013b7c:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8013b7e:	2369      	movs	r3, #105	; 0x69
 8013b80:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8013b82:	f7f9 ff97 	bl	800dab4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8013b86:	2000      	movs	r0, #0
 8013b88:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013b8a:	3337      	adds	r3, #55	; 0x37
 8013b8c:	2222      	movs	r2, #34	; 0x22
 8013b8e:	54c2      	strb	r2, [r0, r3]
 8013b90:	e7f7      	b.n	8013b82 <UART_EndTransmit_IT+0x22>
	...

08013b94 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013b94:	b510      	push	{r4, lr}
 8013b96:	0003      	movs	r3, r0
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013b98:	2269      	movs	r2, #105	; 0x69
 8013b9a:	5c82      	ldrb	r2, [r0, r2]
 8013b9c:	2a22      	cmp	r2, #34	; 0x22
 8013b9e:	d003      	beq.n	8013ba8 <UART_Receive_IT+0x14>
 8013ba0:	2269      	movs	r2, #105	; 0x69
 8013ba2:	5c82      	ldrb	r2, [r0, r2]
 8013ba4:	2a32      	cmp	r2, #50	; 0x32
 8013ba6:	d13f      	bne.n	8013c28 <UART_Receive_IT+0x94>
  uint16_t uhMask = huart->Mask;
 8013ba8:	225c      	movs	r2, #92	; 0x5c
 8013baa:	5a98      	ldrh	r0, [r3, r2]
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013bac:	2180      	movs	r1, #128	; 0x80
 8013bae:	0149      	lsls	r1, r1, #5
 8013bb0:	689a      	ldr	r2, [r3, #8]
 8013bb2:	428a      	cmp	r2, r1
 8013bb4:	d028      	beq.n	8013c08 <UART_Receive_IT+0x74>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013bb6:	681a      	ldr	r2, [r3, #0]
 8013bb8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013bba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013bbc:	1c4c      	adds	r4, r1, #1
 8013bbe:	655c      	str	r4, [r3, #84]	; 0x54
 8013bc0:	4002      	ands	r2, r0
 8013bc2:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8013bc4:	215a      	movs	r1, #90	; 0x5a
 8013bc6:	5a5a      	ldrh	r2, [r3, r1]
 8013bc8:	3a01      	subs	r2, #1
 8013bca:	b292      	uxth	r2, r2
 8013bcc:	525a      	strh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8013bce:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 8013bd0:	2a00      	cmp	r2, #0
 8013bd2:	d118      	bne.n	8013c06 <UART_Receive_IT+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013bd4:	6819      	ldr	r1, [r3, #0]
 8013bd6:	680a      	ldr	r2, [r1, #0]
 8013bd8:	3020      	adds	r0, #32
 8013bda:	4382      	bics	r2, r0
 8013bdc:	600a      	str	r2, [r1, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013bde:	2269      	movs	r2, #105	; 0x69
 8013be0:	5c9a      	ldrb	r2, [r3, r2]
 8013be2:	2a32      	cmp	r2, #50	; 0x32
 8013be4:	d01c      	beq.n	8013c20 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013be6:	6819      	ldr	r1, [r3, #0]
 8013be8:	680a      	ldr	r2, [r1, #0]
 8013bea:	4810      	ldr	r0, [pc, #64]	; (8013c2c <UART_Receive_IT+0x98>)
 8013bec:	4002      	ands	r2, r0
 8013bee:	600a      	str	r2, [r1, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013bf0:	6818      	ldr	r0, [r3, #0]
 8013bf2:	6882      	ldr	r2, [r0, #8]
 8013bf4:	2101      	movs	r1, #1
 8013bf6:	438a      	bics	r2, r1
 8013bf8:	6082      	str	r2, [r0, #8]
        huart->State = HAL_UART_STATE_READY;
 8013bfa:	2269      	movs	r2, #105	; 0x69
 8013bfc:	5499      	strb	r1, [r3, r2]
      HAL_UART_RxCpltCallback(huart);
 8013bfe:	0018      	movs	r0, r3
 8013c00:	f7f9 ff96 	bl	800db30 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8013c04:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013c06:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c08:	691a      	ldr	r2, [r3, #16]
 8013c0a:	2a00      	cmp	r2, #0
 8013c0c:	d1d3      	bne.n	8013bb6 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013c12:	4002      	ands	r2, r0
 8013c14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013c16:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 8013c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013c1a:	3202      	adds	r2, #2
 8013c1c:	655a      	str	r2, [r3, #84]	; 0x54
 8013c1e:	e7d1      	b.n	8013bc4 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013c20:	3237      	adds	r2, #55	; 0x37
 8013c22:	2112      	movs	r1, #18
 8013c24:	5499      	strb	r1, [r3, r2]
 8013c26:	e7ea      	b.n	8013bfe <UART_Receive_IT+0x6a>
    return HAL_BUSY;
 8013c28:	2002      	movs	r0, #2
 8013c2a:	e7ec      	b.n	8013c06 <UART_Receive_IT+0x72>
 8013c2c:	fffffeff 	.word	0xfffffeff

08013c30 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013c30:	4770      	bx	lr

08013c32 <HAL_UART_IRQHandler>:
{
 8013c32:	b510      	push	{r4, lr}
 8013c34:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8013c36:	6803      	ldr	r3, [r0, #0]
 8013c38:	69da      	ldr	r2, [r3, #28]
 8013c3a:	07d2      	lsls	r2, r2, #31
 8013c3c:	d509      	bpl.n	8013c52 <HAL_UART_IRQHandler+0x20>
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	05d2      	lsls	r2, r2, #23
 8013c42:	d506      	bpl.n	8013c52 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8013c44:	2201      	movs	r2, #1
 8013c46:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013c48:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013c4a:	4313      	orrs	r3, r2
 8013c4c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013c4e:	2369      	movs	r3, #105	; 0x69
 8013c50:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013c52:	6823      	ldr	r3, [r4, #0]
 8013c54:	69da      	ldr	r2, [r3, #28]
 8013c56:	0792      	lsls	r2, r2, #30
 8013c58:	d50b      	bpl.n	8013c72 <HAL_UART_IRQHandler+0x40>
 8013c5a:	689a      	ldr	r2, [r3, #8]
 8013c5c:	07d2      	lsls	r2, r2, #31
 8013c5e:	d508      	bpl.n	8013c72 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013c60:	2202      	movs	r2, #2
 8013c62:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013c64:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013c66:	3202      	adds	r2, #2
 8013c68:	4313      	orrs	r3, r2
 8013c6a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013c6c:	2369      	movs	r3, #105	; 0x69
 8013c6e:	3a03      	subs	r2, #3
 8013c70:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013c72:	6823      	ldr	r3, [r4, #0]
 8013c74:	69da      	ldr	r2, [r3, #28]
 8013c76:	0752      	lsls	r2, r2, #29
 8013c78:	d50b      	bpl.n	8013c92 <HAL_UART_IRQHandler+0x60>
 8013c7a:	689a      	ldr	r2, [r3, #8]
 8013c7c:	07d2      	lsls	r2, r2, #31
 8013c7e:	d508      	bpl.n	8013c92 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013c80:	2204      	movs	r2, #4
 8013c82:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013c84:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013c86:	3a02      	subs	r2, #2
 8013c88:	4313      	orrs	r3, r2
 8013c8a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013c8c:	2369      	movs	r3, #105	; 0x69
 8013c8e:	3a01      	subs	r2, #1
 8013c90:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013c92:	6823      	ldr	r3, [r4, #0]
 8013c94:	69da      	ldr	r2, [r3, #28]
 8013c96:	0712      	lsls	r2, r2, #28
 8013c98:	d50a      	bpl.n	8013cb0 <HAL_UART_IRQHandler+0x7e>
 8013c9a:	689a      	ldr	r2, [r3, #8]
 8013c9c:	07d2      	lsls	r2, r2, #31
 8013c9e:	d507      	bpl.n	8013cb0 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013ca0:	2208      	movs	r2, #8
 8013ca2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013ca4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013ca6:	4313      	orrs	r3, r2
 8013ca8:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013caa:	2369      	movs	r3, #105	; 0x69
 8013cac:	3a07      	subs	r2, #7
 8013cae:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013cb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d11c      	bne.n	8013cf0 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013cb6:	6823      	ldr	r3, [r4, #0]
 8013cb8:	69da      	ldr	r2, [r3, #28]
 8013cba:	02d2      	lsls	r2, r2, #11
 8013cbc:	d502      	bpl.n	8013cc4 <HAL_UART_IRQHandler+0x92>
 8013cbe:	689a      	ldr	r2, [r3, #8]
 8013cc0:	0252      	lsls	r2, r2, #9
 8013cc2:	d419      	bmi.n	8013cf8 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013cc4:	6823      	ldr	r3, [r4, #0]
 8013cc6:	69da      	ldr	r2, [r3, #28]
 8013cc8:	0692      	lsls	r2, r2, #26
 8013cca:	d502      	bpl.n	8013cd2 <HAL_UART_IRQHandler+0xa0>
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	069b      	lsls	r3, r3, #26
 8013cd0:	d41c      	bmi.n	8013d0c <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013cd2:	6823      	ldr	r3, [r4, #0]
 8013cd4:	69da      	ldr	r2, [r3, #28]
 8013cd6:	0612      	lsls	r2, r2, #24
 8013cd8:	d502      	bpl.n	8013ce0 <HAL_UART_IRQHandler+0xae>
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	061b      	lsls	r3, r3, #24
 8013cde:	d41e      	bmi.n	8013d1e <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013ce0:	6823      	ldr	r3, [r4, #0]
 8013ce2:	69da      	ldr	r2, [r3, #28]
 8013ce4:	0652      	lsls	r2, r2, #25
 8013ce6:	d502      	bpl.n	8013cee <HAL_UART_IRQHandler+0xbc>
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	065b      	lsls	r3, r3, #25
 8013cec:	d41b      	bmi.n	8013d26 <HAL_UART_IRQHandler+0xf4>
}
 8013cee:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013cf0:	0020      	movs	r0, r4
 8013cf2:	f7f9 fef7 	bl	800dae4 <HAL_UART_ErrorCallback>
 8013cf6:	e7de      	b.n	8013cb6 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013cf8:	2280      	movs	r2, #128	; 0x80
 8013cfa:	0352      	lsls	r2, r2, #13
 8013cfc:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013cfe:	2369      	movs	r3, #105	; 0x69
 8013d00:	2201      	movs	r2, #1
 8013d02:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013d04:	0020      	movs	r0, r4
 8013d06:	f7ff ff93 	bl	8013c30 <HAL_UARTEx_WakeupCallback>
 8013d0a:	e7db      	b.n	8013cc4 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013d0c:	0020      	movs	r0, r4
 8013d0e:	f7ff ff41 	bl	8013b94 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013d12:	6822      	ldr	r2, [r4, #0]
 8013d14:	6993      	ldr	r3, [r2, #24]
 8013d16:	2108      	movs	r1, #8
 8013d18:	430b      	orrs	r3, r1
 8013d1a:	6193      	str	r3, [r2, #24]
 8013d1c:	e7d9      	b.n	8013cd2 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013d1e:	0020      	movs	r0, r4
 8013d20:	f7ff fee6 	bl	8013af0 <UART_Transmit_IT>
 8013d24:	e7dc      	b.n	8013ce0 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8013d26:	0020      	movs	r0, r4
 8013d28:	f7ff ff1a 	bl	8013b60 <UART_EndTransmit_IT>
}
 8013d2c:	e7df      	b.n	8013cee <HAL_UART_IRQHandler+0xbc>

08013d2e <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8013d2e:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8013d30:	f7f0 fd3a 	bl	80047a8 <Module_Init>

	//Don't place your code here.
	for(;;){}
 8013d34:	e7fe      	b.n	8013d34 <main+0x6>

08013d36 <UserTask>:

/* User Task */
void UserTask(void *argument){

	// put your code here, to run repeatedly.
	while(1){
 8013d36:	e7fe      	b.n	8013d36 <UserTask>

08013d38 <atof>:
 8013d38:	b510      	push	{r4, lr}
 8013d3a:	2100      	movs	r1, #0
 8013d3c:	f001 fb0a 	bl	8015354 <strtod>
 8013d40:	bd10      	pop	{r4, pc}

08013d42 <atoi>:
 8013d42:	b510      	push	{r4, lr}
 8013d44:	220a      	movs	r2, #10
 8013d46:	2100      	movs	r1, #0
 8013d48:	f001 fbda 	bl	8015500 <strtol>
 8013d4c:	bd10      	pop	{r4, pc}

08013d4e <atol>:
 8013d4e:	b510      	push	{r4, lr}
 8013d50:	220a      	movs	r2, #10
 8013d52:	2100      	movs	r1, #0
 8013d54:	f001 fbd4 	bl	8015500 <strtol>
 8013d58:	bd10      	pop	{r4, pc}
	...

08013d5c <__libc_init_array>:
 8013d5c:	b570      	push	{r4, r5, r6, lr}
 8013d5e:	2600      	movs	r6, #0
 8013d60:	4d0c      	ldr	r5, [pc, #48]	; (8013d94 <__libc_init_array+0x38>)
 8013d62:	4c0d      	ldr	r4, [pc, #52]	; (8013d98 <__libc_init_array+0x3c>)
 8013d64:	1b64      	subs	r4, r4, r5
 8013d66:	10a4      	asrs	r4, r4, #2
 8013d68:	42a6      	cmp	r6, r4
 8013d6a:	d109      	bne.n	8013d80 <__libc_init_array+0x24>
 8013d6c:	2600      	movs	r6, #0
 8013d6e:	f006 fb3b 	bl	801a3e8 <_init>
 8013d72:	4d0a      	ldr	r5, [pc, #40]	; (8013d9c <__libc_init_array+0x40>)
 8013d74:	4c0a      	ldr	r4, [pc, #40]	; (8013da0 <__libc_init_array+0x44>)
 8013d76:	1b64      	subs	r4, r4, r5
 8013d78:	10a4      	asrs	r4, r4, #2
 8013d7a:	42a6      	cmp	r6, r4
 8013d7c:	d105      	bne.n	8013d8a <__libc_init_array+0x2e>
 8013d7e:	bd70      	pop	{r4, r5, r6, pc}
 8013d80:	00b3      	lsls	r3, r6, #2
 8013d82:	58eb      	ldr	r3, [r5, r3]
 8013d84:	4798      	blx	r3
 8013d86:	3601      	adds	r6, #1
 8013d88:	e7ee      	b.n	8013d68 <__libc_init_array+0xc>
 8013d8a:	00b3      	lsls	r3, r6, #2
 8013d8c:	58eb      	ldr	r3, [r5, r3]
 8013d8e:	4798      	blx	r3
 8013d90:	3601      	adds	r6, #1
 8013d92:	e7f2      	b.n	8013d7a <__libc_init_array+0x1e>
 8013d94:	0801dd70 	.word	0x0801dd70
 8013d98:	0801dd70 	.word	0x0801dd70
 8013d9c:	0801dd70 	.word	0x0801dd70
 8013da0:	0801dd78 	.word	0x0801dd78

08013da4 <malloc>:
 8013da4:	b510      	push	{r4, lr}
 8013da6:	4b03      	ldr	r3, [pc, #12]	; (8013db4 <malloc+0x10>)
 8013da8:	0001      	movs	r1, r0
 8013daa:	6818      	ldr	r0, [r3, #0]
 8013dac:	f000 f80e 	bl	8013dcc <_malloc_r>
 8013db0:	bd10      	pop	{r4, pc}
 8013db2:	46c0      	nop			; (mov r8, r8)
 8013db4:	200000a8 	.word	0x200000a8

08013db8 <free>:
 8013db8:	b510      	push	{r4, lr}
 8013dba:	4b03      	ldr	r3, [pc, #12]	; (8013dc8 <free+0x10>)
 8013dbc:	0001      	movs	r1, r0
 8013dbe:	6818      	ldr	r0, [r3, #0]
 8013dc0:	f003 fd2e 	bl	8017820 <_free_r>
 8013dc4:	bd10      	pop	{r4, pc}
 8013dc6:	46c0      	nop			; (mov r8, r8)
 8013dc8:	200000a8 	.word	0x200000a8

08013dcc <_malloc_r>:
 8013dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dce:	000d      	movs	r5, r1
 8013dd0:	b087      	sub	sp, #28
 8013dd2:	350b      	adds	r5, #11
 8013dd4:	9001      	str	r0, [sp, #4]
 8013dd6:	2d16      	cmp	r5, #22
 8013dd8:	d908      	bls.n	8013dec <_malloc_r+0x20>
 8013dda:	2207      	movs	r2, #7
 8013ddc:	4395      	bics	r5, r2
 8013dde:	d506      	bpl.n	8013dee <_malloc_r+0x22>
 8013de0:	230c      	movs	r3, #12
 8013de2:	9a01      	ldr	r2, [sp, #4]
 8013de4:	6013      	str	r3, [r2, #0]
 8013de6:	2000      	movs	r0, #0
 8013de8:	b007      	add	sp, #28
 8013dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dec:	2510      	movs	r5, #16
 8013dee:	42a9      	cmp	r1, r5
 8013df0:	d8f6      	bhi.n	8013de0 <_malloc_r+0x14>
 8013df2:	9801      	ldr	r0, [sp, #4]
 8013df4:	f000 fa1e 	bl	8014234 <__malloc_lock>
 8013df8:	23fc      	movs	r3, #252	; 0xfc
 8013dfa:	48bd      	ldr	r0, [pc, #756]	; (80140f0 <_malloc_r+0x324>)
 8013dfc:	005b      	lsls	r3, r3, #1
 8013dfe:	429d      	cmp	r5, r3
 8013e00:	d21a      	bcs.n	8013e38 <_malloc_r+0x6c>
 8013e02:	002a      	movs	r2, r5
 8013e04:	3208      	adds	r2, #8
 8013e06:	1882      	adds	r2, r0, r2
 8013e08:	0011      	movs	r1, r2
 8013e0a:	6854      	ldr	r4, [r2, #4]
 8013e0c:	3908      	subs	r1, #8
 8013e0e:	08eb      	lsrs	r3, r5, #3
 8013e10:	428c      	cmp	r4, r1
 8013e12:	d103      	bne.n	8013e1c <_malloc_r+0x50>
 8013e14:	68d4      	ldr	r4, [r2, #12]
 8013e16:	3302      	adds	r3, #2
 8013e18:	42a2      	cmp	r2, r4
 8013e1a:	d023      	beq.n	8013e64 <_malloc_r+0x98>
 8013e1c:	2303      	movs	r3, #3
 8013e1e:	6862      	ldr	r2, [r4, #4]
 8013e20:	68a1      	ldr	r1, [r4, #8]
 8013e22:	439a      	bics	r2, r3
 8013e24:	0013      	movs	r3, r2
 8013e26:	68e2      	ldr	r2, [r4, #12]
 8013e28:	18e3      	adds	r3, r4, r3
 8013e2a:	60ca      	str	r2, [r1, #12]
 8013e2c:	6091      	str	r1, [r2, #8]
 8013e2e:	2201      	movs	r2, #1
 8013e30:	6859      	ldr	r1, [r3, #4]
 8013e32:	430a      	orrs	r2, r1
 8013e34:	605a      	str	r2, [r3, #4]
 8013e36:	e02b      	b.n	8013e90 <_malloc_r+0xc4>
 8013e38:	233f      	movs	r3, #63	; 0x3f
 8013e3a:	0a6a      	lsrs	r2, r5, #9
 8013e3c:	d003      	beq.n	8013e46 <_malloc_r+0x7a>
 8013e3e:	2a04      	cmp	r2, #4
 8013e40:	d82c      	bhi.n	8013e9c <_malloc_r+0xd0>
 8013e42:	09ab      	lsrs	r3, r5, #6
 8013e44:	3338      	adds	r3, #56	; 0x38
 8013e46:	2203      	movs	r2, #3
 8013e48:	4694      	mov	ip, r2
 8013e4a:	00d9      	lsls	r1, r3, #3
 8013e4c:	1809      	adds	r1, r1, r0
 8013e4e:	68cc      	ldr	r4, [r1, #12]
 8013e50:	428c      	cmp	r4, r1
 8013e52:	d006      	beq.n	8013e62 <_malloc_r+0x96>
 8013e54:	4666      	mov	r6, ip
 8013e56:	6862      	ldr	r2, [r4, #4]
 8013e58:	43b2      	bics	r2, r6
 8013e5a:	1b57      	subs	r7, r2, r5
 8013e5c:	2f0f      	cmp	r7, #15
 8013e5e:	dd35      	ble.n	8013ecc <_malloc_r+0x100>
 8013e60:	3b01      	subs	r3, #1
 8013e62:	3301      	adds	r3, #1
 8013e64:	6904      	ldr	r4, [r0, #16]
 8013e66:	49a3      	ldr	r1, [pc, #652]	; (80140f4 <_malloc_r+0x328>)
 8013e68:	428c      	cmp	r4, r1
 8013e6a:	d056      	beq.n	8013f1a <_malloc_r+0x14e>
 8013e6c:	2203      	movs	r2, #3
 8013e6e:	6866      	ldr	r6, [r4, #4]
 8013e70:	4396      	bics	r6, r2
 8013e72:	0032      	movs	r2, r6
 8013e74:	1b76      	subs	r6, r6, r5
 8013e76:	2e0f      	cmp	r6, #15
 8013e78:	dd36      	ble.n	8013ee8 <_malloc_r+0x11c>
 8013e7a:	2701      	movs	r7, #1
 8013e7c:	1963      	adds	r3, r4, r5
 8013e7e:	433d      	orrs	r5, r7
 8013e80:	4337      	orrs	r7, r6
 8013e82:	6065      	str	r5, [r4, #4]
 8013e84:	6143      	str	r3, [r0, #20]
 8013e86:	6103      	str	r3, [r0, #16]
 8013e88:	60d9      	str	r1, [r3, #12]
 8013e8a:	6099      	str	r1, [r3, #8]
 8013e8c:	605f      	str	r7, [r3, #4]
 8013e8e:	50a6      	str	r6, [r4, r2]
 8013e90:	9801      	ldr	r0, [sp, #4]
 8013e92:	f000 f9d7 	bl	8014244 <__malloc_unlock>
 8013e96:	0020      	movs	r0, r4
 8013e98:	3008      	adds	r0, #8
 8013e9a:	e7a5      	b.n	8013de8 <_malloc_r+0x1c>
 8013e9c:	2a14      	cmp	r2, #20
 8013e9e:	d802      	bhi.n	8013ea6 <_malloc_r+0xda>
 8013ea0:	0013      	movs	r3, r2
 8013ea2:	335b      	adds	r3, #91	; 0x5b
 8013ea4:	e7cf      	b.n	8013e46 <_malloc_r+0x7a>
 8013ea6:	2a54      	cmp	r2, #84	; 0x54
 8013ea8:	d802      	bhi.n	8013eb0 <_malloc_r+0xe4>
 8013eaa:	0b2b      	lsrs	r3, r5, #12
 8013eac:	336e      	adds	r3, #110	; 0x6e
 8013eae:	e7ca      	b.n	8013e46 <_malloc_r+0x7a>
 8013eb0:	23aa      	movs	r3, #170	; 0xaa
 8013eb2:	005b      	lsls	r3, r3, #1
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d802      	bhi.n	8013ebe <_malloc_r+0xf2>
 8013eb8:	0beb      	lsrs	r3, r5, #15
 8013eba:	3377      	adds	r3, #119	; 0x77
 8013ebc:	e7c3      	b.n	8013e46 <_malloc_r+0x7a>
 8013ebe:	498e      	ldr	r1, [pc, #568]	; (80140f8 <_malloc_r+0x32c>)
 8013ec0:	237e      	movs	r3, #126	; 0x7e
 8013ec2:	428a      	cmp	r2, r1
 8013ec4:	d8bf      	bhi.n	8013e46 <_malloc_r+0x7a>
 8013ec6:	0cab      	lsrs	r3, r5, #18
 8013ec8:	337c      	adds	r3, #124	; 0x7c
 8013eca:	e7bc      	b.n	8013e46 <_malloc_r+0x7a>
 8013ecc:	68e6      	ldr	r6, [r4, #12]
 8013ece:	2f00      	cmp	r7, #0
 8013ed0:	db08      	blt.n	8013ee4 <_malloc_r+0x118>
 8013ed2:	68a3      	ldr	r3, [r4, #8]
 8013ed4:	60de      	str	r6, [r3, #12]
 8013ed6:	60b3      	str	r3, [r6, #8]
 8013ed8:	2301      	movs	r3, #1
 8013eda:	18a2      	adds	r2, r4, r2
 8013edc:	6851      	ldr	r1, [r2, #4]
 8013ede:	430b      	orrs	r3, r1
 8013ee0:	6053      	str	r3, [r2, #4]
 8013ee2:	e7d5      	b.n	8013e90 <_malloc_r+0xc4>
 8013ee4:	0034      	movs	r4, r6
 8013ee6:	e7b3      	b.n	8013e50 <_malloc_r+0x84>
 8013ee8:	6141      	str	r1, [r0, #20]
 8013eea:	6101      	str	r1, [r0, #16]
 8013eec:	2e00      	cmp	r6, #0
 8013eee:	daf3      	bge.n	8013ed8 <_malloc_r+0x10c>
 8013ef0:	6841      	ldr	r1, [r0, #4]
 8013ef2:	468c      	mov	ip, r1
 8013ef4:	2180      	movs	r1, #128	; 0x80
 8013ef6:	0089      	lsls	r1, r1, #2
 8013ef8:	428a      	cmp	r2, r1
 8013efa:	d300      	bcc.n	8013efe <_malloc_r+0x132>
 8013efc:	e089      	b.n	8014012 <_malloc_r+0x246>
 8013efe:	0956      	lsrs	r6, r2, #5
 8013f00:	08d1      	lsrs	r1, r2, #3
 8013f02:	2201      	movs	r2, #1
 8013f04:	40b2      	lsls	r2, r6
 8013f06:	4666      	mov	r6, ip
 8013f08:	00c9      	lsls	r1, r1, #3
 8013f0a:	4332      	orrs	r2, r6
 8013f0c:	6042      	str	r2, [r0, #4]
 8013f0e:	1808      	adds	r0, r1, r0
 8013f10:	6882      	ldr	r2, [r0, #8]
 8013f12:	60e0      	str	r0, [r4, #12]
 8013f14:	60a2      	str	r2, [r4, #8]
 8013f16:	6084      	str	r4, [r0, #8]
 8013f18:	60d4      	str	r4, [r2, #12]
 8013f1a:	2201      	movs	r2, #1
 8013f1c:	4874      	ldr	r0, [pc, #464]	; (80140f0 <_malloc_r+0x324>)
 8013f1e:	1099      	asrs	r1, r3, #2
 8013f20:	408a      	lsls	r2, r1
 8013f22:	6841      	ldr	r1, [r0, #4]
 8013f24:	4291      	cmp	r1, r2
 8013f26:	d325      	bcc.n	8013f74 <_malloc_r+0x1a8>
 8013f28:	420a      	tst	r2, r1
 8013f2a:	d105      	bne.n	8013f38 <_malloc_r+0x16c>
 8013f2c:	2403      	movs	r4, #3
 8013f2e:	43a3      	bics	r3, r4
 8013f30:	0052      	lsls	r2, r2, #1
 8013f32:	3304      	adds	r3, #4
 8013f34:	420a      	tst	r2, r1
 8013f36:	d0fb      	beq.n	8013f30 <_malloc_r+0x164>
 8013f38:	00d9      	lsls	r1, r3, #3
 8013f3a:	1841      	adds	r1, r0, r1
 8013f3c:	468c      	mov	ip, r1
 8013f3e:	9302      	str	r3, [sp, #8]
 8013f40:	68cc      	ldr	r4, [r1, #12]
 8013f42:	428c      	cmp	r4, r1
 8013f44:	d000      	beq.n	8013f48 <_malloc_r+0x17c>
 8013f46:	e09b      	b.n	8014080 <_malloc_r+0x2b4>
 8013f48:	2603      	movs	r6, #3
 8013f4a:	9c02      	ldr	r4, [sp, #8]
 8013f4c:	3108      	adds	r1, #8
 8013f4e:	3401      	adds	r4, #1
 8013f50:	9402      	str	r4, [sp, #8]
 8013f52:	4234      	tst	r4, r6
 8013f54:	d1f4      	bne.n	8013f40 <_malloc_r+0x174>
 8013f56:	2103      	movs	r1, #3
 8013f58:	420b      	tst	r3, r1
 8013f5a:	d000      	beq.n	8013f5e <_malloc_r+0x192>
 8013f5c:	e0b7      	b.n	80140ce <_malloc_r+0x302>
 8013f5e:	6843      	ldr	r3, [r0, #4]
 8013f60:	4393      	bics	r3, r2
 8013f62:	6043      	str	r3, [r0, #4]
 8013f64:	4b62      	ldr	r3, [pc, #392]	; (80140f0 <_malloc_r+0x324>)
 8013f66:	0052      	lsls	r2, r2, #1
 8013f68:	6859      	ldr	r1, [r3, #4]
 8013f6a:	4291      	cmp	r1, r2
 8013f6c:	d302      	bcc.n	8013f74 <_malloc_r+0x1a8>
 8013f6e:	2a00      	cmp	r2, #0
 8013f70:	d000      	beq.n	8013f74 <_malloc_r+0x1a8>
 8013f72:	e0bb      	b.n	80140ec <_malloc_r+0x320>
 8013f74:	2303      	movs	r3, #3
 8013f76:	6886      	ldr	r6, [r0, #8]
 8013f78:	6872      	ldr	r2, [r6, #4]
 8013f7a:	439a      	bics	r2, r3
 8013f7c:	9202      	str	r2, [sp, #8]
 8013f7e:	42aa      	cmp	r2, r5
 8013f80:	d303      	bcc.n	8013f8a <_malloc_r+0x1be>
 8013f82:	1b51      	subs	r1, r2, r5
 8013f84:	290f      	cmp	r1, #15
 8013f86:	dd00      	ble.n	8013f8a <_malloc_r+0x1be>
 8013f88:	e125      	b.n	80141d6 <_malloc_r+0x40a>
 8013f8a:	9b02      	ldr	r3, [sp, #8]
 8013f8c:	2008      	movs	r0, #8
 8013f8e:	18f3      	adds	r3, r6, r3
 8013f90:	9303      	str	r3, [sp, #12]
 8013f92:	4b5a      	ldr	r3, [pc, #360]	; (80140fc <_malloc_r+0x330>)
 8013f94:	681f      	ldr	r7, [r3, #0]
 8013f96:	f002 fd43 	bl	8016a20 <sysconf>
 8013f9a:	4b59      	ldr	r3, [pc, #356]	; (8014100 <_malloc_r+0x334>)
 8013f9c:	3710      	adds	r7, #16
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	197f      	adds	r7, r7, r5
 8013fa2:	9004      	str	r0, [sp, #16]
 8013fa4:	3301      	adds	r3, #1
 8013fa6:	d003      	beq.n	8013fb0 <_malloc_r+0x1e4>
 8013fa8:	3f01      	subs	r7, #1
 8013faa:	183f      	adds	r7, r7, r0
 8013fac:	4243      	negs	r3, r0
 8013fae:	401f      	ands	r7, r3
 8013fb0:	0039      	movs	r1, r7
 8013fb2:	9801      	ldr	r0, [sp, #4]
 8013fb4:	f000 fb18 	bl	80145e8 <_sbrk_r>
 8013fb8:	0004      	movs	r4, r0
 8013fba:	1c43      	adds	r3, r0, #1
 8013fbc:	d100      	bne.n	8013fc0 <_malloc_r+0x1f4>
 8013fbe:	e0de      	b.n	801417e <_malloc_r+0x3b2>
 8013fc0:	9b03      	ldr	r3, [sp, #12]
 8013fc2:	4283      	cmp	r3, r0
 8013fc4:	d903      	bls.n	8013fce <_malloc_r+0x202>
 8013fc6:	4b4a      	ldr	r3, [pc, #296]	; (80140f0 <_malloc_r+0x324>)
 8013fc8:	429e      	cmp	r6, r3
 8013fca:	d000      	beq.n	8013fce <_malloc_r+0x202>
 8013fcc:	e0d7      	b.n	801417e <_malloc_r+0x3b2>
 8013fce:	4b4d      	ldr	r3, [pc, #308]	; (8014104 <_malloc_r+0x338>)
 8013fd0:	9903      	ldr	r1, [sp, #12]
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	18ba      	adds	r2, r7, r2
 8013fd6:	601a      	str	r2, [r3, #0]
 8013fd8:	9b04      	ldr	r3, [sp, #16]
 8013fda:	3b01      	subs	r3, #1
 8013fdc:	42a1      	cmp	r1, r4
 8013fde:	d000      	beq.n	8013fe2 <_malloc_r+0x216>
 8013fe0:	e096      	b.n	8014110 <_malloc_r+0x344>
 8013fe2:	4219      	tst	r1, r3
 8013fe4:	d000      	beq.n	8013fe8 <_malloc_r+0x21c>
 8013fe6:	e093      	b.n	8014110 <_malloc_r+0x344>
 8013fe8:	2601      	movs	r6, #1
 8013fea:	4b41      	ldr	r3, [pc, #260]	; (80140f0 <_malloc_r+0x324>)
 8013fec:	9a02      	ldr	r2, [sp, #8]
 8013fee:	689b      	ldr	r3, [r3, #8]
 8013ff0:	19d7      	adds	r7, r2, r7
 8013ff2:	433e      	orrs	r6, r7
 8013ff4:	605e      	str	r6, [r3, #4]
 8013ff6:	4b43      	ldr	r3, [pc, #268]	; (8014104 <_malloc_r+0x338>)
 8013ff8:	4a43      	ldr	r2, [pc, #268]	; (8014108 <_malloc_r+0x33c>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	6811      	ldr	r1, [r2, #0]
 8013ffe:	428b      	cmp	r3, r1
 8014000:	d900      	bls.n	8014004 <_malloc_r+0x238>
 8014002:	6013      	str	r3, [r2, #0]
 8014004:	4a41      	ldr	r2, [pc, #260]	; (801410c <_malloc_r+0x340>)
 8014006:	6811      	ldr	r1, [r2, #0]
 8014008:	428b      	cmp	r3, r1
 801400a:	d800      	bhi.n	801400e <_malloc_r+0x242>
 801400c:	e0b7      	b.n	801417e <_malloc_r+0x3b2>
 801400e:	6013      	str	r3, [r2, #0]
 8014010:	e0b5      	b.n	801417e <_malloc_r+0x3b2>
 8014012:	0a56      	lsrs	r6, r2, #9
 8014014:	2e04      	cmp	r6, #4
 8014016:	d811      	bhi.n	801403c <_malloc_r+0x270>
 8014018:	0991      	lsrs	r1, r2, #6
 801401a:	3138      	adds	r1, #56	; 0x38
 801401c:	00cf      	lsls	r7, r1, #3
 801401e:	183f      	adds	r7, r7, r0
 8014020:	68be      	ldr	r6, [r7, #8]
 8014022:	42b7      	cmp	r7, r6
 8014024:	d125      	bne.n	8014072 <_malloc_r+0x2a6>
 8014026:	2201      	movs	r2, #1
 8014028:	1089      	asrs	r1, r1, #2
 801402a:	408a      	lsls	r2, r1
 801402c:	4661      	mov	r1, ip
 801402e:	430a      	orrs	r2, r1
 8014030:	6042      	str	r2, [r0, #4]
 8014032:	60e7      	str	r7, [r4, #12]
 8014034:	60a6      	str	r6, [r4, #8]
 8014036:	60bc      	str	r4, [r7, #8]
 8014038:	60f4      	str	r4, [r6, #12]
 801403a:	e76e      	b.n	8013f1a <_malloc_r+0x14e>
 801403c:	2e14      	cmp	r6, #20
 801403e:	d802      	bhi.n	8014046 <_malloc_r+0x27a>
 8014040:	0031      	movs	r1, r6
 8014042:	315b      	adds	r1, #91	; 0x5b
 8014044:	e7ea      	b.n	801401c <_malloc_r+0x250>
 8014046:	2e54      	cmp	r6, #84	; 0x54
 8014048:	d802      	bhi.n	8014050 <_malloc_r+0x284>
 801404a:	0b11      	lsrs	r1, r2, #12
 801404c:	316e      	adds	r1, #110	; 0x6e
 801404e:	e7e5      	b.n	801401c <_malloc_r+0x250>
 8014050:	21aa      	movs	r1, #170	; 0xaa
 8014052:	0049      	lsls	r1, r1, #1
 8014054:	428e      	cmp	r6, r1
 8014056:	d802      	bhi.n	801405e <_malloc_r+0x292>
 8014058:	0bd1      	lsrs	r1, r2, #15
 801405a:	3177      	adds	r1, #119	; 0x77
 801405c:	e7de      	b.n	801401c <_malloc_r+0x250>
 801405e:	4f26      	ldr	r7, [pc, #152]	; (80140f8 <_malloc_r+0x32c>)
 8014060:	217e      	movs	r1, #126	; 0x7e
 8014062:	42be      	cmp	r6, r7
 8014064:	d8da      	bhi.n	801401c <_malloc_r+0x250>
 8014066:	0c91      	lsrs	r1, r2, #18
 8014068:	317c      	adds	r1, #124	; 0x7c
 801406a:	e7d7      	b.n	801401c <_malloc_r+0x250>
 801406c:	68b6      	ldr	r6, [r6, #8]
 801406e:	42b7      	cmp	r7, r6
 8014070:	d004      	beq.n	801407c <_malloc_r+0x2b0>
 8014072:	2003      	movs	r0, #3
 8014074:	6871      	ldr	r1, [r6, #4]
 8014076:	4381      	bics	r1, r0
 8014078:	4291      	cmp	r1, r2
 801407a:	d8f7      	bhi.n	801406c <_malloc_r+0x2a0>
 801407c:	68f7      	ldr	r7, [r6, #12]
 801407e:	e7d8      	b.n	8014032 <_malloc_r+0x266>
 8014080:	2703      	movs	r7, #3
 8014082:	6866      	ldr	r6, [r4, #4]
 8014084:	43be      	bics	r6, r7
 8014086:	9603      	str	r6, [sp, #12]
 8014088:	1b77      	subs	r7, r6, r5
 801408a:	68e6      	ldr	r6, [r4, #12]
 801408c:	2f0f      	cmp	r7, #15
 801408e:	dd10      	ble.n	80140b2 <_malloc_r+0x2e6>
 8014090:	2201      	movs	r2, #1
 8014092:	68a1      	ldr	r1, [r4, #8]
 8014094:	1963      	adds	r3, r4, r5
 8014096:	4315      	orrs	r5, r2
 8014098:	6065      	str	r5, [r4, #4]
 801409a:	60ce      	str	r6, [r1, #12]
 801409c:	60b1      	str	r1, [r6, #8]
 801409e:	6143      	str	r3, [r0, #20]
 80140a0:	6103      	str	r3, [r0, #16]
 80140a2:	4814      	ldr	r0, [pc, #80]	; (80140f4 <_malloc_r+0x328>)
 80140a4:	433a      	orrs	r2, r7
 80140a6:	60d8      	str	r0, [r3, #12]
 80140a8:	6098      	str	r0, [r3, #8]
 80140aa:	605a      	str	r2, [r3, #4]
 80140ac:	9b03      	ldr	r3, [sp, #12]
 80140ae:	50e7      	str	r7, [r4, r3]
 80140b0:	e6ee      	b.n	8013e90 <_malloc_r+0xc4>
 80140b2:	2f00      	cmp	r7, #0
 80140b4:	db09      	blt.n	80140ca <_malloc_r+0x2fe>
 80140b6:	9b03      	ldr	r3, [sp, #12]
 80140b8:	18e1      	adds	r1, r4, r3
 80140ba:	2301      	movs	r3, #1
 80140bc:	684a      	ldr	r2, [r1, #4]
 80140be:	4313      	orrs	r3, r2
 80140c0:	604b      	str	r3, [r1, #4]
 80140c2:	68a3      	ldr	r3, [r4, #8]
 80140c4:	60de      	str	r6, [r3, #12]
 80140c6:	60b3      	str	r3, [r6, #8]
 80140c8:	e6e2      	b.n	8013e90 <_malloc_r+0xc4>
 80140ca:	0034      	movs	r4, r6
 80140cc:	e739      	b.n	8013f42 <_malloc_r+0x176>
 80140ce:	2108      	movs	r1, #8
 80140d0:	4249      	negs	r1, r1
 80140d2:	448c      	add	ip, r1
 80140d4:	4661      	mov	r1, ip
 80140d6:	6889      	ldr	r1, [r1, #8]
 80140d8:	3b01      	subs	r3, #1
 80140da:	4561      	cmp	r1, ip
 80140dc:	d100      	bne.n	80140e0 <_malloc_r+0x314>
 80140de:	e73a      	b.n	8013f56 <_malloc_r+0x18a>
 80140e0:	e740      	b.n	8013f64 <_malloc_r+0x198>
 80140e2:	3304      	adds	r3, #4
 80140e4:	0052      	lsls	r2, r2, #1
 80140e6:	420a      	tst	r2, r1
 80140e8:	d0fb      	beq.n	80140e2 <_malloc_r+0x316>
 80140ea:	e725      	b.n	8013f38 <_malloc_r+0x16c>
 80140ec:	9b02      	ldr	r3, [sp, #8]
 80140ee:	e7fa      	b.n	80140e6 <_malloc_r+0x31a>
 80140f0:	200004d8 	.word	0x200004d8
 80140f4:	200004e0 	.word	0x200004e0
 80140f8:	00000554 	.word	0x00000554
 80140fc:	20006a24 	.word	0x20006a24
 8014100:	200008e0 	.word	0x200008e0
 8014104:	200069f4 	.word	0x200069f4
 8014108:	20006a1c 	.word	0x20006a1c
 801410c:	20006a20 	.word	0x20006a20
 8014110:	4935      	ldr	r1, [pc, #212]	; (80141e8 <_malloc_r+0x41c>)
 8014112:	6808      	ldr	r0, [r1, #0]
 8014114:	3001      	adds	r0, #1
 8014116:	d140      	bne.n	801419a <_malloc_r+0x3ce>
 8014118:	600c      	str	r4, [r1, #0]
 801411a:	2207      	movs	r2, #7
 801411c:	0021      	movs	r1, r4
 801411e:	4011      	ands	r1, r2
 8014120:	2000      	movs	r0, #0
 8014122:	9103      	str	r1, [sp, #12]
 8014124:	4214      	tst	r4, r2
 8014126:	d002      	beq.n	801412e <_malloc_r+0x362>
 8014128:	3008      	adds	r0, #8
 801412a:	1a40      	subs	r0, r0, r1
 801412c:	1824      	adds	r4, r4, r0
 801412e:	19e2      	adds	r2, r4, r7
 8014130:	9205      	str	r2, [sp, #20]
 8014132:	9f05      	ldr	r7, [sp, #20]
 8014134:	9a04      	ldr	r2, [sp, #16]
 8014136:	401f      	ands	r7, r3
 8014138:	1810      	adds	r0, r2, r0
 801413a:	1bc7      	subs	r7, r0, r7
 801413c:	401f      	ands	r7, r3
 801413e:	0039      	movs	r1, r7
 8014140:	9801      	ldr	r0, [sp, #4]
 8014142:	f000 fa51 	bl	80145e8 <_sbrk_r>
 8014146:	1c43      	adds	r3, r0, #1
 8014148:	d107      	bne.n	801415a <_malloc_r+0x38e>
 801414a:	9b03      	ldr	r3, [sp, #12]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d02a      	beq.n	80141a6 <_malloc_r+0x3da>
 8014150:	0018      	movs	r0, r3
 8014152:	2700      	movs	r7, #0
 8014154:	9b05      	ldr	r3, [sp, #20]
 8014156:	3808      	subs	r0, #8
 8014158:	1818      	adds	r0, r3, r0
 801415a:	4a24      	ldr	r2, [pc, #144]	; (80141ec <_malloc_r+0x420>)
 801415c:	1b00      	subs	r0, r0, r4
 801415e:	6813      	ldr	r3, [r2, #0]
 8014160:	19db      	adds	r3, r3, r7
 8014162:	6013      	str	r3, [r2, #0]
 8014164:	2201      	movs	r2, #1
 8014166:	4b22      	ldr	r3, [pc, #136]	; (80141f0 <_malloc_r+0x424>)
 8014168:	19c7      	adds	r7, r0, r7
 801416a:	4317      	orrs	r7, r2
 801416c:	609c      	str	r4, [r3, #8]
 801416e:	6067      	str	r7, [r4, #4]
 8014170:	429e      	cmp	r6, r3
 8014172:	d100      	bne.n	8014176 <_malloc_r+0x3aa>
 8014174:	e73f      	b.n	8013ff6 <_malloc_r+0x22a>
 8014176:	9b02      	ldr	r3, [sp, #8]
 8014178:	2b0f      	cmp	r3, #15
 801417a:	d817      	bhi.n	80141ac <_malloc_r+0x3e0>
 801417c:	6062      	str	r2, [r4, #4]
 801417e:	2203      	movs	r2, #3
 8014180:	4b1b      	ldr	r3, [pc, #108]	; (80141f0 <_malloc_r+0x424>)
 8014182:	689b      	ldr	r3, [r3, #8]
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	4393      	bics	r3, r2
 8014188:	1b59      	subs	r1, r3, r5
 801418a:	42ab      	cmp	r3, r5
 801418c:	d301      	bcc.n	8014192 <_malloc_r+0x3c6>
 801418e:	290f      	cmp	r1, #15
 8014190:	dc21      	bgt.n	80141d6 <_malloc_r+0x40a>
 8014192:	9801      	ldr	r0, [sp, #4]
 8014194:	f000 f856 	bl	8014244 <__malloc_unlock>
 8014198:	e625      	b.n	8013de6 <_malloc_r+0x1a>
 801419a:	9903      	ldr	r1, [sp, #12]
 801419c:	1a61      	subs	r1, r4, r1
 801419e:	1889      	adds	r1, r1, r2
 80141a0:	4a12      	ldr	r2, [pc, #72]	; (80141ec <_malloc_r+0x420>)
 80141a2:	6011      	str	r1, [r2, #0]
 80141a4:	e7b9      	b.n	801411a <_malloc_r+0x34e>
 80141a6:	9805      	ldr	r0, [sp, #20]
 80141a8:	9f03      	ldr	r7, [sp, #12]
 80141aa:	e7d6      	b.n	801415a <_malloc_r+0x38e>
 80141ac:	2307      	movs	r3, #7
 80141ae:	9f02      	ldr	r7, [sp, #8]
 80141b0:	3f0c      	subs	r7, #12
 80141b2:	439f      	bics	r7, r3
 80141b4:	6873      	ldr	r3, [r6, #4]
 80141b6:	401a      	ands	r2, r3
 80141b8:	433a      	orrs	r2, r7
 80141ba:	6072      	str	r2, [r6, #4]
 80141bc:	2205      	movs	r2, #5
 80141be:	19f3      	adds	r3, r6, r7
 80141c0:	605a      	str	r2, [r3, #4]
 80141c2:	609a      	str	r2, [r3, #8]
 80141c4:	2f0f      	cmp	r7, #15
 80141c6:	d800      	bhi.n	80141ca <_malloc_r+0x3fe>
 80141c8:	e715      	b.n	8013ff6 <_malloc_r+0x22a>
 80141ca:	0031      	movs	r1, r6
 80141cc:	9801      	ldr	r0, [sp, #4]
 80141ce:	3108      	adds	r1, #8
 80141d0:	f003 fb26 	bl	8017820 <_free_r>
 80141d4:	e70f      	b.n	8013ff6 <_malloc_r+0x22a>
 80141d6:	2201      	movs	r2, #1
 80141d8:	0013      	movs	r3, r2
 80141da:	4805      	ldr	r0, [pc, #20]	; (80141f0 <_malloc_r+0x424>)
 80141dc:	432b      	orrs	r3, r5
 80141de:	6884      	ldr	r4, [r0, #8]
 80141e0:	6063      	str	r3, [r4, #4]
 80141e2:	1963      	adds	r3, r4, r5
 80141e4:	6083      	str	r3, [r0, #8]
 80141e6:	e624      	b.n	8013e32 <_malloc_r+0x66>
 80141e8:	200008e0 	.word	0x200008e0
 80141ec:	200069f4 	.word	0x200069f4
 80141f0:	200004d8 	.word	0x200004d8

080141f4 <memcmp>:
 80141f4:	b530      	push	{r4, r5, lr}
 80141f6:	2400      	movs	r4, #0
 80141f8:	3901      	subs	r1, #1
 80141fa:	42a2      	cmp	r2, r4
 80141fc:	d101      	bne.n	8014202 <memcmp+0xe>
 80141fe:	2000      	movs	r0, #0
 8014200:	e005      	b.n	801420e <memcmp+0x1a>
 8014202:	5d03      	ldrb	r3, [r0, r4]
 8014204:	3401      	adds	r4, #1
 8014206:	5d0d      	ldrb	r5, [r1, r4]
 8014208:	42ab      	cmp	r3, r5
 801420a:	d0f6      	beq.n	80141fa <memcmp+0x6>
 801420c:	1b58      	subs	r0, r3, r5
 801420e:	bd30      	pop	{r4, r5, pc}

08014210 <memcpy>:
 8014210:	2300      	movs	r3, #0
 8014212:	b510      	push	{r4, lr}
 8014214:	429a      	cmp	r2, r3
 8014216:	d100      	bne.n	801421a <memcpy+0xa>
 8014218:	bd10      	pop	{r4, pc}
 801421a:	5ccc      	ldrb	r4, [r1, r3]
 801421c:	54c4      	strb	r4, [r0, r3]
 801421e:	3301      	adds	r3, #1
 8014220:	e7f8      	b.n	8014214 <memcpy+0x4>

08014222 <memset>:
 8014222:	0003      	movs	r3, r0
 8014224:	1882      	adds	r2, r0, r2
 8014226:	4293      	cmp	r3, r2
 8014228:	d100      	bne.n	801422c <memset+0xa>
 801422a:	4770      	bx	lr
 801422c:	7019      	strb	r1, [r3, #0]
 801422e:	3301      	adds	r3, #1
 8014230:	e7f9      	b.n	8014226 <memset+0x4>
	...

08014234 <__malloc_lock>:
 8014234:	b510      	push	{r4, lr}
 8014236:	4802      	ldr	r0, [pc, #8]	; (8014240 <__malloc_lock+0xc>)
 8014238:	f003 ff24 	bl	8018084 <__retarget_lock_acquire_recursive>
 801423c:	bd10      	pop	{r4, pc}
 801423e:	46c0      	nop			; (mov r8, r8)
 8014240:	20006fbc 	.word	0x20006fbc

08014244 <__malloc_unlock>:
 8014244:	b510      	push	{r4, lr}
 8014246:	4802      	ldr	r0, [pc, #8]	; (8014250 <__malloc_unlock+0xc>)
 8014248:	f003 ff1d 	bl	8018086 <__retarget_lock_release_recursive>
 801424c:	bd10      	pop	{r4, pc}
 801424e:	46c0      	nop			; (mov r8, r8)
 8014250:	20006fbc 	.word	0x20006fbc

08014254 <rand>:
 8014254:	4b09      	ldr	r3, [pc, #36]	; (801427c <rand+0x28>)
 8014256:	b510      	push	{r4, lr}
 8014258:	681c      	ldr	r4, [r3, #0]
 801425a:	4a09      	ldr	r2, [pc, #36]	; (8014280 <rand+0x2c>)
 801425c:	34a8      	adds	r4, #168	; 0xa8
 801425e:	6820      	ldr	r0, [r4, #0]
 8014260:	6861      	ldr	r1, [r4, #4]
 8014262:	4b08      	ldr	r3, [pc, #32]	; (8014284 <rand+0x30>)
 8014264:	f7ec f982 	bl	800056c <__aeabi_lmul>
 8014268:	2201      	movs	r2, #1
 801426a:	2300      	movs	r3, #0
 801426c:	1880      	adds	r0, r0, r2
 801426e:	4159      	adcs	r1, r3
 8014270:	6020      	str	r0, [r4, #0]
 8014272:	6061      	str	r1, [r4, #4]
 8014274:	0048      	lsls	r0, r1, #1
 8014276:	0840      	lsrs	r0, r0, #1
 8014278:	bd10      	pop	{r4, pc}
 801427a:	46c0      	nop			; (mov r8, r8)
 801427c:	200000a8 	.word	0x200000a8
 8014280:	4c957f2d 	.word	0x4c957f2d
 8014284:	5851f42d 	.word	0x5851f42d

08014288 <realloc>:
 8014288:	b510      	push	{r4, lr}
 801428a:	4b03      	ldr	r3, [pc, #12]	; (8014298 <realloc+0x10>)
 801428c:	000a      	movs	r2, r1
 801428e:	0001      	movs	r1, r0
 8014290:	6818      	ldr	r0, [r3, #0]
 8014292:	f000 f803 	bl	801429c <_realloc_r>
 8014296:	bd10      	pop	{r4, pc}
 8014298:	200000a8 	.word	0x200000a8

0801429c <_realloc_r>:
 801429c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801429e:	b087      	sub	sp, #28
 80142a0:	1e0c      	subs	r4, r1, #0
 80142a2:	9002      	str	r0, [sp, #8]
 80142a4:	9205      	str	r2, [sp, #20]
 80142a6:	d106      	bne.n	80142b6 <_realloc_r+0x1a>
 80142a8:	0011      	movs	r1, r2
 80142aa:	f7ff fd8f 	bl	8013dcc <_malloc_r>
 80142ae:	0007      	movs	r7, r0
 80142b0:	0038      	movs	r0, r7
 80142b2:	b007      	add	sp, #28
 80142b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142b6:	9802      	ldr	r0, [sp, #8]
 80142b8:	f7ff ffbc 	bl	8014234 <__malloc_lock>
 80142bc:	9e05      	ldr	r6, [sp, #20]
 80142be:	360b      	adds	r6, #11
 80142c0:	2e16      	cmp	r6, #22
 80142c2:	d908      	bls.n	80142d6 <_realloc_r+0x3a>
 80142c4:	2307      	movs	r3, #7
 80142c6:	439e      	bics	r6, r3
 80142c8:	9601      	str	r6, [sp, #4]
 80142ca:	d506      	bpl.n	80142da <_realloc_r+0x3e>
 80142cc:	230c      	movs	r3, #12
 80142ce:	9a02      	ldr	r2, [sp, #8]
 80142d0:	2700      	movs	r7, #0
 80142d2:	6013      	str	r3, [r2, #0]
 80142d4:	e7ec      	b.n	80142b0 <_realloc_r+0x14>
 80142d6:	2310      	movs	r3, #16
 80142d8:	9301      	str	r3, [sp, #4]
 80142da:	9b01      	ldr	r3, [sp, #4]
 80142dc:	9a05      	ldr	r2, [sp, #20]
 80142de:	4293      	cmp	r3, r2
 80142e0:	d3f4      	bcc.n	80142cc <_realloc_r+0x30>
 80142e2:	0023      	movs	r3, r4
 80142e4:	3b08      	subs	r3, #8
 80142e6:	685f      	ldr	r7, [r3, #4]
 80142e8:	9304      	str	r3, [sp, #16]
 80142ea:	003a      	movs	r2, r7
 80142ec:	2303      	movs	r3, #3
 80142ee:	439a      	bics	r2, r3
 80142f0:	9b01      	ldr	r3, [sp, #4]
 80142f2:	9203      	str	r2, [sp, #12]
 80142f4:	4293      	cmp	r3, r2
 80142f6:	dc00      	bgt.n	80142fa <_realloc_r+0x5e>
 80142f8:	e16b      	b.n	80145d2 <_realloc_r+0x336>
 80142fa:	9b04      	ldr	r3, [sp, #16]
 80142fc:	48b9      	ldr	r0, [pc, #740]	; (80145e4 <_realloc_r+0x348>)
 80142fe:	189b      	adds	r3, r3, r2
 8014300:	6882      	ldr	r2, [r0, #8]
 8014302:	4694      	mov	ip, r2
 8014304:	685a      	ldr	r2, [r3, #4]
 8014306:	459c      	cmp	ip, r3
 8014308:	d006      	beq.n	8014318 <_realloc_r+0x7c>
 801430a:	2501      	movs	r5, #1
 801430c:	0011      	movs	r1, r2
 801430e:	43a9      	bics	r1, r5
 8014310:	1859      	adds	r1, r3, r1
 8014312:	6849      	ldr	r1, [r1, #4]
 8014314:	4229      	tst	r1, r5
 8014316:	d126      	bne.n	8014366 <_realloc_r+0xca>
 8014318:	2103      	movs	r1, #3
 801431a:	438a      	bics	r2, r1
 801431c:	9903      	ldr	r1, [sp, #12]
 801431e:	188e      	adds	r6, r1, r2
 8014320:	9901      	ldr	r1, [sp, #4]
 8014322:	459c      	cmp	ip, r3
 8014324:	d117      	bne.n	8014356 <_realloc_r+0xba>
 8014326:	3110      	adds	r1, #16
 8014328:	42b1      	cmp	r1, r6
 801432a:	dc1e      	bgt.n	801436a <_realloc_r+0xce>
 801432c:	9901      	ldr	r1, [sp, #4]
 801432e:	9b04      	ldr	r3, [sp, #16]
 8014330:	468c      	mov	ip, r1
 8014332:	4463      	add	r3, ip
 8014334:	6083      	str	r3, [r0, #8]
 8014336:	001a      	movs	r2, r3
 8014338:	1a73      	subs	r3, r6, r1
 801433a:	2601      	movs	r6, #1
 801433c:	4333      	orrs	r3, r6
 801433e:	6053      	str	r3, [r2, #4]
 8014340:	0023      	movs	r3, r4
 8014342:	3b08      	subs	r3, #8
 8014344:	685a      	ldr	r2, [r3, #4]
 8014346:	9802      	ldr	r0, [sp, #8]
 8014348:	4016      	ands	r6, r2
 801434a:	430e      	orrs	r6, r1
 801434c:	605e      	str	r6, [r3, #4]
 801434e:	f7ff ff79 	bl	8014244 <__malloc_unlock>
 8014352:	0027      	movs	r7, r4
 8014354:	e7ac      	b.n	80142b0 <_realloc_r+0x14>
 8014356:	42b1      	cmp	r1, r6
 8014358:	dc07      	bgt.n	801436a <_realloc_r+0xce>
 801435a:	68da      	ldr	r2, [r3, #12]
 801435c:	689b      	ldr	r3, [r3, #8]
 801435e:	60da      	str	r2, [r3, #12]
 8014360:	6093      	str	r3, [r2, #8]
 8014362:	9d04      	ldr	r5, [sp, #16]
 8014364:	e07f      	b.n	8014466 <_realloc_r+0x1ca>
 8014366:	2200      	movs	r2, #0
 8014368:	0013      	movs	r3, r2
 801436a:	07f9      	lsls	r1, r7, #31
 801436c:	d500      	bpl.n	8014370 <_realloc_r+0xd4>
 801436e:	e0e2      	b.n	8014536 <_realloc_r+0x29a>
 8014370:	0021      	movs	r1, r4
 8014372:	3908      	subs	r1, #8
 8014374:	680d      	ldr	r5, [r1, #0]
 8014376:	9904      	ldr	r1, [sp, #16]
 8014378:	1b4d      	subs	r5, r1, r5
 801437a:	2103      	movs	r1, #3
 801437c:	686f      	ldr	r7, [r5, #4]
 801437e:	438f      	bics	r7, r1
 8014380:	9903      	ldr	r1, [sp, #12]
 8014382:	187f      	adds	r7, r7, r1
 8014384:	2b00      	cmp	r3, #0
 8014386:	d100      	bne.n	801438a <_realloc_r+0xee>
 8014388:	e0a0      	b.n	80144cc <_realloc_r+0x230>
 801438a:	19d6      	adds	r6, r2, r7
 801438c:	459c      	cmp	ip, r3
 801438e:	d149      	bne.n	8014424 <_realloc_r+0x188>
 8014390:	9b01      	ldr	r3, [sp, #4]
 8014392:	3310      	adds	r3, #16
 8014394:	42b3      	cmp	r3, r6
 8014396:	dd00      	ble.n	801439a <_realloc_r+0xfe>
 8014398:	e098      	b.n	80144cc <_realloc_r+0x230>
 801439a:	68aa      	ldr	r2, [r5, #8]
 801439c:	68eb      	ldr	r3, [r5, #12]
 801439e:	002f      	movs	r7, r5
 80143a0:	60d3      	str	r3, [r2, #12]
 80143a2:	609a      	str	r2, [r3, #8]
 80143a4:	000a      	movs	r2, r1
 80143a6:	3a04      	subs	r2, #4
 80143a8:	3708      	adds	r7, #8
 80143aa:	2a24      	cmp	r2, #36	; 0x24
 80143ac:	d835      	bhi.n	801441a <_realloc_r+0x17e>
 80143ae:	003b      	movs	r3, r7
 80143b0:	2a13      	cmp	r2, #19
 80143b2:	d908      	bls.n	80143c6 <_realloc_r+0x12a>
 80143b4:	6823      	ldr	r3, [r4, #0]
 80143b6:	60ab      	str	r3, [r5, #8]
 80143b8:	6863      	ldr	r3, [r4, #4]
 80143ba:	60eb      	str	r3, [r5, #12]
 80143bc:	2a1b      	cmp	r2, #27
 80143be:	d81a      	bhi.n	80143f6 <_realloc_r+0x15a>
 80143c0:	002b      	movs	r3, r5
 80143c2:	3408      	adds	r4, #8
 80143c4:	3310      	adds	r3, #16
 80143c6:	6822      	ldr	r2, [r4, #0]
 80143c8:	601a      	str	r2, [r3, #0]
 80143ca:	6862      	ldr	r2, [r4, #4]
 80143cc:	605a      	str	r2, [r3, #4]
 80143ce:	68a2      	ldr	r2, [r4, #8]
 80143d0:	609a      	str	r2, [r3, #8]
 80143d2:	9b01      	ldr	r3, [sp, #4]
 80143d4:	18ea      	adds	r2, r5, r3
 80143d6:	4b83      	ldr	r3, [pc, #524]	; (80145e4 <_realloc_r+0x348>)
 80143d8:	609a      	str	r2, [r3, #8]
 80143da:	9b01      	ldr	r3, [sp, #4]
 80143dc:	1af3      	subs	r3, r6, r3
 80143de:	2601      	movs	r6, #1
 80143e0:	4333      	orrs	r3, r6
 80143e2:	6053      	str	r3, [r2, #4]
 80143e4:	686b      	ldr	r3, [r5, #4]
 80143e6:	401e      	ands	r6, r3
 80143e8:	9b01      	ldr	r3, [sp, #4]
 80143ea:	431e      	orrs	r6, r3
 80143ec:	606e      	str	r6, [r5, #4]
 80143ee:	9802      	ldr	r0, [sp, #8]
 80143f0:	f7ff ff28 	bl	8014244 <__malloc_unlock>
 80143f4:	e75c      	b.n	80142b0 <_realloc_r+0x14>
 80143f6:	68a3      	ldr	r3, [r4, #8]
 80143f8:	612b      	str	r3, [r5, #16]
 80143fa:	68e3      	ldr	r3, [r4, #12]
 80143fc:	616b      	str	r3, [r5, #20]
 80143fe:	2a24      	cmp	r2, #36	; 0x24
 8014400:	d003      	beq.n	801440a <_realloc_r+0x16e>
 8014402:	002b      	movs	r3, r5
 8014404:	3410      	adds	r4, #16
 8014406:	3318      	adds	r3, #24
 8014408:	e7dd      	b.n	80143c6 <_realloc_r+0x12a>
 801440a:	6923      	ldr	r3, [r4, #16]
 801440c:	61ab      	str	r3, [r5, #24]
 801440e:	002b      	movs	r3, r5
 8014410:	6962      	ldr	r2, [r4, #20]
 8014412:	3320      	adds	r3, #32
 8014414:	61ea      	str	r2, [r5, #28]
 8014416:	3418      	adds	r4, #24
 8014418:	e7d5      	b.n	80143c6 <_realloc_r+0x12a>
 801441a:	0021      	movs	r1, r4
 801441c:	0038      	movs	r0, r7
 801441e:	f003 fe50 	bl	80180c2 <memmove>
 8014422:	e7d6      	b.n	80143d2 <_realloc_r+0x136>
 8014424:	9a01      	ldr	r2, [sp, #4]
 8014426:	42b2      	cmp	r2, r6
 8014428:	dc50      	bgt.n	80144cc <_realloc_r+0x230>
 801442a:	0028      	movs	r0, r5
 801442c:	68da      	ldr	r2, [r3, #12]
 801442e:	689b      	ldr	r3, [r3, #8]
 8014430:	3008      	adds	r0, #8
 8014432:	60da      	str	r2, [r3, #12]
 8014434:	6093      	str	r3, [r2, #8]
 8014436:	68aa      	ldr	r2, [r5, #8]
 8014438:	68eb      	ldr	r3, [r5, #12]
 801443a:	60d3      	str	r3, [r2, #12]
 801443c:	609a      	str	r2, [r3, #8]
 801443e:	9a03      	ldr	r2, [sp, #12]
 8014440:	3a04      	subs	r2, #4
 8014442:	2a24      	cmp	r2, #36	; 0x24
 8014444:	d83e      	bhi.n	80144c4 <_realloc_r+0x228>
 8014446:	2a13      	cmp	r2, #19
 8014448:	d907      	bls.n	801445a <_realloc_r+0x1be>
 801444a:	6823      	ldr	r3, [r4, #0]
 801444c:	60ab      	str	r3, [r5, #8]
 801444e:	6863      	ldr	r3, [r4, #4]
 8014450:	60eb      	str	r3, [r5, #12]
 8014452:	2a1b      	cmp	r2, #27
 8014454:	d824      	bhi.n	80144a0 <_realloc_r+0x204>
 8014456:	3408      	adds	r4, #8
 8014458:	3008      	adds	r0, #8
 801445a:	6823      	ldr	r3, [r4, #0]
 801445c:	6003      	str	r3, [r0, #0]
 801445e:	6863      	ldr	r3, [r4, #4]
 8014460:	6043      	str	r3, [r0, #4]
 8014462:	68a3      	ldr	r3, [r4, #8]
 8014464:	6083      	str	r3, [r0, #8]
 8014466:	9b01      	ldr	r3, [sp, #4]
 8014468:	6868      	ldr	r0, [r5, #4]
 801446a:	1af4      	subs	r4, r6, r3
 801446c:	2301      	movs	r3, #1
 801446e:	19aa      	adds	r2, r5, r6
 8014470:	4018      	ands	r0, r3
 8014472:	2c0f      	cmp	r4, #15
 8014474:	d800      	bhi.n	8014478 <_realloc_r+0x1dc>
 8014476:	e0ae      	b.n	80145d6 <_realloc_r+0x33a>
 8014478:	9901      	ldr	r1, [sp, #4]
 801447a:	9e01      	ldr	r6, [sp, #4]
 801447c:	1869      	adds	r1, r5, r1
 801447e:	4330      	orrs	r0, r6
 8014480:	431c      	orrs	r4, r3
 8014482:	6068      	str	r0, [r5, #4]
 8014484:	604c      	str	r4, [r1, #4]
 8014486:	6850      	ldr	r0, [r2, #4]
 8014488:	3108      	adds	r1, #8
 801448a:	4303      	orrs	r3, r0
 801448c:	6053      	str	r3, [r2, #4]
 801448e:	9802      	ldr	r0, [sp, #8]
 8014490:	f003 f9c6 	bl	8017820 <_free_r>
 8014494:	9802      	ldr	r0, [sp, #8]
 8014496:	3508      	adds	r5, #8
 8014498:	f7ff fed4 	bl	8014244 <__malloc_unlock>
 801449c:	002f      	movs	r7, r5
 801449e:	e707      	b.n	80142b0 <_realloc_r+0x14>
 80144a0:	68a3      	ldr	r3, [r4, #8]
 80144a2:	612b      	str	r3, [r5, #16]
 80144a4:	68e3      	ldr	r3, [r4, #12]
 80144a6:	616b      	str	r3, [r5, #20]
 80144a8:	2a24      	cmp	r2, #36	; 0x24
 80144aa:	d003      	beq.n	80144b4 <_realloc_r+0x218>
 80144ac:	0028      	movs	r0, r5
 80144ae:	3410      	adds	r4, #16
 80144b0:	3018      	adds	r0, #24
 80144b2:	e7d2      	b.n	801445a <_realloc_r+0x1be>
 80144b4:	0028      	movs	r0, r5
 80144b6:	6923      	ldr	r3, [r4, #16]
 80144b8:	3020      	adds	r0, #32
 80144ba:	61ab      	str	r3, [r5, #24]
 80144bc:	6963      	ldr	r3, [r4, #20]
 80144be:	3418      	adds	r4, #24
 80144c0:	61eb      	str	r3, [r5, #28]
 80144c2:	e7ca      	b.n	801445a <_realloc_r+0x1be>
 80144c4:	0021      	movs	r1, r4
 80144c6:	f003 fdfc 	bl	80180c2 <memmove>
 80144ca:	e7cc      	b.n	8014466 <_realloc_r+0x1ca>
 80144cc:	9b01      	ldr	r3, [sp, #4]
 80144ce:	42bb      	cmp	r3, r7
 80144d0:	dc31      	bgt.n	8014536 <_realloc_r+0x29a>
 80144d2:	0028      	movs	r0, r5
 80144d4:	68aa      	ldr	r2, [r5, #8]
 80144d6:	68eb      	ldr	r3, [r5, #12]
 80144d8:	3008      	adds	r0, #8
 80144da:	60d3      	str	r3, [r2, #12]
 80144dc:	609a      	str	r2, [r3, #8]
 80144de:	9a03      	ldr	r2, [sp, #12]
 80144e0:	3a04      	subs	r2, #4
 80144e2:	2a24      	cmp	r2, #36	; 0x24
 80144e4:	d823      	bhi.n	801452e <_realloc_r+0x292>
 80144e6:	2a13      	cmp	r2, #19
 80144e8:	d907      	bls.n	80144fa <_realloc_r+0x25e>
 80144ea:	6823      	ldr	r3, [r4, #0]
 80144ec:	60ab      	str	r3, [r5, #8]
 80144ee:	6863      	ldr	r3, [r4, #4]
 80144f0:	60eb      	str	r3, [r5, #12]
 80144f2:	2a1b      	cmp	r2, #27
 80144f4:	d809      	bhi.n	801450a <_realloc_r+0x26e>
 80144f6:	3408      	adds	r4, #8
 80144f8:	3008      	adds	r0, #8
 80144fa:	6823      	ldr	r3, [r4, #0]
 80144fc:	6003      	str	r3, [r0, #0]
 80144fe:	6863      	ldr	r3, [r4, #4]
 8014500:	6043      	str	r3, [r0, #4]
 8014502:	68a3      	ldr	r3, [r4, #8]
 8014504:	6083      	str	r3, [r0, #8]
 8014506:	003e      	movs	r6, r7
 8014508:	e7ad      	b.n	8014466 <_realloc_r+0x1ca>
 801450a:	68a3      	ldr	r3, [r4, #8]
 801450c:	612b      	str	r3, [r5, #16]
 801450e:	68e3      	ldr	r3, [r4, #12]
 8014510:	616b      	str	r3, [r5, #20]
 8014512:	2a24      	cmp	r2, #36	; 0x24
 8014514:	d003      	beq.n	801451e <_realloc_r+0x282>
 8014516:	0028      	movs	r0, r5
 8014518:	3410      	adds	r4, #16
 801451a:	3018      	adds	r0, #24
 801451c:	e7ed      	b.n	80144fa <_realloc_r+0x25e>
 801451e:	0028      	movs	r0, r5
 8014520:	6923      	ldr	r3, [r4, #16]
 8014522:	3020      	adds	r0, #32
 8014524:	61ab      	str	r3, [r5, #24]
 8014526:	6963      	ldr	r3, [r4, #20]
 8014528:	3418      	adds	r4, #24
 801452a:	61eb      	str	r3, [r5, #28]
 801452c:	e7e5      	b.n	80144fa <_realloc_r+0x25e>
 801452e:	0021      	movs	r1, r4
 8014530:	f003 fdc7 	bl	80180c2 <memmove>
 8014534:	e7e7      	b.n	8014506 <_realloc_r+0x26a>
 8014536:	9905      	ldr	r1, [sp, #20]
 8014538:	9802      	ldr	r0, [sp, #8]
 801453a:	f7ff fc47 	bl	8013dcc <_malloc_r>
 801453e:	1e07      	subs	r7, r0, #0
 8014540:	d100      	bne.n	8014544 <_realloc_r+0x2a8>
 8014542:	e754      	b.n	80143ee <_realloc_r+0x152>
 8014544:	0023      	movs	r3, r4
 8014546:	2201      	movs	r2, #1
 8014548:	3b08      	subs	r3, #8
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	4393      	bics	r3, r2
 801454e:	9a04      	ldr	r2, [sp, #16]
 8014550:	18d3      	adds	r3, r2, r3
 8014552:	0002      	movs	r2, r0
 8014554:	3a08      	subs	r2, #8
 8014556:	4293      	cmp	r3, r2
 8014558:	d105      	bne.n	8014566 <_realloc_r+0x2ca>
 801455a:	685e      	ldr	r6, [r3, #4]
 801455c:	2303      	movs	r3, #3
 801455e:	439e      	bics	r6, r3
 8014560:	9b03      	ldr	r3, [sp, #12]
 8014562:	18f6      	adds	r6, r6, r3
 8014564:	e6fd      	b.n	8014362 <_realloc_r+0xc6>
 8014566:	9a03      	ldr	r2, [sp, #12]
 8014568:	3a04      	subs	r2, #4
 801456a:	2a24      	cmp	r2, #36	; 0x24
 801456c:	d82d      	bhi.n	80145ca <_realloc_r+0x32e>
 801456e:	2a13      	cmp	r2, #19
 8014570:	d928      	bls.n	80145c4 <_realloc_r+0x328>
 8014572:	6823      	ldr	r3, [r4, #0]
 8014574:	6003      	str	r3, [r0, #0]
 8014576:	6863      	ldr	r3, [r4, #4]
 8014578:	6043      	str	r3, [r0, #4]
 801457a:	2a1b      	cmp	r2, #27
 801457c:	d80e      	bhi.n	801459c <_realloc_r+0x300>
 801457e:	0022      	movs	r2, r4
 8014580:	0003      	movs	r3, r0
 8014582:	3208      	adds	r2, #8
 8014584:	3308      	adds	r3, #8
 8014586:	6811      	ldr	r1, [r2, #0]
 8014588:	6019      	str	r1, [r3, #0]
 801458a:	6851      	ldr	r1, [r2, #4]
 801458c:	6059      	str	r1, [r3, #4]
 801458e:	6892      	ldr	r2, [r2, #8]
 8014590:	609a      	str	r2, [r3, #8]
 8014592:	0021      	movs	r1, r4
 8014594:	9802      	ldr	r0, [sp, #8]
 8014596:	f003 f943 	bl	8017820 <_free_r>
 801459a:	e728      	b.n	80143ee <_realloc_r+0x152>
 801459c:	68a3      	ldr	r3, [r4, #8]
 801459e:	6083      	str	r3, [r0, #8]
 80145a0:	68e3      	ldr	r3, [r4, #12]
 80145a2:	60c3      	str	r3, [r0, #12]
 80145a4:	2a24      	cmp	r2, #36	; 0x24
 80145a6:	d004      	beq.n	80145b2 <_realloc_r+0x316>
 80145a8:	0022      	movs	r2, r4
 80145aa:	0003      	movs	r3, r0
 80145ac:	3210      	adds	r2, #16
 80145ae:	3310      	adds	r3, #16
 80145b0:	e7e9      	b.n	8014586 <_realloc_r+0x2ea>
 80145b2:	6923      	ldr	r3, [r4, #16]
 80145b4:	0022      	movs	r2, r4
 80145b6:	6103      	str	r3, [r0, #16]
 80145b8:	0003      	movs	r3, r0
 80145ba:	6961      	ldr	r1, [r4, #20]
 80145bc:	3218      	adds	r2, #24
 80145be:	3318      	adds	r3, #24
 80145c0:	6141      	str	r1, [r0, #20]
 80145c2:	e7e0      	b.n	8014586 <_realloc_r+0x2ea>
 80145c4:	0003      	movs	r3, r0
 80145c6:	0022      	movs	r2, r4
 80145c8:	e7dd      	b.n	8014586 <_realloc_r+0x2ea>
 80145ca:	0021      	movs	r1, r4
 80145cc:	f003 fd79 	bl	80180c2 <memmove>
 80145d0:	e7df      	b.n	8014592 <_realloc_r+0x2f6>
 80145d2:	9e03      	ldr	r6, [sp, #12]
 80145d4:	e6c5      	b.n	8014362 <_realloc_r+0xc6>
 80145d6:	4306      	orrs	r6, r0
 80145d8:	606e      	str	r6, [r5, #4]
 80145da:	6851      	ldr	r1, [r2, #4]
 80145dc:	430b      	orrs	r3, r1
 80145de:	6053      	str	r3, [r2, #4]
 80145e0:	e758      	b.n	8014494 <_realloc_r+0x1f8>
 80145e2:	46c0      	nop			; (mov r8, r8)
 80145e4:	200004d8 	.word	0x200004d8

080145e8 <_sbrk_r>:
 80145e8:	2300      	movs	r3, #0
 80145ea:	b570      	push	{r4, r5, r6, lr}
 80145ec:	4d06      	ldr	r5, [pc, #24]	; (8014608 <_sbrk_r+0x20>)
 80145ee:	0004      	movs	r4, r0
 80145f0:	0008      	movs	r0, r1
 80145f2:	602b      	str	r3, [r5, #0]
 80145f4:	f005 fede 	bl	801a3b4 <_sbrk>
 80145f8:	1c43      	adds	r3, r0, #1
 80145fa:	d103      	bne.n	8014604 <_sbrk_r+0x1c>
 80145fc:	682b      	ldr	r3, [r5, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d000      	beq.n	8014604 <_sbrk_r+0x1c>
 8014602:	6023      	str	r3, [r4, #0]
 8014604:	bd70      	pop	{r4, r5, r6, pc}
 8014606:	46c0      	nop			; (mov r8, r8)
 8014608:	20006fc4 	.word	0x20006fc4

0801460c <sprintf>:
 801460c:	b40e      	push	{r1, r2, r3}
 801460e:	b500      	push	{lr}
 8014610:	490b      	ldr	r1, [pc, #44]	; (8014640 <sprintf+0x34>)
 8014612:	b09c      	sub	sp, #112	; 0x70
 8014614:	ab1d      	add	r3, sp, #116	; 0x74
 8014616:	9002      	str	r0, [sp, #8]
 8014618:	9006      	str	r0, [sp, #24]
 801461a:	9107      	str	r1, [sp, #28]
 801461c:	9104      	str	r1, [sp, #16]
 801461e:	4809      	ldr	r0, [pc, #36]	; (8014644 <sprintf+0x38>)
 8014620:	4909      	ldr	r1, [pc, #36]	; (8014648 <sprintf+0x3c>)
 8014622:	cb04      	ldmia	r3!, {r2}
 8014624:	9105      	str	r1, [sp, #20]
 8014626:	6800      	ldr	r0, [r0, #0]
 8014628:	a902      	add	r1, sp, #8
 801462a:	9301      	str	r3, [sp, #4]
 801462c:	f000 ff74 	bl	8015518 <_svfprintf_r>
 8014630:	2300      	movs	r3, #0
 8014632:	9a02      	ldr	r2, [sp, #8]
 8014634:	7013      	strb	r3, [r2, #0]
 8014636:	b01c      	add	sp, #112	; 0x70
 8014638:	bc08      	pop	{r3}
 801463a:	b003      	add	sp, #12
 801463c:	4718      	bx	r3
 801463e:	46c0      	nop			; (mov r8, r8)
 8014640:	7fffffff 	.word	0x7fffffff
 8014644:	200000a8 	.word	0x200000a8
 8014648:	ffff0208 	.word	0xffff0208

0801464c <strcat>:
 801464c:	0002      	movs	r2, r0
 801464e:	b510      	push	{r4, lr}
 8014650:	7813      	ldrb	r3, [r2, #0]
 8014652:	0014      	movs	r4, r2
 8014654:	3201      	adds	r2, #1
 8014656:	2b00      	cmp	r3, #0
 8014658:	d1fa      	bne.n	8014650 <strcat+0x4>
 801465a:	5cca      	ldrb	r2, [r1, r3]
 801465c:	54e2      	strb	r2, [r4, r3]
 801465e:	3301      	adds	r3, #1
 8014660:	2a00      	cmp	r2, #0
 8014662:	d1fa      	bne.n	801465a <strcat+0xe>
 8014664:	bd10      	pop	{r4, pc}

08014666 <strchr>:
 8014666:	b2c9      	uxtb	r1, r1
 8014668:	7803      	ldrb	r3, [r0, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d004      	beq.n	8014678 <strchr+0x12>
 801466e:	428b      	cmp	r3, r1
 8014670:	d100      	bne.n	8014674 <strchr+0xe>
 8014672:	4770      	bx	lr
 8014674:	3001      	adds	r0, #1
 8014676:	e7f7      	b.n	8014668 <strchr+0x2>
 8014678:	424b      	negs	r3, r1
 801467a:	4159      	adcs	r1, r3
 801467c:	4249      	negs	r1, r1
 801467e:	4008      	ands	r0, r1
 8014680:	e7f7      	b.n	8014672 <strchr+0xc>

08014682 <strcpy>:
 8014682:	0003      	movs	r3, r0
 8014684:	780a      	ldrb	r2, [r1, #0]
 8014686:	3101      	adds	r1, #1
 8014688:	701a      	strb	r2, [r3, #0]
 801468a:	3301      	adds	r3, #1
 801468c:	2a00      	cmp	r2, #0
 801468e:	d1f9      	bne.n	8014684 <strcpy+0x2>
 8014690:	4770      	bx	lr

08014692 <strncmp>:
 8014692:	b530      	push	{r4, r5, lr}
 8014694:	0005      	movs	r5, r0
 8014696:	1e10      	subs	r0, r2, #0
 8014698:	d00b      	beq.n	80146b2 <strncmp+0x20>
 801469a:	2400      	movs	r4, #0
 801469c:	3a01      	subs	r2, #1
 801469e:	5d2b      	ldrb	r3, [r5, r4]
 80146a0:	5d08      	ldrb	r0, [r1, r4]
 80146a2:	4283      	cmp	r3, r0
 80146a4:	d104      	bne.n	80146b0 <strncmp+0x1e>
 80146a6:	4294      	cmp	r4, r2
 80146a8:	d002      	beq.n	80146b0 <strncmp+0x1e>
 80146aa:	3401      	adds	r4, #1
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d1f6      	bne.n	801469e <strncmp+0xc>
 80146b0:	1a18      	subs	r0, r3, r0
 80146b2:	bd30      	pop	{r4, r5, pc}

080146b4 <strncpy>:
 80146b4:	0003      	movs	r3, r0
 80146b6:	b530      	push	{r4, r5, lr}
 80146b8:	001d      	movs	r5, r3
 80146ba:	2a00      	cmp	r2, #0
 80146bc:	d006      	beq.n	80146cc <strncpy+0x18>
 80146be:	780c      	ldrb	r4, [r1, #0]
 80146c0:	3a01      	subs	r2, #1
 80146c2:	3301      	adds	r3, #1
 80146c4:	702c      	strb	r4, [r5, #0]
 80146c6:	3101      	adds	r1, #1
 80146c8:	2c00      	cmp	r4, #0
 80146ca:	d1f5      	bne.n	80146b8 <strncpy+0x4>
 80146cc:	2100      	movs	r1, #0
 80146ce:	189a      	adds	r2, r3, r2
 80146d0:	4293      	cmp	r3, r2
 80146d2:	d100      	bne.n	80146d6 <strncpy+0x22>
 80146d4:	bd30      	pop	{r4, r5, pc}
 80146d6:	7019      	strb	r1, [r3, #0]
 80146d8:	3301      	adds	r3, #1
 80146da:	e7f9      	b.n	80146d0 <strncpy+0x1c>

080146dc <sulp>:
 80146dc:	b570      	push	{r4, r5, r6, lr}
 80146de:	0016      	movs	r6, r2
 80146e0:	000d      	movs	r5, r1
 80146e2:	f004 f837 	bl	8018754 <__ulp>
 80146e6:	2e00      	cmp	r6, #0
 80146e8:	d00d      	beq.n	8014706 <sulp+0x2a>
 80146ea:	236b      	movs	r3, #107	; 0x6b
 80146ec:	006a      	lsls	r2, r5, #1
 80146ee:	0d52      	lsrs	r2, r2, #21
 80146f0:	1a9b      	subs	r3, r3, r2
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	dd07      	ble.n	8014706 <sulp+0x2a>
 80146f6:	2400      	movs	r4, #0
 80146f8:	4a03      	ldr	r2, [pc, #12]	; (8014708 <sulp+0x2c>)
 80146fa:	051b      	lsls	r3, r3, #20
 80146fc:	189d      	adds	r5, r3, r2
 80146fe:	002b      	movs	r3, r5
 8014700:	0022      	movs	r2, r4
 8014702:	f7ed fc1b 	bl	8001f3c <__aeabi_dmul>
 8014706:	bd70      	pop	{r4, r5, r6, pc}
 8014708:	3ff00000 	.word	0x3ff00000

0801470c <_strtod_l>:
 801470c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801470e:	001d      	movs	r5, r3
 8014710:	2300      	movs	r3, #0
 8014712:	b0a7      	sub	sp, #156	; 0x9c
 8014714:	9322      	str	r3, [sp, #136]	; 0x88
 8014716:	4bae      	ldr	r3, [pc, #696]	; (80149d0 <_strtod_l+0x2c4>)
 8014718:	9005      	str	r0, [sp, #20]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	9108      	str	r1, [sp, #32]
 801471e:	0018      	movs	r0, r3
 8014720:	9307      	str	r3, [sp, #28]
 8014722:	921d      	str	r2, [sp, #116]	; 0x74
 8014724:	f7eb fcf8 	bl	8000118 <strlen>
 8014728:	2600      	movs	r6, #0
 801472a:	0004      	movs	r4, r0
 801472c:	2700      	movs	r7, #0
 801472e:	9b08      	ldr	r3, [sp, #32]
 8014730:	9321      	str	r3, [sp, #132]	; 0x84
 8014732:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014734:	7813      	ldrb	r3, [r2, #0]
 8014736:	2b2b      	cmp	r3, #43	; 0x2b
 8014738:	d058      	beq.n	80147ec <_strtod_l+0xe0>
 801473a:	d844      	bhi.n	80147c6 <_strtod_l+0xba>
 801473c:	2b0d      	cmp	r3, #13
 801473e:	d83d      	bhi.n	80147bc <_strtod_l+0xb0>
 8014740:	2b08      	cmp	r3, #8
 8014742:	d83d      	bhi.n	80147c0 <_strtod_l+0xb4>
 8014744:	2b00      	cmp	r3, #0
 8014746:	d047      	beq.n	80147d8 <_strtod_l+0xcc>
 8014748:	2300      	movs	r3, #0
 801474a:	9310      	str	r3, [sp, #64]	; 0x40
 801474c:	2200      	movs	r2, #0
 801474e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014750:	920a      	str	r2, [sp, #40]	; 0x28
 8014752:	9306      	str	r3, [sp, #24]
 8014754:	781b      	ldrb	r3, [r3, #0]
 8014756:	2b30      	cmp	r3, #48	; 0x30
 8014758:	d000      	beq.n	801475c <_strtod_l+0x50>
 801475a:	e083      	b.n	8014864 <_strtod_l+0x158>
 801475c:	9b06      	ldr	r3, [sp, #24]
 801475e:	3220      	adds	r2, #32
 8014760:	785b      	ldrb	r3, [r3, #1]
 8014762:	4393      	bics	r3, r2
 8014764:	2b58      	cmp	r3, #88	; 0x58
 8014766:	d000      	beq.n	801476a <_strtod_l+0x5e>
 8014768:	e072      	b.n	8014850 <_strtod_l+0x144>
 801476a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801476c:	9502      	str	r5, [sp, #8]
 801476e:	9301      	str	r3, [sp, #4]
 8014770:	ab22      	add	r3, sp, #136	; 0x88
 8014772:	9300      	str	r3, [sp, #0]
 8014774:	4a97      	ldr	r2, [pc, #604]	; (80149d4 <_strtod_l+0x2c8>)
 8014776:	ab23      	add	r3, sp, #140	; 0x8c
 8014778:	9805      	ldr	r0, [sp, #20]
 801477a:	a921      	add	r1, sp, #132	; 0x84
 801477c:	f003 f96c 	bl	8017a58 <__gethex>
 8014780:	2307      	movs	r3, #7
 8014782:	0005      	movs	r5, r0
 8014784:	0004      	movs	r4, r0
 8014786:	401d      	ands	r5, r3
 8014788:	4218      	tst	r0, r3
 801478a:	d006      	beq.n	801479a <_strtod_l+0x8e>
 801478c:	2d06      	cmp	r5, #6
 801478e:	d12f      	bne.n	80147f0 <_strtod_l+0xe4>
 8014790:	9b06      	ldr	r3, [sp, #24]
 8014792:	3301      	adds	r3, #1
 8014794:	9321      	str	r3, [sp, #132]	; 0x84
 8014796:	2300      	movs	r3, #0
 8014798:	9310      	str	r3, [sp, #64]	; 0x40
 801479a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801479c:	2b00      	cmp	r3, #0
 801479e:	d002      	beq.n	80147a6 <_strtod_l+0x9a>
 80147a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80147a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80147a4:	601a      	str	r2, [r3, #0]
 80147a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d01c      	beq.n	80147e6 <_strtod_l+0xda>
 80147ac:	2380      	movs	r3, #128	; 0x80
 80147ae:	0032      	movs	r2, r6
 80147b0:	061b      	lsls	r3, r3, #24
 80147b2:	18fb      	adds	r3, r7, r3
 80147b4:	0010      	movs	r0, r2
 80147b6:	0019      	movs	r1, r3
 80147b8:	b027      	add	sp, #156	; 0x9c
 80147ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147bc:	2b20      	cmp	r3, #32
 80147be:	d1c3      	bne.n	8014748 <_strtod_l+0x3c>
 80147c0:	3201      	adds	r2, #1
 80147c2:	9221      	str	r2, [sp, #132]	; 0x84
 80147c4:	e7b5      	b.n	8014732 <_strtod_l+0x26>
 80147c6:	2b2d      	cmp	r3, #45	; 0x2d
 80147c8:	d1be      	bne.n	8014748 <_strtod_l+0x3c>
 80147ca:	3b2c      	subs	r3, #44	; 0x2c
 80147cc:	9310      	str	r3, [sp, #64]	; 0x40
 80147ce:	1c53      	adds	r3, r2, #1
 80147d0:	9321      	str	r3, [sp, #132]	; 0x84
 80147d2:	7853      	ldrb	r3, [r2, #1]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d1b9      	bne.n	801474c <_strtod_l+0x40>
 80147d8:	9b08      	ldr	r3, [sp, #32]
 80147da:	9321      	str	r3, [sp, #132]	; 0x84
 80147dc:	2300      	movs	r3, #0
 80147de:	9310      	str	r3, [sp, #64]	; 0x40
 80147e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d1dc      	bne.n	80147a0 <_strtod_l+0x94>
 80147e6:	0032      	movs	r2, r6
 80147e8:	003b      	movs	r3, r7
 80147ea:	e7e3      	b.n	80147b4 <_strtod_l+0xa8>
 80147ec:	2300      	movs	r3, #0
 80147ee:	e7ed      	b.n	80147cc <_strtod_l+0xc0>
 80147f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80147f2:	2a00      	cmp	r2, #0
 80147f4:	d007      	beq.n	8014806 <_strtod_l+0xfa>
 80147f6:	2135      	movs	r1, #53	; 0x35
 80147f8:	a824      	add	r0, sp, #144	; 0x90
 80147fa:	f004 f8aa 	bl	8018952 <__copybits>
 80147fe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014800:	9805      	ldr	r0, [sp, #20]
 8014802:	f003 fc99 	bl	8018138 <_Bfree>
 8014806:	1e68      	subs	r0, r5, #1
 8014808:	2805      	cmp	r0, #5
 801480a:	d806      	bhi.n	801481a <_strtod_l+0x10e>
 801480c:	f7eb fc8c 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014810:	1c190b0e 	.word	0x1c190b0e
 8014814:	030e      	.short	0x030e
 8014816:	2700      	movs	r7, #0
 8014818:	003e      	movs	r6, r7
 801481a:	0723      	lsls	r3, r4, #28
 801481c:	d5bd      	bpl.n	801479a <_strtod_l+0x8e>
 801481e:	2380      	movs	r3, #128	; 0x80
 8014820:	061b      	lsls	r3, r3, #24
 8014822:	431f      	orrs	r7, r3
 8014824:	e7b9      	b.n	801479a <_strtod_l+0x8e>
 8014826:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014828:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801482a:	e7f6      	b.n	801481a <_strtod_l+0x10e>
 801482c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801482e:	4a6a      	ldr	r2, [pc, #424]	; (80149d8 <_strtod_l+0x2cc>)
 8014830:	496a      	ldr	r1, [pc, #424]	; (80149dc <_strtod_l+0x2d0>)
 8014832:	401a      	ands	r2, r3
 8014834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014836:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014838:	185b      	adds	r3, r3, r1
 801483a:	051b      	lsls	r3, r3, #20
 801483c:	431a      	orrs	r2, r3
 801483e:	0017      	movs	r7, r2
 8014840:	e7eb      	b.n	801481a <_strtod_l+0x10e>
 8014842:	2600      	movs	r6, #0
 8014844:	4f66      	ldr	r7, [pc, #408]	; (80149e0 <_strtod_l+0x2d4>)
 8014846:	e7e8      	b.n	801481a <_strtod_l+0x10e>
 8014848:	2601      	movs	r6, #1
 801484a:	4f66      	ldr	r7, [pc, #408]	; (80149e4 <_strtod_l+0x2d8>)
 801484c:	4276      	negs	r6, r6
 801484e:	e7e4      	b.n	801481a <_strtod_l+0x10e>
 8014850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014852:	1c5a      	adds	r2, r3, #1
 8014854:	9221      	str	r2, [sp, #132]	; 0x84
 8014856:	785b      	ldrb	r3, [r3, #1]
 8014858:	2b30      	cmp	r3, #48	; 0x30
 801485a:	d0f9      	beq.n	8014850 <_strtod_l+0x144>
 801485c:	2b00      	cmp	r3, #0
 801485e:	d09c      	beq.n	801479a <_strtod_l+0x8e>
 8014860:	2301      	movs	r3, #1
 8014862:	930a      	str	r3, [sp, #40]	; 0x28
 8014864:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014866:	220a      	movs	r2, #10
 8014868:	9311      	str	r3, [sp, #68]	; 0x44
 801486a:	2300      	movs	r3, #0
 801486c:	930e      	str	r3, [sp, #56]	; 0x38
 801486e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014870:	9309      	str	r3, [sp, #36]	; 0x24
 8014872:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014874:	7805      	ldrb	r5, [r0, #0]
 8014876:	002b      	movs	r3, r5
 8014878:	3b30      	subs	r3, #48	; 0x30
 801487a:	b2d9      	uxtb	r1, r3
 801487c:	2909      	cmp	r1, #9
 801487e:	d927      	bls.n	80148d0 <_strtod_l+0x1c4>
 8014880:	0022      	movs	r2, r4
 8014882:	9907      	ldr	r1, [sp, #28]
 8014884:	f7ff ff05 	bl	8014692 <strncmp>
 8014888:	2800      	cmp	r0, #0
 801488a:	d033      	beq.n	80148f4 <_strtod_l+0x1e8>
 801488c:	2000      	movs	r0, #0
 801488e:	002b      	movs	r3, r5
 8014890:	4684      	mov	ip, r0
 8014892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014894:	900c      	str	r0, [sp, #48]	; 0x30
 8014896:	9206      	str	r2, [sp, #24]
 8014898:	2220      	movs	r2, #32
 801489a:	0019      	movs	r1, r3
 801489c:	4391      	bics	r1, r2
 801489e:	000a      	movs	r2, r1
 80148a0:	2100      	movs	r1, #0
 80148a2:	9107      	str	r1, [sp, #28]
 80148a4:	2a45      	cmp	r2, #69	; 0x45
 80148a6:	d000      	beq.n	80148aa <_strtod_l+0x19e>
 80148a8:	e0c5      	b.n	8014a36 <_strtod_l+0x32a>
 80148aa:	9b06      	ldr	r3, [sp, #24]
 80148ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148ae:	4303      	orrs	r3, r0
 80148b0:	4313      	orrs	r3, r2
 80148b2:	428b      	cmp	r3, r1
 80148b4:	d090      	beq.n	80147d8 <_strtod_l+0xcc>
 80148b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148b8:	9308      	str	r3, [sp, #32]
 80148ba:	3301      	adds	r3, #1
 80148bc:	9321      	str	r3, [sp, #132]	; 0x84
 80148be:	9b08      	ldr	r3, [sp, #32]
 80148c0:	785b      	ldrb	r3, [r3, #1]
 80148c2:	2b2b      	cmp	r3, #43	; 0x2b
 80148c4:	d075      	beq.n	80149b2 <_strtod_l+0x2a6>
 80148c6:	000c      	movs	r4, r1
 80148c8:	2b2d      	cmp	r3, #45	; 0x2d
 80148ca:	d178      	bne.n	80149be <_strtod_l+0x2b2>
 80148cc:	2401      	movs	r4, #1
 80148ce:	e071      	b.n	80149b4 <_strtod_l+0x2a8>
 80148d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80148d2:	2908      	cmp	r1, #8
 80148d4:	dc09      	bgt.n	80148ea <_strtod_l+0x1de>
 80148d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148d8:	4351      	muls	r1, r2
 80148da:	185b      	adds	r3, r3, r1
 80148dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80148de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148e0:	3001      	adds	r0, #1
 80148e2:	3301      	adds	r3, #1
 80148e4:	9309      	str	r3, [sp, #36]	; 0x24
 80148e6:	9021      	str	r0, [sp, #132]	; 0x84
 80148e8:	e7c3      	b.n	8014872 <_strtod_l+0x166>
 80148ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80148ec:	4351      	muls	r1, r2
 80148ee:	185b      	adds	r3, r3, r1
 80148f0:	930e      	str	r3, [sp, #56]	; 0x38
 80148f2:	e7f4      	b.n	80148de <_strtod_l+0x1d2>
 80148f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148f8:	191c      	adds	r4, r3, r4
 80148fa:	9421      	str	r4, [sp, #132]	; 0x84
 80148fc:	7823      	ldrb	r3, [r4, #0]
 80148fe:	2a00      	cmp	r2, #0
 8014900:	d039      	beq.n	8014976 <_strtod_l+0x26a>
 8014902:	900c      	str	r0, [sp, #48]	; 0x30
 8014904:	9206      	str	r2, [sp, #24]
 8014906:	001a      	movs	r2, r3
 8014908:	3a30      	subs	r2, #48	; 0x30
 801490a:	2a09      	cmp	r2, #9
 801490c:	d912      	bls.n	8014934 <_strtod_l+0x228>
 801490e:	2201      	movs	r2, #1
 8014910:	4694      	mov	ip, r2
 8014912:	e7c1      	b.n	8014898 <_strtod_l+0x18c>
 8014914:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014916:	3001      	adds	r0, #1
 8014918:	1c5a      	adds	r2, r3, #1
 801491a:	9221      	str	r2, [sp, #132]	; 0x84
 801491c:	785b      	ldrb	r3, [r3, #1]
 801491e:	2b30      	cmp	r3, #48	; 0x30
 8014920:	d0f8      	beq.n	8014914 <_strtod_l+0x208>
 8014922:	001a      	movs	r2, r3
 8014924:	3a31      	subs	r2, #49	; 0x31
 8014926:	2a08      	cmp	r2, #8
 8014928:	d83e      	bhi.n	80149a8 <_strtod_l+0x29c>
 801492a:	900c      	str	r0, [sp, #48]	; 0x30
 801492c:	2000      	movs	r0, #0
 801492e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014930:	9006      	str	r0, [sp, #24]
 8014932:	9211      	str	r2, [sp, #68]	; 0x44
 8014934:	001a      	movs	r2, r3
 8014936:	9906      	ldr	r1, [sp, #24]
 8014938:	1c44      	adds	r4, r0, #1
 801493a:	3a30      	subs	r2, #48	; 0x30
 801493c:	2b30      	cmp	r3, #48	; 0x30
 801493e:	d013      	beq.n	8014968 <_strtod_l+0x25c>
 8014940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014942:	191b      	adds	r3, r3, r4
 8014944:	930c      	str	r3, [sp, #48]	; 0x30
 8014946:	1844      	adds	r4, r0, r1
 8014948:	000b      	movs	r3, r1
 801494a:	210a      	movs	r1, #10
 801494c:	429c      	cmp	r4, r3
 801494e:	d114      	bne.n	801497a <_strtod_l+0x26e>
 8014950:	9b06      	ldr	r3, [sp, #24]
 8014952:	1c59      	adds	r1, r3, #1
 8014954:	1809      	adds	r1, r1, r0
 8014956:	1818      	adds	r0, r3, r0
 8014958:	2808      	cmp	r0, #8
 801495a:	dc1c      	bgt.n	8014996 <_strtod_l+0x28a>
 801495c:	230a      	movs	r3, #10
 801495e:	2400      	movs	r4, #0
 8014960:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014962:	4343      	muls	r3, r0
 8014964:	18d3      	adds	r3, r2, r3
 8014966:	930b      	str	r3, [sp, #44]	; 0x2c
 8014968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801496a:	0020      	movs	r0, r4
 801496c:	1c5a      	adds	r2, r3, #1
 801496e:	9221      	str	r2, [sp, #132]	; 0x84
 8014970:	785b      	ldrb	r3, [r3, #1]
 8014972:	9106      	str	r1, [sp, #24]
 8014974:	e7c7      	b.n	8014906 <_strtod_l+0x1fa>
 8014976:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014978:	e7d1      	b.n	801491e <_strtod_l+0x212>
 801497a:	2b08      	cmp	r3, #8
 801497c:	dc04      	bgt.n	8014988 <_strtod_l+0x27c>
 801497e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014980:	434d      	muls	r5, r1
 8014982:	950b      	str	r5, [sp, #44]	; 0x2c
 8014984:	3301      	adds	r3, #1
 8014986:	e7e1      	b.n	801494c <_strtod_l+0x240>
 8014988:	1c5d      	adds	r5, r3, #1
 801498a:	2d10      	cmp	r5, #16
 801498c:	dcfa      	bgt.n	8014984 <_strtod_l+0x278>
 801498e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014990:	434d      	muls	r5, r1
 8014992:	950e      	str	r5, [sp, #56]	; 0x38
 8014994:	e7f6      	b.n	8014984 <_strtod_l+0x278>
 8014996:	2400      	movs	r4, #0
 8014998:	2910      	cmp	r1, #16
 801499a:	dce5      	bgt.n	8014968 <_strtod_l+0x25c>
 801499c:	230a      	movs	r3, #10
 801499e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80149a0:	4343      	muls	r3, r0
 80149a2:	18d3      	adds	r3, r2, r3
 80149a4:	930e      	str	r3, [sp, #56]	; 0x38
 80149a6:	e7df      	b.n	8014968 <_strtod_l+0x25c>
 80149a8:	2200      	movs	r2, #0
 80149aa:	920c      	str	r2, [sp, #48]	; 0x30
 80149ac:	9206      	str	r2, [sp, #24]
 80149ae:	3201      	adds	r2, #1
 80149b0:	e7ae      	b.n	8014910 <_strtod_l+0x204>
 80149b2:	2400      	movs	r4, #0
 80149b4:	9b08      	ldr	r3, [sp, #32]
 80149b6:	3302      	adds	r3, #2
 80149b8:	9321      	str	r3, [sp, #132]	; 0x84
 80149ba:	9b08      	ldr	r3, [sp, #32]
 80149bc:	789b      	ldrb	r3, [r3, #2]
 80149be:	001a      	movs	r2, r3
 80149c0:	3a30      	subs	r2, #48	; 0x30
 80149c2:	2a09      	cmp	r2, #9
 80149c4:	d914      	bls.n	80149f0 <_strtod_l+0x2e4>
 80149c6:	9a08      	ldr	r2, [sp, #32]
 80149c8:	9221      	str	r2, [sp, #132]	; 0x84
 80149ca:	2200      	movs	r2, #0
 80149cc:	e032      	b.n	8014a34 <_strtod_l+0x328>
 80149ce:	46c0      	nop			; (mov r8, r8)
 80149d0:	0801db9c 	.word	0x0801db9c
 80149d4:	0801da0c 	.word	0x0801da0c
 80149d8:	ffefffff 	.word	0xffefffff
 80149dc:	00000433 	.word	0x00000433
 80149e0:	7ff00000 	.word	0x7ff00000
 80149e4:	7fffffff 	.word	0x7fffffff
 80149e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149ea:	1c5a      	adds	r2, r3, #1
 80149ec:	9221      	str	r2, [sp, #132]	; 0x84
 80149ee:	785b      	ldrb	r3, [r3, #1]
 80149f0:	2b30      	cmp	r3, #48	; 0x30
 80149f2:	d0f9      	beq.n	80149e8 <_strtod_l+0x2dc>
 80149f4:	2200      	movs	r2, #0
 80149f6:	9207      	str	r2, [sp, #28]
 80149f8:	001a      	movs	r2, r3
 80149fa:	3a31      	subs	r2, #49	; 0x31
 80149fc:	2a08      	cmp	r2, #8
 80149fe:	d81a      	bhi.n	8014a36 <_strtod_l+0x32a>
 8014a00:	3b30      	subs	r3, #48	; 0x30
 8014a02:	001a      	movs	r2, r3
 8014a04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a06:	9307      	str	r3, [sp, #28]
 8014a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a0a:	1c59      	adds	r1, r3, #1
 8014a0c:	9121      	str	r1, [sp, #132]	; 0x84
 8014a0e:	785b      	ldrb	r3, [r3, #1]
 8014a10:	001d      	movs	r5, r3
 8014a12:	3d30      	subs	r5, #48	; 0x30
 8014a14:	2d09      	cmp	r5, #9
 8014a16:	d939      	bls.n	8014a8c <_strtod_l+0x380>
 8014a18:	9d07      	ldr	r5, [sp, #28]
 8014a1a:	1b49      	subs	r1, r1, r5
 8014a1c:	4daf      	ldr	r5, [pc, #700]	; (8014cdc <_strtod_l+0x5d0>)
 8014a1e:	9507      	str	r5, [sp, #28]
 8014a20:	2908      	cmp	r1, #8
 8014a22:	dc03      	bgt.n	8014a2c <_strtod_l+0x320>
 8014a24:	9207      	str	r2, [sp, #28]
 8014a26:	42aa      	cmp	r2, r5
 8014a28:	dd00      	ble.n	8014a2c <_strtod_l+0x320>
 8014a2a:	9507      	str	r5, [sp, #28]
 8014a2c:	2c00      	cmp	r4, #0
 8014a2e:	d002      	beq.n	8014a36 <_strtod_l+0x32a>
 8014a30:	9a07      	ldr	r2, [sp, #28]
 8014a32:	4252      	negs	r2, r2
 8014a34:	9207      	str	r2, [sp, #28]
 8014a36:	9a06      	ldr	r2, [sp, #24]
 8014a38:	2a00      	cmp	r2, #0
 8014a3a:	d14b      	bne.n	8014ad4 <_strtod_l+0x3c8>
 8014a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a3e:	4310      	orrs	r0, r2
 8014a40:	d000      	beq.n	8014a44 <_strtod_l+0x338>
 8014a42:	e6aa      	b.n	801479a <_strtod_l+0x8e>
 8014a44:	4662      	mov	r2, ip
 8014a46:	2a00      	cmp	r2, #0
 8014a48:	d000      	beq.n	8014a4c <_strtod_l+0x340>
 8014a4a:	e6c5      	b.n	80147d8 <_strtod_l+0xcc>
 8014a4c:	2b69      	cmp	r3, #105	; 0x69
 8014a4e:	d025      	beq.n	8014a9c <_strtod_l+0x390>
 8014a50:	dc21      	bgt.n	8014a96 <_strtod_l+0x38a>
 8014a52:	2b49      	cmp	r3, #73	; 0x49
 8014a54:	d022      	beq.n	8014a9c <_strtod_l+0x390>
 8014a56:	2b4e      	cmp	r3, #78	; 0x4e
 8014a58:	d000      	beq.n	8014a5c <_strtod_l+0x350>
 8014a5a:	e6bd      	b.n	80147d8 <_strtod_l+0xcc>
 8014a5c:	49a0      	ldr	r1, [pc, #640]	; (8014ce0 <_strtod_l+0x5d4>)
 8014a5e:	a821      	add	r0, sp, #132	; 0x84
 8014a60:	f003 fa48 	bl	8017ef4 <__match>
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d100      	bne.n	8014a6a <_strtod_l+0x35e>
 8014a68:	e6b6      	b.n	80147d8 <_strtod_l+0xcc>
 8014a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	2b28      	cmp	r3, #40	; 0x28
 8014a70:	d12a      	bne.n	8014ac8 <_strtod_l+0x3bc>
 8014a72:	499c      	ldr	r1, [pc, #624]	; (8014ce4 <_strtod_l+0x5d8>)
 8014a74:	aa24      	add	r2, sp, #144	; 0x90
 8014a76:	a821      	add	r0, sp, #132	; 0x84
 8014a78:	f003 fa50 	bl	8017f1c <__hexnan>
 8014a7c:	2805      	cmp	r0, #5
 8014a7e:	d123      	bne.n	8014ac8 <_strtod_l+0x3bc>
 8014a80:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014a82:	4a99      	ldr	r2, [pc, #612]	; (8014ce8 <_strtod_l+0x5dc>)
 8014a84:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014a86:	431a      	orrs	r2, r3
 8014a88:	0017      	movs	r7, r2
 8014a8a:	e686      	b.n	801479a <_strtod_l+0x8e>
 8014a8c:	210a      	movs	r1, #10
 8014a8e:	434a      	muls	r2, r1
 8014a90:	18d2      	adds	r2, r2, r3
 8014a92:	3a30      	subs	r2, #48	; 0x30
 8014a94:	e7b8      	b.n	8014a08 <_strtod_l+0x2fc>
 8014a96:	2b6e      	cmp	r3, #110	; 0x6e
 8014a98:	d0e0      	beq.n	8014a5c <_strtod_l+0x350>
 8014a9a:	e69d      	b.n	80147d8 <_strtod_l+0xcc>
 8014a9c:	4993      	ldr	r1, [pc, #588]	; (8014cec <_strtod_l+0x5e0>)
 8014a9e:	a821      	add	r0, sp, #132	; 0x84
 8014aa0:	f003 fa28 	bl	8017ef4 <__match>
 8014aa4:	2800      	cmp	r0, #0
 8014aa6:	d100      	bne.n	8014aaa <_strtod_l+0x39e>
 8014aa8:	e696      	b.n	80147d8 <_strtod_l+0xcc>
 8014aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014aac:	4990      	ldr	r1, [pc, #576]	; (8014cf0 <_strtod_l+0x5e4>)
 8014aae:	3b01      	subs	r3, #1
 8014ab0:	a821      	add	r0, sp, #132	; 0x84
 8014ab2:	9321      	str	r3, [sp, #132]	; 0x84
 8014ab4:	f003 fa1e 	bl	8017ef4 <__match>
 8014ab8:	2800      	cmp	r0, #0
 8014aba:	d102      	bne.n	8014ac2 <_strtod_l+0x3b6>
 8014abc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014abe:	3301      	adds	r3, #1
 8014ac0:	9321      	str	r3, [sp, #132]	; 0x84
 8014ac2:	2600      	movs	r6, #0
 8014ac4:	4f88      	ldr	r7, [pc, #544]	; (8014ce8 <_strtod_l+0x5dc>)
 8014ac6:	e668      	b.n	801479a <_strtod_l+0x8e>
 8014ac8:	488a      	ldr	r0, [pc, #552]	; (8014cf4 <_strtod_l+0x5e8>)
 8014aca:	f003 ffb9 	bl	8018a40 <nan>
 8014ace:	0006      	movs	r6, r0
 8014ad0:	000f      	movs	r7, r1
 8014ad2:	e662      	b.n	801479a <_strtod_l+0x8e>
 8014ad4:	9b07      	ldr	r3, [sp, #28]
 8014ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ad8:	1a9b      	subs	r3, r3, r2
 8014ada:	930a      	str	r3, [sp, #40]	; 0x28
 8014adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d101      	bne.n	8014ae6 <_strtod_l+0x3da>
 8014ae2:	9b06      	ldr	r3, [sp, #24]
 8014ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ae6:	9c06      	ldr	r4, [sp, #24]
 8014ae8:	2c10      	cmp	r4, #16
 8014aea:	dd00      	ble.n	8014aee <_strtod_l+0x3e2>
 8014aec:	2410      	movs	r4, #16
 8014aee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014af0:	f7ee f8a6 	bl	8002c40 <__aeabi_ui2d>
 8014af4:	9b06      	ldr	r3, [sp, #24]
 8014af6:	0006      	movs	r6, r0
 8014af8:	000f      	movs	r7, r1
 8014afa:	2b09      	cmp	r3, #9
 8014afc:	dd15      	ble.n	8014b2a <_strtod_l+0x41e>
 8014afe:	0022      	movs	r2, r4
 8014b00:	4b7d      	ldr	r3, [pc, #500]	; (8014cf8 <_strtod_l+0x5ec>)
 8014b02:	3a09      	subs	r2, #9
 8014b04:	00d2      	lsls	r2, r2, #3
 8014b06:	189b      	adds	r3, r3, r2
 8014b08:	681a      	ldr	r2, [r3, #0]
 8014b0a:	685b      	ldr	r3, [r3, #4]
 8014b0c:	f7ed fa16 	bl	8001f3c <__aeabi_dmul>
 8014b10:	0006      	movs	r6, r0
 8014b12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014b14:	000f      	movs	r7, r1
 8014b16:	f7ee f893 	bl	8002c40 <__aeabi_ui2d>
 8014b1a:	0002      	movs	r2, r0
 8014b1c:	000b      	movs	r3, r1
 8014b1e:	0030      	movs	r0, r6
 8014b20:	0039      	movs	r1, r7
 8014b22:	f7ec fa9b 	bl	800105c <__aeabi_dadd>
 8014b26:	0006      	movs	r6, r0
 8014b28:	000f      	movs	r7, r1
 8014b2a:	9b06      	ldr	r3, [sp, #24]
 8014b2c:	2b0f      	cmp	r3, #15
 8014b2e:	dc39      	bgt.n	8014ba4 <_strtod_l+0x498>
 8014b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d100      	bne.n	8014b38 <_strtod_l+0x42c>
 8014b36:	e630      	b.n	801479a <_strtod_l+0x8e>
 8014b38:	dd24      	ble.n	8014b84 <_strtod_l+0x478>
 8014b3a:	2b16      	cmp	r3, #22
 8014b3c:	dc09      	bgt.n	8014b52 <_strtod_l+0x446>
 8014b3e:	00dd      	lsls	r5, r3, #3
 8014b40:	0032      	movs	r2, r6
 8014b42:	003b      	movs	r3, r7
 8014b44:	4c6c      	ldr	r4, [pc, #432]	; (8014cf8 <_strtod_l+0x5ec>)
 8014b46:	1964      	adds	r4, r4, r5
 8014b48:	6820      	ldr	r0, [r4, #0]
 8014b4a:	6861      	ldr	r1, [r4, #4]
 8014b4c:	f7ed f9f6 	bl	8001f3c <__aeabi_dmul>
 8014b50:	e7bd      	b.n	8014ace <_strtod_l+0x3c2>
 8014b52:	2325      	movs	r3, #37	; 0x25
 8014b54:	9a06      	ldr	r2, [sp, #24]
 8014b56:	1a9b      	subs	r3, r3, r2
 8014b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b5a:	4293      	cmp	r3, r2
 8014b5c:	db22      	blt.n	8014ba4 <_strtod_l+0x498>
 8014b5e:	240f      	movs	r4, #15
 8014b60:	9b06      	ldr	r3, [sp, #24]
 8014b62:	4d65      	ldr	r5, [pc, #404]	; (8014cf8 <_strtod_l+0x5ec>)
 8014b64:	1ae4      	subs	r4, r4, r3
 8014b66:	00e1      	lsls	r1, r4, #3
 8014b68:	1869      	adds	r1, r5, r1
 8014b6a:	0032      	movs	r2, r6
 8014b6c:	6808      	ldr	r0, [r1, #0]
 8014b6e:	6849      	ldr	r1, [r1, #4]
 8014b70:	003b      	movs	r3, r7
 8014b72:	f7ed f9e3 	bl	8001f3c <__aeabi_dmul>
 8014b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b78:	1b1c      	subs	r4, r3, r4
 8014b7a:	00e4      	lsls	r4, r4, #3
 8014b7c:	192c      	adds	r4, r5, r4
 8014b7e:	6822      	ldr	r2, [r4, #0]
 8014b80:	6863      	ldr	r3, [r4, #4]
 8014b82:	e7e3      	b.n	8014b4c <_strtod_l+0x440>
 8014b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b86:	3316      	adds	r3, #22
 8014b88:	db0c      	blt.n	8014ba4 <_strtod_l+0x498>
 8014b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b8c:	9a07      	ldr	r2, [sp, #28]
 8014b8e:	0030      	movs	r0, r6
 8014b90:	1a9a      	subs	r2, r3, r2
 8014b92:	4b59      	ldr	r3, [pc, #356]	; (8014cf8 <_strtod_l+0x5ec>)
 8014b94:	00d2      	lsls	r2, r2, #3
 8014b96:	189b      	adds	r3, r3, r2
 8014b98:	0039      	movs	r1, r7
 8014b9a:	681a      	ldr	r2, [r3, #0]
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	f7ec fdc7 	bl	8001730 <__aeabi_ddiv>
 8014ba2:	e794      	b.n	8014ace <_strtod_l+0x3c2>
 8014ba4:	9b06      	ldr	r3, [sp, #24]
 8014ba6:	1b1c      	subs	r4, r3, r4
 8014ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014baa:	18e4      	adds	r4, r4, r3
 8014bac:	2c00      	cmp	r4, #0
 8014bae:	dd70      	ble.n	8014c92 <_strtod_l+0x586>
 8014bb0:	230f      	movs	r3, #15
 8014bb2:	0021      	movs	r1, r4
 8014bb4:	4019      	ands	r1, r3
 8014bb6:	421c      	tst	r4, r3
 8014bb8:	d00a      	beq.n	8014bd0 <_strtod_l+0x4c4>
 8014bba:	00cb      	lsls	r3, r1, #3
 8014bbc:	494e      	ldr	r1, [pc, #312]	; (8014cf8 <_strtod_l+0x5ec>)
 8014bbe:	0032      	movs	r2, r6
 8014bc0:	18c9      	adds	r1, r1, r3
 8014bc2:	6808      	ldr	r0, [r1, #0]
 8014bc4:	6849      	ldr	r1, [r1, #4]
 8014bc6:	003b      	movs	r3, r7
 8014bc8:	f7ed f9b8 	bl	8001f3c <__aeabi_dmul>
 8014bcc:	0006      	movs	r6, r0
 8014bce:	000f      	movs	r7, r1
 8014bd0:	230f      	movs	r3, #15
 8014bd2:	439c      	bics	r4, r3
 8014bd4:	d048      	beq.n	8014c68 <_strtod_l+0x55c>
 8014bd6:	3326      	adds	r3, #38	; 0x26
 8014bd8:	33ff      	adds	r3, #255	; 0xff
 8014bda:	429c      	cmp	r4, r3
 8014bdc:	dd22      	ble.n	8014c24 <_strtod_l+0x518>
 8014bde:	2300      	movs	r3, #0
 8014be0:	9306      	str	r3, [sp, #24]
 8014be2:	9307      	str	r3, [sp, #28]
 8014be4:	930b      	str	r3, [sp, #44]	; 0x2c
 8014be6:	9309      	str	r3, [sp, #36]	; 0x24
 8014be8:	2322      	movs	r3, #34	; 0x22
 8014bea:	2600      	movs	r6, #0
 8014bec:	9a05      	ldr	r2, [sp, #20]
 8014bee:	4f3e      	ldr	r7, [pc, #248]	; (8014ce8 <_strtod_l+0x5dc>)
 8014bf0:	6013      	str	r3, [r2, #0]
 8014bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bf4:	42b3      	cmp	r3, r6
 8014bf6:	d100      	bne.n	8014bfa <_strtod_l+0x4ee>
 8014bf8:	e5cf      	b.n	801479a <_strtod_l+0x8e>
 8014bfa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014bfc:	9805      	ldr	r0, [sp, #20]
 8014bfe:	f003 fa9b 	bl	8018138 <_Bfree>
 8014c02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c04:	9805      	ldr	r0, [sp, #20]
 8014c06:	f003 fa97 	bl	8018138 <_Bfree>
 8014c0a:	9907      	ldr	r1, [sp, #28]
 8014c0c:	9805      	ldr	r0, [sp, #20]
 8014c0e:	f003 fa93 	bl	8018138 <_Bfree>
 8014c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c14:	9805      	ldr	r0, [sp, #20]
 8014c16:	f003 fa8f 	bl	8018138 <_Bfree>
 8014c1a:	9906      	ldr	r1, [sp, #24]
 8014c1c:	9805      	ldr	r0, [sp, #20]
 8014c1e:	f003 fa8b 	bl	8018138 <_Bfree>
 8014c22:	e5ba      	b.n	801479a <_strtod_l+0x8e>
 8014c24:	2300      	movs	r3, #0
 8014c26:	0030      	movs	r0, r6
 8014c28:	0039      	movs	r1, r7
 8014c2a:	001d      	movs	r5, r3
 8014c2c:	1124      	asrs	r4, r4, #4
 8014c2e:	2c01      	cmp	r4, #1
 8014c30:	dc1d      	bgt.n	8014c6e <_strtod_l+0x562>
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d001      	beq.n	8014c3a <_strtod_l+0x52e>
 8014c36:	0006      	movs	r6, r0
 8014c38:	000f      	movs	r7, r1
 8014c3a:	4b30      	ldr	r3, [pc, #192]	; (8014cfc <_strtod_l+0x5f0>)
 8014c3c:	00ed      	lsls	r5, r5, #3
 8014c3e:	18ff      	adds	r7, r7, r3
 8014c40:	4b2f      	ldr	r3, [pc, #188]	; (8014d00 <_strtod_l+0x5f4>)
 8014c42:	0032      	movs	r2, r6
 8014c44:	195d      	adds	r5, r3, r5
 8014c46:	6828      	ldr	r0, [r5, #0]
 8014c48:	6869      	ldr	r1, [r5, #4]
 8014c4a:	003b      	movs	r3, r7
 8014c4c:	f7ed f976 	bl	8001f3c <__aeabi_dmul>
 8014c50:	4b25      	ldr	r3, [pc, #148]	; (8014ce8 <_strtod_l+0x5dc>)
 8014c52:	4a2c      	ldr	r2, [pc, #176]	; (8014d04 <_strtod_l+0x5f8>)
 8014c54:	0006      	movs	r6, r0
 8014c56:	400b      	ands	r3, r1
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	d8c0      	bhi.n	8014bde <_strtod_l+0x4d2>
 8014c5c:	4a2a      	ldr	r2, [pc, #168]	; (8014d08 <_strtod_l+0x5fc>)
 8014c5e:	4293      	cmp	r3, r2
 8014c60:	d913      	bls.n	8014c8a <_strtod_l+0x57e>
 8014c62:	2601      	movs	r6, #1
 8014c64:	4f29      	ldr	r7, [pc, #164]	; (8014d0c <_strtod_l+0x600>)
 8014c66:	4276      	negs	r6, r6
 8014c68:	2300      	movs	r3, #0
 8014c6a:	9308      	str	r3, [sp, #32]
 8014c6c:	e087      	b.n	8014d7e <_strtod_l+0x672>
 8014c6e:	2201      	movs	r2, #1
 8014c70:	4214      	tst	r4, r2
 8014c72:	d007      	beq.n	8014c84 <_strtod_l+0x578>
 8014c74:	4a22      	ldr	r2, [pc, #136]	; (8014d00 <_strtod_l+0x5f4>)
 8014c76:	00eb      	lsls	r3, r5, #3
 8014c78:	189b      	adds	r3, r3, r2
 8014c7a:	681a      	ldr	r2, [r3, #0]
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	f7ed f95d 	bl	8001f3c <__aeabi_dmul>
 8014c82:	2301      	movs	r3, #1
 8014c84:	3501      	adds	r5, #1
 8014c86:	1064      	asrs	r4, r4, #1
 8014c88:	e7d1      	b.n	8014c2e <_strtod_l+0x522>
 8014c8a:	23d4      	movs	r3, #212	; 0xd4
 8014c8c:	049b      	lsls	r3, r3, #18
 8014c8e:	18cf      	adds	r7, r1, r3
 8014c90:	e7ea      	b.n	8014c68 <_strtod_l+0x55c>
 8014c92:	2c00      	cmp	r4, #0
 8014c94:	d0e8      	beq.n	8014c68 <_strtod_l+0x55c>
 8014c96:	4264      	negs	r4, r4
 8014c98:	220f      	movs	r2, #15
 8014c9a:	0023      	movs	r3, r4
 8014c9c:	4013      	ands	r3, r2
 8014c9e:	4214      	tst	r4, r2
 8014ca0:	d00a      	beq.n	8014cb8 <_strtod_l+0x5ac>
 8014ca2:	00da      	lsls	r2, r3, #3
 8014ca4:	4b14      	ldr	r3, [pc, #80]	; (8014cf8 <_strtod_l+0x5ec>)
 8014ca6:	0030      	movs	r0, r6
 8014ca8:	189b      	adds	r3, r3, r2
 8014caa:	0039      	movs	r1, r7
 8014cac:	681a      	ldr	r2, [r3, #0]
 8014cae:	685b      	ldr	r3, [r3, #4]
 8014cb0:	f7ec fd3e 	bl	8001730 <__aeabi_ddiv>
 8014cb4:	0006      	movs	r6, r0
 8014cb6:	000f      	movs	r7, r1
 8014cb8:	1124      	asrs	r4, r4, #4
 8014cba:	d0d5      	beq.n	8014c68 <_strtod_l+0x55c>
 8014cbc:	2c1f      	cmp	r4, #31
 8014cbe:	dd27      	ble.n	8014d10 <_strtod_l+0x604>
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	9306      	str	r3, [sp, #24]
 8014cc4:	9307      	str	r3, [sp, #28]
 8014cc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8014cca:	2322      	movs	r3, #34	; 0x22
 8014ccc:	9a05      	ldr	r2, [sp, #20]
 8014cce:	2600      	movs	r6, #0
 8014cd0:	6013      	str	r3, [r2, #0]
 8014cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cd4:	2700      	movs	r7, #0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d18f      	bne.n	8014bfa <_strtod_l+0x4ee>
 8014cda:	e55e      	b.n	801479a <_strtod_l+0x8e>
 8014cdc:	00004e1f 	.word	0x00004e1f
 8014ce0:	0801da6d 	.word	0x0801da6d
 8014ce4:	0801da20 	.word	0x0801da20
 8014ce8:	7ff00000 	.word	0x7ff00000
 8014cec:	0801da65 	.word	0x0801da65
 8014cf0:	0801dabb 	.word	0x0801dabb
 8014cf4:	0801dd47 	.word	0x0801dd47
 8014cf8:	0801dc38 	.word	0x0801dc38
 8014cfc:	fcb00000 	.word	0xfcb00000
 8014d00:	0801dc10 	.word	0x0801dc10
 8014d04:	7ca00000 	.word	0x7ca00000
 8014d08:	7c900000 	.word	0x7c900000
 8014d0c:	7fefffff 	.word	0x7fefffff
 8014d10:	2310      	movs	r3, #16
 8014d12:	0022      	movs	r2, r4
 8014d14:	401a      	ands	r2, r3
 8014d16:	9208      	str	r2, [sp, #32]
 8014d18:	421c      	tst	r4, r3
 8014d1a:	d001      	beq.n	8014d20 <_strtod_l+0x614>
 8014d1c:	335a      	adds	r3, #90	; 0x5a
 8014d1e:	9308      	str	r3, [sp, #32]
 8014d20:	0030      	movs	r0, r6
 8014d22:	0039      	movs	r1, r7
 8014d24:	2300      	movs	r3, #0
 8014d26:	4dca      	ldr	r5, [pc, #808]	; (8015050 <_strtod_l+0x944>)
 8014d28:	2201      	movs	r2, #1
 8014d2a:	4214      	tst	r4, r2
 8014d2c:	d004      	beq.n	8014d38 <_strtod_l+0x62c>
 8014d2e:	682a      	ldr	r2, [r5, #0]
 8014d30:	686b      	ldr	r3, [r5, #4]
 8014d32:	f7ed f903 	bl	8001f3c <__aeabi_dmul>
 8014d36:	2301      	movs	r3, #1
 8014d38:	1064      	asrs	r4, r4, #1
 8014d3a:	3508      	adds	r5, #8
 8014d3c:	2c00      	cmp	r4, #0
 8014d3e:	d1f3      	bne.n	8014d28 <_strtod_l+0x61c>
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d001      	beq.n	8014d48 <_strtod_l+0x63c>
 8014d44:	0006      	movs	r6, r0
 8014d46:	000f      	movs	r7, r1
 8014d48:	9b08      	ldr	r3, [sp, #32]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d00f      	beq.n	8014d6e <_strtod_l+0x662>
 8014d4e:	236b      	movs	r3, #107	; 0x6b
 8014d50:	0079      	lsls	r1, r7, #1
 8014d52:	0d49      	lsrs	r1, r1, #21
 8014d54:	003a      	movs	r2, r7
 8014d56:	1a5b      	subs	r3, r3, r1
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	dd08      	ble.n	8014d6e <_strtod_l+0x662>
 8014d5c:	2b1f      	cmp	r3, #31
 8014d5e:	dc00      	bgt.n	8014d62 <_strtod_l+0x656>
 8014d60:	e126      	b.n	8014fb0 <_strtod_l+0x8a4>
 8014d62:	2600      	movs	r6, #0
 8014d64:	2b34      	cmp	r3, #52	; 0x34
 8014d66:	dc00      	bgt.n	8014d6a <_strtod_l+0x65e>
 8014d68:	e11b      	b.n	8014fa2 <_strtod_l+0x896>
 8014d6a:	27dc      	movs	r7, #220	; 0xdc
 8014d6c:	04bf      	lsls	r7, r7, #18
 8014d6e:	2200      	movs	r2, #0
 8014d70:	2300      	movs	r3, #0
 8014d72:	0030      	movs	r0, r6
 8014d74:	0039      	movs	r1, r7
 8014d76:	f7eb fb71 	bl	800045c <__aeabi_dcmpeq>
 8014d7a:	2800      	cmp	r0, #0
 8014d7c:	d1a0      	bne.n	8014cc0 <_strtod_l+0x5b4>
 8014d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d82:	9300      	str	r3, [sp, #0]
 8014d84:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014d86:	9b06      	ldr	r3, [sp, #24]
 8014d88:	9805      	ldr	r0, [sp, #20]
 8014d8a:	f003 fa23 	bl	80181d4 <__s2b>
 8014d8e:	900b      	str	r0, [sp, #44]	; 0x2c
 8014d90:	2800      	cmp	r0, #0
 8014d92:	d100      	bne.n	8014d96 <_strtod_l+0x68a>
 8014d94:	e723      	b.n	8014bde <_strtod_l+0x4d2>
 8014d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d98:	9907      	ldr	r1, [sp, #28]
 8014d9a:	17da      	asrs	r2, r3, #31
 8014d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d9e:	1a5b      	subs	r3, r3, r1
 8014da0:	401a      	ands	r2, r3
 8014da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014da4:	9215      	str	r2, [sp, #84]	; 0x54
 8014da6:	43db      	mvns	r3, r3
 8014da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014daa:	17db      	asrs	r3, r3, #31
 8014dac:	401a      	ands	r2, r3
 8014dae:	2300      	movs	r3, #0
 8014db0:	921c      	str	r2, [sp, #112]	; 0x70
 8014db2:	9306      	str	r3, [sp, #24]
 8014db4:	9307      	str	r3, [sp, #28]
 8014db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014db8:	9805      	ldr	r0, [sp, #20]
 8014dba:	6859      	ldr	r1, [r3, #4]
 8014dbc:	f003 f994 	bl	80180e8 <_Balloc>
 8014dc0:	9009      	str	r0, [sp, #36]	; 0x24
 8014dc2:	2800      	cmp	r0, #0
 8014dc4:	d100      	bne.n	8014dc8 <_strtod_l+0x6bc>
 8014dc6:	e70f      	b.n	8014be8 <_strtod_l+0x4dc>
 8014dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dcc:	691b      	ldr	r3, [r3, #16]
 8014dce:	310c      	adds	r1, #12
 8014dd0:	1c9a      	adds	r2, r3, #2
 8014dd2:	0092      	lsls	r2, r2, #2
 8014dd4:	300c      	adds	r0, #12
 8014dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8014dd8:	f7ff fa1a 	bl	8014210 <memcpy>
 8014ddc:	ab24      	add	r3, sp, #144	; 0x90
 8014dde:	9301      	str	r3, [sp, #4]
 8014de0:	ab23      	add	r3, sp, #140	; 0x8c
 8014de2:	9300      	str	r3, [sp, #0]
 8014de4:	0032      	movs	r2, r6
 8014de6:	003b      	movs	r3, r7
 8014de8:	9805      	ldr	r0, [sp, #20]
 8014dea:	960e      	str	r6, [sp, #56]	; 0x38
 8014dec:	970f      	str	r7, [sp, #60]	; 0x3c
 8014dee:	f003 fd25 	bl	801883c <__d2b>
 8014df2:	9022      	str	r0, [sp, #136]	; 0x88
 8014df4:	2800      	cmp	r0, #0
 8014df6:	d100      	bne.n	8014dfa <_strtod_l+0x6ee>
 8014df8:	e6f6      	b.n	8014be8 <_strtod_l+0x4dc>
 8014dfa:	2101      	movs	r1, #1
 8014dfc:	9805      	ldr	r0, [sp, #20]
 8014dfe:	f003 fa7d 	bl	80182fc <__i2b>
 8014e02:	9007      	str	r0, [sp, #28]
 8014e04:	2800      	cmp	r0, #0
 8014e06:	d100      	bne.n	8014e0a <_strtod_l+0x6fe>
 8014e08:	e6ee      	b.n	8014be8 <_strtod_l+0x4dc>
 8014e0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	da00      	bge.n	8014e12 <_strtod_l+0x706>
 8014e10:	e0d3      	b.n	8014fba <_strtod_l+0x8ae>
 8014e12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014e14:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014e16:	189d      	adds	r5, r3, r2
 8014e18:	9908      	ldr	r1, [sp, #32]
 8014e1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014e1c:	1a5b      	subs	r3, r3, r1
 8014e1e:	2136      	movs	r1, #54	; 0x36
 8014e20:	189b      	adds	r3, r3, r2
 8014e22:	1a8a      	subs	r2, r1, r2
 8014e24:	498b      	ldr	r1, [pc, #556]	; (8015054 <_strtod_l+0x948>)
 8014e26:	3b01      	subs	r3, #1
 8014e28:	2001      	movs	r0, #1
 8014e2a:	428b      	cmp	r3, r1
 8014e2c:	db00      	blt.n	8014e30 <_strtod_l+0x724>
 8014e2e:	e0cf      	b.n	8014fd0 <_strtod_l+0x8c4>
 8014e30:	1ac9      	subs	r1, r1, r3
 8014e32:	1a52      	subs	r2, r2, r1
 8014e34:	291f      	cmp	r1, #31
 8014e36:	dd00      	ble.n	8014e3a <_strtod_l+0x72e>
 8014e38:	e0c3      	b.n	8014fc2 <_strtod_l+0x8b6>
 8014e3a:	4088      	lsls	r0, r1
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	9014      	str	r0, [sp, #80]	; 0x50
 8014e40:	9312      	str	r3, [sp, #72]	; 0x48
 8014e42:	18ab      	adds	r3, r5, r2
 8014e44:	930c      	str	r3, [sp, #48]	; 0x30
 8014e46:	18a4      	adds	r4, r4, r2
 8014e48:	9b08      	ldr	r3, [sp, #32]
 8014e4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e4c:	191c      	adds	r4, r3, r4
 8014e4e:	002b      	movs	r3, r5
 8014e50:	4295      	cmp	r5, r2
 8014e52:	dd00      	ble.n	8014e56 <_strtod_l+0x74a>
 8014e54:	0013      	movs	r3, r2
 8014e56:	42a3      	cmp	r3, r4
 8014e58:	dd00      	ble.n	8014e5c <_strtod_l+0x750>
 8014e5a:	0023      	movs	r3, r4
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	dd04      	ble.n	8014e6a <_strtod_l+0x75e>
 8014e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e62:	1ae4      	subs	r4, r4, r3
 8014e64:	1ad2      	subs	r2, r2, r3
 8014e66:	920c      	str	r2, [sp, #48]	; 0x30
 8014e68:	1aed      	subs	r5, r5, r3
 8014e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	dd17      	ble.n	8014ea0 <_strtod_l+0x794>
 8014e70:	001a      	movs	r2, r3
 8014e72:	9907      	ldr	r1, [sp, #28]
 8014e74:	9805      	ldr	r0, [sp, #20]
 8014e76:	f003 fb07 	bl	8018488 <__pow5mult>
 8014e7a:	9007      	str	r0, [sp, #28]
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	d100      	bne.n	8014e82 <_strtod_l+0x776>
 8014e80:	e6b2      	b.n	8014be8 <_strtod_l+0x4dc>
 8014e82:	0001      	movs	r1, r0
 8014e84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014e86:	9805      	ldr	r0, [sp, #20]
 8014e88:	f003 fa4e 	bl	8018328 <__multiply>
 8014e8c:	9011      	str	r0, [sp, #68]	; 0x44
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	d100      	bne.n	8014e94 <_strtod_l+0x788>
 8014e92:	e6a9      	b.n	8014be8 <_strtod_l+0x4dc>
 8014e94:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014e96:	9805      	ldr	r0, [sp, #20]
 8014e98:	f003 f94e 	bl	8018138 <_Bfree>
 8014e9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e9e:	9322      	str	r3, [sp, #136]	; 0x88
 8014ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	dd00      	ble.n	8014ea8 <_strtod_l+0x79c>
 8014ea6:	e096      	b.n	8014fd6 <_strtod_l+0x8ca>
 8014ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	dd08      	ble.n	8014ec0 <_strtod_l+0x7b4>
 8014eae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014eb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014eb2:	9805      	ldr	r0, [sp, #20]
 8014eb4:	f003 fae8 	bl	8018488 <__pow5mult>
 8014eb8:	9009      	str	r0, [sp, #36]	; 0x24
 8014eba:	2800      	cmp	r0, #0
 8014ebc:	d100      	bne.n	8014ec0 <_strtod_l+0x7b4>
 8014ebe:	e693      	b.n	8014be8 <_strtod_l+0x4dc>
 8014ec0:	2c00      	cmp	r4, #0
 8014ec2:	dd08      	ble.n	8014ed6 <_strtod_l+0x7ca>
 8014ec4:	0022      	movs	r2, r4
 8014ec6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ec8:	9805      	ldr	r0, [sp, #20]
 8014eca:	f003 fb1f 	bl	801850c <__lshift>
 8014ece:	9009      	str	r0, [sp, #36]	; 0x24
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	d100      	bne.n	8014ed6 <_strtod_l+0x7ca>
 8014ed4:	e688      	b.n	8014be8 <_strtod_l+0x4dc>
 8014ed6:	2d00      	cmp	r5, #0
 8014ed8:	dd08      	ble.n	8014eec <_strtod_l+0x7e0>
 8014eda:	002a      	movs	r2, r5
 8014edc:	9907      	ldr	r1, [sp, #28]
 8014ede:	9805      	ldr	r0, [sp, #20]
 8014ee0:	f003 fb14 	bl	801850c <__lshift>
 8014ee4:	9007      	str	r0, [sp, #28]
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	d100      	bne.n	8014eec <_strtod_l+0x7e0>
 8014eea:	e67d      	b.n	8014be8 <_strtod_l+0x4dc>
 8014eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014eee:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014ef0:	9805      	ldr	r0, [sp, #20]
 8014ef2:	f003 fb97 	bl	8018624 <__mdiff>
 8014ef6:	9006      	str	r0, [sp, #24]
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	d100      	bne.n	8014efe <_strtod_l+0x7f2>
 8014efc:	e674      	b.n	8014be8 <_strtod_l+0x4dc>
 8014efe:	2200      	movs	r2, #0
 8014f00:	68c3      	ldr	r3, [r0, #12]
 8014f02:	9907      	ldr	r1, [sp, #28]
 8014f04:	60c2      	str	r2, [r0, #12]
 8014f06:	9311      	str	r3, [sp, #68]	; 0x44
 8014f08:	f003 fb70 	bl	80185ec <__mcmp>
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	da6c      	bge.n	8014fea <_strtod_l+0x8de>
 8014f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f12:	4333      	orrs	r3, r6
 8014f14:	d000      	beq.n	8014f18 <_strtod_l+0x80c>
 8014f16:	e097      	b.n	8015048 <_strtod_l+0x93c>
 8014f18:	033b      	lsls	r3, r7, #12
 8014f1a:	d000      	beq.n	8014f1e <_strtod_l+0x812>
 8014f1c:	e094      	b.n	8015048 <_strtod_l+0x93c>
 8014f1e:	22d6      	movs	r2, #214	; 0xd6
 8014f20:	4b4d      	ldr	r3, [pc, #308]	; (8015058 <_strtod_l+0x94c>)
 8014f22:	04d2      	lsls	r2, r2, #19
 8014f24:	403b      	ands	r3, r7
 8014f26:	4293      	cmp	r3, r2
 8014f28:	d800      	bhi.n	8014f2c <_strtod_l+0x820>
 8014f2a:	e08d      	b.n	8015048 <_strtod_l+0x93c>
 8014f2c:	9b06      	ldr	r3, [sp, #24]
 8014f2e:	695b      	ldr	r3, [r3, #20]
 8014f30:	930a      	str	r3, [sp, #40]	; 0x28
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d105      	bne.n	8014f42 <_strtod_l+0x836>
 8014f36:	9b06      	ldr	r3, [sp, #24]
 8014f38:	691b      	ldr	r3, [r3, #16]
 8014f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8014f3c:	2b01      	cmp	r3, #1
 8014f3e:	dc00      	bgt.n	8014f42 <_strtod_l+0x836>
 8014f40:	e082      	b.n	8015048 <_strtod_l+0x93c>
 8014f42:	9906      	ldr	r1, [sp, #24]
 8014f44:	2201      	movs	r2, #1
 8014f46:	9805      	ldr	r0, [sp, #20]
 8014f48:	f003 fae0 	bl	801850c <__lshift>
 8014f4c:	9907      	ldr	r1, [sp, #28]
 8014f4e:	9006      	str	r0, [sp, #24]
 8014f50:	f003 fb4c 	bl	80185ec <__mcmp>
 8014f54:	2800      	cmp	r0, #0
 8014f56:	dd77      	ble.n	8015048 <_strtod_l+0x93c>
 8014f58:	9908      	ldr	r1, [sp, #32]
 8014f5a:	003b      	movs	r3, r7
 8014f5c:	4a3e      	ldr	r2, [pc, #248]	; (8015058 <_strtod_l+0x94c>)
 8014f5e:	2900      	cmp	r1, #0
 8014f60:	d100      	bne.n	8014f64 <_strtod_l+0x858>
 8014f62:	e09e      	b.n	80150a2 <_strtod_l+0x996>
 8014f64:	0011      	movs	r1, r2
 8014f66:	20d6      	movs	r0, #214	; 0xd6
 8014f68:	4039      	ands	r1, r7
 8014f6a:	04c0      	lsls	r0, r0, #19
 8014f6c:	4281      	cmp	r1, r0
 8014f6e:	dd00      	ble.n	8014f72 <_strtod_l+0x866>
 8014f70:	e097      	b.n	80150a2 <_strtod_l+0x996>
 8014f72:	23dc      	movs	r3, #220	; 0xdc
 8014f74:	049b      	lsls	r3, r3, #18
 8014f76:	4299      	cmp	r1, r3
 8014f78:	dc00      	bgt.n	8014f7c <_strtod_l+0x870>
 8014f7a:	e6a6      	b.n	8014cca <_strtod_l+0x5be>
 8014f7c:	4b37      	ldr	r3, [pc, #220]	; (801505c <_strtod_l+0x950>)
 8014f7e:	0030      	movs	r0, r6
 8014f80:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f82:	2300      	movs	r3, #0
 8014f84:	931a      	str	r3, [sp, #104]	; 0x68
 8014f86:	0039      	movs	r1, r7
 8014f88:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014f8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f8c:	f7ec ffd6 	bl	8001f3c <__aeabi_dmul>
 8014f90:	0006      	movs	r6, r0
 8014f92:	000f      	movs	r7, r1
 8014f94:	4308      	orrs	r0, r1
 8014f96:	d000      	beq.n	8014f9a <_strtod_l+0x88e>
 8014f98:	e62f      	b.n	8014bfa <_strtod_l+0x4ee>
 8014f9a:	2322      	movs	r3, #34	; 0x22
 8014f9c:	9a05      	ldr	r2, [sp, #20]
 8014f9e:	6013      	str	r3, [r2, #0]
 8014fa0:	e62b      	b.n	8014bfa <_strtod_l+0x4ee>
 8014fa2:	2101      	movs	r1, #1
 8014fa4:	3b20      	subs	r3, #32
 8014fa6:	4249      	negs	r1, r1
 8014fa8:	4099      	lsls	r1, r3
 8014faa:	400a      	ands	r2, r1
 8014fac:	0017      	movs	r7, r2
 8014fae:	e6de      	b.n	8014d6e <_strtod_l+0x662>
 8014fb0:	2201      	movs	r2, #1
 8014fb2:	4252      	negs	r2, r2
 8014fb4:	409a      	lsls	r2, r3
 8014fb6:	4016      	ands	r6, r2
 8014fb8:	e6d9      	b.n	8014d6e <_strtod_l+0x662>
 8014fba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014fbc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014fbe:	1ad4      	subs	r4, r2, r3
 8014fc0:	e72a      	b.n	8014e18 <_strtod_l+0x70c>
 8014fc2:	4927      	ldr	r1, [pc, #156]	; (8015060 <_strtod_l+0x954>)
 8014fc4:	1acb      	subs	r3, r1, r3
 8014fc6:	0001      	movs	r1, r0
 8014fc8:	4099      	lsls	r1, r3
 8014fca:	9112      	str	r1, [sp, #72]	; 0x48
 8014fcc:	9014      	str	r0, [sp, #80]	; 0x50
 8014fce:	e738      	b.n	8014e42 <_strtod_l+0x736>
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	9312      	str	r3, [sp, #72]	; 0x48
 8014fd4:	e7fa      	b.n	8014fcc <_strtod_l+0x8c0>
 8014fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014fd8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014fda:	9805      	ldr	r0, [sp, #20]
 8014fdc:	f003 fa96 	bl	801850c <__lshift>
 8014fe0:	9022      	str	r0, [sp, #136]	; 0x88
 8014fe2:	2800      	cmp	r0, #0
 8014fe4:	d000      	beq.n	8014fe8 <_strtod_l+0x8dc>
 8014fe6:	e75f      	b.n	8014ea8 <_strtod_l+0x79c>
 8014fe8:	e5fe      	b.n	8014be8 <_strtod_l+0x4dc>
 8014fea:	970c      	str	r7, [sp, #48]	; 0x30
 8014fec:	2800      	cmp	r0, #0
 8014fee:	d176      	bne.n	80150de <_strtod_l+0x9d2>
 8014ff0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014ff2:	033b      	lsls	r3, r7, #12
 8014ff4:	0b1b      	lsrs	r3, r3, #12
 8014ff6:	2a00      	cmp	r2, #0
 8014ff8:	d038      	beq.n	801506c <_strtod_l+0x960>
 8014ffa:	4a1a      	ldr	r2, [pc, #104]	; (8015064 <_strtod_l+0x958>)
 8014ffc:	4293      	cmp	r3, r2
 8014ffe:	d138      	bne.n	8015072 <_strtod_l+0x966>
 8015000:	2201      	movs	r2, #1
 8015002:	9b08      	ldr	r3, [sp, #32]
 8015004:	4252      	negs	r2, r2
 8015006:	0031      	movs	r1, r6
 8015008:	0010      	movs	r0, r2
 801500a:	2b00      	cmp	r3, #0
 801500c:	d00b      	beq.n	8015026 <_strtod_l+0x91a>
 801500e:	24d4      	movs	r4, #212	; 0xd4
 8015010:	4b11      	ldr	r3, [pc, #68]	; (8015058 <_strtod_l+0x94c>)
 8015012:	0010      	movs	r0, r2
 8015014:	403b      	ands	r3, r7
 8015016:	04e4      	lsls	r4, r4, #19
 8015018:	42a3      	cmp	r3, r4
 801501a:	d804      	bhi.n	8015026 <_strtod_l+0x91a>
 801501c:	306c      	adds	r0, #108	; 0x6c
 801501e:	0d1b      	lsrs	r3, r3, #20
 8015020:	1ac3      	subs	r3, r0, r3
 8015022:	409a      	lsls	r2, r3
 8015024:	0010      	movs	r0, r2
 8015026:	4281      	cmp	r1, r0
 8015028:	d123      	bne.n	8015072 <_strtod_l+0x966>
 801502a:	4b0f      	ldr	r3, [pc, #60]	; (8015068 <_strtod_l+0x95c>)
 801502c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801502e:	429a      	cmp	r2, r3
 8015030:	d102      	bne.n	8015038 <_strtod_l+0x92c>
 8015032:	1c4b      	adds	r3, r1, #1
 8015034:	d100      	bne.n	8015038 <_strtod_l+0x92c>
 8015036:	e5d7      	b.n	8014be8 <_strtod_l+0x4dc>
 8015038:	4b07      	ldr	r3, [pc, #28]	; (8015058 <_strtod_l+0x94c>)
 801503a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801503c:	2600      	movs	r6, #0
 801503e:	401a      	ands	r2, r3
 8015040:	0013      	movs	r3, r2
 8015042:	2280      	movs	r2, #128	; 0x80
 8015044:	0352      	lsls	r2, r2, #13
 8015046:	189f      	adds	r7, r3, r2
 8015048:	9b08      	ldr	r3, [sp, #32]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d196      	bne.n	8014f7c <_strtod_l+0x870>
 801504e:	e5d4      	b.n	8014bfa <_strtod_l+0x4ee>
 8015050:	0801da38 	.word	0x0801da38
 8015054:	fffffc02 	.word	0xfffffc02
 8015058:	7ff00000 	.word	0x7ff00000
 801505c:	39500000 	.word	0x39500000
 8015060:	fffffbe2 	.word	0xfffffbe2
 8015064:	000fffff 	.word	0x000fffff
 8015068:	7fefffff 	.word	0x7fefffff
 801506c:	4333      	orrs	r3, r6
 801506e:	d100      	bne.n	8015072 <_strtod_l+0x966>
 8015070:	e772      	b.n	8014f58 <_strtod_l+0x84c>
 8015072:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015074:	2b00      	cmp	r3, #0
 8015076:	d01d      	beq.n	80150b4 <_strtod_l+0x9a8>
 8015078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801507a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801507c:	4213      	tst	r3, r2
 801507e:	d0e3      	beq.n	8015048 <_strtod_l+0x93c>
 8015080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015082:	0030      	movs	r0, r6
 8015084:	0039      	movs	r1, r7
 8015086:	9a08      	ldr	r2, [sp, #32]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d017      	beq.n	80150bc <_strtod_l+0x9b0>
 801508c:	f7ff fb26 	bl	80146dc <sulp>
 8015090:	0002      	movs	r2, r0
 8015092:	000b      	movs	r3, r1
 8015094:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015096:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015098:	f7eb ffe0 	bl	800105c <__aeabi_dadd>
 801509c:	0006      	movs	r6, r0
 801509e:	000f      	movs	r7, r1
 80150a0:	e7d2      	b.n	8015048 <_strtod_l+0x93c>
 80150a2:	2601      	movs	r6, #1
 80150a4:	4013      	ands	r3, r2
 80150a6:	4a9b      	ldr	r2, [pc, #620]	; (8015314 <_strtod_l+0xc08>)
 80150a8:	4276      	negs	r6, r6
 80150aa:	189b      	adds	r3, r3, r2
 80150ac:	4a9a      	ldr	r2, [pc, #616]	; (8015318 <_strtod_l+0xc0c>)
 80150ae:	431a      	orrs	r2, r3
 80150b0:	0017      	movs	r7, r2
 80150b2:	e7c9      	b.n	8015048 <_strtod_l+0x93c>
 80150b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80150b6:	4233      	tst	r3, r6
 80150b8:	d0c6      	beq.n	8015048 <_strtod_l+0x93c>
 80150ba:	e7e1      	b.n	8015080 <_strtod_l+0x974>
 80150bc:	f7ff fb0e 	bl	80146dc <sulp>
 80150c0:	0002      	movs	r2, r0
 80150c2:	000b      	movs	r3, r1
 80150c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80150c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80150c8:	f7ed f9a4 	bl	8002414 <__aeabi_dsub>
 80150cc:	2200      	movs	r2, #0
 80150ce:	2300      	movs	r3, #0
 80150d0:	0006      	movs	r6, r0
 80150d2:	000f      	movs	r7, r1
 80150d4:	f7eb f9c2 	bl	800045c <__aeabi_dcmpeq>
 80150d8:	2800      	cmp	r0, #0
 80150da:	d0b5      	beq.n	8015048 <_strtod_l+0x93c>
 80150dc:	e5f5      	b.n	8014cca <_strtod_l+0x5be>
 80150de:	9907      	ldr	r1, [sp, #28]
 80150e0:	9806      	ldr	r0, [sp, #24]
 80150e2:	f003 fc0f 	bl	8018904 <__ratio>
 80150e6:	2380      	movs	r3, #128	; 0x80
 80150e8:	2200      	movs	r2, #0
 80150ea:	05db      	lsls	r3, r3, #23
 80150ec:	0004      	movs	r4, r0
 80150ee:	000d      	movs	r5, r1
 80150f0:	f7eb f9c4 	bl	800047c <__aeabi_dcmple>
 80150f4:	2800      	cmp	r0, #0
 80150f6:	d079      	beq.n	80151ec <_strtod_l+0xae0>
 80150f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d04b      	beq.n	8015196 <_strtod_l+0xa8a>
 80150fe:	2300      	movs	r3, #0
 8015100:	4c86      	ldr	r4, [pc, #536]	; (801531c <_strtod_l+0xc10>)
 8015102:	2500      	movs	r5, #0
 8015104:	9312      	str	r3, [sp, #72]	; 0x48
 8015106:	9413      	str	r4, [sp, #76]	; 0x4c
 8015108:	4c84      	ldr	r4, [pc, #528]	; (801531c <_strtod_l+0xc10>)
 801510a:	4a85      	ldr	r2, [pc, #532]	; (8015320 <_strtod_l+0xc14>)
 801510c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801510e:	4013      	ands	r3, r2
 8015110:	9314      	str	r3, [sp, #80]	; 0x50
 8015112:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015114:	4b83      	ldr	r3, [pc, #524]	; (8015324 <_strtod_l+0xc18>)
 8015116:	429a      	cmp	r2, r3
 8015118:	d000      	beq.n	801511c <_strtod_l+0xa10>
 801511a:	e0b0      	b.n	801527e <_strtod_l+0xb72>
 801511c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801511e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015120:	921a      	str	r2, [sp, #104]	; 0x68
 8015122:	931b      	str	r3, [sp, #108]	; 0x6c
 8015124:	4a80      	ldr	r2, [pc, #512]	; (8015328 <_strtod_l+0xc1c>)
 8015126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015128:	4694      	mov	ip, r2
 801512a:	4463      	add	r3, ip
 801512c:	001f      	movs	r7, r3
 801512e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015130:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015132:	0030      	movs	r0, r6
 8015134:	0039      	movs	r1, r7
 8015136:	920c      	str	r2, [sp, #48]	; 0x30
 8015138:	930d      	str	r3, [sp, #52]	; 0x34
 801513a:	f003 fb0b 	bl	8018754 <__ulp>
 801513e:	0002      	movs	r2, r0
 8015140:	000b      	movs	r3, r1
 8015142:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015144:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015146:	f7ec fef9 	bl	8001f3c <__aeabi_dmul>
 801514a:	0032      	movs	r2, r6
 801514c:	003b      	movs	r3, r7
 801514e:	f7eb ff85 	bl	800105c <__aeabi_dadd>
 8015152:	4a73      	ldr	r2, [pc, #460]	; (8015320 <_strtod_l+0xc14>)
 8015154:	4b75      	ldr	r3, [pc, #468]	; (801532c <_strtod_l+0xc20>)
 8015156:	0006      	movs	r6, r0
 8015158:	400a      	ands	r2, r1
 801515a:	429a      	cmp	r2, r3
 801515c:	d95e      	bls.n	801521c <_strtod_l+0xb10>
 801515e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015160:	4a73      	ldr	r2, [pc, #460]	; (8015330 <_strtod_l+0xc24>)
 8015162:	4293      	cmp	r3, r2
 8015164:	d103      	bne.n	801516e <_strtod_l+0xa62>
 8015166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015168:	3301      	adds	r3, #1
 801516a:	d100      	bne.n	801516e <_strtod_l+0xa62>
 801516c:	e53c      	b.n	8014be8 <_strtod_l+0x4dc>
 801516e:	2601      	movs	r6, #1
 8015170:	4f6f      	ldr	r7, [pc, #444]	; (8015330 <_strtod_l+0xc24>)
 8015172:	4276      	negs	r6, r6
 8015174:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015176:	9805      	ldr	r0, [sp, #20]
 8015178:	f002 ffde 	bl	8018138 <_Bfree>
 801517c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801517e:	9805      	ldr	r0, [sp, #20]
 8015180:	f002 ffda 	bl	8018138 <_Bfree>
 8015184:	9907      	ldr	r1, [sp, #28]
 8015186:	9805      	ldr	r0, [sp, #20]
 8015188:	f002 ffd6 	bl	8018138 <_Bfree>
 801518c:	9906      	ldr	r1, [sp, #24]
 801518e:	9805      	ldr	r0, [sp, #20]
 8015190:	f002 ffd2 	bl	8018138 <_Bfree>
 8015194:	e60f      	b.n	8014db6 <_strtod_l+0x6aa>
 8015196:	2e00      	cmp	r6, #0
 8015198:	d11c      	bne.n	80151d4 <_strtod_l+0xac8>
 801519a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801519c:	031b      	lsls	r3, r3, #12
 801519e:	d11f      	bne.n	80151e0 <_strtod_l+0xad4>
 80151a0:	2200      	movs	r2, #0
 80151a2:	0020      	movs	r0, r4
 80151a4:	0029      	movs	r1, r5
 80151a6:	4b5d      	ldr	r3, [pc, #372]	; (801531c <_strtod_l+0xc10>)
 80151a8:	f7eb f95e 	bl	8000468 <__aeabi_dcmplt>
 80151ac:	2800      	cmp	r0, #0
 80151ae:	d11a      	bne.n	80151e6 <_strtod_l+0xada>
 80151b0:	0020      	movs	r0, r4
 80151b2:	0029      	movs	r1, r5
 80151b4:	2200      	movs	r2, #0
 80151b6:	4b5f      	ldr	r3, [pc, #380]	; (8015334 <_strtod_l+0xc28>)
 80151b8:	f7ec fec0 	bl	8001f3c <__aeabi_dmul>
 80151bc:	0005      	movs	r5, r0
 80151be:	000c      	movs	r4, r1
 80151c0:	2380      	movs	r3, #128	; 0x80
 80151c2:	061b      	lsls	r3, r3, #24
 80151c4:	18e3      	adds	r3, r4, r3
 80151c6:	951e      	str	r5, [sp, #120]	; 0x78
 80151c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80151ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80151cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80151ce:	9212      	str	r2, [sp, #72]	; 0x48
 80151d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80151d2:	e79a      	b.n	801510a <_strtod_l+0x9fe>
 80151d4:	2e01      	cmp	r6, #1
 80151d6:	d103      	bne.n	80151e0 <_strtod_l+0xad4>
 80151d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d100      	bne.n	80151e0 <_strtod_l+0xad4>
 80151de:	e574      	b.n	8014cca <_strtod_l+0x5be>
 80151e0:	2300      	movs	r3, #0
 80151e2:	4c55      	ldr	r4, [pc, #340]	; (8015338 <_strtod_l+0xc2c>)
 80151e4:	e78d      	b.n	8015102 <_strtod_l+0x9f6>
 80151e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80151e8:	4c52      	ldr	r4, [pc, #328]	; (8015334 <_strtod_l+0xc28>)
 80151ea:	e7e9      	b.n	80151c0 <_strtod_l+0xab4>
 80151ec:	2200      	movs	r2, #0
 80151ee:	0020      	movs	r0, r4
 80151f0:	0029      	movs	r1, r5
 80151f2:	4b50      	ldr	r3, [pc, #320]	; (8015334 <_strtod_l+0xc28>)
 80151f4:	f7ec fea2 	bl	8001f3c <__aeabi_dmul>
 80151f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80151fa:	0005      	movs	r5, r0
 80151fc:	000b      	movs	r3, r1
 80151fe:	000c      	movs	r4, r1
 8015200:	2a00      	cmp	r2, #0
 8015202:	d107      	bne.n	8015214 <_strtod_l+0xb08>
 8015204:	2280      	movs	r2, #128	; 0x80
 8015206:	0612      	lsls	r2, r2, #24
 8015208:	188b      	adds	r3, r1, r2
 801520a:	9016      	str	r0, [sp, #88]	; 0x58
 801520c:	9317      	str	r3, [sp, #92]	; 0x5c
 801520e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015212:	e7dc      	b.n	80151ce <_strtod_l+0xac2>
 8015214:	0002      	movs	r2, r0
 8015216:	9216      	str	r2, [sp, #88]	; 0x58
 8015218:	9317      	str	r3, [sp, #92]	; 0x5c
 801521a:	e7f8      	b.n	801520e <_strtod_l+0xb02>
 801521c:	23d4      	movs	r3, #212	; 0xd4
 801521e:	049b      	lsls	r3, r3, #18
 8015220:	18cf      	adds	r7, r1, r3
 8015222:	9b08      	ldr	r3, [sp, #32]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d1a5      	bne.n	8015174 <_strtod_l+0xa68>
 8015228:	4b3d      	ldr	r3, [pc, #244]	; (8015320 <_strtod_l+0xc14>)
 801522a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801522c:	403b      	ands	r3, r7
 801522e:	429a      	cmp	r2, r3
 8015230:	d1a0      	bne.n	8015174 <_strtod_l+0xa68>
 8015232:	0028      	movs	r0, r5
 8015234:	0021      	movs	r1, r4
 8015236:	f7eb f9f7 	bl	8000628 <__aeabi_d2lz>
 801523a:	f7eb fa31 	bl	80006a0 <__aeabi_l2d>
 801523e:	0002      	movs	r2, r0
 8015240:	000b      	movs	r3, r1
 8015242:	0028      	movs	r0, r5
 8015244:	0021      	movs	r1, r4
 8015246:	f7ed f8e5 	bl	8002414 <__aeabi_dsub>
 801524a:	033b      	lsls	r3, r7, #12
 801524c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801524e:	0b1b      	lsrs	r3, r3, #12
 8015250:	4333      	orrs	r3, r6
 8015252:	4313      	orrs	r3, r2
 8015254:	0004      	movs	r4, r0
 8015256:	000d      	movs	r5, r1
 8015258:	4a38      	ldr	r2, [pc, #224]	; (801533c <_strtod_l+0xc30>)
 801525a:	2b00      	cmp	r3, #0
 801525c:	d055      	beq.n	801530a <_strtod_l+0xbfe>
 801525e:	4b38      	ldr	r3, [pc, #224]	; (8015340 <_strtod_l+0xc34>)
 8015260:	f7eb f902 	bl	8000468 <__aeabi_dcmplt>
 8015264:	2800      	cmp	r0, #0
 8015266:	d000      	beq.n	801526a <_strtod_l+0xb5e>
 8015268:	e4c7      	b.n	8014bfa <_strtod_l+0x4ee>
 801526a:	0020      	movs	r0, r4
 801526c:	0029      	movs	r1, r5
 801526e:	4a35      	ldr	r2, [pc, #212]	; (8015344 <_strtod_l+0xc38>)
 8015270:	4b30      	ldr	r3, [pc, #192]	; (8015334 <_strtod_l+0xc28>)
 8015272:	f7eb f90d 	bl	8000490 <__aeabi_dcmpgt>
 8015276:	2800      	cmp	r0, #0
 8015278:	d100      	bne.n	801527c <_strtod_l+0xb70>
 801527a:	e77b      	b.n	8015174 <_strtod_l+0xa68>
 801527c:	e4bd      	b.n	8014bfa <_strtod_l+0x4ee>
 801527e:	9b08      	ldr	r3, [sp, #32]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d02b      	beq.n	80152dc <_strtod_l+0xbd0>
 8015284:	23d4      	movs	r3, #212	; 0xd4
 8015286:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015288:	04db      	lsls	r3, r3, #19
 801528a:	429a      	cmp	r2, r3
 801528c:	d826      	bhi.n	80152dc <_strtod_l+0xbd0>
 801528e:	0028      	movs	r0, r5
 8015290:	0021      	movs	r1, r4
 8015292:	4a2d      	ldr	r2, [pc, #180]	; (8015348 <_strtod_l+0xc3c>)
 8015294:	4b2d      	ldr	r3, [pc, #180]	; (801534c <_strtod_l+0xc40>)
 8015296:	f7eb f8f1 	bl	800047c <__aeabi_dcmple>
 801529a:	2800      	cmp	r0, #0
 801529c:	d017      	beq.n	80152ce <_strtod_l+0xbc2>
 801529e:	0028      	movs	r0, r5
 80152a0:	0021      	movs	r1, r4
 80152a2:	f7eb f9a3 	bl	80005ec <__aeabi_d2uiz>
 80152a6:	2800      	cmp	r0, #0
 80152a8:	d100      	bne.n	80152ac <_strtod_l+0xba0>
 80152aa:	3001      	adds	r0, #1
 80152ac:	f7ed fcc8 	bl	8002c40 <__aeabi_ui2d>
 80152b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80152b2:	0005      	movs	r5, r0
 80152b4:	000b      	movs	r3, r1
 80152b6:	000c      	movs	r4, r1
 80152b8:	2a00      	cmp	r2, #0
 80152ba:	d122      	bne.n	8015302 <_strtod_l+0xbf6>
 80152bc:	2280      	movs	r2, #128	; 0x80
 80152be:	0612      	lsls	r2, r2, #24
 80152c0:	188b      	adds	r3, r1, r2
 80152c2:	9018      	str	r0, [sp, #96]	; 0x60
 80152c4:	9319      	str	r3, [sp, #100]	; 0x64
 80152c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80152c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80152ca:	9212      	str	r2, [sp, #72]	; 0x48
 80152cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80152ce:	22d6      	movs	r2, #214	; 0xd6
 80152d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152d2:	04d2      	lsls	r2, r2, #19
 80152d4:	189b      	adds	r3, r3, r2
 80152d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152d8:	1a9b      	subs	r3, r3, r2
 80152da:	9313      	str	r3, [sp, #76]	; 0x4c
 80152dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80152de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80152e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80152e2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80152e4:	f003 fa36 	bl	8018754 <__ulp>
 80152e8:	0002      	movs	r2, r0
 80152ea:	000b      	movs	r3, r1
 80152ec:	0030      	movs	r0, r6
 80152ee:	0039      	movs	r1, r7
 80152f0:	f7ec fe24 	bl	8001f3c <__aeabi_dmul>
 80152f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152f8:	f7eb feb0 	bl	800105c <__aeabi_dadd>
 80152fc:	0006      	movs	r6, r0
 80152fe:	000f      	movs	r7, r1
 8015300:	e78f      	b.n	8015222 <_strtod_l+0xb16>
 8015302:	0002      	movs	r2, r0
 8015304:	9218      	str	r2, [sp, #96]	; 0x60
 8015306:	9319      	str	r3, [sp, #100]	; 0x64
 8015308:	e7dd      	b.n	80152c6 <_strtod_l+0xbba>
 801530a:	4b11      	ldr	r3, [pc, #68]	; (8015350 <_strtod_l+0xc44>)
 801530c:	f7eb f8ac 	bl	8000468 <__aeabi_dcmplt>
 8015310:	e7b1      	b.n	8015276 <_strtod_l+0xb6a>
 8015312:	46c0      	nop			; (mov r8, r8)
 8015314:	fff00000 	.word	0xfff00000
 8015318:	000fffff 	.word	0x000fffff
 801531c:	3ff00000 	.word	0x3ff00000
 8015320:	7ff00000 	.word	0x7ff00000
 8015324:	7fe00000 	.word	0x7fe00000
 8015328:	fcb00000 	.word	0xfcb00000
 801532c:	7c9fffff 	.word	0x7c9fffff
 8015330:	7fefffff 	.word	0x7fefffff
 8015334:	3fe00000 	.word	0x3fe00000
 8015338:	bff00000 	.word	0xbff00000
 801533c:	94a03595 	.word	0x94a03595
 8015340:	3fdfffff 	.word	0x3fdfffff
 8015344:	35afe535 	.word	0x35afe535
 8015348:	ffc00000 	.word	0xffc00000
 801534c:	41dfffff 	.word	0x41dfffff
 8015350:	3fcfffff 	.word	0x3fcfffff

08015354 <strtod>:
 8015354:	b510      	push	{r4, lr}
 8015356:	000a      	movs	r2, r1
 8015358:	0001      	movs	r1, r0
 801535a:	4803      	ldr	r0, [pc, #12]	; (8015368 <strtod+0x14>)
 801535c:	4b03      	ldr	r3, [pc, #12]	; (801536c <strtod+0x18>)
 801535e:	6800      	ldr	r0, [r0, #0]
 8015360:	f7ff f9d4 	bl	801470c <_strtod_l>
 8015364:	bd10      	pop	{r4, pc}
 8015366:	46c0      	nop			; (mov r8, r8)
 8015368:	200000a8 	.word	0x200000a8
 801536c:	200008f0 	.word	0x200008f0

08015370 <strtok>:
 8015370:	4b03      	ldr	r3, [pc, #12]	; (8015380 <strtok+0x10>)
 8015372:	b510      	push	{r4, lr}
 8015374:	681a      	ldr	r2, [r3, #0]
 8015376:	2301      	movs	r3, #1
 8015378:	325c      	adds	r2, #92	; 0x5c
 801537a:	f000 f803 	bl	8015384 <__strtok_r>
 801537e:	bd10      	pop	{r4, pc}
 8015380:	200000a8 	.word	0x200000a8

08015384 <__strtok_r>:
 8015384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015386:	2800      	cmp	r0, #0
 8015388:	d102      	bne.n	8015390 <__strtok_r+0xc>
 801538a:	6810      	ldr	r0, [r2, #0]
 801538c:	2800      	cmp	r0, #0
 801538e:	d013      	beq.n	80153b8 <__strtok_r+0x34>
 8015390:	0004      	movs	r4, r0
 8015392:	0020      	movs	r0, r4
 8015394:	000e      	movs	r6, r1
 8015396:	7805      	ldrb	r5, [r0, #0]
 8015398:	3401      	adds	r4, #1
 801539a:	7837      	ldrb	r7, [r6, #0]
 801539c:	2f00      	cmp	r7, #0
 801539e:	d104      	bne.n	80153aa <__strtok_r+0x26>
 80153a0:	2d00      	cmp	r5, #0
 80153a2:	d10f      	bne.n	80153c4 <__strtok_r+0x40>
 80153a4:	0028      	movs	r0, r5
 80153a6:	6015      	str	r5, [r2, #0]
 80153a8:	e006      	b.n	80153b8 <__strtok_r+0x34>
 80153aa:	3601      	adds	r6, #1
 80153ac:	42bd      	cmp	r5, r7
 80153ae:	d1f4      	bne.n	801539a <__strtok_r+0x16>
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d1ee      	bne.n	8015392 <__strtok_r+0xe>
 80153b4:	6014      	str	r4, [r2, #0]
 80153b6:	7003      	strb	r3, [r0, #0]
 80153b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153ba:	002f      	movs	r7, r5
 80153bc:	e00f      	b.n	80153de <__strtok_r+0x5a>
 80153be:	3301      	adds	r3, #1
 80153c0:	2e00      	cmp	r6, #0
 80153c2:	d104      	bne.n	80153ce <__strtok_r+0x4a>
 80153c4:	0023      	movs	r3, r4
 80153c6:	3401      	adds	r4, #1
 80153c8:	781d      	ldrb	r5, [r3, #0]
 80153ca:	0027      	movs	r7, r4
 80153cc:	000b      	movs	r3, r1
 80153ce:	781e      	ldrb	r6, [r3, #0]
 80153d0:	42b5      	cmp	r5, r6
 80153d2:	d1f4      	bne.n	80153be <__strtok_r+0x3a>
 80153d4:	2d00      	cmp	r5, #0
 80153d6:	d0f0      	beq.n	80153ba <__strtok_r+0x36>
 80153d8:	2300      	movs	r3, #0
 80153da:	3c01      	subs	r4, #1
 80153dc:	7023      	strb	r3, [r4, #0]
 80153de:	6017      	str	r7, [r2, #0]
 80153e0:	e7ea      	b.n	80153b8 <__strtok_r+0x34>
	...

080153e4 <_strtol_l.isra.0>:
 80153e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153e6:	b087      	sub	sp, #28
 80153e8:	001e      	movs	r6, r3
 80153ea:	9005      	str	r0, [sp, #20]
 80153ec:	9101      	str	r1, [sp, #4]
 80153ee:	9202      	str	r2, [sp, #8]
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	d045      	beq.n	8015480 <_strtol_l.isra.0+0x9c>
 80153f4:	0008      	movs	r0, r1
 80153f6:	2b24      	cmp	r3, #36	; 0x24
 80153f8:	d842      	bhi.n	8015480 <_strtol_l.isra.0+0x9c>
 80153fa:	4b3f      	ldr	r3, [pc, #252]	; (80154f8 <_strtol_l.isra.0+0x114>)
 80153fc:	2208      	movs	r2, #8
 80153fe:	469c      	mov	ip, r3
 8015400:	0003      	movs	r3, r0
 8015402:	4661      	mov	r1, ip
 8015404:	781c      	ldrb	r4, [r3, #0]
 8015406:	1c45      	adds	r5, r0, #1
 8015408:	5d09      	ldrb	r1, [r1, r4]
 801540a:	0028      	movs	r0, r5
 801540c:	000f      	movs	r7, r1
 801540e:	4017      	ands	r7, r2
 8015410:	4211      	tst	r1, r2
 8015412:	d1f5      	bne.n	8015400 <_strtol_l.isra.0+0x1c>
 8015414:	2c2d      	cmp	r4, #45	; 0x2d
 8015416:	d13a      	bne.n	801548e <_strtol_l.isra.0+0xaa>
 8015418:	2701      	movs	r7, #1
 801541a:	782c      	ldrb	r4, [r5, #0]
 801541c:	1c9d      	adds	r5, r3, #2
 801541e:	2e00      	cmp	r6, #0
 8015420:	d065      	beq.n	80154ee <_strtol_l.isra.0+0x10a>
 8015422:	2e10      	cmp	r6, #16
 8015424:	d109      	bne.n	801543a <_strtol_l.isra.0+0x56>
 8015426:	2c30      	cmp	r4, #48	; 0x30
 8015428:	d107      	bne.n	801543a <_strtol_l.isra.0+0x56>
 801542a:	2220      	movs	r2, #32
 801542c:	782b      	ldrb	r3, [r5, #0]
 801542e:	4393      	bics	r3, r2
 8015430:	2b58      	cmp	r3, #88	; 0x58
 8015432:	d157      	bne.n	80154e4 <_strtol_l.isra.0+0x100>
 8015434:	2610      	movs	r6, #16
 8015436:	786c      	ldrb	r4, [r5, #1]
 8015438:	3502      	adds	r5, #2
 801543a:	4b30      	ldr	r3, [pc, #192]	; (80154fc <_strtol_l.isra.0+0x118>)
 801543c:	0031      	movs	r1, r6
 801543e:	18fb      	adds	r3, r7, r3
 8015440:	0018      	movs	r0, r3
 8015442:	9303      	str	r3, [sp, #12]
 8015444:	f7ea ff0a 	bl	800025c <__aeabi_uidivmod>
 8015448:	2300      	movs	r3, #0
 801544a:	2201      	movs	r2, #1
 801544c:	4684      	mov	ip, r0
 801544e:	0018      	movs	r0, r3
 8015450:	9104      	str	r1, [sp, #16]
 8015452:	4252      	negs	r2, r2
 8015454:	0021      	movs	r1, r4
 8015456:	3930      	subs	r1, #48	; 0x30
 8015458:	2909      	cmp	r1, #9
 801545a:	d81d      	bhi.n	8015498 <_strtol_l.isra.0+0xb4>
 801545c:	000c      	movs	r4, r1
 801545e:	42a6      	cmp	r6, r4
 8015460:	dd28      	ble.n	80154b4 <_strtol_l.isra.0+0xd0>
 8015462:	2b00      	cmp	r3, #0
 8015464:	db24      	blt.n	80154b0 <_strtol_l.isra.0+0xcc>
 8015466:	0013      	movs	r3, r2
 8015468:	4584      	cmp	ip, r0
 801546a:	d306      	bcc.n	801547a <_strtol_l.isra.0+0x96>
 801546c:	d102      	bne.n	8015474 <_strtol_l.isra.0+0x90>
 801546e:	9904      	ldr	r1, [sp, #16]
 8015470:	42a1      	cmp	r1, r4
 8015472:	db02      	blt.n	801547a <_strtol_l.isra.0+0x96>
 8015474:	2301      	movs	r3, #1
 8015476:	4370      	muls	r0, r6
 8015478:	1820      	adds	r0, r4, r0
 801547a:	782c      	ldrb	r4, [r5, #0]
 801547c:	3501      	adds	r5, #1
 801547e:	e7e9      	b.n	8015454 <_strtol_l.isra.0+0x70>
 8015480:	f002 f960 	bl	8017744 <__errno>
 8015484:	2316      	movs	r3, #22
 8015486:	6003      	str	r3, [r0, #0]
 8015488:	2000      	movs	r0, #0
 801548a:	b007      	add	sp, #28
 801548c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801548e:	2c2b      	cmp	r4, #43	; 0x2b
 8015490:	d1c5      	bne.n	801541e <_strtol_l.isra.0+0x3a>
 8015492:	782c      	ldrb	r4, [r5, #0]
 8015494:	1c9d      	adds	r5, r3, #2
 8015496:	e7c2      	b.n	801541e <_strtol_l.isra.0+0x3a>
 8015498:	0021      	movs	r1, r4
 801549a:	3941      	subs	r1, #65	; 0x41
 801549c:	2919      	cmp	r1, #25
 801549e:	d801      	bhi.n	80154a4 <_strtol_l.isra.0+0xc0>
 80154a0:	3c37      	subs	r4, #55	; 0x37
 80154a2:	e7dc      	b.n	801545e <_strtol_l.isra.0+0x7a>
 80154a4:	0021      	movs	r1, r4
 80154a6:	3961      	subs	r1, #97	; 0x61
 80154a8:	2919      	cmp	r1, #25
 80154aa:	d803      	bhi.n	80154b4 <_strtol_l.isra.0+0xd0>
 80154ac:	3c57      	subs	r4, #87	; 0x57
 80154ae:	e7d6      	b.n	801545e <_strtol_l.isra.0+0x7a>
 80154b0:	0013      	movs	r3, r2
 80154b2:	e7e2      	b.n	801547a <_strtol_l.isra.0+0x96>
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	da09      	bge.n	80154cc <_strtol_l.isra.0+0xe8>
 80154b8:	2322      	movs	r3, #34	; 0x22
 80154ba:	9a05      	ldr	r2, [sp, #20]
 80154bc:	9803      	ldr	r0, [sp, #12]
 80154be:	6013      	str	r3, [r2, #0]
 80154c0:	9b02      	ldr	r3, [sp, #8]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d0e1      	beq.n	801548a <_strtol_l.isra.0+0xa6>
 80154c6:	1e6b      	subs	r3, r5, #1
 80154c8:	9301      	str	r3, [sp, #4]
 80154ca:	e007      	b.n	80154dc <_strtol_l.isra.0+0xf8>
 80154cc:	2f00      	cmp	r7, #0
 80154ce:	d000      	beq.n	80154d2 <_strtol_l.isra.0+0xee>
 80154d0:	4240      	negs	r0, r0
 80154d2:	9a02      	ldr	r2, [sp, #8]
 80154d4:	2a00      	cmp	r2, #0
 80154d6:	d0d8      	beq.n	801548a <_strtol_l.isra.0+0xa6>
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d1f4      	bne.n	80154c6 <_strtol_l.isra.0+0xe2>
 80154dc:	9b02      	ldr	r3, [sp, #8]
 80154de:	9a01      	ldr	r2, [sp, #4]
 80154e0:	601a      	str	r2, [r3, #0]
 80154e2:	e7d2      	b.n	801548a <_strtol_l.isra.0+0xa6>
 80154e4:	2430      	movs	r4, #48	; 0x30
 80154e6:	2e00      	cmp	r6, #0
 80154e8:	d1a7      	bne.n	801543a <_strtol_l.isra.0+0x56>
 80154ea:	3608      	adds	r6, #8
 80154ec:	e7a5      	b.n	801543a <_strtol_l.isra.0+0x56>
 80154ee:	2c30      	cmp	r4, #48	; 0x30
 80154f0:	d09b      	beq.n	801542a <_strtol_l.isra.0+0x46>
 80154f2:	260a      	movs	r6, #10
 80154f4:	e7a1      	b.n	801543a <_strtol_l.isra.0+0x56>
 80154f6:	46c0      	nop			; (mov r8, r8)
 80154f8:	0801d905 	.word	0x0801d905
 80154fc:	7fffffff 	.word	0x7fffffff

08015500 <strtol>:
 8015500:	b510      	push	{r4, lr}
 8015502:	0013      	movs	r3, r2
 8015504:	000a      	movs	r2, r1
 8015506:	0001      	movs	r1, r0
 8015508:	4802      	ldr	r0, [pc, #8]	; (8015514 <strtol+0x14>)
 801550a:	6800      	ldr	r0, [r0, #0]
 801550c:	f7ff ff6a 	bl	80153e4 <_strtol_l.isra.0>
 8015510:	bd10      	pop	{r4, pc}
 8015512:	46c0      	nop			; (mov r8, r8)
 8015514:	200000a8 	.word	0x200000a8

08015518 <_svfprintf_r>:
 8015518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801551a:	b0d9      	sub	sp, #356	; 0x164
 801551c:	001c      	movs	r4, r3
 801551e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015520:	9208      	str	r2, [sp, #32]
 8015522:	900a      	str	r0, [sp, #40]	; 0x28
 8015524:	f002 fda8 	bl	8018078 <_localeconv_r>
 8015528:	6803      	ldr	r3, [r0, #0]
 801552a:	0018      	movs	r0, r3
 801552c:	931c      	str	r3, [sp, #112]	; 0x70
 801552e:	f7ea fdf3 	bl	8000118 <strlen>
 8015532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015534:	9016      	str	r0, [sp, #88]	; 0x58
 8015536:	899b      	ldrh	r3, [r3, #12]
 8015538:	061b      	lsls	r3, r3, #24
 801553a:	d518      	bpl.n	801556e <_svfprintf_r+0x56>
 801553c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801553e:	691b      	ldr	r3, [r3, #16]
 8015540:	9309      	str	r3, [sp, #36]	; 0x24
 8015542:	2b00      	cmp	r3, #0
 8015544:	d113      	bne.n	801556e <_svfprintf_r+0x56>
 8015546:	2140      	movs	r1, #64	; 0x40
 8015548:	980a      	ldr	r0, [sp, #40]	; 0x28
 801554a:	f7fe fc3f 	bl	8013dcc <_malloc_r>
 801554e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015550:	6018      	str	r0, [r3, #0]
 8015552:	6118      	str	r0, [r3, #16]
 8015554:	2800      	cmp	r0, #0
 8015556:	d107      	bne.n	8015568 <_svfprintf_r+0x50>
 8015558:	230c      	movs	r3, #12
 801555a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801555c:	6013      	str	r3, [r2, #0]
 801555e:	3b0d      	subs	r3, #13
 8015560:	9317      	str	r3, [sp, #92]	; 0x5c
 8015562:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015564:	b059      	add	sp, #356	; 0x164
 8015566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015568:	2340      	movs	r3, #64	; 0x40
 801556a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801556c:	6153      	str	r3, [r2, #20]
 801556e:	2300      	movs	r3, #0
 8015570:	2200      	movs	r2, #0
 8015572:	932e      	str	r3, [sp, #184]	; 0xb8
 8015574:	932d      	str	r3, [sp, #180]	; 0xb4
 8015576:	930d      	str	r3, [sp, #52]	; 0x34
 8015578:	2300      	movs	r3, #0
 801557a:	9214      	str	r2, [sp, #80]	; 0x50
 801557c:	9315      	str	r3, [sp, #84]	; 0x54
 801557e:	2300      	movs	r3, #0
 8015580:	af2f      	add	r7, sp, #188	; 0xbc
 8015582:	972c      	str	r7, [sp, #176]	; 0xb0
 8015584:	931f      	str	r3, [sp, #124]	; 0x7c
 8015586:	931e      	str	r3, [sp, #120]	; 0x78
 8015588:	9312      	str	r3, [sp, #72]	; 0x48
 801558a:	931b      	str	r3, [sp, #108]	; 0x6c
 801558c:	931d      	str	r3, [sp, #116]	; 0x74
 801558e:	9317      	str	r3, [sp, #92]	; 0x5c
 8015590:	9d08      	ldr	r5, [sp, #32]
 8015592:	782b      	ldrb	r3, [r5, #0]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d002      	beq.n	801559e <_svfprintf_r+0x86>
 8015598:	2b25      	cmp	r3, #37	; 0x25
 801559a:	d000      	beq.n	801559e <_svfprintf_r+0x86>
 801559c:	e092      	b.n	80156c4 <_svfprintf_r+0x1ac>
 801559e:	9b08      	ldr	r3, [sp, #32]
 80155a0:	1aee      	subs	r6, r5, r3
 80155a2:	429d      	cmp	r5, r3
 80155a4:	d017      	beq.n	80155d6 <_svfprintf_r+0xbe>
 80155a6:	603b      	str	r3, [r7, #0]
 80155a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80155aa:	607e      	str	r6, [r7, #4]
 80155ac:	199b      	adds	r3, r3, r6
 80155ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80155b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155b2:	3708      	adds	r7, #8
 80155b4:	9309      	str	r3, [sp, #36]	; 0x24
 80155b6:	3301      	adds	r3, #1
 80155b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80155ba:	2b07      	cmp	r3, #7
 80155bc:	dd08      	ble.n	80155d0 <_svfprintf_r+0xb8>
 80155be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80155c4:	f003 fa42 	bl	8018a4c <__ssprint_r>
 80155c8:	2800      	cmp	r0, #0
 80155ca:	d000      	beq.n	80155ce <_svfprintf_r+0xb6>
 80155cc:	e2aa      	b.n	8015b24 <_svfprintf_r+0x60c>
 80155ce:	af2f      	add	r7, sp, #188	; 0xbc
 80155d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80155d2:	199b      	adds	r3, r3, r6
 80155d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80155d6:	782b      	ldrb	r3, [r5, #0]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d101      	bne.n	80155e0 <_svfprintf_r+0xc8>
 80155dc:	f001 f9d2 	bl	8016984 <_svfprintf_r+0x146c>
 80155e0:	221b      	movs	r2, #27
 80155e2:	2300      	movs	r3, #0
 80155e4:	a91e      	add	r1, sp, #120	; 0x78
 80155e6:	1852      	adds	r2, r2, r1
 80155e8:	7013      	strb	r3, [r2, #0]
 80155ea:	2201      	movs	r2, #1
 80155ec:	001e      	movs	r6, r3
 80155ee:	4252      	negs	r2, r2
 80155f0:	3501      	adds	r5, #1
 80155f2:	9209      	str	r2, [sp, #36]	; 0x24
 80155f4:	9318      	str	r3, [sp, #96]	; 0x60
 80155f6:	1c6b      	adds	r3, r5, #1
 80155f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80155fa:	782b      	ldrb	r3, [r5, #0]
 80155fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80155fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015600:	3820      	subs	r0, #32
 8015602:	285a      	cmp	r0, #90	; 0x5a
 8015604:	d901      	bls.n	801560a <_svfprintf_r+0xf2>
 8015606:	f000 fe2e 	bl	8016266 <_svfprintf_r+0xd4e>
 801560a:	f7ea fd97 	bl	800013c <__gnu_thumb1_case_uhi>
 801560e:	0078      	.short	0x0078
 8015610:	062c062c 	.word	0x062c062c
 8015614:	062c0082 	.word	0x062c0082
 8015618:	062c062c 	.word	0x062c062c
 801561c:	062c005d 	.word	0x062c005d
 8015620:	0084062c 	.word	0x0084062c
 8015624:	062c008c 	.word	0x062c008c
 8015628:	0091008a 	.word	0x0091008a
 801562c:	00b2062c 	.word	0x00b2062c
 8015630:	00b400b4 	.word	0x00b400b4
 8015634:	00b400b4 	.word	0x00b400b4
 8015638:	00b400b4 	.word	0x00b400b4
 801563c:	00b400b4 	.word	0x00b400b4
 8015640:	062c00b4 	.word	0x062c00b4
 8015644:	062c062c 	.word	0x062c062c
 8015648:	062c062c 	.word	0x062c062c
 801564c:	062c062c 	.word	0x062c062c
 8015650:	062c0216 	.word	0x062c0216
 8015654:	01cf00e0 	.word	0x01cf00e0
 8015658:	02160216 	.word	0x02160216
 801565c:	062c0216 	.word	0x062c0216
 8015660:	062c062c 	.word	0x062c062c
 8015664:	00c7062c 	.word	0x00c7062c
 8015668:	062c062c 	.word	0x062c062c
 801566c:	062c04d6 	.word	0x062c04d6
 8015670:	062c062c 	.word	0x062c062c
 8015674:	062c051d 	.word	0x062c051d
 8015678:	062c053d 	.word	0x062c053d
 801567c:	056e062c 	.word	0x056e062c
 8015680:	062c062c 	.word	0x062c062c
 8015684:	062c062c 	.word	0x062c062c
 8015688:	062c062c 	.word	0x062c062c
 801568c:	062c062c 	.word	0x062c062c
 8015690:	062c0216 	.word	0x062c0216
 8015694:	01d100e0 	.word	0x01d100e0
 8015698:	02160216 	.word	0x02160216
 801569c:	00c90216 	.word	0x00c90216
 80156a0:	00dc01d1 	.word	0x00dc01d1
 80156a4:	00d5062c 	.word	0x00d5062c
 80156a8:	04b9062c 	.word	0x04b9062c
 80156ac:	050d04d8 	.word	0x050d04d8
 80156b0:	062c00dc 	.word	0x062c00dc
 80156b4:	0080051d 	.word	0x0080051d
 80156b8:	062c053f 	.word	0x062c053f
 80156bc:	058e062c 	.word	0x058e062c
 80156c0:	0080062c 	.word	0x0080062c
 80156c4:	3501      	adds	r5, #1
 80156c6:	e764      	b.n	8015592 <_svfprintf_r+0x7a>
 80156c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156ca:	f002 fcd5 	bl	8018078 <_localeconv_r>
 80156ce:	6843      	ldr	r3, [r0, #4]
 80156d0:	0018      	movs	r0, r3
 80156d2:	931d      	str	r3, [sp, #116]	; 0x74
 80156d4:	f7ea fd20 	bl	8000118 <strlen>
 80156d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80156da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156dc:	f002 fccc 	bl	8018078 <_localeconv_r>
 80156e0:	6883      	ldr	r3, [r0, #8]
 80156e2:	9312      	str	r3, [sp, #72]	; 0x48
 80156e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d011      	beq.n	801570e <_svfprintf_r+0x1f6>
 80156ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d00e      	beq.n	801570e <_svfprintf_r+0x1f6>
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d00b      	beq.n	801570e <_svfprintf_r+0x1f6>
 80156f6:	2380      	movs	r3, #128	; 0x80
 80156f8:	00db      	lsls	r3, r3, #3
 80156fa:	431e      	orrs	r6, r3
 80156fc:	e007      	b.n	801570e <_svfprintf_r+0x1f6>
 80156fe:	231b      	movs	r3, #27
 8015700:	aa1e      	add	r2, sp, #120	; 0x78
 8015702:	189b      	adds	r3, r3, r2
 8015704:	781a      	ldrb	r2, [r3, #0]
 8015706:	2a00      	cmp	r2, #0
 8015708:	d101      	bne.n	801570e <_svfprintf_r+0x1f6>
 801570a:	3220      	adds	r2, #32
 801570c:	701a      	strb	r2, [r3, #0]
 801570e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015710:	e771      	b.n	80155f6 <_svfprintf_r+0xde>
 8015712:	2301      	movs	r3, #1
 8015714:	e7f1      	b.n	80156fa <_svfprintf_r+0x1e2>
 8015716:	cc08      	ldmia	r4!, {r3}
 8015718:	9318      	str	r3, [sp, #96]	; 0x60
 801571a:	2b00      	cmp	r3, #0
 801571c:	daf7      	bge.n	801570e <_svfprintf_r+0x1f6>
 801571e:	425b      	negs	r3, r3
 8015720:	9318      	str	r3, [sp, #96]	; 0x60
 8015722:	2304      	movs	r3, #4
 8015724:	e7e9      	b.n	80156fa <_svfprintf_r+0x1e2>
 8015726:	231b      	movs	r3, #27
 8015728:	aa1e      	add	r2, sp, #120	; 0x78
 801572a:	189b      	adds	r3, r3, r2
 801572c:	222b      	movs	r2, #43	; 0x2b
 801572e:	e7ed      	b.n	801570c <_svfprintf_r+0x1f4>
 8015730:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015732:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015734:	7812      	ldrb	r2, [r2, #0]
 8015736:	3301      	adds	r3, #1
 8015738:	920f      	str	r2, [sp, #60]	; 0x3c
 801573a:	2a2a      	cmp	r2, #42	; 0x2a
 801573c:	d010      	beq.n	8015760 <_svfprintf_r+0x248>
 801573e:	2200      	movs	r2, #0
 8015740:	9209      	str	r2, [sp, #36]	; 0x24
 8015742:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015744:	9313      	str	r3, [sp, #76]	; 0x4c
 8015746:	3a30      	subs	r2, #48	; 0x30
 8015748:	2a09      	cmp	r2, #9
 801574a:	d900      	bls.n	801574e <_svfprintf_r+0x236>
 801574c:	e757      	b.n	80155fe <_svfprintf_r+0xe6>
 801574e:	210a      	movs	r1, #10
 8015750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015752:	4348      	muls	r0, r1
 8015754:	1882      	adds	r2, r0, r2
 8015756:	9209      	str	r2, [sp, #36]	; 0x24
 8015758:	781a      	ldrb	r2, [r3, #0]
 801575a:	3301      	adds	r3, #1
 801575c:	920f      	str	r2, [sp, #60]	; 0x3c
 801575e:	e7f0      	b.n	8015742 <_svfprintf_r+0x22a>
 8015760:	cc04      	ldmia	r4!, {r2}
 8015762:	9209      	str	r2, [sp, #36]	; 0x24
 8015764:	2a00      	cmp	r2, #0
 8015766:	da02      	bge.n	801576e <_svfprintf_r+0x256>
 8015768:	2201      	movs	r2, #1
 801576a:	4252      	negs	r2, r2
 801576c:	9209      	str	r2, [sp, #36]	; 0x24
 801576e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015770:	e7cd      	b.n	801570e <_svfprintf_r+0x1f6>
 8015772:	2380      	movs	r3, #128	; 0x80
 8015774:	e7c1      	b.n	80156fa <_svfprintf_r+0x1e2>
 8015776:	2200      	movs	r2, #0
 8015778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801577a:	9218      	str	r2, [sp, #96]	; 0x60
 801577c:	210a      	movs	r1, #10
 801577e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015780:	434a      	muls	r2, r1
 8015782:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015784:	3930      	subs	r1, #48	; 0x30
 8015786:	188a      	adds	r2, r1, r2
 8015788:	9218      	str	r2, [sp, #96]	; 0x60
 801578a:	001a      	movs	r2, r3
 801578c:	7812      	ldrb	r2, [r2, #0]
 801578e:	3301      	adds	r3, #1
 8015790:	920f      	str	r2, [sp, #60]	; 0x3c
 8015792:	3a30      	subs	r2, #48	; 0x30
 8015794:	9313      	str	r3, [sp, #76]	; 0x4c
 8015796:	2a09      	cmp	r2, #9
 8015798:	d9f0      	bls.n	801577c <_svfprintf_r+0x264>
 801579a:	e730      	b.n	80155fe <_svfprintf_r+0xe6>
 801579c:	2308      	movs	r3, #8
 801579e:	e7ac      	b.n	80156fa <_svfprintf_r+0x1e2>
 80157a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	2b68      	cmp	r3, #104	; 0x68
 80157a6:	d105      	bne.n	80157b4 <_svfprintf_r+0x29c>
 80157a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157aa:	3301      	adds	r3, #1
 80157ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80157ae:	2380      	movs	r3, #128	; 0x80
 80157b0:	009b      	lsls	r3, r3, #2
 80157b2:	e7a2      	b.n	80156fa <_svfprintf_r+0x1e2>
 80157b4:	2340      	movs	r3, #64	; 0x40
 80157b6:	e7a0      	b.n	80156fa <_svfprintf_r+0x1e2>
 80157b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157ba:	781b      	ldrb	r3, [r3, #0]
 80157bc:	2b6c      	cmp	r3, #108	; 0x6c
 80157be:	d104      	bne.n	80157ca <_svfprintf_r+0x2b2>
 80157c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157c2:	3301      	adds	r3, #1
 80157c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80157c6:	2320      	movs	r3, #32
 80157c8:	e797      	b.n	80156fa <_svfprintf_r+0x1e2>
 80157ca:	2310      	movs	r3, #16
 80157cc:	e795      	b.n	80156fa <_svfprintf_r+0x1e2>
 80157ce:	0022      	movs	r2, r4
 80157d0:	ca08      	ldmia	r2!, {r3}
 80157d2:	a83f      	add	r0, sp, #252	; 0xfc
 80157d4:	920e      	str	r2, [sp, #56]	; 0x38
 80157d6:	221b      	movs	r2, #27
 80157d8:	7003      	strb	r3, [r0, #0]
 80157da:	2300      	movs	r3, #0
 80157dc:	a91e      	add	r1, sp, #120	; 0x78
 80157de:	1852      	adds	r2, r2, r1
 80157e0:	7013      	strb	r3, [r2, #0]
 80157e2:	930c      	str	r3, [sp, #48]	; 0x30
 80157e4:	3301      	adds	r3, #1
 80157e6:	9309      	str	r3, [sp, #36]	; 0x24
 80157e8:	2300      	movs	r3, #0
 80157ea:	001d      	movs	r5, r3
 80157ec:	9319      	str	r3, [sp, #100]	; 0x64
 80157ee:	9310      	str	r3, [sp, #64]	; 0x40
 80157f0:	9311      	str	r3, [sp, #68]	; 0x44
 80157f2:	9008      	str	r0, [sp, #32]
 80157f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80157f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157f8:	931a      	str	r3, [sp, #104]	; 0x68
 80157fa:	4293      	cmp	r3, r2
 80157fc:	da00      	bge.n	8015800 <_svfprintf_r+0x2e8>
 80157fe:	921a      	str	r2, [sp, #104]	; 0x68
 8015800:	231b      	movs	r3, #27
 8015802:	aa1e      	add	r2, sp, #120	; 0x78
 8015804:	189b      	adds	r3, r3, r2
 8015806:	781b      	ldrb	r3, [r3, #0]
 8015808:	1e5a      	subs	r2, r3, #1
 801580a:	4193      	sbcs	r3, r2
 801580c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801580e:	18d3      	adds	r3, r2, r3
 8015810:	931a      	str	r3, [sp, #104]	; 0x68
 8015812:	0032      	movs	r2, r6
 8015814:	2302      	movs	r3, #2
 8015816:	401a      	ands	r2, r3
 8015818:	9220      	str	r2, [sp, #128]	; 0x80
 801581a:	421e      	tst	r6, r3
 801581c:	d002      	beq.n	8015824 <_svfprintf_r+0x30c>
 801581e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015820:	3302      	adds	r3, #2
 8015822:	931a      	str	r3, [sp, #104]	; 0x68
 8015824:	2384      	movs	r3, #132	; 0x84
 8015826:	0032      	movs	r2, r6
 8015828:	401a      	ands	r2, r3
 801582a:	9221      	str	r2, [sp, #132]	; 0x84
 801582c:	421e      	tst	r6, r3
 801582e:	d121      	bne.n	8015874 <_svfprintf_r+0x35c>
 8015830:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015832:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015834:	1a9c      	subs	r4, r3, r2
 8015836:	2c00      	cmp	r4, #0
 8015838:	dd1c      	ble.n	8015874 <_svfprintf_r+0x35c>
 801583a:	0039      	movs	r1, r7
 801583c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801583e:	48c5      	ldr	r0, [pc, #788]	; (8015b54 <_svfprintf_r+0x63c>)
 8015840:	9322      	str	r3, [sp, #136]	; 0x88
 8015842:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015844:	3301      	adds	r3, #1
 8015846:	3108      	adds	r1, #8
 8015848:	6038      	str	r0, [r7, #0]
 801584a:	2c10      	cmp	r4, #16
 801584c:	dd01      	ble.n	8015852 <_svfprintf_r+0x33a>
 801584e:	f000 fd1d 	bl	801628c <_svfprintf_r+0xd74>
 8015852:	607c      	str	r4, [r7, #4]
 8015854:	18a4      	adds	r4, r4, r2
 8015856:	000f      	movs	r7, r1
 8015858:	942e      	str	r4, [sp, #184]	; 0xb8
 801585a:	932d      	str	r3, [sp, #180]	; 0xb4
 801585c:	2b07      	cmp	r3, #7
 801585e:	dd09      	ble.n	8015874 <_svfprintf_r+0x35c>
 8015860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015862:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015864:	aa2c      	add	r2, sp, #176	; 0xb0
 8015866:	f003 f8f1 	bl	8018a4c <__ssprint_r>
 801586a:	2800      	cmp	r0, #0
 801586c:	d001      	beq.n	8015872 <_svfprintf_r+0x35a>
 801586e:	f001 f868 	bl	8016942 <_svfprintf_r+0x142a>
 8015872:	af2f      	add	r7, sp, #188	; 0xbc
 8015874:	231b      	movs	r3, #27
 8015876:	aa1e      	add	r2, sp, #120	; 0x78
 8015878:	189b      	adds	r3, r3, r2
 801587a:	781a      	ldrb	r2, [r3, #0]
 801587c:	2a00      	cmp	r2, #0
 801587e:	d017      	beq.n	80158b0 <_svfprintf_r+0x398>
 8015880:	603b      	str	r3, [r7, #0]
 8015882:	2301      	movs	r3, #1
 8015884:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015886:	607b      	str	r3, [r7, #4]
 8015888:	0013      	movs	r3, r2
 801588a:	3301      	adds	r3, #1
 801588c:	932e      	str	r3, [sp, #184]	; 0xb8
 801588e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015890:	3708      	adds	r7, #8
 8015892:	9322      	str	r3, [sp, #136]	; 0x88
 8015894:	3301      	adds	r3, #1
 8015896:	932d      	str	r3, [sp, #180]	; 0xb4
 8015898:	2b07      	cmp	r3, #7
 801589a:	dd09      	ble.n	80158b0 <_svfprintf_r+0x398>
 801589c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801589e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80158a0:	aa2c      	add	r2, sp, #176	; 0xb0
 80158a2:	f003 f8d3 	bl	8018a4c <__ssprint_r>
 80158a6:	2800      	cmp	r0, #0
 80158a8:	d001      	beq.n	80158ae <_svfprintf_r+0x396>
 80158aa:	f001 f84a 	bl	8016942 <_svfprintf_r+0x142a>
 80158ae:	af2f      	add	r7, sp, #188	; 0xbc
 80158b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d019      	beq.n	80158ea <_svfprintf_r+0x3d2>
 80158b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80158b8:	9320      	str	r3, [sp, #128]	; 0x80
 80158ba:	ab25      	add	r3, sp, #148	; 0x94
 80158bc:	603b      	str	r3, [r7, #0]
 80158be:	2302      	movs	r3, #2
 80158c0:	607b      	str	r3, [r7, #4]
 80158c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80158c4:	3708      	adds	r7, #8
 80158c6:	3302      	adds	r3, #2
 80158c8:	932e      	str	r3, [sp, #184]	; 0xb8
 80158ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80158cc:	9320      	str	r3, [sp, #128]	; 0x80
 80158ce:	3301      	adds	r3, #1
 80158d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80158d2:	2b07      	cmp	r3, #7
 80158d4:	dd09      	ble.n	80158ea <_svfprintf_r+0x3d2>
 80158d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80158da:	aa2c      	add	r2, sp, #176	; 0xb0
 80158dc:	f003 f8b6 	bl	8018a4c <__ssprint_r>
 80158e0:	2800      	cmp	r0, #0
 80158e2:	d001      	beq.n	80158e8 <_svfprintf_r+0x3d0>
 80158e4:	f001 f82d 	bl	8016942 <_svfprintf_r+0x142a>
 80158e8:	af2f      	add	r7, sp, #188	; 0xbc
 80158ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158ec:	2b80      	cmp	r3, #128	; 0x80
 80158ee:	d121      	bne.n	8015934 <_svfprintf_r+0x41c>
 80158f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80158f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80158f4:	1a9c      	subs	r4, r3, r2
 80158f6:	2c00      	cmp	r4, #0
 80158f8:	dd1c      	ble.n	8015934 <_svfprintf_r+0x41c>
 80158fa:	0039      	movs	r1, r7
 80158fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80158fe:	4896      	ldr	r0, [pc, #600]	; (8015b58 <_svfprintf_r+0x640>)
 8015900:	9320      	str	r3, [sp, #128]	; 0x80
 8015902:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015904:	3301      	adds	r3, #1
 8015906:	3108      	adds	r1, #8
 8015908:	6038      	str	r0, [r7, #0]
 801590a:	2c10      	cmp	r4, #16
 801590c:	dd01      	ble.n	8015912 <_svfprintf_r+0x3fa>
 801590e:	f000 fcd1 	bl	80162b4 <_svfprintf_r+0xd9c>
 8015912:	607c      	str	r4, [r7, #4]
 8015914:	18a4      	adds	r4, r4, r2
 8015916:	000f      	movs	r7, r1
 8015918:	942e      	str	r4, [sp, #184]	; 0xb8
 801591a:	932d      	str	r3, [sp, #180]	; 0xb4
 801591c:	2b07      	cmp	r3, #7
 801591e:	dd09      	ble.n	8015934 <_svfprintf_r+0x41c>
 8015920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015922:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015924:	aa2c      	add	r2, sp, #176	; 0xb0
 8015926:	f003 f891 	bl	8018a4c <__ssprint_r>
 801592a:	2800      	cmp	r0, #0
 801592c:	d001      	beq.n	8015932 <_svfprintf_r+0x41a>
 801592e:	f001 f808 	bl	8016942 <_svfprintf_r+0x142a>
 8015932:	af2f      	add	r7, sp, #188	; 0xbc
 8015934:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015938:	1a9c      	subs	r4, r3, r2
 801593a:	2c00      	cmp	r4, #0
 801593c:	dd1c      	ble.n	8015978 <_svfprintf_r+0x460>
 801593e:	0039      	movs	r1, r7
 8015940:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015942:	4885      	ldr	r0, [pc, #532]	; (8015b58 <_svfprintf_r+0x640>)
 8015944:	9319      	str	r3, [sp, #100]	; 0x64
 8015946:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015948:	3301      	adds	r3, #1
 801594a:	3108      	adds	r1, #8
 801594c:	6038      	str	r0, [r7, #0]
 801594e:	2c10      	cmp	r4, #16
 8015950:	dd01      	ble.n	8015956 <_svfprintf_r+0x43e>
 8015952:	f000 fcc3 	bl	80162dc <_svfprintf_r+0xdc4>
 8015956:	1912      	adds	r2, r2, r4
 8015958:	607c      	str	r4, [r7, #4]
 801595a:	922e      	str	r2, [sp, #184]	; 0xb8
 801595c:	000f      	movs	r7, r1
 801595e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015960:	2b07      	cmp	r3, #7
 8015962:	dd09      	ble.n	8015978 <_svfprintf_r+0x460>
 8015964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015966:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015968:	aa2c      	add	r2, sp, #176	; 0xb0
 801596a:	f003 f86f 	bl	8018a4c <__ssprint_r>
 801596e:	2800      	cmp	r0, #0
 8015970:	d001      	beq.n	8015976 <_svfprintf_r+0x45e>
 8015972:	f000 ffe6 	bl	8016942 <_svfprintf_r+0x142a>
 8015976:	af2f      	add	r7, sp, #188	; 0xbc
 8015978:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801597a:	9319      	str	r3, [sp, #100]	; 0x64
 801597c:	05f3      	lsls	r3, r6, #23
 801597e:	d501      	bpl.n	8015984 <_svfprintf_r+0x46c>
 8015980:	f000 fcc8 	bl	8016314 <_svfprintf_r+0xdfc>
 8015984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015986:	9b08      	ldr	r3, [sp, #32]
 8015988:	4694      	mov	ip, r2
 801598a:	603b      	str	r3, [r7, #0]
 801598c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801598e:	607b      	str	r3, [r7, #4]
 8015990:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015992:	4463      	add	r3, ip
 8015994:	932e      	str	r3, [sp, #184]	; 0xb8
 8015996:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015998:	9308      	str	r3, [sp, #32]
 801599a:	3301      	adds	r3, #1
 801599c:	932d      	str	r3, [sp, #180]	; 0xb4
 801599e:	2b07      	cmp	r3, #7
 80159a0:	dd01      	ble.n	80159a6 <_svfprintf_r+0x48e>
 80159a2:	f000 fda8 	bl	80164f6 <_svfprintf_r+0xfde>
 80159a6:	3708      	adds	r7, #8
 80159a8:	f000 fcfb 	bl	80163a2 <_svfprintf_r+0xe8a>
 80159ac:	2310      	movs	r3, #16
 80159ae:	431e      	orrs	r6, r3
 80159b0:	06b3      	lsls	r3, r6, #26
 80159b2:	d530      	bpl.n	8015a16 <_svfprintf_r+0x4fe>
 80159b4:	2307      	movs	r3, #7
 80159b6:	3407      	adds	r4, #7
 80159b8:	439c      	bics	r4, r3
 80159ba:	0022      	movs	r2, r4
 80159bc:	ca18      	ldmia	r2!, {r3, r4}
 80159be:	9306      	str	r3, [sp, #24]
 80159c0:	9407      	str	r4, [sp, #28]
 80159c2:	920e      	str	r2, [sp, #56]	; 0x38
 80159c4:	9a07      	ldr	r2, [sp, #28]
 80159c6:	2301      	movs	r3, #1
 80159c8:	2a00      	cmp	r2, #0
 80159ca:	da0b      	bge.n	80159e4 <_svfprintf_r+0x4cc>
 80159cc:	9c06      	ldr	r4, [sp, #24]
 80159ce:	9d07      	ldr	r5, [sp, #28]
 80159d0:	2200      	movs	r2, #0
 80159d2:	4261      	negs	r1, r4
 80159d4:	41aa      	sbcs	r2, r5
 80159d6:	9106      	str	r1, [sp, #24]
 80159d8:	9207      	str	r2, [sp, #28]
 80159da:	221b      	movs	r2, #27
 80159dc:	a91e      	add	r1, sp, #120	; 0x78
 80159de:	1852      	adds	r2, r2, r1
 80159e0:	212d      	movs	r1, #45	; 0x2d
 80159e2:	7011      	strb	r1, [r2, #0]
 80159e4:	9907      	ldr	r1, [sp, #28]
 80159e6:	9a06      	ldr	r2, [sp, #24]
 80159e8:	430a      	orrs	r2, r1
 80159ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159ec:	3101      	adds	r1, #1
 80159ee:	d101      	bne.n	80159f4 <_svfprintf_r+0x4dc>
 80159f0:	f000 ffd5 	bl	801699e <_svfprintf_r+0x1486>
 80159f4:	2180      	movs	r1, #128	; 0x80
 80159f6:	0035      	movs	r5, r6
 80159f8:	438d      	bics	r5, r1
 80159fa:	2a00      	cmp	r2, #0
 80159fc:	d001      	beq.n	8015a02 <_svfprintf_r+0x4ea>
 80159fe:	f000 ffd3 	bl	80169a8 <_svfprintf_r+0x1490>
 8015a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a04:	2a00      	cmp	r2, #0
 8015a06:	d101      	bne.n	8015a0c <_svfprintf_r+0x4f4>
 8015a08:	f000 fc20 	bl	801624c <_svfprintf_r+0xd34>
 8015a0c:	2b01      	cmp	r3, #1
 8015a0e:	d001      	beq.n	8015a14 <_svfprintf_r+0x4fc>
 8015a10:	f000 ffce 	bl	80169b0 <_svfprintf_r+0x1498>
 8015a14:	e3b1      	b.n	801617a <_svfprintf_r+0xc62>
 8015a16:	1d23      	adds	r3, r4, #4
 8015a18:	930e      	str	r3, [sp, #56]	; 0x38
 8015a1a:	06f3      	lsls	r3, r6, #27
 8015a1c:	d504      	bpl.n	8015a28 <_svfprintf_r+0x510>
 8015a1e:	6823      	ldr	r3, [r4, #0]
 8015a20:	9306      	str	r3, [sp, #24]
 8015a22:	17db      	asrs	r3, r3, #31
 8015a24:	9307      	str	r3, [sp, #28]
 8015a26:	e7cd      	b.n	80159c4 <_svfprintf_r+0x4ac>
 8015a28:	6823      	ldr	r3, [r4, #0]
 8015a2a:	0672      	lsls	r2, r6, #25
 8015a2c:	d501      	bpl.n	8015a32 <_svfprintf_r+0x51a>
 8015a2e:	b21b      	sxth	r3, r3
 8015a30:	e7f6      	b.n	8015a20 <_svfprintf_r+0x508>
 8015a32:	05b2      	lsls	r2, r6, #22
 8015a34:	d5f4      	bpl.n	8015a20 <_svfprintf_r+0x508>
 8015a36:	b25b      	sxtb	r3, r3
 8015a38:	e7f2      	b.n	8015a20 <_svfprintf_r+0x508>
 8015a3a:	2307      	movs	r3, #7
 8015a3c:	3407      	adds	r4, #7
 8015a3e:	439c      	bics	r4, r3
 8015a40:	0022      	movs	r2, r4
 8015a42:	ca18      	ldmia	r2!, {r3, r4}
 8015a44:	920e      	str	r2, [sp, #56]	; 0x38
 8015a46:	2201      	movs	r2, #1
 8015a48:	9314      	str	r3, [sp, #80]	; 0x50
 8015a4a:	9415      	str	r4, [sp, #84]	; 0x54
 8015a4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a4e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015a50:	005c      	lsls	r4, r3, #1
 8015a52:	0864      	lsrs	r4, r4, #1
 8015a54:	0028      	movs	r0, r5
 8015a56:	0021      	movs	r1, r4
 8015a58:	4b40      	ldr	r3, [pc, #256]	; (8015b5c <_svfprintf_r+0x644>)
 8015a5a:	4252      	negs	r2, r2
 8015a5c:	f7ed f86c 	bl	8002b38 <__aeabi_dcmpun>
 8015a60:	2800      	cmp	r0, #0
 8015a62:	d126      	bne.n	8015ab2 <_svfprintf_r+0x59a>
 8015a64:	2201      	movs	r2, #1
 8015a66:	0028      	movs	r0, r5
 8015a68:	0021      	movs	r1, r4
 8015a6a:	4b3c      	ldr	r3, [pc, #240]	; (8015b5c <_svfprintf_r+0x644>)
 8015a6c:	4252      	negs	r2, r2
 8015a6e:	f7ea fd05 	bl	800047c <__aeabi_dcmple>
 8015a72:	2800      	cmp	r0, #0
 8015a74:	d11d      	bne.n	8015ab2 <_svfprintf_r+0x59a>
 8015a76:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015a78:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	f7ea fcf3 	bl	8000468 <__aeabi_dcmplt>
 8015a82:	2800      	cmp	r0, #0
 8015a84:	d004      	beq.n	8015a90 <_svfprintf_r+0x578>
 8015a86:	231b      	movs	r3, #27
 8015a88:	aa1e      	add	r2, sp, #120	; 0x78
 8015a8a:	189b      	adds	r3, r3, r2
 8015a8c:	222d      	movs	r2, #45	; 0x2d
 8015a8e:	701a      	strb	r2, [r3, #0]
 8015a90:	4b33      	ldr	r3, [pc, #204]	; (8015b60 <_svfprintf_r+0x648>)
 8015a92:	9308      	str	r3, [sp, #32]
 8015a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a96:	2b47      	cmp	r3, #71	; 0x47
 8015a98:	dd01      	ble.n	8015a9e <_svfprintf_r+0x586>
 8015a9a:	4b32      	ldr	r3, [pc, #200]	; (8015b64 <_svfprintf_r+0x64c>)
 8015a9c:	9308      	str	r3, [sp, #32]
 8015a9e:	2380      	movs	r3, #128	; 0x80
 8015aa0:	439e      	bics	r6, r3
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	930c      	str	r3, [sp, #48]	; 0x30
 8015aa6:	3303      	adds	r3, #3
 8015aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8015aaa:	2300      	movs	r3, #0
 8015aac:	9319      	str	r3, [sp, #100]	; 0x64
 8015aae:	f000 ffae 	bl	8016a0e <_svfprintf_r+0x14f6>
 8015ab2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ab4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ab6:	0010      	movs	r0, r2
 8015ab8:	0019      	movs	r1, r3
 8015aba:	f7ed f83d 	bl	8002b38 <__aeabi_dcmpun>
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	d00e      	beq.n	8015ae0 <_svfprintf_r+0x5c8>
 8015ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	da04      	bge.n	8015ad2 <_svfprintf_r+0x5ba>
 8015ac8:	231b      	movs	r3, #27
 8015aca:	aa1e      	add	r2, sp, #120	; 0x78
 8015acc:	189b      	adds	r3, r3, r2
 8015ace:	222d      	movs	r2, #45	; 0x2d
 8015ad0:	701a      	strb	r2, [r3, #0]
 8015ad2:	4b25      	ldr	r3, [pc, #148]	; (8015b68 <_svfprintf_r+0x650>)
 8015ad4:	9308      	str	r3, [sp, #32]
 8015ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ad8:	2b47      	cmp	r3, #71	; 0x47
 8015ada:	dde0      	ble.n	8015a9e <_svfprintf_r+0x586>
 8015adc:	4b23      	ldr	r3, [pc, #140]	; (8015b6c <_svfprintf_r+0x654>)
 8015ade:	e7dd      	b.n	8015a9c <_svfprintf_r+0x584>
 8015ae0:	2320      	movs	r3, #32
 8015ae2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ae4:	439a      	bics	r2, r3
 8015ae6:	9210      	str	r2, [sp, #64]	; 0x40
 8015ae8:	2a41      	cmp	r2, #65	; 0x41
 8015aea:	d123      	bne.n	8015b34 <_svfprintf_r+0x61c>
 8015aec:	2230      	movs	r2, #48	; 0x30
 8015aee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015af0:	ab25      	add	r3, sp, #148	; 0x94
 8015af2:	701a      	strb	r2, [r3, #0]
 8015af4:	3248      	adds	r2, #72	; 0x48
 8015af6:	2961      	cmp	r1, #97	; 0x61
 8015af8:	d000      	beq.n	8015afc <_svfprintf_r+0x5e4>
 8015afa:	3a20      	subs	r2, #32
 8015afc:	705a      	strb	r2, [r3, #1]
 8015afe:	2302      	movs	r3, #2
 8015b00:	431e      	orrs	r6, r3
 8015b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b04:	2b63      	cmp	r3, #99	; 0x63
 8015b06:	dd33      	ble.n	8015b70 <_svfprintf_r+0x658>
 8015b08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b0a:	1c59      	adds	r1, r3, #1
 8015b0c:	f7fe f95e 	bl	8013dcc <_malloc_r>
 8015b10:	9008      	str	r0, [sp, #32]
 8015b12:	2800      	cmp	r0, #0
 8015b14:	d000      	beq.n	8015b18 <_svfprintf_r+0x600>
 8015b16:	e141      	b.n	8015d9c <_svfprintf_r+0x884>
 8015b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b1a:	899a      	ldrh	r2, [r3, #12]
 8015b1c:	2340      	movs	r3, #64	; 0x40
 8015b1e:	4313      	orrs	r3, r2
 8015b20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015b22:	8193      	strh	r3, [r2, #12]
 8015b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b26:	899b      	ldrh	r3, [r3, #12]
 8015b28:	065b      	lsls	r3, r3, #25
 8015b2a:	d400      	bmi.n	8015b2e <_svfprintf_r+0x616>
 8015b2c:	e519      	b.n	8015562 <_svfprintf_r+0x4a>
 8015b2e:	2301      	movs	r3, #1
 8015b30:	425b      	negs	r3, r3
 8015b32:	e515      	b.n	8015560 <_svfprintf_r+0x48>
 8015b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b36:	900c      	str	r0, [sp, #48]	; 0x30
 8015b38:	3301      	adds	r3, #1
 8015b3a:	d100      	bne.n	8015b3e <_svfprintf_r+0x626>
 8015b3c:	e131      	b.n	8015da2 <_svfprintf_r+0x88a>
 8015b3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b40:	2b47      	cmp	r3, #71	; 0x47
 8015b42:	d119      	bne.n	8015b78 <_svfprintf_r+0x660>
 8015b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d116      	bne.n	8015b78 <_svfprintf_r+0x660>
 8015b4a:	930c      	str	r3, [sp, #48]	; 0x30
 8015b4c:	3301      	adds	r3, #1
 8015b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8015b50:	e012      	b.n	8015b78 <_svfprintf_r+0x660>
 8015b52:	46c0      	nop			; (mov r8, r8)
 8015b54:	0801da94 	.word	0x0801da94
 8015b58:	0801daa4 	.word	0x0801daa4
 8015b5c:	7fefffff 	.word	0x7fefffff
 8015b60:	0801da60 	.word	0x0801da60
 8015b64:	0801da64 	.word	0x0801da64
 8015b68:	0801da68 	.word	0x0801da68
 8015b6c:	0801da6c 	.word	0x0801da6c
 8015b70:	2300      	movs	r3, #0
 8015b72:	930c      	str	r3, [sp, #48]	; 0x30
 8015b74:	ab3f      	add	r3, sp, #252	; 0xfc
 8015b76:	9308      	str	r3, [sp, #32]
 8015b78:	2380      	movs	r3, #128	; 0x80
 8015b7a:	005b      	lsls	r3, r3, #1
 8015b7c:	4333      	orrs	r3, r6
 8015b7e:	9320      	str	r3, [sp, #128]	; 0x80
 8015b80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	db00      	blt.n	8015b8a <_svfprintf_r+0x672>
 8015b88:	e10d      	b.n	8015da6 <_svfprintf_r+0x88e>
 8015b8a:	2280      	movs	r2, #128	; 0x80
 8015b8c:	0612      	lsls	r2, r2, #24
 8015b8e:	4694      	mov	ip, r2
 8015b90:	4463      	add	r3, ip
 8015b92:	930d      	str	r3, [sp, #52]	; 0x34
 8015b94:	232d      	movs	r3, #45	; 0x2d
 8015b96:	9322      	str	r3, [sp, #136]	; 0x88
 8015b98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b9a:	2b41      	cmp	r3, #65	; 0x41
 8015b9c:	d000      	beq.n	8015ba0 <_svfprintf_r+0x688>
 8015b9e:	e11b      	b.n	8015dd8 <_svfprintf_r+0x8c0>
 8015ba0:	0020      	movs	r0, r4
 8015ba2:	aa26      	add	r2, sp, #152	; 0x98
 8015ba4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015ba6:	f002 ff19 	bl	80189dc <frexp>
 8015baa:	23ff      	movs	r3, #255	; 0xff
 8015bac:	2200      	movs	r2, #0
 8015bae:	059b      	lsls	r3, r3, #22
 8015bb0:	f7ec f9c4 	bl	8001f3c <__aeabi_dmul>
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	0004      	movs	r4, r0
 8015bba:	000d      	movs	r5, r1
 8015bbc:	f7ea fc4e 	bl	800045c <__aeabi_dcmpeq>
 8015bc0:	2800      	cmp	r0, #0
 8015bc2:	d001      	beq.n	8015bc8 <_svfprintf_r+0x6b0>
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	9326      	str	r3, [sp, #152]	; 0x98
 8015bc8:	4bc6      	ldr	r3, [pc, #792]	; (8015ee4 <_svfprintf_r+0x9cc>)
 8015bca:	9319      	str	r3, [sp, #100]	; 0x64
 8015bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bce:	2b61      	cmp	r3, #97	; 0x61
 8015bd0:	d001      	beq.n	8015bd6 <_svfprintf_r+0x6be>
 8015bd2:	4bc5      	ldr	r3, [pc, #788]	; (8015ee8 <_svfprintf_r+0x9d0>)
 8015bd4:	9319      	str	r3, [sp, #100]	; 0x64
 8015bd6:	9b08      	ldr	r3, [sp, #32]
 8015bd8:	930d      	str	r3, [sp, #52]	; 0x34
 8015bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bdc:	3b01      	subs	r3, #1
 8015bde:	9311      	str	r3, [sp, #68]	; 0x44
 8015be0:	2200      	movs	r2, #0
 8015be2:	4bc2      	ldr	r3, [pc, #776]	; (8015eec <_svfprintf_r+0x9d4>)
 8015be4:	0020      	movs	r0, r4
 8015be6:	0029      	movs	r1, r5
 8015be8:	f7ec f9a8 	bl	8001f3c <__aeabi_dmul>
 8015bec:	000d      	movs	r5, r1
 8015bee:	0004      	movs	r4, r0
 8015bf0:	f7ec ffc0 	bl	8002b74 <__aeabi_d2iz>
 8015bf4:	9021      	str	r0, [sp, #132]	; 0x84
 8015bf6:	f7ec fff3 	bl	8002be0 <__aeabi_i2d>
 8015bfa:	0002      	movs	r2, r0
 8015bfc:	000b      	movs	r3, r1
 8015bfe:	0020      	movs	r0, r4
 8015c00:	0029      	movs	r1, r5
 8015c02:	f7ec fc07 	bl	8002414 <__aeabi_dsub>
 8015c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c08:	000d      	movs	r5, r1
 8015c0a:	001a      	movs	r2, r3
 8015c0c:	3201      	adds	r2, #1
 8015c0e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8015c10:	920d      	str	r2, [sp, #52]	; 0x34
 8015c12:	9223      	str	r2, [sp, #140]	; 0x8c
 8015c14:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015c16:	0004      	movs	r4, r0
 8015c18:	5c52      	ldrb	r2, [r2, r1]
 8015c1a:	701a      	strb	r2, [r3, #0]
 8015c1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8015c20:	3301      	adds	r3, #1
 8015c22:	d00a      	beq.n	8015c3a <_svfprintf_r+0x722>
 8015c24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c26:	2200      	movs	r2, #0
 8015c28:	3b01      	subs	r3, #1
 8015c2a:	9311      	str	r3, [sp, #68]	; 0x44
 8015c2c:	0020      	movs	r0, r4
 8015c2e:	2300      	movs	r3, #0
 8015c30:	0029      	movs	r1, r5
 8015c32:	f7ea fc13 	bl	800045c <__aeabi_dcmpeq>
 8015c36:	2800      	cmp	r0, #0
 8015c38:	d0d2      	beq.n	8015be0 <_svfprintf_r+0x6c8>
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	0020      	movs	r0, r4
 8015c3e:	0029      	movs	r1, r5
 8015c40:	4bab      	ldr	r3, [pc, #684]	; (8015ef0 <_svfprintf_r+0x9d8>)
 8015c42:	f7ea fc25 	bl	8000490 <__aeabi_dcmpgt>
 8015c46:	2800      	cmp	r0, #0
 8015c48:	d10c      	bne.n	8015c64 <_svfprintf_r+0x74c>
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	0020      	movs	r0, r4
 8015c4e:	0029      	movs	r1, r5
 8015c50:	4ba7      	ldr	r3, [pc, #668]	; (8015ef0 <_svfprintf_r+0x9d8>)
 8015c52:	f7ea fc03 	bl	800045c <__aeabi_dcmpeq>
 8015c56:	2800      	cmp	r0, #0
 8015c58:	d100      	bne.n	8015c5c <_svfprintf_r+0x744>
 8015c5a:	e0b7      	b.n	8015dcc <_svfprintf_r+0x8b4>
 8015c5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c5e:	07db      	lsls	r3, r3, #31
 8015c60:	d400      	bmi.n	8015c64 <_svfprintf_r+0x74c>
 8015c62:	e0b3      	b.n	8015dcc <_svfprintf_r+0x8b4>
 8015c64:	2030      	movs	r0, #48	; 0x30
 8015c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c68:	932a      	str	r3, [sp, #168]	; 0xa8
 8015c6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c6c:	7bdb      	ldrb	r3, [r3, #15]
 8015c6e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8015c70:	3a01      	subs	r2, #1
 8015c72:	922a      	str	r2, [sp, #168]	; 0xa8
 8015c74:	7811      	ldrb	r1, [r2, #0]
 8015c76:	4299      	cmp	r1, r3
 8015c78:	d100      	bne.n	8015c7c <_svfprintf_r+0x764>
 8015c7a:	e097      	b.n	8015dac <_svfprintf_r+0x894>
 8015c7c:	1c4b      	adds	r3, r1, #1
 8015c7e:	b2db      	uxtb	r3, r3
 8015c80:	2939      	cmp	r1, #57	; 0x39
 8015c82:	d101      	bne.n	8015c88 <_svfprintf_r+0x770>
 8015c84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c86:	7a9b      	ldrb	r3, [r3, #10]
 8015c88:	7013      	strb	r3, [r2, #0]
 8015c8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015c8c:	9a08      	ldr	r2, [sp, #32]
 8015c8e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015c90:	1a9b      	subs	r3, r3, r2
 8015c92:	930d      	str	r3, [sp, #52]	; 0x34
 8015c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c96:	2b47      	cmp	r3, #71	; 0x47
 8015c98:	d000      	beq.n	8015c9c <_svfprintf_r+0x784>
 8015c9a:	e0eb      	b.n	8015e74 <_svfprintf_r+0x95c>
 8015c9c:	1ceb      	adds	r3, r5, #3
 8015c9e:	db03      	blt.n	8015ca8 <_svfprintf_r+0x790>
 8015ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ca2:	42ab      	cmp	r3, r5
 8015ca4:	db00      	blt.n	8015ca8 <_svfprintf_r+0x790>
 8015ca6:	e113      	b.n	8015ed0 <_svfprintf_r+0x9b8>
 8015ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015caa:	3b02      	subs	r3, #2
 8015cac:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cae:	223c      	movs	r2, #60	; 0x3c
 8015cb0:	466b      	mov	r3, sp
 8015cb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015cb4:	189b      	adds	r3, r3, r2
 8015cb6:	1e6c      	subs	r4, r5, #1
 8015cb8:	3a1c      	subs	r2, #28
 8015cba:	2000      	movs	r0, #0
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	9426      	str	r4, [sp, #152]	; 0x98
 8015cc0:	4391      	bics	r1, r2
 8015cc2:	2941      	cmp	r1, #65	; 0x41
 8015cc4:	d102      	bne.n	8015ccc <_svfprintf_r+0x7b4>
 8015cc6:	330f      	adds	r3, #15
 8015cc8:	b2db      	uxtb	r3, r3
 8015cca:	3001      	adds	r0, #1
 8015ccc:	a928      	add	r1, sp, #160	; 0xa0
 8015cce:	700b      	strb	r3, [r1, #0]
 8015cd0:	232b      	movs	r3, #43	; 0x2b
 8015cd2:	2c00      	cmp	r4, #0
 8015cd4:	da02      	bge.n	8015cdc <_svfprintf_r+0x7c4>
 8015cd6:	2401      	movs	r4, #1
 8015cd8:	3302      	adds	r3, #2
 8015cda:	1b64      	subs	r4, r4, r5
 8015cdc:	704b      	strb	r3, [r1, #1]
 8015cde:	2c09      	cmp	r4, #9
 8015ce0:	dc00      	bgt.n	8015ce4 <_svfprintf_r+0x7cc>
 8015ce2:	e0e1      	b.n	8015ea8 <_svfprintf_r+0x990>
 8015ce4:	2337      	movs	r3, #55	; 0x37
 8015ce6:	250a      	movs	r5, #10
 8015ce8:	aa1e      	add	r2, sp, #120	; 0x78
 8015cea:	189b      	adds	r3, r3, r2
 8015cec:	9310      	str	r3, [sp, #64]	; 0x40
 8015cee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cf0:	0020      	movs	r0, r4
 8015cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8015cf4:	0029      	movs	r1, r5
 8015cf6:	3b01      	subs	r3, #1
 8015cf8:	9310      	str	r3, [sp, #64]	; 0x40
 8015cfa:	f7ea fb99 	bl	8000430 <__aeabi_idivmod>
 8015cfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d00:	3130      	adds	r1, #48	; 0x30
 8015d02:	7019      	strb	r1, [r3, #0]
 8015d04:	0020      	movs	r0, r4
 8015d06:	0029      	movs	r1, r5
 8015d08:	9411      	str	r4, [sp, #68]	; 0x44
 8015d0a:	f7ea faab 	bl	8000264 <__divsi3>
 8015d0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d10:	0004      	movs	r4, r0
 8015d12:	2b63      	cmp	r3, #99	; 0x63
 8015d14:	dceb      	bgt.n	8015cee <_svfprintf_r+0x7d6>
 8015d16:	222a      	movs	r2, #42	; 0x2a
 8015d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d1a:	a81e      	add	r0, sp, #120	; 0x78
 8015d1c:	1e99      	subs	r1, r3, #2
 8015d1e:	1812      	adds	r2, r2, r0
 8015d20:	2037      	movs	r0, #55	; 0x37
 8015d22:	000b      	movs	r3, r1
 8015d24:	3430      	adds	r4, #48	; 0x30
 8015d26:	700c      	strb	r4, [r1, #0]
 8015d28:	ac1e      	add	r4, sp, #120	; 0x78
 8015d2a:	1900      	adds	r0, r0, r4
 8015d2c:	4283      	cmp	r3, r0
 8015d2e:	d200      	bcs.n	8015d32 <_svfprintf_r+0x81a>
 8015d30:	e0b5      	b.n	8015e9e <_svfprintf_r+0x986>
 8015d32:	2300      	movs	r3, #0
 8015d34:	4281      	cmp	r1, r0
 8015d36:	d804      	bhi.n	8015d42 <_svfprintf_r+0x82a>
 8015d38:	aa1e      	add	r2, sp, #120	; 0x78
 8015d3a:	3339      	adds	r3, #57	; 0x39
 8015d3c:	189b      	adds	r3, r3, r2
 8015d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d40:	1a9b      	subs	r3, r3, r2
 8015d42:	222a      	movs	r2, #42	; 0x2a
 8015d44:	a91e      	add	r1, sp, #120	; 0x78
 8015d46:	1852      	adds	r2, r2, r1
 8015d48:	18d3      	adds	r3, r2, r3
 8015d4a:	aa28      	add	r2, sp, #160	; 0xa0
 8015d4c:	1a9b      	subs	r3, r3, r2
 8015d4e:	931e      	str	r3, [sp, #120]	; 0x78
 8015d50:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d54:	4694      	mov	ip, r2
 8015d56:	4463      	add	r3, ip
 8015d58:	9309      	str	r3, [sp, #36]	; 0x24
 8015d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d5c:	2b01      	cmp	r3, #1
 8015d5e:	dc01      	bgt.n	8015d64 <_svfprintf_r+0x84c>
 8015d60:	07f3      	lsls	r3, r6, #31
 8015d62:	d504      	bpl.n	8015d6e <_svfprintf_r+0x856>
 8015d64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d68:	4694      	mov	ip, r2
 8015d6a:	4463      	add	r3, ip
 8015d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8015d6e:	2280      	movs	r2, #128	; 0x80
 8015d70:	4b60      	ldr	r3, [pc, #384]	; (8015ef4 <_svfprintf_r+0x9dc>)
 8015d72:	0052      	lsls	r2, r2, #1
 8015d74:	4033      	ands	r3, r6
 8015d76:	431a      	orrs	r2, r3
 8015d78:	2300      	movs	r3, #0
 8015d7a:	001d      	movs	r5, r3
 8015d7c:	9220      	str	r2, [sp, #128]	; 0x80
 8015d7e:	9310      	str	r3, [sp, #64]	; 0x40
 8015d80:	9311      	str	r3, [sp, #68]	; 0x44
 8015d82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d100      	bne.n	8015d8a <_svfprintf_r+0x872>
 8015d88:	e27b      	b.n	8016282 <_svfprintf_r+0xd6a>
 8015d8a:	231b      	movs	r3, #27
 8015d8c:	aa1e      	add	r2, sp, #120	; 0x78
 8015d8e:	189b      	adds	r3, r3, r2
 8015d90:	222d      	movs	r2, #45	; 0x2d
 8015d92:	701a      	strb	r2, [r3, #0]
 8015d94:	2300      	movs	r3, #0
 8015d96:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015d98:	9319      	str	r3, [sp, #100]	; 0x64
 8015d9a:	e52b      	b.n	80157f4 <_svfprintf_r+0x2dc>
 8015d9c:	9b08      	ldr	r3, [sp, #32]
 8015d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8015da0:	e6ea      	b.n	8015b78 <_svfprintf_r+0x660>
 8015da2:	2306      	movs	r3, #6
 8015da4:	e6d3      	b.n	8015b4e <_svfprintf_r+0x636>
 8015da6:	930d      	str	r3, [sp, #52]	; 0x34
 8015da8:	2300      	movs	r3, #0
 8015daa:	e6f4      	b.n	8015b96 <_svfprintf_r+0x67e>
 8015dac:	7010      	strb	r0, [r2, #0]
 8015dae:	e75e      	b.n	8015c6e <_svfprintf_r+0x756>
 8015db0:	7018      	strb	r0, [r3, #0]
 8015db2:	3301      	adds	r3, #1
 8015db4:	1aca      	subs	r2, r1, r3
 8015db6:	d5fb      	bpl.n	8015db0 <_svfprintf_r+0x898>
 8015db8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015dba:	2300      	movs	r3, #0
 8015dbc:	3201      	adds	r2, #1
 8015dbe:	db01      	blt.n	8015dc4 <_svfprintf_r+0x8ac>
 8015dc0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015dc6:	18d3      	adds	r3, r2, r3
 8015dc8:	9323      	str	r3, [sp, #140]	; 0x8c
 8015dca:	e75e      	b.n	8015c8a <_svfprintf_r+0x772>
 8015dcc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015dce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015dd0:	2030      	movs	r0, #48	; 0x30
 8015dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dd4:	1851      	adds	r1, r2, r1
 8015dd6:	e7ed      	b.n	8015db4 <_svfprintf_r+0x89c>
 8015dd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015dda:	2b46      	cmp	r3, #70	; 0x46
 8015ddc:	d006      	beq.n	8015dec <_svfprintf_r+0x8d4>
 8015dde:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015de0:	2b45      	cmp	r3, #69	; 0x45
 8015de2:	d101      	bne.n	8015de8 <_svfprintf_r+0x8d0>
 8015de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015de6:	1c5d      	adds	r5, r3, #1
 8015de8:	2302      	movs	r3, #2
 8015dea:	e001      	b.n	8015df0 <_svfprintf_r+0x8d8>
 8015dec:	2303      	movs	r3, #3
 8015dee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015df0:	aa2a      	add	r2, sp, #168	; 0xa8
 8015df2:	9204      	str	r2, [sp, #16]
 8015df4:	aa27      	add	r2, sp, #156	; 0x9c
 8015df6:	9203      	str	r2, [sp, #12]
 8015df8:	aa26      	add	r2, sp, #152	; 0x98
 8015dfa:	9202      	str	r2, [sp, #8]
 8015dfc:	9300      	str	r3, [sp, #0]
 8015dfe:	0022      	movs	r2, r4
 8015e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e04:	9501      	str	r5, [sp, #4]
 8015e06:	f000 feb7 	bl	8016b78 <_dtoa_r>
 8015e0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e0c:	9008      	str	r0, [sp, #32]
 8015e0e:	2b47      	cmp	r3, #71	; 0x47
 8015e10:	d103      	bne.n	8015e1a <_svfprintf_r+0x902>
 8015e12:	07f3      	lsls	r3, r6, #31
 8015e14:	d401      	bmi.n	8015e1a <_svfprintf_r+0x902>
 8015e16:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015e18:	e738      	b.n	8015c8c <_svfprintf_r+0x774>
 8015e1a:	9b08      	ldr	r3, [sp, #32]
 8015e1c:	195b      	adds	r3, r3, r5
 8015e1e:	9311      	str	r3, [sp, #68]	; 0x44
 8015e20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e22:	2b46      	cmp	r3, #70	; 0x46
 8015e24:	d113      	bne.n	8015e4e <_svfprintf_r+0x936>
 8015e26:	9b08      	ldr	r3, [sp, #32]
 8015e28:	781b      	ldrb	r3, [r3, #0]
 8015e2a:	2b30      	cmp	r3, #48	; 0x30
 8015e2c:	d10a      	bne.n	8015e44 <_svfprintf_r+0x92c>
 8015e2e:	2200      	movs	r2, #0
 8015e30:	2300      	movs	r3, #0
 8015e32:	0020      	movs	r0, r4
 8015e34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015e36:	f7ea fb11 	bl	800045c <__aeabi_dcmpeq>
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	d102      	bne.n	8015e44 <_svfprintf_r+0x92c>
 8015e3e:	2301      	movs	r3, #1
 8015e40:	1b5d      	subs	r5, r3, r5
 8015e42:	9526      	str	r5, [sp, #152]	; 0x98
 8015e44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e48:	4694      	mov	ip, r2
 8015e4a:	4463      	add	r3, ip
 8015e4c:	9311      	str	r3, [sp, #68]	; 0x44
 8015e4e:	2200      	movs	r2, #0
 8015e50:	2300      	movs	r3, #0
 8015e52:	0020      	movs	r0, r4
 8015e54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015e56:	f7ea fb01 	bl	800045c <__aeabi_dcmpeq>
 8015e5a:	2800      	cmp	r0, #0
 8015e5c:	d001      	beq.n	8015e62 <_svfprintf_r+0x94a>
 8015e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e60:	932a      	str	r3, [sp, #168]	; 0xa8
 8015e62:	2230      	movs	r2, #48	; 0x30
 8015e64:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015e66:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015e68:	4299      	cmp	r1, r3
 8015e6a:	d9d4      	bls.n	8015e16 <_svfprintf_r+0x8fe>
 8015e6c:	1c59      	adds	r1, r3, #1
 8015e6e:	912a      	str	r1, [sp, #168]	; 0xa8
 8015e70:	701a      	strb	r2, [r3, #0]
 8015e72:	e7f7      	b.n	8015e64 <_svfprintf_r+0x94c>
 8015e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e76:	2b46      	cmp	r3, #70	; 0x46
 8015e78:	d000      	beq.n	8015e7c <_svfprintf_r+0x964>
 8015e7a:	e718      	b.n	8015cae <_svfprintf_r+0x796>
 8015e7c:	2201      	movs	r2, #1
 8015e7e:	0033      	movs	r3, r6
 8015e80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e82:	4013      	ands	r3, r2
 8015e84:	430b      	orrs	r3, r1
 8015e86:	2d00      	cmp	r5, #0
 8015e88:	dd1c      	ble.n	8015ec4 <_svfprintf_r+0x9ac>
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d04f      	beq.n	8015f2e <_svfprintf_r+0xa16>
 8015e8e:	000a      	movs	r2, r1
 8015e90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015e92:	18eb      	adds	r3, r5, r3
 8015e94:	18d3      	adds	r3, r2, r3
 8015e96:	9309      	str	r3, [sp, #36]	; 0x24
 8015e98:	2366      	movs	r3, #102	; 0x66
 8015e9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e9c:	e039      	b.n	8015f12 <_svfprintf_r+0x9fa>
 8015e9e:	781c      	ldrb	r4, [r3, #0]
 8015ea0:	3301      	adds	r3, #1
 8015ea2:	7014      	strb	r4, [r2, #0]
 8015ea4:	3201      	adds	r2, #1
 8015ea6:	e741      	b.n	8015d2c <_svfprintf_r+0x814>
 8015ea8:	222a      	movs	r2, #42	; 0x2a
 8015eaa:	ab1e      	add	r3, sp, #120	; 0x78
 8015eac:	18d2      	adds	r2, r2, r3
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	d104      	bne.n	8015ebc <_svfprintf_r+0x9a4>
 8015eb2:	2330      	movs	r3, #48	; 0x30
 8015eb4:	222b      	movs	r2, #43	; 0x2b
 8015eb6:	708b      	strb	r3, [r1, #2]
 8015eb8:	ab1e      	add	r3, sp, #120	; 0x78
 8015eba:	18d2      	adds	r2, r2, r3
 8015ebc:	3430      	adds	r4, #48	; 0x30
 8015ebe:	1c53      	adds	r3, r2, #1
 8015ec0:	7014      	strb	r4, [r2, #0]
 8015ec2:	e742      	b.n	8015d4a <_svfprintf_r+0x832>
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d034      	beq.n	8015f32 <_svfprintf_r+0xa1a>
 8015ec8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ecc:	3301      	adds	r3, #1
 8015ece:	e7e1      	b.n	8015e94 <_svfprintf_r+0x97c>
 8015ed0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ed2:	429d      	cmp	r5, r3
 8015ed4:	db10      	blt.n	8015ef8 <_svfprintf_r+0x9e0>
 8015ed6:	07f3      	lsls	r3, r6, #31
 8015ed8:	d52f      	bpl.n	8015f3a <_svfprintf_r+0xa22>
 8015eda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015edc:	18eb      	adds	r3, r5, r3
 8015ede:	9309      	str	r3, [sp, #36]	; 0x24
 8015ee0:	2367      	movs	r3, #103	; 0x67
 8015ee2:	e7da      	b.n	8015e9a <_svfprintf_r+0x982>
 8015ee4:	0801da70 	.word	0x0801da70
 8015ee8:	0801da81 	.word	0x0801da81
 8015eec:	40300000 	.word	0x40300000
 8015ef0:	3fe00000 	.word	0x3fe00000
 8015ef4:	fffffbff 	.word	0xfffffbff
 8015ef8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015efc:	4694      	mov	ip, r2
 8015efe:	4463      	add	r3, ip
 8015f00:	9309      	str	r3, [sp, #36]	; 0x24
 8015f02:	2367      	movs	r3, #103	; 0x67
 8015f04:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f06:	2d00      	cmp	r5, #0
 8015f08:	dc03      	bgt.n	8015f12 <_svfprintf_r+0x9fa>
 8015f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f0c:	1b58      	subs	r0, r3, r5
 8015f0e:	1c43      	adds	r3, r0, #1
 8015f10:	9309      	str	r3, [sp, #36]	; 0x24
 8015f12:	2380      	movs	r3, #128	; 0x80
 8015f14:	0032      	movs	r2, r6
 8015f16:	00db      	lsls	r3, r3, #3
 8015f18:	401a      	ands	r2, r3
 8015f1a:	9211      	str	r2, [sp, #68]	; 0x44
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	9210      	str	r2, [sp, #64]	; 0x40
 8015f20:	421e      	tst	r6, r3
 8015f22:	d100      	bne.n	8015f26 <_svfprintf_r+0xa0e>
 8015f24:	e72d      	b.n	8015d82 <_svfprintf_r+0x86a>
 8015f26:	4295      	cmp	r5, r2
 8015f28:	dc27      	bgt.n	8015f7a <_svfprintf_r+0xa62>
 8015f2a:	9211      	str	r2, [sp, #68]	; 0x44
 8015f2c:	e729      	b.n	8015d82 <_svfprintf_r+0x86a>
 8015f2e:	9509      	str	r5, [sp, #36]	; 0x24
 8015f30:	e7b2      	b.n	8015e98 <_svfprintf_r+0x980>
 8015f32:	2366      	movs	r3, #102	; 0x66
 8015f34:	9209      	str	r2, [sp, #36]	; 0x24
 8015f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f38:	e7eb      	b.n	8015f12 <_svfprintf_r+0x9fa>
 8015f3a:	9509      	str	r5, [sp, #36]	; 0x24
 8015f3c:	e7d0      	b.n	8015ee0 <_svfprintf_r+0x9c8>
 8015f3e:	42ab      	cmp	r3, r5
 8015f40:	da0e      	bge.n	8015f60 <_svfprintf_r+0xa48>
 8015f42:	1aed      	subs	r5, r5, r3
 8015f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f46:	785b      	ldrb	r3, [r3, #1]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d012      	beq.n	8015f72 <_svfprintf_r+0xa5a>
 8015f4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f4e:	3301      	adds	r3, #1
 8015f50:	9311      	str	r3, [sp, #68]	; 0x44
 8015f52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f54:	3301      	adds	r3, #1
 8015f56:	9312      	str	r3, [sp, #72]	; 0x48
 8015f58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	2bff      	cmp	r3, #255	; 0xff
 8015f5e:	d1ee      	bne.n	8015f3e <_svfprintf_r+0xa26>
 8015f60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f64:	189b      	adds	r3, r3, r2
 8015f66:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015f68:	4353      	muls	r3, r2
 8015f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f6c:	189b      	adds	r3, r3, r2
 8015f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8015f70:	e707      	b.n	8015d82 <_svfprintf_r+0x86a>
 8015f72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f74:	3301      	adds	r3, #1
 8015f76:	9310      	str	r3, [sp, #64]	; 0x40
 8015f78:	e7ee      	b.n	8015f58 <_svfprintf_r+0xa40>
 8015f7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f7c:	9311      	str	r3, [sp, #68]	; 0x44
 8015f7e:	e7eb      	b.n	8015f58 <_svfprintf_r+0xa40>
 8015f80:	0022      	movs	r2, r4
 8015f82:	ca08      	ldmia	r2!, {r3}
 8015f84:	920e      	str	r2, [sp, #56]	; 0x38
 8015f86:	06b2      	lsls	r2, r6, #26
 8015f88:	d508      	bpl.n	8015f9c <_svfprintf_r+0xa84>
 8015f8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015f8c:	601a      	str	r2, [r3, #0]
 8015f8e:	17d2      	asrs	r2, r2, #31
 8015f90:	605a      	str	r2, [r3, #4]
 8015f92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f94:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015f96:	9308      	str	r3, [sp, #32]
 8015f98:	f7ff fafa 	bl	8015590 <_svfprintf_r+0x78>
 8015f9c:	06f2      	lsls	r2, r6, #27
 8015f9e:	d502      	bpl.n	8015fa6 <_svfprintf_r+0xa8e>
 8015fa0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015fa2:	601a      	str	r2, [r3, #0]
 8015fa4:	e7f5      	b.n	8015f92 <_svfprintf_r+0xa7a>
 8015fa6:	0672      	lsls	r2, r6, #25
 8015fa8:	d502      	bpl.n	8015fb0 <_svfprintf_r+0xa98>
 8015faa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015fac:	801a      	strh	r2, [r3, #0]
 8015fae:	e7f0      	b.n	8015f92 <_svfprintf_r+0xa7a>
 8015fb0:	05b2      	lsls	r2, r6, #22
 8015fb2:	d5f5      	bpl.n	8015fa0 <_svfprintf_r+0xa88>
 8015fb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015fb6:	701a      	strb	r2, [r3, #0]
 8015fb8:	e7eb      	b.n	8015f92 <_svfprintf_r+0xa7a>
 8015fba:	2310      	movs	r3, #16
 8015fbc:	431e      	orrs	r6, r3
 8015fbe:	2320      	movs	r3, #32
 8015fc0:	0031      	movs	r1, r6
 8015fc2:	4019      	ands	r1, r3
 8015fc4:	421e      	tst	r6, r3
 8015fc6:	d00f      	beq.n	8015fe8 <_svfprintf_r+0xad0>
 8015fc8:	3b19      	subs	r3, #25
 8015fca:	3407      	adds	r4, #7
 8015fcc:	439c      	bics	r4, r3
 8015fce:	0022      	movs	r2, r4
 8015fd0:	ca18      	ldmia	r2!, {r3, r4}
 8015fd2:	9306      	str	r3, [sp, #24]
 8015fd4:	9407      	str	r4, [sp, #28]
 8015fd6:	920e      	str	r2, [sp, #56]	; 0x38
 8015fd8:	4bca      	ldr	r3, [pc, #808]	; (8016304 <_svfprintf_r+0xdec>)
 8015fda:	401e      	ands	r6, r3
 8015fdc:	2300      	movs	r3, #0
 8015fde:	221b      	movs	r2, #27
 8015fe0:	a91e      	add	r1, sp, #120	; 0x78
 8015fe2:	1852      	adds	r2, r2, r1
 8015fe4:	2100      	movs	r1, #0
 8015fe6:	e4fc      	b.n	80159e2 <_svfprintf_r+0x4ca>
 8015fe8:	1d23      	adds	r3, r4, #4
 8015fea:	0032      	movs	r2, r6
 8015fec:	930e      	str	r3, [sp, #56]	; 0x38
 8015fee:	2310      	movs	r3, #16
 8015ff0:	401a      	ands	r2, r3
 8015ff2:	421e      	tst	r6, r3
 8015ff4:	d003      	beq.n	8015ffe <_svfprintf_r+0xae6>
 8015ff6:	6823      	ldr	r3, [r4, #0]
 8015ff8:	9306      	str	r3, [sp, #24]
 8015ffa:	9107      	str	r1, [sp, #28]
 8015ffc:	e7ec      	b.n	8015fd8 <_svfprintf_r+0xac0>
 8015ffe:	2340      	movs	r3, #64	; 0x40
 8016000:	0031      	movs	r1, r6
 8016002:	4019      	ands	r1, r3
 8016004:	421e      	tst	r6, r3
 8016006:	d004      	beq.n	8016012 <_svfprintf_r+0xafa>
 8016008:	6823      	ldr	r3, [r4, #0]
 801600a:	b29b      	uxth	r3, r3
 801600c:	9306      	str	r3, [sp, #24]
 801600e:	9207      	str	r2, [sp, #28]
 8016010:	e7e2      	b.n	8015fd8 <_svfprintf_r+0xac0>
 8016012:	2380      	movs	r3, #128	; 0x80
 8016014:	0032      	movs	r2, r6
 8016016:	009b      	lsls	r3, r3, #2
 8016018:	401a      	ands	r2, r3
 801601a:	421e      	tst	r6, r3
 801601c:	d002      	beq.n	8016024 <_svfprintf_r+0xb0c>
 801601e:	6823      	ldr	r3, [r4, #0]
 8016020:	b2db      	uxtb	r3, r3
 8016022:	e7e9      	b.n	8015ff8 <_svfprintf_r+0xae0>
 8016024:	6823      	ldr	r3, [r4, #0]
 8016026:	e7f1      	b.n	801600c <_svfprintf_r+0xaf4>
 8016028:	0023      	movs	r3, r4
 801602a:	cb04      	ldmia	r3!, {r2}
 801602c:	49b6      	ldr	r1, [pc, #728]	; (8016308 <_svfprintf_r+0xdf0>)
 801602e:	9206      	str	r2, [sp, #24]
 8016030:	aa25      	add	r2, sp, #148	; 0x94
 8016032:	8011      	strh	r1, [r2, #0]
 8016034:	4ab5      	ldr	r2, [pc, #724]	; (801630c <_svfprintf_r+0xdf4>)
 8016036:	930e      	str	r3, [sp, #56]	; 0x38
 8016038:	2300      	movs	r3, #0
 801603a:	921f      	str	r2, [sp, #124]	; 0x7c
 801603c:	2278      	movs	r2, #120	; 0x78
 801603e:	9307      	str	r3, [sp, #28]
 8016040:	3302      	adds	r3, #2
 8016042:	431e      	orrs	r6, r3
 8016044:	920f      	str	r2, [sp, #60]	; 0x3c
 8016046:	e7ca      	b.n	8015fde <_svfprintf_r+0xac6>
 8016048:	0023      	movs	r3, r4
 801604a:	cb04      	ldmia	r3!, {r2}
 801604c:	2400      	movs	r4, #0
 801604e:	930e      	str	r3, [sp, #56]	; 0x38
 8016050:	231b      	movs	r3, #27
 8016052:	9208      	str	r2, [sp, #32]
 8016054:	aa1e      	add	r2, sp, #120	; 0x78
 8016056:	189b      	adds	r3, r3, r2
 8016058:	701c      	strb	r4, [r3, #0]
 801605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801605c:	3301      	adds	r3, #1
 801605e:	d00e      	beq.n	801607e <_svfprintf_r+0xb66>
 8016060:	0021      	movs	r1, r4
 8016062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016064:	9808      	ldr	r0, [sp, #32]
 8016066:	f002 f821 	bl	80180ac <memchr>
 801606a:	900c      	str	r0, [sp, #48]	; 0x30
 801606c:	42a0      	cmp	r0, r4
 801606e:	d100      	bne.n	8016072 <_svfprintf_r+0xb5a>
 8016070:	e10a      	b.n	8016288 <_svfprintf_r+0xd70>
 8016072:	9a08      	ldr	r2, [sp, #32]
 8016074:	1a83      	subs	r3, r0, r2
 8016076:	9309      	str	r3, [sp, #36]	; 0x24
 8016078:	0023      	movs	r3, r4
 801607a:	940c      	str	r4, [sp, #48]	; 0x30
 801607c:	e516      	b.n	8015aac <_svfprintf_r+0x594>
 801607e:	9808      	ldr	r0, [sp, #32]
 8016080:	f7ea f84a 	bl	8000118 <strlen>
 8016084:	9009      	str	r0, [sp, #36]	; 0x24
 8016086:	e7f7      	b.n	8016078 <_svfprintf_r+0xb60>
 8016088:	2310      	movs	r3, #16
 801608a:	431e      	orrs	r6, r3
 801608c:	2320      	movs	r3, #32
 801608e:	0031      	movs	r1, r6
 8016090:	4019      	ands	r1, r3
 8016092:	421e      	tst	r6, r3
 8016094:	d009      	beq.n	80160aa <_svfprintf_r+0xb92>
 8016096:	3b19      	subs	r3, #25
 8016098:	3407      	adds	r4, #7
 801609a:	439c      	bics	r4, r3
 801609c:	0022      	movs	r2, r4
 801609e:	ca18      	ldmia	r2!, {r3, r4}
 80160a0:	9306      	str	r3, [sp, #24]
 80160a2:	9407      	str	r4, [sp, #28]
 80160a4:	920e      	str	r2, [sp, #56]	; 0x38
 80160a6:	2301      	movs	r3, #1
 80160a8:	e799      	b.n	8015fde <_svfprintf_r+0xac6>
 80160aa:	1d23      	adds	r3, r4, #4
 80160ac:	0032      	movs	r2, r6
 80160ae:	930e      	str	r3, [sp, #56]	; 0x38
 80160b0:	2310      	movs	r3, #16
 80160b2:	401a      	ands	r2, r3
 80160b4:	421e      	tst	r6, r3
 80160b6:	d003      	beq.n	80160c0 <_svfprintf_r+0xba8>
 80160b8:	6823      	ldr	r3, [r4, #0]
 80160ba:	9306      	str	r3, [sp, #24]
 80160bc:	9107      	str	r1, [sp, #28]
 80160be:	e7f2      	b.n	80160a6 <_svfprintf_r+0xb8e>
 80160c0:	2340      	movs	r3, #64	; 0x40
 80160c2:	0031      	movs	r1, r6
 80160c4:	4019      	ands	r1, r3
 80160c6:	421e      	tst	r6, r3
 80160c8:	d004      	beq.n	80160d4 <_svfprintf_r+0xbbc>
 80160ca:	6823      	ldr	r3, [r4, #0]
 80160cc:	b29b      	uxth	r3, r3
 80160ce:	9306      	str	r3, [sp, #24]
 80160d0:	9207      	str	r2, [sp, #28]
 80160d2:	e7e8      	b.n	80160a6 <_svfprintf_r+0xb8e>
 80160d4:	2380      	movs	r3, #128	; 0x80
 80160d6:	0032      	movs	r2, r6
 80160d8:	009b      	lsls	r3, r3, #2
 80160da:	401a      	ands	r2, r3
 80160dc:	421e      	tst	r6, r3
 80160de:	d002      	beq.n	80160e6 <_svfprintf_r+0xbce>
 80160e0:	6823      	ldr	r3, [r4, #0]
 80160e2:	b2db      	uxtb	r3, r3
 80160e4:	e7e9      	b.n	80160ba <_svfprintf_r+0xba2>
 80160e6:	6823      	ldr	r3, [r4, #0]
 80160e8:	e7f1      	b.n	80160ce <_svfprintf_r+0xbb6>
 80160ea:	4b89      	ldr	r3, [pc, #548]	; (8016310 <_svfprintf_r+0xdf8>)
 80160ec:	0031      	movs	r1, r6
 80160ee:	931f      	str	r3, [sp, #124]	; 0x7c
 80160f0:	2320      	movs	r3, #32
 80160f2:	4019      	ands	r1, r3
 80160f4:	421e      	tst	r6, r3
 80160f6:	d01a      	beq.n	801612e <_svfprintf_r+0xc16>
 80160f8:	3b19      	subs	r3, #25
 80160fa:	3407      	adds	r4, #7
 80160fc:	439c      	bics	r4, r3
 80160fe:	0022      	movs	r2, r4
 8016100:	ca18      	ldmia	r2!, {r3, r4}
 8016102:	9306      	str	r3, [sp, #24]
 8016104:	9407      	str	r4, [sp, #28]
 8016106:	920e      	str	r2, [sp, #56]	; 0x38
 8016108:	07f3      	lsls	r3, r6, #31
 801610a:	d50a      	bpl.n	8016122 <_svfprintf_r+0xc0a>
 801610c:	9b06      	ldr	r3, [sp, #24]
 801610e:	9a07      	ldr	r2, [sp, #28]
 8016110:	4313      	orrs	r3, r2
 8016112:	d006      	beq.n	8016122 <_svfprintf_r+0xc0a>
 8016114:	2230      	movs	r2, #48	; 0x30
 8016116:	ab25      	add	r3, sp, #148	; 0x94
 8016118:	701a      	strb	r2, [r3, #0]
 801611a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801611c:	705a      	strb	r2, [r3, #1]
 801611e:	2302      	movs	r3, #2
 8016120:	431e      	orrs	r6, r3
 8016122:	4b78      	ldr	r3, [pc, #480]	; (8016304 <_svfprintf_r+0xdec>)
 8016124:	401e      	ands	r6, r3
 8016126:	2302      	movs	r3, #2
 8016128:	e759      	b.n	8015fde <_svfprintf_r+0xac6>
 801612a:	4b78      	ldr	r3, [pc, #480]	; (801630c <_svfprintf_r+0xdf4>)
 801612c:	e7de      	b.n	80160ec <_svfprintf_r+0xbd4>
 801612e:	1d23      	adds	r3, r4, #4
 8016130:	0032      	movs	r2, r6
 8016132:	930e      	str	r3, [sp, #56]	; 0x38
 8016134:	2310      	movs	r3, #16
 8016136:	401a      	ands	r2, r3
 8016138:	421e      	tst	r6, r3
 801613a:	d003      	beq.n	8016144 <_svfprintf_r+0xc2c>
 801613c:	6823      	ldr	r3, [r4, #0]
 801613e:	9306      	str	r3, [sp, #24]
 8016140:	9107      	str	r1, [sp, #28]
 8016142:	e7e1      	b.n	8016108 <_svfprintf_r+0xbf0>
 8016144:	2340      	movs	r3, #64	; 0x40
 8016146:	0031      	movs	r1, r6
 8016148:	4019      	ands	r1, r3
 801614a:	421e      	tst	r6, r3
 801614c:	d004      	beq.n	8016158 <_svfprintf_r+0xc40>
 801614e:	6823      	ldr	r3, [r4, #0]
 8016150:	b29b      	uxth	r3, r3
 8016152:	9306      	str	r3, [sp, #24]
 8016154:	9207      	str	r2, [sp, #28]
 8016156:	e7d7      	b.n	8016108 <_svfprintf_r+0xbf0>
 8016158:	2380      	movs	r3, #128	; 0x80
 801615a:	0032      	movs	r2, r6
 801615c:	009b      	lsls	r3, r3, #2
 801615e:	401a      	ands	r2, r3
 8016160:	421e      	tst	r6, r3
 8016162:	d002      	beq.n	801616a <_svfprintf_r+0xc52>
 8016164:	6823      	ldr	r3, [r4, #0]
 8016166:	b2db      	uxtb	r3, r3
 8016168:	e7e9      	b.n	801613e <_svfprintf_r+0xc26>
 801616a:	6823      	ldr	r3, [r4, #0]
 801616c:	e7f1      	b.n	8016152 <_svfprintf_r+0xc3a>
 801616e:	9b07      	ldr	r3, [sp, #28]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d10b      	bne.n	801618c <_svfprintf_r+0xc74>
 8016174:	9b06      	ldr	r3, [sp, #24]
 8016176:	2b09      	cmp	r3, #9
 8016178:	d808      	bhi.n	801618c <_svfprintf_r+0xc74>
 801617a:	20e7      	movs	r0, #231	; 0xe7
 801617c:	ab1e      	add	r3, sp, #120	; 0x78
 801617e:	18c0      	adds	r0, r0, r3
 8016180:	9b06      	ldr	r3, [sp, #24]
 8016182:	3330      	adds	r3, #48	; 0x30
 8016184:	7003      	strb	r3, [r0, #0]
 8016186:	9008      	str	r0, [sp, #32]
 8016188:	f000 fc38 	bl	80169fc <_svfprintf_r+0x14e4>
 801618c:	2480      	movs	r4, #128	; 0x80
 801618e:	2300      	movs	r3, #0
 8016190:	00e4      	lsls	r4, r4, #3
 8016192:	930d      	str	r3, [sp, #52]	; 0x34
 8016194:	a858      	add	r0, sp, #352	; 0x160
 8016196:	402c      	ands	r4, r5
 8016198:	1e43      	subs	r3, r0, #1
 801619a:	9308      	str	r3, [sp, #32]
 801619c:	220a      	movs	r2, #10
 801619e:	9806      	ldr	r0, [sp, #24]
 80161a0:	9907      	ldr	r1, [sp, #28]
 80161a2:	2300      	movs	r3, #0
 80161a4:	f7ea f9c2 	bl	800052c <__aeabi_uldivmod>
 80161a8:	9b08      	ldr	r3, [sp, #32]
 80161aa:	3230      	adds	r2, #48	; 0x30
 80161ac:	701a      	strb	r2, [r3, #0]
 80161ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161b0:	3301      	adds	r3, #1
 80161b2:	930d      	str	r3, [sp, #52]	; 0x34
 80161b4:	2c00      	cmp	r4, #0
 80161b6:	d01d      	beq.n	80161f4 <_svfprintf_r+0xcdc>
 80161b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80161ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80161bc:	781b      	ldrb	r3, [r3, #0]
 80161be:	429a      	cmp	r2, r3
 80161c0:	d118      	bne.n	80161f4 <_svfprintf_r+0xcdc>
 80161c2:	2aff      	cmp	r2, #255	; 0xff
 80161c4:	d016      	beq.n	80161f4 <_svfprintf_r+0xcdc>
 80161c6:	9b07      	ldr	r3, [sp, #28]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d102      	bne.n	80161d2 <_svfprintf_r+0xcba>
 80161cc:	9b06      	ldr	r3, [sp, #24]
 80161ce:	2b09      	cmp	r3, #9
 80161d0:	d910      	bls.n	80161f4 <_svfprintf_r+0xcdc>
 80161d2:	9b08      	ldr	r3, [sp, #32]
 80161d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80161d6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80161d8:	1a9b      	subs	r3, r3, r2
 80161da:	0018      	movs	r0, r3
 80161dc:	9308      	str	r3, [sp, #32]
 80161de:	f7fe fa69 	bl	80146b4 <strncpy>
 80161e2:	2200      	movs	r2, #0
 80161e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80161e6:	920d      	str	r2, [sp, #52]	; 0x34
 80161e8:	785b      	ldrb	r3, [r3, #1]
 80161ea:	1e5a      	subs	r2, r3, #1
 80161ec:	4193      	sbcs	r3, r2
 80161ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80161f0:	18d3      	adds	r3, r2, r3
 80161f2:	9312      	str	r3, [sp, #72]	; 0x48
 80161f4:	2300      	movs	r3, #0
 80161f6:	9806      	ldr	r0, [sp, #24]
 80161f8:	9907      	ldr	r1, [sp, #28]
 80161fa:	220a      	movs	r2, #10
 80161fc:	f7ea f996 	bl	800052c <__aeabi_uldivmod>
 8016200:	9b07      	ldr	r3, [sp, #28]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d104      	bne.n	8016210 <_svfprintf_r+0xcf8>
 8016206:	9b06      	ldr	r3, [sp, #24]
 8016208:	2b09      	cmp	r3, #9
 801620a:	d801      	bhi.n	8016210 <_svfprintf_r+0xcf8>
 801620c:	f000 fbf6 	bl	80169fc <_svfprintf_r+0x14e4>
 8016210:	9006      	str	r0, [sp, #24]
 8016212:	9107      	str	r1, [sp, #28]
 8016214:	9808      	ldr	r0, [sp, #32]
 8016216:	e7bf      	b.n	8016198 <_svfprintf_r+0xc80>
 8016218:	200f      	movs	r0, #15
 801621a:	ab58      	add	r3, sp, #352	; 0x160
 801621c:	9308      	str	r3, [sp, #32]
 801621e:	9b08      	ldr	r3, [sp, #32]
 8016220:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016222:	3b01      	subs	r3, #1
 8016224:	9308      	str	r3, [sp, #32]
 8016226:	9b06      	ldr	r3, [sp, #24]
 8016228:	4003      	ands	r3, r0
 801622a:	5cd3      	ldrb	r3, [r2, r3]
 801622c:	9a08      	ldr	r2, [sp, #32]
 801622e:	7013      	strb	r3, [r2, #0]
 8016230:	9b07      	ldr	r3, [sp, #28]
 8016232:	0719      	lsls	r1, r3, #28
 8016234:	9b06      	ldr	r3, [sp, #24]
 8016236:	091a      	lsrs	r2, r3, #4
 8016238:	9b07      	ldr	r3, [sp, #28]
 801623a:	4311      	orrs	r1, r2
 801623c:	091b      	lsrs	r3, r3, #4
 801623e:	9307      	str	r3, [sp, #28]
 8016240:	000b      	movs	r3, r1
 8016242:	9a07      	ldr	r2, [sp, #28]
 8016244:	9106      	str	r1, [sp, #24]
 8016246:	4313      	orrs	r3, r2
 8016248:	d1e9      	bne.n	801621e <_svfprintf_r+0xd06>
 801624a:	e3d7      	b.n	80169fc <_svfprintf_r+0x14e4>
 801624c:	aa58      	add	r2, sp, #352	; 0x160
 801624e:	9208      	str	r2, [sp, #32]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d000      	beq.n	8016256 <_svfprintf_r+0xd3e>
 8016254:	e3d2      	b.n	80169fc <_svfprintf_r+0x14e4>
 8016256:	07f3      	lsls	r3, r6, #31
 8016258:	d400      	bmi.n	801625c <_svfprintf_r+0xd44>
 801625a:	e3cf      	b.n	80169fc <_svfprintf_r+0x14e4>
 801625c:	20e7      	movs	r0, #231	; 0xe7
 801625e:	ab1e      	add	r3, sp, #120	; 0x78
 8016260:	18c0      	adds	r0, r0, r3
 8016262:	2330      	movs	r3, #48	; 0x30
 8016264:	e78e      	b.n	8016184 <_svfprintf_r+0xc6c>
 8016266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016268:	2b00      	cmp	r3, #0
 801626a:	d100      	bne.n	801626e <_svfprintf_r+0xd56>
 801626c:	e38a      	b.n	8016984 <_svfprintf_r+0x146c>
 801626e:	221b      	movs	r2, #27
 8016270:	a83f      	add	r0, sp, #252	; 0xfc
 8016272:	7003      	strb	r3, [r0, #0]
 8016274:	2300      	movs	r3, #0
 8016276:	a91e      	add	r1, sp, #120	; 0x78
 8016278:	1852      	adds	r2, r2, r1
 801627a:	7013      	strb	r3, [r2, #0]
 801627c:	940e      	str	r4, [sp, #56]	; 0x38
 801627e:	f7ff fab0 	bl	80157e2 <_svfprintf_r+0x2ca>
 8016282:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016286:	e587      	b.n	8015d98 <_svfprintf_r+0x880>
 8016288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801628a:	e40f      	b.n	8015aac <_svfprintf_r+0x594>
 801628c:	2010      	movs	r0, #16
 801628e:	1812      	adds	r2, r2, r0
 8016290:	6078      	str	r0, [r7, #4]
 8016292:	922e      	str	r2, [sp, #184]	; 0xb8
 8016294:	932d      	str	r3, [sp, #180]	; 0xb4
 8016296:	2b07      	cmp	r3, #7
 8016298:	dd08      	ble.n	80162ac <_svfprintf_r+0xd94>
 801629a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801629c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801629e:	aa2c      	add	r2, sp, #176	; 0xb0
 80162a0:	f002 fbd4 	bl	8018a4c <__ssprint_r>
 80162a4:	2800      	cmp	r0, #0
 80162a6:	d000      	beq.n	80162aa <_svfprintf_r+0xd92>
 80162a8:	e34b      	b.n	8016942 <_svfprintf_r+0x142a>
 80162aa:	a92f      	add	r1, sp, #188	; 0xbc
 80162ac:	000f      	movs	r7, r1
 80162ae:	3c10      	subs	r4, #16
 80162b0:	f7ff fac3 	bl	801583a <_svfprintf_r+0x322>
 80162b4:	2010      	movs	r0, #16
 80162b6:	1812      	adds	r2, r2, r0
 80162b8:	6078      	str	r0, [r7, #4]
 80162ba:	922e      	str	r2, [sp, #184]	; 0xb8
 80162bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80162be:	2b07      	cmp	r3, #7
 80162c0:	dd08      	ble.n	80162d4 <_svfprintf_r+0xdbc>
 80162c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80162c8:	f002 fbc0 	bl	8018a4c <__ssprint_r>
 80162cc:	2800      	cmp	r0, #0
 80162ce:	d000      	beq.n	80162d2 <_svfprintf_r+0xdba>
 80162d0:	e337      	b.n	8016942 <_svfprintf_r+0x142a>
 80162d2:	a92f      	add	r1, sp, #188	; 0xbc
 80162d4:	000f      	movs	r7, r1
 80162d6:	3c10      	subs	r4, #16
 80162d8:	f7ff fb0f 	bl	80158fa <_svfprintf_r+0x3e2>
 80162dc:	2010      	movs	r0, #16
 80162de:	1812      	adds	r2, r2, r0
 80162e0:	6078      	str	r0, [r7, #4]
 80162e2:	922e      	str	r2, [sp, #184]	; 0xb8
 80162e4:	932d      	str	r3, [sp, #180]	; 0xb4
 80162e6:	2b07      	cmp	r3, #7
 80162e8:	dd08      	ble.n	80162fc <_svfprintf_r+0xde4>
 80162ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162ee:	aa2c      	add	r2, sp, #176	; 0xb0
 80162f0:	f002 fbac 	bl	8018a4c <__ssprint_r>
 80162f4:	2800      	cmp	r0, #0
 80162f6:	d000      	beq.n	80162fa <_svfprintf_r+0xde2>
 80162f8:	e323      	b.n	8016942 <_svfprintf_r+0x142a>
 80162fa:	a92f      	add	r1, sp, #188	; 0xbc
 80162fc:	000f      	movs	r7, r1
 80162fe:	3c10      	subs	r4, #16
 8016300:	f7ff fb1d 	bl	801593e <_svfprintf_r+0x426>
 8016304:	fffffbff 	.word	0xfffffbff
 8016308:	00007830 	.word	0x00007830
 801630c:	0801da70 	.word	0x0801da70
 8016310:	0801da81 	.word	0x0801da81
 8016314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016316:	2b65      	cmp	r3, #101	; 0x65
 8016318:	dc00      	bgt.n	801631c <_svfprintf_r+0xe04>
 801631a:	e258      	b.n	80167ce <_svfprintf_r+0x12b6>
 801631c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801631e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016320:	2200      	movs	r2, #0
 8016322:	2300      	movs	r3, #0
 8016324:	f7ea f89a 	bl	800045c <__aeabi_dcmpeq>
 8016328:	2800      	cmp	r0, #0
 801632a:	d07c      	beq.n	8016426 <_svfprintf_r+0xf0e>
 801632c:	4b80      	ldr	r3, [pc, #512]	; (8016530 <_svfprintf_r+0x1018>)
 801632e:	603b      	str	r3, [r7, #0]
 8016330:	2301      	movs	r3, #1
 8016332:	607b      	str	r3, [r7, #4]
 8016334:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016336:	3708      	adds	r7, #8
 8016338:	3301      	adds	r3, #1
 801633a:	932e      	str	r3, [sp, #184]	; 0xb8
 801633c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801633e:	9308      	str	r3, [sp, #32]
 8016340:	3301      	adds	r3, #1
 8016342:	932d      	str	r3, [sp, #180]	; 0xb4
 8016344:	2b07      	cmp	r3, #7
 8016346:	dd08      	ble.n	801635a <_svfprintf_r+0xe42>
 8016348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801634a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801634c:	aa2c      	add	r2, sp, #176	; 0xb0
 801634e:	f002 fb7d 	bl	8018a4c <__ssprint_r>
 8016352:	2800      	cmp	r0, #0
 8016354:	d000      	beq.n	8016358 <_svfprintf_r+0xe40>
 8016356:	e2f4      	b.n	8016942 <_svfprintf_r+0x142a>
 8016358:	af2f      	add	r7, sp, #188	; 0xbc
 801635a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801635c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801635e:	4293      	cmp	r3, r2
 8016360:	db01      	blt.n	8016366 <_svfprintf_r+0xe4e>
 8016362:	07f3      	lsls	r3, r6, #31
 8016364:	d51d      	bpl.n	80163a2 <_svfprintf_r+0xe8a>
 8016366:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016368:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801636a:	4694      	mov	ip, r2
 801636c:	603b      	str	r3, [r7, #0]
 801636e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016370:	607b      	str	r3, [r7, #4]
 8016372:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016374:	3708      	adds	r7, #8
 8016376:	4463      	add	r3, ip
 8016378:	932e      	str	r3, [sp, #184]	; 0xb8
 801637a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801637c:	9308      	str	r3, [sp, #32]
 801637e:	3301      	adds	r3, #1
 8016380:	932d      	str	r3, [sp, #180]	; 0xb4
 8016382:	2b07      	cmp	r3, #7
 8016384:	dd08      	ble.n	8016398 <_svfprintf_r+0xe80>
 8016386:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016388:	980a      	ldr	r0, [sp, #40]	; 0x28
 801638a:	aa2c      	add	r2, sp, #176	; 0xb0
 801638c:	f002 fb5e 	bl	8018a4c <__ssprint_r>
 8016390:	2800      	cmp	r0, #0
 8016392:	d000      	beq.n	8016396 <_svfprintf_r+0xe7e>
 8016394:	e2d5      	b.n	8016942 <_svfprintf_r+0x142a>
 8016396:	af2f      	add	r7, sp, #188	; 0xbc
 8016398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801639a:	2510      	movs	r5, #16
 801639c:	1e5c      	subs	r4, r3, #1
 801639e:	2c00      	cmp	r4, #0
 80163a0:	dc2f      	bgt.n	8016402 <_svfprintf_r+0xeea>
 80163a2:	0773      	lsls	r3, r6, #29
 80163a4:	d500      	bpl.n	80163a8 <_svfprintf_r+0xe90>
 80163a6:	e2ae      	b.n	8016906 <_svfprintf_r+0x13ee>
 80163a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80163aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80163ac:	4293      	cmp	r3, r2
 80163ae:	da00      	bge.n	80163b2 <_svfprintf_r+0xe9a>
 80163b0:	0013      	movs	r3, r2
 80163b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80163b4:	18d3      	adds	r3, r2, r3
 80163b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80163b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80163ba:	9308      	str	r3, [sp, #32]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d007      	beq.n	80163d0 <_svfprintf_r+0xeb8>
 80163c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80163c6:	f002 fb41 	bl	8018a4c <__ssprint_r>
 80163ca:	2800      	cmp	r0, #0
 80163cc:	d000      	beq.n	80163d0 <_svfprintf_r+0xeb8>
 80163ce:	e2b8      	b.n	8016942 <_svfprintf_r+0x142a>
 80163d0:	2300      	movs	r3, #0
 80163d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80163d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d000      	beq.n	80163dc <_svfprintf_r+0xec4>
 80163da:	e2ce      	b.n	801697a <_svfprintf_r+0x1462>
 80163dc:	af2f      	add	r7, sp, #188	; 0xbc
 80163de:	e5d8      	b.n	8015f92 <_svfprintf_r+0xa7a>
 80163e0:	3210      	adds	r2, #16
 80163e2:	607d      	str	r5, [r7, #4]
 80163e4:	922e      	str	r2, [sp, #184]	; 0xb8
 80163e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80163e8:	2b07      	cmp	r3, #7
 80163ea:	dd08      	ble.n	80163fe <_svfprintf_r+0xee6>
 80163ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80163f2:	f002 fb2b 	bl	8018a4c <__ssprint_r>
 80163f6:	2800      	cmp	r0, #0
 80163f8:	d000      	beq.n	80163fc <_svfprintf_r+0xee4>
 80163fa:	e2a2      	b.n	8016942 <_svfprintf_r+0x142a>
 80163fc:	a92f      	add	r1, sp, #188	; 0xbc
 80163fe:	000f      	movs	r7, r1
 8016400:	3c10      	subs	r4, #16
 8016402:	0039      	movs	r1, r7
 8016404:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016406:	484b      	ldr	r0, [pc, #300]	; (8016534 <_svfprintf_r+0x101c>)
 8016408:	9308      	str	r3, [sp, #32]
 801640a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801640c:	3301      	adds	r3, #1
 801640e:	3108      	adds	r1, #8
 8016410:	6038      	str	r0, [r7, #0]
 8016412:	2c10      	cmp	r4, #16
 8016414:	dce4      	bgt.n	80163e0 <_svfprintf_r+0xec8>
 8016416:	607c      	str	r4, [r7, #4]
 8016418:	18a4      	adds	r4, r4, r2
 801641a:	000f      	movs	r7, r1
 801641c:	942e      	str	r4, [sp, #184]	; 0xb8
 801641e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016420:	2b07      	cmp	r3, #7
 8016422:	ddbe      	ble.n	80163a2 <_svfprintf_r+0xe8a>
 8016424:	e067      	b.n	80164f6 <_svfprintf_r+0xfde>
 8016426:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016428:	2b00      	cmp	r3, #0
 801642a:	dd00      	ble.n	801642e <_svfprintf_r+0xf16>
 801642c:	e084      	b.n	8016538 <_svfprintf_r+0x1020>
 801642e:	4b40      	ldr	r3, [pc, #256]	; (8016530 <_svfprintf_r+0x1018>)
 8016430:	603b      	str	r3, [r7, #0]
 8016432:	2301      	movs	r3, #1
 8016434:	607b      	str	r3, [r7, #4]
 8016436:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016438:	3708      	adds	r7, #8
 801643a:	3301      	adds	r3, #1
 801643c:	932e      	str	r3, [sp, #184]	; 0xb8
 801643e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016440:	9309      	str	r3, [sp, #36]	; 0x24
 8016442:	3301      	adds	r3, #1
 8016444:	932d      	str	r3, [sp, #180]	; 0xb4
 8016446:	2b07      	cmp	r3, #7
 8016448:	dd08      	ble.n	801645c <_svfprintf_r+0xf44>
 801644a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801644c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801644e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016450:	f002 fafc 	bl	8018a4c <__ssprint_r>
 8016454:	2800      	cmp	r0, #0
 8016456:	d000      	beq.n	801645a <_svfprintf_r+0xf42>
 8016458:	e273      	b.n	8016942 <_svfprintf_r+0x142a>
 801645a:	af2f      	add	r7, sp, #188	; 0xbc
 801645c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801645e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016460:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016462:	430b      	orrs	r3, r1
 8016464:	2101      	movs	r1, #1
 8016466:	4031      	ands	r1, r6
 8016468:	430b      	orrs	r3, r1
 801646a:	d09a      	beq.n	80163a2 <_svfprintf_r+0xe8a>
 801646c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801646e:	603b      	str	r3, [r7, #0]
 8016470:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016472:	607b      	str	r3, [r7, #4]
 8016474:	189a      	adds	r2, r3, r2
 8016476:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016478:	922e      	str	r2, [sp, #184]	; 0xb8
 801647a:	9309      	str	r3, [sp, #36]	; 0x24
 801647c:	3301      	adds	r3, #1
 801647e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016480:	3708      	adds	r7, #8
 8016482:	2b07      	cmp	r3, #7
 8016484:	dd08      	ble.n	8016498 <_svfprintf_r+0xf80>
 8016486:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016488:	980a      	ldr	r0, [sp, #40]	; 0x28
 801648a:	aa2c      	add	r2, sp, #176	; 0xb0
 801648c:	f002 fade 	bl	8018a4c <__ssprint_r>
 8016490:	2800      	cmp	r0, #0
 8016492:	d000      	beq.n	8016496 <_svfprintf_r+0xf7e>
 8016494:	e255      	b.n	8016942 <_svfprintf_r+0x142a>
 8016496:	af2f      	add	r7, sp, #188	; 0xbc
 8016498:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801649a:	2c00      	cmp	r4, #0
 801649c:	da1a      	bge.n	80164d4 <_svfprintf_r+0xfbc>
 801649e:	0039      	movs	r1, r7
 80164a0:	2510      	movs	r5, #16
 80164a2:	4264      	negs	r4, r4
 80164a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80164a6:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80164a8:	9309      	str	r3, [sp, #36]	; 0x24
 80164aa:	1c5a      	adds	r2, r3, #1
 80164ac:	4b21      	ldr	r3, [pc, #132]	; (8016534 <_svfprintf_r+0x101c>)
 80164ae:	3708      	adds	r7, #8
 80164b0:	600b      	str	r3, [r1, #0]
 80164b2:	2c10      	cmp	r4, #16
 80164b4:	dc29      	bgt.n	801650a <_svfprintf_r+0xff2>
 80164b6:	604c      	str	r4, [r1, #4]
 80164b8:	1824      	adds	r4, r4, r0
 80164ba:	942e      	str	r4, [sp, #184]	; 0xb8
 80164bc:	922d      	str	r2, [sp, #180]	; 0xb4
 80164be:	2a07      	cmp	r2, #7
 80164c0:	dd08      	ble.n	80164d4 <_svfprintf_r+0xfbc>
 80164c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80164c8:	f002 fac0 	bl	8018a4c <__ssprint_r>
 80164cc:	2800      	cmp	r0, #0
 80164ce:	d000      	beq.n	80164d2 <_svfprintf_r+0xfba>
 80164d0:	e237      	b.n	8016942 <_svfprintf_r+0x142a>
 80164d2:	af2f      	add	r7, sp, #188	; 0xbc
 80164d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80164d6:	9b08      	ldr	r3, [sp, #32]
 80164d8:	468c      	mov	ip, r1
 80164da:	603b      	str	r3, [r7, #0]
 80164dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164de:	607b      	str	r3, [r7, #4]
 80164e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80164e2:	4463      	add	r3, ip
 80164e4:	932e      	str	r3, [sp, #184]	; 0xb8
 80164e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80164e8:	1c5a      	adds	r2, r3, #1
 80164ea:	9308      	str	r3, [sp, #32]
 80164ec:	922d      	str	r2, [sp, #180]	; 0xb4
 80164ee:	2a07      	cmp	r2, #7
 80164f0:	dc01      	bgt.n	80164f6 <_svfprintf_r+0xfde>
 80164f2:	f7ff fa58 	bl	80159a6 <_svfprintf_r+0x48e>
 80164f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80164fc:	f002 faa6 	bl	8018a4c <__ssprint_r>
 8016500:	2800      	cmp	r0, #0
 8016502:	d000      	beq.n	8016506 <_svfprintf_r+0xfee>
 8016504:	e21d      	b.n	8016942 <_svfprintf_r+0x142a>
 8016506:	af2f      	add	r7, sp, #188	; 0xbc
 8016508:	e74b      	b.n	80163a2 <_svfprintf_r+0xe8a>
 801650a:	3010      	adds	r0, #16
 801650c:	604d      	str	r5, [r1, #4]
 801650e:	902e      	str	r0, [sp, #184]	; 0xb8
 8016510:	922d      	str	r2, [sp, #180]	; 0xb4
 8016512:	2a07      	cmp	r2, #7
 8016514:	dd08      	ble.n	8016528 <_svfprintf_r+0x1010>
 8016516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016518:	980a      	ldr	r0, [sp, #40]	; 0x28
 801651a:	aa2c      	add	r2, sp, #176	; 0xb0
 801651c:	f002 fa96 	bl	8018a4c <__ssprint_r>
 8016520:	2800      	cmp	r0, #0
 8016522:	d000      	beq.n	8016526 <_svfprintf_r+0x100e>
 8016524:	e20d      	b.n	8016942 <_svfprintf_r+0x142a>
 8016526:	af2f      	add	r7, sp, #188	; 0xbc
 8016528:	0039      	movs	r1, r7
 801652a:	3c10      	subs	r4, #16
 801652c:	e7ba      	b.n	80164a4 <_svfprintf_r+0xf8c>
 801652e:	46c0      	nop			; (mov r8, r8)
 8016530:	0801da92 	.word	0x0801da92
 8016534:	0801daa4 	.word	0x0801daa4
 8016538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801653a:	002c      	movs	r4, r5
 801653c:	429d      	cmp	r5, r3
 801653e:	dd00      	ble.n	8016542 <_svfprintf_r+0x102a>
 8016540:	001c      	movs	r4, r3
 8016542:	2c00      	cmp	r4, #0
 8016544:	dd15      	ble.n	8016572 <_svfprintf_r+0x105a>
 8016546:	9b08      	ldr	r3, [sp, #32]
 8016548:	607c      	str	r4, [r7, #4]
 801654a:	603b      	str	r3, [r7, #0]
 801654c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801654e:	3708      	adds	r7, #8
 8016550:	18e3      	adds	r3, r4, r3
 8016552:	932e      	str	r3, [sp, #184]	; 0xb8
 8016554:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016556:	9309      	str	r3, [sp, #36]	; 0x24
 8016558:	3301      	adds	r3, #1
 801655a:	932d      	str	r3, [sp, #180]	; 0xb4
 801655c:	2b07      	cmp	r3, #7
 801655e:	dd08      	ble.n	8016572 <_svfprintf_r+0x105a>
 8016560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016562:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016564:	aa2c      	add	r2, sp, #176	; 0xb0
 8016566:	f002 fa71 	bl	8018a4c <__ssprint_r>
 801656a:	2800      	cmp	r0, #0
 801656c:	d000      	beq.n	8016570 <_svfprintf_r+0x1058>
 801656e:	e1e8      	b.n	8016942 <_svfprintf_r+0x142a>
 8016570:	af2f      	add	r7, sp, #188	; 0xbc
 8016572:	43e3      	mvns	r3, r4
 8016574:	17db      	asrs	r3, r3, #31
 8016576:	401c      	ands	r4, r3
 8016578:	1b2c      	subs	r4, r5, r4
 801657a:	2c00      	cmp	r4, #0
 801657c:	dd1a      	ble.n	80165b4 <_svfprintf_r+0x109c>
 801657e:	0039      	movs	r1, r7
 8016580:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016582:	48ca      	ldr	r0, [pc, #808]	; (80168ac <_svfprintf_r+0x1394>)
 8016584:	9309      	str	r3, [sp, #36]	; 0x24
 8016586:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016588:	3301      	adds	r3, #1
 801658a:	3108      	adds	r1, #8
 801658c:	6038      	str	r0, [r7, #0]
 801658e:	2c10      	cmp	r4, #16
 8016590:	dd00      	ble.n	8016594 <_svfprintf_r+0x107c>
 8016592:	e08a      	b.n	80166aa <_svfprintf_r+0x1192>
 8016594:	607c      	str	r4, [r7, #4]
 8016596:	18a4      	adds	r4, r4, r2
 8016598:	000f      	movs	r7, r1
 801659a:	942e      	str	r4, [sp, #184]	; 0xb8
 801659c:	932d      	str	r3, [sp, #180]	; 0xb4
 801659e:	2b07      	cmp	r3, #7
 80165a0:	dd08      	ble.n	80165b4 <_svfprintf_r+0x109c>
 80165a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165a6:	aa2c      	add	r2, sp, #176	; 0xb0
 80165a8:	f002 fa50 	bl	8018a4c <__ssprint_r>
 80165ac:	2800      	cmp	r0, #0
 80165ae:	d000      	beq.n	80165b2 <_svfprintf_r+0x109a>
 80165b0:	e1c7      	b.n	8016942 <_svfprintf_r+0x142a>
 80165b2:	af2f      	add	r7, sp, #188	; 0xbc
 80165b4:	9b08      	ldr	r3, [sp, #32]
 80165b6:	195d      	adds	r5, r3, r5
 80165b8:	0573      	lsls	r3, r6, #21
 80165ba:	d50d      	bpl.n	80165d8 <_svfprintf_r+0x10c0>
 80165bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d000      	beq.n	80165c4 <_svfprintf_r+0x10ac>
 80165c2:	e085      	b.n	80166d0 <_svfprintf_r+0x11b8>
 80165c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d000      	beq.n	80165cc <_svfprintf_r+0x10b4>
 80165ca:	e084      	b.n	80166d6 <_svfprintf_r+0x11be>
 80165cc:	9b08      	ldr	r3, [sp, #32]
 80165ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80165d0:	189b      	adds	r3, r3, r2
 80165d2:	429d      	cmp	r5, r3
 80165d4:	d900      	bls.n	80165d8 <_svfprintf_r+0x10c0>
 80165d6:	001d      	movs	r5, r3
 80165d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80165da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80165dc:	4293      	cmp	r3, r2
 80165de:	db01      	blt.n	80165e4 <_svfprintf_r+0x10cc>
 80165e0:	07f3      	lsls	r3, r6, #31
 80165e2:	d518      	bpl.n	8016616 <_svfprintf_r+0x10fe>
 80165e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80165e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80165e8:	4694      	mov	ip, r2
 80165ea:	603b      	str	r3, [r7, #0]
 80165ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80165ee:	607b      	str	r3, [r7, #4]
 80165f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80165f2:	3708      	adds	r7, #8
 80165f4:	4463      	add	r3, ip
 80165f6:	932e      	str	r3, [sp, #184]	; 0xb8
 80165f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165fa:	9309      	str	r3, [sp, #36]	; 0x24
 80165fc:	3301      	adds	r3, #1
 80165fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8016600:	2b07      	cmp	r3, #7
 8016602:	dd08      	ble.n	8016616 <_svfprintf_r+0x10fe>
 8016604:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016606:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016608:	aa2c      	add	r2, sp, #176	; 0xb0
 801660a:	f002 fa1f 	bl	8018a4c <__ssprint_r>
 801660e:	2800      	cmp	r0, #0
 8016610:	d000      	beq.n	8016614 <_svfprintf_r+0x10fc>
 8016612:	e196      	b.n	8016942 <_svfprintf_r+0x142a>
 8016614:	af2f      	add	r7, sp, #188	; 0xbc
 8016616:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016618:	9b08      	ldr	r3, [sp, #32]
 801661a:	4694      	mov	ip, r2
 801661c:	4463      	add	r3, ip
 801661e:	1b58      	subs	r0, r3, r5
 8016620:	0013      	movs	r3, r2
 8016622:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016624:	1a9c      	subs	r4, r3, r2
 8016626:	4284      	cmp	r4, r0
 8016628:	dd00      	ble.n	801662c <_svfprintf_r+0x1114>
 801662a:	0004      	movs	r4, r0
 801662c:	2c00      	cmp	r4, #0
 801662e:	dd14      	ble.n	801665a <_svfprintf_r+0x1142>
 8016630:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016632:	603d      	str	r5, [r7, #0]
 8016634:	18e3      	adds	r3, r4, r3
 8016636:	932e      	str	r3, [sp, #184]	; 0xb8
 8016638:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801663a:	607c      	str	r4, [r7, #4]
 801663c:	9308      	str	r3, [sp, #32]
 801663e:	3301      	adds	r3, #1
 8016640:	932d      	str	r3, [sp, #180]	; 0xb4
 8016642:	3708      	adds	r7, #8
 8016644:	2b07      	cmp	r3, #7
 8016646:	dd08      	ble.n	801665a <_svfprintf_r+0x1142>
 8016648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801664a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801664c:	aa2c      	add	r2, sp, #176	; 0xb0
 801664e:	f002 f9fd 	bl	8018a4c <__ssprint_r>
 8016652:	2800      	cmp	r0, #0
 8016654:	d000      	beq.n	8016658 <_svfprintf_r+0x1140>
 8016656:	e174      	b.n	8016942 <_svfprintf_r+0x142a>
 8016658:	af2f      	add	r7, sp, #188	; 0xbc
 801665a:	43e3      	mvns	r3, r4
 801665c:	17db      	asrs	r3, r3, #31
 801665e:	401c      	ands	r4, r3
 8016660:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016664:	2510      	movs	r5, #16
 8016666:	1a9b      	subs	r3, r3, r2
 8016668:	1b1c      	subs	r4, r3, r4
 801666a:	2c00      	cmp	r4, #0
 801666c:	dc00      	bgt.n	8016670 <_svfprintf_r+0x1158>
 801666e:	e698      	b.n	80163a2 <_svfprintf_r+0xe8a>
 8016670:	0039      	movs	r1, r7
 8016672:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016674:	488d      	ldr	r0, [pc, #564]	; (80168ac <_svfprintf_r+0x1394>)
 8016676:	9308      	str	r3, [sp, #32]
 8016678:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801667a:	3301      	adds	r3, #1
 801667c:	3108      	adds	r1, #8
 801667e:	6038      	str	r0, [r7, #0]
 8016680:	2c10      	cmp	r4, #16
 8016682:	dc00      	bgt.n	8016686 <_svfprintf_r+0x116e>
 8016684:	e6c7      	b.n	8016416 <_svfprintf_r+0xefe>
 8016686:	3210      	adds	r2, #16
 8016688:	607d      	str	r5, [r7, #4]
 801668a:	922e      	str	r2, [sp, #184]	; 0xb8
 801668c:	932d      	str	r3, [sp, #180]	; 0xb4
 801668e:	2b07      	cmp	r3, #7
 8016690:	dd08      	ble.n	80166a4 <_svfprintf_r+0x118c>
 8016692:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016694:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016696:	aa2c      	add	r2, sp, #176	; 0xb0
 8016698:	f002 f9d8 	bl	8018a4c <__ssprint_r>
 801669c:	2800      	cmp	r0, #0
 801669e:	d000      	beq.n	80166a2 <_svfprintf_r+0x118a>
 80166a0:	e14f      	b.n	8016942 <_svfprintf_r+0x142a>
 80166a2:	a92f      	add	r1, sp, #188	; 0xbc
 80166a4:	000f      	movs	r7, r1
 80166a6:	3c10      	subs	r4, #16
 80166a8:	e7e2      	b.n	8016670 <_svfprintf_r+0x1158>
 80166aa:	2010      	movs	r0, #16
 80166ac:	1812      	adds	r2, r2, r0
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	922e      	str	r2, [sp, #184]	; 0xb8
 80166b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80166b4:	2b07      	cmp	r3, #7
 80166b6:	dd08      	ble.n	80166ca <_svfprintf_r+0x11b2>
 80166b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166bc:	aa2c      	add	r2, sp, #176	; 0xb0
 80166be:	f002 f9c5 	bl	8018a4c <__ssprint_r>
 80166c2:	2800      	cmp	r0, #0
 80166c4:	d000      	beq.n	80166c8 <_svfprintf_r+0x11b0>
 80166c6:	e13c      	b.n	8016942 <_svfprintf_r+0x142a>
 80166c8:	a92f      	add	r1, sp, #188	; 0xbc
 80166ca:	000f      	movs	r7, r1
 80166cc:	3c10      	subs	r4, #16
 80166ce:	e756      	b.n	801657e <_svfprintf_r+0x1066>
 80166d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d061      	beq.n	801679a <_svfprintf_r+0x1282>
 80166d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166d8:	3b01      	subs	r3, #1
 80166da:	9310      	str	r3, [sp, #64]	; 0x40
 80166dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80166de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80166e0:	4694      	mov	ip, r2
 80166e2:	603b      	str	r3, [r7, #0]
 80166e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166e6:	607b      	str	r3, [r7, #4]
 80166e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80166ea:	3708      	adds	r7, #8
 80166ec:	4463      	add	r3, ip
 80166ee:	932e      	str	r3, [sp, #184]	; 0xb8
 80166f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166f2:	9309      	str	r3, [sp, #36]	; 0x24
 80166f4:	3301      	adds	r3, #1
 80166f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80166f8:	2b07      	cmp	r3, #7
 80166fa:	dd08      	ble.n	801670e <_svfprintf_r+0x11f6>
 80166fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016700:	aa2c      	add	r2, sp, #176	; 0xb0
 8016702:	f002 f9a3 	bl	8018a4c <__ssprint_r>
 8016706:	2800      	cmp	r0, #0
 8016708:	d000      	beq.n	801670c <_svfprintf_r+0x11f4>
 801670a:	e11a      	b.n	8016942 <_svfprintf_r+0x142a>
 801670c:	af2f      	add	r7, sp, #188	; 0xbc
 801670e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016710:	9b08      	ldr	r3, [sp, #32]
 8016712:	189b      	adds	r3, r3, r2
 8016714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016716:	1b5b      	subs	r3, r3, r5
 8016718:	7814      	ldrb	r4, [r2, #0]
 801671a:	429c      	cmp	r4, r3
 801671c:	dd00      	ble.n	8016720 <_svfprintf_r+0x1208>
 801671e:	001c      	movs	r4, r3
 8016720:	2c00      	cmp	r4, #0
 8016722:	dd14      	ble.n	801674e <_svfprintf_r+0x1236>
 8016724:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016726:	603d      	str	r5, [r7, #0]
 8016728:	18e3      	adds	r3, r4, r3
 801672a:	932e      	str	r3, [sp, #184]	; 0xb8
 801672c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801672e:	607c      	str	r4, [r7, #4]
 8016730:	9309      	str	r3, [sp, #36]	; 0x24
 8016732:	3301      	adds	r3, #1
 8016734:	932d      	str	r3, [sp, #180]	; 0xb4
 8016736:	3708      	adds	r7, #8
 8016738:	2b07      	cmp	r3, #7
 801673a:	dd08      	ble.n	801674e <_svfprintf_r+0x1236>
 801673c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801673e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016740:	aa2c      	add	r2, sp, #176	; 0xb0
 8016742:	f002 f983 	bl	8018a4c <__ssprint_r>
 8016746:	2800      	cmp	r0, #0
 8016748:	d000      	beq.n	801674c <_svfprintf_r+0x1234>
 801674a:	e0fa      	b.n	8016942 <_svfprintf_r+0x142a>
 801674c:	af2f      	add	r7, sp, #188	; 0xbc
 801674e:	43e3      	mvns	r3, r4
 8016750:	17db      	asrs	r3, r3, #31
 8016752:	401c      	ands	r4, r3
 8016754:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	1b1c      	subs	r4, r3, r4
 801675a:	2c00      	cmp	r4, #0
 801675c:	dd19      	ble.n	8016792 <_svfprintf_r+0x127a>
 801675e:	0039      	movs	r1, r7
 8016760:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016762:	4852      	ldr	r0, [pc, #328]	; (80168ac <_svfprintf_r+0x1394>)
 8016764:	9309      	str	r3, [sp, #36]	; 0x24
 8016766:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016768:	3301      	adds	r3, #1
 801676a:	3108      	adds	r1, #8
 801676c:	6038      	str	r0, [r7, #0]
 801676e:	2c10      	cmp	r4, #16
 8016770:	dc1a      	bgt.n	80167a8 <_svfprintf_r+0x1290>
 8016772:	607c      	str	r4, [r7, #4]
 8016774:	18a4      	adds	r4, r4, r2
 8016776:	000f      	movs	r7, r1
 8016778:	942e      	str	r4, [sp, #184]	; 0xb8
 801677a:	932d      	str	r3, [sp, #180]	; 0xb4
 801677c:	2b07      	cmp	r3, #7
 801677e:	dd08      	ble.n	8016792 <_svfprintf_r+0x127a>
 8016780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016782:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016784:	aa2c      	add	r2, sp, #176	; 0xb0
 8016786:	f002 f961 	bl	8018a4c <__ssprint_r>
 801678a:	2800      	cmp	r0, #0
 801678c:	d000      	beq.n	8016790 <_svfprintf_r+0x1278>
 801678e:	e0d8      	b.n	8016942 <_svfprintf_r+0x142a>
 8016790:	af2f      	add	r7, sp, #188	; 0xbc
 8016792:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016794:	781b      	ldrb	r3, [r3, #0]
 8016796:	18ed      	adds	r5, r5, r3
 8016798:	e710      	b.n	80165bc <_svfprintf_r+0x10a4>
 801679a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801679c:	3b01      	subs	r3, #1
 801679e:	9312      	str	r3, [sp, #72]	; 0x48
 80167a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167a2:	3b01      	subs	r3, #1
 80167a4:	9311      	str	r3, [sp, #68]	; 0x44
 80167a6:	e799      	b.n	80166dc <_svfprintf_r+0x11c4>
 80167a8:	2010      	movs	r0, #16
 80167aa:	1812      	adds	r2, r2, r0
 80167ac:	6078      	str	r0, [r7, #4]
 80167ae:	922e      	str	r2, [sp, #184]	; 0xb8
 80167b0:	932d      	str	r3, [sp, #180]	; 0xb4
 80167b2:	2b07      	cmp	r3, #7
 80167b4:	dd08      	ble.n	80167c8 <_svfprintf_r+0x12b0>
 80167b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80167bc:	f002 f946 	bl	8018a4c <__ssprint_r>
 80167c0:	2800      	cmp	r0, #0
 80167c2:	d000      	beq.n	80167c6 <_svfprintf_r+0x12ae>
 80167c4:	e0bd      	b.n	8016942 <_svfprintf_r+0x142a>
 80167c6:	a92f      	add	r1, sp, #188	; 0xbc
 80167c8:	000f      	movs	r7, r1
 80167ca:	3c10      	subs	r4, #16
 80167cc:	e7c7      	b.n	801675e <_svfprintf_r+0x1246>
 80167ce:	003c      	movs	r4, r7
 80167d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80167d2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80167d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80167d6:	9309      	str	r3, [sp, #36]	; 0x24
 80167d8:	3101      	adds	r1, #1
 80167da:	3301      	adds	r3, #1
 80167dc:	3408      	adds	r4, #8
 80167de:	2a01      	cmp	r2, #1
 80167e0:	dc03      	bgt.n	80167ea <_svfprintf_r+0x12d2>
 80167e2:	2201      	movs	r2, #1
 80167e4:	4216      	tst	r6, r2
 80167e6:	d100      	bne.n	80167ea <_svfprintf_r+0x12d2>
 80167e8:	e088      	b.n	80168fc <_svfprintf_r+0x13e4>
 80167ea:	9a08      	ldr	r2, [sp, #32]
 80167ec:	912e      	str	r1, [sp, #184]	; 0xb8
 80167ee:	603a      	str	r2, [r7, #0]
 80167f0:	2201      	movs	r2, #1
 80167f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80167f4:	607a      	str	r2, [r7, #4]
 80167f6:	2b07      	cmp	r3, #7
 80167f8:	dd08      	ble.n	801680c <_svfprintf_r+0x12f4>
 80167fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8016800:	f002 f924 	bl	8018a4c <__ssprint_r>
 8016804:	2800      	cmp	r0, #0
 8016806:	d000      	beq.n	801680a <_svfprintf_r+0x12f2>
 8016808:	e09b      	b.n	8016942 <_svfprintf_r+0x142a>
 801680a:	ac2f      	add	r4, sp, #188	; 0xbc
 801680c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801680e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016810:	4694      	mov	ip, r2
 8016812:	6023      	str	r3, [r4, #0]
 8016814:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016816:	6063      	str	r3, [r4, #4]
 8016818:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801681a:	3408      	adds	r4, #8
 801681c:	4463      	add	r3, ip
 801681e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016820:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016822:	9309      	str	r3, [sp, #36]	; 0x24
 8016824:	3301      	adds	r3, #1
 8016826:	932d      	str	r3, [sp, #180]	; 0xb4
 8016828:	2b07      	cmp	r3, #7
 801682a:	dd08      	ble.n	801683e <_svfprintf_r+0x1326>
 801682c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801682e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016830:	aa2c      	add	r2, sp, #176	; 0xb0
 8016832:	f002 f90b 	bl	8018a4c <__ssprint_r>
 8016836:	2800      	cmp	r0, #0
 8016838:	d000      	beq.n	801683c <_svfprintf_r+0x1324>
 801683a:	e082      	b.n	8016942 <_svfprintf_r+0x142a>
 801683c:	ac2f      	add	r4, sp, #188	; 0xbc
 801683e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016840:	2200      	movs	r2, #0
 8016842:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016844:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016846:	1e5d      	subs	r5, r3, #1
 8016848:	2300      	movs	r3, #0
 801684a:	f7e9 fe07 	bl	800045c <__aeabi_dcmpeq>
 801684e:	2800      	cmp	r0, #0
 8016850:	d12e      	bne.n	80168b0 <_svfprintf_r+0x1398>
 8016852:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016854:	9808      	ldr	r0, [sp, #32]
 8016856:	9309      	str	r3, [sp, #36]	; 0x24
 8016858:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801685a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801685c:	1c59      	adds	r1, r3, #1
 801685e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016862:	3001      	adds	r0, #1
 8016864:	3b01      	subs	r3, #1
 8016866:	189b      	adds	r3, r3, r2
 8016868:	6020      	str	r0, [r4, #0]
 801686a:	6065      	str	r5, [r4, #4]
 801686c:	932e      	str	r3, [sp, #184]	; 0xb8
 801686e:	912d      	str	r1, [sp, #180]	; 0xb4
 8016870:	3408      	adds	r4, #8
 8016872:	2907      	cmp	r1, #7
 8016874:	dd07      	ble.n	8016886 <_svfprintf_r+0x136e>
 8016876:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016878:	980a      	ldr	r0, [sp, #40]	; 0x28
 801687a:	aa2c      	add	r2, sp, #176	; 0xb0
 801687c:	f002 f8e6 	bl	8018a4c <__ssprint_r>
 8016880:	2800      	cmp	r0, #0
 8016882:	d15e      	bne.n	8016942 <_svfprintf_r+0x142a>
 8016884:	ac2f      	add	r4, sp, #188	; 0xbc
 8016886:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016888:	ab28      	add	r3, sp, #160	; 0xa0
 801688a:	4694      	mov	ip, r2
 801688c:	6023      	str	r3, [r4, #0]
 801688e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016890:	6063      	str	r3, [r4, #4]
 8016892:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016894:	4463      	add	r3, ip
 8016896:	932e      	str	r3, [sp, #184]	; 0xb8
 8016898:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801689a:	9308      	str	r3, [sp, #32]
 801689c:	3301      	adds	r3, #1
 801689e:	932d      	str	r3, [sp, #180]	; 0xb4
 80168a0:	2b07      	cmp	r3, #7
 80168a2:	dd00      	ble.n	80168a6 <_svfprintf_r+0x138e>
 80168a4:	e627      	b.n	80164f6 <_svfprintf_r+0xfde>
 80168a6:	3408      	adds	r4, #8
 80168a8:	0027      	movs	r7, r4
 80168aa:	e57a      	b.n	80163a2 <_svfprintf_r+0xe8a>
 80168ac:	0801daa4 	.word	0x0801daa4
 80168b0:	2710      	movs	r7, #16
 80168b2:	2d00      	cmp	r5, #0
 80168b4:	dde7      	ble.n	8016886 <_svfprintf_r+0x136e>
 80168b6:	0021      	movs	r1, r4
 80168b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80168ba:	4857      	ldr	r0, [pc, #348]	; (8016a18 <_svfprintf_r+0x1500>)
 80168bc:	9308      	str	r3, [sp, #32]
 80168be:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80168c0:	3301      	adds	r3, #1
 80168c2:	3108      	adds	r1, #8
 80168c4:	6020      	str	r0, [r4, #0]
 80168c6:	2d10      	cmp	r5, #16
 80168c8:	dc07      	bgt.n	80168da <_svfprintf_r+0x13c2>
 80168ca:	6065      	str	r5, [r4, #4]
 80168cc:	000c      	movs	r4, r1
 80168ce:	18ad      	adds	r5, r5, r2
 80168d0:	952e      	str	r5, [sp, #184]	; 0xb8
 80168d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80168d4:	2b07      	cmp	r3, #7
 80168d6:	ddd6      	ble.n	8016886 <_svfprintf_r+0x136e>
 80168d8:	e7cd      	b.n	8016876 <_svfprintf_r+0x135e>
 80168da:	3210      	adds	r2, #16
 80168dc:	6067      	str	r7, [r4, #4]
 80168de:	922e      	str	r2, [sp, #184]	; 0xb8
 80168e0:	932d      	str	r3, [sp, #180]	; 0xb4
 80168e2:	2b07      	cmp	r3, #7
 80168e4:	dd07      	ble.n	80168f6 <_svfprintf_r+0x13de>
 80168e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168ea:	aa2c      	add	r2, sp, #176	; 0xb0
 80168ec:	f002 f8ae 	bl	8018a4c <__ssprint_r>
 80168f0:	2800      	cmp	r0, #0
 80168f2:	d126      	bne.n	8016942 <_svfprintf_r+0x142a>
 80168f4:	a92f      	add	r1, sp, #188	; 0xbc
 80168f6:	000c      	movs	r4, r1
 80168f8:	3d10      	subs	r5, #16
 80168fa:	e7dc      	b.n	80168b6 <_svfprintf_r+0x139e>
 80168fc:	9808      	ldr	r0, [sp, #32]
 80168fe:	912e      	str	r1, [sp, #184]	; 0xb8
 8016900:	c705      	stmia	r7!, {r0, r2}
 8016902:	932d      	str	r3, [sp, #180]	; 0xb4
 8016904:	e7e6      	b.n	80168d4 <_svfprintf_r+0x13bc>
 8016906:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016908:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801690a:	2510      	movs	r5, #16
 801690c:	1a9c      	subs	r4, r3, r2
 801690e:	2c00      	cmp	r4, #0
 8016910:	dc00      	bgt.n	8016914 <_svfprintf_r+0x13fc>
 8016912:	e549      	b.n	80163a8 <_svfprintf_r+0xe90>
 8016914:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016916:	4941      	ldr	r1, [pc, #260]	; (8016a1c <_svfprintf_r+0x1504>)
 8016918:	9308      	str	r3, [sp, #32]
 801691a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801691c:	3301      	adds	r3, #1
 801691e:	6039      	str	r1, [r7, #0]
 8016920:	2c10      	cmp	r4, #16
 8016922:	dc19      	bgt.n	8016958 <_svfprintf_r+0x1440>
 8016924:	607c      	str	r4, [r7, #4]
 8016926:	1914      	adds	r4, r2, r4
 8016928:	942e      	str	r4, [sp, #184]	; 0xb8
 801692a:	932d      	str	r3, [sp, #180]	; 0xb4
 801692c:	2b07      	cmp	r3, #7
 801692e:	dc00      	bgt.n	8016932 <_svfprintf_r+0x141a>
 8016930:	e53a      	b.n	80163a8 <_svfprintf_r+0xe90>
 8016932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016934:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016936:	aa2c      	add	r2, sp, #176	; 0xb0
 8016938:	f002 f888 	bl	8018a4c <__ssprint_r>
 801693c:	2800      	cmp	r0, #0
 801693e:	d100      	bne.n	8016942 <_svfprintf_r+0x142a>
 8016940:	e532      	b.n	80163a8 <_svfprintf_r+0xe90>
 8016942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016944:	2b00      	cmp	r3, #0
 8016946:	d101      	bne.n	801694c <_svfprintf_r+0x1434>
 8016948:	f7ff f8ec 	bl	8015b24 <_svfprintf_r+0x60c>
 801694c:	0019      	movs	r1, r3
 801694e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016950:	f000 ff66 	bl	8017820 <_free_r>
 8016954:	f7ff f8e6 	bl	8015b24 <_svfprintf_r+0x60c>
 8016958:	3210      	adds	r2, #16
 801695a:	607d      	str	r5, [r7, #4]
 801695c:	922e      	str	r2, [sp, #184]	; 0xb8
 801695e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016960:	3708      	adds	r7, #8
 8016962:	2b07      	cmp	r3, #7
 8016964:	dd07      	ble.n	8016976 <_svfprintf_r+0x145e>
 8016966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016968:	980a      	ldr	r0, [sp, #40]	; 0x28
 801696a:	aa2c      	add	r2, sp, #176	; 0xb0
 801696c:	f002 f86e 	bl	8018a4c <__ssprint_r>
 8016970:	2800      	cmp	r0, #0
 8016972:	d1e6      	bne.n	8016942 <_svfprintf_r+0x142a>
 8016974:	af2f      	add	r7, sp, #188	; 0xbc
 8016976:	3c10      	subs	r4, #16
 8016978:	e7cc      	b.n	8016914 <_svfprintf_r+0x13fc>
 801697a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801697c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801697e:	f000 ff4f 	bl	8017820 <_free_r>
 8016982:	e52b      	b.n	80163dc <_svfprintf_r+0xec4>
 8016984:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016986:	9306      	str	r3, [sp, #24]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d101      	bne.n	8016990 <_svfprintf_r+0x1478>
 801698c:	f7ff f8ca 	bl	8015b24 <_svfprintf_r+0x60c>
 8016990:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016992:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016994:	aa2c      	add	r2, sp, #176	; 0xb0
 8016996:	f002 f859 	bl	8018a4c <__ssprint_r>
 801699a:	f7ff f8c3 	bl	8015b24 <_svfprintf_r+0x60c>
 801699e:	0035      	movs	r5, r6
 80169a0:	2a00      	cmp	r2, #0
 80169a2:	d101      	bne.n	80169a8 <_svfprintf_r+0x1490>
 80169a4:	f7ff f832 	bl	8015a0c <_svfprintf_r+0x4f4>
 80169a8:	2b01      	cmp	r3, #1
 80169aa:	d101      	bne.n	80169b0 <_svfprintf_r+0x1498>
 80169ac:	f7ff fbdf 	bl	801616e <_svfprintf_r+0xc56>
 80169b0:	2b02      	cmp	r3, #2
 80169b2:	d100      	bne.n	80169b6 <_svfprintf_r+0x149e>
 80169b4:	e430      	b.n	8016218 <_svfprintf_r+0xd00>
 80169b6:	2607      	movs	r6, #7
 80169b8:	ab58      	add	r3, sp, #352	; 0x160
 80169ba:	9308      	str	r3, [sp, #32]
 80169bc:	9908      	ldr	r1, [sp, #32]
 80169be:	000b      	movs	r3, r1
 80169c0:	3b01      	subs	r3, #1
 80169c2:	9308      	str	r3, [sp, #32]
 80169c4:	9b06      	ldr	r3, [sp, #24]
 80169c6:	9a08      	ldr	r2, [sp, #32]
 80169c8:	4033      	ands	r3, r6
 80169ca:	3330      	adds	r3, #48	; 0x30
 80169cc:	7013      	strb	r3, [r2, #0]
 80169ce:	9a07      	ldr	r2, [sp, #28]
 80169d0:	0754      	lsls	r4, r2, #29
 80169d2:	9a06      	ldr	r2, [sp, #24]
 80169d4:	08d0      	lsrs	r0, r2, #3
 80169d6:	9a07      	ldr	r2, [sp, #28]
 80169d8:	4304      	orrs	r4, r0
 80169da:	08d2      	lsrs	r2, r2, #3
 80169dc:	9207      	str	r2, [sp, #28]
 80169de:	0022      	movs	r2, r4
 80169e0:	9807      	ldr	r0, [sp, #28]
 80169e2:	9406      	str	r4, [sp, #24]
 80169e4:	4302      	orrs	r2, r0
 80169e6:	d1e9      	bne.n	80169bc <_svfprintf_r+0x14a4>
 80169e8:	07ea      	lsls	r2, r5, #31
 80169ea:	d507      	bpl.n	80169fc <_svfprintf_r+0x14e4>
 80169ec:	2b30      	cmp	r3, #48	; 0x30
 80169ee:	d005      	beq.n	80169fc <_svfprintf_r+0x14e4>
 80169f0:	2330      	movs	r3, #48	; 0x30
 80169f2:	9808      	ldr	r0, [sp, #32]
 80169f4:	3801      	subs	r0, #1
 80169f6:	7003      	strb	r3, [r0, #0]
 80169f8:	1e8b      	subs	r3, r1, #2
 80169fa:	9308      	str	r3, [sp, #32]
 80169fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169fe:	9a08      	ldr	r2, [sp, #32]
 8016a00:	9319      	str	r3, [sp, #100]	; 0x64
 8016a02:	ab58      	add	r3, sp, #352	; 0x160
 8016a04:	1a9b      	subs	r3, r3, r2
 8016a06:	9309      	str	r3, [sp, #36]	; 0x24
 8016a08:	2300      	movs	r3, #0
 8016a0a:	002e      	movs	r6, r5
 8016a0c:	930c      	str	r3, [sp, #48]	; 0x30
 8016a0e:	001d      	movs	r5, r3
 8016a10:	9310      	str	r3, [sp, #64]	; 0x40
 8016a12:	9311      	str	r3, [sp, #68]	; 0x44
 8016a14:	f7fe feee 	bl	80157f4 <_svfprintf_r+0x2dc>
 8016a18:	0801daa4 	.word	0x0801daa4
 8016a1c:	0801da94 	.word	0x0801da94

08016a20 <sysconf>:
 8016a20:	2380      	movs	r3, #128	; 0x80
 8016a22:	b510      	push	{r4, lr}
 8016a24:	015b      	lsls	r3, r3, #5
 8016a26:	2808      	cmp	r0, #8
 8016a28:	d004      	beq.n	8016a34 <sysconf+0x14>
 8016a2a:	f000 fe8b 	bl	8017744 <__errno>
 8016a2e:	2316      	movs	r3, #22
 8016a30:	6003      	str	r3, [r0, #0]
 8016a32:	3b17      	subs	r3, #23
 8016a34:	0018      	movs	r0, r3
 8016a36:	bd10      	pop	{r4, pc}

08016a38 <register_fini>:
 8016a38:	4b03      	ldr	r3, [pc, #12]	; (8016a48 <register_fini+0x10>)
 8016a3a:	b510      	push	{r4, lr}
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d002      	beq.n	8016a46 <register_fini+0xe>
 8016a40:	4802      	ldr	r0, [pc, #8]	; (8016a4c <register_fini+0x14>)
 8016a42:	f000 f805 	bl	8016a50 <atexit>
 8016a46:	bd10      	pop	{r4, pc}
 8016a48:	00000000 	.word	0x00000000
 8016a4c:	08017751 	.word	0x08017751

08016a50 <atexit>:
 8016a50:	2300      	movs	r3, #0
 8016a52:	b510      	push	{r4, lr}
 8016a54:	0001      	movs	r1, r0
 8016a56:	001a      	movs	r2, r3
 8016a58:	0018      	movs	r0, r3
 8016a5a:	f002 f885 	bl	8018b68 <__register_exitproc>
 8016a5e:	bd10      	pop	{r4, pc}

08016a60 <quorem>:
 8016a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a62:	0006      	movs	r6, r0
 8016a64:	690d      	ldr	r5, [r1, #16]
 8016a66:	6933      	ldr	r3, [r6, #16]
 8016a68:	b087      	sub	sp, #28
 8016a6a:	2000      	movs	r0, #0
 8016a6c:	9102      	str	r1, [sp, #8]
 8016a6e:	42ab      	cmp	r3, r5
 8016a70:	db6b      	blt.n	8016b4a <quorem+0xea>
 8016a72:	000b      	movs	r3, r1
 8016a74:	3d01      	subs	r5, #1
 8016a76:	00ac      	lsls	r4, r5, #2
 8016a78:	3314      	adds	r3, #20
 8016a7a:	9305      	str	r3, [sp, #20]
 8016a7c:	191b      	adds	r3, r3, r4
 8016a7e:	9303      	str	r3, [sp, #12]
 8016a80:	0033      	movs	r3, r6
 8016a82:	3314      	adds	r3, #20
 8016a84:	9301      	str	r3, [sp, #4]
 8016a86:	191c      	adds	r4, r3, r4
 8016a88:	9b03      	ldr	r3, [sp, #12]
 8016a8a:	6827      	ldr	r7, [r4, #0]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	0038      	movs	r0, r7
 8016a90:	9300      	str	r3, [sp, #0]
 8016a92:	3301      	adds	r3, #1
 8016a94:	0019      	movs	r1, r3
 8016a96:	9304      	str	r3, [sp, #16]
 8016a98:	f7e9 fb5a 	bl	8000150 <__udivsi3>
 8016a9c:	9b04      	ldr	r3, [sp, #16]
 8016a9e:	9000      	str	r0, [sp, #0]
 8016aa0:	429f      	cmp	r7, r3
 8016aa2:	d329      	bcc.n	8016af8 <quorem+0x98>
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	469c      	mov	ip, r3
 8016aa8:	9801      	ldr	r0, [sp, #4]
 8016aaa:	9f05      	ldr	r7, [sp, #20]
 8016aac:	9304      	str	r3, [sp, #16]
 8016aae:	cf08      	ldmia	r7!, {r3}
 8016ab0:	9a00      	ldr	r2, [sp, #0]
 8016ab2:	b299      	uxth	r1, r3
 8016ab4:	4351      	muls	r1, r2
 8016ab6:	0c1b      	lsrs	r3, r3, #16
 8016ab8:	4353      	muls	r3, r2
 8016aba:	4461      	add	r1, ip
 8016abc:	0c0a      	lsrs	r2, r1, #16
 8016abe:	189b      	adds	r3, r3, r2
 8016ac0:	0c1a      	lsrs	r2, r3, #16
 8016ac2:	9305      	str	r3, [sp, #20]
 8016ac4:	6803      	ldr	r3, [r0, #0]
 8016ac6:	4694      	mov	ip, r2
 8016ac8:	b29a      	uxth	r2, r3
 8016aca:	9b04      	ldr	r3, [sp, #16]
 8016acc:	b289      	uxth	r1, r1
 8016ace:	18d2      	adds	r2, r2, r3
 8016ad0:	6803      	ldr	r3, [r0, #0]
 8016ad2:	1a52      	subs	r2, r2, r1
 8016ad4:	0c19      	lsrs	r1, r3, #16
 8016ad6:	466b      	mov	r3, sp
 8016ad8:	8a9b      	ldrh	r3, [r3, #20]
 8016ada:	1acb      	subs	r3, r1, r3
 8016adc:	1411      	asrs	r1, r2, #16
 8016ade:	185b      	adds	r3, r3, r1
 8016ae0:	1419      	asrs	r1, r3, #16
 8016ae2:	b292      	uxth	r2, r2
 8016ae4:	041b      	lsls	r3, r3, #16
 8016ae6:	431a      	orrs	r2, r3
 8016ae8:	9b03      	ldr	r3, [sp, #12]
 8016aea:	9104      	str	r1, [sp, #16]
 8016aec:	c004      	stmia	r0!, {r2}
 8016aee:	42bb      	cmp	r3, r7
 8016af0:	d2dd      	bcs.n	8016aae <quorem+0x4e>
 8016af2:	6823      	ldr	r3, [r4, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d02e      	beq.n	8016b56 <quorem+0xf6>
 8016af8:	0030      	movs	r0, r6
 8016afa:	9902      	ldr	r1, [sp, #8]
 8016afc:	f001 fd76 	bl	80185ec <__mcmp>
 8016b00:	2800      	cmp	r0, #0
 8016b02:	db21      	blt.n	8016b48 <quorem+0xe8>
 8016b04:	0030      	movs	r0, r6
 8016b06:	2400      	movs	r4, #0
 8016b08:	9b00      	ldr	r3, [sp, #0]
 8016b0a:	9902      	ldr	r1, [sp, #8]
 8016b0c:	3301      	adds	r3, #1
 8016b0e:	9300      	str	r3, [sp, #0]
 8016b10:	3014      	adds	r0, #20
 8016b12:	3114      	adds	r1, #20
 8016b14:	6802      	ldr	r2, [r0, #0]
 8016b16:	c908      	ldmia	r1!, {r3}
 8016b18:	b292      	uxth	r2, r2
 8016b1a:	1914      	adds	r4, r2, r4
 8016b1c:	b29a      	uxth	r2, r3
 8016b1e:	1aa2      	subs	r2, r4, r2
 8016b20:	6804      	ldr	r4, [r0, #0]
 8016b22:	0c1b      	lsrs	r3, r3, #16
 8016b24:	0c24      	lsrs	r4, r4, #16
 8016b26:	1ae3      	subs	r3, r4, r3
 8016b28:	1414      	asrs	r4, r2, #16
 8016b2a:	191b      	adds	r3, r3, r4
 8016b2c:	141c      	asrs	r4, r3, #16
 8016b2e:	b292      	uxth	r2, r2
 8016b30:	041b      	lsls	r3, r3, #16
 8016b32:	4313      	orrs	r3, r2
 8016b34:	c008      	stmia	r0!, {r3}
 8016b36:	9b03      	ldr	r3, [sp, #12]
 8016b38:	428b      	cmp	r3, r1
 8016b3a:	d2eb      	bcs.n	8016b14 <quorem+0xb4>
 8016b3c:	9a01      	ldr	r2, [sp, #4]
 8016b3e:	00ab      	lsls	r3, r5, #2
 8016b40:	18d3      	adds	r3, r2, r3
 8016b42:	681a      	ldr	r2, [r3, #0]
 8016b44:	2a00      	cmp	r2, #0
 8016b46:	d010      	beq.n	8016b6a <quorem+0x10a>
 8016b48:	9800      	ldr	r0, [sp, #0]
 8016b4a:	b007      	add	sp, #28
 8016b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b4e:	6823      	ldr	r3, [r4, #0]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d104      	bne.n	8016b5e <quorem+0xfe>
 8016b54:	3d01      	subs	r5, #1
 8016b56:	9b01      	ldr	r3, [sp, #4]
 8016b58:	3c04      	subs	r4, #4
 8016b5a:	42a3      	cmp	r3, r4
 8016b5c:	d3f7      	bcc.n	8016b4e <quorem+0xee>
 8016b5e:	6135      	str	r5, [r6, #16]
 8016b60:	e7ca      	b.n	8016af8 <quorem+0x98>
 8016b62:	681a      	ldr	r2, [r3, #0]
 8016b64:	2a00      	cmp	r2, #0
 8016b66:	d104      	bne.n	8016b72 <quorem+0x112>
 8016b68:	3d01      	subs	r5, #1
 8016b6a:	9a01      	ldr	r2, [sp, #4]
 8016b6c:	3b04      	subs	r3, #4
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	d3f7      	bcc.n	8016b62 <quorem+0x102>
 8016b72:	6135      	str	r5, [r6, #16]
 8016b74:	e7e8      	b.n	8016b48 <quorem+0xe8>
	...

08016b78 <_dtoa_r>:
 8016b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b7a:	0014      	movs	r4, r2
 8016b7c:	001d      	movs	r5, r3
 8016b7e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016b80:	b09d      	sub	sp, #116	; 0x74
 8016b82:	940a      	str	r4, [sp, #40]	; 0x28
 8016b84:	950b      	str	r5, [sp, #44]	; 0x2c
 8016b86:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8016b88:	9003      	str	r0, [sp, #12]
 8016b8a:	2900      	cmp	r1, #0
 8016b8c:	d009      	beq.n	8016ba2 <_dtoa_r+0x2a>
 8016b8e:	2301      	movs	r3, #1
 8016b90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016b92:	4093      	lsls	r3, r2
 8016b94:	604a      	str	r2, [r1, #4]
 8016b96:	608b      	str	r3, [r1, #8]
 8016b98:	f001 face 	bl	8018138 <_Bfree>
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	9a03      	ldr	r2, [sp, #12]
 8016ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8016ba2:	2d00      	cmp	r5, #0
 8016ba4:	da1f      	bge.n	8016be6 <_dtoa_r+0x6e>
 8016ba6:	2301      	movs	r3, #1
 8016ba8:	6033      	str	r3, [r6, #0]
 8016baa:	006b      	lsls	r3, r5, #1
 8016bac:	085b      	lsrs	r3, r3, #1
 8016bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8016bb0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016bb2:	4bb9      	ldr	r3, [pc, #740]	; (8016e98 <_dtoa_r+0x320>)
 8016bb4:	003a      	movs	r2, r7
 8016bb6:	9318      	str	r3, [sp, #96]	; 0x60
 8016bb8:	401a      	ands	r2, r3
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	d116      	bne.n	8016bec <_dtoa_r+0x74>
 8016bbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016bc0:	4bb6      	ldr	r3, [pc, #728]	; (8016e9c <_dtoa_r+0x324>)
 8016bc2:	6013      	str	r3, [r2, #0]
 8016bc4:	033a      	lsls	r2, r7, #12
 8016bc6:	0b12      	lsrs	r2, r2, #12
 8016bc8:	4314      	orrs	r4, r2
 8016bca:	d101      	bne.n	8016bd0 <_dtoa_r+0x58>
 8016bcc:	f000 fda4 	bl	8017718 <_dtoa_r+0xba0>
 8016bd0:	48b3      	ldr	r0, [pc, #716]	; (8016ea0 <_dtoa_r+0x328>)
 8016bd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016bd4:	9005      	str	r0, [sp, #20]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d002      	beq.n	8016be0 <_dtoa_r+0x68>
 8016bda:	4bb2      	ldr	r3, [pc, #712]	; (8016ea4 <_dtoa_r+0x32c>)
 8016bdc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016bde:	6013      	str	r3, [r2, #0]
 8016be0:	9805      	ldr	r0, [sp, #20]
 8016be2:	b01d      	add	sp, #116	; 0x74
 8016be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016be6:	2300      	movs	r3, #0
 8016be8:	6033      	str	r3, [r6, #0]
 8016bea:	e7e1      	b.n	8016bb0 <_dtoa_r+0x38>
 8016bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bf0:	9210      	str	r2, [sp, #64]	; 0x40
 8016bf2:	9311      	str	r3, [sp, #68]	; 0x44
 8016bf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016bf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	f7e9 fc2e 	bl	800045c <__aeabi_dcmpeq>
 8016c00:	1e06      	subs	r6, r0, #0
 8016c02:	d00b      	beq.n	8016c1c <_dtoa_r+0xa4>
 8016c04:	2301      	movs	r3, #1
 8016c06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016c08:	6013      	str	r3, [r2, #0]
 8016c0a:	4ba7      	ldr	r3, [pc, #668]	; (8016ea8 <_dtoa_r+0x330>)
 8016c0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016c0e:	9305      	str	r3, [sp, #20]
 8016c10:	2a00      	cmp	r2, #0
 8016c12:	d0e5      	beq.n	8016be0 <_dtoa_r+0x68>
 8016c14:	4aa5      	ldr	r2, [pc, #660]	; (8016eac <_dtoa_r+0x334>)
 8016c16:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016c18:	600a      	str	r2, [r1, #0]
 8016c1a:	e7e1      	b.n	8016be0 <_dtoa_r+0x68>
 8016c1c:	ab1a      	add	r3, sp, #104	; 0x68
 8016c1e:	9301      	str	r3, [sp, #4]
 8016c20:	ab1b      	add	r3, sp, #108	; 0x6c
 8016c22:	9300      	str	r3, [sp, #0]
 8016c24:	9803      	ldr	r0, [sp, #12]
 8016c26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c2a:	f001 fe07 	bl	801883c <__d2b>
 8016c2e:	007b      	lsls	r3, r7, #1
 8016c30:	9004      	str	r0, [sp, #16]
 8016c32:	0d5b      	lsrs	r3, r3, #21
 8016c34:	d100      	bne.n	8016c38 <_dtoa_r+0xc0>
 8016c36:	e07c      	b.n	8016d32 <_dtoa_r+0x1ba>
 8016c38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016c3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016c3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016c3e:	4c9c      	ldr	r4, [pc, #624]	; (8016eb0 <_dtoa_r+0x338>)
 8016c40:	0312      	lsls	r2, r2, #12
 8016c42:	0b12      	lsrs	r2, r2, #12
 8016c44:	4314      	orrs	r4, r2
 8016c46:	0021      	movs	r1, r4
 8016c48:	4a9a      	ldr	r2, [pc, #616]	; (8016eb4 <_dtoa_r+0x33c>)
 8016c4a:	9616      	str	r6, [sp, #88]	; 0x58
 8016c4c:	189f      	adds	r7, r3, r2
 8016c4e:	2200      	movs	r2, #0
 8016c50:	4b99      	ldr	r3, [pc, #612]	; (8016eb8 <_dtoa_r+0x340>)
 8016c52:	f7eb fbdf 	bl	8002414 <__aeabi_dsub>
 8016c56:	4a99      	ldr	r2, [pc, #612]	; (8016ebc <_dtoa_r+0x344>)
 8016c58:	4b99      	ldr	r3, [pc, #612]	; (8016ec0 <_dtoa_r+0x348>)
 8016c5a:	f7eb f96f 	bl	8001f3c <__aeabi_dmul>
 8016c5e:	4a99      	ldr	r2, [pc, #612]	; (8016ec4 <_dtoa_r+0x34c>)
 8016c60:	4b99      	ldr	r3, [pc, #612]	; (8016ec8 <_dtoa_r+0x350>)
 8016c62:	f7ea f9fb 	bl	800105c <__aeabi_dadd>
 8016c66:	0004      	movs	r4, r0
 8016c68:	0038      	movs	r0, r7
 8016c6a:	000d      	movs	r5, r1
 8016c6c:	f7eb ffb8 	bl	8002be0 <__aeabi_i2d>
 8016c70:	4a96      	ldr	r2, [pc, #600]	; (8016ecc <_dtoa_r+0x354>)
 8016c72:	4b97      	ldr	r3, [pc, #604]	; (8016ed0 <_dtoa_r+0x358>)
 8016c74:	f7eb f962 	bl	8001f3c <__aeabi_dmul>
 8016c78:	0002      	movs	r2, r0
 8016c7a:	000b      	movs	r3, r1
 8016c7c:	0020      	movs	r0, r4
 8016c7e:	0029      	movs	r1, r5
 8016c80:	f7ea f9ec 	bl	800105c <__aeabi_dadd>
 8016c84:	0004      	movs	r4, r0
 8016c86:	000d      	movs	r5, r1
 8016c88:	f7eb ff74 	bl	8002b74 <__aeabi_d2iz>
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	9002      	str	r0, [sp, #8]
 8016c90:	2300      	movs	r3, #0
 8016c92:	0020      	movs	r0, r4
 8016c94:	0029      	movs	r1, r5
 8016c96:	f7e9 fbe7 	bl	8000468 <__aeabi_dcmplt>
 8016c9a:	2800      	cmp	r0, #0
 8016c9c:	d00b      	beq.n	8016cb6 <_dtoa_r+0x13e>
 8016c9e:	9802      	ldr	r0, [sp, #8]
 8016ca0:	f7eb ff9e 	bl	8002be0 <__aeabi_i2d>
 8016ca4:	002b      	movs	r3, r5
 8016ca6:	0022      	movs	r2, r4
 8016ca8:	f7e9 fbd8 	bl	800045c <__aeabi_dcmpeq>
 8016cac:	4243      	negs	r3, r0
 8016cae:	4158      	adcs	r0, r3
 8016cb0:	9b02      	ldr	r3, [sp, #8]
 8016cb2:	1a1b      	subs	r3, r3, r0
 8016cb4:	9302      	str	r3, [sp, #8]
 8016cb6:	2301      	movs	r3, #1
 8016cb8:	9314      	str	r3, [sp, #80]	; 0x50
 8016cba:	9b02      	ldr	r3, [sp, #8]
 8016cbc:	2b16      	cmp	r3, #22
 8016cbe:	d80f      	bhi.n	8016ce0 <_dtoa_r+0x168>
 8016cc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016cc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016cc4:	00da      	lsls	r2, r3, #3
 8016cc6:	4b83      	ldr	r3, [pc, #524]	; (8016ed4 <_dtoa_r+0x35c>)
 8016cc8:	189b      	adds	r3, r3, r2
 8016cca:	681a      	ldr	r2, [r3, #0]
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	f7e9 fbcb 	bl	8000468 <__aeabi_dcmplt>
 8016cd2:	2800      	cmp	r0, #0
 8016cd4:	d049      	beq.n	8016d6a <_dtoa_r+0x1f2>
 8016cd6:	9b02      	ldr	r3, [sp, #8]
 8016cd8:	3b01      	subs	r3, #1
 8016cda:	9302      	str	r3, [sp, #8]
 8016cdc:	2300      	movs	r3, #0
 8016cde:	9314      	str	r3, [sp, #80]	; 0x50
 8016ce0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016ce2:	1bdf      	subs	r7, r3, r7
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ce8:	003b      	movs	r3, r7
 8016cea:	3b01      	subs	r3, #1
 8016cec:	930d      	str	r3, [sp, #52]	; 0x34
 8016cee:	d504      	bpl.n	8016cfa <_dtoa_r+0x182>
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	1bdb      	subs	r3, r3, r7
 8016cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	930d      	str	r3, [sp, #52]	; 0x34
 8016cfa:	9b02      	ldr	r3, [sp, #8]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	db36      	blt.n	8016d6e <_dtoa_r+0x1f6>
 8016d00:	9a02      	ldr	r2, [sp, #8]
 8016d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d04:	4694      	mov	ip, r2
 8016d06:	4463      	add	r3, ip
 8016d08:	930d      	str	r3, [sp, #52]	; 0x34
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8016d0e:	930e      	str	r3, [sp, #56]	; 0x38
 8016d10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016d12:	2401      	movs	r4, #1
 8016d14:	2b09      	cmp	r3, #9
 8016d16:	d865      	bhi.n	8016de4 <_dtoa_r+0x26c>
 8016d18:	2b05      	cmp	r3, #5
 8016d1a:	dd02      	ble.n	8016d22 <_dtoa_r+0x1aa>
 8016d1c:	2400      	movs	r4, #0
 8016d1e:	3b04      	subs	r3, #4
 8016d20:	9322      	str	r3, [sp, #136]	; 0x88
 8016d22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016d24:	1e98      	subs	r0, r3, #2
 8016d26:	2803      	cmp	r0, #3
 8016d28:	d865      	bhi.n	8016df6 <_dtoa_r+0x27e>
 8016d2a:	f7e9 f9fd 	bl	8000128 <__gnu_thumb1_case_uqi>
 8016d2e:	3629      	.short	0x3629
 8016d30:	5934      	.short	0x5934
 8016d32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016d34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016d36:	189e      	adds	r6, r3, r2
 8016d38:	4b67      	ldr	r3, [pc, #412]	; (8016ed8 <_dtoa_r+0x360>)
 8016d3a:	18f2      	adds	r2, r6, r3
 8016d3c:	2a20      	cmp	r2, #32
 8016d3e:	dd0f      	ble.n	8016d60 <_dtoa_r+0x1e8>
 8016d40:	2340      	movs	r3, #64	; 0x40
 8016d42:	0038      	movs	r0, r7
 8016d44:	1a9b      	subs	r3, r3, r2
 8016d46:	4098      	lsls	r0, r3
 8016d48:	4b64      	ldr	r3, [pc, #400]	; (8016edc <_dtoa_r+0x364>)
 8016d4a:	18f3      	adds	r3, r6, r3
 8016d4c:	40dc      	lsrs	r4, r3
 8016d4e:	4320      	orrs	r0, r4
 8016d50:	f7eb ff76 	bl	8002c40 <__aeabi_ui2d>
 8016d54:	2301      	movs	r3, #1
 8016d56:	4c62      	ldr	r4, [pc, #392]	; (8016ee0 <_dtoa_r+0x368>)
 8016d58:	1e77      	subs	r7, r6, #1
 8016d5a:	1909      	adds	r1, r1, r4
 8016d5c:	9316      	str	r3, [sp, #88]	; 0x58
 8016d5e:	e776      	b.n	8016c4e <_dtoa_r+0xd6>
 8016d60:	2320      	movs	r3, #32
 8016d62:	0020      	movs	r0, r4
 8016d64:	1a9b      	subs	r3, r3, r2
 8016d66:	4098      	lsls	r0, r3
 8016d68:	e7f2      	b.n	8016d50 <_dtoa_r+0x1d8>
 8016d6a:	9014      	str	r0, [sp, #80]	; 0x50
 8016d6c:	e7b8      	b.n	8016ce0 <_dtoa_r+0x168>
 8016d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d70:	9a02      	ldr	r2, [sp, #8]
 8016d72:	1a9b      	subs	r3, r3, r2
 8016d74:	9309      	str	r3, [sp, #36]	; 0x24
 8016d76:	4253      	negs	r3, r2
 8016d78:	930e      	str	r3, [sp, #56]	; 0x38
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8016d7e:	e7c7      	b.n	8016d10 <_dtoa_r+0x198>
 8016d80:	2300      	movs	r3, #0
 8016d82:	9312      	str	r3, [sp, #72]	; 0x48
 8016d84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	dc39      	bgt.n	8016dfe <_dtoa_r+0x286>
 8016d8a:	2301      	movs	r3, #1
 8016d8c:	001a      	movs	r2, r3
 8016d8e:	930c      	str	r3, [sp, #48]	; 0x30
 8016d90:	9308      	str	r3, [sp, #32]
 8016d92:	9223      	str	r2, [sp, #140]	; 0x8c
 8016d94:	e00d      	b.n	8016db2 <_dtoa_r+0x23a>
 8016d96:	2301      	movs	r3, #1
 8016d98:	e7f3      	b.n	8016d82 <_dtoa_r+0x20a>
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8016d9e:	9312      	str	r3, [sp, #72]	; 0x48
 8016da0:	4694      	mov	ip, r2
 8016da2:	9b02      	ldr	r3, [sp, #8]
 8016da4:	4463      	add	r3, ip
 8016da6:	930c      	str	r3, [sp, #48]	; 0x30
 8016da8:	3301      	adds	r3, #1
 8016daa:	9308      	str	r3, [sp, #32]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	dc00      	bgt.n	8016db2 <_dtoa_r+0x23a>
 8016db0:	2301      	movs	r3, #1
 8016db2:	2200      	movs	r2, #0
 8016db4:	9903      	ldr	r1, [sp, #12]
 8016db6:	644a      	str	r2, [r1, #68]	; 0x44
 8016db8:	3204      	adds	r2, #4
 8016dba:	0010      	movs	r0, r2
 8016dbc:	9903      	ldr	r1, [sp, #12]
 8016dbe:	3014      	adds	r0, #20
 8016dc0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8016dc2:	4298      	cmp	r0, r3
 8016dc4:	d91f      	bls.n	8016e06 <_dtoa_r+0x28e>
 8016dc6:	9803      	ldr	r0, [sp, #12]
 8016dc8:	f001 f98e 	bl	80180e8 <_Balloc>
 8016dcc:	9005      	str	r0, [sp, #20]
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	d11e      	bne.n	8016e10 <_dtoa_r+0x298>
 8016dd2:	21d5      	movs	r1, #213	; 0xd5
 8016dd4:	0002      	movs	r2, r0
 8016dd6:	4b43      	ldr	r3, [pc, #268]	; (8016ee4 <_dtoa_r+0x36c>)
 8016dd8:	0049      	lsls	r1, r1, #1
 8016dda:	4843      	ldr	r0, [pc, #268]	; (8016ee8 <_dtoa_r+0x370>)
 8016ddc:	f001 ff06 	bl	8018bec <__assert_func>
 8016de0:	2301      	movs	r3, #1
 8016de2:	e7db      	b.n	8016d9c <_dtoa_r+0x224>
 8016de4:	2300      	movs	r3, #0
 8016de6:	9412      	str	r4, [sp, #72]	; 0x48
 8016de8:	9322      	str	r3, [sp, #136]	; 0x88
 8016dea:	3b01      	subs	r3, #1
 8016dec:	930c      	str	r3, [sp, #48]	; 0x30
 8016dee:	9308      	str	r3, [sp, #32]
 8016df0:	2200      	movs	r2, #0
 8016df2:	3313      	adds	r3, #19
 8016df4:	e7cd      	b.n	8016d92 <_dtoa_r+0x21a>
 8016df6:	2301      	movs	r3, #1
 8016df8:	9312      	str	r3, [sp, #72]	; 0x48
 8016dfa:	3b02      	subs	r3, #2
 8016dfc:	e7f6      	b.n	8016dec <_dtoa_r+0x274>
 8016dfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016e00:	930c      	str	r3, [sp, #48]	; 0x30
 8016e02:	9308      	str	r3, [sp, #32]
 8016e04:	e7d5      	b.n	8016db2 <_dtoa_r+0x23a>
 8016e06:	9803      	ldr	r0, [sp, #12]
 8016e08:	3101      	adds	r1, #1
 8016e0a:	6441      	str	r1, [r0, #68]	; 0x44
 8016e0c:	0052      	lsls	r2, r2, #1
 8016e0e:	e7d4      	b.n	8016dba <_dtoa_r+0x242>
 8016e10:	9b03      	ldr	r3, [sp, #12]
 8016e12:	9a05      	ldr	r2, [sp, #20]
 8016e14:	641a      	str	r2, [r3, #64]	; 0x40
 8016e16:	9b08      	ldr	r3, [sp, #32]
 8016e18:	2b0e      	cmp	r3, #14
 8016e1a:	d900      	bls.n	8016e1e <_dtoa_r+0x2a6>
 8016e1c:	e0df      	b.n	8016fde <_dtoa_r+0x466>
 8016e1e:	2c00      	cmp	r4, #0
 8016e20:	d100      	bne.n	8016e24 <_dtoa_r+0x2ac>
 8016e22:	e0dc      	b.n	8016fde <_dtoa_r+0x466>
 8016e24:	9b02      	ldr	r3, [sp, #8]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	dd62      	ble.n	8016ef0 <_dtoa_r+0x378>
 8016e2a:	001a      	movs	r2, r3
 8016e2c:	210f      	movs	r1, #15
 8016e2e:	4b29      	ldr	r3, [pc, #164]	; (8016ed4 <_dtoa_r+0x35c>)
 8016e30:	400a      	ands	r2, r1
 8016e32:	00d2      	lsls	r2, r2, #3
 8016e34:	189b      	adds	r3, r3, r2
 8016e36:	681d      	ldr	r5, [r3, #0]
 8016e38:	685e      	ldr	r6, [r3, #4]
 8016e3a:	9b02      	ldr	r3, [sp, #8]
 8016e3c:	2702      	movs	r7, #2
 8016e3e:	111c      	asrs	r4, r3, #4
 8016e40:	05db      	lsls	r3, r3, #23
 8016e42:	d50a      	bpl.n	8016e5a <_dtoa_r+0x2e2>
 8016e44:	4b29      	ldr	r3, [pc, #164]	; (8016eec <_dtoa_r+0x374>)
 8016e46:	400c      	ands	r4, r1
 8016e48:	6a1a      	ldr	r2, [r3, #32]
 8016e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016e4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016e50:	f7ea fc6e 	bl	8001730 <__aeabi_ddiv>
 8016e54:	900a      	str	r0, [sp, #40]	; 0x28
 8016e56:	910b      	str	r1, [sp, #44]	; 0x2c
 8016e58:	3701      	adds	r7, #1
 8016e5a:	4b24      	ldr	r3, [pc, #144]	; (8016eec <_dtoa_r+0x374>)
 8016e5c:	9306      	str	r3, [sp, #24]
 8016e5e:	2c00      	cmp	r4, #0
 8016e60:	d108      	bne.n	8016e74 <_dtoa_r+0x2fc>
 8016e62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e66:	002a      	movs	r2, r5
 8016e68:	0033      	movs	r3, r6
 8016e6a:	f7ea fc61 	bl	8001730 <__aeabi_ddiv>
 8016e6e:	900a      	str	r0, [sp, #40]	; 0x28
 8016e70:	910b      	str	r1, [sp, #44]	; 0x2c
 8016e72:	e058      	b.n	8016f26 <_dtoa_r+0x3ae>
 8016e74:	2301      	movs	r3, #1
 8016e76:	421c      	tst	r4, r3
 8016e78:	d009      	beq.n	8016e8e <_dtoa_r+0x316>
 8016e7a:	18ff      	adds	r7, r7, r3
 8016e7c:	9b06      	ldr	r3, [sp, #24]
 8016e7e:	0028      	movs	r0, r5
 8016e80:	681a      	ldr	r2, [r3, #0]
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	0031      	movs	r1, r6
 8016e86:	f7eb f859 	bl	8001f3c <__aeabi_dmul>
 8016e8a:	0005      	movs	r5, r0
 8016e8c:	000e      	movs	r6, r1
 8016e8e:	9b06      	ldr	r3, [sp, #24]
 8016e90:	1064      	asrs	r4, r4, #1
 8016e92:	3308      	adds	r3, #8
 8016e94:	e7e2      	b.n	8016e5c <_dtoa_r+0x2e4>
 8016e96:	46c0      	nop			; (mov r8, r8)
 8016e98:	7ff00000 	.word	0x7ff00000
 8016e9c:	0000270f 	.word	0x0000270f
 8016ea0:	0801dab4 	.word	0x0801dab4
 8016ea4:	0801dab7 	.word	0x0801dab7
 8016ea8:	0801da92 	.word	0x0801da92
 8016eac:	0801da93 	.word	0x0801da93
 8016eb0:	3ff00000 	.word	0x3ff00000
 8016eb4:	fffffc01 	.word	0xfffffc01
 8016eb8:	3ff80000 	.word	0x3ff80000
 8016ebc:	636f4361 	.word	0x636f4361
 8016ec0:	3fd287a7 	.word	0x3fd287a7
 8016ec4:	8b60c8b3 	.word	0x8b60c8b3
 8016ec8:	3fc68a28 	.word	0x3fc68a28
 8016ecc:	509f79fb 	.word	0x509f79fb
 8016ed0:	3fd34413 	.word	0x3fd34413
 8016ed4:	0801dc38 	.word	0x0801dc38
 8016ed8:	00000432 	.word	0x00000432
 8016edc:	00000412 	.word	0x00000412
 8016ee0:	fe100000 	.word	0xfe100000
 8016ee4:	0801dac1 	.word	0x0801dac1
 8016ee8:	0801dad2 	.word	0x0801dad2
 8016eec:	0801dc10 	.word	0x0801dc10
 8016ef0:	9b02      	ldr	r3, [sp, #8]
 8016ef2:	2702      	movs	r7, #2
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d016      	beq.n	8016f26 <_dtoa_r+0x3ae>
 8016ef8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016efa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016efc:	425c      	negs	r4, r3
 8016efe:	230f      	movs	r3, #15
 8016f00:	4ad4      	ldr	r2, [pc, #848]	; (8017254 <_dtoa_r+0x6dc>)
 8016f02:	4023      	ands	r3, r4
 8016f04:	00db      	lsls	r3, r3, #3
 8016f06:	18d3      	adds	r3, r2, r3
 8016f08:	681a      	ldr	r2, [r3, #0]
 8016f0a:	685b      	ldr	r3, [r3, #4]
 8016f0c:	f7eb f816 	bl	8001f3c <__aeabi_dmul>
 8016f10:	2601      	movs	r6, #1
 8016f12:	2300      	movs	r3, #0
 8016f14:	900a      	str	r0, [sp, #40]	; 0x28
 8016f16:	910b      	str	r1, [sp, #44]	; 0x2c
 8016f18:	4dcf      	ldr	r5, [pc, #828]	; (8017258 <_dtoa_r+0x6e0>)
 8016f1a:	1124      	asrs	r4, r4, #4
 8016f1c:	2c00      	cmp	r4, #0
 8016f1e:	d000      	beq.n	8016f22 <_dtoa_r+0x3aa>
 8016f20:	e08d      	b.n	801703e <_dtoa_r+0x4c6>
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d1a3      	bne.n	8016e6e <_dtoa_r+0x2f6>
 8016f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d100      	bne.n	8016f2e <_dtoa_r+0x3b6>
 8016f2c:	e092      	b.n	8017054 <_dtoa_r+0x4dc>
 8016f2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016f30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016f32:	2200      	movs	r2, #0
 8016f34:	0020      	movs	r0, r4
 8016f36:	0029      	movs	r1, r5
 8016f38:	4bc8      	ldr	r3, [pc, #800]	; (801725c <_dtoa_r+0x6e4>)
 8016f3a:	f7e9 fa95 	bl	8000468 <__aeabi_dcmplt>
 8016f3e:	2800      	cmp	r0, #0
 8016f40:	d100      	bne.n	8016f44 <_dtoa_r+0x3cc>
 8016f42:	e087      	b.n	8017054 <_dtoa_r+0x4dc>
 8016f44:	9b08      	ldr	r3, [sp, #32]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d100      	bne.n	8016f4c <_dtoa_r+0x3d4>
 8016f4a:	e083      	b.n	8017054 <_dtoa_r+0x4dc>
 8016f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	dd41      	ble.n	8016fd6 <_dtoa_r+0x45e>
 8016f52:	9b02      	ldr	r3, [sp, #8]
 8016f54:	2200      	movs	r2, #0
 8016f56:	3b01      	subs	r3, #1
 8016f58:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f5a:	0020      	movs	r0, r4
 8016f5c:	0029      	movs	r1, r5
 8016f5e:	4bc0      	ldr	r3, [pc, #768]	; (8017260 <_dtoa_r+0x6e8>)
 8016f60:	f7ea ffec 	bl	8001f3c <__aeabi_dmul>
 8016f64:	900a      	str	r0, [sp, #40]	; 0x28
 8016f66:	910b      	str	r1, [sp, #44]	; 0x2c
 8016f68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016f6a:	3701      	adds	r7, #1
 8016f6c:	0038      	movs	r0, r7
 8016f6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016f70:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016f72:	f7eb fe35 	bl	8002be0 <__aeabi_i2d>
 8016f76:	0022      	movs	r2, r4
 8016f78:	002b      	movs	r3, r5
 8016f7a:	f7ea ffdf 	bl	8001f3c <__aeabi_dmul>
 8016f7e:	2200      	movs	r2, #0
 8016f80:	4bb8      	ldr	r3, [pc, #736]	; (8017264 <_dtoa_r+0x6ec>)
 8016f82:	f7ea f86b 	bl	800105c <__aeabi_dadd>
 8016f86:	900a      	str	r0, [sp, #40]	; 0x28
 8016f88:	910b      	str	r1, [sp, #44]	; 0x2c
 8016f8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f8e:	9206      	str	r2, [sp, #24]
 8016f90:	9307      	str	r3, [sp, #28]
 8016f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f94:	4ab4      	ldr	r2, [pc, #720]	; (8017268 <_dtoa_r+0x6f0>)
 8016f96:	189f      	adds	r7, r3, r2
 8016f98:	9707      	str	r7, [sp, #28]
 8016f9a:	2e00      	cmp	r6, #0
 8016f9c:	d15e      	bne.n	801705c <_dtoa_r+0x4e4>
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	0020      	movs	r0, r4
 8016fa2:	0029      	movs	r1, r5
 8016fa4:	4bb1      	ldr	r3, [pc, #708]	; (801726c <_dtoa_r+0x6f4>)
 8016fa6:	f7eb fa35 	bl	8002414 <__aeabi_dsub>
 8016faa:	003b      	movs	r3, r7
 8016fac:	9a06      	ldr	r2, [sp, #24]
 8016fae:	0004      	movs	r4, r0
 8016fb0:	000d      	movs	r5, r1
 8016fb2:	f7e9 fa6d 	bl	8000490 <__aeabi_dcmpgt>
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	d000      	beq.n	8016fbc <_dtoa_r+0x444>
 8016fba:	e2aa      	b.n	8017512 <_dtoa_r+0x99a>
 8016fbc:	48ac      	ldr	r0, [pc, #688]	; (8017270 <_dtoa_r+0x6f8>)
 8016fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016fc0:	4684      	mov	ip, r0
 8016fc2:	4461      	add	r1, ip
 8016fc4:	000b      	movs	r3, r1
 8016fc6:	0020      	movs	r0, r4
 8016fc8:	0029      	movs	r1, r5
 8016fca:	9a06      	ldr	r2, [sp, #24]
 8016fcc:	f7e9 fa4c 	bl	8000468 <__aeabi_dcmplt>
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	d000      	beq.n	8016fd6 <_dtoa_r+0x45e>
 8016fd4:	e29b      	b.n	801750e <_dtoa_r+0x996>
 8016fd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016fda:	930a      	str	r3, [sp, #40]	; 0x28
 8016fdc:	940b      	str	r4, [sp, #44]	; 0x2c
 8016fde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	da00      	bge.n	8016fe6 <_dtoa_r+0x46e>
 8016fe4:	e16a      	b.n	80172bc <_dtoa_r+0x744>
 8016fe6:	9a02      	ldr	r2, [sp, #8]
 8016fe8:	2a0e      	cmp	r2, #14
 8016fea:	dd00      	ble.n	8016fee <_dtoa_r+0x476>
 8016fec:	e166      	b.n	80172bc <_dtoa_r+0x744>
 8016fee:	4b99      	ldr	r3, [pc, #612]	; (8017254 <_dtoa_r+0x6dc>)
 8016ff0:	00d2      	lsls	r2, r2, #3
 8016ff2:	189b      	adds	r3, r3, r2
 8016ff4:	681e      	ldr	r6, [r3, #0]
 8016ff6:	685f      	ldr	r7, [r3, #4]
 8016ff8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	db00      	blt.n	8017000 <_dtoa_r+0x488>
 8016ffe:	e0d7      	b.n	80171b0 <_dtoa_r+0x638>
 8017000:	9b08      	ldr	r3, [sp, #32]
 8017002:	2b00      	cmp	r3, #0
 8017004:	dd00      	ble.n	8017008 <_dtoa_r+0x490>
 8017006:	e0d3      	b.n	80171b0 <_dtoa_r+0x638>
 8017008:	d000      	beq.n	801700c <_dtoa_r+0x494>
 801700a:	e27f      	b.n	801750c <_dtoa_r+0x994>
 801700c:	2200      	movs	r2, #0
 801700e:	0030      	movs	r0, r6
 8017010:	0039      	movs	r1, r7
 8017012:	4b96      	ldr	r3, [pc, #600]	; (801726c <_dtoa_r+0x6f4>)
 8017014:	f7ea ff92 	bl	8001f3c <__aeabi_dmul>
 8017018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801701a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801701c:	f7e9 fa42 	bl	80004a4 <__aeabi_dcmpge>
 8017020:	9e08      	ldr	r6, [sp, #32]
 8017022:	0037      	movs	r7, r6
 8017024:	2800      	cmp	r0, #0
 8017026:	d000      	beq.n	801702a <_dtoa_r+0x4b2>
 8017028:	e256      	b.n	80174d8 <_dtoa_r+0x960>
 801702a:	9b05      	ldr	r3, [sp, #20]
 801702c:	9a05      	ldr	r2, [sp, #20]
 801702e:	3301      	adds	r3, #1
 8017030:	9306      	str	r3, [sp, #24]
 8017032:	2331      	movs	r3, #49	; 0x31
 8017034:	7013      	strb	r3, [r2, #0]
 8017036:	9b02      	ldr	r3, [sp, #8]
 8017038:	3301      	adds	r3, #1
 801703a:	9302      	str	r3, [sp, #8]
 801703c:	e251      	b.n	80174e2 <_dtoa_r+0x96a>
 801703e:	4234      	tst	r4, r6
 8017040:	d005      	beq.n	801704e <_dtoa_r+0x4d6>
 8017042:	682a      	ldr	r2, [r5, #0]
 8017044:	686b      	ldr	r3, [r5, #4]
 8017046:	f7ea ff79 	bl	8001f3c <__aeabi_dmul>
 801704a:	0033      	movs	r3, r6
 801704c:	3701      	adds	r7, #1
 801704e:	1064      	asrs	r4, r4, #1
 8017050:	3508      	adds	r5, #8
 8017052:	e763      	b.n	8016f1c <_dtoa_r+0x3a4>
 8017054:	9b02      	ldr	r3, [sp, #8]
 8017056:	9e08      	ldr	r6, [sp, #32]
 8017058:	930f      	str	r3, [sp, #60]	; 0x3c
 801705a:	e787      	b.n	8016f6c <_dtoa_r+0x3f4>
 801705c:	4b7d      	ldr	r3, [pc, #500]	; (8017254 <_dtoa_r+0x6dc>)
 801705e:	1e72      	subs	r2, r6, #1
 8017060:	00d2      	lsls	r2, r2, #3
 8017062:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017064:	189b      	adds	r3, r3, r2
 8017066:	681a      	ldr	r2, [r3, #0]
 8017068:	685b      	ldr	r3, [r3, #4]
 801706a:	2900      	cmp	r1, #0
 801706c:	d04e      	beq.n	801710c <_dtoa_r+0x594>
 801706e:	2000      	movs	r0, #0
 8017070:	4980      	ldr	r1, [pc, #512]	; (8017274 <_dtoa_r+0x6fc>)
 8017072:	f7ea fb5d 	bl	8001730 <__aeabi_ddiv>
 8017076:	9a06      	ldr	r2, [sp, #24]
 8017078:	9b07      	ldr	r3, [sp, #28]
 801707a:	f7eb f9cb 	bl	8002414 <__aeabi_dsub>
 801707e:	9b05      	ldr	r3, [sp, #20]
 8017080:	900a      	str	r0, [sp, #40]	; 0x28
 8017082:	910b      	str	r1, [sp, #44]	; 0x2c
 8017084:	9315      	str	r3, [sp, #84]	; 0x54
 8017086:	18f3      	adds	r3, r6, r3
 8017088:	9319      	str	r3, [sp, #100]	; 0x64
 801708a:	0020      	movs	r0, r4
 801708c:	0029      	movs	r1, r5
 801708e:	f7eb fd71 	bl	8002b74 <__aeabi_d2iz>
 8017092:	9017      	str	r0, [sp, #92]	; 0x5c
 8017094:	f7eb fda4 	bl	8002be0 <__aeabi_i2d>
 8017098:	0002      	movs	r2, r0
 801709a:	000b      	movs	r3, r1
 801709c:	0020      	movs	r0, r4
 801709e:	0029      	movs	r1, r5
 80170a0:	f7eb f9b8 	bl	8002414 <__aeabi_dsub>
 80170a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80170a6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80170a8:	3301      	adds	r3, #1
 80170aa:	9306      	str	r3, [sp, #24]
 80170ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80170ae:	3430      	adds	r4, #48	; 0x30
 80170b0:	701c      	strb	r4, [r3, #0]
 80170b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170b6:	0006      	movs	r6, r0
 80170b8:	000f      	movs	r7, r1
 80170ba:	f7e9 f9d5 	bl	8000468 <__aeabi_dcmplt>
 80170be:	2800      	cmp	r0, #0
 80170c0:	d16c      	bne.n	801719c <_dtoa_r+0x624>
 80170c2:	0032      	movs	r2, r6
 80170c4:	003b      	movs	r3, r7
 80170c6:	2000      	movs	r0, #0
 80170c8:	4964      	ldr	r1, [pc, #400]	; (801725c <_dtoa_r+0x6e4>)
 80170ca:	f7eb f9a3 	bl	8002414 <__aeabi_dsub>
 80170ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170d2:	f7e9 f9c9 	bl	8000468 <__aeabi_dcmplt>
 80170d6:	2800      	cmp	r0, #0
 80170d8:	d000      	beq.n	80170dc <_dtoa_r+0x564>
 80170da:	e0cf      	b.n	801727c <_dtoa_r+0x704>
 80170dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80170de:	9a06      	ldr	r2, [sp, #24]
 80170e0:	4293      	cmp	r3, r2
 80170e2:	d100      	bne.n	80170e6 <_dtoa_r+0x56e>
 80170e4:	e777      	b.n	8016fd6 <_dtoa_r+0x45e>
 80170e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80170e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170ea:	2200      	movs	r2, #0
 80170ec:	4b5c      	ldr	r3, [pc, #368]	; (8017260 <_dtoa_r+0x6e8>)
 80170ee:	f7ea ff25 	bl	8001f3c <__aeabi_dmul>
 80170f2:	4b5b      	ldr	r3, [pc, #364]	; (8017260 <_dtoa_r+0x6e8>)
 80170f4:	900a      	str	r0, [sp, #40]	; 0x28
 80170f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80170f8:	2200      	movs	r2, #0
 80170fa:	0030      	movs	r0, r6
 80170fc:	0039      	movs	r1, r7
 80170fe:	f7ea ff1d 	bl	8001f3c <__aeabi_dmul>
 8017102:	9b06      	ldr	r3, [sp, #24]
 8017104:	0004      	movs	r4, r0
 8017106:	000d      	movs	r5, r1
 8017108:	9315      	str	r3, [sp, #84]	; 0x54
 801710a:	e7be      	b.n	801708a <_dtoa_r+0x512>
 801710c:	9806      	ldr	r0, [sp, #24]
 801710e:	9907      	ldr	r1, [sp, #28]
 8017110:	f7ea ff14 	bl	8001f3c <__aeabi_dmul>
 8017114:	9f05      	ldr	r7, [sp, #20]
 8017116:	900a      	str	r0, [sp, #40]	; 0x28
 8017118:	910b      	str	r1, [sp, #44]	; 0x2c
 801711a:	19bb      	adds	r3, r7, r6
 801711c:	9315      	str	r3, [sp, #84]	; 0x54
 801711e:	0029      	movs	r1, r5
 8017120:	0020      	movs	r0, r4
 8017122:	f7eb fd27 	bl	8002b74 <__aeabi_d2iz>
 8017126:	9006      	str	r0, [sp, #24]
 8017128:	f7eb fd5a 	bl	8002be0 <__aeabi_i2d>
 801712c:	000b      	movs	r3, r1
 801712e:	0002      	movs	r2, r0
 8017130:	0029      	movs	r1, r5
 8017132:	0020      	movs	r0, r4
 8017134:	f7eb f96e 	bl	8002414 <__aeabi_dsub>
 8017138:	9b06      	ldr	r3, [sp, #24]
 801713a:	0004      	movs	r4, r0
 801713c:	3330      	adds	r3, #48	; 0x30
 801713e:	703b      	strb	r3, [r7, #0]
 8017140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017142:	3701      	adds	r7, #1
 8017144:	000d      	movs	r5, r1
 8017146:	429f      	cmp	r7, r3
 8017148:	d12b      	bne.n	80171a2 <_dtoa_r+0x62a>
 801714a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801714c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801714e:	9b05      	ldr	r3, [sp, #20]
 8017150:	2200      	movs	r2, #0
 8017152:	199b      	adds	r3, r3, r6
 8017154:	9306      	str	r3, [sp, #24]
 8017156:	4b47      	ldr	r3, [pc, #284]	; (8017274 <_dtoa_r+0x6fc>)
 8017158:	f7e9 ff80 	bl	800105c <__aeabi_dadd>
 801715c:	0002      	movs	r2, r0
 801715e:	000b      	movs	r3, r1
 8017160:	0020      	movs	r0, r4
 8017162:	0029      	movs	r1, r5
 8017164:	f7e9 f994 	bl	8000490 <__aeabi_dcmpgt>
 8017168:	2800      	cmp	r0, #0
 801716a:	d000      	beq.n	801716e <_dtoa_r+0x5f6>
 801716c:	e086      	b.n	801727c <_dtoa_r+0x704>
 801716e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017172:	2000      	movs	r0, #0
 8017174:	493f      	ldr	r1, [pc, #252]	; (8017274 <_dtoa_r+0x6fc>)
 8017176:	f7eb f94d 	bl	8002414 <__aeabi_dsub>
 801717a:	0002      	movs	r2, r0
 801717c:	000b      	movs	r3, r1
 801717e:	0020      	movs	r0, r4
 8017180:	0029      	movs	r1, r5
 8017182:	f7e9 f971 	bl	8000468 <__aeabi_dcmplt>
 8017186:	2800      	cmp	r0, #0
 8017188:	d100      	bne.n	801718c <_dtoa_r+0x614>
 801718a:	e724      	b.n	8016fd6 <_dtoa_r+0x45e>
 801718c:	9b06      	ldr	r3, [sp, #24]
 801718e:	001a      	movs	r2, r3
 8017190:	3a01      	subs	r2, #1
 8017192:	9206      	str	r2, [sp, #24]
 8017194:	7812      	ldrb	r2, [r2, #0]
 8017196:	2a30      	cmp	r2, #48	; 0x30
 8017198:	d0f8      	beq.n	801718c <_dtoa_r+0x614>
 801719a:	9306      	str	r3, [sp, #24]
 801719c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801719e:	9302      	str	r3, [sp, #8]
 80171a0:	e046      	b.n	8017230 <_dtoa_r+0x6b8>
 80171a2:	2200      	movs	r2, #0
 80171a4:	4b2e      	ldr	r3, [pc, #184]	; (8017260 <_dtoa_r+0x6e8>)
 80171a6:	f7ea fec9 	bl	8001f3c <__aeabi_dmul>
 80171aa:	0004      	movs	r4, r0
 80171ac:	000d      	movs	r5, r1
 80171ae:	e7b6      	b.n	801711e <_dtoa_r+0x5a6>
 80171b0:	9b05      	ldr	r3, [sp, #20]
 80171b2:	9a05      	ldr	r2, [sp, #20]
 80171b4:	9309      	str	r3, [sp, #36]	; 0x24
 80171b6:	9b08      	ldr	r3, [sp, #32]
 80171b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80171ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80171bc:	3b01      	subs	r3, #1
 80171be:	189b      	adds	r3, r3, r2
 80171c0:	930a      	str	r3, [sp, #40]	; 0x28
 80171c2:	0032      	movs	r2, r6
 80171c4:	003b      	movs	r3, r7
 80171c6:	0020      	movs	r0, r4
 80171c8:	0029      	movs	r1, r5
 80171ca:	f7ea fab1 	bl	8001730 <__aeabi_ddiv>
 80171ce:	f7eb fcd1 	bl	8002b74 <__aeabi_d2iz>
 80171d2:	9008      	str	r0, [sp, #32]
 80171d4:	f7eb fd04 	bl	8002be0 <__aeabi_i2d>
 80171d8:	0032      	movs	r2, r6
 80171da:	003b      	movs	r3, r7
 80171dc:	f7ea feae 	bl	8001f3c <__aeabi_dmul>
 80171e0:	0002      	movs	r2, r0
 80171e2:	000b      	movs	r3, r1
 80171e4:	0020      	movs	r0, r4
 80171e6:	0029      	movs	r1, r5
 80171e8:	f7eb f914 	bl	8002414 <__aeabi_dsub>
 80171ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171ee:	001a      	movs	r2, r3
 80171f0:	3201      	adds	r2, #1
 80171f2:	9209      	str	r2, [sp, #36]	; 0x24
 80171f4:	9206      	str	r2, [sp, #24]
 80171f6:	9a08      	ldr	r2, [sp, #32]
 80171f8:	3230      	adds	r2, #48	; 0x30
 80171fa:	701a      	strb	r2, [r3, #0]
 80171fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80171fe:	429a      	cmp	r2, r3
 8017200:	d14f      	bne.n	80172a2 <_dtoa_r+0x72a>
 8017202:	0002      	movs	r2, r0
 8017204:	000b      	movs	r3, r1
 8017206:	f7e9 ff29 	bl	800105c <__aeabi_dadd>
 801720a:	0032      	movs	r2, r6
 801720c:	003b      	movs	r3, r7
 801720e:	0004      	movs	r4, r0
 8017210:	000d      	movs	r5, r1
 8017212:	f7e9 f93d 	bl	8000490 <__aeabi_dcmpgt>
 8017216:	2800      	cmp	r0, #0
 8017218:	d12e      	bne.n	8017278 <_dtoa_r+0x700>
 801721a:	0032      	movs	r2, r6
 801721c:	003b      	movs	r3, r7
 801721e:	0020      	movs	r0, r4
 8017220:	0029      	movs	r1, r5
 8017222:	f7e9 f91b 	bl	800045c <__aeabi_dcmpeq>
 8017226:	2800      	cmp	r0, #0
 8017228:	d002      	beq.n	8017230 <_dtoa_r+0x6b8>
 801722a:	9b08      	ldr	r3, [sp, #32]
 801722c:	07db      	lsls	r3, r3, #31
 801722e:	d423      	bmi.n	8017278 <_dtoa_r+0x700>
 8017230:	9803      	ldr	r0, [sp, #12]
 8017232:	9904      	ldr	r1, [sp, #16]
 8017234:	f000 ff80 	bl	8018138 <_Bfree>
 8017238:	2300      	movs	r3, #0
 801723a:	9a06      	ldr	r2, [sp, #24]
 801723c:	9802      	ldr	r0, [sp, #8]
 801723e:	7013      	strb	r3, [r2, #0]
 8017240:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017242:	3001      	adds	r0, #1
 8017244:	6018      	str	r0, [r3, #0]
 8017246:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017248:	2b00      	cmp	r3, #0
 801724a:	d100      	bne.n	801724e <_dtoa_r+0x6d6>
 801724c:	e4c8      	b.n	8016be0 <_dtoa_r+0x68>
 801724e:	601a      	str	r2, [r3, #0]
 8017250:	e4c6      	b.n	8016be0 <_dtoa_r+0x68>
 8017252:	46c0      	nop			; (mov r8, r8)
 8017254:	0801dc38 	.word	0x0801dc38
 8017258:	0801dc10 	.word	0x0801dc10
 801725c:	3ff00000 	.word	0x3ff00000
 8017260:	40240000 	.word	0x40240000
 8017264:	401c0000 	.word	0x401c0000
 8017268:	fcc00000 	.word	0xfcc00000
 801726c:	40140000 	.word	0x40140000
 8017270:	7cc00000 	.word	0x7cc00000
 8017274:	3fe00000 	.word	0x3fe00000
 8017278:	9b02      	ldr	r3, [sp, #8]
 801727a:	930f      	str	r3, [sp, #60]	; 0x3c
 801727c:	9b06      	ldr	r3, [sp, #24]
 801727e:	9306      	str	r3, [sp, #24]
 8017280:	3b01      	subs	r3, #1
 8017282:	781a      	ldrb	r2, [r3, #0]
 8017284:	2a39      	cmp	r2, #57	; 0x39
 8017286:	d108      	bne.n	801729a <_dtoa_r+0x722>
 8017288:	9a05      	ldr	r2, [sp, #20]
 801728a:	429a      	cmp	r2, r3
 801728c:	d1f7      	bne.n	801727e <_dtoa_r+0x706>
 801728e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017290:	9905      	ldr	r1, [sp, #20]
 8017292:	3201      	adds	r2, #1
 8017294:	920f      	str	r2, [sp, #60]	; 0x3c
 8017296:	2230      	movs	r2, #48	; 0x30
 8017298:	700a      	strb	r2, [r1, #0]
 801729a:	781a      	ldrb	r2, [r3, #0]
 801729c:	3201      	adds	r2, #1
 801729e:	701a      	strb	r2, [r3, #0]
 80172a0:	e77c      	b.n	801719c <_dtoa_r+0x624>
 80172a2:	2200      	movs	r2, #0
 80172a4:	4baa      	ldr	r3, [pc, #680]	; (8017550 <_dtoa_r+0x9d8>)
 80172a6:	f7ea fe49 	bl	8001f3c <__aeabi_dmul>
 80172aa:	2200      	movs	r2, #0
 80172ac:	2300      	movs	r3, #0
 80172ae:	0004      	movs	r4, r0
 80172b0:	000d      	movs	r5, r1
 80172b2:	f7e9 f8d3 	bl	800045c <__aeabi_dcmpeq>
 80172b6:	2800      	cmp	r0, #0
 80172b8:	d083      	beq.n	80171c2 <_dtoa_r+0x64a>
 80172ba:	e7b9      	b.n	8017230 <_dtoa_r+0x6b8>
 80172bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80172be:	2a00      	cmp	r2, #0
 80172c0:	d100      	bne.n	80172c4 <_dtoa_r+0x74c>
 80172c2:	e08a      	b.n	80173da <_dtoa_r+0x862>
 80172c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80172c6:	2a01      	cmp	r2, #1
 80172c8:	dc6e      	bgt.n	80173a8 <_dtoa_r+0x830>
 80172ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80172cc:	2a00      	cmp	r2, #0
 80172ce:	d067      	beq.n	80173a0 <_dtoa_r+0x828>
 80172d0:	4aa0      	ldr	r2, [pc, #640]	; (8017554 <_dtoa_r+0x9dc>)
 80172d2:	189b      	adds	r3, r3, r2
 80172d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80172d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80172d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172da:	2101      	movs	r1, #1
 80172dc:	18d2      	adds	r2, r2, r3
 80172de:	9209      	str	r2, [sp, #36]	; 0x24
 80172e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80172e2:	9803      	ldr	r0, [sp, #12]
 80172e4:	18d3      	adds	r3, r2, r3
 80172e6:	930d      	str	r3, [sp, #52]	; 0x34
 80172e8:	f001 f808 	bl	80182fc <__i2b>
 80172ec:	0007      	movs	r7, r0
 80172ee:	2c00      	cmp	r4, #0
 80172f0:	dd0e      	ble.n	8017310 <_dtoa_r+0x798>
 80172f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	dd0b      	ble.n	8017310 <_dtoa_r+0x798>
 80172f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80172fa:	0023      	movs	r3, r4
 80172fc:	4294      	cmp	r4, r2
 80172fe:	dd00      	ble.n	8017302 <_dtoa_r+0x78a>
 8017300:	0013      	movs	r3, r2
 8017302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017304:	1ae4      	subs	r4, r4, r3
 8017306:	1ad2      	subs	r2, r2, r3
 8017308:	9209      	str	r2, [sp, #36]	; 0x24
 801730a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801730c:	1ad3      	subs	r3, r2, r3
 801730e:	930d      	str	r3, [sp, #52]	; 0x34
 8017310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017312:	2b00      	cmp	r3, #0
 8017314:	d01e      	beq.n	8017354 <_dtoa_r+0x7dc>
 8017316:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017318:	2b00      	cmp	r3, #0
 801731a:	d062      	beq.n	80173e2 <_dtoa_r+0x86a>
 801731c:	2d00      	cmp	r5, #0
 801731e:	dd10      	ble.n	8017342 <_dtoa_r+0x7ca>
 8017320:	0039      	movs	r1, r7
 8017322:	002a      	movs	r2, r5
 8017324:	9803      	ldr	r0, [sp, #12]
 8017326:	f001 f8af 	bl	8018488 <__pow5mult>
 801732a:	9a04      	ldr	r2, [sp, #16]
 801732c:	0001      	movs	r1, r0
 801732e:	0007      	movs	r7, r0
 8017330:	9803      	ldr	r0, [sp, #12]
 8017332:	f000 fff9 	bl	8018328 <__multiply>
 8017336:	0006      	movs	r6, r0
 8017338:	9904      	ldr	r1, [sp, #16]
 801733a:	9803      	ldr	r0, [sp, #12]
 801733c:	f000 fefc 	bl	8018138 <_Bfree>
 8017340:	9604      	str	r6, [sp, #16]
 8017342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017344:	1b5a      	subs	r2, r3, r5
 8017346:	42ab      	cmp	r3, r5
 8017348:	d004      	beq.n	8017354 <_dtoa_r+0x7dc>
 801734a:	9904      	ldr	r1, [sp, #16]
 801734c:	9803      	ldr	r0, [sp, #12]
 801734e:	f001 f89b 	bl	8018488 <__pow5mult>
 8017352:	9004      	str	r0, [sp, #16]
 8017354:	2101      	movs	r1, #1
 8017356:	9803      	ldr	r0, [sp, #12]
 8017358:	f000 ffd0 	bl	80182fc <__i2b>
 801735c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801735e:	0006      	movs	r6, r0
 8017360:	2b00      	cmp	r3, #0
 8017362:	dd40      	ble.n	80173e6 <_dtoa_r+0x86e>
 8017364:	001a      	movs	r2, r3
 8017366:	0001      	movs	r1, r0
 8017368:	9803      	ldr	r0, [sp, #12]
 801736a:	f001 f88d 	bl	8018488 <__pow5mult>
 801736e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017370:	0006      	movs	r6, r0
 8017372:	2500      	movs	r5, #0
 8017374:	2b01      	cmp	r3, #1
 8017376:	dc3e      	bgt.n	80173f6 <_dtoa_r+0x87e>
 8017378:	2500      	movs	r5, #0
 801737a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801737c:	42ab      	cmp	r3, r5
 801737e:	d136      	bne.n	80173ee <_dtoa_r+0x876>
 8017380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017382:	031b      	lsls	r3, r3, #12
 8017384:	42ab      	cmp	r3, r5
 8017386:	d132      	bne.n	80173ee <_dtoa_r+0x876>
 8017388:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801738a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801738c:	4213      	tst	r3, r2
 801738e:	d02e      	beq.n	80173ee <_dtoa_r+0x876>
 8017390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017392:	3501      	adds	r5, #1
 8017394:	3301      	adds	r3, #1
 8017396:	9309      	str	r3, [sp, #36]	; 0x24
 8017398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801739a:	3301      	adds	r3, #1
 801739c:	930d      	str	r3, [sp, #52]	; 0x34
 801739e:	e026      	b.n	80173ee <_dtoa_r+0x876>
 80173a0:	2336      	movs	r3, #54	; 0x36
 80173a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80173a4:	1a9b      	subs	r3, r3, r2
 80173a6:	e795      	b.n	80172d4 <_dtoa_r+0x75c>
 80173a8:	9b08      	ldr	r3, [sp, #32]
 80173aa:	1e5d      	subs	r5, r3, #1
 80173ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173ae:	42ab      	cmp	r3, r5
 80173b0:	db08      	blt.n	80173c4 <_dtoa_r+0x84c>
 80173b2:	1b5d      	subs	r5, r3, r5
 80173b4:	9b08      	ldr	r3, [sp, #32]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	da0c      	bge.n	80173d4 <_dtoa_r+0x85c>
 80173ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173bc:	9a08      	ldr	r2, [sp, #32]
 80173be:	1a9c      	subs	r4, r3, r2
 80173c0:	2300      	movs	r3, #0
 80173c2:	e789      	b.n	80172d8 <_dtoa_r+0x760>
 80173c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80173c8:	1aeb      	subs	r3, r5, r3
 80173ca:	18d3      	adds	r3, r2, r3
 80173cc:	950e      	str	r5, [sp, #56]	; 0x38
 80173ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80173d0:	2500      	movs	r5, #0
 80173d2:	e7ef      	b.n	80173b4 <_dtoa_r+0x83c>
 80173d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80173d6:	9b08      	ldr	r3, [sp, #32]
 80173d8:	e77e      	b.n	80172d8 <_dtoa_r+0x760>
 80173da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80173dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80173de:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80173e0:	e785      	b.n	80172ee <_dtoa_r+0x776>
 80173e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80173e4:	e7b1      	b.n	801734a <_dtoa_r+0x7d2>
 80173e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80173e8:	2500      	movs	r5, #0
 80173ea:	2b01      	cmp	r3, #1
 80173ec:	ddc4      	ble.n	8017378 <_dtoa_r+0x800>
 80173ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80173f0:	2001      	movs	r0, #1
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d008      	beq.n	8017408 <_dtoa_r+0x890>
 80173f6:	6933      	ldr	r3, [r6, #16]
 80173f8:	3303      	adds	r3, #3
 80173fa:	009b      	lsls	r3, r3, #2
 80173fc:	18f3      	adds	r3, r6, r3
 80173fe:	6858      	ldr	r0, [r3, #4]
 8017400:	f000 ff34 	bl	801826c <__hi0bits>
 8017404:	2320      	movs	r3, #32
 8017406:	1a18      	subs	r0, r3, r0
 8017408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801740a:	221f      	movs	r2, #31
 801740c:	1818      	adds	r0, r3, r0
 801740e:	0003      	movs	r3, r0
 8017410:	4013      	ands	r3, r2
 8017412:	4210      	tst	r0, r2
 8017414:	d046      	beq.n	80174a4 <_dtoa_r+0x92c>
 8017416:	3201      	adds	r2, #1
 8017418:	1ad2      	subs	r2, r2, r3
 801741a:	2a04      	cmp	r2, #4
 801741c:	dd3f      	ble.n	801749e <_dtoa_r+0x926>
 801741e:	221c      	movs	r2, #28
 8017420:	1ad3      	subs	r3, r2, r3
 8017422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017424:	18e4      	adds	r4, r4, r3
 8017426:	18d2      	adds	r2, r2, r3
 8017428:	9209      	str	r2, [sp, #36]	; 0x24
 801742a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801742c:	18d3      	adds	r3, r2, r3
 801742e:	930d      	str	r3, [sp, #52]	; 0x34
 8017430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017432:	2b00      	cmp	r3, #0
 8017434:	dd05      	ble.n	8017442 <_dtoa_r+0x8ca>
 8017436:	001a      	movs	r2, r3
 8017438:	9904      	ldr	r1, [sp, #16]
 801743a:	9803      	ldr	r0, [sp, #12]
 801743c:	f001 f866 	bl	801850c <__lshift>
 8017440:	9004      	str	r0, [sp, #16]
 8017442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017444:	2b00      	cmp	r3, #0
 8017446:	dd05      	ble.n	8017454 <_dtoa_r+0x8dc>
 8017448:	0031      	movs	r1, r6
 801744a:	001a      	movs	r2, r3
 801744c:	9803      	ldr	r0, [sp, #12]
 801744e:	f001 f85d 	bl	801850c <__lshift>
 8017452:	0006      	movs	r6, r0
 8017454:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017456:	2b00      	cmp	r3, #0
 8017458:	d026      	beq.n	80174a8 <_dtoa_r+0x930>
 801745a:	0031      	movs	r1, r6
 801745c:	9804      	ldr	r0, [sp, #16]
 801745e:	f001 f8c5 	bl	80185ec <__mcmp>
 8017462:	2800      	cmp	r0, #0
 8017464:	da20      	bge.n	80174a8 <_dtoa_r+0x930>
 8017466:	9b02      	ldr	r3, [sp, #8]
 8017468:	220a      	movs	r2, #10
 801746a:	3b01      	subs	r3, #1
 801746c:	9302      	str	r3, [sp, #8]
 801746e:	9904      	ldr	r1, [sp, #16]
 8017470:	2300      	movs	r3, #0
 8017472:	9803      	ldr	r0, [sp, #12]
 8017474:	f000 fe6a 	bl	801814c <__multadd>
 8017478:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801747a:	9004      	str	r0, [sp, #16]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d100      	bne.n	8017482 <_dtoa_r+0x90a>
 8017480:	e154      	b.n	801772c <_dtoa_r+0xbb4>
 8017482:	2300      	movs	r3, #0
 8017484:	0039      	movs	r1, r7
 8017486:	220a      	movs	r2, #10
 8017488:	9803      	ldr	r0, [sp, #12]
 801748a:	f000 fe5f 	bl	801814c <__multadd>
 801748e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017490:	0007      	movs	r7, r0
 8017492:	2b00      	cmp	r3, #0
 8017494:	dc47      	bgt.n	8017526 <_dtoa_r+0x9ae>
 8017496:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017498:	2b02      	cmp	r3, #2
 801749a:	dc0d      	bgt.n	80174b8 <_dtoa_r+0x940>
 801749c:	e043      	b.n	8017526 <_dtoa_r+0x9ae>
 801749e:	2a04      	cmp	r2, #4
 80174a0:	d0c6      	beq.n	8017430 <_dtoa_r+0x8b8>
 80174a2:	0013      	movs	r3, r2
 80174a4:	331c      	adds	r3, #28
 80174a6:	e7bc      	b.n	8017422 <_dtoa_r+0x8aa>
 80174a8:	9b08      	ldr	r3, [sp, #32]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	dc35      	bgt.n	801751a <_dtoa_r+0x9a2>
 80174ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80174b0:	2b02      	cmp	r3, #2
 80174b2:	dd32      	ble.n	801751a <_dtoa_r+0x9a2>
 80174b4:	9b08      	ldr	r3, [sp, #32]
 80174b6:	930c      	str	r3, [sp, #48]	; 0x30
 80174b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d10c      	bne.n	80174d8 <_dtoa_r+0x960>
 80174be:	0031      	movs	r1, r6
 80174c0:	2205      	movs	r2, #5
 80174c2:	9803      	ldr	r0, [sp, #12]
 80174c4:	f000 fe42 	bl	801814c <__multadd>
 80174c8:	0006      	movs	r6, r0
 80174ca:	0001      	movs	r1, r0
 80174cc:	9804      	ldr	r0, [sp, #16]
 80174ce:	f001 f88d 	bl	80185ec <__mcmp>
 80174d2:	2800      	cmp	r0, #0
 80174d4:	dd00      	ble.n	80174d8 <_dtoa_r+0x960>
 80174d6:	e5a8      	b.n	801702a <_dtoa_r+0x4b2>
 80174d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80174da:	43db      	mvns	r3, r3
 80174dc:	9302      	str	r3, [sp, #8]
 80174de:	9b05      	ldr	r3, [sp, #20]
 80174e0:	9306      	str	r3, [sp, #24]
 80174e2:	2500      	movs	r5, #0
 80174e4:	0031      	movs	r1, r6
 80174e6:	9803      	ldr	r0, [sp, #12]
 80174e8:	f000 fe26 	bl	8018138 <_Bfree>
 80174ec:	2f00      	cmp	r7, #0
 80174ee:	d100      	bne.n	80174f2 <_dtoa_r+0x97a>
 80174f0:	e69e      	b.n	8017230 <_dtoa_r+0x6b8>
 80174f2:	2d00      	cmp	r5, #0
 80174f4:	d005      	beq.n	8017502 <_dtoa_r+0x98a>
 80174f6:	42bd      	cmp	r5, r7
 80174f8:	d003      	beq.n	8017502 <_dtoa_r+0x98a>
 80174fa:	0029      	movs	r1, r5
 80174fc:	9803      	ldr	r0, [sp, #12]
 80174fe:	f000 fe1b 	bl	8018138 <_Bfree>
 8017502:	0039      	movs	r1, r7
 8017504:	9803      	ldr	r0, [sp, #12]
 8017506:	f000 fe17 	bl	8018138 <_Bfree>
 801750a:	e691      	b.n	8017230 <_dtoa_r+0x6b8>
 801750c:	2600      	movs	r6, #0
 801750e:	0037      	movs	r7, r6
 8017510:	e7e2      	b.n	80174d8 <_dtoa_r+0x960>
 8017512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017514:	0037      	movs	r7, r6
 8017516:	9302      	str	r3, [sp, #8]
 8017518:	e587      	b.n	801702a <_dtoa_r+0x4b2>
 801751a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801751c:	2b00      	cmp	r3, #0
 801751e:	d100      	bne.n	8017522 <_dtoa_r+0x9aa>
 8017520:	e0bc      	b.n	801769c <_dtoa_r+0xb24>
 8017522:	9b08      	ldr	r3, [sp, #32]
 8017524:	930c      	str	r3, [sp, #48]	; 0x30
 8017526:	2c00      	cmp	r4, #0
 8017528:	dd05      	ble.n	8017536 <_dtoa_r+0x9be>
 801752a:	0039      	movs	r1, r7
 801752c:	0022      	movs	r2, r4
 801752e:	9803      	ldr	r0, [sp, #12]
 8017530:	f000 ffec 	bl	801850c <__lshift>
 8017534:	0007      	movs	r7, r0
 8017536:	0038      	movs	r0, r7
 8017538:	2d00      	cmp	r5, #0
 801753a:	d01e      	beq.n	801757a <_dtoa_r+0xa02>
 801753c:	6879      	ldr	r1, [r7, #4]
 801753e:	9803      	ldr	r0, [sp, #12]
 8017540:	f000 fdd2 	bl	80180e8 <_Balloc>
 8017544:	1e04      	subs	r4, r0, #0
 8017546:	d10b      	bne.n	8017560 <_dtoa_r+0x9e8>
 8017548:	0002      	movs	r2, r0
 801754a:	4b03      	ldr	r3, [pc, #12]	; (8017558 <_dtoa_r+0x9e0>)
 801754c:	4903      	ldr	r1, [pc, #12]	; (801755c <_dtoa_r+0x9e4>)
 801754e:	e444      	b.n	8016dda <_dtoa_r+0x262>
 8017550:	40240000 	.word	0x40240000
 8017554:	00000433 	.word	0x00000433
 8017558:	0801dac1 	.word	0x0801dac1
 801755c:	000002ea 	.word	0x000002ea
 8017560:	0039      	movs	r1, r7
 8017562:	693b      	ldr	r3, [r7, #16]
 8017564:	310c      	adds	r1, #12
 8017566:	1c9a      	adds	r2, r3, #2
 8017568:	0092      	lsls	r2, r2, #2
 801756a:	300c      	adds	r0, #12
 801756c:	f7fc fe50 	bl	8014210 <memcpy>
 8017570:	2201      	movs	r2, #1
 8017572:	0021      	movs	r1, r4
 8017574:	9803      	ldr	r0, [sp, #12]
 8017576:	f000 ffc9 	bl	801850c <__lshift>
 801757a:	003d      	movs	r5, r7
 801757c:	0007      	movs	r7, r0
 801757e:	9b05      	ldr	r3, [sp, #20]
 8017580:	9308      	str	r3, [sp, #32]
 8017582:	0031      	movs	r1, r6
 8017584:	9804      	ldr	r0, [sp, #16]
 8017586:	f7ff fa6b 	bl	8016a60 <quorem>
 801758a:	0029      	movs	r1, r5
 801758c:	0004      	movs	r4, r0
 801758e:	900d      	str	r0, [sp, #52]	; 0x34
 8017590:	9804      	ldr	r0, [sp, #16]
 8017592:	f001 f82b 	bl	80185ec <__mcmp>
 8017596:	003a      	movs	r2, r7
 8017598:	900e      	str	r0, [sp, #56]	; 0x38
 801759a:	0031      	movs	r1, r6
 801759c:	9803      	ldr	r0, [sp, #12]
 801759e:	f001 f841 	bl	8018624 <__mdiff>
 80175a2:	68c3      	ldr	r3, [r0, #12]
 80175a4:	3430      	adds	r4, #48	; 0x30
 80175a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80175a8:	2301      	movs	r3, #1
 80175aa:	9309      	str	r3, [sp, #36]	; 0x24
 80175ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175ae:	9006      	str	r0, [sp, #24]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d104      	bne.n	80175be <_dtoa_r+0xa46>
 80175b4:	0001      	movs	r1, r0
 80175b6:	9804      	ldr	r0, [sp, #16]
 80175b8:	f001 f818 	bl	80185ec <__mcmp>
 80175bc:	9009      	str	r0, [sp, #36]	; 0x24
 80175be:	9803      	ldr	r0, [sp, #12]
 80175c0:	9906      	ldr	r1, [sp, #24]
 80175c2:	f000 fdb9 	bl	8018138 <_Bfree>
 80175c6:	2301      	movs	r3, #1
 80175c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80175ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80175cc:	4018      	ands	r0, r3
 80175ce:	9b08      	ldr	r3, [sp, #32]
 80175d0:	3301      	adds	r3, #1
 80175d2:	9306      	str	r3, [sp, #24]
 80175d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80175d6:	4313      	orrs	r3, r2
 80175d8:	4303      	orrs	r3, r0
 80175da:	d109      	bne.n	80175f0 <_dtoa_r+0xa78>
 80175dc:	2c39      	cmp	r4, #57	; 0x39
 80175de:	d021      	beq.n	8017624 <_dtoa_r+0xaac>
 80175e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	dd01      	ble.n	80175ea <_dtoa_r+0xa72>
 80175e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80175e8:	3431      	adds	r4, #49	; 0x31
 80175ea:	9b08      	ldr	r3, [sp, #32]
 80175ec:	701c      	strb	r4, [r3, #0]
 80175ee:	e779      	b.n	80174e4 <_dtoa_r+0x96c>
 80175f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	db03      	blt.n	80175fe <_dtoa_r+0xa86>
 80175f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80175f8:	4313      	orrs	r3, r2
 80175fa:	4303      	orrs	r3, r0
 80175fc:	d11e      	bne.n	801763c <_dtoa_r+0xac4>
 80175fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017600:	2b00      	cmp	r3, #0
 8017602:	ddf2      	ble.n	80175ea <_dtoa_r+0xa72>
 8017604:	9904      	ldr	r1, [sp, #16]
 8017606:	2201      	movs	r2, #1
 8017608:	9803      	ldr	r0, [sp, #12]
 801760a:	f000 ff7f 	bl	801850c <__lshift>
 801760e:	0031      	movs	r1, r6
 8017610:	9004      	str	r0, [sp, #16]
 8017612:	f000 ffeb 	bl	80185ec <__mcmp>
 8017616:	2800      	cmp	r0, #0
 8017618:	dc02      	bgt.n	8017620 <_dtoa_r+0xaa8>
 801761a:	d1e6      	bne.n	80175ea <_dtoa_r+0xa72>
 801761c:	07e3      	lsls	r3, r4, #31
 801761e:	d5e4      	bpl.n	80175ea <_dtoa_r+0xa72>
 8017620:	2c39      	cmp	r4, #57	; 0x39
 8017622:	d1e0      	bne.n	80175e6 <_dtoa_r+0xa6e>
 8017624:	2339      	movs	r3, #57	; 0x39
 8017626:	9a08      	ldr	r2, [sp, #32]
 8017628:	7013      	strb	r3, [r2, #0]
 801762a:	9b06      	ldr	r3, [sp, #24]
 801762c:	9306      	str	r3, [sp, #24]
 801762e:	3b01      	subs	r3, #1
 8017630:	781a      	ldrb	r2, [r3, #0]
 8017632:	2a39      	cmp	r2, #57	; 0x39
 8017634:	d067      	beq.n	8017706 <_dtoa_r+0xb8e>
 8017636:	3201      	adds	r2, #1
 8017638:	701a      	strb	r2, [r3, #0]
 801763a:	e753      	b.n	80174e4 <_dtoa_r+0x96c>
 801763c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801763e:	2b00      	cmp	r3, #0
 8017640:	dd03      	ble.n	801764a <_dtoa_r+0xad2>
 8017642:	2c39      	cmp	r4, #57	; 0x39
 8017644:	d0ee      	beq.n	8017624 <_dtoa_r+0xaac>
 8017646:	3401      	adds	r4, #1
 8017648:	e7cf      	b.n	80175ea <_dtoa_r+0xa72>
 801764a:	9b08      	ldr	r3, [sp, #32]
 801764c:	9a05      	ldr	r2, [sp, #20]
 801764e:	701c      	strb	r4, [r3, #0]
 8017650:	2301      	movs	r3, #1
 8017652:	1a9b      	subs	r3, r3, r2
 8017654:	9a08      	ldr	r2, [sp, #32]
 8017656:	189b      	adds	r3, r3, r2
 8017658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801765a:	429a      	cmp	r2, r3
 801765c:	d03e      	beq.n	80176dc <_dtoa_r+0xb64>
 801765e:	2300      	movs	r3, #0
 8017660:	220a      	movs	r2, #10
 8017662:	9904      	ldr	r1, [sp, #16]
 8017664:	9803      	ldr	r0, [sp, #12]
 8017666:	f000 fd71 	bl	801814c <__multadd>
 801766a:	2300      	movs	r3, #0
 801766c:	9004      	str	r0, [sp, #16]
 801766e:	220a      	movs	r2, #10
 8017670:	0029      	movs	r1, r5
 8017672:	9803      	ldr	r0, [sp, #12]
 8017674:	42bd      	cmp	r5, r7
 8017676:	d106      	bne.n	8017686 <_dtoa_r+0xb0e>
 8017678:	f000 fd68 	bl	801814c <__multadd>
 801767c:	0005      	movs	r5, r0
 801767e:	0007      	movs	r7, r0
 8017680:	9b06      	ldr	r3, [sp, #24]
 8017682:	9308      	str	r3, [sp, #32]
 8017684:	e77d      	b.n	8017582 <_dtoa_r+0xa0a>
 8017686:	f000 fd61 	bl	801814c <__multadd>
 801768a:	0039      	movs	r1, r7
 801768c:	0005      	movs	r5, r0
 801768e:	2300      	movs	r3, #0
 8017690:	220a      	movs	r2, #10
 8017692:	9803      	ldr	r0, [sp, #12]
 8017694:	f000 fd5a 	bl	801814c <__multadd>
 8017698:	0007      	movs	r7, r0
 801769a:	e7f1      	b.n	8017680 <_dtoa_r+0xb08>
 801769c:	9b08      	ldr	r3, [sp, #32]
 801769e:	930c      	str	r3, [sp, #48]	; 0x30
 80176a0:	2500      	movs	r5, #0
 80176a2:	0031      	movs	r1, r6
 80176a4:	9804      	ldr	r0, [sp, #16]
 80176a6:	f7ff f9db 	bl	8016a60 <quorem>
 80176aa:	9b05      	ldr	r3, [sp, #20]
 80176ac:	3030      	adds	r0, #48	; 0x30
 80176ae:	5558      	strb	r0, [r3, r5]
 80176b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176b2:	3501      	adds	r5, #1
 80176b4:	0004      	movs	r4, r0
 80176b6:	42ab      	cmp	r3, r5
 80176b8:	dd07      	ble.n	80176ca <_dtoa_r+0xb52>
 80176ba:	2300      	movs	r3, #0
 80176bc:	220a      	movs	r2, #10
 80176be:	9904      	ldr	r1, [sp, #16]
 80176c0:	9803      	ldr	r0, [sp, #12]
 80176c2:	f000 fd43 	bl	801814c <__multadd>
 80176c6:	9004      	str	r0, [sp, #16]
 80176c8:	e7eb      	b.n	80176a2 <_dtoa_r+0xb2a>
 80176ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176cc:	2001      	movs	r0, #1
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	dd00      	ble.n	80176d4 <_dtoa_r+0xb5c>
 80176d2:	0018      	movs	r0, r3
 80176d4:	2500      	movs	r5, #0
 80176d6:	9b05      	ldr	r3, [sp, #20]
 80176d8:	181b      	adds	r3, r3, r0
 80176da:	9306      	str	r3, [sp, #24]
 80176dc:	9904      	ldr	r1, [sp, #16]
 80176de:	2201      	movs	r2, #1
 80176e0:	9803      	ldr	r0, [sp, #12]
 80176e2:	f000 ff13 	bl	801850c <__lshift>
 80176e6:	0031      	movs	r1, r6
 80176e8:	9004      	str	r0, [sp, #16]
 80176ea:	f000 ff7f 	bl	80185ec <__mcmp>
 80176ee:	2800      	cmp	r0, #0
 80176f0:	dc9b      	bgt.n	801762a <_dtoa_r+0xab2>
 80176f2:	d101      	bne.n	80176f8 <_dtoa_r+0xb80>
 80176f4:	07e3      	lsls	r3, r4, #31
 80176f6:	d498      	bmi.n	801762a <_dtoa_r+0xab2>
 80176f8:	9b06      	ldr	r3, [sp, #24]
 80176fa:	9306      	str	r3, [sp, #24]
 80176fc:	3b01      	subs	r3, #1
 80176fe:	781a      	ldrb	r2, [r3, #0]
 8017700:	2a30      	cmp	r2, #48	; 0x30
 8017702:	d0fa      	beq.n	80176fa <_dtoa_r+0xb82>
 8017704:	e6ee      	b.n	80174e4 <_dtoa_r+0x96c>
 8017706:	9a05      	ldr	r2, [sp, #20]
 8017708:	429a      	cmp	r2, r3
 801770a:	d18f      	bne.n	801762c <_dtoa_r+0xab4>
 801770c:	9b02      	ldr	r3, [sp, #8]
 801770e:	3301      	adds	r3, #1
 8017710:	9302      	str	r3, [sp, #8]
 8017712:	2331      	movs	r3, #49	; 0x31
 8017714:	7013      	strb	r3, [r2, #0]
 8017716:	e6e5      	b.n	80174e4 <_dtoa_r+0x96c>
 8017718:	4b08      	ldr	r3, [pc, #32]	; (801773c <_dtoa_r+0xbc4>)
 801771a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801771c:	9305      	str	r3, [sp, #20]
 801771e:	4b08      	ldr	r3, [pc, #32]	; (8017740 <_dtoa_r+0xbc8>)
 8017720:	2a00      	cmp	r2, #0
 8017722:	d001      	beq.n	8017728 <_dtoa_r+0xbb0>
 8017724:	f7ff fa5a 	bl	8016bdc <_dtoa_r+0x64>
 8017728:	f7ff fa5a 	bl	8016be0 <_dtoa_r+0x68>
 801772c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801772e:	2b00      	cmp	r3, #0
 8017730:	dcb6      	bgt.n	80176a0 <_dtoa_r+0xb28>
 8017732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017734:	2b02      	cmp	r3, #2
 8017736:	dd00      	ble.n	801773a <_dtoa_r+0xbc2>
 8017738:	e6be      	b.n	80174b8 <_dtoa_r+0x940>
 801773a:	e7b1      	b.n	80176a0 <_dtoa_r+0xb28>
 801773c:	0801dab8 	.word	0x0801dab8
 8017740:	0801dac0 	.word	0x0801dac0

08017744 <__errno>:
 8017744:	4b01      	ldr	r3, [pc, #4]	; (801774c <__errno+0x8>)
 8017746:	6818      	ldr	r0, [r3, #0]
 8017748:	4770      	bx	lr
 801774a:	46c0      	nop			; (mov r8, r8)
 801774c:	200000a8 	.word	0x200000a8

08017750 <__libc_fini_array>:
 8017750:	b570      	push	{r4, r5, r6, lr}
 8017752:	4d07      	ldr	r5, [pc, #28]	; (8017770 <__libc_fini_array+0x20>)
 8017754:	4c07      	ldr	r4, [pc, #28]	; (8017774 <__libc_fini_array+0x24>)
 8017756:	1b64      	subs	r4, r4, r5
 8017758:	10a4      	asrs	r4, r4, #2
 801775a:	2c00      	cmp	r4, #0
 801775c:	d102      	bne.n	8017764 <__libc_fini_array+0x14>
 801775e:	f002 fe49 	bl	801a3f4 <_fini>
 8017762:	bd70      	pop	{r4, r5, r6, pc}
 8017764:	3c01      	subs	r4, #1
 8017766:	00a3      	lsls	r3, r4, #2
 8017768:	58eb      	ldr	r3, [r5, r3]
 801776a:	4798      	blx	r3
 801776c:	e7f5      	b.n	801775a <__libc_fini_array+0xa>
 801776e:	46c0      	nop			; (mov r8, r8)
 8017770:	0801dd78 	.word	0x0801dd78
 8017774:	0801dd7c 	.word	0x0801dd7c

08017778 <_malloc_trim_r>:
 8017778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801777a:	0004      	movs	r4, r0
 801777c:	2008      	movs	r0, #8
 801777e:	000d      	movs	r5, r1
 8017780:	f7ff f94e 	bl	8016a20 <sysconf>
 8017784:	0006      	movs	r6, r0
 8017786:	0020      	movs	r0, r4
 8017788:	f7fc fd54 	bl	8014234 <__malloc_lock>
 801778c:	2203      	movs	r2, #3
 801778e:	4f21      	ldr	r7, [pc, #132]	; (8017814 <_malloc_trim_r+0x9c>)
 8017790:	0031      	movs	r1, r6
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	685b      	ldr	r3, [r3, #4]
 8017796:	4393      	bics	r3, r2
 8017798:	1b58      	subs	r0, r3, r5
 801779a:	3811      	subs	r0, #17
 801779c:	1980      	adds	r0, r0, r6
 801779e:	9301      	str	r3, [sp, #4]
 80177a0:	f7e8 fcd6 	bl	8000150 <__udivsi3>
 80177a4:	1e45      	subs	r5, r0, #1
 80177a6:	4375      	muls	r5, r6
 80177a8:	42ae      	cmp	r6, r5
 80177aa:	dd04      	ble.n	80177b6 <_malloc_trim_r+0x3e>
 80177ac:	0020      	movs	r0, r4
 80177ae:	f7fc fd49 	bl	8014244 <__malloc_unlock>
 80177b2:	2000      	movs	r0, #0
 80177b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80177b6:	2100      	movs	r1, #0
 80177b8:	0020      	movs	r0, r4
 80177ba:	f7fc ff15 	bl	80145e8 <_sbrk_r>
 80177be:	68bb      	ldr	r3, [r7, #8]
 80177c0:	9a01      	ldr	r2, [sp, #4]
 80177c2:	189b      	adds	r3, r3, r2
 80177c4:	4298      	cmp	r0, r3
 80177c6:	d1f1      	bne.n	80177ac <_malloc_trim_r+0x34>
 80177c8:	0020      	movs	r0, r4
 80177ca:	4269      	negs	r1, r5
 80177cc:	f7fc ff0c 	bl	80145e8 <_sbrk_r>
 80177d0:	1c43      	adds	r3, r0, #1
 80177d2:	d110      	bne.n	80177f6 <_malloc_trim_r+0x7e>
 80177d4:	2100      	movs	r1, #0
 80177d6:	0020      	movs	r0, r4
 80177d8:	f7fc ff06 	bl	80145e8 <_sbrk_r>
 80177dc:	68ba      	ldr	r2, [r7, #8]
 80177de:	1a81      	subs	r1, r0, r2
 80177e0:	290f      	cmp	r1, #15
 80177e2:	dde3      	ble.n	80177ac <_malloc_trim_r+0x34>
 80177e4:	4b0c      	ldr	r3, [pc, #48]	; (8017818 <_malloc_trim_r+0xa0>)
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	1ac0      	subs	r0, r0, r3
 80177ea:	4b0c      	ldr	r3, [pc, #48]	; (801781c <_malloc_trim_r+0xa4>)
 80177ec:	6018      	str	r0, [r3, #0]
 80177ee:	2301      	movs	r3, #1
 80177f0:	430b      	orrs	r3, r1
 80177f2:	6053      	str	r3, [r2, #4]
 80177f4:	e7da      	b.n	80177ac <_malloc_trim_r+0x34>
 80177f6:	2601      	movs	r6, #1
 80177f8:	9b01      	ldr	r3, [sp, #4]
 80177fa:	68ba      	ldr	r2, [r7, #8]
 80177fc:	1b5b      	subs	r3, r3, r5
 80177fe:	4333      	orrs	r3, r6
 8017800:	6053      	str	r3, [r2, #4]
 8017802:	4b06      	ldr	r3, [pc, #24]	; (801781c <_malloc_trim_r+0xa4>)
 8017804:	0020      	movs	r0, r4
 8017806:	681a      	ldr	r2, [r3, #0]
 8017808:	1b55      	subs	r5, r2, r5
 801780a:	601d      	str	r5, [r3, #0]
 801780c:	f7fc fd1a 	bl	8014244 <__malloc_unlock>
 8017810:	0030      	movs	r0, r6
 8017812:	e7cf      	b.n	80177b4 <_malloc_trim_r+0x3c>
 8017814:	200004d8 	.word	0x200004d8
 8017818:	200008e0 	.word	0x200008e0
 801781c:	200069f4 	.word	0x200069f4

08017820 <_free_r>:
 8017820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017822:	1e0d      	subs	r5, r1, #0
 8017824:	9001      	str	r0, [sp, #4]
 8017826:	d02d      	beq.n	8017884 <_free_r+0x64>
 8017828:	f7fc fd04 	bl	8014234 <__malloc_lock>
 801782c:	2301      	movs	r3, #1
 801782e:	0029      	movs	r1, r5
 8017830:	469c      	mov	ip, r3
 8017832:	3908      	subs	r1, #8
 8017834:	684f      	ldr	r7, [r1, #4]
 8017836:	4662      	mov	r2, ip
 8017838:	003b      	movs	r3, r7
 801783a:	4666      	mov	r6, ip
 801783c:	4393      	bics	r3, r2
 801783e:	18c8      	adds	r0, r1, r3
 8017840:	6845      	ldr	r5, [r0, #4]
 8017842:	3202      	adds	r2, #2
 8017844:	4395      	bics	r5, r2
 8017846:	4a4a      	ldr	r2, [pc, #296]	; (8017970 <_free_r+0x150>)
 8017848:	4037      	ands	r7, r6
 801784a:	6896      	ldr	r6, [r2, #8]
 801784c:	4286      	cmp	r6, r0
 801784e:	d11a      	bne.n	8017886 <_free_r+0x66>
 8017850:	195b      	adds	r3, r3, r5
 8017852:	2f00      	cmp	r7, #0
 8017854:	d106      	bne.n	8017864 <_free_r+0x44>
 8017856:	6808      	ldr	r0, [r1, #0]
 8017858:	1a09      	subs	r1, r1, r0
 801785a:	688d      	ldr	r5, [r1, #8]
 801785c:	181b      	adds	r3, r3, r0
 801785e:	68c8      	ldr	r0, [r1, #12]
 8017860:	60e8      	str	r0, [r5, #12]
 8017862:	6085      	str	r5, [r0, #8]
 8017864:	2001      	movs	r0, #1
 8017866:	4318      	orrs	r0, r3
 8017868:	6048      	str	r0, [r1, #4]
 801786a:	6091      	str	r1, [r2, #8]
 801786c:	4a41      	ldr	r2, [pc, #260]	; (8017974 <_free_r+0x154>)
 801786e:	6812      	ldr	r2, [r2, #0]
 8017870:	429a      	cmp	r2, r3
 8017872:	d804      	bhi.n	801787e <_free_r+0x5e>
 8017874:	4b40      	ldr	r3, [pc, #256]	; (8017978 <_free_r+0x158>)
 8017876:	9801      	ldr	r0, [sp, #4]
 8017878:	6819      	ldr	r1, [r3, #0]
 801787a:	f7ff ff7d 	bl	8017778 <_malloc_trim_r>
 801787e:	9801      	ldr	r0, [sp, #4]
 8017880:	f7fc fce0 	bl	8014244 <__malloc_unlock>
 8017884:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017886:	2600      	movs	r6, #0
 8017888:	6045      	str	r5, [r0, #4]
 801788a:	42b7      	cmp	r7, r6
 801788c:	d109      	bne.n	80178a2 <_free_r+0x82>
 801788e:	680f      	ldr	r7, [r1, #0]
 8017890:	4c3a      	ldr	r4, [pc, #232]	; (801797c <_free_r+0x15c>)
 8017892:	1bc9      	subs	r1, r1, r7
 8017894:	19db      	adds	r3, r3, r7
 8017896:	688f      	ldr	r7, [r1, #8]
 8017898:	42a7      	cmp	r7, r4
 801789a:	d02c      	beq.n	80178f6 <_free_r+0xd6>
 801789c:	68cc      	ldr	r4, [r1, #12]
 801789e:	60fc      	str	r4, [r7, #12]
 80178a0:	60a7      	str	r7, [r4, #8]
 80178a2:	1947      	adds	r7, r0, r5
 80178a4:	687c      	ldr	r4, [r7, #4]
 80178a6:	2701      	movs	r7, #1
 80178a8:	423c      	tst	r4, r7
 80178aa:	d10b      	bne.n	80178c4 <_free_r+0xa4>
 80178ac:	195b      	adds	r3, r3, r5
 80178ae:	6885      	ldr	r5, [r0, #8]
 80178b0:	2e00      	cmp	r6, #0
 80178b2:	d122      	bne.n	80178fa <_free_r+0xda>
 80178b4:	4c31      	ldr	r4, [pc, #196]	; (801797c <_free_r+0x15c>)
 80178b6:	42a5      	cmp	r5, r4
 80178b8:	d11f      	bne.n	80178fa <_free_r+0xda>
 80178ba:	003e      	movs	r6, r7
 80178bc:	6151      	str	r1, [r2, #20]
 80178be:	6111      	str	r1, [r2, #16]
 80178c0:	60cd      	str	r5, [r1, #12]
 80178c2:	608d      	str	r5, [r1, #8]
 80178c4:	2501      	movs	r5, #1
 80178c6:	0028      	movs	r0, r5
 80178c8:	4318      	orrs	r0, r3
 80178ca:	6048      	str	r0, [r1, #4]
 80178cc:	50cb      	str	r3, [r1, r3]
 80178ce:	2e00      	cmp	r6, #0
 80178d0:	d1d5      	bne.n	801787e <_free_r+0x5e>
 80178d2:	2080      	movs	r0, #128	; 0x80
 80178d4:	0080      	lsls	r0, r0, #2
 80178d6:	4283      	cmp	r3, r0
 80178d8:	d213      	bcs.n	8017902 <_free_r+0xe2>
 80178da:	08d8      	lsrs	r0, r3, #3
 80178dc:	095b      	lsrs	r3, r3, #5
 80178de:	409d      	lsls	r5, r3
 80178e0:	6853      	ldr	r3, [r2, #4]
 80178e2:	00c0      	lsls	r0, r0, #3
 80178e4:	431d      	orrs	r5, r3
 80178e6:	6055      	str	r5, [r2, #4]
 80178e8:	1882      	adds	r2, r0, r2
 80178ea:	6893      	ldr	r3, [r2, #8]
 80178ec:	60ca      	str	r2, [r1, #12]
 80178ee:	608b      	str	r3, [r1, #8]
 80178f0:	6091      	str	r1, [r2, #8]
 80178f2:	60d9      	str	r1, [r3, #12]
 80178f4:	e7c3      	b.n	801787e <_free_r+0x5e>
 80178f6:	4666      	mov	r6, ip
 80178f8:	e7d3      	b.n	80178a2 <_free_r+0x82>
 80178fa:	68c0      	ldr	r0, [r0, #12]
 80178fc:	60e8      	str	r0, [r5, #12]
 80178fe:	6085      	str	r5, [r0, #8]
 8017900:	e7e0      	b.n	80178c4 <_free_r+0xa4>
 8017902:	0a5d      	lsrs	r5, r3, #9
 8017904:	2d04      	cmp	r5, #4
 8017906:	d812      	bhi.n	801792e <_free_r+0x10e>
 8017908:	0998      	lsrs	r0, r3, #6
 801790a:	3038      	adds	r0, #56	; 0x38
 801790c:	00c6      	lsls	r6, r0, #3
 801790e:	18b6      	adds	r6, r6, r2
 8017910:	68b5      	ldr	r5, [r6, #8]
 8017912:	2703      	movs	r7, #3
 8017914:	42ae      	cmp	r6, r5
 8017916:	d125      	bne.n	8017964 <_free_r+0x144>
 8017918:	2301      	movs	r3, #1
 801791a:	1080      	asrs	r0, r0, #2
 801791c:	4083      	lsls	r3, r0
 801791e:	6850      	ldr	r0, [r2, #4]
 8017920:	4303      	orrs	r3, r0
 8017922:	6053      	str	r3, [r2, #4]
 8017924:	60ce      	str	r6, [r1, #12]
 8017926:	608d      	str	r5, [r1, #8]
 8017928:	60b1      	str	r1, [r6, #8]
 801792a:	60e9      	str	r1, [r5, #12]
 801792c:	e7a7      	b.n	801787e <_free_r+0x5e>
 801792e:	2d14      	cmp	r5, #20
 8017930:	d802      	bhi.n	8017938 <_free_r+0x118>
 8017932:	0028      	movs	r0, r5
 8017934:	305b      	adds	r0, #91	; 0x5b
 8017936:	e7e9      	b.n	801790c <_free_r+0xec>
 8017938:	2d54      	cmp	r5, #84	; 0x54
 801793a:	d802      	bhi.n	8017942 <_free_r+0x122>
 801793c:	0b18      	lsrs	r0, r3, #12
 801793e:	306e      	adds	r0, #110	; 0x6e
 8017940:	e7e4      	b.n	801790c <_free_r+0xec>
 8017942:	20aa      	movs	r0, #170	; 0xaa
 8017944:	0040      	lsls	r0, r0, #1
 8017946:	4285      	cmp	r5, r0
 8017948:	d802      	bhi.n	8017950 <_free_r+0x130>
 801794a:	0bd8      	lsrs	r0, r3, #15
 801794c:	3077      	adds	r0, #119	; 0x77
 801794e:	e7dd      	b.n	801790c <_free_r+0xec>
 8017950:	4e0b      	ldr	r6, [pc, #44]	; (8017980 <_free_r+0x160>)
 8017952:	207e      	movs	r0, #126	; 0x7e
 8017954:	42b5      	cmp	r5, r6
 8017956:	d8d9      	bhi.n	801790c <_free_r+0xec>
 8017958:	0c98      	lsrs	r0, r3, #18
 801795a:	307c      	adds	r0, #124	; 0x7c
 801795c:	e7d6      	b.n	801790c <_free_r+0xec>
 801795e:	68ad      	ldr	r5, [r5, #8]
 8017960:	42ae      	cmp	r6, r5
 8017962:	d003      	beq.n	801796c <_free_r+0x14c>
 8017964:	686a      	ldr	r2, [r5, #4]
 8017966:	43ba      	bics	r2, r7
 8017968:	429a      	cmp	r2, r3
 801796a:	d8f8      	bhi.n	801795e <_free_r+0x13e>
 801796c:	68ee      	ldr	r6, [r5, #12]
 801796e:	e7d9      	b.n	8017924 <_free_r+0x104>
 8017970:	200004d8 	.word	0x200004d8
 8017974:	200008e4 	.word	0x200008e4
 8017978:	20006a24 	.word	0x20006a24
 801797c:	200004e0 	.word	0x200004e0
 8017980:	00000554 	.word	0x00000554

08017984 <rshift>:
 8017984:	0002      	movs	r2, r0
 8017986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017988:	6907      	ldr	r7, [r0, #16]
 801798a:	3214      	adds	r2, #20
 801798c:	0013      	movs	r3, r2
 801798e:	b085      	sub	sp, #20
 8017990:	114e      	asrs	r6, r1, #5
 8017992:	42b7      	cmp	r7, r6
 8017994:	dd31      	ble.n	80179fa <rshift+0x76>
 8017996:	00b3      	lsls	r3, r6, #2
 8017998:	18d3      	adds	r3, r2, r3
 801799a:	251f      	movs	r5, #31
 801799c:	9301      	str	r3, [sp, #4]
 801799e:	000b      	movs	r3, r1
 80179a0:	00bc      	lsls	r4, r7, #2
 80179a2:	402b      	ands	r3, r5
 80179a4:	1914      	adds	r4, r2, r4
 80179a6:	9302      	str	r3, [sp, #8]
 80179a8:	4229      	tst	r1, r5
 80179aa:	d10c      	bne.n	80179c6 <rshift+0x42>
 80179ac:	0015      	movs	r5, r2
 80179ae:	9901      	ldr	r1, [sp, #4]
 80179b0:	428c      	cmp	r4, r1
 80179b2:	d838      	bhi.n	8017a26 <rshift+0xa2>
 80179b4:	9901      	ldr	r1, [sp, #4]
 80179b6:	2300      	movs	r3, #0
 80179b8:	3903      	subs	r1, #3
 80179ba:	428c      	cmp	r4, r1
 80179bc:	d301      	bcc.n	80179c2 <rshift+0x3e>
 80179be:	1bbb      	subs	r3, r7, r6
 80179c0:	009b      	lsls	r3, r3, #2
 80179c2:	18d3      	adds	r3, r2, r3
 80179c4:	e019      	b.n	80179fa <rshift+0x76>
 80179c6:	2120      	movs	r1, #32
 80179c8:	9b02      	ldr	r3, [sp, #8]
 80179ca:	9d01      	ldr	r5, [sp, #4]
 80179cc:	1acb      	subs	r3, r1, r3
 80179ce:	9303      	str	r3, [sp, #12]
 80179d0:	cd02      	ldmia	r5!, {r1}
 80179d2:	9b02      	ldr	r3, [sp, #8]
 80179d4:	4694      	mov	ip, r2
 80179d6:	40d9      	lsrs	r1, r3
 80179d8:	9100      	str	r1, [sp, #0]
 80179da:	42ac      	cmp	r4, r5
 80179dc:	d816      	bhi.n	8017a0c <rshift+0x88>
 80179de:	9d01      	ldr	r5, [sp, #4]
 80179e0:	2300      	movs	r3, #0
 80179e2:	3501      	adds	r5, #1
 80179e4:	42ac      	cmp	r4, r5
 80179e6:	d302      	bcc.n	80179ee <rshift+0x6a>
 80179e8:	1bbb      	subs	r3, r7, r6
 80179ea:	009b      	lsls	r3, r3, #2
 80179ec:	3b04      	subs	r3, #4
 80179ee:	9900      	ldr	r1, [sp, #0]
 80179f0:	18d3      	adds	r3, r2, r3
 80179f2:	6019      	str	r1, [r3, #0]
 80179f4:	2900      	cmp	r1, #0
 80179f6:	d000      	beq.n	80179fa <rshift+0x76>
 80179f8:	3304      	adds	r3, #4
 80179fa:	1a99      	subs	r1, r3, r2
 80179fc:	1089      	asrs	r1, r1, #2
 80179fe:	6101      	str	r1, [r0, #16]
 8017a00:	4293      	cmp	r3, r2
 8017a02:	d101      	bne.n	8017a08 <rshift+0x84>
 8017a04:	2300      	movs	r3, #0
 8017a06:	6143      	str	r3, [r0, #20]
 8017a08:	b005      	add	sp, #20
 8017a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a0c:	682b      	ldr	r3, [r5, #0]
 8017a0e:	9903      	ldr	r1, [sp, #12]
 8017a10:	408b      	lsls	r3, r1
 8017a12:	9900      	ldr	r1, [sp, #0]
 8017a14:	4319      	orrs	r1, r3
 8017a16:	4663      	mov	r3, ip
 8017a18:	c302      	stmia	r3!, {r1}
 8017a1a:	469c      	mov	ip, r3
 8017a1c:	cd02      	ldmia	r5!, {r1}
 8017a1e:	9b02      	ldr	r3, [sp, #8]
 8017a20:	40d9      	lsrs	r1, r3
 8017a22:	9100      	str	r1, [sp, #0]
 8017a24:	e7d9      	b.n	80179da <rshift+0x56>
 8017a26:	c908      	ldmia	r1!, {r3}
 8017a28:	c508      	stmia	r5!, {r3}
 8017a2a:	e7c1      	b.n	80179b0 <rshift+0x2c>

08017a2c <__hexdig_fun>:
 8017a2c:	0002      	movs	r2, r0
 8017a2e:	3a30      	subs	r2, #48	; 0x30
 8017a30:	0003      	movs	r3, r0
 8017a32:	2a09      	cmp	r2, #9
 8017a34:	d802      	bhi.n	8017a3c <__hexdig_fun+0x10>
 8017a36:	3b20      	subs	r3, #32
 8017a38:	b2d8      	uxtb	r0, r3
 8017a3a:	4770      	bx	lr
 8017a3c:	0002      	movs	r2, r0
 8017a3e:	3a61      	subs	r2, #97	; 0x61
 8017a40:	2a05      	cmp	r2, #5
 8017a42:	d801      	bhi.n	8017a48 <__hexdig_fun+0x1c>
 8017a44:	3b47      	subs	r3, #71	; 0x47
 8017a46:	e7f7      	b.n	8017a38 <__hexdig_fun+0xc>
 8017a48:	001a      	movs	r2, r3
 8017a4a:	3a41      	subs	r2, #65	; 0x41
 8017a4c:	2000      	movs	r0, #0
 8017a4e:	2a05      	cmp	r2, #5
 8017a50:	d8f3      	bhi.n	8017a3a <__hexdig_fun+0xe>
 8017a52:	3b27      	subs	r3, #39	; 0x27
 8017a54:	e7f0      	b.n	8017a38 <__hexdig_fun+0xc>
	...

08017a58 <__gethex>:
 8017a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a5a:	b08d      	sub	sp, #52	; 0x34
 8017a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8017a5e:	4bbd      	ldr	r3, [pc, #756]	; (8017d54 <__gethex+0x2fc>)
 8017a60:	9005      	str	r0, [sp, #20]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	9109      	str	r1, [sp, #36]	; 0x24
 8017a66:	0018      	movs	r0, r3
 8017a68:	9202      	str	r2, [sp, #8]
 8017a6a:	9307      	str	r3, [sp, #28]
 8017a6c:	f7e8 fb54 	bl	8000118 <strlen>
 8017a70:	2202      	movs	r2, #2
 8017a72:	9b07      	ldr	r3, [sp, #28]
 8017a74:	4252      	negs	r2, r2
 8017a76:	181b      	adds	r3, r3, r0
 8017a78:	3b01      	subs	r3, #1
 8017a7a:	781b      	ldrb	r3, [r3, #0]
 8017a7c:	9003      	str	r0, [sp, #12]
 8017a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a82:	6819      	ldr	r1, [r3, #0]
 8017a84:	1c8b      	adds	r3, r1, #2
 8017a86:	1a52      	subs	r2, r2, r1
 8017a88:	18d1      	adds	r1, r2, r3
 8017a8a:	9301      	str	r3, [sp, #4]
 8017a8c:	9108      	str	r1, [sp, #32]
 8017a8e:	9901      	ldr	r1, [sp, #4]
 8017a90:	3301      	adds	r3, #1
 8017a92:	7808      	ldrb	r0, [r1, #0]
 8017a94:	2830      	cmp	r0, #48	; 0x30
 8017a96:	d0f7      	beq.n	8017a88 <__gethex+0x30>
 8017a98:	f7ff ffc8 	bl	8017a2c <__hexdig_fun>
 8017a9c:	1e04      	subs	r4, r0, #0
 8017a9e:	d13e      	bne.n	8017b1e <__gethex+0xc6>
 8017aa0:	9a03      	ldr	r2, [sp, #12]
 8017aa2:	9907      	ldr	r1, [sp, #28]
 8017aa4:	9801      	ldr	r0, [sp, #4]
 8017aa6:	f7fc fdf4 	bl	8014692 <strncmp>
 8017aaa:	1e07      	subs	r7, r0, #0
 8017aac:	d000      	beq.n	8017ab0 <__gethex+0x58>
 8017aae:	e06f      	b.n	8017b90 <__gethex+0x138>
 8017ab0:	9b01      	ldr	r3, [sp, #4]
 8017ab2:	9a03      	ldr	r2, [sp, #12]
 8017ab4:	5c98      	ldrb	r0, [r3, r2]
 8017ab6:	189d      	adds	r5, r3, r2
 8017ab8:	f7ff ffb8 	bl	8017a2c <__hexdig_fun>
 8017abc:	2301      	movs	r3, #1
 8017abe:	9304      	str	r3, [sp, #16]
 8017ac0:	2800      	cmp	r0, #0
 8017ac2:	d034      	beq.n	8017b2e <__gethex+0xd6>
 8017ac4:	9501      	str	r5, [sp, #4]
 8017ac6:	9b01      	ldr	r3, [sp, #4]
 8017ac8:	7818      	ldrb	r0, [r3, #0]
 8017aca:	2830      	cmp	r0, #48	; 0x30
 8017acc:	d009      	beq.n	8017ae2 <__gethex+0x8a>
 8017ace:	f7ff ffad 	bl	8017a2c <__hexdig_fun>
 8017ad2:	4243      	negs	r3, r0
 8017ad4:	4143      	adcs	r3, r0
 8017ad6:	9304      	str	r3, [sp, #16]
 8017ad8:	2301      	movs	r3, #1
 8017ada:	002c      	movs	r4, r5
 8017adc:	9308      	str	r3, [sp, #32]
 8017ade:	9d01      	ldr	r5, [sp, #4]
 8017ae0:	e004      	b.n	8017aec <__gethex+0x94>
 8017ae2:	9b01      	ldr	r3, [sp, #4]
 8017ae4:	3301      	adds	r3, #1
 8017ae6:	9301      	str	r3, [sp, #4]
 8017ae8:	e7ed      	b.n	8017ac6 <__gethex+0x6e>
 8017aea:	3501      	adds	r5, #1
 8017aec:	7828      	ldrb	r0, [r5, #0]
 8017aee:	f7ff ff9d 	bl	8017a2c <__hexdig_fun>
 8017af2:	1e07      	subs	r7, r0, #0
 8017af4:	d1f9      	bne.n	8017aea <__gethex+0x92>
 8017af6:	0028      	movs	r0, r5
 8017af8:	9a03      	ldr	r2, [sp, #12]
 8017afa:	9907      	ldr	r1, [sp, #28]
 8017afc:	f7fc fdc9 	bl	8014692 <strncmp>
 8017b00:	2800      	cmp	r0, #0
 8017b02:	d112      	bne.n	8017b2a <__gethex+0xd2>
 8017b04:	2c00      	cmp	r4, #0
 8017b06:	d107      	bne.n	8017b18 <__gethex+0xc0>
 8017b08:	9b03      	ldr	r3, [sp, #12]
 8017b0a:	18ed      	adds	r5, r5, r3
 8017b0c:	002c      	movs	r4, r5
 8017b0e:	7828      	ldrb	r0, [r5, #0]
 8017b10:	f7ff ff8c 	bl	8017a2c <__hexdig_fun>
 8017b14:	2800      	cmp	r0, #0
 8017b16:	d106      	bne.n	8017b26 <__gethex+0xce>
 8017b18:	1b67      	subs	r7, r4, r5
 8017b1a:	00bf      	lsls	r7, r7, #2
 8017b1c:	e007      	b.n	8017b2e <__gethex+0xd6>
 8017b1e:	2300      	movs	r3, #0
 8017b20:	001c      	movs	r4, r3
 8017b22:	9304      	str	r3, [sp, #16]
 8017b24:	e7db      	b.n	8017ade <__gethex+0x86>
 8017b26:	3501      	adds	r5, #1
 8017b28:	e7f1      	b.n	8017b0e <__gethex+0xb6>
 8017b2a:	2c00      	cmp	r4, #0
 8017b2c:	d1f4      	bne.n	8017b18 <__gethex+0xc0>
 8017b2e:	2220      	movs	r2, #32
 8017b30:	782b      	ldrb	r3, [r5, #0]
 8017b32:	002e      	movs	r6, r5
 8017b34:	4393      	bics	r3, r2
 8017b36:	2b50      	cmp	r3, #80	; 0x50
 8017b38:	d11d      	bne.n	8017b76 <__gethex+0x11e>
 8017b3a:	786b      	ldrb	r3, [r5, #1]
 8017b3c:	2b2b      	cmp	r3, #43	; 0x2b
 8017b3e:	d02c      	beq.n	8017b9a <__gethex+0x142>
 8017b40:	2b2d      	cmp	r3, #45	; 0x2d
 8017b42:	d02e      	beq.n	8017ba2 <__gethex+0x14a>
 8017b44:	2300      	movs	r3, #0
 8017b46:	1c6e      	adds	r6, r5, #1
 8017b48:	9306      	str	r3, [sp, #24]
 8017b4a:	7830      	ldrb	r0, [r6, #0]
 8017b4c:	f7ff ff6e 	bl	8017a2c <__hexdig_fun>
 8017b50:	1e43      	subs	r3, r0, #1
 8017b52:	b2db      	uxtb	r3, r3
 8017b54:	2b18      	cmp	r3, #24
 8017b56:	d82b      	bhi.n	8017bb0 <__gethex+0x158>
 8017b58:	3810      	subs	r0, #16
 8017b5a:	0004      	movs	r4, r0
 8017b5c:	7870      	ldrb	r0, [r6, #1]
 8017b5e:	f7ff ff65 	bl	8017a2c <__hexdig_fun>
 8017b62:	1e43      	subs	r3, r0, #1
 8017b64:	b2db      	uxtb	r3, r3
 8017b66:	3601      	adds	r6, #1
 8017b68:	2b18      	cmp	r3, #24
 8017b6a:	d91c      	bls.n	8017ba6 <__gethex+0x14e>
 8017b6c:	9b06      	ldr	r3, [sp, #24]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d000      	beq.n	8017b74 <__gethex+0x11c>
 8017b72:	4264      	negs	r4, r4
 8017b74:	193f      	adds	r7, r7, r4
 8017b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b78:	601e      	str	r6, [r3, #0]
 8017b7a:	9b04      	ldr	r3, [sp, #16]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d019      	beq.n	8017bb4 <__gethex+0x15c>
 8017b80:	2600      	movs	r6, #0
 8017b82:	9b08      	ldr	r3, [sp, #32]
 8017b84:	42b3      	cmp	r3, r6
 8017b86:	d100      	bne.n	8017b8a <__gethex+0x132>
 8017b88:	3606      	adds	r6, #6
 8017b8a:	0030      	movs	r0, r6
 8017b8c:	b00d      	add	sp, #52	; 0x34
 8017b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b90:	2301      	movs	r3, #1
 8017b92:	0027      	movs	r7, r4
 8017b94:	9d01      	ldr	r5, [sp, #4]
 8017b96:	9304      	str	r3, [sp, #16]
 8017b98:	e7c9      	b.n	8017b2e <__gethex+0xd6>
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	9306      	str	r3, [sp, #24]
 8017b9e:	1cae      	adds	r6, r5, #2
 8017ba0:	e7d3      	b.n	8017b4a <__gethex+0xf2>
 8017ba2:	2301      	movs	r3, #1
 8017ba4:	e7fa      	b.n	8017b9c <__gethex+0x144>
 8017ba6:	230a      	movs	r3, #10
 8017ba8:	435c      	muls	r4, r3
 8017baa:	1824      	adds	r4, r4, r0
 8017bac:	3c10      	subs	r4, #16
 8017bae:	e7d5      	b.n	8017b5c <__gethex+0x104>
 8017bb0:	002e      	movs	r6, r5
 8017bb2:	e7e0      	b.n	8017b76 <__gethex+0x11e>
 8017bb4:	9b01      	ldr	r3, [sp, #4]
 8017bb6:	9904      	ldr	r1, [sp, #16]
 8017bb8:	1aeb      	subs	r3, r5, r3
 8017bba:	3b01      	subs	r3, #1
 8017bbc:	2b07      	cmp	r3, #7
 8017bbe:	dc0a      	bgt.n	8017bd6 <__gethex+0x17e>
 8017bc0:	9805      	ldr	r0, [sp, #20]
 8017bc2:	f000 fa91 	bl	80180e8 <_Balloc>
 8017bc6:	1e04      	subs	r4, r0, #0
 8017bc8:	d108      	bne.n	8017bdc <__gethex+0x184>
 8017bca:	0002      	movs	r2, r0
 8017bcc:	21de      	movs	r1, #222	; 0xde
 8017bce:	4b62      	ldr	r3, [pc, #392]	; (8017d58 <__gethex+0x300>)
 8017bd0:	4862      	ldr	r0, [pc, #392]	; (8017d5c <__gethex+0x304>)
 8017bd2:	f001 f80b 	bl	8018bec <__assert_func>
 8017bd6:	3101      	adds	r1, #1
 8017bd8:	105b      	asrs	r3, r3, #1
 8017bda:	e7ef      	b.n	8017bbc <__gethex+0x164>
 8017bdc:	0003      	movs	r3, r0
 8017bde:	3314      	adds	r3, #20
 8017be0:	9304      	str	r3, [sp, #16]
 8017be2:	9309      	str	r3, [sp, #36]	; 0x24
 8017be4:	2300      	movs	r3, #0
 8017be6:	001e      	movs	r6, r3
 8017be8:	9306      	str	r3, [sp, #24]
 8017bea:	9b01      	ldr	r3, [sp, #4]
 8017bec:	42ab      	cmp	r3, r5
 8017bee:	d340      	bcc.n	8017c72 <__gethex+0x21a>
 8017bf0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017bf2:	9b04      	ldr	r3, [sp, #16]
 8017bf4:	c540      	stmia	r5!, {r6}
 8017bf6:	1aed      	subs	r5, r5, r3
 8017bf8:	10ad      	asrs	r5, r5, #2
 8017bfa:	0030      	movs	r0, r6
 8017bfc:	6125      	str	r5, [r4, #16]
 8017bfe:	f000 fb35 	bl	801826c <__hi0bits>
 8017c02:	9b02      	ldr	r3, [sp, #8]
 8017c04:	016d      	lsls	r5, r5, #5
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	1a2e      	subs	r6, r5, r0
 8017c0a:	9301      	str	r3, [sp, #4]
 8017c0c:	429e      	cmp	r6, r3
 8017c0e:	dd5a      	ble.n	8017cc6 <__gethex+0x26e>
 8017c10:	1af6      	subs	r6, r6, r3
 8017c12:	0031      	movs	r1, r6
 8017c14:	0020      	movs	r0, r4
 8017c16:	f000 febe 	bl	8018996 <__any_on>
 8017c1a:	1e05      	subs	r5, r0, #0
 8017c1c:	d016      	beq.n	8017c4c <__gethex+0x1f4>
 8017c1e:	2501      	movs	r5, #1
 8017c20:	211f      	movs	r1, #31
 8017c22:	0028      	movs	r0, r5
 8017c24:	1e73      	subs	r3, r6, #1
 8017c26:	4019      	ands	r1, r3
 8017c28:	4088      	lsls	r0, r1
 8017c2a:	0001      	movs	r1, r0
 8017c2c:	115a      	asrs	r2, r3, #5
 8017c2e:	9804      	ldr	r0, [sp, #16]
 8017c30:	0092      	lsls	r2, r2, #2
 8017c32:	5812      	ldr	r2, [r2, r0]
 8017c34:	420a      	tst	r2, r1
 8017c36:	d009      	beq.n	8017c4c <__gethex+0x1f4>
 8017c38:	42ab      	cmp	r3, r5
 8017c3a:	dd06      	ble.n	8017c4a <__gethex+0x1f2>
 8017c3c:	0020      	movs	r0, r4
 8017c3e:	1eb1      	subs	r1, r6, #2
 8017c40:	f000 fea9 	bl	8018996 <__any_on>
 8017c44:	3502      	adds	r5, #2
 8017c46:	2800      	cmp	r0, #0
 8017c48:	d100      	bne.n	8017c4c <__gethex+0x1f4>
 8017c4a:	2502      	movs	r5, #2
 8017c4c:	0031      	movs	r1, r6
 8017c4e:	0020      	movs	r0, r4
 8017c50:	f7ff fe98 	bl	8017984 <rshift>
 8017c54:	19bf      	adds	r7, r7, r6
 8017c56:	9b02      	ldr	r3, [sp, #8]
 8017c58:	689b      	ldr	r3, [r3, #8]
 8017c5a:	9303      	str	r3, [sp, #12]
 8017c5c:	42bb      	cmp	r3, r7
 8017c5e:	da42      	bge.n	8017ce6 <__gethex+0x28e>
 8017c60:	0021      	movs	r1, r4
 8017c62:	9805      	ldr	r0, [sp, #20]
 8017c64:	f000 fa68 	bl	8018138 <_Bfree>
 8017c68:	2300      	movs	r3, #0
 8017c6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c6c:	26a3      	movs	r6, #163	; 0xa3
 8017c6e:	6013      	str	r3, [r2, #0]
 8017c70:	e78b      	b.n	8017b8a <__gethex+0x132>
 8017c72:	1e6b      	subs	r3, r5, #1
 8017c74:	9308      	str	r3, [sp, #32]
 8017c76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017c78:	781b      	ldrb	r3, [r3, #0]
 8017c7a:	4293      	cmp	r3, r2
 8017c7c:	d014      	beq.n	8017ca8 <__gethex+0x250>
 8017c7e:	9b06      	ldr	r3, [sp, #24]
 8017c80:	2b20      	cmp	r3, #32
 8017c82:	d104      	bne.n	8017c8e <__gethex+0x236>
 8017c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c86:	c340      	stmia	r3!, {r6}
 8017c88:	2600      	movs	r6, #0
 8017c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8017c8c:	9606      	str	r6, [sp, #24]
 8017c8e:	9b08      	ldr	r3, [sp, #32]
 8017c90:	7818      	ldrb	r0, [r3, #0]
 8017c92:	f7ff fecb 	bl	8017a2c <__hexdig_fun>
 8017c96:	230f      	movs	r3, #15
 8017c98:	4018      	ands	r0, r3
 8017c9a:	9b06      	ldr	r3, [sp, #24]
 8017c9c:	9d08      	ldr	r5, [sp, #32]
 8017c9e:	4098      	lsls	r0, r3
 8017ca0:	3304      	adds	r3, #4
 8017ca2:	4306      	orrs	r6, r0
 8017ca4:	9306      	str	r3, [sp, #24]
 8017ca6:	e7a0      	b.n	8017bea <__gethex+0x192>
 8017ca8:	2301      	movs	r3, #1
 8017caa:	9a03      	ldr	r2, [sp, #12]
 8017cac:	1a9d      	subs	r5, r3, r2
 8017cae:	9b08      	ldr	r3, [sp, #32]
 8017cb0:	195d      	adds	r5, r3, r5
 8017cb2:	9b01      	ldr	r3, [sp, #4]
 8017cb4:	429d      	cmp	r5, r3
 8017cb6:	d3e2      	bcc.n	8017c7e <__gethex+0x226>
 8017cb8:	0028      	movs	r0, r5
 8017cba:	9907      	ldr	r1, [sp, #28]
 8017cbc:	f7fc fce9 	bl	8014692 <strncmp>
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	d1dc      	bne.n	8017c7e <__gethex+0x226>
 8017cc4:	e791      	b.n	8017bea <__gethex+0x192>
 8017cc6:	9b01      	ldr	r3, [sp, #4]
 8017cc8:	2500      	movs	r5, #0
 8017cca:	429e      	cmp	r6, r3
 8017ccc:	dac3      	bge.n	8017c56 <__gethex+0x1fe>
 8017cce:	1b9e      	subs	r6, r3, r6
 8017cd0:	0021      	movs	r1, r4
 8017cd2:	0032      	movs	r2, r6
 8017cd4:	9805      	ldr	r0, [sp, #20]
 8017cd6:	f000 fc19 	bl	801850c <__lshift>
 8017cda:	0003      	movs	r3, r0
 8017cdc:	3314      	adds	r3, #20
 8017cde:	0004      	movs	r4, r0
 8017ce0:	1bbf      	subs	r7, r7, r6
 8017ce2:	9304      	str	r3, [sp, #16]
 8017ce4:	e7b7      	b.n	8017c56 <__gethex+0x1fe>
 8017ce6:	9b02      	ldr	r3, [sp, #8]
 8017ce8:	685e      	ldr	r6, [r3, #4]
 8017cea:	42be      	cmp	r6, r7
 8017cec:	dd71      	ble.n	8017dd2 <__gethex+0x37a>
 8017cee:	9b01      	ldr	r3, [sp, #4]
 8017cf0:	1bf6      	subs	r6, r6, r7
 8017cf2:	42b3      	cmp	r3, r6
 8017cf4:	dc38      	bgt.n	8017d68 <__gethex+0x310>
 8017cf6:	9b02      	ldr	r3, [sp, #8]
 8017cf8:	68db      	ldr	r3, [r3, #12]
 8017cfa:	2b02      	cmp	r3, #2
 8017cfc:	d026      	beq.n	8017d4c <__gethex+0x2f4>
 8017cfe:	2b03      	cmp	r3, #3
 8017d00:	d02e      	beq.n	8017d60 <__gethex+0x308>
 8017d02:	2b01      	cmp	r3, #1
 8017d04:	d119      	bne.n	8017d3a <__gethex+0x2e2>
 8017d06:	9b01      	ldr	r3, [sp, #4]
 8017d08:	42b3      	cmp	r3, r6
 8017d0a:	d116      	bne.n	8017d3a <__gethex+0x2e2>
 8017d0c:	2b01      	cmp	r3, #1
 8017d0e:	d10d      	bne.n	8017d2c <__gethex+0x2d4>
 8017d10:	9b02      	ldr	r3, [sp, #8]
 8017d12:	2662      	movs	r6, #98	; 0x62
 8017d14:	685b      	ldr	r3, [r3, #4]
 8017d16:	9301      	str	r3, [sp, #4]
 8017d18:	9a01      	ldr	r2, [sp, #4]
 8017d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d1c:	601a      	str	r2, [r3, #0]
 8017d1e:	2301      	movs	r3, #1
 8017d20:	9a04      	ldr	r2, [sp, #16]
 8017d22:	6123      	str	r3, [r4, #16]
 8017d24:	6013      	str	r3, [r2, #0]
 8017d26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d28:	601c      	str	r4, [r3, #0]
 8017d2a:	e72e      	b.n	8017b8a <__gethex+0x132>
 8017d2c:	9901      	ldr	r1, [sp, #4]
 8017d2e:	0020      	movs	r0, r4
 8017d30:	3901      	subs	r1, #1
 8017d32:	f000 fe30 	bl	8018996 <__any_on>
 8017d36:	2800      	cmp	r0, #0
 8017d38:	d1ea      	bne.n	8017d10 <__gethex+0x2b8>
 8017d3a:	0021      	movs	r1, r4
 8017d3c:	9805      	ldr	r0, [sp, #20]
 8017d3e:	f000 f9fb 	bl	8018138 <_Bfree>
 8017d42:	2300      	movs	r3, #0
 8017d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d46:	2650      	movs	r6, #80	; 0x50
 8017d48:	6013      	str	r3, [r2, #0]
 8017d4a:	e71e      	b.n	8017b8a <__gethex+0x132>
 8017d4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d1f3      	bne.n	8017d3a <__gethex+0x2e2>
 8017d52:	e7dd      	b.n	8017d10 <__gethex+0x2b8>
 8017d54:	0801db9c 	.word	0x0801db9c
 8017d58:	0801dac1 	.word	0x0801dac1
 8017d5c:	0801db31 	.word	0x0801db31
 8017d60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d1d4      	bne.n	8017d10 <__gethex+0x2b8>
 8017d66:	e7e8      	b.n	8017d3a <__gethex+0x2e2>
 8017d68:	1e77      	subs	r7, r6, #1
 8017d6a:	2d00      	cmp	r5, #0
 8017d6c:	d12f      	bne.n	8017dce <__gethex+0x376>
 8017d6e:	2f00      	cmp	r7, #0
 8017d70:	d004      	beq.n	8017d7c <__gethex+0x324>
 8017d72:	0039      	movs	r1, r7
 8017d74:	0020      	movs	r0, r4
 8017d76:	f000 fe0e 	bl	8018996 <__any_on>
 8017d7a:	0005      	movs	r5, r0
 8017d7c:	231f      	movs	r3, #31
 8017d7e:	117a      	asrs	r2, r7, #5
 8017d80:	401f      	ands	r7, r3
 8017d82:	3b1e      	subs	r3, #30
 8017d84:	40bb      	lsls	r3, r7
 8017d86:	9904      	ldr	r1, [sp, #16]
 8017d88:	0092      	lsls	r2, r2, #2
 8017d8a:	5852      	ldr	r2, [r2, r1]
 8017d8c:	421a      	tst	r2, r3
 8017d8e:	d001      	beq.n	8017d94 <__gethex+0x33c>
 8017d90:	2302      	movs	r3, #2
 8017d92:	431d      	orrs	r5, r3
 8017d94:	9b01      	ldr	r3, [sp, #4]
 8017d96:	0031      	movs	r1, r6
 8017d98:	1b9b      	subs	r3, r3, r6
 8017d9a:	2602      	movs	r6, #2
 8017d9c:	0020      	movs	r0, r4
 8017d9e:	9301      	str	r3, [sp, #4]
 8017da0:	f7ff fdf0 	bl	8017984 <rshift>
 8017da4:	9b02      	ldr	r3, [sp, #8]
 8017da6:	685f      	ldr	r7, [r3, #4]
 8017da8:	2d00      	cmp	r5, #0
 8017daa:	d041      	beq.n	8017e30 <__gethex+0x3d8>
 8017dac:	9b02      	ldr	r3, [sp, #8]
 8017dae:	68db      	ldr	r3, [r3, #12]
 8017db0:	2b02      	cmp	r3, #2
 8017db2:	d010      	beq.n	8017dd6 <__gethex+0x37e>
 8017db4:	2b03      	cmp	r3, #3
 8017db6:	d012      	beq.n	8017dde <__gethex+0x386>
 8017db8:	2b01      	cmp	r3, #1
 8017dba:	d106      	bne.n	8017dca <__gethex+0x372>
 8017dbc:	07aa      	lsls	r2, r5, #30
 8017dbe:	d504      	bpl.n	8017dca <__gethex+0x372>
 8017dc0:	9a04      	ldr	r2, [sp, #16]
 8017dc2:	6810      	ldr	r0, [r2, #0]
 8017dc4:	4305      	orrs	r5, r0
 8017dc6:	421d      	tst	r5, r3
 8017dc8:	d10c      	bne.n	8017de4 <__gethex+0x38c>
 8017dca:	2310      	movs	r3, #16
 8017dcc:	e02f      	b.n	8017e2e <__gethex+0x3d6>
 8017dce:	2501      	movs	r5, #1
 8017dd0:	e7d4      	b.n	8017d7c <__gethex+0x324>
 8017dd2:	2601      	movs	r6, #1
 8017dd4:	e7e8      	b.n	8017da8 <__gethex+0x350>
 8017dd6:	2301      	movs	r3, #1
 8017dd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017dda:	1a9b      	subs	r3, r3, r2
 8017ddc:	9313      	str	r3, [sp, #76]	; 0x4c
 8017dde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d0f2      	beq.n	8017dca <__gethex+0x372>
 8017de4:	6923      	ldr	r3, [r4, #16]
 8017de6:	2000      	movs	r0, #0
 8017de8:	9303      	str	r3, [sp, #12]
 8017dea:	009b      	lsls	r3, r3, #2
 8017dec:	9304      	str	r3, [sp, #16]
 8017dee:	0023      	movs	r3, r4
 8017df0:	9a04      	ldr	r2, [sp, #16]
 8017df2:	3314      	adds	r3, #20
 8017df4:	1899      	adds	r1, r3, r2
 8017df6:	681a      	ldr	r2, [r3, #0]
 8017df8:	1c55      	adds	r5, r2, #1
 8017dfa:	d01e      	beq.n	8017e3a <__gethex+0x3e2>
 8017dfc:	3201      	adds	r2, #1
 8017dfe:	601a      	str	r2, [r3, #0]
 8017e00:	0023      	movs	r3, r4
 8017e02:	3314      	adds	r3, #20
 8017e04:	2e02      	cmp	r6, #2
 8017e06:	d140      	bne.n	8017e8a <__gethex+0x432>
 8017e08:	9a02      	ldr	r2, [sp, #8]
 8017e0a:	9901      	ldr	r1, [sp, #4]
 8017e0c:	6812      	ldr	r2, [r2, #0]
 8017e0e:	3a01      	subs	r2, #1
 8017e10:	428a      	cmp	r2, r1
 8017e12:	d10b      	bne.n	8017e2c <__gethex+0x3d4>
 8017e14:	114a      	asrs	r2, r1, #5
 8017e16:	211f      	movs	r1, #31
 8017e18:	9801      	ldr	r0, [sp, #4]
 8017e1a:	0092      	lsls	r2, r2, #2
 8017e1c:	4001      	ands	r1, r0
 8017e1e:	2001      	movs	r0, #1
 8017e20:	0005      	movs	r5, r0
 8017e22:	408d      	lsls	r5, r1
 8017e24:	58d3      	ldr	r3, [r2, r3]
 8017e26:	422b      	tst	r3, r5
 8017e28:	d000      	beq.n	8017e2c <__gethex+0x3d4>
 8017e2a:	2601      	movs	r6, #1
 8017e2c:	2320      	movs	r3, #32
 8017e2e:	431e      	orrs	r6, r3
 8017e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017e32:	601c      	str	r4, [r3, #0]
 8017e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e36:	601f      	str	r7, [r3, #0]
 8017e38:	e6a7      	b.n	8017b8a <__gethex+0x132>
 8017e3a:	c301      	stmia	r3!, {r0}
 8017e3c:	4299      	cmp	r1, r3
 8017e3e:	d8da      	bhi.n	8017df6 <__gethex+0x39e>
 8017e40:	9b03      	ldr	r3, [sp, #12]
 8017e42:	68a2      	ldr	r2, [r4, #8]
 8017e44:	4293      	cmp	r3, r2
 8017e46:	db17      	blt.n	8017e78 <__gethex+0x420>
 8017e48:	6863      	ldr	r3, [r4, #4]
 8017e4a:	9805      	ldr	r0, [sp, #20]
 8017e4c:	1c59      	adds	r1, r3, #1
 8017e4e:	f000 f94b 	bl	80180e8 <_Balloc>
 8017e52:	1e05      	subs	r5, r0, #0
 8017e54:	d103      	bne.n	8017e5e <__gethex+0x406>
 8017e56:	0002      	movs	r2, r0
 8017e58:	2184      	movs	r1, #132	; 0x84
 8017e5a:	4b1c      	ldr	r3, [pc, #112]	; (8017ecc <__gethex+0x474>)
 8017e5c:	e6b8      	b.n	8017bd0 <__gethex+0x178>
 8017e5e:	0021      	movs	r1, r4
 8017e60:	6923      	ldr	r3, [r4, #16]
 8017e62:	310c      	adds	r1, #12
 8017e64:	1c9a      	adds	r2, r3, #2
 8017e66:	0092      	lsls	r2, r2, #2
 8017e68:	300c      	adds	r0, #12
 8017e6a:	f7fc f9d1 	bl	8014210 <memcpy>
 8017e6e:	0021      	movs	r1, r4
 8017e70:	9805      	ldr	r0, [sp, #20]
 8017e72:	f000 f961 	bl	8018138 <_Bfree>
 8017e76:	002c      	movs	r4, r5
 8017e78:	6923      	ldr	r3, [r4, #16]
 8017e7a:	1c5a      	adds	r2, r3, #1
 8017e7c:	6122      	str	r2, [r4, #16]
 8017e7e:	2201      	movs	r2, #1
 8017e80:	3304      	adds	r3, #4
 8017e82:	009b      	lsls	r3, r3, #2
 8017e84:	18e3      	adds	r3, r4, r3
 8017e86:	605a      	str	r2, [r3, #4]
 8017e88:	e7ba      	b.n	8017e00 <__gethex+0x3a8>
 8017e8a:	6922      	ldr	r2, [r4, #16]
 8017e8c:	9903      	ldr	r1, [sp, #12]
 8017e8e:	428a      	cmp	r2, r1
 8017e90:	dd09      	ble.n	8017ea6 <__gethex+0x44e>
 8017e92:	2101      	movs	r1, #1
 8017e94:	0020      	movs	r0, r4
 8017e96:	f7ff fd75 	bl	8017984 <rshift>
 8017e9a:	9b02      	ldr	r3, [sp, #8]
 8017e9c:	3701      	adds	r7, #1
 8017e9e:	689b      	ldr	r3, [r3, #8]
 8017ea0:	42bb      	cmp	r3, r7
 8017ea2:	dac2      	bge.n	8017e2a <__gethex+0x3d2>
 8017ea4:	e6dc      	b.n	8017c60 <__gethex+0x208>
 8017ea6:	221f      	movs	r2, #31
 8017ea8:	9d01      	ldr	r5, [sp, #4]
 8017eaa:	9901      	ldr	r1, [sp, #4]
 8017eac:	2601      	movs	r6, #1
 8017eae:	4015      	ands	r5, r2
 8017eb0:	4211      	tst	r1, r2
 8017eb2:	d0bb      	beq.n	8017e2c <__gethex+0x3d4>
 8017eb4:	9a04      	ldr	r2, [sp, #16]
 8017eb6:	189b      	adds	r3, r3, r2
 8017eb8:	3b04      	subs	r3, #4
 8017eba:	6818      	ldr	r0, [r3, #0]
 8017ebc:	f000 f9d6 	bl	801826c <__hi0bits>
 8017ec0:	2320      	movs	r3, #32
 8017ec2:	1b5d      	subs	r5, r3, r5
 8017ec4:	42a8      	cmp	r0, r5
 8017ec6:	dbe4      	blt.n	8017e92 <__gethex+0x43a>
 8017ec8:	e7b0      	b.n	8017e2c <__gethex+0x3d4>
 8017eca:	46c0      	nop			; (mov r8, r8)
 8017ecc:	0801dac1 	.word	0x0801dac1

08017ed0 <L_shift>:
 8017ed0:	2308      	movs	r3, #8
 8017ed2:	b570      	push	{r4, r5, r6, lr}
 8017ed4:	2520      	movs	r5, #32
 8017ed6:	1a9a      	subs	r2, r3, r2
 8017ed8:	0092      	lsls	r2, r2, #2
 8017eda:	1aad      	subs	r5, r5, r2
 8017edc:	6843      	ldr	r3, [r0, #4]
 8017ede:	6806      	ldr	r6, [r0, #0]
 8017ee0:	001c      	movs	r4, r3
 8017ee2:	40ac      	lsls	r4, r5
 8017ee4:	40d3      	lsrs	r3, r2
 8017ee6:	4334      	orrs	r4, r6
 8017ee8:	6004      	str	r4, [r0, #0]
 8017eea:	6043      	str	r3, [r0, #4]
 8017eec:	3004      	adds	r0, #4
 8017eee:	4288      	cmp	r0, r1
 8017ef0:	d3f4      	bcc.n	8017edc <L_shift+0xc>
 8017ef2:	bd70      	pop	{r4, r5, r6, pc}

08017ef4 <__match>:
 8017ef4:	b530      	push	{r4, r5, lr}
 8017ef6:	6803      	ldr	r3, [r0, #0]
 8017ef8:	780c      	ldrb	r4, [r1, #0]
 8017efa:	3301      	adds	r3, #1
 8017efc:	2c00      	cmp	r4, #0
 8017efe:	d102      	bne.n	8017f06 <__match+0x12>
 8017f00:	6003      	str	r3, [r0, #0]
 8017f02:	2001      	movs	r0, #1
 8017f04:	bd30      	pop	{r4, r5, pc}
 8017f06:	781a      	ldrb	r2, [r3, #0]
 8017f08:	0015      	movs	r5, r2
 8017f0a:	3d41      	subs	r5, #65	; 0x41
 8017f0c:	2d19      	cmp	r5, #25
 8017f0e:	d800      	bhi.n	8017f12 <__match+0x1e>
 8017f10:	3220      	adds	r2, #32
 8017f12:	3101      	adds	r1, #1
 8017f14:	42a2      	cmp	r2, r4
 8017f16:	d0ef      	beq.n	8017ef8 <__match+0x4>
 8017f18:	2000      	movs	r0, #0
 8017f1a:	e7f3      	b.n	8017f04 <__match+0x10>

08017f1c <__hexnan>:
 8017f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f1e:	680b      	ldr	r3, [r1, #0]
 8017f20:	b08b      	sub	sp, #44	; 0x2c
 8017f22:	115c      	asrs	r4, r3, #5
 8017f24:	00a4      	lsls	r4, r4, #2
 8017f26:	9201      	str	r2, [sp, #4]
 8017f28:	1912      	adds	r2, r2, r4
 8017f2a:	0019      	movs	r1, r3
 8017f2c:	9202      	str	r2, [sp, #8]
 8017f2e:	221f      	movs	r2, #31
 8017f30:	4011      	ands	r1, r2
 8017f32:	9008      	str	r0, [sp, #32]
 8017f34:	9106      	str	r1, [sp, #24]
 8017f36:	4213      	tst	r3, r2
 8017f38:	d002      	beq.n	8017f40 <__hexnan+0x24>
 8017f3a:	9b02      	ldr	r3, [sp, #8]
 8017f3c:	3304      	adds	r3, #4
 8017f3e:	9302      	str	r3, [sp, #8]
 8017f40:	9b02      	ldr	r3, [sp, #8]
 8017f42:	2500      	movs	r5, #0
 8017f44:	1f1e      	subs	r6, r3, #4
 8017f46:	0037      	movs	r7, r6
 8017f48:	0034      	movs	r4, r6
 8017f4a:	9b08      	ldr	r3, [sp, #32]
 8017f4c:	6035      	str	r5, [r6, #0]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	9507      	str	r5, [sp, #28]
 8017f52:	9305      	str	r3, [sp, #20]
 8017f54:	9503      	str	r5, [sp, #12]
 8017f56:	9b05      	ldr	r3, [sp, #20]
 8017f58:	3301      	adds	r3, #1
 8017f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8017f5c:	9b05      	ldr	r3, [sp, #20]
 8017f5e:	785b      	ldrb	r3, [r3, #1]
 8017f60:	9304      	str	r3, [sp, #16]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d028      	beq.n	8017fb8 <__hexnan+0x9c>
 8017f66:	9804      	ldr	r0, [sp, #16]
 8017f68:	f7ff fd60 	bl	8017a2c <__hexdig_fun>
 8017f6c:	2800      	cmp	r0, #0
 8017f6e:	d154      	bne.n	801801a <__hexnan+0xfe>
 8017f70:	9b04      	ldr	r3, [sp, #16]
 8017f72:	2b20      	cmp	r3, #32
 8017f74:	d819      	bhi.n	8017faa <__hexnan+0x8e>
 8017f76:	9b03      	ldr	r3, [sp, #12]
 8017f78:	9a07      	ldr	r2, [sp, #28]
 8017f7a:	4293      	cmp	r3, r2
 8017f7c:	dd12      	ble.n	8017fa4 <__hexnan+0x88>
 8017f7e:	42bc      	cmp	r4, r7
 8017f80:	d206      	bcs.n	8017f90 <__hexnan+0x74>
 8017f82:	2d07      	cmp	r5, #7
 8017f84:	dc04      	bgt.n	8017f90 <__hexnan+0x74>
 8017f86:	002a      	movs	r2, r5
 8017f88:	0039      	movs	r1, r7
 8017f8a:	0020      	movs	r0, r4
 8017f8c:	f7ff ffa0 	bl	8017ed0 <L_shift>
 8017f90:	9b01      	ldr	r3, [sp, #4]
 8017f92:	2508      	movs	r5, #8
 8017f94:	429c      	cmp	r4, r3
 8017f96:	d905      	bls.n	8017fa4 <__hexnan+0x88>
 8017f98:	1f27      	subs	r7, r4, #4
 8017f9a:	2500      	movs	r5, #0
 8017f9c:	003c      	movs	r4, r7
 8017f9e:	9b03      	ldr	r3, [sp, #12]
 8017fa0:	603d      	str	r5, [r7, #0]
 8017fa2:	9307      	str	r3, [sp, #28]
 8017fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fa6:	9305      	str	r3, [sp, #20]
 8017fa8:	e7d5      	b.n	8017f56 <__hexnan+0x3a>
 8017faa:	9b04      	ldr	r3, [sp, #16]
 8017fac:	2b29      	cmp	r3, #41	; 0x29
 8017fae:	d158      	bne.n	8018062 <__hexnan+0x146>
 8017fb0:	9b05      	ldr	r3, [sp, #20]
 8017fb2:	9a08      	ldr	r2, [sp, #32]
 8017fb4:	3302      	adds	r3, #2
 8017fb6:	6013      	str	r3, [r2, #0]
 8017fb8:	9b03      	ldr	r3, [sp, #12]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d051      	beq.n	8018062 <__hexnan+0x146>
 8017fbe:	42bc      	cmp	r4, r7
 8017fc0:	d206      	bcs.n	8017fd0 <__hexnan+0xb4>
 8017fc2:	2d07      	cmp	r5, #7
 8017fc4:	dc04      	bgt.n	8017fd0 <__hexnan+0xb4>
 8017fc6:	002a      	movs	r2, r5
 8017fc8:	0039      	movs	r1, r7
 8017fca:	0020      	movs	r0, r4
 8017fcc:	f7ff ff80 	bl	8017ed0 <L_shift>
 8017fd0:	9b01      	ldr	r3, [sp, #4]
 8017fd2:	429c      	cmp	r4, r3
 8017fd4:	d935      	bls.n	8018042 <__hexnan+0x126>
 8017fd6:	001a      	movs	r2, r3
 8017fd8:	0023      	movs	r3, r4
 8017fda:	cb02      	ldmia	r3!, {r1}
 8017fdc:	c202      	stmia	r2!, {r1}
 8017fde:	429e      	cmp	r6, r3
 8017fe0:	d2fb      	bcs.n	8017fda <__hexnan+0xbe>
 8017fe2:	9b02      	ldr	r3, [sp, #8]
 8017fe4:	1c61      	adds	r1, r4, #1
 8017fe6:	1eda      	subs	r2, r3, #3
 8017fe8:	2304      	movs	r3, #4
 8017fea:	4291      	cmp	r1, r2
 8017fec:	d805      	bhi.n	8017ffa <__hexnan+0xde>
 8017fee:	9b02      	ldr	r3, [sp, #8]
 8017ff0:	3b04      	subs	r3, #4
 8017ff2:	1b1c      	subs	r4, r3, r4
 8017ff4:	08a4      	lsrs	r4, r4, #2
 8017ff6:	3401      	adds	r4, #1
 8017ff8:	00a3      	lsls	r3, r4, #2
 8017ffa:	9a01      	ldr	r2, [sp, #4]
 8017ffc:	18d4      	adds	r4, r2, r3
 8017ffe:	2300      	movs	r3, #0
 8018000:	c408      	stmia	r4!, {r3}
 8018002:	42a6      	cmp	r6, r4
 8018004:	d2fc      	bcs.n	8018000 <__hexnan+0xe4>
 8018006:	6833      	ldr	r3, [r6, #0]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d104      	bne.n	8018016 <__hexnan+0xfa>
 801800c:	9b01      	ldr	r3, [sp, #4]
 801800e:	429e      	cmp	r6, r3
 8018010:	d125      	bne.n	801805e <__hexnan+0x142>
 8018012:	2301      	movs	r3, #1
 8018014:	6033      	str	r3, [r6, #0]
 8018016:	2005      	movs	r0, #5
 8018018:	e024      	b.n	8018064 <__hexnan+0x148>
 801801a:	9b03      	ldr	r3, [sp, #12]
 801801c:	3501      	adds	r5, #1
 801801e:	3301      	adds	r3, #1
 8018020:	9303      	str	r3, [sp, #12]
 8018022:	2d08      	cmp	r5, #8
 8018024:	dd06      	ble.n	8018034 <__hexnan+0x118>
 8018026:	9b01      	ldr	r3, [sp, #4]
 8018028:	429c      	cmp	r4, r3
 801802a:	d9bb      	bls.n	8017fa4 <__hexnan+0x88>
 801802c:	2300      	movs	r3, #0
 801802e:	2501      	movs	r5, #1
 8018030:	3c04      	subs	r4, #4
 8018032:	6023      	str	r3, [r4, #0]
 8018034:	220f      	movs	r2, #15
 8018036:	6823      	ldr	r3, [r4, #0]
 8018038:	4010      	ands	r0, r2
 801803a:	011b      	lsls	r3, r3, #4
 801803c:	4318      	orrs	r0, r3
 801803e:	6020      	str	r0, [r4, #0]
 8018040:	e7b0      	b.n	8017fa4 <__hexnan+0x88>
 8018042:	9b06      	ldr	r3, [sp, #24]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d0de      	beq.n	8018006 <__hexnan+0xea>
 8018048:	2220      	movs	r2, #32
 801804a:	1ad2      	subs	r2, r2, r3
 801804c:	2301      	movs	r3, #1
 801804e:	425b      	negs	r3, r3
 8018050:	40d3      	lsrs	r3, r2
 8018052:	9c02      	ldr	r4, [sp, #8]
 8018054:	3c04      	subs	r4, #4
 8018056:	6822      	ldr	r2, [r4, #0]
 8018058:	4013      	ands	r3, r2
 801805a:	6023      	str	r3, [r4, #0]
 801805c:	e7d3      	b.n	8018006 <__hexnan+0xea>
 801805e:	3e04      	subs	r6, #4
 8018060:	e7d1      	b.n	8018006 <__hexnan+0xea>
 8018062:	2004      	movs	r0, #4
 8018064:	b00b      	add	sp, #44	; 0x2c
 8018066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018068 <__locale_mb_cur_max>:
 8018068:	2394      	movs	r3, #148	; 0x94
 801806a:	4a02      	ldr	r2, [pc, #8]	; (8018074 <__locale_mb_cur_max+0xc>)
 801806c:	005b      	lsls	r3, r3, #1
 801806e:	5cd0      	ldrb	r0, [r2, r3]
 8018070:	4770      	bx	lr
 8018072:	46c0      	nop			; (mov r8, r8)
 8018074:	200008f0 	.word	0x200008f0

08018078 <_localeconv_r>:
 8018078:	4800      	ldr	r0, [pc, #0]	; (801807c <_localeconv_r+0x4>)
 801807a:	4770      	bx	lr
 801807c:	200009e0 	.word	0x200009e0

08018080 <__retarget_lock_init_recursive>:
 8018080:	4770      	bx	lr

08018082 <__retarget_lock_close_recursive>:
 8018082:	4770      	bx	lr

08018084 <__retarget_lock_acquire_recursive>:
 8018084:	4770      	bx	lr

08018086 <__retarget_lock_release_recursive>:
 8018086:	4770      	bx	lr

08018088 <__ascii_mbtowc>:
 8018088:	b082      	sub	sp, #8
 801808a:	2900      	cmp	r1, #0
 801808c:	d100      	bne.n	8018090 <__ascii_mbtowc+0x8>
 801808e:	a901      	add	r1, sp, #4
 8018090:	1e10      	subs	r0, r2, #0
 8018092:	d006      	beq.n	80180a2 <__ascii_mbtowc+0x1a>
 8018094:	2b00      	cmp	r3, #0
 8018096:	d006      	beq.n	80180a6 <__ascii_mbtowc+0x1e>
 8018098:	7813      	ldrb	r3, [r2, #0]
 801809a:	600b      	str	r3, [r1, #0]
 801809c:	7810      	ldrb	r0, [r2, #0]
 801809e:	1e43      	subs	r3, r0, #1
 80180a0:	4198      	sbcs	r0, r3
 80180a2:	b002      	add	sp, #8
 80180a4:	4770      	bx	lr
 80180a6:	2002      	movs	r0, #2
 80180a8:	4240      	negs	r0, r0
 80180aa:	e7fa      	b.n	80180a2 <__ascii_mbtowc+0x1a>

080180ac <memchr>:
 80180ac:	b2c9      	uxtb	r1, r1
 80180ae:	1882      	adds	r2, r0, r2
 80180b0:	4290      	cmp	r0, r2
 80180b2:	d101      	bne.n	80180b8 <memchr+0xc>
 80180b4:	2000      	movs	r0, #0
 80180b6:	4770      	bx	lr
 80180b8:	7803      	ldrb	r3, [r0, #0]
 80180ba:	428b      	cmp	r3, r1
 80180bc:	d0fb      	beq.n	80180b6 <memchr+0xa>
 80180be:	3001      	adds	r0, #1
 80180c0:	e7f6      	b.n	80180b0 <memchr+0x4>

080180c2 <memmove>:
 80180c2:	b510      	push	{r4, lr}
 80180c4:	4288      	cmp	r0, r1
 80180c6:	d902      	bls.n	80180ce <memmove+0xc>
 80180c8:	188b      	adds	r3, r1, r2
 80180ca:	4298      	cmp	r0, r3
 80180cc:	d303      	bcc.n	80180d6 <memmove+0x14>
 80180ce:	2300      	movs	r3, #0
 80180d0:	e007      	b.n	80180e2 <memmove+0x20>
 80180d2:	5c8b      	ldrb	r3, [r1, r2]
 80180d4:	5483      	strb	r3, [r0, r2]
 80180d6:	3a01      	subs	r2, #1
 80180d8:	d2fb      	bcs.n	80180d2 <memmove+0x10>
 80180da:	bd10      	pop	{r4, pc}
 80180dc:	5ccc      	ldrb	r4, [r1, r3]
 80180de:	54c4      	strb	r4, [r0, r3]
 80180e0:	3301      	adds	r3, #1
 80180e2:	429a      	cmp	r2, r3
 80180e4:	d1fa      	bne.n	80180dc <memmove+0x1a>
 80180e6:	e7f8      	b.n	80180da <memmove+0x18>

080180e8 <_Balloc>:
 80180e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80180ea:	b570      	push	{r4, r5, r6, lr}
 80180ec:	0006      	movs	r6, r0
 80180ee:	000c      	movs	r4, r1
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d012      	beq.n	801811a <_Balloc+0x32>
 80180f4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80180f6:	00a3      	lsls	r3, r4, #2
 80180f8:	18d3      	adds	r3, r2, r3
 80180fa:	6818      	ldr	r0, [r3, #0]
 80180fc:	2800      	cmp	r0, #0
 80180fe:	d115      	bne.n	801812c <_Balloc+0x44>
 8018100:	2101      	movs	r1, #1
 8018102:	000d      	movs	r5, r1
 8018104:	40a5      	lsls	r5, r4
 8018106:	1d6a      	adds	r2, r5, #5
 8018108:	0030      	movs	r0, r6
 801810a:	0092      	lsls	r2, r2, #2
 801810c:	f000 fd8c 	bl	8018c28 <_calloc_r>
 8018110:	2800      	cmp	r0, #0
 8018112:	d009      	beq.n	8018128 <_Balloc+0x40>
 8018114:	6044      	str	r4, [r0, #4]
 8018116:	6085      	str	r5, [r0, #8]
 8018118:	e00a      	b.n	8018130 <_Balloc+0x48>
 801811a:	2221      	movs	r2, #33	; 0x21
 801811c:	2104      	movs	r1, #4
 801811e:	f000 fd83 	bl	8018c28 <_calloc_r>
 8018122:	64f0      	str	r0, [r6, #76]	; 0x4c
 8018124:	2800      	cmp	r0, #0
 8018126:	d1e5      	bne.n	80180f4 <_Balloc+0xc>
 8018128:	2000      	movs	r0, #0
 801812a:	bd70      	pop	{r4, r5, r6, pc}
 801812c:	6802      	ldr	r2, [r0, #0]
 801812e:	601a      	str	r2, [r3, #0]
 8018130:	2300      	movs	r3, #0
 8018132:	6103      	str	r3, [r0, #16]
 8018134:	60c3      	str	r3, [r0, #12]
 8018136:	e7f8      	b.n	801812a <_Balloc+0x42>

08018138 <_Bfree>:
 8018138:	2900      	cmp	r1, #0
 801813a:	d006      	beq.n	801814a <_Bfree+0x12>
 801813c:	684b      	ldr	r3, [r1, #4]
 801813e:	009a      	lsls	r2, r3, #2
 8018140:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018142:	189b      	adds	r3, r3, r2
 8018144:	681a      	ldr	r2, [r3, #0]
 8018146:	600a      	str	r2, [r1, #0]
 8018148:	6019      	str	r1, [r3, #0]
 801814a:	4770      	bx	lr

0801814c <__multadd>:
 801814c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801814e:	000e      	movs	r6, r1
 8018150:	9001      	str	r0, [sp, #4]
 8018152:	000c      	movs	r4, r1
 8018154:	001d      	movs	r5, r3
 8018156:	2000      	movs	r0, #0
 8018158:	690f      	ldr	r7, [r1, #16]
 801815a:	3614      	adds	r6, #20
 801815c:	6833      	ldr	r3, [r6, #0]
 801815e:	3001      	adds	r0, #1
 8018160:	b299      	uxth	r1, r3
 8018162:	4351      	muls	r1, r2
 8018164:	0c1b      	lsrs	r3, r3, #16
 8018166:	4353      	muls	r3, r2
 8018168:	1949      	adds	r1, r1, r5
 801816a:	0c0d      	lsrs	r5, r1, #16
 801816c:	195b      	adds	r3, r3, r5
 801816e:	0c1d      	lsrs	r5, r3, #16
 8018170:	b289      	uxth	r1, r1
 8018172:	041b      	lsls	r3, r3, #16
 8018174:	185b      	adds	r3, r3, r1
 8018176:	c608      	stmia	r6!, {r3}
 8018178:	4287      	cmp	r7, r0
 801817a:	dcef      	bgt.n	801815c <__multadd+0x10>
 801817c:	2d00      	cmp	r5, #0
 801817e:	d022      	beq.n	80181c6 <__multadd+0x7a>
 8018180:	68a3      	ldr	r3, [r4, #8]
 8018182:	42bb      	cmp	r3, r7
 8018184:	dc19      	bgt.n	80181ba <__multadd+0x6e>
 8018186:	6863      	ldr	r3, [r4, #4]
 8018188:	9801      	ldr	r0, [sp, #4]
 801818a:	1c59      	adds	r1, r3, #1
 801818c:	f7ff ffac 	bl	80180e8 <_Balloc>
 8018190:	1e06      	subs	r6, r0, #0
 8018192:	d105      	bne.n	80181a0 <__multadd+0x54>
 8018194:	0002      	movs	r2, r0
 8018196:	21b5      	movs	r1, #181	; 0xb5
 8018198:	4b0c      	ldr	r3, [pc, #48]	; (80181cc <__multadd+0x80>)
 801819a:	480d      	ldr	r0, [pc, #52]	; (80181d0 <__multadd+0x84>)
 801819c:	f000 fd26 	bl	8018bec <__assert_func>
 80181a0:	0021      	movs	r1, r4
 80181a2:	6923      	ldr	r3, [r4, #16]
 80181a4:	310c      	adds	r1, #12
 80181a6:	1c9a      	adds	r2, r3, #2
 80181a8:	0092      	lsls	r2, r2, #2
 80181aa:	300c      	adds	r0, #12
 80181ac:	f7fc f830 	bl	8014210 <memcpy>
 80181b0:	0021      	movs	r1, r4
 80181b2:	9801      	ldr	r0, [sp, #4]
 80181b4:	f7ff ffc0 	bl	8018138 <_Bfree>
 80181b8:	0034      	movs	r4, r6
 80181ba:	1d3b      	adds	r3, r7, #4
 80181bc:	009b      	lsls	r3, r3, #2
 80181be:	18e3      	adds	r3, r4, r3
 80181c0:	605d      	str	r5, [r3, #4]
 80181c2:	1c7b      	adds	r3, r7, #1
 80181c4:	6123      	str	r3, [r4, #16]
 80181c6:	0020      	movs	r0, r4
 80181c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80181ca:	46c0      	nop			; (mov r8, r8)
 80181cc:	0801dac1 	.word	0x0801dac1
 80181d0:	0801dbb0 	.word	0x0801dbb0

080181d4 <__s2b>:
 80181d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80181d6:	0006      	movs	r6, r0
 80181d8:	0018      	movs	r0, r3
 80181da:	000c      	movs	r4, r1
 80181dc:	3008      	adds	r0, #8
 80181de:	2109      	movs	r1, #9
 80181e0:	9301      	str	r3, [sp, #4]
 80181e2:	0015      	movs	r5, r2
 80181e4:	f7e8 f83e 	bl	8000264 <__divsi3>
 80181e8:	2301      	movs	r3, #1
 80181ea:	2100      	movs	r1, #0
 80181ec:	4283      	cmp	r3, r0
 80181ee:	db0a      	blt.n	8018206 <__s2b+0x32>
 80181f0:	0030      	movs	r0, r6
 80181f2:	f7ff ff79 	bl	80180e8 <_Balloc>
 80181f6:	1e01      	subs	r1, r0, #0
 80181f8:	d108      	bne.n	801820c <__s2b+0x38>
 80181fa:	0002      	movs	r2, r0
 80181fc:	4b19      	ldr	r3, [pc, #100]	; (8018264 <__s2b+0x90>)
 80181fe:	481a      	ldr	r0, [pc, #104]	; (8018268 <__s2b+0x94>)
 8018200:	31ce      	adds	r1, #206	; 0xce
 8018202:	f000 fcf3 	bl	8018bec <__assert_func>
 8018206:	005b      	lsls	r3, r3, #1
 8018208:	3101      	adds	r1, #1
 801820a:	e7ef      	b.n	80181ec <__s2b+0x18>
 801820c:	9b08      	ldr	r3, [sp, #32]
 801820e:	6143      	str	r3, [r0, #20]
 8018210:	2301      	movs	r3, #1
 8018212:	6103      	str	r3, [r0, #16]
 8018214:	2d09      	cmp	r5, #9
 8018216:	dd18      	ble.n	801824a <__s2b+0x76>
 8018218:	0023      	movs	r3, r4
 801821a:	3309      	adds	r3, #9
 801821c:	001f      	movs	r7, r3
 801821e:	9300      	str	r3, [sp, #0]
 8018220:	1964      	adds	r4, r4, r5
 8018222:	783b      	ldrb	r3, [r7, #0]
 8018224:	220a      	movs	r2, #10
 8018226:	0030      	movs	r0, r6
 8018228:	3b30      	subs	r3, #48	; 0x30
 801822a:	f7ff ff8f 	bl	801814c <__multadd>
 801822e:	3701      	adds	r7, #1
 8018230:	0001      	movs	r1, r0
 8018232:	42a7      	cmp	r7, r4
 8018234:	d1f5      	bne.n	8018222 <__s2b+0x4e>
 8018236:	002c      	movs	r4, r5
 8018238:	9b00      	ldr	r3, [sp, #0]
 801823a:	3c08      	subs	r4, #8
 801823c:	191c      	adds	r4, r3, r4
 801823e:	002f      	movs	r7, r5
 8018240:	9b01      	ldr	r3, [sp, #4]
 8018242:	429f      	cmp	r7, r3
 8018244:	db04      	blt.n	8018250 <__s2b+0x7c>
 8018246:	0008      	movs	r0, r1
 8018248:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801824a:	2509      	movs	r5, #9
 801824c:	340a      	adds	r4, #10
 801824e:	e7f6      	b.n	801823e <__s2b+0x6a>
 8018250:	1b63      	subs	r3, r4, r5
 8018252:	5ddb      	ldrb	r3, [r3, r7]
 8018254:	220a      	movs	r2, #10
 8018256:	0030      	movs	r0, r6
 8018258:	3b30      	subs	r3, #48	; 0x30
 801825a:	f7ff ff77 	bl	801814c <__multadd>
 801825e:	3701      	adds	r7, #1
 8018260:	0001      	movs	r1, r0
 8018262:	e7ed      	b.n	8018240 <__s2b+0x6c>
 8018264:	0801dac1 	.word	0x0801dac1
 8018268:	0801dbb0 	.word	0x0801dbb0

0801826c <__hi0bits>:
 801826c:	0003      	movs	r3, r0
 801826e:	0c02      	lsrs	r2, r0, #16
 8018270:	2000      	movs	r0, #0
 8018272:	4282      	cmp	r2, r0
 8018274:	d101      	bne.n	801827a <__hi0bits+0xe>
 8018276:	041b      	lsls	r3, r3, #16
 8018278:	3010      	adds	r0, #16
 801827a:	0e1a      	lsrs	r2, r3, #24
 801827c:	d101      	bne.n	8018282 <__hi0bits+0x16>
 801827e:	3008      	adds	r0, #8
 8018280:	021b      	lsls	r3, r3, #8
 8018282:	0f1a      	lsrs	r2, r3, #28
 8018284:	d101      	bne.n	801828a <__hi0bits+0x1e>
 8018286:	3004      	adds	r0, #4
 8018288:	011b      	lsls	r3, r3, #4
 801828a:	0f9a      	lsrs	r2, r3, #30
 801828c:	d101      	bne.n	8018292 <__hi0bits+0x26>
 801828e:	3002      	adds	r0, #2
 8018290:	009b      	lsls	r3, r3, #2
 8018292:	2b00      	cmp	r3, #0
 8018294:	db03      	blt.n	801829e <__hi0bits+0x32>
 8018296:	3001      	adds	r0, #1
 8018298:	005b      	lsls	r3, r3, #1
 801829a:	d400      	bmi.n	801829e <__hi0bits+0x32>
 801829c:	2020      	movs	r0, #32
 801829e:	4770      	bx	lr

080182a0 <__lo0bits>:
 80182a0:	6803      	ldr	r3, [r0, #0]
 80182a2:	0002      	movs	r2, r0
 80182a4:	2107      	movs	r1, #7
 80182a6:	0018      	movs	r0, r3
 80182a8:	4008      	ands	r0, r1
 80182aa:	420b      	tst	r3, r1
 80182ac:	d00d      	beq.n	80182ca <__lo0bits+0x2a>
 80182ae:	3906      	subs	r1, #6
 80182b0:	2000      	movs	r0, #0
 80182b2:	420b      	tst	r3, r1
 80182b4:	d105      	bne.n	80182c2 <__lo0bits+0x22>
 80182b6:	3002      	adds	r0, #2
 80182b8:	4203      	tst	r3, r0
 80182ba:	d003      	beq.n	80182c4 <__lo0bits+0x24>
 80182bc:	40cb      	lsrs	r3, r1
 80182be:	0008      	movs	r0, r1
 80182c0:	6013      	str	r3, [r2, #0]
 80182c2:	4770      	bx	lr
 80182c4:	089b      	lsrs	r3, r3, #2
 80182c6:	6013      	str	r3, [r2, #0]
 80182c8:	e7fb      	b.n	80182c2 <__lo0bits+0x22>
 80182ca:	b299      	uxth	r1, r3
 80182cc:	2900      	cmp	r1, #0
 80182ce:	d101      	bne.n	80182d4 <__lo0bits+0x34>
 80182d0:	2010      	movs	r0, #16
 80182d2:	0c1b      	lsrs	r3, r3, #16
 80182d4:	b2d9      	uxtb	r1, r3
 80182d6:	2900      	cmp	r1, #0
 80182d8:	d101      	bne.n	80182de <__lo0bits+0x3e>
 80182da:	3008      	adds	r0, #8
 80182dc:	0a1b      	lsrs	r3, r3, #8
 80182de:	0719      	lsls	r1, r3, #28
 80182e0:	d101      	bne.n	80182e6 <__lo0bits+0x46>
 80182e2:	3004      	adds	r0, #4
 80182e4:	091b      	lsrs	r3, r3, #4
 80182e6:	0799      	lsls	r1, r3, #30
 80182e8:	d101      	bne.n	80182ee <__lo0bits+0x4e>
 80182ea:	3002      	adds	r0, #2
 80182ec:	089b      	lsrs	r3, r3, #2
 80182ee:	07d9      	lsls	r1, r3, #31
 80182f0:	d4e9      	bmi.n	80182c6 <__lo0bits+0x26>
 80182f2:	3001      	adds	r0, #1
 80182f4:	085b      	lsrs	r3, r3, #1
 80182f6:	d1e6      	bne.n	80182c6 <__lo0bits+0x26>
 80182f8:	2020      	movs	r0, #32
 80182fa:	e7e2      	b.n	80182c2 <__lo0bits+0x22>

080182fc <__i2b>:
 80182fc:	b510      	push	{r4, lr}
 80182fe:	000c      	movs	r4, r1
 8018300:	2101      	movs	r1, #1
 8018302:	f7ff fef1 	bl	80180e8 <_Balloc>
 8018306:	2800      	cmp	r0, #0
 8018308:	d106      	bne.n	8018318 <__i2b+0x1c>
 801830a:	21a0      	movs	r1, #160	; 0xa0
 801830c:	0002      	movs	r2, r0
 801830e:	4b04      	ldr	r3, [pc, #16]	; (8018320 <__i2b+0x24>)
 8018310:	4804      	ldr	r0, [pc, #16]	; (8018324 <__i2b+0x28>)
 8018312:	0049      	lsls	r1, r1, #1
 8018314:	f000 fc6a 	bl	8018bec <__assert_func>
 8018318:	2301      	movs	r3, #1
 801831a:	6144      	str	r4, [r0, #20]
 801831c:	6103      	str	r3, [r0, #16]
 801831e:	bd10      	pop	{r4, pc}
 8018320:	0801dac1 	.word	0x0801dac1
 8018324:	0801dbb0 	.word	0x0801dbb0

08018328 <__multiply>:
 8018328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801832a:	690b      	ldr	r3, [r1, #16]
 801832c:	0014      	movs	r4, r2
 801832e:	6912      	ldr	r2, [r2, #16]
 8018330:	000d      	movs	r5, r1
 8018332:	b089      	sub	sp, #36	; 0x24
 8018334:	4293      	cmp	r3, r2
 8018336:	da01      	bge.n	801833c <__multiply+0x14>
 8018338:	0025      	movs	r5, r4
 801833a:	000c      	movs	r4, r1
 801833c:	692f      	ldr	r7, [r5, #16]
 801833e:	6926      	ldr	r6, [r4, #16]
 8018340:	6869      	ldr	r1, [r5, #4]
 8018342:	19bb      	adds	r3, r7, r6
 8018344:	9302      	str	r3, [sp, #8]
 8018346:	68ab      	ldr	r3, [r5, #8]
 8018348:	19ba      	adds	r2, r7, r6
 801834a:	4293      	cmp	r3, r2
 801834c:	da00      	bge.n	8018350 <__multiply+0x28>
 801834e:	3101      	adds	r1, #1
 8018350:	f7ff feca 	bl	80180e8 <_Balloc>
 8018354:	9001      	str	r0, [sp, #4]
 8018356:	2800      	cmp	r0, #0
 8018358:	d106      	bne.n	8018368 <__multiply+0x40>
 801835a:	215e      	movs	r1, #94	; 0x5e
 801835c:	0002      	movs	r2, r0
 801835e:	4b48      	ldr	r3, [pc, #288]	; (8018480 <__multiply+0x158>)
 8018360:	4848      	ldr	r0, [pc, #288]	; (8018484 <__multiply+0x15c>)
 8018362:	31ff      	adds	r1, #255	; 0xff
 8018364:	f000 fc42 	bl	8018bec <__assert_func>
 8018368:	9b01      	ldr	r3, [sp, #4]
 801836a:	2200      	movs	r2, #0
 801836c:	3314      	adds	r3, #20
 801836e:	469c      	mov	ip, r3
 8018370:	19bb      	adds	r3, r7, r6
 8018372:	009b      	lsls	r3, r3, #2
 8018374:	4463      	add	r3, ip
 8018376:	9303      	str	r3, [sp, #12]
 8018378:	4663      	mov	r3, ip
 801837a:	9903      	ldr	r1, [sp, #12]
 801837c:	428b      	cmp	r3, r1
 801837e:	d32c      	bcc.n	80183da <__multiply+0xb2>
 8018380:	002b      	movs	r3, r5
 8018382:	0022      	movs	r2, r4
 8018384:	3314      	adds	r3, #20
 8018386:	00bf      	lsls	r7, r7, #2
 8018388:	3214      	adds	r2, #20
 801838a:	9306      	str	r3, [sp, #24]
 801838c:	00b6      	lsls	r6, r6, #2
 801838e:	19db      	adds	r3, r3, r7
 8018390:	9304      	str	r3, [sp, #16]
 8018392:	1993      	adds	r3, r2, r6
 8018394:	9307      	str	r3, [sp, #28]
 8018396:	2304      	movs	r3, #4
 8018398:	9305      	str	r3, [sp, #20]
 801839a:	002b      	movs	r3, r5
 801839c:	9904      	ldr	r1, [sp, #16]
 801839e:	3315      	adds	r3, #21
 80183a0:	9200      	str	r2, [sp, #0]
 80183a2:	4299      	cmp	r1, r3
 80183a4:	d305      	bcc.n	80183b2 <__multiply+0x8a>
 80183a6:	1b4b      	subs	r3, r1, r5
 80183a8:	3b15      	subs	r3, #21
 80183aa:	089b      	lsrs	r3, r3, #2
 80183ac:	3301      	adds	r3, #1
 80183ae:	009b      	lsls	r3, r3, #2
 80183b0:	9305      	str	r3, [sp, #20]
 80183b2:	9b07      	ldr	r3, [sp, #28]
 80183b4:	9a00      	ldr	r2, [sp, #0]
 80183b6:	429a      	cmp	r2, r3
 80183b8:	d311      	bcc.n	80183de <__multiply+0xb6>
 80183ba:	9b02      	ldr	r3, [sp, #8]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	dd06      	ble.n	80183ce <__multiply+0xa6>
 80183c0:	9b03      	ldr	r3, [sp, #12]
 80183c2:	3b04      	subs	r3, #4
 80183c4:	9303      	str	r3, [sp, #12]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	9300      	str	r3, [sp, #0]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d054      	beq.n	8018478 <__multiply+0x150>
 80183ce:	9b01      	ldr	r3, [sp, #4]
 80183d0:	9a02      	ldr	r2, [sp, #8]
 80183d2:	0018      	movs	r0, r3
 80183d4:	611a      	str	r2, [r3, #16]
 80183d6:	b009      	add	sp, #36	; 0x24
 80183d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183da:	c304      	stmia	r3!, {r2}
 80183dc:	e7cd      	b.n	801837a <__multiply+0x52>
 80183de:	9b00      	ldr	r3, [sp, #0]
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	b298      	uxth	r0, r3
 80183e4:	2800      	cmp	r0, #0
 80183e6:	d01c      	beq.n	8018422 <__multiply+0xfa>
 80183e8:	4667      	mov	r7, ip
 80183ea:	2400      	movs	r4, #0
 80183ec:	9e06      	ldr	r6, [sp, #24]
 80183ee:	ce02      	ldmia	r6!, {r1}
 80183f0:	683a      	ldr	r2, [r7, #0]
 80183f2:	b28b      	uxth	r3, r1
 80183f4:	4343      	muls	r3, r0
 80183f6:	0c09      	lsrs	r1, r1, #16
 80183f8:	4341      	muls	r1, r0
 80183fa:	b292      	uxth	r2, r2
 80183fc:	189b      	adds	r3, r3, r2
 80183fe:	191b      	adds	r3, r3, r4
 8018400:	000c      	movs	r4, r1
 8018402:	683a      	ldr	r2, [r7, #0]
 8018404:	0c11      	lsrs	r1, r2, #16
 8018406:	1861      	adds	r1, r4, r1
 8018408:	0c1c      	lsrs	r4, r3, #16
 801840a:	1909      	adds	r1, r1, r4
 801840c:	0c0c      	lsrs	r4, r1, #16
 801840e:	b29b      	uxth	r3, r3
 8018410:	0409      	lsls	r1, r1, #16
 8018412:	430b      	orrs	r3, r1
 8018414:	c708      	stmia	r7!, {r3}
 8018416:	9b04      	ldr	r3, [sp, #16]
 8018418:	42b3      	cmp	r3, r6
 801841a:	d8e8      	bhi.n	80183ee <__multiply+0xc6>
 801841c:	4663      	mov	r3, ip
 801841e:	9a05      	ldr	r2, [sp, #20]
 8018420:	509c      	str	r4, [r3, r2]
 8018422:	9b00      	ldr	r3, [sp, #0]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	0c1e      	lsrs	r6, r3, #16
 8018428:	d020      	beq.n	801846c <__multiply+0x144>
 801842a:	4663      	mov	r3, ip
 801842c:	002c      	movs	r4, r5
 801842e:	4660      	mov	r0, ip
 8018430:	2700      	movs	r7, #0
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	3414      	adds	r4, #20
 8018436:	6822      	ldr	r2, [r4, #0]
 8018438:	b29b      	uxth	r3, r3
 801843a:	b291      	uxth	r1, r2
 801843c:	4371      	muls	r1, r6
 801843e:	6802      	ldr	r2, [r0, #0]
 8018440:	0c12      	lsrs	r2, r2, #16
 8018442:	1889      	adds	r1, r1, r2
 8018444:	19cf      	adds	r7, r1, r7
 8018446:	0439      	lsls	r1, r7, #16
 8018448:	430b      	orrs	r3, r1
 801844a:	6003      	str	r3, [r0, #0]
 801844c:	cc02      	ldmia	r4!, {r1}
 801844e:	6843      	ldr	r3, [r0, #4]
 8018450:	0c09      	lsrs	r1, r1, #16
 8018452:	4371      	muls	r1, r6
 8018454:	b29b      	uxth	r3, r3
 8018456:	0c3f      	lsrs	r7, r7, #16
 8018458:	18cb      	adds	r3, r1, r3
 801845a:	9a04      	ldr	r2, [sp, #16]
 801845c:	19db      	adds	r3, r3, r7
 801845e:	0c1f      	lsrs	r7, r3, #16
 8018460:	3004      	adds	r0, #4
 8018462:	42a2      	cmp	r2, r4
 8018464:	d8e7      	bhi.n	8018436 <__multiply+0x10e>
 8018466:	4662      	mov	r2, ip
 8018468:	9905      	ldr	r1, [sp, #20]
 801846a:	5053      	str	r3, [r2, r1]
 801846c:	9b00      	ldr	r3, [sp, #0]
 801846e:	3304      	adds	r3, #4
 8018470:	9300      	str	r3, [sp, #0]
 8018472:	2304      	movs	r3, #4
 8018474:	449c      	add	ip, r3
 8018476:	e79c      	b.n	80183b2 <__multiply+0x8a>
 8018478:	9b02      	ldr	r3, [sp, #8]
 801847a:	3b01      	subs	r3, #1
 801847c:	9302      	str	r3, [sp, #8]
 801847e:	e79c      	b.n	80183ba <__multiply+0x92>
 8018480:	0801dac1 	.word	0x0801dac1
 8018484:	0801dbb0 	.word	0x0801dbb0

08018488 <__pow5mult>:
 8018488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801848a:	2303      	movs	r3, #3
 801848c:	0015      	movs	r5, r2
 801848e:	0007      	movs	r7, r0
 8018490:	000e      	movs	r6, r1
 8018492:	401a      	ands	r2, r3
 8018494:	421d      	tst	r5, r3
 8018496:	d008      	beq.n	80184aa <__pow5mult+0x22>
 8018498:	491a      	ldr	r1, [pc, #104]	; (8018504 <__pow5mult+0x7c>)
 801849a:	3a01      	subs	r2, #1
 801849c:	0092      	lsls	r2, r2, #2
 801849e:	5852      	ldr	r2, [r2, r1]
 80184a0:	2300      	movs	r3, #0
 80184a2:	0031      	movs	r1, r6
 80184a4:	f7ff fe52 	bl	801814c <__multadd>
 80184a8:	0006      	movs	r6, r0
 80184aa:	10ad      	asrs	r5, r5, #2
 80184ac:	d027      	beq.n	80184fe <__pow5mult+0x76>
 80184ae:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80184b0:	2c00      	cmp	r4, #0
 80184b2:	d107      	bne.n	80184c4 <__pow5mult+0x3c>
 80184b4:	0038      	movs	r0, r7
 80184b6:	4914      	ldr	r1, [pc, #80]	; (8018508 <__pow5mult+0x80>)
 80184b8:	f7ff ff20 	bl	80182fc <__i2b>
 80184bc:	2300      	movs	r3, #0
 80184be:	0004      	movs	r4, r0
 80184c0:	64b8      	str	r0, [r7, #72]	; 0x48
 80184c2:	6003      	str	r3, [r0, #0]
 80184c4:	2301      	movs	r3, #1
 80184c6:	421d      	tst	r5, r3
 80184c8:	d00a      	beq.n	80184e0 <__pow5mult+0x58>
 80184ca:	0031      	movs	r1, r6
 80184cc:	0022      	movs	r2, r4
 80184ce:	0038      	movs	r0, r7
 80184d0:	f7ff ff2a 	bl	8018328 <__multiply>
 80184d4:	0031      	movs	r1, r6
 80184d6:	9001      	str	r0, [sp, #4]
 80184d8:	0038      	movs	r0, r7
 80184da:	f7ff fe2d 	bl	8018138 <_Bfree>
 80184de:	9e01      	ldr	r6, [sp, #4]
 80184e0:	106d      	asrs	r5, r5, #1
 80184e2:	d00c      	beq.n	80184fe <__pow5mult+0x76>
 80184e4:	6820      	ldr	r0, [r4, #0]
 80184e6:	2800      	cmp	r0, #0
 80184e8:	d107      	bne.n	80184fa <__pow5mult+0x72>
 80184ea:	0022      	movs	r2, r4
 80184ec:	0021      	movs	r1, r4
 80184ee:	0038      	movs	r0, r7
 80184f0:	f7ff ff1a 	bl	8018328 <__multiply>
 80184f4:	2300      	movs	r3, #0
 80184f6:	6020      	str	r0, [r4, #0]
 80184f8:	6003      	str	r3, [r0, #0]
 80184fa:	0004      	movs	r4, r0
 80184fc:	e7e2      	b.n	80184c4 <__pow5mult+0x3c>
 80184fe:	0030      	movs	r0, r6
 8018500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018502:	46c0      	nop			; (mov r8, r8)
 8018504:	0801dd00 	.word	0x0801dd00
 8018508:	00000271 	.word	0x00000271

0801850c <__lshift>:
 801850c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801850e:	000c      	movs	r4, r1
 8018510:	0017      	movs	r7, r2
 8018512:	6923      	ldr	r3, [r4, #16]
 8018514:	1155      	asrs	r5, r2, #5
 8018516:	b087      	sub	sp, #28
 8018518:	18eb      	adds	r3, r5, r3
 801851a:	9302      	str	r3, [sp, #8]
 801851c:	3301      	adds	r3, #1
 801851e:	9301      	str	r3, [sp, #4]
 8018520:	6849      	ldr	r1, [r1, #4]
 8018522:	68a3      	ldr	r3, [r4, #8]
 8018524:	9004      	str	r0, [sp, #16]
 8018526:	9a01      	ldr	r2, [sp, #4]
 8018528:	4293      	cmp	r3, r2
 801852a:	db11      	blt.n	8018550 <__lshift+0x44>
 801852c:	9804      	ldr	r0, [sp, #16]
 801852e:	f7ff fddb 	bl	80180e8 <_Balloc>
 8018532:	0002      	movs	r2, r0
 8018534:	2300      	movs	r3, #0
 8018536:	3214      	adds	r2, #20
 8018538:	0006      	movs	r6, r0
 801853a:	0011      	movs	r1, r2
 801853c:	9203      	str	r2, [sp, #12]
 801853e:	4298      	cmp	r0, r3
 8018540:	d10d      	bne.n	801855e <__lshift+0x52>
 8018542:	21da      	movs	r1, #218	; 0xda
 8018544:	0002      	movs	r2, r0
 8018546:	4b27      	ldr	r3, [pc, #156]	; (80185e4 <__lshift+0xd8>)
 8018548:	4827      	ldr	r0, [pc, #156]	; (80185e8 <__lshift+0xdc>)
 801854a:	31ff      	adds	r1, #255	; 0xff
 801854c:	f000 fb4e 	bl	8018bec <__assert_func>
 8018550:	3101      	adds	r1, #1
 8018552:	005b      	lsls	r3, r3, #1
 8018554:	e7e7      	b.n	8018526 <__lshift+0x1a>
 8018556:	2200      	movs	r2, #0
 8018558:	0098      	lsls	r0, r3, #2
 801855a:	500a      	str	r2, [r1, r0]
 801855c:	3301      	adds	r3, #1
 801855e:	42ab      	cmp	r3, r5
 8018560:	dbf9      	blt.n	8018556 <__lshift+0x4a>
 8018562:	43eb      	mvns	r3, r5
 8018564:	17db      	asrs	r3, r3, #31
 8018566:	401d      	ands	r5, r3
 8018568:	9b03      	ldr	r3, [sp, #12]
 801856a:	00ad      	lsls	r5, r5, #2
 801856c:	211f      	movs	r1, #31
 801856e:	0038      	movs	r0, r7
 8018570:	195d      	adds	r5, r3, r5
 8018572:	0023      	movs	r3, r4
 8018574:	6922      	ldr	r2, [r4, #16]
 8018576:	3314      	adds	r3, #20
 8018578:	0092      	lsls	r2, r2, #2
 801857a:	4008      	ands	r0, r1
 801857c:	4684      	mov	ip, r0
 801857e:	189a      	adds	r2, r3, r2
 8018580:	420f      	tst	r7, r1
 8018582:	d02a      	beq.n	80185da <__lshift+0xce>
 8018584:	3101      	adds	r1, #1
 8018586:	1a09      	subs	r1, r1, r0
 8018588:	9105      	str	r1, [sp, #20]
 801858a:	2100      	movs	r1, #0
 801858c:	9503      	str	r5, [sp, #12]
 801858e:	4667      	mov	r7, ip
 8018590:	6818      	ldr	r0, [r3, #0]
 8018592:	40b8      	lsls	r0, r7
 8018594:	4301      	orrs	r1, r0
 8018596:	9803      	ldr	r0, [sp, #12]
 8018598:	c002      	stmia	r0!, {r1}
 801859a:	cb02      	ldmia	r3!, {r1}
 801859c:	9003      	str	r0, [sp, #12]
 801859e:	9805      	ldr	r0, [sp, #20]
 80185a0:	40c1      	lsrs	r1, r0
 80185a2:	429a      	cmp	r2, r3
 80185a4:	d8f3      	bhi.n	801858e <__lshift+0x82>
 80185a6:	0020      	movs	r0, r4
 80185a8:	3015      	adds	r0, #21
 80185aa:	2304      	movs	r3, #4
 80185ac:	4282      	cmp	r2, r0
 80185ae:	d304      	bcc.n	80185ba <__lshift+0xae>
 80185b0:	1b13      	subs	r3, r2, r4
 80185b2:	3b15      	subs	r3, #21
 80185b4:	089b      	lsrs	r3, r3, #2
 80185b6:	3301      	adds	r3, #1
 80185b8:	009b      	lsls	r3, r3, #2
 80185ba:	50e9      	str	r1, [r5, r3]
 80185bc:	2900      	cmp	r1, #0
 80185be:	d002      	beq.n	80185c6 <__lshift+0xba>
 80185c0:	9b02      	ldr	r3, [sp, #8]
 80185c2:	3302      	adds	r3, #2
 80185c4:	9301      	str	r3, [sp, #4]
 80185c6:	9b01      	ldr	r3, [sp, #4]
 80185c8:	9804      	ldr	r0, [sp, #16]
 80185ca:	3b01      	subs	r3, #1
 80185cc:	0021      	movs	r1, r4
 80185ce:	6133      	str	r3, [r6, #16]
 80185d0:	f7ff fdb2 	bl	8018138 <_Bfree>
 80185d4:	0030      	movs	r0, r6
 80185d6:	b007      	add	sp, #28
 80185d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185da:	cb02      	ldmia	r3!, {r1}
 80185dc:	c502      	stmia	r5!, {r1}
 80185de:	429a      	cmp	r2, r3
 80185e0:	d8fb      	bhi.n	80185da <__lshift+0xce>
 80185e2:	e7f0      	b.n	80185c6 <__lshift+0xba>
 80185e4:	0801dac1 	.word	0x0801dac1
 80185e8:	0801dbb0 	.word	0x0801dbb0

080185ec <__mcmp>:
 80185ec:	6902      	ldr	r2, [r0, #16]
 80185ee:	690b      	ldr	r3, [r1, #16]
 80185f0:	b530      	push	{r4, r5, lr}
 80185f2:	0004      	movs	r4, r0
 80185f4:	1ad0      	subs	r0, r2, r3
 80185f6:	429a      	cmp	r2, r3
 80185f8:	d10d      	bne.n	8018616 <__mcmp+0x2a>
 80185fa:	009b      	lsls	r3, r3, #2
 80185fc:	3414      	adds	r4, #20
 80185fe:	3114      	adds	r1, #20
 8018600:	18e2      	adds	r2, r4, r3
 8018602:	18c9      	adds	r1, r1, r3
 8018604:	3a04      	subs	r2, #4
 8018606:	3904      	subs	r1, #4
 8018608:	6815      	ldr	r5, [r2, #0]
 801860a:	680b      	ldr	r3, [r1, #0]
 801860c:	429d      	cmp	r5, r3
 801860e:	d003      	beq.n	8018618 <__mcmp+0x2c>
 8018610:	2001      	movs	r0, #1
 8018612:	429d      	cmp	r5, r3
 8018614:	d303      	bcc.n	801861e <__mcmp+0x32>
 8018616:	bd30      	pop	{r4, r5, pc}
 8018618:	4294      	cmp	r4, r2
 801861a:	d3f3      	bcc.n	8018604 <__mcmp+0x18>
 801861c:	e7fb      	b.n	8018616 <__mcmp+0x2a>
 801861e:	4240      	negs	r0, r0
 8018620:	e7f9      	b.n	8018616 <__mcmp+0x2a>
	...

08018624 <__mdiff>:
 8018624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018626:	000e      	movs	r6, r1
 8018628:	0007      	movs	r7, r0
 801862a:	0011      	movs	r1, r2
 801862c:	0030      	movs	r0, r6
 801862e:	b087      	sub	sp, #28
 8018630:	0014      	movs	r4, r2
 8018632:	f7ff ffdb 	bl	80185ec <__mcmp>
 8018636:	1e05      	subs	r5, r0, #0
 8018638:	d110      	bne.n	801865c <__mdiff+0x38>
 801863a:	0001      	movs	r1, r0
 801863c:	0038      	movs	r0, r7
 801863e:	f7ff fd53 	bl	80180e8 <_Balloc>
 8018642:	1e02      	subs	r2, r0, #0
 8018644:	d104      	bne.n	8018650 <__mdiff+0x2c>
 8018646:	4b40      	ldr	r3, [pc, #256]	; (8018748 <__mdiff+0x124>)
 8018648:	4940      	ldr	r1, [pc, #256]	; (801874c <__mdiff+0x128>)
 801864a:	4841      	ldr	r0, [pc, #260]	; (8018750 <__mdiff+0x12c>)
 801864c:	f000 face 	bl	8018bec <__assert_func>
 8018650:	2301      	movs	r3, #1
 8018652:	6145      	str	r5, [r0, #20]
 8018654:	6103      	str	r3, [r0, #16]
 8018656:	0010      	movs	r0, r2
 8018658:	b007      	add	sp, #28
 801865a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801865c:	2301      	movs	r3, #1
 801865e:	9301      	str	r3, [sp, #4]
 8018660:	2800      	cmp	r0, #0
 8018662:	db04      	blt.n	801866e <__mdiff+0x4a>
 8018664:	0023      	movs	r3, r4
 8018666:	0034      	movs	r4, r6
 8018668:	001e      	movs	r6, r3
 801866a:	2300      	movs	r3, #0
 801866c:	9301      	str	r3, [sp, #4]
 801866e:	0038      	movs	r0, r7
 8018670:	6861      	ldr	r1, [r4, #4]
 8018672:	f7ff fd39 	bl	80180e8 <_Balloc>
 8018676:	1e02      	subs	r2, r0, #0
 8018678:	d103      	bne.n	8018682 <__mdiff+0x5e>
 801867a:	2190      	movs	r1, #144	; 0x90
 801867c:	4b32      	ldr	r3, [pc, #200]	; (8018748 <__mdiff+0x124>)
 801867e:	0089      	lsls	r1, r1, #2
 8018680:	e7e3      	b.n	801864a <__mdiff+0x26>
 8018682:	9b01      	ldr	r3, [sp, #4]
 8018684:	2700      	movs	r7, #0
 8018686:	60c3      	str	r3, [r0, #12]
 8018688:	6920      	ldr	r0, [r4, #16]
 801868a:	3414      	adds	r4, #20
 801868c:	9401      	str	r4, [sp, #4]
 801868e:	9b01      	ldr	r3, [sp, #4]
 8018690:	0084      	lsls	r4, r0, #2
 8018692:	191b      	adds	r3, r3, r4
 8018694:	0034      	movs	r4, r6
 8018696:	9302      	str	r3, [sp, #8]
 8018698:	6933      	ldr	r3, [r6, #16]
 801869a:	3414      	adds	r4, #20
 801869c:	0099      	lsls	r1, r3, #2
 801869e:	1863      	adds	r3, r4, r1
 80186a0:	9303      	str	r3, [sp, #12]
 80186a2:	0013      	movs	r3, r2
 80186a4:	3314      	adds	r3, #20
 80186a6:	469c      	mov	ip, r3
 80186a8:	9305      	str	r3, [sp, #20]
 80186aa:	9b01      	ldr	r3, [sp, #4]
 80186ac:	9304      	str	r3, [sp, #16]
 80186ae:	9b04      	ldr	r3, [sp, #16]
 80186b0:	cc02      	ldmia	r4!, {r1}
 80186b2:	cb20      	ldmia	r3!, {r5}
 80186b4:	9304      	str	r3, [sp, #16]
 80186b6:	b2ab      	uxth	r3, r5
 80186b8:	19df      	adds	r7, r3, r7
 80186ba:	b28b      	uxth	r3, r1
 80186bc:	1afb      	subs	r3, r7, r3
 80186be:	0c2d      	lsrs	r5, r5, #16
 80186c0:	0c09      	lsrs	r1, r1, #16
 80186c2:	1a69      	subs	r1, r5, r1
 80186c4:	141d      	asrs	r5, r3, #16
 80186c6:	1949      	adds	r1, r1, r5
 80186c8:	140f      	asrs	r7, r1, #16
 80186ca:	b29b      	uxth	r3, r3
 80186cc:	0409      	lsls	r1, r1, #16
 80186ce:	430b      	orrs	r3, r1
 80186d0:	4661      	mov	r1, ip
 80186d2:	c108      	stmia	r1!, {r3}
 80186d4:	9b03      	ldr	r3, [sp, #12]
 80186d6:	468c      	mov	ip, r1
 80186d8:	42a3      	cmp	r3, r4
 80186da:	d8e8      	bhi.n	80186ae <__mdiff+0x8a>
 80186dc:	0031      	movs	r1, r6
 80186de:	9c03      	ldr	r4, [sp, #12]
 80186e0:	3115      	adds	r1, #21
 80186e2:	2304      	movs	r3, #4
 80186e4:	428c      	cmp	r4, r1
 80186e6:	d304      	bcc.n	80186f2 <__mdiff+0xce>
 80186e8:	1ba3      	subs	r3, r4, r6
 80186ea:	3b15      	subs	r3, #21
 80186ec:	089b      	lsrs	r3, r3, #2
 80186ee:	3301      	adds	r3, #1
 80186f0:	009b      	lsls	r3, r3, #2
 80186f2:	9901      	ldr	r1, [sp, #4]
 80186f4:	18cc      	adds	r4, r1, r3
 80186f6:	9905      	ldr	r1, [sp, #20]
 80186f8:	0026      	movs	r6, r4
 80186fa:	18cb      	adds	r3, r1, r3
 80186fc:	469c      	mov	ip, r3
 80186fe:	9902      	ldr	r1, [sp, #8]
 8018700:	428e      	cmp	r6, r1
 8018702:	d310      	bcc.n	8018726 <__mdiff+0x102>
 8018704:	9e02      	ldr	r6, [sp, #8]
 8018706:	1ee5      	subs	r5, r4, #3
 8018708:	2100      	movs	r1, #0
 801870a:	42ae      	cmp	r6, r5
 801870c:	d304      	bcc.n	8018718 <__mdiff+0xf4>
 801870e:	0031      	movs	r1, r6
 8018710:	3103      	adds	r1, #3
 8018712:	1b09      	subs	r1, r1, r4
 8018714:	0889      	lsrs	r1, r1, #2
 8018716:	0089      	lsls	r1, r1, #2
 8018718:	185b      	adds	r3, r3, r1
 801871a:	3b04      	subs	r3, #4
 801871c:	6819      	ldr	r1, [r3, #0]
 801871e:	2900      	cmp	r1, #0
 8018720:	d00f      	beq.n	8018742 <__mdiff+0x11e>
 8018722:	6110      	str	r0, [r2, #16]
 8018724:	e797      	b.n	8018656 <__mdiff+0x32>
 8018726:	ce02      	ldmia	r6!, {r1}
 8018728:	b28d      	uxth	r5, r1
 801872a:	19ed      	adds	r5, r5, r7
 801872c:	0c0f      	lsrs	r7, r1, #16
 801872e:	1429      	asrs	r1, r5, #16
 8018730:	1879      	adds	r1, r7, r1
 8018732:	140f      	asrs	r7, r1, #16
 8018734:	b2ad      	uxth	r5, r5
 8018736:	0409      	lsls	r1, r1, #16
 8018738:	430d      	orrs	r5, r1
 801873a:	4661      	mov	r1, ip
 801873c:	c120      	stmia	r1!, {r5}
 801873e:	468c      	mov	ip, r1
 8018740:	e7dd      	b.n	80186fe <__mdiff+0xda>
 8018742:	3801      	subs	r0, #1
 8018744:	e7e9      	b.n	801871a <__mdiff+0xf6>
 8018746:	46c0      	nop			; (mov r8, r8)
 8018748:	0801dac1 	.word	0x0801dac1
 801874c:	00000232 	.word	0x00000232
 8018750:	0801dbb0 	.word	0x0801dbb0

08018754 <__ulp>:
 8018754:	4b0f      	ldr	r3, [pc, #60]	; (8018794 <__ulp+0x40>)
 8018756:	4019      	ands	r1, r3
 8018758:	4b0f      	ldr	r3, [pc, #60]	; (8018798 <__ulp+0x44>)
 801875a:	18c9      	adds	r1, r1, r3
 801875c:	2900      	cmp	r1, #0
 801875e:	dd04      	ble.n	801876a <__ulp+0x16>
 8018760:	2200      	movs	r2, #0
 8018762:	000b      	movs	r3, r1
 8018764:	0010      	movs	r0, r2
 8018766:	0019      	movs	r1, r3
 8018768:	4770      	bx	lr
 801876a:	4249      	negs	r1, r1
 801876c:	2200      	movs	r2, #0
 801876e:	2300      	movs	r3, #0
 8018770:	1509      	asrs	r1, r1, #20
 8018772:	2913      	cmp	r1, #19
 8018774:	dc04      	bgt.n	8018780 <__ulp+0x2c>
 8018776:	2080      	movs	r0, #128	; 0x80
 8018778:	0300      	lsls	r0, r0, #12
 801877a:	4108      	asrs	r0, r1
 801877c:	0003      	movs	r3, r0
 801877e:	e7f1      	b.n	8018764 <__ulp+0x10>
 8018780:	3914      	subs	r1, #20
 8018782:	2001      	movs	r0, #1
 8018784:	291e      	cmp	r1, #30
 8018786:	dc02      	bgt.n	801878e <__ulp+0x3a>
 8018788:	2080      	movs	r0, #128	; 0x80
 801878a:	0600      	lsls	r0, r0, #24
 801878c:	40c8      	lsrs	r0, r1
 801878e:	0002      	movs	r2, r0
 8018790:	e7e8      	b.n	8018764 <__ulp+0x10>
 8018792:	46c0      	nop			; (mov r8, r8)
 8018794:	7ff00000 	.word	0x7ff00000
 8018798:	fcc00000 	.word	0xfcc00000

0801879c <__b2d>:
 801879c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801879e:	0006      	movs	r6, r0
 80187a0:	6903      	ldr	r3, [r0, #16]
 80187a2:	3614      	adds	r6, #20
 80187a4:	009b      	lsls	r3, r3, #2
 80187a6:	18f3      	adds	r3, r6, r3
 80187a8:	1f1d      	subs	r5, r3, #4
 80187aa:	682c      	ldr	r4, [r5, #0]
 80187ac:	000f      	movs	r7, r1
 80187ae:	0020      	movs	r0, r4
 80187b0:	9301      	str	r3, [sp, #4]
 80187b2:	f7ff fd5b 	bl	801826c <__hi0bits>
 80187b6:	2320      	movs	r3, #32
 80187b8:	1a1b      	subs	r3, r3, r0
 80187ba:	491f      	ldr	r1, [pc, #124]	; (8018838 <__b2d+0x9c>)
 80187bc:	603b      	str	r3, [r7, #0]
 80187be:	280a      	cmp	r0, #10
 80187c0:	dc16      	bgt.n	80187f0 <__b2d+0x54>
 80187c2:	230b      	movs	r3, #11
 80187c4:	0027      	movs	r7, r4
 80187c6:	1a1b      	subs	r3, r3, r0
 80187c8:	40df      	lsrs	r7, r3
 80187ca:	4339      	orrs	r1, r7
 80187cc:	469c      	mov	ip, r3
 80187ce:	000b      	movs	r3, r1
 80187d0:	2100      	movs	r1, #0
 80187d2:	42ae      	cmp	r6, r5
 80187d4:	d202      	bcs.n	80187dc <__b2d+0x40>
 80187d6:	9901      	ldr	r1, [sp, #4]
 80187d8:	3908      	subs	r1, #8
 80187da:	6809      	ldr	r1, [r1, #0]
 80187dc:	3015      	adds	r0, #21
 80187de:	4084      	lsls	r4, r0
 80187e0:	4660      	mov	r0, ip
 80187e2:	40c1      	lsrs	r1, r0
 80187e4:	430c      	orrs	r4, r1
 80187e6:	0022      	movs	r2, r4
 80187e8:	0010      	movs	r0, r2
 80187ea:	0019      	movs	r1, r3
 80187ec:	b003      	add	sp, #12
 80187ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187f0:	2700      	movs	r7, #0
 80187f2:	42ae      	cmp	r6, r5
 80187f4:	d202      	bcs.n	80187fc <__b2d+0x60>
 80187f6:	9d01      	ldr	r5, [sp, #4]
 80187f8:	3d08      	subs	r5, #8
 80187fa:	682f      	ldr	r7, [r5, #0]
 80187fc:	230b      	movs	r3, #11
 80187fe:	425b      	negs	r3, r3
 8018800:	469c      	mov	ip, r3
 8018802:	4484      	add	ip, r0
 8018804:	280b      	cmp	r0, #11
 8018806:	d013      	beq.n	8018830 <__b2d+0x94>
 8018808:	4663      	mov	r3, ip
 801880a:	2020      	movs	r0, #32
 801880c:	409c      	lsls	r4, r3
 801880e:	1ac0      	subs	r0, r0, r3
 8018810:	003b      	movs	r3, r7
 8018812:	40c3      	lsrs	r3, r0
 8018814:	431c      	orrs	r4, r3
 8018816:	4321      	orrs	r1, r4
 8018818:	000b      	movs	r3, r1
 801881a:	2100      	movs	r1, #0
 801881c:	42b5      	cmp	r5, r6
 801881e:	d901      	bls.n	8018824 <__b2d+0x88>
 8018820:	3d04      	subs	r5, #4
 8018822:	6829      	ldr	r1, [r5, #0]
 8018824:	4664      	mov	r4, ip
 8018826:	40c1      	lsrs	r1, r0
 8018828:	40a7      	lsls	r7, r4
 801882a:	430f      	orrs	r7, r1
 801882c:	003a      	movs	r2, r7
 801882e:	e7db      	b.n	80187e8 <__b2d+0x4c>
 8018830:	4321      	orrs	r1, r4
 8018832:	000b      	movs	r3, r1
 8018834:	e7fa      	b.n	801882c <__b2d+0x90>
 8018836:	46c0      	nop			; (mov r8, r8)
 8018838:	3ff00000 	.word	0x3ff00000

0801883c <__d2b>:
 801883c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801883e:	2101      	movs	r1, #1
 8018840:	0014      	movs	r4, r2
 8018842:	001e      	movs	r6, r3
 8018844:	9f08      	ldr	r7, [sp, #32]
 8018846:	f7ff fc4f 	bl	80180e8 <_Balloc>
 801884a:	1e05      	subs	r5, r0, #0
 801884c:	d105      	bne.n	801885a <__d2b+0x1e>
 801884e:	0002      	movs	r2, r0
 8018850:	4b26      	ldr	r3, [pc, #152]	; (80188ec <__d2b+0xb0>)
 8018852:	4927      	ldr	r1, [pc, #156]	; (80188f0 <__d2b+0xb4>)
 8018854:	4827      	ldr	r0, [pc, #156]	; (80188f4 <__d2b+0xb8>)
 8018856:	f000 f9c9 	bl	8018bec <__assert_func>
 801885a:	0333      	lsls	r3, r6, #12
 801885c:	0076      	lsls	r6, r6, #1
 801885e:	0b1b      	lsrs	r3, r3, #12
 8018860:	0d76      	lsrs	r6, r6, #21
 8018862:	d124      	bne.n	80188ae <__d2b+0x72>
 8018864:	9301      	str	r3, [sp, #4]
 8018866:	2c00      	cmp	r4, #0
 8018868:	d027      	beq.n	80188ba <__d2b+0x7e>
 801886a:	4668      	mov	r0, sp
 801886c:	9400      	str	r4, [sp, #0]
 801886e:	f7ff fd17 	bl	80182a0 <__lo0bits>
 8018872:	9c00      	ldr	r4, [sp, #0]
 8018874:	2800      	cmp	r0, #0
 8018876:	d01e      	beq.n	80188b6 <__d2b+0x7a>
 8018878:	9b01      	ldr	r3, [sp, #4]
 801887a:	2120      	movs	r1, #32
 801887c:	001a      	movs	r2, r3
 801887e:	1a09      	subs	r1, r1, r0
 8018880:	408a      	lsls	r2, r1
 8018882:	40c3      	lsrs	r3, r0
 8018884:	4322      	orrs	r2, r4
 8018886:	616a      	str	r2, [r5, #20]
 8018888:	9301      	str	r3, [sp, #4]
 801888a:	9c01      	ldr	r4, [sp, #4]
 801888c:	61ac      	str	r4, [r5, #24]
 801888e:	1e63      	subs	r3, r4, #1
 8018890:	419c      	sbcs	r4, r3
 8018892:	3401      	adds	r4, #1
 8018894:	612c      	str	r4, [r5, #16]
 8018896:	2e00      	cmp	r6, #0
 8018898:	d018      	beq.n	80188cc <__d2b+0x90>
 801889a:	4b17      	ldr	r3, [pc, #92]	; (80188f8 <__d2b+0xbc>)
 801889c:	18f6      	adds	r6, r6, r3
 801889e:	2335      	movs	r3, #53	; 0x35
 80188a0:	1836      	adds	r6, r6, r0
 80188a2:	1a18      	subs	r0, r3, r0
 80188a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188a6:	603e      	str	r6, [r7, #0]
 80188a8:	6018      	str	r0, [r3, #0]
 80188aa:	0028      	movs	r0, r5
 80188ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80188ae:	2280      	movs	r2, #128	; 0x80
 80188b0:	0352      	lsls	r2, r2, #13
 80188b2:	4313      	orrs	r3, r2
 80188b4:	e7d6      	b.n	8018864 <__d2b+0x28>
 80188b6:	616c      	str	r4, [r5, #20]
 80188b8:	e7e7      	b.n	801888a <__d2b+0x4e>
 80188ba:	a801      	add	r0, sp, #4
 80188bc:	f7ff fcf0 	bl	80182a0 <__lo0bits>
 80188c0:	2401      	movs	r4, #1
 80188c2:	9b01      	ldr	r3, [sp, #4]
 80188c4:	612c      	str	r4, [r5, #16]
 80188c6:	616b      	str	r3, [r5, #20]
 80188c8:	3020      	adds	r0, #32
 80188ca:	e7e4      	b.n	8018896 <__d2b+0x5a>
 80188cc:	4b0b      	ldr	r3, [pc, #44]	; (80188fc <__d2b+0xc0>)
 80188ce:	18c0      	adds	r0, r0, r3
 80188d0:	4b0b      	ldr	r3, [pc, #44]	; (8018900 <__d2b+0xc4>)
 80188d2:	6038      	str	r0, [r7, #0]
 80188d4:	18e3      	adds	r3, r4, r3
 80188d6:	009b      	lsls	r3, r3, #2
 80188d8:	18eb      	adds	r3, r5, r3
 80188da:	6958      	ldr	r0, [r3, #20]
 80188dc:	f7ff fcc6 	bl	801826c <__hi0bits>
 80188e0:	0164      	lsls	r4, r4, #5
 80188e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188e4:	1a24      	subs	r4, r4, r0
 80188e6:	601c      	str	r4, [r3, #0]
 80188e8:	e7df      	b.n	80188aa <__d2b+0x6e>
 80188ea:	46c0      	nop			; (mov r8, r8)
 80188ec:	0801dac1 	.word	0x0801dac1
 80188f0:	0000030a 	.word	0x0000030a
 80188f4:	0801dbb0 	.word	0x0801dbb0
 80188f8:	fffffbcd 	.word	0xfffffbcd
 80188fc:	fffffbce 	.word	0xfffffbce
 8018900:	3fffffff 	.word	0x3fffffff

08018904 <__ratio>:
 8018904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018906:	b085      	sub	sp, #20
 8018908:	000d      	movs	r5, r1
 801890a:	a902      	add	r1, sp, #8
 801890c:	0004      	movs	r4, r0
 801890e:	f7ff ff45 	bl	801879c <__b2d>
 8018912:	9000      	str	r0, [sp, #0]
 8018914:	9101      	str	r1, [sp, #4]
 8018916:	9e00      	ldr	r6, [sp, #0]
 8018918:	9f01      	ldr	r7, [sp, #4]
 801891a:	0028      	movs	r0, r5
 801891c:	a903      	add	r1, sp, #12
 801891e:	f7ff ff3d 	bl	801879c <__b2d>
 8018922:	6924      	ldr	r4, [r4, #16]
 8018924:	692d      	ldr	r5, [r5, #16]
 8018926:	0002      	movs	r2, r0
 8018928:	1b65      	subs	r5, r4, r5
 801892a:	016c      	lsls	r4, r5, #5
 801892c:	46a4      	mov	ip, r4
 801892e:	9d03      	ldr	r5, [sp, #12]
 8018930:	9c02      	ldr	r4, [sp, #8]
 8018932:	000b      	movs	r3, r1
 8018934:	1b64      	subs	r4, r4, r5
 8018936:	4464      	add	r4, ip
 8018938:	0525      	lsls	r5, r4, #20
 801893a:	2c00      	cmp	r4, #0
 801893c:	dd07      	ble.n	801894e <__ratio+0x4a>
 801893e:	9901      	ldr	r1, [sp, #4]
 8018940:	186f      	adds	r7, r5, r1
 8018942:	0030      	movs	r0, r6
 8018944:	0039      	movs	r1, r7
 8018946:	f7e8 fef3 	bl	8001730 <__aeabi_ddiv>
 801894a:	b005      	add	sp, #20
 801894c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801894e:	1b4b      	subs	r3, r1, r5
 8018950:	e7f7      	b.n	8018942 <__ratio+0x3e>

08018952 <__copybits>:
 8018952:	b570      	push	{r4, r5, r6, lr}
 8018954:	0015      	movs	r5, r2
 8018956:	6913      	ldr	r3, [r2, #16]
 8018958:	3514      	adds	r5, #20
 801895a:	009c      	lsls	r4, r3, #2
 801895c:	0006      	movs	r6, r0
 801895e:	002b      	movs	r3, r5
 8018960:	3901      	subs	r1, #1
 8018962:	1149      	asrs	r1, r1, #5
 8018964:	3101      	adds	r1, #1
 8018966:	0089      	lsls	r1, r1, #2
 8018968:	1841      	adds	r1, r0, r1
 801896a:	192c      	adds	r4, r5, r4
 801896c:	429c      	cmp	r4, r3
 801896e:	d80d      	bhi.n	801898c <__copybits+0x3a>
 8018970:	0015      	movs	r5, r2
 8018972:	3511      	adds	r5, #17
 8018974:	2300      	movs	r3, #0
 8018976:	42a5      	cmp	r5, r4
 8018978:	d803      	bhi.n	8018982 <__copybits+0x30>
 801897a:	1aa3      	subs	r3, r4, r2
 801897c:	3b11      	subs	r3, #17
 801897e:	089b      	lsrs	r3, r3, #2
 8018980:	009b      	lsls	r3, r3, #2
 8018982:	18c0      	adds	r0, r0, r3
 8018984:	2300      	movs	r3, #0
 8018986:	4281      	cmp	r1, r0
 8018988:	d803      	bhi.n	8018992 <__copybits+0x40>
 801898a:	bd70      	pop	{r4, r5, r6, pc}
 801898c:	cb20      	ldmia	r3!, {r5}
 801898e:	c620      	stmia	r6!, {r5}
 8018990:	e7ec      	b.n	801896c <__copybits+0x1a>
 8018992:	c008      	stmia	r0!, {r3}
 8018994:	e7f7      	b.n	8018986 <__copybits+0x34>

08018996 <__any_on>:
 8018996:	0002      	movs	r2, r0
 8018998:	6900      	ldr	r0, [r0, #16]
 801899a:	b510      	push	{r4, lr}
 801899c:	3214      	adds	r2, #20
 801899e:	114b      	asrs	r3, r1, #5
 80189a0:	4298      	cmp	r0, r3
 80189a2:	db13      	blt.n	80189cc <__any_on+0x36>
 80189a4:	dd0c      	ble.n	80189c0 <__any_on+0x2a>
 80189a6:	241f      	movs	r4, #31
 80189a8:	0008      	movs	r0, r1
 80189aa:	4020      	ands	r0, r4
 80189ac:	4221      	tst	r1, r4
 80189ae:	d007      	beq.n	80189c0 <__any_on+0x2a>
 80189b0:	0099      	lsls	r1, r3, #2
 80189b2:	588c      	ldr	r4, [r1, r2]
 80189b4:	0021      	movs	r1, r4
 80189b6:	40c1      	lsrs	r1, r0
 80189b8:	4081      	lsls	r1, r0
 80189ba:	2001      	movs	r0, #1
 80189bc:	428c      	cmp	r4, r1
 80189be:	d104      	bne.n	80189ca <__any_on+0x34>
 80189c0:	009b      	lsls	r3, r3, #2
 80189c2:	18d3      	adds	r3, r2, r3
 80189c4:	4293      	cmp	r3, r2
 80189c6:	d803      	bhi.n	80189d0 <__any_on+0x3a>
 80189c8:	2000      	movs	r0, #0
 80189ca:	bd10      	pop	{r4, pc}
 80189cc:	0003      	movs	r3, r0
 80189ce:	e7f7      	b.n	80189c0 <__any_on+0x2a>
 80189d0:	3b04      	subs	r3, #4
 80189d2:	6819      	ldr	r1, [r3, #0]
 80189d4:	2900      	cmp	r1, #0
 80189d6:	d0f5      	beq.n	80189c4 <__any_on+0x2e>
 80189d8:	2001      	movs	r0, #1
 80189da:	e7f6      	b.n	80189ca <__any_on+0x34>

080189dc <frexp>:
 80189dc:	b570      	push	{r4, r5, r6, lr}
 80189de:	0014      	movs	r4, r2
 80189e0:	2500      	movs	r5, #0
 80189e2:	6025      	str	r5, [r4, #0]
 80189e4:	4d10      	ldr	r5, [pc, #64]	; (8018a28 <frexp+0x4c>)
 80189e6:	004b      	lsls	r3, r1, #1
 80189e8:	000a      	movs	r2, r1
 80189ea:	085b      	lsrs	r3, r3, #1
 80189ec:	42ab      	cmp	r3, r5
 80189ee:	dc1a      	bgt.n	8018a26 <frexp+0x4a>
 80189f0:	001d      	movs	r5, r3
 80189f2:	4305      	orrs	r5, r0
 80189f4:	d017      	beq.n	8018a26 <frexp+0x4a>
 80189f6:	4d0d      	ldr	r5, [pc, #52]	; (8018a2c <frexp+0x50>)
 80189f8:	4229      	tst	r1, r5
 80189fa:	d109      	bne.n	8018a10 <frexp+0x34>
 80189fc:	2200      	movs	r2, #0
 80189fe:	4b0c      	ldr	r3, [pc, #48]	; (8018a30 <frexp+0x54>)
 8018a00:	f7e9 fa9c 	bl	8001f3c <__aeabi_dmul>
 8018a04:	2536      	movs	r5, #54	; 0x36
 8018a06:	000a      	movs	r2, r1
 8018a08:	004b      	lsls	r3, r1, #1
 8018a0a:	426d      	negs	r5, r5
 8018a0c:	085b      	lsrs	r3, r3, #1
 8018a0e:	6025      	str	r5, [r4, #0]
 8018a10:	4d08      	ldr	r5, [pc, #32]	; (8018a34 <frexp+0x58>)
 8018a12:	151b      	asrs	r3, r3, #20
 8018a14:	195b      	adds	r3, r3, r5
 8018a16:	6825      	ldr	r5, [r4, #0]
 8018a18:	18eb      	adds	r3, r5, r3
 8018a1a:	6023      	str	r3, [r4, #0]
 8018a1c:	4b06      	ldr	r3, [pc, #24]	; (8018a38 <frexp+0x5c>)
 8018a1e:	401a      	ands	r2, r3
 8018a20:	4b06      	ldr	r3, [pc, #24]	; (8018a3c <frexp+0x60>)
 8018a22:	4313      	orrs	r3, r2
 8018a24:	0019      	movs	r1, r3
 8018a26:	bd70      	pop	{r4, r5, r6, pc}
 8018a28:	7fefffff 	.word	0x7fefffff
 8018a2c:	7ff00000 	.word	0x7ff00000
 8018a30:	43500000 	.word	0x43500000
 8018a34:	fffffc02 	.word	0xfffffc02
 8018a38:	800fffff 	.word	0x800fffff
 8018a3c:	3fe00000 	.word	0x3fe00000

08018a40 <nan>:
 8018a40:	2000      	movs	r0, #0
 8018a42:	4901      	ldr	r1, [pc, #4]	; (8018a48 <nan+0x8>)
 8018a44:	4770      	bx	lr
 8018a46:	46c0      	nop			; (mov r8, r8)
 8018a48:	7ff80000 	.word	0x7ff80000

08018a4c <__ssprint_r>:
 8018a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a4e:	6893      	ldr	r3, [r2, #8]
 8018a50:	b087      	sub	sp, #28
 8018a52:	000c      	movs	r4, r1
 8018a54:	0017      	movs	r7, r2
 8018a56:	9002      	str	r0, [sp, #8]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d065      	beq.n	8018b28 <__ssprint_r+0xdc>
 8018a5c:	6813      	ldr	r3, [r2, #0]
 8018a5e:	9303      	str	r3, [sp, #12]
 8018a60:	2300      	movs	r3, #0
 8018a62:	9305      	str	r3, [sp, #20]
 8018a64:	9301      	str	r3, [sp, #4]
 8018a66:	9b01      	ldr	r3, [sp, #4]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d02d      	beq.n	8018ac8 <__ssprint_r+0x7c>
 8018a6c:	68a6      	ldr	r6, [r4, #8]
 8018a6e:	42b3      	cmp	r3, r6
 8018a70:	d346      	bcc.n	8018b00 <__ssprint_r+0xb4>
 8018a72:	2390      	movs	r3, #144	; 0x90
 8018a74:	89a2      	ldrh	r2, [r4, #12]
 8018a76:	00db      	lsls	r3, r3, #3
 8018a78:	421a      	tst	r2, r3
 8018a7a:	d041      	beq.n	8018b00 <__ssprint_r+0xb4>
 8018a7c:	6921      	ldr	r1, [r4, #16]
 8018a7e:	6823      	ldr	r3, [r4, #0]
 8018a80:	6965      	ldr	r5, [r4, #20]
 8018a82:	1a5b      	subs	r3, r3, r1
 8018a84:	9304      	str	r3, [sp, #16]
 8018a86:	2303      	movs	r3, #3
 8018a88:	435d      	muls	r5, r3
 8018a8a:	0feb      	lsrs	r3, r5, #31
 8018a8c:	195d      	adds	r5, r3, r5
 8018a8e:	9b04      	ldr	r3, [sp, #16]
 8018a90:	9801      	ldr	r0, [sp, #4]
 8018a92:	3301      	adds	r3, #1
 8018a94:	181b      	adds	r3, r3, r0
 8018a96:	106d      	asrs	r5, r5, #1
 8018a98:	42ab      	cmp	r3, r5
 8018a9a:	d900      	bls.n	8018a9e <__ssprint_r+0x52>
 8018a9c:	001d      	movs	r5, r3
 8018a9e:	0553      	lsls	r3, r2, #21
 8018aa0:	d546      	bpl.n	8018b30 <__ssprint_r+0xe4>
 8018aa2:	0029      	movs	r1, r5
 8018aa4:	9802      	ldr	r0, [sp, #8]
 8018aa6:	f7fb f991 	bl	8013dcc <_malloc_r>
 8018aaa:	1e06      	subs	r6, r0, #0
 8018aac:	d116      	bne.n	8018adc <__ssprint_r+0x90>
 8018aae:	230c      	movs	r3, #12
 8018ab0:	9a02      	ldr	r2, [sp, #8]
 8018ab2:	2001      	movs	r0, #1
 8018ab4:	6013      	str	r3, [r2, #0]
 8018ab6:	2340      	movs	r3, #64	; 0x40
 8018ab8:	89a2      	ldrh	r2, [r4, #12]
 8018aba:	4240      	negs	r0, r0
 8018abc:	4313      	orrs	r3, r2
 8018abe:	81a3      	strh	r3, [r4, #12]
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	60bb      	str	r3, [r7, #8]
 8018ac4:	607b      	str	r3, [r7, #4]
 8018ac6:	e031      	b.n	8018b2c <__ssprint_r+0xe0>
 8018ac8:	9b03      	ldr	r3, [sp, #12]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	9305      	str	r3, [sp, #20]
 8018ace:	9b03      	ldr	r3, [sp, #12]
 8018ad0:	685b      	ldr	r3, [r3, #4]
 8018ad2:	9301      	str	r3, [sp, #4]
 8018ad4:	9b03      	ldr	r3, [sp, #12]
 8018ad6:	3308      	adds	r3, #8
 8018ad8:	9303      	str	r3, [sp, #12]
 8018ada:	e7c4      	b.n	8018a66 <__ssprint_r+0x1a>
 8018adc:	9a04      	ldr	r2, [sp, #16]
 8018ade:	6921      	ldr	r1, [r4, #16]
 8018ae0:	f7fb fb96 	bl	8014210 <memcpy>
 8018ae4:	89a3      	ldrh	r3, [r4, #12]
 8018ae6:	4a18      	ldr	r2, [pc, #96]	; (8018b48 <__ssprint_r+0xfc>)
 8018ae8:	401a      	ands	r2, r3
 8018aea:	2380      	movs	r3, #128	; 0x80
 8018aec:	4313      	orrs	r3, r2
 8018aee:	81a3      	strh	r3, [r4, #12]
 8018af0:	9b04      	ldr	r3, [sp, #16]
 8018af2:	6126      	str	r6, [r4, #16]
 8018af4:	18f6      	adds	r6, r6, r3
 8018af6:	6026      	str	r6, [r4, #0]
 8018af8:	6165      	str	r5, [r4, #20]
 8018afa:	9e01      	ldr	r6, [sp, #4]
 8018afc:	1aed      	subs	r5, r5, r3
 8018afe:	60a5      	str	r5, [r4, #8]
 8018b00:	9b01      	ldr	r3, [sp, #4]
 8018b02:	429e      	cmp	r6, r3
 8018b04:	d900      	bls.n	8018b08 <__ssprint_r+0xbc>
 8018b06:	001e      	movs	r6, r3
 8018b08:	0032      	movs	r2, r6
 8018b0a:	9905      	ldr	r1, [sp, #20]
 8018b0c:	6820      	ldr	r0, [r4, #0]
 8018b0e:	f7ff fad8 	bl	80180c2 <memmove>
 8018b12:	68a3      	ldr	r3, [r4, #8]
 8018b14:	9a01      	ldr	r2, [sp, #4]
 8018b16:	1b9b      	subs	r3, r3, r6
 8018b18:	60a3      	str	r3, [r4, #8]
 8018b1a:	6823      	ldr	r3, [r4, #0]
 8018b1c:	199e      	adds	r6, r3, r6
 8018b1e:	68bb      	ldr	r3, [r7, #8]
 8018b20:	6026      	str	r6, [r4, #0]
 8018b22:	1a9b      	subs	r3, r3, r2
 8018b24:	60bb      	str	r3, [r7, #8]
 8018b26:	d1cf      	bne.n	8018ac8 <__ssprint_r+0x7c>
 8018b28:	2000      	movs	r0, #0
 8018b2a:	6078      	str	r0, [r7, #4]
 8018b2c:	b007      	add	sp, #28
 8018b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b30:	002a      	movs	r2, r5
 8018b32:	9802      	ldr	r0, [sp, #8]
 8018b34:	f7fb fbb2 	bl	801429c <_realloc_r>
 8018b38:	1e06      	subs	r6, r0, #0
 8018b3a:	d1d9      	bne.n	8018af0 <__ssprint_r+0xa4>
 8018b3c:	6921      	ldr	r1, [r4, #16]
 8018b3e:	9802      	ldr	r0, [sp, #8]
 8018b40:	f7fe fe6e 	bl	8017820 <_free_r>
 8018b44:	e7b3      	b.n	8018aae <__ssprint_r+0x62>
 8018b46:	46c0      	nop			; (mov r8, r8)
 8018b48:	fffffb7f 	.word	0xfffffb7f

08018b4c <__ascii_wctomb>:
 8018b4c:	0003      	movs	r3, r0
 8018b4e:	1e08      	subs	r0, r1, #0
 8018b50:	d005      	beq.n	8018b5e <__ascii_wctomb+0x12>
 8018b52:	2aff      	cmp	r2, #255	; 0xff
 8018b54:	d904      	bls.n	8018b60 <__ascii_wctomb+0x14>
 8018b56:	228a      	movs	r2, #138	; 0x8a
 8018b58:	2001      	movs	r0, #1
 8018b5a:	601a      	str	r2, [r3, #0]
 8018b5c:	4240      	negs	r0, r0
 8018b5e:	4770      	bx	lr
 8018b60:	2001      	movs	r0, #1
 8018b62:	700a      	strb	r2, [r1, #0]
 8018b64:	e7fb      	b.n	8018b5e <__ascii_wctomb+0x12>
	...

08018b68 <__register_exitproc>:
 8018b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b6a:	4f1e      	ldr	r7, [pc, #120]	; (8018be4 <__register_exitproc+0x7c>)
 8018b6c:	0004      	movs	r4, r0
 8018b6e:	6838      	ldr	r0, [r7, #0]
 8018b70:	0016      	movs	r6, r2
 8018b72:	9100      	str	r1, [sp, #0]
 8018b74:	9301      	str	r3, [sp, #4]
 8018b76:	f7ff fa85 	bl	8018084 <__retarget_lock_acquire_recursive>
 8018b7a:	4b1b      	ldr	r3, [pc, #108]	; (8018be8 <__register_exitproc+0x80>)
 8018b7c:	6819      	ldr	r1, [r3, #0]
 8018b7e:	000b      	movs	r3, r1
 8018b80:	33fc      	adds	r3, #252	; 0xfc
 8018b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018b84:	2a00      	cmp	r2, #0
 8018b86:	d103      	bne.n	8018b90 <__register_exitproc+0x28>
 8018b88:	000a      	movs	r2, r1
 8018b8a:	324d      	adds	r2, #77	; 0x4d
 8018b8c:	32ff      	adds	r2, #255	; 0xff
 8018b8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8018b90:	6853      	ldr	r3, [r2, #4]
 8018b92:	6838      	ldr	r0, [r7, #0]
 8018b94:	2b1f      	cmp	r3, #31
 8018b96:	dd04      	ble.n	8018ba2 <__register_exitproc+0x3a>
 8018b98:	f7ff fa75 	bl	8018086 <__retarget_lock_release_recursive>
 8018b9c:	2001      	movs	r0, #1
 8018b9e:	4240      	negs	r0, r0
 8018ba0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018ba2:	2c00      	cmp	r4, #0
 8018ba4:	d014      	beq.n	8018bd0 <__register_exitproc+0x68>
 8018ba6:	0099      	lsls	r1, r3, #2
 8018ba8:	1851      	adds	r1, r2, r1
 8018baa:	000f      	movs	r7, r1
 8018bac:	3788      	adds	r7, #136	; 0x88
 8018bae:	603e      	str	r6, [r7, #0]
 8018bb0:	2701      	movs	r7, #1
 8018bb2:	0016      	movs	r6, r2
 8018bb4:	409f      	lsls	r7, r3
 8018bb6:	3685      	adds	r6, #133	; 0x85
 8018bb8:	36ff      	adds	r6, #255	; 0xff
 8018bba:	6875      	ldr	r5, [r6, #4]
 8018bbc:	31fc      	adds	r1, #252	; 0xfc
 8018bbe:	433d      	orrs	r5, r7
 8018bc0:	6075      	str	r5, [r6, #4]
 8018bc2:	9d01      	ldr	r5, [sp, #4]
 8018bc4:	60cd      	str	r5, [r1, #12]
 8018bc6:	2c02      	cmp	r4, #2
 8018bc8:	d102      	bne.n	8018bd0 <__register_exitproc+0x68>
 8018bca:	68b1      	ldr	r1, [r6, #8]
 8018bcc:	430f      	orrs	r7, r1
 8018bce:	60b7      	str	r7, [r6, #8]
 8018bd0:	1c59      	adds	r1, r3, #1
 8018bd2:	6051      	str	r1, [r2, #4]
 8018bd4:	3302      	adds	r3, #2
 8018bd6:	9900      	ldr	r1, [sp, #0]
 8018bd8:	009b      	lsls	r3, r3, #2
 8018bda:	5099      	str	r1, [r3, r2]
 8018bdc:	f7ff fa53 	bl	8018086 <__retarget_lock_release_recursive>
 8018be0:	2000      	movs	r0, #0
 8018be2:	e7dd      	b.n	8018ba0 <__register_exitproc+0x38>
 8018be4:	200008e8 	.word	0x200008e8
 8018be8:	0801da08 	.word	0x0801da08

08018bec <__assert_func>:
 8018bec:	b530      	push	{r4, r5, lr}
 8018bee:	0014      	movs	r4, r2
 8018bf0:	001a      	movs	r2, r3
 8018bf2:	4b09      	ldr	r3, [pc, #36]	; (8018c18 <__assert_func+0x2c>)
 8018bf4:	0005      	movs	r5, r0
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	b085      	sub	sp, #20
 8018bfa:	68d8      	ldr	r0, [r3, #12]
 8018bfc:	4b07      	ldr	r3, [pc, #28]	; (8018c1c <__assert_func+0x30>)
 8018bfe:	2c00      	cmp	r4, #0
 8018c00:	d101      	bne.n	8018c06 <__assert_func+0x1a>
 8018c02:	4b07      	ldr	r3, [pc, #28]	; (8018c20 <__assert_func+0x34>)
 8018c04:	001c      	movs	r4, r3
 8018c06:	9301      	str	r3, [sp, #4]
 8018c08:	9100      	str	r1, [sp, #0]
 8018c0a:	002b      	movs	r3, r5
 8018c0c:	4905      	ldr	r1, [pc, #20]	; (8018c24 <__assert_func+0x38>)
 8018c0e:	9402      	str	r4, [sp, #8]
 8018c10:	f000 f836 	bl	8018c80 <fiprintf>
 8018c14:	f000 fe1e 	bl	8019854 <abort>
 8018c18:	200000a8 	.word	0x200000a8
 8018c1c:	0801dd0c 	.word	0x0801dd0c
 8018c20:	0801dd47 	.word	0x0801dd47
 8018c24:	0801dd19 	.word	0x0801dd19

08018c28 <_calloc_r>:
 8018c28:	b510      	push	{r4, lr}
 8018c2a:	4351      	muls	r1, r2
 8018c2c:	f7fb f8ce 	bl	8013dcc <_malloc_r>
 8018c30:	1e04      	subs	r4, r0, #0
 8018c32:	d01a      	beq.n	8018c6a <_calloc_r+0x42>
 8018c34:	0003      	movs	r3, r0
 8018c36:	3b08      	subs	r3, #8
 8018c38:	685a      	ldr	r2, [r3, #4]
 8018c3a:	2303      	movs	r3, #3
 8018c3c:	439a      	bics	r2, r3
 8018c3e:	3a04      	subs	r2, #4
 8018c40:	2a24      	cmp	r2, #36	; 0x24
 8018c42:	d819      	bhi.n	8018c78 <_calloc_r+0x50>
 8018c44:	0003      	movs	r3, r0
 8018c46:	2a13      	cmp	r2, #19
 8018c48:	d90b      	bls.n	8018c62 <_calloc_r+0x3a>
 8018c4a:	2100      	movs	r1, #0
 8018c4c:	3308      	adds	r3, #8
 8018c4e:	6001      	str	r1, [r0, #0]
 8018c50:	6041      	str	r1, [r0, #4]
 8018c52:	2a1b      	cmp	r2, #27
 8018c54:	d905      	bls.n	8018c62 <_calloc_r+0x3a>
 8018c56:	6081      	str	r1, [r0, #8]
 8018c58:	60c1      	str	r1, [r0, #12]
 8018c5a:	2a24      	cmp	r2, #36	; 0x24
 8018c5c:	d007      	beq.n	8018c6e <_calloc_r+0x46>
 8018c5e:	0003      	movs	r3, r0
 8018c60:	3310      	adds	r3, #16
 8018c62:	2200      	movs	r2, #0
 8018c64:	601a      	str	r2, [r3, #0]
 8018c66:	605a      	str	r2, [r3, #4]
 8018c68:	609a      	str	r2, [r3, #8]
 8018c6a:	0020      	movs	r0, r4
 8018c6c:	bd10      	pop	{r4, pc}
 8018c6e:	0003      	movs	r3, r0
 8018c70:	6101      	str	r1, [r0, #16]
 8018c72:	3318      	adds	r3, #24
 8018c74:	6141      	str	r1, [r0, #20]
 8018c76:	e7f4      	b.n	8018c62 <_calloc_r+0x3a>
 8018c78:	2100      	movs	r1, #0
 8018c7a:	f7fb fad2 	bl	8014222 <memset>
 8018c7e:	e7f4      	b.n	8018c6a <_calloc_r+0x42>

08018c80 <fiprintf>:
 8018c80:	b40e      	push	{r1, r2, r3}
 8018c82:	b503      	push	{r0, r1, lr}
 8018c84:	0001      	movs	r1, r0
 8018c86:	ab03      	add	r3, sp, #12
 8018c88:	4804      	ldr	r0, [pc, #16]	; (8018c9c <fiprintf+0x1c>)
 8018c8a:	cb04      	ldmia	r3!, {r2}
 8018c8c:	6800      	ldr	r0, [r0, #0]
 8018c8e:	9301      	str	r3, [sp, #4]
 8018c90:	f000 f83a 	bl	8018d08 <_vfiprintf_r>
 8018c94:	b002      	add	sp, #8
 8018c96:	bc08      	pop	{r3}
 8018c98:	b003      	add	sp, #12
 8018c9a:	4718      	bx	r3
 8018c9c:	200000a8 	.word	0x200000a8

08018ca0 <__sprint_r>:
 8018ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ca2:	b085      	sub	sp, #20
 8018ca4:	9001      	str	r0, [sp, #4]
 8018ca6:	6890      	ldr	r0, [r2, #8]
 8018ca8:	000d      	movs	r5, r1
 8018caa:	0014      	movs	r4, r2
 8018cac:	2800      	cmp	r0, #0
 8018cae:	d102      	bne.n	8018cb6 <__sprint_r+0x16>
 8018cb0:	6050      	str	r0, [r2, #4]
 8018cb2:	b005      	add	sp, #20
 8018cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cb6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8018cb8:	049b      	lsls	r3, r3, #18
 8018cba:	d521      	bpl.n	8018d00 <__sprint_r+0x60>
 8018cbc:	6817      	ldr	r7, [r2, #0]
 8018cbe:	2600      	movs	r6, #0
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	9302      	str	r3, [sp, #8]
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	9300      	str	r3, [sp, #0]
 8018cc8:	089b      	lsrs	r3, r3, #2
 8018cca:	9303      	str	r3, [sp, #12]
 8018ccc:	9b03      	ldr	r3, [sp, #12]
 8018cce:	42b3      	cmp	r3, r6
 8018cd0:	dc0b      	bgt.n	8018cea <__sprint_r+0x4a>
 8018cd2:	2303      	movs	r3, #3
 8018cd4:	9800      	ldr	r0, [sp, #0]
 8018cd6:	3708      	adds	r7, #8
 8018cd8:	4398      	bics	r0, r3
 8018cda:	68a3      	ldr	r3, [r4, #8]
 8018cdc:	1a18      	subs	r0, r3, r0
 8018cde:	60a0      	str	r0, [r4, #8]
 8018ce0:	d1ed      	bne.n	8018cbe <__sprint_r+0x1e>
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	60a3      	str	r3, [r4, #8]
 8018ce6:	6063      	str	r3, [r4, #4]
 8018ce8:	e7e3      	b.n	8018cb2 <__sprint_r+0x12>
 8018cea:	9902      	ldr	r1, [sp, #8]
 8018cec:	00b3      	lsls	r3, r6, #2
 8018cee:	58c9      	ldr	r1, [r1, r3]
 8018cf0:	002a      	movs	r2, r5
 8018cf2:	9801      	ldr	r0, [sp, #4]
 8018cf4:	f000 ff2c 	bl	8019b50 <_fputwc_r>
 8018cf8:	1c43      	adds	r3, r0, #1
 8018cfa:	d0f2      	beq.n	8018ce2 <__sprint_r+0x42>
 8018cfc:	3601      	adds	r6, #1
 8018cfe:	e7e5      	b.n	8018ccc <__sprint_r+0x2c>
 8018d00:	9801      	ldr	r0, [sp, #4]
 8018d02:	f000 ff4f 	bl	8019ba4 <__sfvwrite_r>
 8018d06:	e7ec      	b.n	8018ce2 <__sprint_r+0x42>

08018d08 <_vfiprintf_r>:
 8018d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d0a:	b0c3      	sub	sp, #268	; 0x10c
 8018d0c:	001c      	movs	r4, r3
 8018d0e:	001d      	movs	r5, r3
 8018d10:	9006      	str	r0, [sp, #24]
 8018d12:	9103      	str	r1, [sp, #12]
 8018d14:	9207      	str	r2, [sp, #28]
 8018d16:	2800      	cmp	r0, #0
 8018d18:	d005      	beq.n	8018d26 <_vfiprintf_r+0x1e>
 8018d1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018d1c:	9304      	str	r3, [sp, #16]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d101      	bne.n	8018d26 <_vfiprintf_r+0x1e>
 8018d22:	f000 fead 	bl	8019a80 <__sinit>
 8018d26:	9b03      	ldr	r3, [sp, #12]
 8018d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018d2a:	07db      	lsls	r3, r3, #31
 8018d2c:	d407      	bmi.n	8018d3e <_vfiprintf_r+0x36>
 8018d2e:	9b03      	ldr	r3, [sp, #12]
 8018d30:	899b      	ldrh	r3, [r3, #12]
 8018d32:	059b      	lsls	r3, r3, #22
 8018d34:	d403      	bmi.n	8018d3e <_vfiprintf_r+0x36>
 8018d36:	9b03      	ldr	r3, [sp, #12]
 8018d38:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018d3a:	f7ff f9a3 	bl	8018084 <__retarget_lock_acquire_recursive>
 8018d3e:	9b03      	ldr	r3, [sp, #12]
 8018d40:	220c      	movs	r2, #12
 8018d42:	5e9a      	ldrsh	r2, [r3, r2]
 8018d44:	2380      	movs	r3, #128	; 0x80
 8018d46:	019b      	lsls	r3, r3, #6
 8018d48:	421a      	tst	r2, r3
 8018d4a:	d107      	bne.n	8018d5c <_vfiprintf_r+0x54>
 8018d4c:	4313      	orrs	r3, r2
 8018d4e:	9a03      	ldr	r2, [sp, #12]
 8018d50:	8193      	strh	r3, [r2, #12]
 8018d52:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8018d54:	4ba7      	ldr	r3, [pc, #668]	; (8018ff4 <_vfiprintf_r+0x2ec>)
 8018d56:	4013      	ands	r3, r2
 8018d58:	9a03      	ldr	r2, [sp, #12]
 8018d5a:	6653      	str	r3, [r2, #100]	; 0x64
 8018d5c:	9b03      	ldr	r3, [sp, #12]
 8018d5e:	899b      	ldrh	r3, [r3, #12]
 8018d60:	071b      	lsls	r3, r3, #28
 8018d62:	d503      	bpl.n	8018d6c <_vfiprintf_r+0x64>
 8018d64:	9b03      	ldr	r3, [sp, #12]
 8018d66:	691b      	ldr	r3, [r3, #16]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d118      	bne.n	8018d9e <_vfiprintf_r+0x96>
 8018d6c:	9903      	ldr	r1, [sp, #12]
 8018d6e:	9806      	ldr	r0, [sp, #24]
 8018d70:	f000 fd0c 	bl	801978c <__swsetup_r>
 8018d74:	2800      	cmp	r0, #0
 8018d76:	d012      	beq.n	8018d9e <_vfiprintf_r+0x96>
 8018d78:	9b03      	ldr	r3, [sp, #12]
 8018d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018d7c:	07db      	lsls	r3, r3, #31
 8018d7e:	d505      	bpl.n	8018d8c <_vfiprintf_r+0x84>
 8018d80:	2301      	movs	r3, #1
 8018d82:	425b      	negs	r3, r3
 8018d84:	9308      	str	r3, [sp, #32]
 8018d86:	9808      	ldr	r0, [sp, #32]
 8018d88:	b043      	add	sp, #268	; 0x10c
 8018d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d8c:	9b03      	ldr	r3, [sp, #12]
 8018d8e:	899b      	ldrh	r3, [r3, #12]
 8018d90:	059b      	lsls	r3, r3, #22
 8018d92:	d4f5      	bmi.n	8018d80 <_vfiprintf_r+0x78>
 8018d94:	9b03      	ldr	r3, [sp, #12]
 8018d96:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018d98:	f7ff f975 	bl	8018086 <__retarget_lock_release_recursive>
 8018d9c:	e7f0      	b.n	8018d80 <_vfiprintf_r+0x78>
 8018d9e:	9b03      	ldr	r3, [sp, #12]
 8018da0:	899a      	ldrh	r2, [r3, #12]
 8018da2:	231a      	movs	r3, #26
 8018da4:	4013      	ands	r3, r2
 8018da6:	2b0a      	cmp	r3, #10
 8018da8:	d116      	bne.n	8018dd8 <_vfiprintf_r+0xd0>
 8018daa:	9b03      	ldr	r3, [sp, #12]
 8018dac:	210e      	movs	r1, #14
 8018dae:	5e5b      	ldrsh	r3, [r3, r1]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	db11      	blt.n	8018dd8 <_vfiprintf_r+0xd0>
 8018db4:	9b03      	ldr	r3, [sp, #12]
 8018db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018db8:	07db      	lsls	r3, r3, #31
 8018dba:	d405      	bmi.n	8018dc8 <_vfiprintf_r+0xc0>
 8018dbc:	0593      	lsls	r3, r2, #22
 8018dbe:	d403      	bmi.n	8018dc8 <_vfiprintf_r+0xc0>
 8018dc0:	9b03      	ldr	r3, [sp, #12]
 8018dc2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018dc4:	f7ff f95f 	bl	8018086 <__retarget_lock_release_recursive>
 8018dc8:	0023      	movs	r3, r4
 8018dca:	9a07      	ldr	r2, [sp, #28]
 8018dcc:	9903      	ldr	r1, [sp, #12]
 8018dce:	9806      	ldr	r0, [sp, #24]
 8018dd0:	f000 fc98 	bl	8019704 <__sbprintf>
 8018dd4:	9008      	str	r0, [sp, #32]
 8018dd6:	e7d6      	b.n	8018d86 <_vfiprintf_r+0x7e>
 8018dd8:	2300      	movs	r3, #0
 8018dda:	af19      	add	r7, sp, #100	; 0x64
 8018ddc:	9716      	str	r7, [sp, #88]	; 0x58
 8018dde:	9318      	str	r3, [sp, #96]	; 0x60
 8018de0:	9317      	str	r3, [sp, #92]	; 0x5c
 8018de2:	930c      	str	r3, [sp, #48]	; 0x30
 8018de4:	930d      	str	r3, [sp, #52]	; 0x34
 8018de6:	930e      	str	r3, [sp, #56]	; 0x38
 8018de8:	930f      	str	r3, [sp, #60]	; 0x3c
 8018dea:	9308      	str	r3, [sp, #32]
 8018dec:	9c07      	ldr	r4, [sp, #28]
 8018dee:	7823      	ldrb	r3, [r4, #0]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d002      	beq.n	8018dfa <_vfiprintf_r+0xf2>
 8018df4:	2b25      	cmp	r3, #37	; 0x25
 8018df6:	d000      	beq.n	8018dfa <_vfiprintf_r+0xf2>
 8018df8:	e093      	b.n	8018f22 <_vfiprintf_r+0x21a>
 8018dfa:	9b07      	ldr	r3, [sp, #28]
 8018dfc:	1ae3      	subs	r3, r4, r3
 8018dfe:	001e      	movs	r6, r3
 8018e00:	9b07      	ldr	r3, [sp, #28]
 8018e02:	429c      	cmp	r4, r3
 8018e04:	d01a      	beq.n	8018e3c <_vfiprintf_r+0x134>
 8018e06:	46b4      	mov	ip, r6
 8018e08:	603b      	str	r3, [r7, #0]
 8018e0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018e0c:	607e      	str	r6, [r7, #4]
 8018e0e:	4463      	add	r3, ip
 8018e10:	9318      	str	r3, [sp, #96]	; 0x60
 8018e12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e14:	3708      	adds	r7, #8
 8018e16:	9304      	str	r3, [sp, #16]
 8018e18:	3301      	adds	r3, #1
 8018e1a:	9317      	str	r3, [sp, #92]	; 0x5c
 8018e1c:	2b07      	cmp	r3, #7
 8018e1e:	dd09      	ble.n	8018e34 <_vfiprintf_r+0x12c>
 8018e20:	9903      	ldr	r1, [sp, #12]
 8018e22:	9806      	ldr	r0, [sp, #24]
 8018e24:	aa16      	add	r2, sp, #88	; 0x58
 8018e26:	f7ff ff3b 	bl	8018ca0 <__sprint_r>
 8018e2a:	2800      	cmp	r0, #0
 8018e2c:	d001      	beq.n	8018e32 <_vfiprintf_r+0x12a>
 8018e2e:	f000 fc00 	bl	8019632 <_vfiprintf_r+0x92a>
 8018e32:	af19      	add	r7, sp, #100	; 0x64
 8018e34:	46b4      	mov	ip, r6
 8018e36:	9b08      	ldr	r3, [sp, #32]
 8018e38:	4463      	add	r3, ip
 8018e3a:	9308      	str	r3, [sp, #32]
 8018e3c:	7823      	ldrb	r3, [r4, #0]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d101      	bne.n	8018e46 <_vfiprintf_r+0x13e>
 8018e42:	f000 fc1b 	bl	801967c <_vfiprintf_r+0x974>
 8018e46:	2200      	movs	r2, #0
 8018e48:	a914      	add	r1, sp, #80	; 0x50
 8018e4a:	70ca      	strb	r2, [r1, #3]
 8018e4c:	2101      	movs	r1, #1
 8018e4e:	1c63      	adds	r3, r4, #1
 8018e50:	0014      	movs	r4, r2
 8018e52:	4249      	negs	r1, r1
 8018e54:	9105      	str	r1, [sp, #20]
 8018e56:	9209      	str	r2, [sp, #36]	; 0x24
 8018e58:	1c5a      	adds	r2, r3, #1
 8018e5a:	781b      	ldrb	r3, [r3, #0]
 8018e5c:	9207      	str	r2, [sp, #28]
 8018e5e:	0018      	movs	r0, r3
 8018e60:	3820      	subs	r0, #32
 8018e62:	285a      	cmp	r0, #90	; 0x5a
 8018e64:	d900      	bls.n	8018e68 <_vfiprintf_r+0x160>
 8018e66:	e37c      	b.n	8019562 <_vfiprintf_r+0x85a>
 8018e68:	f7e7 f968 	bl	800013c <__gnu_thumb1_case_uhi>
 8018e6c:	037b0098 	.word	0x037b0098
 8018e70:	00a1037b 	.word	0x00a1037b
 8018e74:	037b037b 	.word	0x037b037b
 8018e78:	007d037b 	.word	0x007d037b
 8018e7c:	037b037b 	.word	0x037b037b
 8018e80:	00ab00a3 	.word	0x00ab00a3
 8018e84:	00a9037b 	.word	0x00a9037b
 8018e88:	037b00af 	.word	0x037b00af
 8018e8c:	00d500d3 	.word	0x00d500d3
 8018e90:	00d500d5 	.word	0x00d500d5
 8018e94:	00d500d5 	.word	0x00d500d5
 8018e98:	00d500d5 	.word	0x00d500d5
 8018e9c:	00d500d5 	.word	0x00d500d5
 8018ea0:	037b037b 	.word	0x037b037b
 8018ea4:	037b037b 	.word	0x037b037b
 8018ea8:	037b037b 	.word	0x037b037b
 8018eac:	037b037b 	.word	0x037b037b
 8018eb0:	00fe037b 	.word	0x00fe037b
 8018eb4:	037b01f9 	.word	0x037b01f9
 8018eb8:	037b037b 	.word	0x037b037b
 8018ebc:	037b037b 	.word	0x037b037b
 8018ec0:	037b037b 	.word	0x037b037b
 8018ec4:	037b037b 	.word	0x037b037b
 8018ec8:	0252037b 	.word	0x0252037b
 8018ecc:	037b037b 	.word	0x037b037b
 8018ed0:	0295037b 	.word	0x0295037b
 8018ed4:	02b1037b 	.word	0x02b1037b
 8018ed8:	037b037b 	.word	0x037b037b
 8018edc:	037b02ec 	.word	0x037b02ec
 8018ee0:	037b037b 	.word	0x037b037b
 8018ee4:	037b037b 	.word	0x037b037b
 8018ee8:	037b037b 	.word	0x037b037b
 8018eec:	037b037b 	.word	0x037b037b
 8018ef0:	00fe037b 	.word	0x00fe037b
 8018ef4:	037b01fb 	.word	0x037b01fb
 8018ef8:	037b037b 	.word	0x037b037b
 8018efc:	01fb00e7 	.word	0x01fb00e7
 8018f00:	037b00fa 	.word	0x037b00fa
 8018f04:	037b00f3 	.word	0x037b00f3
 8018f08:	0254023b 	.word	0x0254023b
 8018f0c:	00fa0287 	.word	0x00fa0287
 8018f10:	0295037b 	.word	0x0295037b
 8018f14:	02b3009f 	.word	0x02b3009f
 8018f18:	037b037b 	.word	0x037b037b
 8018f1c:	037b005d 	.word	0x037b005d
 8018f20:	009f      	.short	0x009f
 8018f22:	3401      	adds	r4, #1
 8018f24:	e763      	b.n	8018dee <_vfiprintf_r+0xe6>
 8018f26:	4a34      	ldr	r2, [pc, #208]	; (8018ff8 <_vfiprintf_r+0x2f0>)
 8018f28:	0020      	movs	r0, r4
 8018f2a:	920c      	str	r2, [sp, #48]	; 0x30
 8018f2c:	2220      	movs	r2, #32
 8018f2e:	4010      	ands	r0, r2
 8018f30:	4214      	tst	r4, r2
 8018f32:	d100      	bne.n	8018f36 <_vfiprintf_r+0x22e>
 8018f34:	e288      	b.n	8019448 <_vfiprintf_r+0x740>
 8018f36:	3a19      	subs	r2, #25
 8018f38:	3507      	adds	r5, #7
 8018f3a:	4395      	bics	r5, r2
 8018f3c:	0028      	movs	r0, r5
 8018f3e:	c806      	ldmia	r0!, {r1, r2}
 8018f40:	9100      	str	r1, [sp, #0]
 8018f42:	9201      	str	r2, [sp, #4]
 8018f44:	9004      	str	r0, [sp, #16]
 8018f46:	07e2      	lsls	r2, r4, #31
 8018f48:	d509      	bpl.n	8018f5e <_vfiprintf_r+0x256>
 8018f4a:	9a00      	ldr	r2, [sp, #0]
 8018f4c:	9901      	ldr	r1, [sp, #4]
 8018f4e:	430a      	orrs	r2, r1
 8018f50:	d005      	beq.n	8018f5e <_vfiprintf_r+0x256>
 8018f52:	aa15      	add	r2, sp, #84	; 0x54
 8018f54:	2130      	movs	r1, #48	; 0x30
 8018f56:	7053      	strb	r3, [r2, #1]
 8018f58:	2302      	movs	r3, #2
 8018f5a:	7011      	strb	r1, [r2, #0]
 8018f5c:	431c      	orrs	r4, r3
 8018f5e:	4b27      	ldr	r3, [pc, #156]	; (8018ffc <_vfiprintf_r+0x2f4>)
 8018f60:	401c      	ands	r4, r3
 8018f62:	2302      	movs	r3, #2
 8018f64:	e1e6      	b.n	8019334 <_vfiprintf_r+0x62c>
 8018f66:	9806      	ldr	r0, [sp, #24]
 8018f68:	f7ff f886 	bl	8018078 <_localeconv_r>
 8018f6c:	6843      	ldr	r3, [r0, #4]
 8018f6e:	0018      	movs	r0, r3
 8018f70:	930f      	str	r3, [sp, #60]	; 0x3c
 8018f72:	f7e7 f8d1 	bl	8000118 <strlen>
 8018f76:	900e      	str	r0, [sp, #56]	; 0x38
 8018f78:	9806      	ldr	r0, [sp, #24]
 8018f7a:	f7ff f87d 	bl	8018078 <_localeconv_r>
 8018f7e:	6883      	ldr	r3, [r0, #8]
 8018f80:	930d      	str	r3, [sp, #52]	; 0x34
 8018f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d010      	beq.n	8018faa <_vfiprintf_r+0x2a2>
 8018f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d00d      	beq.n	8018faa <_vfiprintf_r+0x2a2>
 8018f8e:	781b      	ldrb	r3, [r3, #0]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d00a      	beq.n	8018faa <_vfiprintf_r+0x2a2>
 8018f94:	2380      	movs	r3, #128	; 0x80
 8018f96:	00db      	lsls	r3, r3, #3
 8018f98:	431c      	orrs	r4, r3
 8018f9a:	e006      	b.n	8018faa <_vfiprintf_r+0x2a2>
 8018f9c:	ab14      	add	r3, sp, #80	; 0x50
 8018f9e:	78da      	ldrb	r2, [r3, #3]
 8018fa0:	3303      	adds	r3, #3
 8018fa2:	2a00      	cmp	r2, #0
 8018fa4:	d101      	bne.n	8018faa <_vfiprintf_r+0x2a2>
 8018fa6:	3220      	adds	r2, #32
 8018fa8:	701a      	strb	r2, [r3, #0]
 8018faa:	9b07      	ldr	r3, [sp, #28]
 8018fac:	e754      	b.n	8018e58 <_vfiprintf_r+0x150>
 8018fae:	2301      	movs	r3, #1
 8018fb0:	e7f2      	b.n	8018f98 <_vfiprintf_r+0x290>
 8018fb2:	cd08      	ldmia	r5!, {r3}
 8018fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	daf7      	bge.n	8018faa <_vfiprintf_r+0x2a2>
 8018fba:	425b      	negs	r3, r3
 8018fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8018fbe:	2304      	movs	r3, #4
 8018fc0:	e7ea      	b.n	8018f98 <_vfiprintf_r+0x290>
 8018fc2:	222b      	movs	r2, #43	; 0x2b
 8018fc4:	ab14      	add	r3, sp, #80	; 0x50
 8018fc6:	70da      	strb	r2, [r3, #3]
 8018fc8:	e7ef      	b.n	8018faa <_vfiprintf_r+0x2a2>
 8018fca:	9b07      	ldr	r3, [sp, #28]
 8018fcc:	1c5a      	adds	r2, r3, #1
 8018fce:	781b      	ldrb	r3, [r3, #0]
 8018fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8018fd2:	d015      	beq.n	8019000 <_vfiprintf_r+0x2f8>
 8018fd4:	2100      	movs	r1, #0
 8018fd6:	9105      	str	r1, [sp, #20]
 8018fd8:	0019      	movs	r1, r3
 8018fda:	3930      	subs	r1, #48	; 0x30
 8018fdc:	9207      	str	r2, [sp, #28]
 8018fde:	2909      	cmp	r1, #9
 8018fe0:	d900      	bls.n	8018fe4 <_vfiprintf_r+0x2dc>
 8018fe2:	e73c      	b.n	8018e5e <_vfiprintf_r+0x156>
 8018fe4:	230a      	movs	r3, #10
 8018fe6:	9805      	ldr	r0, [sp, #20]
 8018fe8:	4358      	muls	r0, r3
 8018fea:	1843      	adds	r3, r0, r1
 8018fec:	9305      	str	r3, [sp, #20]
 8018fee:	7813      	ldrb	r3, [r2, #0]
 8018ff0:	3201      	adds	r2, #1
 8018ff2:	e7f1      	b.n	8018fd8 <_vfiprintf_r+0x2d0>
 8018ff4:	ffffdfff 	.word	0xffffdfff
 8018ff8:	0801da70 	.word	0x0801da70
 8018ffc:	fffffbff 	.word	0xfffffbff
 8019000:	cd08      	ldmia	r5!, {r3}
 8019002:	9305      	str	r3, [sp, #20]
 8019004:	2b00      	cmp	r3, #0
 8019006:	da02      	bge.n	801900e <_vfiprintf_r+0x306>
 8019008:	2301      	movs	r3, #1
 801900a:	425b      	negs	r3, r3
 801900c:	9305      	str	r3, [sp, #20]
 801900e:	9207      	str	r2, [sp, #28]
 8019010:	e7cb      	b.n	8018faa <_vfiprintf_r+0x2a2>
 8019012:	2380      	movs	r3, #128	; 0x80
 8019014:	e7c0      	b.n	8018f98 <_vfiprintf_r+0x290>
 8019016:	2100      	movs	r1, #0
 8019018:	9a07      	ldr	r2, [sp, #28]
 801901a:	9109      	str	r1, [sp, #36]	; 0x24
 801901c:	200a      	movs	r0, #10
 801901e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019020:	3b30      	subs	r3, #48	; 0x30
 8019022:	4341      	muls	r1, r0
 8019024:	185b      	adds	r3, r3, r1
 8019026:	9309      	str	r3, [sp, #36]	; 0x24
 8019028:	0013      	movs	r3, r2
 801902a:	781b      	ldrb	r3, [r3, #0]
 801902c:	3201      	adds	r2, #1
 801902e:	0019      	movs	r1, r3
 8019030:	3930      	subs	r1, #48	; 0x30
 8019032:	9207      	str	r2, [sp, #28]
 8019034:	2909      	cmp	r1, #9
 8019036:	d9f1      	bls.n	801901c <_vfiprintf_r+0x314>
 8019038:	e711      	b.n	8018e5e <_vfiprintf_r+0x156>
 801903a:	9b07      	ldr	r3, [sp, #28]
 801903c:	781b      	ldrb	r3, [r3, #0]
 801903e:	2b68      	cmp	r3, #104	; 0x68
 8019040:	d105      	bne.n	801904e <_vfiprintf_r+0x346>
 8019042:	9b07      	ldr	r3, [sp, #28]
 8019044:	3301      	adds	r3, #1
 8019046:	9307      	str	r3, [sp, #28]
 8019048:	2380      	movs	r3, #128	; 0x80
 801904a:	009b      	lsls	r3, r3, #2
 801904c:	e7a4      	b.n	8018f98 <_vfiprintf_r+0x290>
 801904e:	2340      	movs	r3, #64	; 0x40
 8019050:	e7a2      	b.n	8018f98 <_vfiprintf_r+0x290>
 8019052:	9b07      	ldr	r3, [sp, #28]
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	2b6c      	cmp	r3, #108	; 0x6c
 8019058:	d104      	bne.n	8019064 <_vfiprintf_r+0x35c>
 801905a:	9b07      	ldr	r3, [sp, #28]
 801905c:	3301      	adds	r3, #1
 801905e:	9307      	str	r3, [sp, #28]
 8019060:	2320      	movs	r3, #32
 8019062:	e799      	b.n	8018f98 <_vfiprintf_r+0x290>
 8019064:	2310      	movs	r3, #16
 8019066:	e797      	b.n	8018f98 <_vfiprintf_r+0x290>
 8019068:	9504      	str	r5, [sp, #16]
 801906a:	9a04      	ldr	r2, [sp, #16]
 801906c:	ad29      	add	r5, sp, #164	; 0xa4
 801906e:	ca08      	ldmia	r2!, {r3}
 8019070:	9204      	str	r2, [sp, #16]
 8019072:	2200      	movs	r2, #0
 8019074:	702b      	strb	r3, [r5, #0]
 8019076:	ab14      	add	r3, sp, #80	; 0x50
 8019078:	70da      	strb	r2, [r3, #3]
 801907a:	2301      	movs	r3, #1
 801907c:	920b      	str	r2, [sp, #44]	; 0x2c
 801907e:	9305      	str	r3, [sp, #20]
 8019080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019082:	9a05      	ldr	r2, [sp, #20]
 8019084:	930a      	str	r3, [sp, #40]	; 0x28
 8019086:	4293      	cmp	r3, r2
 8019088:	da00      	bge.n	801908c <_vfiprintf_r+0x384>
 801908a:	920a      	str	r2, [sp, #40]	; 0x28
 801908c:	ab14      	add	r3, sp, #80	; 0x50
 801908e:	3303      	adds	r3, #3
 8019090:	781b      	ldrb	r3, [r3, #0]
 8019092:	1e5a      	subs	r2, r3, #1
 8019094:	4193      	sbcs	r3, r2
 8019096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019098:	18d3      	adds	r3, r2, r3
 801909a:	930a      	str	r3, [sp, #40]	; 0x28
 801909c:	0022      	movs	r2, r4
 801909e:	2302      	movs	r3, #2
 80190a0:	401a      	ands	r2, r3
 80190a2:	9210      	str	r2, [sp, #64]	; 0x40
 80190a4:	421c      	tst	r4, r3
 80190a6:	d002      	beq.n	80190ae <_vfiprintf_r+0x3a6>
 80190a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190aa:	3302      	adds	r3, #2
 80190ac:	930a      	str	r3, [sp, #40]	; 0x28
 80190ae:	2384      	movs	r3, #132	; 0x84
 80190b0:	0022      	movs	r2, r4
 80190b2:	401a      	ands	r2, r3
 80190b4:	9211      	str	r2, [sp, #68]	; 0x44
 80190b6:	421c      	tst	r4, r3
 80190b8:	d11f      	bne.n	80190fa <_vfiprintf_r+0x3f2>
 80190ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80190be:	1a9b      	subs	r3, r3, r2
 80190c0:	1e1e      	subs	r6, r3, #0
 80190c2:	dd1a      	ble.n	80190fa <_vfiprintf_r+0x3f2>
 80190c4:	0039      	movs	r1, r7
 80190c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80190c8:	48c9      	ldr	r0, [pc, #804]	; (80193f0 <_vfiprintf_r+0x6e8>)
 80190ca:	9312      	str	r3, [sp, #72]	; 0x48
 80190cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80190ce:	3301      	adds	r3, #1
 80190d0:	3108      	adds	r1, #8
 80190d2:	6038      	str	r0, [r7, #0]
 80190d4:	2e10      	cmp	r6, #16
 80190d6:	dd00      	ble.n	80190da <_vfiprintf_r+0x3d2>
 80190d8:	e251      	b.n	801957e <_vfiprintf_r+0x876>
 80190da:	18b2      	adds	r2, r6, r2
 80190dc:	607e      	str	r6, [r7, #4]
 80190de:	9218      	str	r2, [sp, #96]	; 0x60
 80190e0:	000f      	movs	r7, r1
 80190e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80190e4:	2b07      	cmp	r3, #7
 80190e6:	dd08      	ble.n	80190fa <_vfiprintf_r+0x3f2>
 80190e8:	9903      	ldr	r1, [sp, #12]
 80190ea:	9806      	ldr	r0, [sp, #24]
 80190ec:	aa16      	add	r2, sp, #88	; 0x58
 80190ee:	f7ff fdd7 	bl	8018ca0 <__sprint_r>
 80190f2:	2800      	cmp	r0, #0
 80190f4:	d000      	beq.n	80190f8 <_vfiprintf_r+0x3f0>
 80190f6:	e29c      	b.n	8019632 <_vfiprintf_r+0x92a>
 80190f8:	af19      	add	r7, sp, #100	; 0x64
 80190fa:	ab14      	add	r3, sp, #80	; 0x50
 80190fc:	1cda      	adds	r2, r3, #3
 80190fe:	78db      	ldrb	r3, [r3, #3]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d017      	beq.n	8019134 <_vfiprintf_r+0x42c>
 8019104:	603a      	str	r2, [r7, #0]
 8019106:	2201      	movs	r2, #1
 8019108:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801910a:	607a      	str	r2, [r7, #4]
 801910c:	9312      	str	r3, [sp, #72]	; 0x48
 801910e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019112:	3201      	adds	r2, #1
 8019114:	9313      	str	r3, [sp, #76]	; 0x4c
 8019116:	3301      	adds	r3, #1
 8019118:	9218      	str	r2, [sp, #96]	; 0x60
 801911a:	9317      	str	r3, [sp, #92]	; 0x5c
 801911c:	3708      	adds	r7, #8
 801911e:	2b07      	cmp	r3, #7
 8019120:	dd08      	ble.n	8019134 <_vfiprintf_r+0x42c>
 8019122:	9903      	ldr	r1, [sp, #12]
 8019124:	9806      	ldr	r0, [sp, #24]
 8019126:	aa16      	add	r2, sp, #88	; 0x58
 8019128:	f7ff fdba 	bl	8018ca0 <__sprint_r>
 801912c:	2800      	cmp	r0, #0
 801912e:	d000      	beq.n	8019132 <_vfiprintf_r+0x42a>
 8019130:	e27f      	b.n	8019632 <_vfiprintf_r+0x92a>
 8019132:	af19      	add	r7, sp, #100	; 0x64
 8019134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019136:	2b00      	cmp	r3, #0
 8019138:	d018      	beq.n	801916c <_vfiprintf_r+0x464>
 801913a:	aa15      	add	r2, sp, #84	; 0x54
 801913c:	603a      	str	r2, [r7, #0]
 801913e:	2202      	movs	r2, #2
 8019140:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019142:	607a      	str	r2, [r7, #4]
 8019144:	9310      	str	r3, [sp, #64]	; 0x40
 8019146:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801914a:	3202      	adds	r2, #2
 801914c:	9312      	str	r3, [sp, #72]	; 0x48
 801914e:	3301      	adds	r3, #1
 8019150:	9218      	str	r2, [sp, #96]	; 0x60
 8019152:	9317      	str	r3, [sp, #92]	; 0x5c
 8019154:	3708      	adds	r7, #8
 8019156:	2b07      	cmp	r3, #7
 8019158:	dd08      	ble.n	801916c <_vfiprintf_r+0x464>
 801915a:	9903      	ldr	r1, [sp, #12]
 801915c:	9806      	ldr	r0, [sp, #24]
 801915e:	aa16      	add	r2, sp, #88	; 0x58
 8019160:	f7ff fd9e 	bl	8018ca0 <__sprint_r>
 8019164:	2800      	cmp	r0, #0
 8019166:	d000      	beq.n	801916a <_vfiprintf_r+0x462>
 8019168:	e263      	b.n	8019632 <_vfiprintf_r+0x92a>
 801916a:	af19      	add	r7, sp, #100	; 0x64
 801916c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801916e:	2b80      	cmp	r3, #128	; 0x80
 8019170:	d11f      	bne.n	80191b2 <_vfiprintf_r+0x4aa>
 8019172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019176:	1a9b      	subs	r3, r3, r2
 8019178:	1e1e      	subs	r6, r3, #0
 801917a:	dd1a      	ble.n	80191b2 <_vfiprintf_r+0x4aa>
 801917c:	0039      	movs	r1, r7
 801917e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019180:	489c      	ldr	r0, [pc, #624]	; (80193f4 <_vfiprintf_r+0x6ec>)
 8019182:	9310      	str	r3, [sp, #64]	; 0x40
 8019184:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019186:	3301      	adds	r3, #1
 8019188:	3108      	adds	r1, #8
 801918a:	6038      	str	r0, [r7, #0]
 801918c:	2e10      	cmp	r6, #16
 801918e:	dd00      	ble.n	8019192 <_vfiprintf_r+0x48a>
 8019190:	e209      	b.n	80195a6 <_vfiprintf_r+0x89e>
 8019192:	18b2      	adds	r2, r6, r2
 8019194:	607e      	str	r6, [r7, #4]
 8019196:	9218      	str	r2, [sp, #96]	; 0x60
 8019198:	000f      	movs	r7, r1
 801919a:	9317      	str	r3, [sp, #92]	; 0x5c
 801919c:	2b07      	cmp	r3, #7
 801919e:	dd08      	ble.n	80191b2 <_vfiprintf_r+0x4aa>
 80191a0:	9903      	ldr	r1, [sp, #12]
 80191a2:	9806      	ldr	r0, [sp, #24]
 80191a4:	aa16      	add	r2, sp, #88	; 0x58
 80191a6:	f7ff fd7b 	bl	8018ca0 <__sprint_r>
 80191aa:	2800      	cmp	r0, #0
 80191ac:	d000      	beq.n	80191b0 <_vfiprintf_r+0x4a8>
 80191ae:	e240      	b.n	8019632 <_vfiprintf_r+0x92a>
 80191b0:	af19      	add	r7, sp, #100	; 0x64
 80191b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80191b4:	9a05      	ldr	r2, [sp, #20]
 80191b6:	1a9b      	subs	r3, r3, r2
 80191b8:	1e1e      	subs	r6, r3, #0
 80191ba:	dd1a      	ble.n	80191f2 <_vfiprintf_r+0x4ea>
 80191bc:	0039      	movs	r1, r7
 80191be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80191c0:	488c      	ldr	r0, [pc, #560]	; (80193f4 <_vfiprintf_r+0x6ec>)
 80191c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80191c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80191c6:	3301      	adds	r3, #1
 80191c8:	3108      	adds	r1, #8
 80191ca:	6038      	str	r0, [r7, #0]
 80191cc:	2e10      	cmp	r6, #16
 80191ce:	dd00      	ble.n	80191d2 <_vfiprintf_r+0x4ca>
 80191d0:	e1fd      	b.n	80195ce <_vfiprintf_r+0x8c6>
 80191d2:	18b2      	adds	r2, r6, r2
 80191d4:	607e      	str	r6, [r7, #4]
 80191d6:	9218      	str	r2, [sp, #96]	; 0x60
 80191d8:	000f      	movs	r7, r1
 80191da:	9317      	str	r3, [sp, #92]	; 0x5c
 80191dc:	2b07      	cmp	r3, #7
 80191de:	dd08      	ble.n	80191f2 <_vfiprintf_r+0x4ea>
 80191e0:	9903      	ldr	r1, [sp, #12]
 80191e2:	9806      	ldr	r0, [sp, #24]
 80191e4:	aa16      	add	r2, sp, #88	; 0x58
 80191e6:	f7ff fd5b 	bl	8018ca0 <__sprint_r>
 80191ea:	2800      	cmp	r0, #0
 80191ec:	d000      	beq.n	80191f0 <_vfiprintf_r+0x4e8>
 80191ee:	e220      	b.n	8019632 <_vfiprintf_r+0x92a>
 80191f0:	af19      	add	r7, sp, #100	; 0x64
 80191f2:	9b05      	ldr	r3, [sp, #20]
 80191f4:	603d      	str	r5, [r7, #0]
 80191f6:	607b      	str	r3, [r7, #4]
 80191f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80191fa:	3708      	adds	r7, #8
 80191fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80191fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019200:	9b05      	ldr	r3, [sp, #20]
 8019202:	4694      	mov	ip, r2
 8019204:	4463      	add	r3, ip
 8019206:	9318      	str	r3, [sp, #96]	; 0x60
 8019208:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801920a:	9305      	str	r3, [sp, #20]
 801920c:	3301      	adds	r3, #1
 801920e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019210:	2b07      	cmp	r3, #7
 8019212:	dd08      	ble.n	8019226 <_vfiprintf_r+0x51e>
 8019214:	9903      	ldr	r1, [sp, #12]
 8019216:	9806      	ldr	r0, [sp, #24]
 8019218:	aa16      	add	r2, sp, #88	; 0x58
 801921a:	f7ff fd41 	bl	8018ca0 <__sprint_r>
 801921e:	2800      	cmp	r0, #0
 8019220:	d000      	beq.n	8019224 <_vfiprintf_r+0x51c>
 8019222:	e206      	b.n	8019632 <_vfiprintf_r+0x92a>
 8019224:	af19      	add	r7, sp, #100	; 0x64
 8019226:	0763      	lsls	r3, r4, #29
 8019228:	d500      	bpl.n	801922c <_vfiprintf_r+0x524>
 801922a:	e1e4      	b.n	80195f6 <_vfiprintf_r+0x8ee>
 801922c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801922e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019230:	4293      	cmp	r3, r2
 8019232:	da00      	bge.n	8019236 <_vfiprintf_r+0x52e>
 8019234:	0013      	movs	r3, r2
 8019236:	9a08      	ldr	r2, [sp, #32]
 8019238:	18d3      	adds	r3, r2, r3
 801923a:	9308      	str	r3, [sp, #32]
 801923c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801923e:	9305      	str	r3, [sp, #20]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d007      	beq.n	8019254 <_vfiprintf_r+0x54c>
 8019244:	9903      	ldr	r1, [sp, #12]
 8019246:	9806      	ldr	r0, [sp, #24]
 8019248:	aa16      	add	r2, sp, #88	; 0x58
 801924a:	f7ff fd29 	bl	8018ca0 <__sprint_r>
 801924e:	2800      	cmp	r0, #0
 8019250:	d000      	beq.n	8019254 <_vfiprintf_r+0x54c>
 8019252:	e1ee      	b.n	8019632 <_vfiprintf_r+0x92a>
 8019254:	2300      	movs	r3, #0
 8019256:	9d04      	ldr	r5, [sp, #16]
 8019258:	9317      	str	r3, [sp, #92]	; 0x5c
 801925a:	af19      	add	r7, sp, #100	; 0x64
 801925c:	e5c6      	b.n	8018dec <_vfiprintf_r+0xe4>
 801925e:	2310      	movs	r3, #16
 8019260:	431c      	orrs	r4, r3
 8019262:	06a3      	lsls	r3, r4, #26
 8019264:	d52b      	bpl.n	80192be <_vfiprintf_r+0x5b6>
 8019266:	2307      	movs	r3, #7
 8019268:	3507      	adds	r5, #7
 801926a:	439d      	bics	r5, r3
 801926c:	0029      	movs	r1, r5
 801926e:	c90c      	ldmia	r1!, {r2, r3}
 8019270:	9200      	str	r2, [sp, #0]
 8019272:	9301      	str	r3, [sp, #4]
 8019274:	9104      	str	r1, [sp, #16]
 8019276:	9a01      	ldr	r2, [sp, #4]
 8019278:	2301      	movs	r3, #1
 801927a:	2a00      	cmp	r2, #0
 801927c:	da09      	bge.n	8019292 <_vfiprintf_r+0x58a>
 801927e:	9d00      	ldr	r5, [sp, #0]
 8019280:	9e01      	ldr	r6, [sp, #4]
 8019282:	2200      	movs	r2, #0
 8019284:	4269      	negs	r1, r5
 8019286:	41b2      	sbcs	r2, r6
 8019288:	9100      	str	r1, [sp, #0]
 801928a:	9201      	str	r2, [sp, #4]
 801928c:	212d      	movs	r1, #45	; 0x2d
 801928e:	aa14      	add	r2, sp, #80	; 0x50
 8019290:	70d1      	strb	r1, [r2, #3]
 8019292:	9901      	ldr	r1, [sp, #4]
 8019294:	9a00      	ldr	r2, [sp, #0]
 8019296:	430a      	orrs	r2, r1
 8019298:	9905      	ldr	r1, [sp, #20]
 801929a:	3101      	adds	r1, #1
 801929c:	d100      	bne.n	80192a0 <_vfiprintf_r+0x598>
 801929e:	e1fc      	b.n	801969a <_vfiprintf_r+0x992>
 80192a0:	2180      	movs	r1, #128	; 0x80
 80192a2:	0020      	movs	r0, r4
 80192a4:	4388      	bics	r0, r1
 80192a6:	0006      	movs	r6, r0
 80192a8:	2a00      	cmp	r2, #0
 80192aa:	d000      	beq.n	80192ae <_vfiprintf_r+0x5a6>
 80192ac:	e1f9      	b.n	80196a2 <_vfiprintf_r+0x99a>
 80192ae:	9a05      	ldr	r2, [sp, #20]
 80192b0:	2a00      	cmp	r2, #0
 80192b2:	d100      	bne.n	80192b6 <_vfiprintf_r+0x5ae>
 80192b4:	e149      	b.n	801954a <_vfiprintf_r+0x842>
 80192b6:	2b01      	cmp	r3, #1
 80192b8:	d000      	beq.n	80192bc <_vfiprintf_r+0x5b4>
 80192ba:	e1f5      	b.n	80196a8 <_vfiprintf_r+0x9a0>
 80192bc:	e0ea      	b.n	8019494 <_vfiprintf_r+0x78c>
 80192be:	1d2b      	adds	r3, r5, #4
 80192c0:	9304      	str	r3, [sp, #16]
 80192c2:	06e3      	lsls	r3, r4, #27
 80192c4:	d504      	bpl.n	80192d0 <_vfiprintf_r+0x5c8>
 80192c6:	682b      	ldr	r3, [r5, #0]
 80192c8:	9300      	str	r3, [sp, #0]
 80192ca:	17db      	asrs	r3, r3, #31
 80192cc:	9301      	str	r3, [sp, #4]
 80192ce:	e7d2      	b.n	8019276 <_vfiprintf_r+0x56e>
 80192d0:	682b      	ldr	r3, [r5, #0]
 80192d2:	0662      	lsls	r2, r4, #25
 80192d4:	d501      	bpl.n	80192da <_vfiprintf_r+0x5d2>
 80192d6:	b21b      	sxth	r3, r3
 80192d8:	e7f6      	b.n	80192c8 <_vfiprintf_r+0x5c0>
 80192da:	05a2      	lsls	r2, r4, #22
 80192dc:	d5f4      	bpl.n	80192c8 <_vfiprintf_r+0x5c0>
 80192de:	b25b      	sxtb	r3, r3
 80192e0:	e7f2      	b.n	80192c8 <_vfiprintf_r+0x5c0>
 80192e2:	cd08      	ldmia	r5!, {r3}
 80192e4:	06a2      	lsls	r2, r4, #26
 80192e6:	d504      	bpl.n	80192f2 <_vfiprintf_r+0x5ea>
 80192e8:	9a08      	ldr	r2, [sp, #32]
 80192ea:	601a      	str	r2, [r3, #0]
 80192ec:	17d2      	asrs	r2, r2, #31
 80192ee:	605a      	str	r2, [r3, #4]
 80192f0:	e57c      	b.n	8018dec <_vfiprintf_r+0xe4>
 80192f2:	06e2      	lsls	r2, r4, #27
 80192f4:	d502      	bpl.n	80192fc <_vfiprintf_r+0x5f4>
 80192f6:	9a08      	ldr	r2, [sp, #32]
 80192f8:	601a      	str	r2, [r3, #0]
 80192fa:	e577      	b.n	8018dec <_vfiprintf_r+0xe4>
 80192fc:	0662      	lsls	r2, r4, #25
 80192fe:	d502      	bpl.n	8019306 <_vfiprintf_r+0x5fe>
 8019300:	9a08      	ldr	r2, [sp, #32]
 8019302:	801a      	strh	r2, [r3, #0]
 8019304:	e572      	b.n	8018dec <_vfiprintf_r+0xe4>
 8019306:	05a2      	lsls	r2, r4, #22
 8019308:	d5f5      	bpl.n	80192f6 <_vfiprintf_r+0x5ee>
 801930a:	9a08      	ldr	r2, [sp, #32]
 801930c:	701a      	strb	r2, [r3, #0]
 801930e:	e56d      	b.n	8018dec <_vfiprintf_r+0xe4>
 8019310:	2310      	movs	r3, #16
 8019312:	431c      	orrs	r4, r3
 8019314:	2320      	movs	r3, #32
 8019316:	0021      	movs	r1, r4
 8019318:	4019      	ands	r1, r3
 801931a:	421c      	tst	r4, r3
 801931c:	d00d      	beq.n	801933a <_vfiprintf_r+0x632>
 801931e:	3b19      	subs	r3, #25
 8019320:	3507      	adds	r5, #7
 8019322:	439d      	bics	r5, r3
 8019324:	0029      	movs	r1, r5
 8019326:	c90c      	ldmia	r1!, {r2, r3}
 8019328:	9200      	str	r2, [sp, #0]
 801932a:	9301      	str	r3, [sp, #4]
 801932c:	9104      	str	r1, [sp, #16]
 801932e:	4b32      	ldr	r3, [pc, #200]	; (80193f8 <_vfiprintf_r+0x6f0>)
 8019330:	401c      	ands	r4, r3
 8019332:	2300      	movs	r3, #0
 8019334:	2100      	movs	r1, #0
 8019336:	aa14      	add	r2, sp, #80	; 0x50
 8019338:	e7aa      	b.n	8019290 <_vfiprintf_r+0x588>
 801933a:	1d2b      	adds	r3, r5, #4
 801933c:	0022      	movs	r2, r4
 801933e:	9304      	str	r3, [sp, #16]
 8019340:	2310      	movs	r3, #16
 8019342:	401a      	ands	r2, r3
 8019344:	421c      	tst	r4, r3
 8019346:	d003      	beq.n	8019350 <_vfiprintf_r+0x648>
 8019348:	682b      	ldr	r3, [r5, #0]
 801934a:	9300      	str	r3, [sp, #0]
 801934c:	9101      	str	r1, [sp, #4]
 801934e:	e7ee      	b.n	801932e <_vfiprintf_r+0x626>
 8019350:	2340      	movs	r3, #64	; 0x40
 8019352:	0021      	movs	r1, r4
 8019354:	4019      	ands	r1, r3
 8019356:	421c      	tst	r4, r3
 8019358:	d004      	beq.n	8019364 <_vfiprintf_r+0x65c>
 801935a:	682b      	ldr	r3, [r5, #0]
 801935c:	b29b      	uxth	r3, r3
 801935e:	9300      	str	r3, [sp, #0]
 8019360:	9201      	str	r2, [sp, #4]
 8019362:	e7e4      	b.n	801932e <_vfiprintf_r+0x626>
 8019364:	2380      	movs	r3, #128	; 0x80
 8019366:	0022      	movs	r2, r4
 8019368:	009b      	lsls	r3, r3, #2
 801936a:	401a      	ands	r2, r3
 801936c:	421c      	tst	r4, r3
 801936e:	d002      	beq.n	8019376 <_vfiprintf_r+0x66e>
 8019370:	682b      	ldr	r3, [r5, #0]
 8019372:	b2db      	uxtb	r3, r3
 8019374:	e7e9      	b.n	801934a <_vfiprintf_r+0x642>
 8019376:	682b      	ldr	r3, [r5, #0]
 8019378:	e7f1      	b.n	801935e <_vfiprintf_r+0x656>
 801937a:	002b      	movs	r3, r5
 801937c:	cb04      	ldmia	r3!, {r2}
 801937e:	491f      	ldr	r1, [pc, #124]	; (80193fc <_vfiprintf_r+0x6f4>)
 8019380:	9304      	str	r3, [sp, #16]
 8019382:	2300      	movs	r3, #0
 8019384:	9200      	str	r2, [sp, #0]
 8019386:	aa15      	add	r2, sp, #84	; 0x54
 8019388:	8011      	strh	r1, [r2, #0]
 801938a:	4a1d      	ldr	r2, [pc, #116]	; (8019400 <_vfiprintf_r+0x6f8>)
 801938c:	9301      	str	r3, [sp, #4]
 801938e:	3302      	adds	r3, #2
 8019390:	431c      	orrs	r4, r3
 8019392:	920c      	str	r2, [sp, #48]	; 0x30
 8019394:	e7ce      	b.n	8019334 <_vfiprintf_r+0x62c>
 8019396:	002b      	movs	r3, r5
 8019398:	2200      	movs	r2, #0
 801939a:	cb20      	ldmia	r3!, {r5}
 801939c:	9304      	str	r3, [sp, #16]
 801939e:	ab14      	add	r3, sp, #80	; 0x50
 80193a0:	70da      	strb	r2, [r3, #3]
 80193a2:	9b05      	ldr	r3, [sp, #20]
 80193a4:	3301      	adds	r3, #1
 80193a6:	d00d      	beq.n	80193c4 <_vfiprintf_r+0x6bc>
 80193a8:	2100      	movs	r1, #0
 80193aa:	0028      	movs	r0, r5
 80193ac:	9a05      	ldr	r2, [sp, #20]
 80193ae:	f7fe fe7d 	bl	80180ac <memchr>
 80193b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80193b4:	2800      	cmp	r0, #0
 80193b6:	d100      	bne.n	80193ba <_vfiprintf_r+0x6b2>
 80193b8:	e662      	b.n	8019080 <_vfiprintf_r+0x378>
 80193ba:	1b43      	subs	r3, r0, r5
 80193bc:	9305      	str	r3, [sp, #20]
 80193be:	2300      	movs	r3, #0
 80193c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80193c2:	e65d      	b.n	8019080 <_vfiprintf_r+0x378>
 80193c4:	0028      	movs	r0, r5
 80193c6:	f7e6 fea7 	bl	8000118 <strlen>
 80193ca:	9005      	str	r0, [sp, #20]
 80193cc:	e7f7      	b.n	80193be <_vfiprintf_r+0x6b6>
 80193ce:	2310      	movs	r3, #16
 80193d0:	431c      	orrs	r4, r3
 80193d2:	2320      	movs	r3, #32
 80193d4:	0021      	movs	r1, r4
 80193d6:	4019      	ands	r1, r3
 80193d8:	421c      	tst	r4, r3
 80193da:	d013      	beq.n	8019404 <_vfiprintf_r+0x6fc>
 80193dc:	3b19      	subs	r3, #25
 80193de:	3507      	adds	r5, #7
 80193e0:	439d      	bics	r5, r3
 80193e2:	0029      	movs	r1, r5
 80193e4:	c90c      	ldmia	r1!, {r2, r3}
 80193e6:	9200      	str	r2, [sp, #0]
 80193e8:	9301      	str	r3, [sp, #4]
 80193ea:	9104      	str	r1, [sp, #16]
 80193ec:	2301      	movs	r3, #1
 80193ee:	e7a1      	b.n	8019334 <_vfiprintf_r+0x62c>
 80193f0:	0801dd48 	.word	0x0801dd48
 80193f4:	0801dd58 	.word	0x0801dd58
 80193f8:	fffffbff 	.word	0xfffffbff
 80193fc:	00007830 	.word	0x00007830
 8019400:	0801da70 	.word	0x0801da70
 8019404:	1d2b      	adds	r3, r5, #4
 8019406:	0022      	movs	r2, r4
 8019408:	9304      	str	r3, [sp, #16]
 801940a:	2310      	movs	r3, #16
 801940c:	401a      	ands	r2, r3
 801940e:	421c      	tst	r4, r3
 8019410:	d003      	beq.n	801941a <_vfiprintf_r+0x712>
 8019412:	682b      	ldr	r3, [r5, #0]
 8019414:	9300      	str	r3, [sp, #0]
 8019416:	9101      	str	r1, [sp, #4]
 8019418:	e7e8      	b.n	80193ec <_vfiprintf_r+0x6e4>
 801941a:	2340      	movs	r3, #64	; 0x40
 801941c:	0021      	movs	r1, r4
 801941e:	4019      	ands	r1, r3
 8019420:	421c      	tst	r4, r3
 8019422:	d004      	beq.n	801942e <_vfiprintf_r+0x726>
 8019424:	682b      	ldr	r3, [r5, #0]
 8019426:	b29b      	uxth	r3, r3
 8019428:	9300      	str	r3, [sp, #0]
 801942a:	9201      	str	r2, [sp, #4]
 801942c:	e7de      	b.n	80193ec <_vfiprintf_r+0x6e4>
 801942e:	2380      	movs	r3, #128	; 0x80
 8019430:	0022      	movs	r2, r4
 8019432:	009b      	lsls	r3, r3, #2
 8019434:	401a      	ands	r2, r3
 8019436:	421c      	tst	r4, r3
 8019438:	d002      	beq.n	8019440 <_vfiprintf_r+0x738>
 801943a:	682b      	ldr	r3, [r5, #0]
 801943c:	b2db      	uxtb	r3, r3
 801943e:	e7e9      	b.n	8019414 <_vfiprintf_r+0x70c>
 8019440:	682b      	ldr	r3, [r5, #0]
 8019442:	e7f1      	b.n	8019428 <_vfiprintf_r+0x720>
 8019444:	4aad      	ldr	r2, [pc, #692]	; (80196fc <_vfiprintf_r+0x9f4>)
 8019446:	e56f      	b.n	8018f28 <_vfiprintf_r+0x220>
 8019448:	1d2a      	adds	r2, r5, #4
 801944a:	0021      	movs	r1, r4
 801944c:	9204      	str	r2, [sp, #16]
 801944e:	2210      	movs	r2, #16
 8019450:	4011      	ands	r1, r2
 8019452:	4214      	tst	r4, r2
 8019454:	d003      	beq.n	801945e <_vfiprintf_r+0x756>
 8019456:	682a      	ldr	r2, [r5, #0]
 8019458:	9200      	str	r2, [sp, #0]
 801945a:	9001      	str	r0, [sp, #4]
 801945c:	e573      	b.n	8018f46 <_vfiprintf_r+0x23e>
 801945e:	2240      	movs	r2, #64	; 0x40
 8019460:	0020      	movs	r0, r4
 8019462:	4010      	ands	r0, r2
 8019464:	4214      	tst	r4, r2
 8019466:	d004      	beq.n	8019472 <_vfiprintf_r+0x76a>
 8019468:	682a      	ldr	r2, [r5, #0]
 801946a:	b292      	uxth	r2, r2
 801946c:	9200      	str	r2, [sp, #0]
 801946e:	9101      	str	r1, [sp, #4]
 8019470:	e569      	b.n	8018f46 <_vfiprintf_r+0x23e>
 8019472:	2280      	movs	r2, #128	; 0x80
 8019474:	0021      	movs	r1, r4
 8019476:	0092      	lsls	r2, r2, #2
 8019478:	4011      	ands	r1, r2
 801947a:	4214      	tst	r4, r2
 801947c:	d002      	beq.n	8019484 <_vfiprintf_r+0x77c>
 801947e:	682a      	ldr	r2, [r5, #0]
 8019480:	b2d2      	uxtb	r2, r2
 8019482:	e7e9      	b.n	8019458 <_vfiprintf_r+0x750>
 8019484:	682a      	ldr	r2, [r5, #0]
 8019486:	e7f1      	b.n	801946c <_vfiprintf_r+0x764>
 8019488:	9b01      	ldr	r3, [sp, #4]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d109      	bne.n	80194a2 <_vfiprintf_r+0x79a>
 801948e:	9b00      	ldr	r3, [sp, #0]
 8019490:	2b09      	cmp	r3, #9
 8019492:	d806      	bhi.n	80194a2 <_vfiprintf_r+0x79a>
 8019494:	25b7      	movs	r5, #183	; 0xb7
 8019496:	ab14      	add	r3, sp, #80	; 0x50
 8019498:	18ed      	adds	r5, r5, r3
 801949a:	9b00      	ldr	r3, [sp, #0]
 801949c:	3330      	adds	r3, #48	; 0x30
 801949e:	702b      	strb	r3, [r5, #0]
 80194a0:	e125      	b.n	80196ee <_vfiprintf_r+0x9e6>
 80194a2:	2380      	movs	r3, #128	; 0x80
 80194a4:	0032      	movs	r2, r6
 80194a6:	2400      	movs	r4, #0
 80194a8:	00db      	lsls	r3, r3, #3
 80194aa:	401a      	ands	r2, r3
 80194ac:	ad42      	add	r5, sp, #264	; 0x108
 80194ae:	920a      	str	r2, [sp, #40]	; 0x28
 80194b0:	220a      	movs	r2, #10
 80194b2:	9800      	ldr	r0, [sp, #0]
 80194b4:	9901      	ldr	r1, [sp, #4]
 80194b6:	2300      	movs	r3, #0
 80194b8:	f7e7 f838 	bl	800052c <__aeabi_uldivmod>
 80194bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80194be:	3d01      	subs	r5, #1
 80194c0:	3230      	adds	r2, #48	; 0x30
 80194c2:	702a      	strb	r2, [r5, #0]
 80194c4:	3401      	adds	r4, #1
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d01a      	beq.n	8019500 <_vfiprintf_r+0x7f8>
 80194ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194cc:	781b      	ldrb	r3, [r3, #0]
 80194ce:	42a3      	cmp	r3, r4
 80194d0:	d116      	bne.n	8019500 <_vfiprintf_r+0x7f8>
 80194d2:	2cff      	cmp	r4, #255	; 0xff
 80194d4:	d014      	beq.n	8019500 <_vfiprintf_r+0x7f8>
 80194d6:	9b01      	ldr	r3, [sp, #4]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d102      	bne.n	80194e2 <_vfiprintf_r+0x7da>
 80194dc:	9b00      	ldr	r3, [sp, #0]
 80194de:	2b09      	cmp	r3, #9
 80194e0:	d90e      	bls.n	8019500 <_vfiprintf_r+0x7f8>
 80194e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80194e6:	1aed      	subs	r5, r5, r3
 80194e8:	001a      	movs	r2, r3
 80194ea:	0028      	movs	r0, r5
 80194ec:	f7fb f8e2 	bl	80146b4 <strncpy>
 80194f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194f2:	2400      	movs	r4, #0
 80194f4:	785b      	ldrb	r3, [r3, #1]
 80194f6:	1e5a      	subs	r2, r3, #1
 80194f8:	4193      	sbcs	r3, r2
 80194fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80194fc:	18d3      	adds	r3, r2, r3
 80194fe:	930d      	str	r3, [sp, #52]	; 0x34
 8019500:	2300      	movs	r3, #0
 8019502:	9800      	ldr	r0, [sp, #0]
 8019504:	9901      	ldr	r1, [sp, #4]
 8019506:	220a      	movs	r2, #10
 8019508:	f7e7 f810 	bl	800052c <__aeabi_uldivmod>
 801950c:	9b01      	ldr	r3, [sp, #4]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d103      	bne.n	801951a <_vfiprintf_r+0x812>
 8019512:	9b00      	ldr	r3, [sp, #0]
 8019514:	2b09      	cmp	r3, #9
 8019516:	d800      	bhi.n	801951a <_vfiprintf_r+0x812>
 8019518:	e0e9      	b.n	80196ee <_vfiprintf_r+0x9e6>
 801951a:	9000      	str	r0, [sp, #0]
 801951c:	9101      	str	r1, [sp, #4]
 801951e:	e7c7      	b.n	80194b0 <_vfiprintf_r+0x7a8>
 8019520:	200f      	movs	r0, #15
 8019522:	9b00      	ldr	r3, [sp, #0]
 8019524:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019526:	4003      	ands	r3, r0
 8019528:	5cd3      	ldrb	r3, [r2, r3]
 801952a:	3d01      	subs	r5, #1
 801952c:	702b      	strb	r3, [r5, #0]
 801952e:	9b01      	ldr	r3, [sp, #4]
 8019530:	0719      	lsls	r1, r3, #28
 8019532:	9b00      	ldr	r3, [sp, #0]
 8019534:	091a      	lsrs	r2, r3, #4
 8019536:	9b01      	ldr	r3, [sp, #4]
 8019538:	4311      	orrs	r1, r2
 801953a:	091b      	lsrs	r3, r3, #4
 801953c:	9301      	str	r3, [sp, #4]
 801953e:	000b      	movs	r3, r1
 8019540:	9a01      	ldr	r2, [sp, #4]
 8019542:	9100      	str	r1, [sp, #0]
 8019544:	4313      	orrs	r3, r2
 8019546:	d1ec      	bne.n	8019522 <_vfiprintf_r+0x81a>
 8019548:	e0d1      	b.n	80196ee <_vfiprintf_r+0x9e6>
 801954a:	ad42      	add	r5, sp, #264	; 0x108
 801954c:	2b00      	cmp	r3, #0
 801954e:	d000      	beq.n	8019552 <_vfiprintf_r+0x84a>
 8019550:	e0cd      	b.n	80196ee <_vfiprintf_r+0x9e6>
 8019552:	07e3      	lsls	r3, r4, #31
 8019554:	d400      	bmi.n	8019558 <_vfiprintf_r+0x850>
 8019556:	e0ca      	b.n	80196ee <_vfiprintf_r+0x9e6>
 8019558:	25b7      	movs	r5, #183	; 0xb7
 801955a:	ab14      	add	r3, sp, #80	; 0x50
 801955c:	18ed      	adds	r5, r5, r3
 801955e:	2330      	movs	r3, #48	; 0x30
 8019560:	e79d      	b.n	801949e <_vfiprintf_r+0x796>
 8019562:	2b00      	cmp	r3, #0
 8019564:	d100      	bne.n	8019568 <_vfiprintf_r+0x860>
 8019566:	e089      	b.n	801967c <_vfiprintf_r+0x974>
 8019568:	2100      	movs	r1, #0
 801956a:	aa29      	add	r2, sp, #164	; 0xa4
 801956c:	7013      	strb	r3, [r2, #0]
 801956e:	ab14      	add	r3, sp, #80	; 0x50
 8019570:	70d9      	strb	r1, [r3, #3]
 8019572:	2301      	movs	r3, #1
 8019574:	9504      	str	r5, [sp, #16]
 8019576:	9305      	str	r3, [sp, #20]
 8019578:	0015      	movs	r5, r2
 801957a:	910b      	str	r1, [sp, #44]	; 0x2c
 801957c:	e580      	b.n	8019080 <_vfiprintf_r+0x378>
 801957e:	2010      	movs	r0, #16
 8019580:	1812      	adds	r2, r2, r0
 8019582:	6078      	str	r0, [r7, #4]
 8019584:	9218      	str	r2, [sp, #96]	; 0x60
 8019586:	9317      	str	r3, [sp, #92]	; 0x5c
 8019588:	2b07      	cmp	r3, #7
 801958a:	dd07      	ble.n	801959c <_vfiprintf_r+0x894>
 801958c:	9903      	ldr	r1, [sp, #12]
 801958e:	9806      	ldr	r0, [sp, #24]
 8019590:	aa16      	add	r2, sp, #88	; 0x58
 8019592:	f7ff fb85 	bl	8018ca0 <__sprint_r>
 8019596:	2800      	cmp	r0, #0
 8019598:	d14b      	bne.n	8019632 <_vfiprintf_r+0x92a>
 801959a:	a919      	add	r1, sp, #100	; 0x64
 801959c:	0033      	movs	r3, r6
 801959e:	3b10      	subs	r3, #16
 80195a0:	001e      	movs	r6, r3
 80195a2:	000f      	movs	r7, r1
 80195a4:	e58e      	b.n	80190c4 <_vfiprintf_r+0x3bc>
 80195a6:	2010      	movs	r0, #16
 80195a8:	1812      	adds	r2, r2, r0
 80195aa:	6078      	str	r0, [r7, #4]
 80195ac:	9218      	str	r2, [sp, #96]	; 0x60
 80195ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80195b0:	2b07      	cmp	r3, #7
 80195b2:	dd07      	ble.n	80195c4 <_vfiprintf_r+0x8bc>
 80195b4:	9903      	ldr	r1, [sp, #12]
 80195b6:	9806      	ldr	r0, [sp, #24]
 80195b8:	aa16      	add	r2, sp, #88	; 0x58
 80195ba:	f7ff fb71 	bl	8018ca0 <__sprint_r>
 80195be:	2800      	cmp	r0, #0
 80195c0:	d137      	bne.n	8019632 <_vfiprintf_r+0x92a>
 80195c2:	a919      	add	r1, sp, #100	; 0x64
 80195c4:	0033      	movs	r3, r6
 80195c6:	3b10      	subs	r3, #16
 80195c8:	001e      	movs	r6, r3
 80195ca:	000f      	movs	r7, r1
 80195cc:	e5d6      	b.n	801917c <_vfiprintf_r+0x474>
 80195ce:	2010      	movs	r0, #16
 80195d0:	1812      	adds	r2, r2, r0
 80195d2:	6078      	str	r0, [r7, #4]
 80195d4:	9218      	str	r2, [sp, #96]	; 0x60
 80195d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80195d8:	2b07      	cmp	r3, #7
 80195da:	dd07      	ble.n	80195ec <_vfiprintf_r+0x8e4>
 80195dc:	9903      	ldr	r1, [sp, #12]
 80195de:	9806      	ldr	r0, [sp, #24]
 80195e0:	aa16      	add	r2, sp, #88	; 0x58
 80195e2:	f7ff fb5d 	bl	8018ca0 <__sprint_r>
 80195e6:	2800      	cmp	r0, #0
 80195e8:	d123      	bne.n	8019632 <_vfiprintf_r+0x92a>
 80195ea:	a919      	add	r1, sp, #100	; 0x64
 80195ec:	0033      	movs	r3, r6
 80195ee:	3b10      	subs	r3, #16
 80195f0:	001e      	movs	r6, r3
 80195f2:	000f      	movs	r7, r1
 80195f4:	e5e2      	b.n	80191bc <_vfiprintf_r+0x4b4>
 80195f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80195fa:	2510      	movs	r5, #16
 80195fc:	1a9c      	subs	r4, r3, r2
 80195fe:	2c00      	cmp	r4, #0
 8019600:	dc00      	bgt.n	8019604 <_vfiprintf_r+0x8fc>
 8019602:	e613      	b.n	801922c <_vfiprintf_r+0x524>
 8019604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019606:	483e      	ldr	r0, [pc, #248]	; (8019700 <_vfiprintf_r+0x9f8>)
 8019608:	9918      	ldr	r1, [sp, #96]	; 0x60
 801960a:	9305      	str	r3, [sp, #20]
 801960c:	1c5a      	adds	r2, r3, #1
 801960e:	6038      	str	r0, [r7, #0]
 8019610:	2c10      	cmp	r4, #16
 8019612:	dc22      	bgt.n	801965a <_vfiprintf_r+0x952>
 8019614:	607c      	str	r4, [r7, #4]
 8019616:	190c      	adds	r4, r1, r4
 8019618:	9418      	str	r4, [sp, #96]	; 0x60
 801961a:	9217      	str	r2, [sp, #92]	; 0x5c
 801961c:	2a07      	cmp	r2, #7
 801961e:	dc00      	bgt.n	8019622 <_vfiprintf_r+0x91a>
 8019620:	e604      	b.n	801922c <_vfiprintf_r+0x524>
 8019622:	9903      	ldr	r1, [sp, #12]
 8019624:	9806      	ldr	r0, [sp, #24]
 8019626:	aa16      	add	r2, sp, #88	; 0x58
 8019628:	f7ff fb3a 	bl	8018ca0 <__sprint_r>
 801962c:	2800      	cmp	r0, #0
 801962e:	d100      	bne.n	8019632 <_vfiprintf_r+0x92a>
 8019630:	e5fc      	b.n	801922c <_vfiprintf_r+0x524>
 8019632:	9b03      	ldr	r3, [sp, #12]
 8019634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019636:	07db      	lsls	r3, r3, #31
 8019638:	d407      	bmi.n	801964a <_vfiprintf_r+0x942>
 801963a:	9b03      	ldr	r3, [sp, #12]
 801963c:	899b      	ldrh	r3, [r3, #12]
 801963e:	059b      	lsls	r3, r3, #22
 8019640:	d403      	bmi.n	801964a <_vfiprintf_r+0x942>
 8019642:	9b03      	ldr	r3, [sp, #12]
 8019644:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8019646:	f7fe fd1e 	bl	8018086 <__retarget_lock_release_recursive>
 801964a:	9b03      	ldr	r3, [sp, #12]
 801964c:	899b      	ldrh	r3, [r3, #12]
 801964e:	065b      	lsls	r3, r3, #25
 8019650:	d401      	bmi.n	8019656 <_vfiprintf_r+0x94e>
 8019652:	f7ff fb98 	bl	8018d86 <_vfiprintf_r+0x7e>
 8019656:	f7ff fb93 	bl	8018d80 <_vfiprintf_r+0x78>
 801965a:	3110      	adds	r1, #16
 801965c:	607d      	str	r5, [r7, #4]
 801965e:	9118      	str	r1, [sp, #96]	; 0x60
 8019660:	9217      	str	r2, [sp, #92]	; 0x5c
 8019662:	3708      	adds	r7, #8
 8019664:	2a07      	cmp	r2, #7
 8019666:	dd07      	ble.n	8019678 <_vfiprintf_r+0x970>
 8019668:	9903      	ldr	r1, [sp, #12]
 801966a:	9806      	ldr	r0, [sp, #24]
 801966c:	aa16      	add	r2, sp, #88	; 0x58
 801966e:	f7ff fb17 	bl	8018ca0 <__sprint_r>
 8019672:	2800      	cmp	r0, #0
 8019674:	d1dd      	bne.n	8019632 <_vfiprintf_r+0x92a>
 8019676:	af19      	add	r7, sp, #100	; 0x64
 8019678:	3c10      	subs	r4, #16
 801967a:	e7c3      	b.n	8019604 <_vfiprintf_r+0x8fc>
 801967c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801967e:	9300      	str	r3, [sp, #0]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d102      	bne.n	801968a <_vfiprintf_r+0x982>
 8019684:	2300      	movs	r3, #0
 8019686:	9317      	str	r3, [sp, #92]	; 0x5c
 8019688:	e7d3      	b.n	8019632 <_vfiprintf_r+0x92a>
 801968a:	9903      	ldr	r1, [sp, #12]
 801968c:	9806      	ldr	r0, [sp, #24]
 801968e:	aa16      	add	r2, sp, #88	; 0x58
 8019690:	f7ff fb06 	bl	8018ca0 <__sprint_r>
 8019694:	2800      	cmp	r0, #0
 8019696:	d0f5      	beq.n	8019684 <_vfiprintf_r+0x97c>
 8019698:	e7cb      	b.n	8019632 <_vfiprintf_r+0x92a>
 801969a:	0026      	movs	r6, r4
 801969c:	2a00      	cmp	r2, #0
 801969e:	d100      	bne.n	80196a2 <_vfiprintf_r+0x99a>
 80196a0:	e609      	b.n	80192b6 <_vfiprintf_r+0x5ae>
 80196a2:	2b01      	cmp	r3, #1
 80196a4:	d100      	bne.n	80196a8 <_vfiprintf_r+0x9a0>
 80196a6:	e6ef      	b.n	8019488 <_vfiprintf_r+0x780>
 80196a8:	ad42      	add	r5, sp, #264	; 0x108
 80196aa:	2b02      	cmp	r3, #2
 80196ac:	d100      	bne.n	80196b0 <_vfiprintf_r+0x9a8>
 80196ae:	e737      	b.n	8019520 <_vfiprintf_r+0x818>
 80196b0:	2307      	movs	r3, #7
 80196b2:	469c      	mov	ip, r3
 80196b4:	4663      	mov	r3, ip
 80196b6:	9900      	ldr	r1, [sp, #0]
 80196b8:	002a      	movs	r2, r5
 80196ba:	400b      	ands	r3, r1
 80196bc:	9901      	ldr	r1, [sp, #4]
 80196be:	3d01      	subs	r5, #1
 80196c0:	074c      	lsls	r4, r1, #29
 80196c2:	9900      	ldr	r1, [sp, #0]
 80196c4:	3330      	adds	r3, #48	; 0x30
 80196c6:	08c8      	lsrs	r0, r1, #3
 80196c8:	9901      	ldr	r1, [sp, #4]
 80196ca:	4304      	orrs	r4, r0
 80196cc:	08c9      	lsrs	r1, r1, #3
 80196ce:	9101      	str	r1, [sp, #4]
 80196d0:	0021      	movs	r1, r4
 80196d2:	9801      	ldr	r0, [sp, #4]
 80196d4:	702b      	strb	r3, [r5, #0]
 80196d6:	9400      	str	r4, [sp, #0]
 80196d8:	4301      	orrs	r1, r0
 80196da:	d1eb      	bne.n	80196b4 <_vfiprintf_r+0x9ac>
 80196dc:	0031      	movs	r1, r6
 80196de:	07c9      	lsls	r1, r1, #31
 80196e0:	d505      	bpl.n	80196ee <_vfiprintf_r+0x9e6>
 80196e2:	2b30      	cmp	r3, #48	; 0x30
 80196e4:	d003      	beq.n	80196ee <_vfiprintf_r+0x9e6>
 80196e6:	2330      	movs	r3, #48	; 0x30
 80196e8:	3d01      	subs	r5, #1
 80196ea:	702b      	strb	r3, [r5, #0]
 80196ec:	1e95      	subs	r5, r2, #2
 80196ee:	9b05      	ldr	r3, [sp, #20]
 80196f0:	0034      	movs	r4, r6
 80196f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80196f4:	ab42      	add	r3, sp, #264	; 0x108
 80196f6:	1b5b      	subs	r3, r3, r5
 80196f8:	9305      	str	r3, [sp, #20]
 80196fa:	e4c1      	b.n	8019080 <_vfiprintf_r+0x378>
 80196fc:	0801da81 	.word	0x0801da81
 8019700:	0801dd48 	.word	0x0801dd48

08019704 <__sbprintf>:
 8019704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019706:	0015      	movs	r5, r2
 8019708:	2202      	movs	r2, #2
 801970a:	4c1e      	ldr	r4, [pc, #120]	; (8019784 <__sbprintf+0x80>)
 801970c:	001f      	movs	r7, r3
 801970e:	898b      	ldrh	r3, [r1, #12]
 8019710:	44a5      	add	sp, r4
 8019712:	4393      	bics	r3, r2
 8019714:	466a      	mov	r2, sp
 8019716:	8193      	strh	r3, [r2, #12]
 8019718:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801971a:	0006      	movs	r6, r0
 801971c:	9319      	str	r3, [sp, #100]	; 0x64
 801971e:	89cb      	ldrh	r3, [r1, #14]
 8019720:	a816      	add	r0, sp, #88	; 0x58
 8019722:	81d3      	strh	r3, [r2, #14]
 8019724:	69cb      	ldr	r3, [r1, #28]
 8019726:	000c      	movs	r4, r1
 8019728:	9307      	str	r3, [sp, #28]
 801972a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801972c:	9309      	str	r3, [sp, #36]	; 0x24
 801972e:	ab1a      	add	r3, sp, #104	; 0x68
 8019730:	9300      	str	r3, [sp, #0]
 8019732:	9304      	str	r3, [sp, #16]
 8019734:	2380      	movs	r3, #128	; 0x80
 8019736:	00db      	lsls	r3, r3, #3
 8019738:	9302      	str	r3, [sp, #8]
 801973a:	9305      	str	r3, [sp, #20]
 801973c:	2300      	movs	r3, #0
 801973e:	9306      	str	r3, [sp, #24]
 8019740:	f7fe fc9e 	bl	8018080 <__retarget_lock_init_recursive>
 8019744:	002a      	movs	r2, r5
 8019746:	003b      	movs	r3, r7
 8019748:	4669      	mov	r1, sp
 801974a:	0030      	movs	r0, r6
 801974c:	f7ff fadc 	bl	8018d08 <_vfiprintf_r>
 8019750:	1e05      	subs	r5, r0, #0
 8019752:	db07      	blt.n	8019764 <__sbprintf+0x60>
 8019754:	4669      	mov	r1, sp
 8019756:	0030      	movs	r0, r6
 8019758:	f000 f91c 	bl	8019994 <_fflush_r>
 801975c:	2800      	cmp	r0, #0
 801975e:	d001      	beq.n	8019764 <__sbprintf+0x60>
 8019760:	2501      	movs	r5, #1
 8019762:	426d      	negs	r5, r5
 8019764:	466b      	mov	r3, sp
 8019766:	899a      	ldrh	r2, [r3, #12]
 8019768:	2340      	movs	r3, #64	; 0x40
 801976a:	421a      	tst	r2, r3
 801976c:	d002      	beq.n	8019774 <__sbprintf+0x70>
 801976e:	89a2      	ldrh	r2, [r4, #12]
 8019770:	4313      	orrs	r3, r2
 8019772:	81a3      	strh	r3, [r4, #12]
 8019774:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019776:	f7fe fc84 	bl	8018082 <__retarget_lock_close_recursive>
 801977a:	0028      	movs	r0, r5
 801977c:	4b02      	ldr	r3, [pc, #8]	; (8019788 <__sbprintf+0x84>)
 801977e:	449d      	add	sp, r3
 8019780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019782:	46c0      	nop			; (mov r8, r8)
 8019784:	fffffb94 	.word	0xfffffb94
 8019788:	0000046c 	.word	0x0000046c

0801978c <__swsetup_r>:
 801978c:	4b30      	ldr	r3, [pc, #192]	; (8019850 <__swsetup_r+0xc4>)
 801978e:	b570      	push	{r4, r5, r6, lr}
 8019790:	0005      	movs	r5, r0
 8019792:	6818      	ldr	r0, [r3, #0]
 8019794:	000c      	movs	r4, r1
 8019796:	2800      	cmp	r0, #0
 8019798:	d004      	beq.n	80197a4 <__swsetup_r+0x18>
 801979a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801979c:	2b00      	cmp	r3, #0
 801979e:	d101      	bne.n	80197a4 <__swsetup_r+0x18>
 80197a0:	f000 f96e 	bl	8019a80 <__sinit>
 80197a4:	230c      	movs	r3, #12
 80197a6:	5ee2      	ldrsh	r2, [r4, r3]
 80197a8:	b293      	uxth	r3, r2
 80197aa:	0711      	lsls	r1, r2, #28
 80197ac:	d423      	bmi.n	80197f6 <__swsetup_r+0x6a>
 80197ae:	06d9      	lsls	r1, r3, #27
 80197b0:	d407      	bmi.n	80197c2 <__swsetup_r+0x36>
 80197b2:	2309      	movs	r3, #9
 80197b4:	2001      	movs	r0, #1
 80197b6:	602b      	str	r3, [r5, #0]
 80197b8:	3337      	adds	r3, #55	; 0x37
 80197ba:	4313      	orrs	r3, r2
 80197bc:	81a3      	strh	r3, [r4, #12]
 80197be:	4240      	negs	r0, r0
 80197c0:	bd70      	pop	{r4, r5, r6, pc}
 80197c2:	075b      	lsls	r3, r3, #29
 80197c4:	d513      	bpl.n	80197ee <__swsetup_r+0x62>
 80197c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80197c8:	2900      	cmp	r1, #0
 80197ca:	d008      	beq.n	80197de <__swsetup_r+0x52>
 80197cc:	0023      	movs	r3, r4
 80197ce:	3340      	adds	r3, #64	; 0x40
 80197d0:	4299      	cmp	r1, r3
 80197d2:	d002      	beq.n	80197da <__swsetup_r+0x4e>
 80197d4:	0028      	movs	r0, r5
 80197d6:	f7fe f823 	bl	8017820 <_free_r>
 80197da:	2300      	movs	r3, #0
 80197dc:	6323      	str	r3, [r4, #48]	; 0x30
 80197de:	2224      	movs	r2, #36	; 0x24
 80197e0:	89a3      	ldrh	r3, [r4, #12]
 80197e2:	4393      	bics	r3, r2
 80197e4:	81a3      	strh	r3, [r4, #12]
 80197e6:	2300      	movs	r3, #0
 80197e8:	6063      	str	r3, [r4, #4]
 80197ea:	6923      	ldr	r3, [r4, #16]
 80197ec:	6023      	str	r3, [r4, #0]
 80197ee:	2308      	movs	r3, #8
 80197f0:	89a2      	ldrh	r2, [r4, #12]
 80197f2:	4313      	orrs	r3, r2
 80197f4:	81a3      	strh	r3, [r4, #12]
 80197f6:	6923      	ldr	r3, [r4, #16]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d10b      	bne.n	8019814 <__swsetup_r+0x88>
 80197fc:	21a0      	movs	r1, #160	; 0xa0
 80197fe:	2280      	movs	r2, #128	; 0x80
 8019800:	89a3      	ldrh	r3, [r4, #12]
 8019802:	0089      	lsls	r1, r1, #2
 8019804:	0092      	lsls	r2, r2, #2
 8019806:	400b      	ands	r3, r1
 8019808:	4293      	cmp	r3, r2
 801980a:	d003      	beq.n	8019814 <__swsetup_r+0x88>
 801980c:	0021      	movs	r1, r4
 801980e:	0028      	movs	r0, r5
 8019810:	f000 fb80 	bl	8019f14 <__smakebuf_r>
 8019814:	220c      	movs	r2, #12
 8019816:	5ea3      	ldrsh	r3, [r4, r2]
 8019818:	2001      	movs	r0, #1
 801981a:	001a      	movs	r2, r3
 801981c:	b299      	uxth	r1, r3
 801981e:	4002      	ands	r2, r0
 8019820:	4203      	tst	r3, r0
 8019822:	d00f      	beq.n	8019844 <__swsetup_r+0xb8>
 8019824:	2200      	movs	r2, #0
 8019826:	60a2      	str	r2, [r4, #8]
 8019828:	6962      	ldr	r2, [r4, #20]
 801982a:	4252      	negs	r2, r2
 801982c:	61a2      	str	r2, [r4, #24]
 801982e:	2000      	movs	r0, #0
 8019830:	6922      	ldr	r2, [r4, #16]
 8019832:	4282      	cmp	r2, r0
 8019834:	d1c4      	bne.n	80197c0 <__swsetup_r+0x34>
 8019836:	060a      	lsls	r2, r1, #24
 8019838:	d5c2      	bpl.n	80197c0 <__swsetup_r+0x34>
 801983a:	2240      	movs	r2, #64	; 0x40
 801983c:	4313      	orrs	r3, r2
 801983e:	81a3      	strh	r3, [r4, #12]
 8019840:	3801      	subs	r0, #1
 8019842:	e7bd      	b.n	80197c0 <__swsetup_r+0x34>
 8019844:	0788      	lsls	r0, r1, #30
 8019846:	d400      	bmi.n	801984a <__swsetup_r+0xbe>
 8019848:	6962      	ldr	r2, [r4, #20]
 801984a:	60a2      	str	r2, [r4, #8]
 801984c:	e7ef      	b.n	801982e <__swsetup_r+0xa2>
 801984e:	46c0      	nop			; (mov r8, r8)
 8019850:	200000a8 	.word	0x200000a8

08019854 <abort>:
 8019854:	2006      	movs	r0, #6
 8019856:	b510      	push	{r4, lr}
 8019858:	f000 fbcc 	bl	8019ff4 <raise>
 801985c:	2001      	movs	r0, #1
 801985e:	f000 fdc1 	bl	801a3e4 <_exit>
	...

08019864 <__sflush_r>:
 8019864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019866:	230c      	movs	r3, #12
 8019868:	5eca      	ldrsh	r2, [r1, r3]
 801986a:	000c      	movs	r4, r1
 801986c:	0005      	movs	r5, r0
 801986e:	b291      	uxth	r1, r2
 8019870:	0713      	lsls	r3, r2, #28
 8019872:	d467      	bmi.n	8019944 <__sflush_r+0xe0>
 8019874:	2380      	movs	r3, #128	; 0x80
 8019876:	011b      	lsls	r3, r3, #4
 8019878:	4313      	orrs	r3, r2
 801987a:	6862      	ldr	r2, [r4, #4]
 801987c:	81a3      	strh	r3, [r4, #12]
 801987e:	2a00      	cmp	r2, #0
 8019880:	dc04      	bgt.n	801988c <__sflush_r+0x28>
 8019882:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019884:	2a00      	cmp	r2, #0
 8019886:	dc01      	bgt.n	801988c <__sflush_r+0x28>
 8019888:	2000      	movs	r0, #0
 801988a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801988c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801988e:	2f00      	cmp	r7, #0
 8019890:	d0fa      	beq.n	8019888 <__sflush_r+0x24>
 8019892:	2200      	movs	r2, #0
 8019894:	2180      	movs	r1, #128	; 0x80
 8019896:	682e      	ldr	r6, [r5, #0]
 8019898:	602a      	str	r2, [r5, #0]
 801989a:	001a      	movs	r2, r3
 801989c:	0149      	lsls	r1, r1, #5
 801989e:	400a      	ands	r2, r1
 80198a0:	420b      	tst	r3, r1
 80198a2:	d038      	beq.n	8019916 <__sflush_r+0xb2>
 80198a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80198a6:	89a3      	ldrh	r3, [r4, #12]
 80198a8:	075b      	lsls	r3, r3, #29
 80198aa:	d506      	bpl.n	80198ba <__sflush_r+0x56>
 80198ac:	6863      	ldr	r3, [r4, #4]
 80198ae:	1ac0      	subs	r0, r0, r3
 80198b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d001      	beq.n	80198ba <__sflush_r+0x56>
 80198b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80198b8:	1ac0      	subs	r0, r0, r3
 80198ba:	0002      	movs	r2, r0
 80198bc:	69e1      	ldr	r1, [r4, #28]
 80198be:	2300      	movs	r3, #0
 80198c0:	0028      	movs	r0, r5
 80198c2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80198c4:	47b8      	blx	r7
 80198c6:	89a1      	ldrh	r1, [r4, #12]
 80198c8:	1c43      	adds	r3, r0, #1
 80198ca:	d106      	bne.n	80198da <__sflush_r+0x76>
 80198cc:	682b      	ldr	r3, [r5, #0]
 80198ce:	2b1d      	cmp	r3, #29
 80198d0:	d835      	bhi.n	801993e <__sflush_r+0xda>
 80198d2:	4a2e      	ldr	r2, [pc, #184]	; (801998c <__sflush_r+0x128>)
 80198d4:	40da      	lsrs	r2, r3
 80198d6:	07d3      	lsls	r3, r2, #31
 80198d8:	d531      	bpl.n	801993e <__sflush_r+0xda>
 80198da:	2200      	movs	r2, #0
 80198dc:	4b2c      	ldr	r3, [pc, #176]	; (8019990 <__sflush_r+0x12c>)
 80198de:	6062      	str	r2, [r4, #4]
 80198e0:	400b      	ands	r3, r1
 80198e2:	6922      	ldr	r2, [r4, #16]
 80198e4:	b21b      	sxth	r3, r3
 80198e6:	81a3      	strh	r3, [r4, #12]
 80198e8:	6022      	str	r2, [r4, #0]
 80198ea:	04db      	lsls	r3, r3, #19
 80198ec:	d505      	bpl.n	80198fa <__sflush_r+0x96>
 80198ee:	1c43      	adds	r3, r0, #1
 80198f0:	d102      	bne.n	80198f8 <__sflush_r+0x94>
 80198f2:	682b      	ldr	r3, [r5, #0]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d100      	bne.n	80198fa <__sflush_r+0x96>
 80198f8:	6520      	str	r0, [r4, #80]	; 0x50
 80198fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80198fc:	602e      	str	r6, [r5, #0]
 80198fe:	2900      	cmp	r1, #0
 8019900:	d0c2      	beq.n	8019888 <__sflush_r+0x24>
 8019902:	0023      	movs	r3, r4
 8019904:	3340      	adds	r3, #64	; 0x40
 8019906:	4299      	cmp	r1, r3
 8019908:	d002      	beq.n	8019910 <__sflush_r+0xac>
 801990a:	0028      	movs	r0, r5
 801990c:	f7fd ff88 	bl	8017820 <_free_r>
 8019910:	2000      	movs	r0, #0
 8019912:	6320      	str	r0, [r4, #48]	; 0x30
 8019914:	e7b9      	b.n	801988a <__sflush_r+0x26>
 8019916:	2301      	movs	r3, #1
 8019918:	0028      	movs	r0, r5
 801991a:	69e1      	ldr	r1, [r4, #28]
 801991c:	47b8      	blx	r7
 801991e:	1c43      	adds	r3, r0, #1
 8019920:	d1c1      	bne.n	80198a6 <__sflush_r+0x42>
 8019922:	682b      	ldr	r3, [r5, #0]
 8019924:	2b00      	cmp	r3, #0
 8019926:	d0be      	beq.n	80198a6 <__sflush_r+0x42>
 8019928:	2b1d      	cmp	r3, #29
 801992a:	d001      	beq.n	8019930 <__sflush_r+0xcc>
 801992c:	2b16      	cmp	r3, #22
 801992e:	d101      	bne.n	8019934 <__sflush_r+0xd0>
 8019930:	602e      	str	r6, [r5, #0]
 8019932:	e7a9      	b.n	8019888 <__sflush_r+0x24>
 8019934:	2340      	movs	r3, #64	; 0x40
 8019936:	89a2      	ldrh	r2, [r4, #12]
 8019938:	4313      	orrs	r3, r2
 801993a:	81a3      	strh	r3, [r4, #12]
 801993c:	e7a5      	b.n	801988a <__sflush_r+0x26>
 801993e:	2340      	movs	r3, #64	; 0x40
 8019940:	430b      	orrs	r3, r1
 8019942:	e7fa      	b.n	801993a <__sflush_r+0xd6>
 8019944:	6927      	ldr	r7, [r4, #16]
 8019946:	2f00      	cmp	r7, #0
 8019948:	d09e      	beq.n	8019888 <__sflush_r+0x24>
 801994a:	6823      	ldr	r3, [r4, #0]
 801994c:	6027      	str	r7, [r4, #0]
 801994e:	1bdb      	subs	r3, r3, r7
 8019950:	9301      	str	r3, [sp, #4]
 8019952:	2300      	movs	r3, #0
 8019954:	078a      	lsls	r2, r1, #30
 8019956:	d100      	bne.n	801995a <__sflush_r+0xf6>
 8019958:	6963      	ldr	r3, [r4, #20]
 801995a:	60a3      	str	r3, [r4, #8]
 801995c:	9b01      	ldr	r3, [sp, #4]
 801995e:	2b00      	cmp	r3, #0
 8019960:	dc00      	bgt.n	8019964 <__sflush_r+0x100>
 8019962:	e791      	b.n	8019888 <__sflush_r+0x24>
 8019964:	003a      	movs	r2, r7
 8019966:	0028      	movs	r0, r5
 8019968:	9b01      	ldr	r3, [sp, #4]
 801996a:	69e1      	ldr	r1, [r4, #28]
 801996c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801996e:	47b0      	blx	r6
 8019970:	2800      	cmp	r0, #0
 8019972:	dc06      	bgt.n	8019982 <__sflush_r+0x11e>
 8019974:	2340      	movs	r3, #64	; 0x40
 8019976:	2001      	movs	r0, #1
 8019978:	89a2      	ldrh	r2, [r4, #12]
 801997a:	4240      	negs	r0, r0
 801997c:	4313      	orrs	r3, r2
 801997e:	81a3      	strh	r3, [r4, #12]
 8019980:	e783      	b.n	801988a <__sflush_r+0x26>
 8019982:	9b01      	ldr	r3, [sp, #4]
 8019984:	183f      	adds	r7, r7, r0
 8019986:	1a1b      	subs	r3, r3, r0
 8019988:	9301      	str	r3, [sp, #4]
 801998a:	e7e7      	b.n	801995c <__sflush_r+0xf8>
 801998c:	20400001 	.word	0x20400001
 8019990:	fffff7ff 	.word	0xfffff7ff

08019994 <_fflush_r>:
 8019994:	b570      	push	{r4, r5, r6, lr}
 8019996:	0005      	movs	r5, r0
 8019998:	000c      	movs	r4, r1
 801999a:	2800      	cmp	r0, #0
 801999c:	d004      	beq.n	80199a8 <_fflush_r+0x14>
 801999e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d101      	bne.n	80199a8 <_fflush_r+0x14>
 80199a4:	f000 f86c 	bl	8019a80 <__sinit>
 80199a8:	220c      	movs	r2, #12
 80199aa:	5ea3      	ldrsh	r3, [r4, r2]
 80199ac:	1e1e      	subs	r6, r3, #0
 80199ae:	d015      	beq.n	80199dc <_fflush_r+0x48>
 80199b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80199b2:	07d2      	lsls	r2, r2, #31
 80199b4:	d404      	bmi.n	80199c0 <_fflush_r+0x2c>
 80199b6:	059b      	lsls	r3, r3, #22
 80199b8:	d402      	bmi.n	80199c0 <_fflush_r+0x2c>
 80199ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199bc:	f7fe fb62 	bl	8018084 <__retarget_lock_acquire_recursive>
 80199c0:	0021      	movs	r1, r4
 80199c2:	0028      	movs	r0, r5
 80199c4:	f7ff ff4e 	bl	8019864 <__sflush_r>
 80199c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80199ca:	0006      	movs	r6, r0
 80199cc:	07db      	lsls	r3, r3, #31
 80199ce:	d405      	bmi.n	80199dc <_fflush_r+0x48>
 80199d0:	89a3      	ldrh	r3, [r4, #12]
 80199d2:	059b      	lsls	r3, r3, #22
 80199d4:	d402      	bmi.n	80199dc <_fflush_r+0x48>
 80199d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199d8:	f7fe fb55 	bl	8018086 <__retarget_lock_release_recursive>
 80199dc:	0030      	movs	r0, r6
 80199de:	bd70      	pop	{r4, r5, r6, pc}

080199e0 <std>:
 80199e0:	2300      	movs	r3, #0
 80199e2:	b510      	push	{r4, lr}
 80199e4:	0004      	movs	r4, r0
 80199e6:	6003      	str	r3, [r0, #0]
 80199e8:	6043      	str	r3, [r0, #4]
 80199ea:	6083      	str	r3, [r0, #8]
 80199ec:	8181      	strh	r1, [r0, #12]
 80199ee:	6643      	str	r3, [r0, #100]	; 0x64
 80199f0:	0019      	movs	r1, r3
 80199f2:	81c2      	strh	r2, [r0, #14]
 80199f4:	6103      	str	r3, [r0, #16]
 80199f6:	2208      	movs	r2, #8
 80199f8:	6143      	str	r3, [r0, #20]
 80199fa:	6183      	str	r3, [r0, #24]
 80199fc:	305c      	adds	r0, #92	; 0x5c
 80199fe:	f7fa fc10 	bl	8014222 <memset>
 8019a02:	0020      	movs	r0, r4
 8019a04:	4b06      	ldr	r3, [pc, #24]	; (8019a20 <std+0x40>)
 8019a06:	61e4      	str	r4, [r4, #28]
 8019a08:	6223      	str	r3, [r4, #32]
 8019a0a:	4b06      	ldr	r3, [pc, #24]	; (8019a24 <std+0x44>)
 8019a0c:	3058      	adds	r0, #88	; 0x58
 8019a0e:	6263      	str	r3, [r4, #36]	; 0x24
 8019a10:	4b05      	ldr	r3, [pc, #20]	; (8019a28 <std+0x48>)
 8019a12:	62a3      	str	r3, [r4, #40]	; 0x28
 8019a14:	4b05      	ldr	r3, [pc, #20]	; (8019a2c <std+0x4c>)
 8019a16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019a18:	f7fe fb32 	bl	8018080 <__retarget_lock_init_recursive>
 8019a1c:	bd10      	pop	{r4, pc}
 8019a1e:	46c0      	nop			; (mov r8, r8)
 8019a20:	0801a035 	.word	0x0801a035
 8019a24:	0801a05d 	.word	0x0801a05d
 8019a28:	0801a095 	.word	0x0801a095
 8019a2c:	0801a0c1 	.word	0x0801a0c1

08019a30 <_cleanup_r>:
 8019a30:	b510      	push	{r4, lr}
 8019a32:	4902      	ldr	r1, [pc, #8]	; (8019a3c <_cleanup_r+0xc>)
 8019a34:	f000 fa1c 	bl	8019e70 <_fwalk_reent>
 8019a38:	bd10      	pop	{r4, pc}
 8019a3a:	46c0      	nop			; (mov r8, r8)
 8019a3c:	0801a1ed 	.word	0x0801a1ed

08019a40 <__sfp_lock_acquire>:
 8019a40:	b510      	push	{r4, lr}
 8019a42:	4802      	ldr	r0, [pc, #8]	; (8019a4c <__sfp_lock_acquire+0xc>)
 8019a44:	f7fe fb1e 	bl	8018084 <__retarget_lock_acquire_recursive>
 8019a48:	bd10      	pop	{r4, pc}
 8019a4a:	46c0      	nop			; (mov r8, r8)
 8019a4c:	20006fc0 	.word	0x20006fc0

08019a50 <__sfp_lock_release>:
 8019a50:	b510      	push	{r4, lr}
 8019a52:	4802      	ldr	r0, [pc, #8]	; (8019a5c <__sfp_lock_release+0xc>)
 8019a54:	f7fe fb17 	bl	8018086 <__retarget_lock_release_recursive>
 8019a58:	bd10      	pop	{r4, pc}
 8019a5a:	46c0      	nop			; (mov r8, r8)
 8019a5c:	20006fc0 	.word	0x20006fc0

08019a60 <__sinit_lock_acquire>:
 8019a60:	b510      	push	{r4, lr}
 8019a62:	4802      	ldr	r0, [pc, #8]	; (8019a6c <__sinit_lock_acquire+0xc>)
 8019a64:	f7fe fb0e 	bl	8018084 <__retarget_lock_acquire_recursive>
 8019a68:	bd10      	pop	{r4, pc}
 8019a6a:	46c0      	nop			; (mov r8, r8)
 8019a6c:	20006fbb 	.word	0x20006fbb

08019a70 <__sinit_lock_release>:
 8019a70:	b510      	push	{r4, lr}
 8019a72:	4802      	ldr	r0, [pc, #8]	; (8019a7c <__sinit_lock_release+0xc>)
 8019a74:	f7fe fb07 	bl	8018086 <__retarget_lock_release_recursive>
 8019a78:	bd10      	pop	{r4, pc}
 8019a7a:	46c0      	nop			; (mov r8, r8)
 8019a7c:	20006fbb 	.word	0x20006fbb

08019a80 <__sinit>:
 8019a80:	b510      	push	{r4, lr}
 8019a82:	0004      	movs	r4, r0
 8019a84:	f7ff ffec 	bl	8019a60 <__sinit_lock_acquire>
 8019a88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019a8a:	2a00      	cmp	r2, #0
 8019a8c:	d002      	beq.n	8019a94 <__sinit+0x14>
 8019a8e:	f7ff ffef 	bl	8019a70 <__sinit_lock_release>
 8019a92:	bd10      	pop	{r4, pc}
 8019a94:	4b0e      	ldr	r3, [pc, #56]	; (8019ad0 <__sinit+0x50>)
 8019a96:	2103      	movs	r1, #3
 8019a98:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019a9a:	23b8      	movs	r3, #184	; 0xb8
 8019a9c:	009b      	lsls	r3, r3, #2
 8019a9e:	50e2      	str	r2, [r4, r3]
 8019aa0:	3304      	adds	r3, #4
 8019aa2:	50e1      	str	r1, [r4, r3]
 8019aa4:	3308      	adds	r3, #8
 8019aa6:	18e1      	adds	r1, r4, r3
 8019aa8:	3b04      	subs	r3, #4
 8019aaa:	50e1      	str	r1, [r4, r3]
 8019aac:	6860      	ldr	r0, [r4, #4]
 8019aae:	2104      	movs	r1, #4
 8019ab0:	f7ff ff96 	bl	80199e0 <std>
 8019ab4:	2201      	movs	r2, #1
 8019ab6:	2109      	movs	r1, #9
 8019ab8:	68a0      	ldr	r0, [r4, #8]
 8019aba:	f7ff ff91 	bl	80199e0 <std>
 8019abe:	2202      	movs	r2, #2
 8019ac0:	2112      	movs	r1, #18
 8019ac2:	68e0      	ldr	r0, [r4, #12]
 8019ac4:	f7ff ff8c 	bl	80199e0 <std>
 8019ac8:	2301      	movs	r3, #1
 8019aca:	63a3      	str	r3, [r4, #56]	; 0x38
 8019acc:	e7df      	b.n	8019a8e <__sinit+0xe>
 8019ace:	46c0      	nop			; (mov r8, r8)
 8019ad0:	08019a31 	.word	0x08019a31

08019ad4 <__fputwc>:
 8019ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ad6:	b085      	sub	sp, #20
 8019ad8:	000e      	movs	r6, r1
 8019ada:	0015      	movs	r5, r2
 8019adc:	9001      	str	r0, [sp, #4]
 8019ade:	f7fe fac3 	bl	8018068 <__locale_mb_cur_max>
 8019ae2:	0004      	movs	r4, r0
 8019ae4:	2801      	cmp	r0, #1
 8019ae6:	d119      	bne.n	8019b1c <__fputwc+0x48>
 8019ae8:	1e73      	subs	r3, r6, #1
 8019aea:	2bfe      	cmp	r3, #254	; 0xfe
 8019aec:	d816      	bhi.n	8019b1c <__fputwc+0x48>
 8019aee:	ab02      	add	r3, sp, #8
 8019af0:	711e      	strb	r6, [r3, #4]
 8019af2:	2700      	movs	r7, #0
 8019af4:	42a7      	cmp	r7, r4
 8019af6:	d020      	beq.n	8019b3a <__fputwc+0x66>
 8019af8:	ab03      	add	r3, sp, #12
 8019afa:	5dd9      	ldrb	r1, [r3, r7]
 8019afc:	68ab      	ldr	r3, [r5, #8]
 8019afe:	3b01      	subs	r3, #1
 8019b00:	60ab      	str	r3, [r5, #8]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	da04      	bge.n	8019b10 <__fputwc+0x3c>
 8019b06:	69aa      	ldr	r2, [r5, #24]
 8019b08:	4293      	cmp	r3, r2
 8019b0a:	db19      	blt.n	8019b40 <__fputwc+0x6c>
 8019b0c:	290a      	cmp	r1, #10
 8019b0e:	d017      	beq.n	8019b40 <__fputwc+0x6c>
 8019b10:	682b      	ldr	r3, [r5, #0]
 8019b12:	1c5a      	adds	r2, r3, #1
 8019b14:	602a      	str	r2, [r5, #0]
 8019b16:	7019      	strb	r1, [r3, #0]
 8019b18:	3701      	adds	r7, #1
 8019b1a:	e7eb      	b.n	8019af4 <__fputwc+0x20>
 8019b1c:	002b      	movs	r3, r5
 8019b1e:	0032      	movs	r2, r6
 8019b20:	9801      	ldr	r0, [sp, #4]
 8019b22:	335c      	adds	r3, #92	; 0x5c
 8019b24:	a903      	add	r1, sp, #12
 8019b26:	f000 fb23 	bl	801a170 <_wcrtomb_r>
 8019b2a:	0004      	movs	r4, r0
 8019b2c:	1c43      	adds	r3, r0, #1
 8019b2e:	d1e0      	bne.n	8019af2 <__fputwc+0x1e>
 8019b30:	2340      	movs	r3, #64	; 0x40
 8019b32:	0006      	movs	r6, r0
 8019b34:	89aa      	ldrh	r2, [r5, #12]
 8019b36:	4313      	orrs	r3, r2
 8019b38:	81ab      	strh	r3, [r5, #12]
 8019b3a:	0030      	movs	r0, r6
 8019b3c:	b005      	add	sp, #20
 8019b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b40:	002a      	movs	r2, r5
 8019b42:	9801      	ldr	r0, [sp, #4]
 8019b44:	f000 fac2 	bl	801a0cc <__swbuf_r>
 8019b48:	1c43      	adds	r3, r0, #1
 8019b4a:	d1e5      	bne.n	8019b18 <__fputwc+0x44>
 8019b4c:	0006      	movs	r6, r0
 8019b4e:	e7f4      	b.n	8019b3a <__fputwc+0x66>

08019b50 <_fputwc_r>:
 8019b50:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8019b52:	b570      	push	{r4, r5, r6, lr}
 8019b54:	0005      	movs	r5, r0
 8019b56:	000e      	movs	r6, r1
 8019b58:	0014      	movs	r4, r2
 8019b5a:	07db      	lsls	r3, r3, #31
 8019b5c:	d405      	bmi.n	8019b6a <_fputwc_r+0x1a>
 8019b5e:	8993      	ldrh	r3, [r2, #12]
 8019b60:	059b      	lsls	r3, r3, #22
 8019b62:	d402      	bmi.n	8019b6a <_fputwc_r+0x1a>
 8019b64:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8019b66:	f7fe fa8d 	bl	8018084 <__retarget_lock_acquire_recursive>
 8019b6a:	230c      	movs	r3, #12
 8019b6c:	5ee2      	ldrsh	r2, [r4, r3]
 8019b6e:	2380      	movs	r3, #128	; 0x80
 8019b70:	019b      	lsls	r3, r3, #6
 8019b72:	421a      	tst	r2, r3
 8019b74:	d104      	bne.n	8019b80 <_fputwc_r+0x30>
 8019b76:	431a      	orrs	r2, r3
 8019b78:	81a2      	strh	r2, [r4, #12]
 8019b7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019b7c:	4313      	orrs	r3, r2
 8019b7e:	6663      	str	r3, [r4, #100]	; 0x64
 8019b80:	0028      	movs	r0, r5
 8019b82:	0022      	movs	r2, r4
 8019b84:	0031      	movs	r1, r6
 8019b86:	f7ff ffa5 	bl	8019ad4 <__fputwc>
 8019b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b8c:	0005      	movs	r5, r0
 8019b8e:	07db      	lsls	r3, r3, #31
 8019b90:	d405      	bmi.n	8019b9e <_fputwc_r+0x4e>
 8019b92:	89a3      	ldrh	r3, [r4, #12]
 8019b94:	059b      	lsls	r3, r3, #22
 8019b96:	d402      	bmi.n	8019b9e <_fputwc_r+0x4e>
 8019b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b9a:	f7fe fa74 	bl	8018086 <__retarget_lock_release_recursive>
 8019b9e:	0028      	movs	r0, r5
 8019ba0:	bd70      	pop	{r4, r5, r6, pc}
	...

08019ba4 <__sfvwrite_r>:
 8019ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ba6:	6893      	ldr	r3, [r2, #8]
 8019ba8:	b087      	sub	sp, #28
 8019baa:	000c      	movs	r4, r1
 8019bac:	9002      	str	r0, [sp, #8]
 8019bae:	9203      	str	r2, [sp, #12]
 8019bb0:	9300      	str	r3, [sp, #0]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d102      	bne.n	8019bbc <__sfvwrite_r+0x18>
 8019bb6:	2000      	movs	r0, #0
 8019bb8:	b007      	add	sp, #28
 8019bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bbc:	898b      	ldrh	r3, [r1, #12]
 8019bbe:	071b      	lsls	r3, r3, #28
 8019bc0:	d559      	bpl.n	8019c76 <__sfvwrite_r+0xd2>
 8019bc2:	690b      	ldr	r3, [r1, #16]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d056      	beq.n	8019c76 <__sfvwrite_r+0xd2>
 8019bc8:	9b03      	ldr	r3, [sp, #12]
 8019bca:	2202      	movs	r2, #2
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	9301      	str	r3, [sp, #4]
 8019bd0:	89a3      	ldrh	r3, [r4, #12]
 8019bd2:	001f      	movs	r7, r3
 8019bd4:	4017      	ands	r7, r2
 8019bd6:	4213      	tst	r3, r2
 8019bd8:	d173      	bne.n	8019cc2 <__sfvwrite_r+0x11e>
 8019bda:	2201      	movs	r2, #1
 8019bdc:	0019      	movs	r1, r3
 8019bde:	4011      	ands	r1, r2
 8019be0:	4213      	tst	r3, r2
 8019be2:	d100      	bne.n	8019be6 <__sfvwrite_r+0x42>
 8019be4:	e0a8      	b.n	8019d38 <__sfvwrite_r+0x194>
 8019be6:	0038      	movs	r0, r7
 8019be8:	003e      	movs	r6, r7
 8019bea:	9700      	str	r7, [sp, #0]
 8019bec:	9205      	str	r2, [sp, #20]
 8019bee:	9b00      	ldr	r3, [sp, #0]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d100      	bne.n	8019bf6 <__sfvwrite_r+0x52>
 8019bf4:	e112      	b.n	8019e1c <__sfvwrite_r+0x278>
 8019bf6:	2800      	cmp	r0, #0
 8019bf8:	d10a      	bne.n	8019c10 <__sfvwrite_r+0x6c>
 8019bfa:	001a      	movs	r2, r3
 8019bfc:	210a      	movs	r1, #10
 8019bfe:	0030      	movs	r0, r6
 8019c00:	f7fe fa54 	bl	80180ac <memchr>
 8019c04:	9b00      	ldr	r3, [sp, #0]
 8019c06:	1c5f      	adds	r7, r3, #1
 8019c08:	2800      	cmp	r0, #0
 8019c0a:	d001      	beq.n	8019c10 <__sfvwrite_r+0x6c>
 8019c0c:	3001      	adds	r0, #1
 8019c0e:	1b87      	subs	r7, r0, r6
 8019c10:	9b00      	ldr	r3, [sp, #0]
 8019c12:	9704      	str	r7, [sp, #16]
 8019c14:	429f      	cmp	r7, r3
 8019c16:	d900      	bls.n	8019c1a <__sfvwrite_r+0x76>
 8019c18:	9304      	str	r3, [sp, #16]
 8019c1a:	6820      	ldr	r0, [r4, #0]
 8019c1c:	6922      	ldr	r2, [r4, #16]
 8019c1e:	6963      	ldr	r3, [r4, #20]
 8019c20:	4290      	cmp	r0, r2
 8019c22:	d800      	bhi.n	8019c26 <__sfvwrite_r+0x82>
 8019c24:	e103      	b.n	8019e2e <__sfvwrite_r+0x28a>
 8019c26:	68a2      	ldr	r2, [r4, #8]
 8019c28:	189d      	adds	r5, r3, r2
 8019c2a:	9a04      	ldr	r2, [sp, #16]
 8019c2c:	42aa      	cmp	r2, r5
 8019c2e:	dc00      	bgt.n	8019c32 <__sfvwrite_r+0x8e>
 8019c30:	e0fd      	b.n	8019e2e <__sfvwrite_r+0x28a>
 8019c32:	0031      	movs	r1, r6
 8019c34:	002a      	movs	r2, r5
 8019c36:	f7fe fa44 	bl	80180c2 <memmove>
 8019c3a:	6823      	ldr	r3, [r4, #0]
 8019c3c:	0021      	movs	r1, r4
 8019c3e:	195b      	adds	r3, r3, r5
 8019c40:	9802      	ldr	r0, [sp, #8]
 8019c42:	6023      	str	r3, [r4, #0]
 8019c44:	f7ff fea6 	bl	8019994 <_fflush_r>
 8019c48:	2800      	cmp	r0, #0
 8019c4a:	d170      	bne.n	8019d2e <__sfvwrite_r+0x18a>
 8019c4c:	9805      	ldr	r0, [sp, #20]
 8019c4e:	1b7f      	subs	r7, r7, r5
 8019c50:	d105      	bne.n	8019c5e <__sfvwrite_r+0xba>
 8019c52:	0021      	movs	r1, r4
 8019c54:	9802      	ldr	r0, [sp, #8]
 8019c56:	f7ff fe9d 	bl	8019994 <_fflush_r>
 8019c5a:	2800      	cmp	r0, #0
 8019c5c:	d167      	bne.n	8019d2e <__sfvwrite_r+0x18a>
 8019c5e:	9b00      	ldr	r3, [sp, #0]
 8019c60:	1976      	adds	r6, r6, r5
 8019c62:	1b5b      	subs	r3, r3, r5
 8019c64:	9300      	str	r3, [sp, #0]
 8019c66:	9b03      	ldr	r3, [sp, #12]
 8019c68:	689b      	ldr	r3, [r3, #8]
 8019c6a:	1b5d      	subs	r5, r3, r5
 8019c6c:	9304      	str	r3, [sp, #16]
 8019c6e:	9b03      	ldr	r3, [sp, #12]
 8019c70:	609d      	str	r5, [r3, #8]
 8019c72:	d1bc      	bne.n	8019bee <__sfvwrite_r+0x4a>
 8019c74:	e79f      	b.n	8019bb6 <__sfvwrite_r+0x12>
 8019c76:	0021      	movs	r1, r4
 8019c78:	9802      	ldr	r0, [sp, #8]
 8019c7a:	f7ff fd87 	bl	801978c <__swsetup_r>
 8019c7e:	2800      	cmp	r0, #0
 8019c80:	d0a2      	beq.n	8019bc8 <__sfvwrite_r+0x24>
 8019c82:	2001      	movs	r0, #1
 8019c84:	4240      	negs	r0, r0
 8019c86:	e797      	b.n	8019bb8 <__sfvwrite_r+0x14>
 8019c88:	9b01      	ldr	r3, [sp, #4]
 8019c8a:	681e      	ldr	r6, [r3, #0]
 8019c8c:	685d      	ldr	r5, [r3, #4]
 8019c8e:	3308      	adds	r3, #8
 8019c90:	9301      	str	r3, [sp, #4]
 8019c92:	2d00      	cmp	r5, #0
 8019c94:	d0f8      	beq.n	8019c88 <__sfvwrite_r+0xe4>
 8019c96:	4a72      	ldr	r2, [pc, #456]	; (8019e60 <__sfvwrite_r+0x2bc>)
 8019c98:	002b      	movs	r3, r5
 8019c9a:	4295      	cmp	r5, r2
 8019c9c:	d900      	bls.n	8019ca0 <__sfvwrite_r+0xfc>
 8019c9e:	0013      	movs	r3, r2
 8019ca0:	0032      	movs	r2, r6
 8019ca2:	69e1      	ldr	r1, [r4, #28]
 8019ca4:	9802      	ldr	r0, [sp, #8]
 8019ca6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8019ca8:	47b8      	blx	r7
 8019caa:	2800      	cmp	r0, #0
 8019cac:	dd3f      	ble.n	8019d2e <__sfvwrite_r+0x18a>
 8019cae:	9b03      	ldr	r3, [sp, #12]
 8019cb0:	1836      	adds	r6, r6, r0
 8019cb2:	689b      	ldr	r3, [r3, #8]
 8019cb4:	1a2d      	subs	r5, r5, r0
 8019cb6:	9300      	str	r3, [sp, #0]
 8019cb8:	1a18      	subs	r0, r3, r0
 8019cba:	9b03      	ldr	r3, [sp, #12]
 8019cbc:	6098      	str	r0, [r3, #8]
 8019cbe:	d1e8      	bne.n	8019c92 <__sfvwrite_r+0xee>
 8019cc0:	e779      	b.n	8019bb6 <__sfvwrite_r+0x12>
 8019cc2:	2600      	movs	r6, #0
 8019cc4:	0035      	movs	r5, r6
 8019cc6:	e7e4      	b.n	8019c92 <__sfvwrite_r+0xee>
 8019cc8:	9b01      	ldr	r3, [sp, #4]
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	9304      	str	r3, [sp, #16]
 8019cce:	9b01      	ldr	r3, [sp, #4]
 8019cd0:	685b      	ldr	r3, [r3, #4]
 8019cd2:	9300      	str	r3, [sp, #0]
 8019cd4:	9b01      	ldr	r3, [sp, #4]
 8019cd6:	3308      	adds	r3, #8
 8019cd8:	9301      	str	r3, [sp, #4]
 8019cda:	9b00      	ldr	r3, [sp, #0]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d0f3      	beq.n	8019cc8 <__sfvwrite_r+0x124>
 8019ce0:	2380      	movs	r3, #128	; 0x80
 8019ce2:	89a2      	ldrh	r2, [r4, #12]
 8019ce4:	009b      	lsls	r3, r3, #2
 8019ce6:	68a5      	ldr	r5, [r4, #8]
 8019ce8:	6820      	ldr	r0, [r4, #0]
 8019cea:	421a      	tst	r2, r3
 8019cec:	d064      	beq.n	8019db8 <__sfvwrite_r+0x214>
 8019cee:	9b00      	ldr	r3, [sp, #0]
 8019cf0:	429d      	cmp	r5, r3
 8019cf2:	d835      	bhi.n	8019d60 <__sfvwrite_r+0x1bc>
 8019cf4:	2390      	movs	r3, #144	; 0x90
 8019cf6:	00db      	lsls	r3, r3, #3
 8019cf8:	421a      	tst	r2, r3
 8019cfa:	d031      	beq.n	8019d60 <__sfvwrite_r+0x1bc>
 8019cfc:	2603      	movs	r6, #3
 8019cfe:	6963      	ldr	r3, [r4, #20]
 8019d00:	6921      	ldr	r1, [r4, #16]
 8019d02:	435e      	muls	r6, r3
 8019d04:	1a47      	subs	r7, r0, r1
 8019d06:	0ff0      	lsrs	r0, r6, #31
 8019d08:	1986      	adds	r6, r0, r6
 8019d0a:	9800      	ldr	r0, [sp, #0]
 8019d0c:	1c7b      	adds	r3, r7, #1
 8019d0e:	181b      	adds	r3, r3, r0
 8019d10:	1076      	asrs	r6, r6, #1
 8019d12:	42b3      	cmp	r3, r6
 8019d14:	d900      	bls.n	8019d18 <__sfvwrite_r+0x174>
 8019d16:	001e      	movs	r6, r3
 8019d18:	0553      	lsls	r3, r2, #21
 8019d1a:	d53e      	bpl.n	8019d9a <__sfvwrite_r+0x1f6>
 8019d1c:	0031      	movs	r1, r6
 8019d1e:	9802      	ldr	r0, [sp, #8]
 8019d20:	f7fa f854 	bl	8013dcc <_malloc_r>
 8019d24:	1e05      	subs	r5, r0, #0
 8019d26:	d10a      	bne.n	8019d3e <__sfvwrite_r+0x19a>
 8019d28:	230c      	movs	r3, #12
 8019d2a:	9a02      	ldr	r2, [sp, #8]
 8019d2c:	6013      	str	r3, [r2, #0]
 8019d2e:	2340      	movs	r3, #64	; 0x40
 8019d30:	89a2      	ldrh	r2, [r4, #12]
 8019d32:	4313      	orrs	r3, r2
 8019d34:	81a3      	strh	r3, [r4, #12]
 8019d36:	e7a4      	b.n	8019c82 <__sfvwrite_r+0xde>
 8019d38:	9104      	str	r1, [sp, #16]
 8019d3a:	9100      	str	r1, [sp, #0]
 8019d3c:	e7cd      	b.n	8019cda <__sfvwrite_r+0x136>
 8019d3e:	003a      	movs	r2, r7
 8019d40:	6921      	ldr	r1, [r4, #16]
 8019d42:	f7fa fa65 	bl	8014210 <memcpy>
 8019d46:	89a3      	ldrh	r3, [r4, #12]
 8019d48:	4a46      	ldr	r2, [pc, #280]	; (8019e64 <__sfvwrite_r+0x2c0>)
 8019d4a:	401a      	ands	r2, r3
 8019d4c:	2380      	movs	r3, #128	; 0x80
 8019d4e:	4313      	orrs	r3, r2
 8019d50:	81a3      	strh	r3, [r4, #12]
 8019d52:	6125      	str	r5, [r4, #16]
 8019d54:	19ed      	adds	r5, r5, r7
 8019d56:	6025      	str	r5, [r4, #0]
 8019d58:	6166      	str	r6, [r4, #20]
 8019d5a:	9d00      	ldr	r5, [sp, #0]
 8019d5c:	1bf6      	subs	r6, r6, r7
 8019d5e:	60a6      	str	r6, [r4, #8]
 8019d60:	9f00      	ldr	r7, [sp, #0]
 8019d62:	42bd      	cmp	r5, r7
 8019d64:	d900      	bls.n	8019d68 <__sfvwrite_r+0x1c4>
 8019d66:	003d      	movs	r5, r7
 8019d68:	002a      	movs	r2, r5
 8019d6a:	9904      	ldr	r1, [sp, #16]
 8019d6c:	6820      	ldr	r0, [r4, #0]
 8019d6e:	f7fe f9a8 	bl	80180c2 <memmove>
 8019d72:	68a3      	ldr	r3, [r4, #8]
 8019d74:	1b5b      	subs	r3, r3, r5
 8019d76:	60a3      	str	r3, [r4, #8]
 8019d78:	6823      	ldr	r3, [r4, #0]
 8019d7a:	195d      	adds	r5, r3, r5
 8019d7c:	6025      	str	r5, [r4, #0]
 8019d7e:	9b04      	ldr	r3, [sp, #16]
 8019d80:	19db      	adds	r3, r3, r7
 8019d82:	9304      	str	r3, [sp, #16]
 8019d84:	9b00      	ldr	r3, [sp, #0]
 8019d86:	1bdb      	subs	r3, r3, r7
 8019d88:	9300      	str	r3, [sp, #0]
 8019d8a:	9b03      	ldr	r3, [sp, #12]
 8019d8c:	689b      	ldr	r3, [r3, #8]
 8019d8e:	1bdf      	subs	r7, r3, r7
 8019d90:	9305      	str	r3, [sp, #20]
 8019d92:	9b03      	ldr	r3, [sp, #12]
 8019d94:	609f      	str	r7, [r3, #8]
 8019d96:	d1a0      	bne.n	8019cda <__sfvwrite_r+0x136>
 8019d98:	e70d      	b.n	8019bb6 <__sfvwrite_r+0x12>
 8019d9a:	0032      	movs	r2, r6
 8019d9c:	9802      	ldr	r0, [sp, #8]
 8019d9e:	f7fa fa7d 	bl	801429c <_realloc_r>
 8019da2:	1e05      	subs	r5, r0, #0
 8019da4:	d1d5      	bne.n	8019d52 <__sfvwrite_r+0x1ae>
 8019da6:	6921      	ldr	r1, [r4, #16]
 8019da8:	9802      	ldr	r0, [sp, #8]
 8019daa:	f7fd fd39 	bl	8017820 <_free_r>
 8019dae:	2280      	movs	r2, #128	; 0x80
 8019db0:	89a3      	ldrh	r3, [r4, #12]
 8019db2:	4393      	bics	r3, r2
 8019db4:	81a3      	strh	r3, [r4, #12]
 8019db6:	e7b7      	b.n	8019d28 <__sfvwrite_r+0x184>
 8019db8:	6923      	ldr	r3, [r4, #16]
 8019dba:	4283      	cmp	r3, r0
 8019dbc:	d303      	bcc.n	8019dc6 <__sfvwrite_r+0x222>
 8019dbe:	6967      	ldr	r7, [r4, #20]
 8019dc0:	9b00      	ldr	r3, [sp, #0]
 8019dc2:	429f      	cmp	r7, r3
 8019dc4:	d917      	bls.n	8019df6 <__sfvwrite_r+0x252>
 8019dc6:	9b00      	ldr	r3, [sp, #0]
 8019dc8:	429d      	cmp	r5, r3
 8019dca:	d900      	bls.n	8019dce <__sfvwrite_r+0x22a>
 8019dcc:	001d      	movs	r5, r3
 8019dce:	002a      	movs	r2, r5
 8019dd0:	9904      	ldr	r1, [sp, #16]
 8019dd2:	f7fe f976 	bl	80180c2 <memmove>
 8019dd6:	68a3      	ldr	r3, [r4, #8]
 8019dd8:	6822      	ldr	r2, [r4, #0]
 8019dda:	1b5b      	subs	r3, r3, r5
 8019ddc:	1952      	adds	r2, r2, r5
 8019dde:	002f      	movs	r7, r5
 8019de0:	60a3      	str	r3, [r4, #8]
 8019de2:	6022      	str	r2, [r4, #0]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d1ca      	bne.n	8019d7e <__sfvwrite_r+0x1da>
 8019de8:	0021      	movs	r1, r4
 8019dea:	9802      	ldr	r0, [sp, #8]
 8019dec:	f7ff fdd2 	bl	8019994 <_fflush_r>
 8019df0:	2800      	cmp	r0, #0
 8019df2:	d0c4      	beq.n	8019d7e <__sfvwrite_r+0x1da>
 8019df4:	e79b      	b.n	8019d2e <__sfvwrite_r+0x18a>
 8019df6:	9a00      	ldr	r2, [sp, #0]
 8019df8:	4b1b      	ldr	r3, [pc, #108]	; (8019e68 <__sfvwrite_r+0x2c4>)
 8019dfa:	0010      	movs	r0, r2
 8019dfc:	429a      	cmp	r2, r3
 8019dfe:	d900      	bls.n	8019e02 <__sfvwrite_r+0x25e>
 8019e00:	481a      	ldr	r0, [pc, #104]	; (8019e6c <__sfvwrite_r+0x2c8>)
 8019e02:	0039      	movs	r1, r7
 8019e04:	f7e6 fa2e 	bl	8000264 <__divsi3>
 8019e08:	003b      	movs	r3, r7
 8019e0a:	9a04      	ldr	r2, [sp, #16]
 8019e0c:	4343      	muls	r3, r0
 8019e0e:	69e1      	ldr	r1, [r4, #28]
 8019e10:	9802      	ldr	r0, [sp, #8]
 8019e12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019e14:	47a8      	blx	r5
 8019e16:	1e07      	subs	r7, r0, #0
 8019e18:	dcb1      	bgt.n	8019d7e <__sfvwrite_r+0x1da>
 8019e1a:	e788      	b.n	8019d2e <__sfvwrite_r+0x18a>
 8019e1c:	9b01      	ldr	r3, [sp, #4]
 8019e1e:	2000      	movs	r0, #0
 8019e20:	681e      	ldr	r6, [r3, #0]
 8019e22:	685b      	ldr	r3, [r3, #4]
 8019e24:	9300      	str	r3, [sp, #0]
 8019e26:	9b01      	ldr	r3, [sp, #4]
 8019e28:	3308      	adds	r3, #8
 8019e2a:	9301      	str	r3, [sp, #4]
 8019e2c:	e6df      	b.n	8019bee <__sfvwrite_r+0x4a>
 8019e2e:	9a04      	ldr	r2, [sp, #16]
 8019e30:	4293      	cmp	r3, r2
 8019e32:	dc08      	bgt.n	8019e46 <__sfvwrite_r+0x2a2>
 8019e34:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019e36:	0032      	movs	r2, r6
 8019e38:	69e1      	ldr	r1, [r4, #28]
 8019e3a:	9802      	ldr	r0, [sp, #8]
 8019e3c:	47a8      	blx	r5
 8019e3e:	1e05      	subs	r5, r0, #0
 8019e40:	dd00      	ble.n	8019e44 <__sfvwrite_r+0x2a0>
 8019e42:	e703      	b.n	8019c4c <__sfvwrite_r+0xa8>
 8019e44:	e773      	b.n	8019d2e <__sfvwrite_r+0x18a>
 8019e46:	9a04      	ldr	r2, [sp, #16]
 8019e48:	0031      	movs	r1, r6
 8019e4a:	f7fe f93a 	bl	80180c2 <memmove>
 8019e4e:	9a04      	ldr	r2, [sp, #16]
 8019e50:	68a3      	ldr	r3, [r4, #8]
 8019e52:	0015      	movs	r5, r2
 8019e54:	1a9b      	subs	r3, r3, r2
 8019e56:	60a3      	str	r3, [r4, #8]
 8019e58:	6823      	ldr	r3, [r4, #0]
 8019e5a:	189b      	adds	r3, r3, r2
 8019e5c:	6023      	str	r3, [r4, #0]
 8019e5e:	e6f5      	b.n	8019c4c <__sfvwrite_r+0xa8>
 8019e60:	7ffffc00 	.word	0x7ffffc00
 8019e64:	fffffb7f 	.word	0xfffffb7f
 8019e68:	7ffffffe 	.word	0x7ffffffe
 8019e6c:	7fffffff 	.word	0x7fffffff

08019e70 <_fwalk_reent>:
 8019e70:	23b8      	movs	r3, #184	; 0xb8
 8019e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019e74:	0006      	movs	r6, r0
 8019e76:	2700      	movs	r7, #0
 8019e78:	009b      	lsls	r3, r3, #2
 8019e7a:	9101      	str	r1, [sp, #4]
 8019e7c:	18c4      	adds	r4, r0, r3
 8019e7e:	6863      	ldr	r3, [r4, #4]
 8019e80:	68a5      	ldr	r5, [r4, #8]
 8019e82:	9300      	str	r3, [sp, #0]
 8019e84:	9b00      	ldr	r3, [sp, #0]
 8019e86:	3b01      	subs	r3, #1
 8019e88:	9300      	str	r3, [sp, #0]
 8019e8a:	d504      	bpl.n	8019e96 <_fwalk_reent+0x26>
 8019e8c:	6824      	ldr	r4, [r4, #0]
 8019e8e:	2c00      	cmp	r4, #0
 8019e90:	d1f5      	bne.n	8019e7e <_fwalk_reent+0xe>
 8019e92:	0038      	movs	r0, r7
 8019e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019e96:	89ab      	ldrh	r3, [r5, #12]
 8019e98:	2b01      	cmp	r3, #1
 8019e9a:	d908      	bls.n	8019eae <_fwalk_reent+0x3e>
 8019e9c:	220e      	movs	r2, #14
 8019e9e:	5eab      	ldrsh	r3, [r5, r2]
 8019ea0:	3301      	adds	r3, #1
 8019ea2:	d004      	beq.n	8019eae <_fwalk_reent+0x3e>
 8019ea4:	0029      	movs	r1, r5
 8019ea6:	0030      	movs	r0, r6
 8019ea8:	9b01      	ldr	r3, [sp, #4]
 8019eaa:	4798      	blx	r3
 8019eac:	4307      	orrs	r7, r0
 8019eae:	3568      	adds	r5, #104	; 0x68
 8019eb0:	e7e8      	b.n	8019e84 <_fwalk_reent+0x14>
	...

08019eb4 <__swhatbuf_r>:
 8019eb4:	b570      	push	{r4, r5, r6, lr}
 8019eb6:	000e      	movs	r6, r1
 8019eb8:	001d      	movs	r5, r3
 8019eba:	230e      	movs	r3, #14
 8019ebc:	5ec9      	ldrsh	r1, [r1, r3]
 8019ebe:	0014      	movs	r4, r2
 8019ec0:	b096      	sub	sp, #88	; 0x58
 8019ec2:	2900      	cmp	r1, #0
 8019ec4:	da0b      	bge.n	8019ede <__swhatbuf_r+0x2a>
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	602b      	str	r3, [r5, #0]
 8019eca:	89b1      	ldrh	r1, [r6, #12]
 8019ecc:	2280      	movs	r2, #128	; 0x80
 8019ece:	0008      	movs	r0, r1
 8019ed0:	4010      	ands	r0, r2
 8019ed2:	4211      	tst	r1, r2
 8019ed4:	d117      	bne.n	8019f06 <__swhatbuf_r+0x52>
 8019ed6:	2380      	movs	r3, #128	; 0x80
 8019ed8:	00db      	lsls	r3, r3, #3
 8019eda:	6023      	str	r3, [r4, #0]
 8019edc:	e016      	b.n	8019f0c <__swhatbuf_r+0x58>
 8019ede:	466a      	mov	r2, sp
 8019ee0:	f000 f9e4 	bl	801a2ac <_fstat_r>
 8019ee4:	2800      	cmp	r0, #0
 8019ee6:	dbee      	blt.n	8019ec6 <__swhatbuf_r+0x12>
 8019ee8:	23f0      	movs	r3, #240	; 0xf0
 8019eea:	9901      	ldr	r1, [sp, #4]
 8019eec:	021b      	lsls	r3, r3, #8
 8019eee:	4019      	ands	r1, r3
 8019ef0:	4b07      	ldr	r3, [pc, #28]	; (8019f10 <__swhatbuf_r+0x5c>)
 8019ef2:	2080      	movs	r0, #128	; 0x80
 8019ef4:	18c9      	adds	r1, r1, r3
 8019ef6:	424b      	negs	r3, r1
 8019ef8:	4159      	adcs	r1, r3
 8019efa:	2380      	movs	r3, #128	; 0x80
 8019efc:	00db      	lsls	r3, r3, #3
 8019efe:	6029      	str	r1, [r5, #0]
 8019f00:	0100      	lsls	r0, r0, #4
 8019f02:	6023      	str	r3, [r4, #0]
 8019f04:	e002      	b.n	8019f0c <__swhatbuf_r+0x58>
 8019f06:	2240      	movs	r2, #64	; 0x40
 8019f08:	0018      	movs	r0, r3
 8019f0a:	6022      	str	r2, [r4, #0]
 8019f0c:	b016      	add	sp, #88	; 0x58
 8019f0e:	bd70      	pop	{r4, r5, r6, pc}
 8019f10:	ffffe000 	.word	0xffffe000

08019f14 <__smakebuf_r>:
 8019f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f16:	2602      	movs	r6, #2
 8019f18:	898b      	ldrh	r3, [r1, #12]
 8019f1a:	0005      	movs	r5, r0
 8019f1c:	000c      	movs	r4, r1
 8019f1e:	4233      	tst	r3, r6
 8019f20:	d006      	beq.n	8019f30 <__smakebuf_r+0x1c>
 8019f22:	0023      	movs	r3, r4
 8019f24:	3343      	adds	r3, #67	; 0x43
 8019f26:	6023      	str	r3, [r4, #0]
 8019f28:	6123      	str	r3, [r4, #16]
 8019f2a:	2301      	movs	r3, #1
 8019f2c:	6163      	str	r3, [r4, #20]
 8019f2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8019f30:	466a      	mov	r2, sp
 8019f32:	ab01      	add	r3, sp, #4
 8019f34:	f7ff ffbe 	bl	8019eb4 <__swhatbuf_r>
 8019f38:	9900      	ldr	r1, [sp, #0]
 8019f3a:	0007      	movs	r7, r0
 8019f3c:	0028      	movs	r0, r5
 8019f3e:	f7f9 ff45 	bl	8013dcc <_malloc_r>
 8019f42:	2800      	cmp	r0, #0
 8019f44:	d108      	bne.n	8019f58 <__smakebuf_r+0x44>
 8019f46:	220c      	movs	r2, #12
 8019f48:	5ea3      	ldrsh	r3, [r4, r2]
 8019f4a:	059a      	lsls	r2, r3, #22
 8019f4c:	d4ef      	bmi.n	8019f2e <__smakebuf_r+0x1a>
 8019f4e:	2203      	movs	r2, #3
 8019f50:	4393      	bics	r3, r2
 8019f52:	431e      	orrs	r6, r3
 8019f54:	81a6      	strh	r6, [r4, #12]
 8019f56:	e7e4      	b.n	8019f22 <__smakebuf_r+0xe>
 8019f58:	4b0f      	ldr	r3, [pc, #60]	; (8019f98 <__smakebuf_r+0x84>)
 8019f5a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8019f5c:	2380      	movs	r3, #128	; 0x80
 8019f5e:	89a2      	ldrh	r2, [r4, #12]
 8019f60:	6020      	str	r0, [r4, #0]
 8019f62:	4313      	orrs	r3, r2
 8019f64:	81a3      	strh	r3, [r4, #12]
 8019f66:	9b00      	ldr	r3, [sp, #0]
 8019f68:	6120      	str	r0, [r4, #16]
 8019f6a:	6163      	str	r3, [r4, #20]
 8019f6c:	9b01      	ldr	r3, [sp, #4]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d00d      	beq.n	8019f8e <__smakebuf_r+0x7a>
 8019f72:	0028      	movs	r0, r5
 8019f74:	230e      	movs	r3, #14
 8019f76:	5ee1      	ldrsh	r1, [r4, r3]
 8019f78:	f000 f9aa 	bl	801a2d0 <_isatty_r>
 8019f7c:	2800      	cmp	r0, #0
 8019f7e:	d006      	beq.n	8019f8e <__smakebuf_r+0x7a>
 8019f80:	2203      	movs	r2, #3
 8019f82:	89a3      	ldrh	r3, [r4, #12]
 8019f84:	4393      	bics	r3, r2
 8019f86:	001a      	movs	r2, r3
 8019f88:	2301      	movs	r3, #1
 8019f8a:	4313      	orrs	r3, r2
 8019f8c:	81a3      	strh	r3, [r4, #12]
 8019f8e:	89a0      	ldrh	r0, [r4, #12]
 8019f90:	4307      	orrs	r7, r0
 8019f92:	81a7      	strh	r7, [r4, #12]
 8019f94:	e7cb      	b.n	8019f2e <__smakebuf_r+0x1a>
 8019f96:	46c0      	nop			; (mov r8, r8)
 8019f98:	08019a31 	.word	0x08019a31

08019f9c <_raise_r>:
 8019f9c:	b570      	push	{r4, r5, r6, lr}
 8019f9e:	0004      	movs	r4, r0
 8019fa0:	000d      	movs	r5, r1
 8019fa2:	291f      	cmp	r1, #31
 8019fa4:	d904      	bls.n	8019fb0 <_raise_r+0x14>
 8019fa6:	2316      	movs	r3, #22
 8019fa8:	6003      	str	r3, [r0, #0]
 8019faa:	2001      	movs	r0, #1
 8019fac:	4240      	negs	r0, r0
 8019fae:	bd70      	pop	{r4, r5, r6, pc}
 8019fb0:	23b7      	movs	r3, #183	; 0xb7
 8019fb2:	009b      	lsls	r3, r3, #2
 8019fb4:	58c3      	ldr	r3, [r0, r3]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d004      	beq.n	8019fc4 <_raise_r+0x28>
 8019fba:	008a      	lsls	r2, r1, #2
 8019fbc:	189b      	adds	r3, r3, r2
 8019fbe:	681a      	ldr	r2, [r3, #0]
 8019fc0:	2a00      	cmp	r2, #0
 8019fc2:	d108      	bne.n	8019fd6 <_raise_r+0x3a>
 8019fc4:	0020      	movs	r0, r4
 8019fc6:	f000 f831 	bl	801a02c <_getpid_r>
 8019fca:	002a      	movs	r2, r5
 8019fcc:	0001      	movs	r1, r0
 8019fce:	0020      	movs	r0, r4
 8019fd0:	f000 f81a 	bl	801a008 <_kill_r>
 8019fd4:	e7eb      	b.n	8019fae <_raise_r+0x12>
 8019fd6:	2000      	movs	r0, #0
 8019fd8:	2a01      	cmp	r2, #1
 8019fda:	d0e8      	beq.n	8019fae <_raise_r+0x12>
 8019fdc:	1c51      	adds	r1, r2, #1
 8019fde:	d103      	bne.n	8019fe8 <_raise_r+0x4c>
 8019fe0:	2316      	movs	r3, #22
 8019fe2:	3001      	adds	r0, #1
 8019fe4:	6023      	str	r3, [r4, #0]
 8019fe6:	e7e2      	b.n	8019fae <_raise_r+0x12>
 8019fe8:	2400      	movs	r4, #0
 8019fea:	0028      	movs	r0, r5
 8019fec:	601c      	str	r4, [r3, #0]
 8019fee:	4790      	blx	r2
 8019ff0:	0020      	movs	r0, r4
 8019ff2:	e7dc      	b.n	8019fae <_raise_r+0x12>

08019ff4 <raise>:
 8019ff4:	b510      	push	{r4, lr}
 8019ff6:	4b03      	ldr	r3, [pc, #12]	; (801a004 <raise+0x10>)
 8019ff8:	0001      	movs	r1, r0
 8019ffa:	6818      	ldr	r0, [r3, #0]
 8019ffc:	f7ff ffce 	bl	8019f9c <_raise_r>
 801a000:	bd10      	pop	{r4, pc}
 801a002:	46c0      	nop			; (mov r8, r8)
 801a004:	200000a8 	.word	0x200000a8

0801a008 <_kill_r>:
 801a008:	2300      	movs	r3, #0
 801a00a:	b570      	push	{r4, r5, r6, lr}
 801a00c:	4d06      	ldr	r5, [pc, #24]	; (801a028 <_kill_r+0x20>)
 801a00e:	0004      	movs	r4, r0
 801a010:	0008      	movs	r0, r1
 801a012:	0011      	movs	r1, r2
 801a014:	602b      	str	r3, [r5, #0]
 801a016:	f000 f9b5 	bl	801a384 <_kill>
 801a01a:	1c43      	adds	r3, r0, #1
 801a01c:	d103      	bne.n	801a026 <_kill_r+0x1e>
 801a01e:	682b      	ldr	r3, [r5, #0]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d000      	beq.n	801a026 <_kill_r+0x1e>
 801a024:	6023      	str	r3, [r4, #0]
 801a026:	bd70      	pop	{r4, r5, r6, pc}
 801a028:	20006fc4 	.word	0x20006fc4

0801a02c <_getpid_r>:
 801a02c:	b510      	push	{r4, lr}
 801a02e:	f000 f999 	bl	801a364 <_getpid>
 801a032:	bd10      	pop	{r4, pc}

0801a034 <__sread>:
 801a034:	b570      	push	{r4, r5, r6, lr}
 801a036:	000c      	movs	r4, r1
 801a038:	250e      	movs	r5, #14
 801a03a:	5f49      	ldrsh	r1, [r1, r5]
 801a03c:	f000 f96e 	bl	801a31c <_read_r>
 801a040:	2800      	cmp	r0, #0
 801a042:	db03      	blt.n	801a04c <__sread+0x18>
 801a044:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801a046:	181b      	adds	r3, r3, r0
 801a048:	6523      	str	r3, [r4, #80]	; 0x50
 801a04a:	bd70      	pop	{r4, r5, r6, pc}
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	4a02      	ldr	r2, [pc, #8]	; (801a058 <__sread+0x24>)
 801a050:	4013      	ands	r3, r2
 801a052:	81a3      	strh	r3, [r4, #12]
 801a054:	e7f9      	b.n	801a04a <__sread+0x16>
 801a056:	46c0      	nop			; (mov r8, r8)
 801a058:	ffffefff 	.word	0xffffefff

0801a05c <__swrite>:
 801a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a05e:	001f      	movs	r7, r3
 801a060:	898b      	ldrh	r3, [r1, #12]
 801a062:	0005      	movs	r5, r0
 801a064:	000c      	movs	r4, r1
 801a066:	0016      	movs	r6, r2
 801a068:	05db      	lsls	r3, r3, #23
 801a06a:	d505      	bpl.n	801a078 <__swrite+0x1c>
 801a06c:	230e      	movs	r3, #14
 801a06e:	5ec9      	ldrsh	r1, [r1, r3]
 801a070:	2200      	movs	r2, #0
 801a072:	2302      	movs	r3, #2
 801a074:	f000 f93e 	bl	801a2f4 <_lseek_r>
 801a078:	89a3      	ldrh	r3, [r4, #12]
 801a07a:	4a05      	ldr	r2, [pc, #20]	; (801a090 <__swrite+0x34>)
 801a07c:	0028      	movs	r0, r5
 801a07e:	4013      	ands	r3, r2
 801a080:	81a3      	strh	r3, [r4, #12]
 801a082:	0032      	movs	r2, r6
 801a084:	230e      	movs	r3, #14
 801a086:	5ee1      	ldrsh	r1, [r4, r3]
 801a088:	003b      	movs	r3, r7
 801a08a:	f000 f889 	bl	801a1a0 <_write_r>
 801a08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a090:	ffffefff 	.word	0xffffefff

0801a094 <__sseek>:
 801a094:	b570      	push	{r4, r5, r6, lr}
 801a096:	000c      	movs	r4, r1
 801a098:	250e      	movs	r5, #14
 801a09a:	5f49      	ldrsh	r1, [r1, r5]
 801a09c:	f000 f92a 	bl	801a2f4 <_lseek_r>
 801a0a0:	89a3      	ldrh	r3, [r4, #12]
 801a0a2:	1c42      	adds	r2, r0, #1
 801a0a4:	d103      	bne.n	801a0ae <__sseek+0x1a>
 801a0a6:	4a05      	ldr	r2, [pc, #20]	; (801a0bc <__sseek+0x28>)
 801a0a8:	4013      	ands	r3, r2
 801a0aa:	81a3      	strh	r3, [r4, #12]
 801a0ac:	bd70      	pop	{r4, r5, r6, pc}
 801a0ae:	2280      	movs	r2, #128	; 0x80
 801a0b0:	0152      	lsls	r2, r2, #5
 801a0b2:	4313      	orrs	r3, r2
 801a0b4:	81a3      	strh	r3, [r4, #12]
 801a0b6:	6520      	str	r0, [r4, #80]	; 0x50
 801a0b8:	e7f8      	b.n	801a0ac <__sseek+0x18>
 801a0ba:	46c0      	nop			; (mov r8, r8)
 801a0bc:	ffffefff 	.word	0xffffefff

0801a0c0 <__sclose>:
 801a0c0:	b510      	push	{r4, lr}
 801a0c2:	230e      	movs	r3, #14
 801a0c4:	5ec9      	ldrsh	r1, [r1, r3]
 801a0c6:	f000 f87f 	bl	801a1c8 <_close_r>
 801a0ca:	bd10      	pop	{r4, pc}

0801a0cc <__swbuf_r>:
 801a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0ce:	0006      	movs	r6, r0
 801a0d0:	000d      	movs	r5, r1
 801a0d2:	0014      	movs	r4, r2
 801a0d4:	2800      	cmp	r0, #0
 801a0d6:	d004      	beq.n	801a0e2 <__swbuf_r+0x16>
 801a0d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d101      	bne.n	801a0e2 <__swbuf_r+0x16>
 801a0de:	f7ff fccf 	bl	8019a80 <__sinit>
 801a0e2:	69a3      	ldr	r3, [r4, #24]
 801a0e4:	60a3      	str	r3, [r4, #8]
 801a0e6:	89a3      	ldrh	r3, [r4, #12]
 801a0e8:	071b      	lsls	r3, r3, #28
 801a0ea:	d52e      	bpl.n	801a14a <__swbuf_r+0x7e>
 801a0ec:	6923      	ldr	r3, [r4, #16]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d02b      	beq.n	801a14a <__swbuf_r+0x7e>
 801a0f2:	230c      	movs	r3, #12
 801a0f4:	5ee2      	ldrsh	r2, [r4, r3]
 801a0f6:	2380      	movs	r3, #128	; 0x80
 801a0f8:	019b      	lsls	r3, r3, #6
 801a0fa:	b2ef      	uxtb	r7, r5
 801a0fc:	b2ed      	uxtb	r5, r5
 801a0fe:	421a      	tst	r2, r3
 801a100:	d02c      	beq.n	801a15c <__swbuf_r+0x90>
 801a102:	6823      	ldr	r3, [r4, #0]
 801a104:	6922      	ldr	r2, [r4, #16]
 801a106:	1a98      	subs	r0, r3, r2
 801a108:	6963      	ldr	r3, [r4, #20]
 801a10a:	4283      	cmp	r3, r0
 801a10c:	dc05      	bgt.n	801a11a <__swbuf_r+0x4e>
 801a10e:	0021      	movs	r1, r4
 801a110:	0030      	movs	r0, r6
 801a112:	f7ff fc3f 	bl	8019994 <_fflush_r>
 801a116:	2800      	cmp	r0, #0
 801a118:	d11d      	bne.n	801a156 <__swbuf_r+0x8a>
 801a11a:	68a3      	ldr	r3, [r4, #8]
 801a11c:	3001      	adds	r0, #1
 801a11e:	3b01      	subs	r3, #1
 801a120:	60a3      	str	r3, [r4, #8]
 801a122:	6823      	ldr	r3, [r4, #0]
 801a124:	1c5a      	adds	r2, r3, #1
 801a126:	6022      	str	r2, [r4, #0]
 801a128:	701f      	strb	r7, [r3, #0]
 801a12a:	6963      	ldr	r3, [r4, #20]
 801a12c:	4283      	cmp	r3, r0
 801a12e:	d004      	beq.n	801a13a <__swbuf_r+0x6e>
 801a130:	89a3      	ldrh	r3, [r4, #12]
 801a132:	07db      	lsls	r3, r3, #31
 801a134:	d507      	bpl.n	801a146 <__swbuf_r+0x7a>
 801a136:	2d0a      	cmp	r5, #10
 801a138:	d105      	bne.n	801a146 <__swbuf_r+0x7a>
 801a13a:	0021      	movs	r1, r4
 801a13c:	0030      	movs	r0, r6
 801a13e:	f7ff fc29 	bl	8019994 <_fflush_r>
 801a142:	2800      	cmp	r0, #0
 801a144:	d107      	bne.n	801a156 <__swbuf_r+0x8a>
 801a146:	0028      	movs	r0, r5
 801a148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a14a:	0021      	movs	r1, r4
 801a14c:	0030      	movs	r0, r6
 801a14e:	f7ff fb1d 	bl	801978c <__swsetup_r>
 801a152:	2800      	cmp	r0, #0
 801a154:	d0cd      	beq.n	801a0f2 <__swbuf_r+0x26>
 801a156:	2501      	movs	r5, #1
 801a158:	426d      	negs	r5, r5
 801a15a:	e7f4      	b.n	801a146 <__swbuf_r+0x7a>
 801a15c:	4313      	orrs	r3, r2
 801a15e:	81a3      	strh	r3, [r4, #12]
 801a160:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a162:	4b02      	ldr	r3, [pc, #8]	; (801a16c <__swbuf_r+0xa0>)
 801a164:	4013      	ands	r3, r2
 801a166:	6663      	str	r3, [r4, #100]	; 0x64
 801a168:	e7cb      	b.n	801a102 <__swbuf_r+0x36>
 801a16a:	46c0      	nop			; (mov r8, r8)
 801a16c:	ffffdfff 	.word	0xffffdfff

0801a170 <_wcrtomb_r>:
 801a170:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a172:	001d      	movs	r5, r3
 801a174:	4b09      	ldr	r3, [pc, #36]	; (801a19c <_wcrtomb_r+0x2c>)
 801a176:	0004      	movs	r4, r0
 801a178:	33e0      	adds	r3, #224	; 0xe0
 801a17a:	681e      	ldr	r6, [r3, #0]
 801a17c:	002b      	movs	r3, r5
 801a17e:	2900      	cmp	r1, #0
 801a180:	d101      	bne.n	801a186 <_wcrtomb_r+0x16>
 801a182:	000a      	movs	r2, r1
 801a184:	a901      	add	r1, sp, #4
 801a186:	0020      	movs	r0, r4
 801a188:	47b0      	blx	r6
 801a18a:	1c43      	adds	r3, r0, #1
 801a18c:	d103      	bne.n	801a196 <_wcrtomb_r+0x26>
 801a18e:	2300      	movs	r3, #0
 801a190:	602b      	str	r3, [r5, #0]
 801a192:	338a      	adds	r3, #138	; 0x8a
 801a194:	6023      	str	r3, [r4, #0]
 801a196:	b004      	add	sp, #16
 801a198:	bd70      	pop	{r4, r5, r6, pc}
 801a19a:	46c0      	nop			; (mov r8, r8)
 801a19c:	200008f0 	.word	0x200008f0

0801a1a0 <_write_r>:
 801a1a0:	b570      	push	{r4, r5, r6, lr}
 801a1a2:	0004      	movs	r4, r0
 801a1a4:	0008      	movs	r0, r1
 801a1a6:	0011      	movs	r1, r2
 801a1a8:	001a      	movs	r2, r3
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	4d05      	ldr	r5, [pc, #20]	; (801a1c4 <_write_r+0x24>)
 801a1ae:	602b      	str	r3, [r5, #0]
 801a1b0:	f000 f910 	bl	801a3d4 <_write>
 801a1b4:	1c43      	adds	r3, r0, #1
 801a1b6:	d103      	bne.n	801a1c0 <_write_r+0x20>
 801a1b8:	682b      	ldr	r3, [r5, #0]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d000      	beq.n	801a1c0 <_write_r+0x20>
 801a1be:	6023      	str	r3, [r4, #0]
 801a1c0:	bd70      	pop	{r4, r5, r6, pc}
 801a1c2:	46c0      	nop			; (mov r8, r8)
 801a1c4:	20006fc4 	.word	0x20006fc4

0801a1c8 <_close_r>:
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	b570      	push	{r4, r5, r6, lr}
 801a1cc:	4d06      	ldr	r5, [pc, #24]	; (801a1e8 <_close_r+0x20>)
 801a1ce:	0004      	movs	r4, r0
 801a1d0:	0008      	movs	r0, r1
 801a1d2:	602b      	str	r3, [r5, #0]
 801a1d4:	f000 f8b6 	bl	801a344 <_close>
 801a1d8:	1c43      	adds	r3, r0, #1
 801a1da:	d103      	bne.n	801a1e4 <_close_r+0x1c>
 801a1dc:	682b      	ldr	r3, [r5, #0]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d000      	beq.n	801a1e4 <_close_r+0x1c>
 801a1e2:	6023      	str	r3, [r4, #0]
 801a1e4:	bd70      	pop	{r4, r5, r6, pc}
 801a1e6:	46c0      	nop			; (mov r8, r8)
 801a1e8:	20006fc4 	.word	0x20006fc4

0801a1ec <_fclose_r>:
 801a1ec:	b570      	push	{r4, r5, r6, lr}
 801a1ee:	0005      	movs	r5, r0
 801a1f0:	1e0c      	subs	r4, r1, #0
 801a1f2:	d102      	bne.n	801a1fa <_fclose_r+0xe>
 801a1f4:	2600      	movs	r6, #0
 801a1f6:	0030      	movs	r0, r6
 801a1f8:	bd70      	pop	{r4, r5, r6, pc}
 801a1fa:	2800      	cmp	r0, #0
 801a1fc:	d004      	beq.n	801a208 <_fclose_r+0x1c>
 801a1fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a200:	2b00      	cmp	r3, #0
 801a202:	d101      	bne.n	801a208 <_fclose_r+0x1c>
 801a204:	f7ff fc3c 	bl	8019a80 <__sinit>
 801a208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a20a:	07db      	lsls	r3, r3, #31
 801a20c:	d405      	bmi.n	801a21a <_fclose_r+0x2e>
 801a20e:	89a3      	ldrh	r3, [r4, #12]
 801a210:	059b      	lsls	r3, r3, #22
 801a212:	d402      	bmi.n	801a21a <_fclose_r+0x2e>
 801a214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a216:	f7fd ff35 	bl	8018084 <__retarget_lock_acquire_recursive>
 801a21a:	220c      	movs	r2, #12
 801a21c:	5ea3      	ldrsh	r3, [r4, r2]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d109      	bne.n	801a236 <_fclose_r+0x4a>
 801a222:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a224:	3301      	adds	r3, #1
 801a226:	0016      	movs	r6, r2
 801a228:	401e      	ands	r6, r3
 801a22a:	421a      	tst	r2, r3
 801a22c:	d1e2      	bne.n	801a1f4 <_fclose_r+0x8>
 801a22e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a230:	f7fd ff29 	bl	8018086 <__retarget_lock_release_recursive>
 801a234:	e7df      	b.n	801a1f6 <_fclose_r+0xa>
 801a236:	0021      	movs	r1, r4
 801a238:	0028      	movs	r0, r5
 801a23a:	f7ff fb13 	bl	8019864 <__sflush_r>
 801a23e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a240:	0006      	movs	r6, r0
 801a242:	2b00      	cmp	r3, #0
 801a244:	d006      	beq.n	801a254 <_fclose_r+0x68>
 801a246:	0028      	movs	r0, r5
 801a248:	69e1      	ldr	r1, [r4, #28]
 801a24a:	4798      	blx	r3
 801a24c:	2800      	cmp	r0, #0
 801a24e:	da01      	bge.n	801a254 <_fclose_r+0x68>
 801a250:	2601      	movs	r6, #1
 801a252:	4276      	negs	r6, r6
 801a254:	89a3      	ldrh	r3, [r4, #12]
 801a256:	061b      	lsls	r3, r3, #24
 801a258:	d503      	bpl.n	801a262 <_fclose_r+0x76>
 801a25a:	0028      	movs	r0, r5
 801a25c:	6921      	ldr	r1, [r4, #16]
 801a25e:	f7fd fadf 	bl	8017820 <_free_r>
 801a262:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a264:	2900      	cmp	r1, #0
 801a266:	d008      	beq.n	801a27a <_fclose_r+0x8e>
 801a268:	0023      	movs	r3, r4
 801a26a:	3340      	adds	r3, #64	; 0x40
 801a26c:	4299      	cmp	r1, r3
 801a26e:	d002      	beq.n	801a276 <_fclose_r+0x8a>
 801a270:	0028      	movs	r0, r5
 801a272:	f7fd fad5 	bl	8017820 <_free_r>
 801a276:	2300      	movs	r3, #0
 801a278:	6323      	str	r3, [r4, #48]	; 0x30
 801a27a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a27c:	2900      	cmp	r1, #0
 801a27e:	d004      	beq.n	801a28a <_fclose_r+0x9e>
 801a280:	0028      	movs	r0, r5
 801a282:	f7fd facd 	bl	8017820 <_free_r>
 801a286:	2300      	movs	r3, #0
 801a288:	6463      	str	r3, [r4, #68]	; 0x44
 801a28a:	f7ff fbd9 	bl	8019a40 <__sfp_lock_acquire>
 801a28e:	2300      	movs	r3, #0
 801a290:	81a3      	strh	r3, [r4, #12]
 801a292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a294:	07db      	lsls	r3, r3, #31
 801a296:	d402      	bmi.n	801a29e <_fclose_r+0xb2>
 801a298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a29a:	f7fd fef4 	bl	8018086 <__retarget_lock_release_recursive>
 801a29e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a2a0:	f7fd feef 	bl	8018082 <__retarget_lock_close_recursive>
 801a2a4:	f7ff fbd4 	bl	8019a50 <__sfp_lock_release>
 801a2a8:	e7a5      	b.n	801a1f6 <_fclose_r+0xa>
	...

0801a2ac <_fstat_r>:
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	b570      	push	{r4, r5, r6, lr}
 801a2b0:	4d06      	ldr	r5, [pc, #24]	; (801a2cc <_fstat_r+0x20>)
 801a2b2:	0004      	movs	r4, r0
 801a2b4:	0008      	movs	r0, r1
 801a2b6:	0011      	movs	r1, r2
 801a2b8:	602b      	str	r3, [r5, #0]
 801a2ba:	f000 f84b 	bl	801a354 <_fstat>
 801a2be:	1c43      	adds	r3, r0, #1
 801a2c0:	d103      	bne.n	801a2ca <_fstat_r+0x1e>
 801a2c2:	682b      	ldr	r3, [r5, #0]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d000      	beq.n	801a2ca <_fstat_r+0x1e>
 801a2c8:	6023      	str	r3, [r4, #0]
 801a2ca:	bd70      	pop	{r4, r5, r6, pc}
 801a2cc:	20006fc4 	.word	0x20006fc4

0801a2d0 <_isatty_r>:
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	b570      	push	{r4, r5, r6, lr}
 801a2d4:	4d06      	ldr	r5, [pc, #24]	; (801a2f0 <_isatty_r+0x20>)
 801a2d6:	0004      	movs	r4, r0
 801a2d8:	0008      	movs	r0, r1
 801a2da:	602b      	str	r3, [r5, #0]
 801a2dc:	f000 f84a 	bl	801a374 <_isatty>
 801a2e0:	1c43      	adds	r3, r0, #1
 801a2e2:	d103      	bne.n	801a2ec <_isatty_r+0x1c>
 801a2e4:	682b      	ldr	r3, [r5, #0]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d000      	beq.n	801a2ec <_isatty_r+0x1c>
 801a2ea:	6023      	str	r3, [r4, #0]
 801a2ec:	bd70      	pop	{r4, r5, r6, pc}
 801a2ee:	46c0      	nop			; (mov r8, r8)
 801a2f0:	20006fc4 	.word	0x20006fc4

0801a2f4 <_lseek_r>:
 801a2f4:	b570      	push	{r4, r5, r6, lr}
 801a2f6:	0004      	movs	r4, r0
 801a2f8:	0008      	movs	r0, r1
 801a2fa:	0011      	movs	r1, r2
 801a2fc:	001a      	movs	r2, r3
 801a2fe:	2300      	movs	r3, #0
 801a300:	4d05      	ldr	r5, [pc, #20]	; (801a318 <_lseek_r+0x24>)
 801a302:	602b      	str	r3, [r5, #0]
 801a304:	f000 f846 	bl	801a394 <_lseek>
 801a308:	1c43      	adds	r3, r0, #1
 801a30a:	d103      	bne.n	801a314 <_lseek_r+0x20>
 801a30c:	682b      	ldr	r3, [r5, #0]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d000      	beq.n	801a314 <_lseek_r+0x20>
 801a312:	6023      	str	r3, [r4, #0]
 801a314:	bd70      	pop	{r4, r5, r6, pc}
 801a316:	46c0      	nop			; (mov r8, r8)
 801a318:	20006fc4 	.word	0x20006fc4

0801a31c <_read_r>:
 801a31c:	b570      	push	{r4, r5, r6, lr}
 801a31e:	0004      	movs	r4, r0
 801a320:	0008      	movs	r0, r1
 801a322:	0011      	movs	r1, r2
 801a324:	001a      	movs	r2, r3
 801a326:	2300      	movs	r3, #0
 801a328:	4d05      	ldr	r5, [pc, #20]	; (801a340 <_read_r+0x24>)
 801a32a:	602b      	str	r3, [r5, #0]
 801a32c:	f000 f83a 	bl	801a3a4 <_read>
 801a330:	1c43      	adds	r3, r0, #1
 801a332:	d103      	bne.n	801a33c <_read_r+0x20>
 801a334:	682b      	ldr	r3, [r5, #0]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d000      	beq.n	801a33c <_read_r+0x20>
 801a33a:	6023      	str	r3, [r4, #0]
 801a33c:	bd70      	pop	{r4, r5, r6, pc}
 801a33e:	46c0      	nop			; (mov r8, r8)
 801a340:	20006fc4 	.word	0x20006fc4

0801a344 <_close>:
 801a344:	2258      	movs	r2, #88	; 0x58
 801a346:	2001      	movs	r0, #1
 801a348:	4b01      	ldr	r3, [pc, #4]	; (801a350 <_close+0xc>)
 801a34a:	4240      	negs	r0, r0
 801a34c:	601a      	str	r2, [r3, #0]
 801a34e:	4770      	bx	lr
 801a350:	20006fc4 	.word	0x20006fc4

0801a354 <_fstat>:
 801a354:	2258      	movs	r2, #88	; 0x58
 801a356:	2001      	movs	r0, #1
 801a358:	4b01      	ldr	r3, [pc, #4]	; (801a360 <_fstat+0xc>)
 801a35a:	4240      	negs	r0, r0
 801a35c:	601a      	str	r2, [r3, #0]
 801a35e:	4770      	bx	lr
 801a360:	20006fc4 	.word	0x20006fc4

0801a364 <_getpid>:
 801a364:	2258      	movs	r2, #88	; 0x58
 801a366:	2001      	movs	r0, #1
 801a368:	4b01      	ldr	r3, [pc, #4]	; (801a370 <_getpid+0xc>)
 801a36a:	4240      	negs	r0, r0
 801a36c:	601a      	str	r2, [r3, #0]
 801a36e:	4770      	bx	lr
 801a370:	20006fc4 	.word	0x20006fc4

0801a374 <_isatty>:
 801a374:	2258      	movs	r2, #88	; 0x58
 801a376:	4b02      	ldr	r3, [pc, #8]	; (801a380 <_isatty+0xc>)
 801a378:	2000      	movs	r0, #0
 801a37a:	601a      	str	r2, [r3, #0]
 801a37c:	4770      	bx	lr
 801a37e:	46c0      	nop			; (mov r8, r8)
 801a380:	20006fc4 	.word	0x20006fc4

0801a384 <_kill>:
 801a384:	2258      	movs	r2, #88	; 0x58
 801a386:	2001      	movs	r0, #1
 801a388:	4b01      	ldr	r3, [pc, #4]	; (801a390 <_kill+0xc>)
 801a38a:	4240      	negs	r0, r0
 801a38c:	601a      	str	r2, [r3, #0]
 801a38e:	4770      	bx	lr
 801a390:	20006fc4 	.word	0x20006fc4

0801a394 <_lseek>:
 801a394:	2258      	movs	r2, #88	; 0x58
 801a396:	2001      	movs	r0, #1
 801a398:	4b01      	ldr	r3, [pc, #4]	; (801a3a0 <_lseek+0xc>)
 801a39a:	4240      	negs	r0, r0
 801a39c:	601a      	str	r2, [r3, #0]
 801a39e:	4770      	bx	lr
 801a3a0:	20006fc4 	.word	0x20006fc4

0801a3a4 <_read>:
 801a3a4:	2258      	movs	r2, #88	; 0x58
 801a3a6:	2001      	movs	r0, #1
 801a3a8:	4b01      	ldr	r3, [pc, #4]	; (801a3b0 <_read+0xc>)
 801a3aa:	4240      	negs	r0, r0
 801a3ac:	601a      	str	r2, [r3, #0]
 801a3ae:	4770      	bx	lr
 801a3b0:	20006fc4 	.word	0x20006fc4

0801a3b4 <_sbrk>:
 801a3b4:	4a05      	ldr	r2, [pc, #20]	; (801a3cc <_sbrk+0x18>)
 801a3b6:	0003      	movs	r3, r0
 801a3b8:	6811      	ldr	r1, [r2, #0]
 801a3ba:	2900      	cmp	r1, #0
 801a3bc:	d101      	bne.n	801a3c2 <_sbrk+0xe>
 801a3be:	4904      	ldr	r1, [pc, #16]	; (801a3d0 <_sbrk+0x1c>)
 801a3c0:	6011      	str	r1, [r2, #0]
 801a3c2:	6810      	ldr	r0, [r2, #0]
 801a3c4:	18c3      	adds	r3, r0, r3
 801a3c6:	6013      	str	r3, [r2, #0]
 801a3c8:	4770      	bx	lr
 801a3ca:	46c0      	nop			; (mov r8, r8)
 801a3cc:	20006a28 	.word	0x20006a28
 801a3d0:	20006fc8 	.word	0x20006fc8

0801a3d4 <_write>:
 801a3d4:	2258      	movs	r2, #88	; 0x58
 801a3d6:	2001      	movs	r0, #1
 801a3d8:	4b01      	ldr	r3, [pc, #4]	; (801a3e0 <_write+0xc>)
 801a3da:	4240      	negs	r0, r0
 801a3dc:	601a      	str	r2, [r3, #0]
 801a3de:	4770      	bx	lr
 801a3e0:	20006fc4 	.word	0x20006fc4

0801a3e4 <_exit>:
 801a3e4:	e7fe      	b.n	801a3e4 <_exit>
	...

0801a3e8 <_init>:
 801a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3ea:	46c0      	nop			; (mov r8, r8)
 801a3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3ee:	bc08      	pop	{r3}
 801a3f0:	469e      	mov	lr, r3
 801a3f2:	4770      	bx	lr

0801a3f4 <_fini>:
 801a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3f6:	46c0      	nop			; (mov r8, r8)
 801a3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3fa:	bc08      	pop	{r3}
 801a3fc:	469e      	mov	lr, r3
 801a3fe:	4770      	bx	lr
