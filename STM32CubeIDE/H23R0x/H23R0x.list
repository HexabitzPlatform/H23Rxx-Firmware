
H23R0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018498  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037f4  08018558  08018558  00028558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd4c  0801bd4c  00030a58  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd4c  0801bd4c  0002bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd54  0801bd54  00030a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801bd54  0801bd54  0002bd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bd5c  0801bd5c  0002bd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a58  20000000  0801bd60  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006568  20000a58  0801c7b8  00030a58  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006fc0  0801c7b8  00036fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY
 12 .debug_info   00053f86  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008db6  00000000  00000000  00084a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b02e  00000000  00000000  0008d7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001da0  00000000  00000000  000a87f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002138  00000000  00000000  000aa590  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017001  00000000  00000000  000ac6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000acc7  00000000  00000000  000c36c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce390  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000649c  00000000  00000000  000ce40c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a58 	.word	0x20000a58
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801853c 	.word	0x0801853c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a5c 	.word	0x20000a5c
 8000100:	0801853c 	.word	0x0801853c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	0801858c 	.word	0x0801858c
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	080185cc 	.word	0x080185cc
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	0801860c 	.word	0x0801860c
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <LoadROtopology+0x94>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <LoadROtopology+0x98>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d033      	beq.n	8002d9c <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002d36:	d039      	beq.n	8002dac <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002d38:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d3a:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <LoadROtopology+0xa0>)
 8002d3e:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d42:	781e      	ldrb	r6, [r3, #0]
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	d035      	beq.n	8002db4 <LoadROtopology+0x90>
 8002d48:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002d4a:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	466b      	mov	r3, sp
 8002d4e:	1dd9      	adds	r1, r3, #7
 8002d50:	2300      	movs	r3, #0
 8002d52:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d54:	4d1c      	ldr	r5, [pc, #112]	; (8002dc8 <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d56:	4663      	mov	r3, ip
 8002d58:	700b      	strb	r3, [r1, #0]
 8002d5a:	780b      	ldrb	r3, [r1, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d815      	bhi.n	8002d8e <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d62:	1e63      	subs	r3, r4, #1
 8002d64:	0098      	lsls	r0, r3, #2
 8002d66:	18c0      	adds	r0, r0, r3
 8002d68:	0040      	lsls	r0, r0, #1
 8002d6a:	18c0      	adds	r0, r0, r3
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <LoadROtopology+0x94>)
 8002d6e:	18d7      	adds	r7, r2, r3
 8002d70:	780b      	ldrb	r3, [r1, #0]
 8002d72:	883f      	ldrh	r7, [r7, #0]
 8002d74:	181b      	adds	r3, r3, r0
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002d7a:	3202      	adds	r2, #2
 8002d7c:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d7e:	780b      	ldrb	r3, [r1, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	700b      	strb	r3, [r1, #0]
 8002d86:	780b      	ldrb	r3, [r1, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b0a      	cmp	r3, #10
 8002d8c:	d9ee      	bls.n	8002d6c <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002d8e:	3401      	adds	r4, #1
 8002d90:	b2e4      	uxtb	r4, r4
 8002d92:	42b4      	cmp	r4, r6
 8002d94:	d9df      	bls.n	8002d56 <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002d96:	2000      	movs	r0, #0
}
 8002d98:	b003      	add	sp, #12
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LoadROtopology+0xa0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002da8:	20fa      	movs	r0, #250	; 0xfa
 8002daa:	e7f5      	b.n	8002d98 <LoadROtopology+0x74>
			N =1;
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <LoadROtopology+0x9c>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	7011      	strb	r1, [r2, #0]
 8002db2:	e7c3      	b.n	8002d3c <LoadROtopology+0x18>
	return result;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7ef      	b.n	8002d98 <LoadROtopology+0x74>
 8002db8:	0801d800 	.word	0x0801d800
 8002dbc:	0000ffff 	.word	0x0000ffff
 8002dc0:	2000001c 	.word	0x2000001c
 8002dc4:	20001076 	.word	0x20001076
 8002dc8:	20000a78 	.word	0x20000a78

08002dcc <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <LoadEEportsDir+0x40>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002dd2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dd8:	490d      	ldr	r1, [pc, #52]	; (8002e10 <LoadEEportsDir+0x44>)
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f004 fcd0 	bl	8007780 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002de0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002de2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002de4:	4f09      	ldr	r7, [pc, #36]	; (8002e0c <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002de6:	4e0a      	ldr	r6, [pc, #40]	; (8002e10 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	783b      	ldrb	r3, [r7, #0]
 8002dee:	42a3      	cmp	r3, r4
 8002df0:	d30a      	bcc.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002df2:	1e61      	subs	r1, r4, #1
 8002df4:	0049      	lsls	r1, r1, #1
 8002df6:	1989      	adds	r1, r1, r6
 8002df8:	1c60      	adds	r0, r4, #1
 8002dfa:	f004 fcc1 	bl	8007780 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002dfe:	1ca3      	adds	r3, r4, #2
 8002e00:	2b1b      	cmp	r3, #27
 8002e02:	ddf1      	ble.n	8002de8 <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002e04:	250a      	movs	r5, #10
 8002e06:	e7ef      	b.n	8002de8 <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002e08:	0028      	movs	r0, r5
 8002e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e0c:	2000001c 	.word	0x2000001c
 8002e10:	20006f1c 	.word	0x20006f1c

08002e14 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	46de      	mov	lr, fp
 8002e18:	4657      	mov	r7, sl
 8002e1a:	464e      	mov	r6, r9
 8002e1c:	4645      	mov	r5, r8
 8002e1e:	b5e0      	push	{r5, r6, r7, lr}
 8002e20:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e22:	466b      	mov	r3, sp
 8002e24:	2200      	movs	r2, #0
 8002e26:	80da      	strh	r2, [r3, #6]
 8002e28:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e2a:	2700      	movs	r7, #0
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <LoadEEalias+0x7c>)
 8002e2e:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e30:	469b      	mov	fp, r3
 8002e32:	e00c      	b.n	8002e4e <LoadEEalias+0x3a>
 8002e34:	464b      	mov	r3, r9
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	444b      	add	r3, r9
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	445b      	add	r3, fp
 8002e3e:	2200      	movs	r2, #0
 8002e40:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e42:	3701      	adds	r7, #1
 8002e44:	b2ff      	uxtb	r7, r7
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <LoadEEalias+0x80>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	42bb      	cmp	r3, r7
 8002e4c:	d317      	bcc.n	8002e7e <LoadEEalias+0x6a>
 8002e4e:	00bd      	lsls	r5, r7, #2
 8002e50:	19ed      	adds	r5, r5, r7
 8002e52:	006d      	lsls	r5, r5, #1
 8002e54:	4455      	add	r5, sl
 8002e56:	1d63      	adds	r3, r4, #5
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e5c:	466b      	mov	r3, sp
 8002e5e:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002e60:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e62:	0031      	movs	r1, r6
 8002e64:	0020      	movs	r0, r4
 8002e66:	f004 fc8b 	bl	8007780 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e6a:	8833      	ldrh	r3, [r6, #0]
 8002e6c:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	702b      	strb	r3, [r5, #0]
 8002e72:	3401      	adds	r4, #1
 8002e74:	b2a4      	uxth	r4, r4
 8002e76:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e78:	45a0      	cmp	r8, r4
 8002e7a:	d1f2      	bne.n	8002e62 <LoadEEalias+0x4e>
 8002e7c:	e7da      	b.n	8002e34 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002e7e:	2000      	movs	r0, #0
 8002e80:	b003      	add	sp, #12
 8002e82:	bc3c      	pop	{r2, r3, r4, r5}
 8002e84:	4690      	mov	r8, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	46a2      	mov	sl, r4
 8002e8a:	46ab      	mov	fp, r5
 8002e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000f68 	.word	0x20000f68
 8002e94:	2000001c 	.word	0x2000001c

08002e98 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	46d6      	mov	lr, sl
 8002e9c:	464f      	mov	r7, r9
 8002e9e:	4646      	mov	r6, r8
 8002ea0:	b5c0      	push	{r6, r7, lr}
 8002ea2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002ea4:	466b      	mov	r3, sp
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <LoadEEgroup+0x9c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002eb2:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	4e20      	ldr	r6, [pc, #128]	; (8002f38 <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002eb6:	4c1f      	ldr	r4, [pc, #124]	; (8002f34 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb8:	b2e9      	uxtb	r1, r5
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	1871      	adds	r1, r6, r1
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	30cb      	adds	r0, #203	; 0xcb
 8002ec2:	b280      	uxth	r0, r0
 8002ec4:	f004 fc5c 	bl	8007780 <EE_ReadVariable>
		add++;
 8002ec8:	3501      	adds	r5, #1
 8002eca:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ecc:	7822      	ldrb	r2, [r4, #0]
 8002ece:	b2eb      	uxtb	r3, r5
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f1      	bhi.n	8002eb8 <LoadEEgroup+0x20>
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <LoadEEgroup+0xa4>)
 8002ed6:	4699      	mov	r9, r3
 8002ed8:	002c      	movs	r4, r5
 8002eda:	3499      	adds	r4, #153	; 0x99
 8002edc:	b2a4      	uxth	r4, r4
 8002ede:	35cb      	adds	r5, #203	; 0xcb
 8002ee0:	b2ab      	uxth	r3, r5
 8002ee2:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002ee4:	466b      	mov	r3, sp
 8002ee6:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ee8:	2300      	movs	r3, #0
 8002eea:	469a      	mov	sl, r3
 8002eec:	e009      	b.n	8002f02 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8002eee:	2500      	movs	r5, #0
 8002ef0:	e7f0      	b.n	8002ed4 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	725a      	strb	r2, [r3, #9]
 8002ef8:	230a      	movs	r3, #10
 8002efa:	469c      	mov	ip, r3
 8002efc:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002efe:	4544      	cmp	r4, r8
 8002f00:	d010      	beq.n	8002f24 <LoadEEgroup+0x8c>
 8002f02:	1d67      	adds	r7, r4, #5
 8002f04:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8002f06:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f08:	0031      	movs	r1, r6
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f004 fc38 	bl	8007780 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f10:	8833      	ldrh	r3, [r6, #0]
 8002f12:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	702b      	strb	r3, [r5, #0]
 8002f18:	3401      	adds	r4, #1
 8002f1a:	b2a4      	uxth	r4, r4
 8002f1c:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f1e:	42bc      	cmp	r4, r7
 8002f20:	d1f2      	bne.n	8002f08 <LoadEEgroup+0x70>
 8002f22:	e7e6      	b.n	8002ef2 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	b002      	add	sp, #8
 8002f28:	bc1c      	pop	{r2, r3, r4}
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	46a2      	mov	sl, r4
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	2000001c 	.word	0x2000001c
 8002f38:	20000ec0 	.word	0x20000ec0
 8002f3c:	20000e5c 	.word	0x20000e5c

08002f40 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f44:	210e      	movs	r1, #14
 8002f46:	4469      	add	r1, sp
 8002f48:	2300      	movs	r3, #0
 8002f4a:	800b      	strh	r3, [r1, #0]
 8002f4c:	aa03      	add	r2, sp, #12
 8002f4e:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f50:	20e4      	movs	r0, #228	; 0xe4
 8002f52:	f004 fc15 	bl	8007780 <EE_ReadVariable>
	uint8_t direction =0;
 8002f56:	2600      	movs	r6, #0
	if(!status1){
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d102      	bne.n	8002f62 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 8002f5c:	230e      	movs	r3, #14
 8002f5e:	446b      	add	r3, sp
 8002f60:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f62:	210e      	movs	r1, #14
 8002f64:	4469      	add	r1, sp
 8002f66:	20e5      	movs	r0, #229	; 0xe5
 8002f68:	f004 fc0a 	bl	8007780 <EE_ReadVariable>
 8002f6c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f6e:	a903      	add	r1, sp, #12
 8002f70:	20e6      	movs	r0, #230	; 0xe6
 8002f72:	f004 fc05 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8002f76:	4304      	orrs	r4, r0
 8002f78:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8002f7a:	2500      	movs	r5, #0
	if(!status1 && !status2){
 8002f7c:	2c00      	cmp	r4, #0
 8002f7e:	d106      	bne.n	8002f8e <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f80:	230e      	movs	r3, #14
 8002f82:	446b      	add	r3, sp
 8002f84:	881d      	ldrh	r5, [r3, #0]
 8002f86:	042d      	lsls	r5, r5, #16
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8e:	210e      	movs	r1, #14
 8002f90:	4469      	add	r1, sp
 8002f92:	20e7      	movs	r0, #231	; 0xe7
 8002f94:	f004 fbf4 	bl	8007780 <EE_ReadVariable>
 8002f98:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f9a:	a903      	add	r1, sp, #12
 8002f9c:	20e8      	movs	r0, #232	; 0xe8
 8002f9e:	f004 fbef 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fa2:	4320      	orrs	r0, r4
 8002fa4:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8002fa6:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d106      	bne.n	8002fba <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fac:	230e      	movs	r3, #14
 8002fae:	446b      	add	r3, sp
 8002fb0:	881c      	ldrh	r4, [r3, #0]
 8002fb2:	0424      	lsls	r4, r4, #16
 8002fb4:	ab03      	add	r3, sp, #12
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002fba:	210e      	movs	r1, #14
 8002fbc:	4469      	add	r1, sp
 8002fbe:	20e9      	movs	r0, #233	; 0xe9
 8002fc0:	f004 fbde 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d107      	bne.n	8002fd8 <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 8002fc8:	230e      	movs	r3, #14
 8002fca:	446b      	add	r3, sp
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	0a19      	lsrs	r1, r3, #8
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <LoadEEstreams+0x134>)
 8002fd2:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <LoadEEstreams+0x138>)
 8002fd6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fd8:	210e      	movs	r1, #14
 8002fda:	4469      	add	r1, sp
 8002fdc:	20ea      	movs	r0, #234	; 0xea
 8002fde:	f004 fbcf 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d107      	bne.n	8002ff6 <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 8002fe6:	230e      	movs	r3, #14
 8002fe8:	446b      	add	r3, sp
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	0a19      	lsrs	r1, r3, #8
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <LoadEEstreams+0x13c>)
 8002ff0:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <LoadEEstreams+0x140>)
 8002ff4:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002ff6:	210e      	movs	r1, #14
 8002ff8:	4469      	add	r1, sp
 8002ffa:	20eb      	movs	r0, #235	; 0xeb
 8002ffc:	f004 fbc0 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8003000:	2800      	cmp	r0, #0
 8003002:	d107      	bne.n	8003014 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003004:	230e      	movs	r3, #14
 8003006:	446b      	add	r3, sp
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	0a19      	lsrs	r1, r3, #8
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <LoadEEstreams+0x144>)
 800300e:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <LoadEEstreams+0x148>)
 8003012:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <LoadEEstreams+0x134>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <LoadEEstreams+0xe4>
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <LoadEEstreams+0x138>)
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	2a00      	cmp	r2, #0
 8003022:	d112      	bne.n	800304a <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <LoadEEstreams+0x13c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <LoadEEstreams+0xf4>
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <LoadEEstreams+0x140>)
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	2a00      	cmp	r2, #0
 8003032:	d111      	bne.n	8003058 <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <LoadEEstreams+0x144>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <LoadEEstreams+0x104>
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <LoadEEstreams+0x148>)
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	2a00      	cmp	r2, #0
 8003042:	d110      	bne.n	8003066 <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003044:	2000      	movs	r0, #0
 8003046:	b004      	add	sp, #16
 8003048:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800304a:	9200      	str	r2, [sp, #0]
 800304c:	0022      	movs	r2, r4
 800304e:	0029      	movs	r1, r5
 8003050:	0030      	movs	r0, r6
 8003052:	f005 ffed 	bl	8009030 <SetupDMAStreams>
 8003056:	e7e5      	b.n	8003024 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003058:	9200      	str	r2, [sp, #0]
 800305a:	0022      	movs	r2, r4
 800305c:	0029      	movs	r1, r5
 800305e:	0030      	movs	r0, r6
 8003060:	f005 ffe6 	bl	8009030 <SetupDMAStreams>
 8003064:	e7e6      	b.n	8003034 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003066:	9200      	str	r2, [sp, #0]
 8003068:	0022      	movs	r2, r4
 800306a:	0029      	movs	r1, r5
 800306c:	0030      	movs	r0, r6
 800306e:	f005 ffdf 	bl	8009030 <SetupDMAStreams>
 8003072:	e7e7      	b.n	8003044 <LoadEEstreams+0x104>
 8003074:	2000114a 	.word	0x2000114a
 8003078:	20000e59 	.word	0x20000e59
 800307c:	2000114b 	.word	0x2000114b
 8003080:	20000e5a 	.word	0x20000e5a
 8003084:	2000114c 	.word	0x2000114c
 8003088:	20000e5b 	.word	0x20000e5b

0800308c <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 800308c:	b510      	push	{r4, lr}
 800308e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003090:	208a      	movs	r0, #138	; 0x8a
 8003092:	466b      	mov	r3, sp
 8003094:	1d99      	adds	r1, r3, #6
 8003096:	0040      	lsls	r0, r0, #1
 8003098:	f004 fb72 	bl	8007780 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800309c:	2800      	cmp	r0, #0
 800309e:	d000      	beq.n	80030a2 <LoadEEparams+0x16>
 80030a0:	e064      	b.n	800316c <LoadEEparams+0xe0>
		BOS.response =(uint8_t )temp1;
 80030a2:	466b      	mov	r3, sp
 80030a4:	3306      	adds	r3, #6
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	4a49      	ldr	r2, [pc, #292]	; (80031d0 <LoadEEparams+0x144>)
 80030aa:	7193      	strb	r3, [r2, #6]
		BOS.trace =(traceOptions_t )(temp1 >> 8);
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	71d3      	strb	r3, [r2, #7]
		BOS.response =BOS_default.response;
		BOS.trace =BOS_default.trace;
	}
	
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030b0:	2016      	movs	r0, #22
 80030b2:	466b      	mov	r3, sp
 80030b4:	1d99      	adds	r1, r3, #6
 80030b6:	30ff      	adds	r0, #255	; 0xff
 80030b8:	f004 fb62 	bl	8007780 <EE_ReadVariable>
	if(!status1)
 80030bc:	2800      	cmp	r0, #0
 80030be:	d15c      	bne.n	800317a <LoadEEparams+0xee>
		BOS.buttons.debounce =temp1;
 80030c0:	466b      	mov	r3, sp
 80030c2:	88da      	ldrh	r2, [r3, #6]
 80030c4:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <LoadEEparams+0x144>)
 80030c6:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030c8:	208b      	movs	r0, #139	; 0x8b
 80030ca:	466b      	mov	r3, sp
 80030cc:	1d99      	adds	r1, r3, #6
 80030ce:	0040      	lsls	r0, r0, #1
 80030d0:	f004 fb56 	bl	8007780 <EE_ReadVariable>
	if(!status1)
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d155      	bne.n	8003184 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime =temp1;
 80030d8:	466b      	mov	r3, sp
 80030da:	88da      	ldrh	r2, [r3, #6]
 80030dc:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <LoadEEparams+0x144>)
 80030de:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030e0:	2018      	movs	r0, #24
 80030e2:	466b      	mov	r3, sp
 80030e4:	1d99      	adds	r1, r3, #6
 80030e6:	30ff      	adds	r0, #255	; 0xff
 80030e8:	f004 fb4a 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d14e      	bne.n	800318e <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80030f0:	466b      	mov	r3, sp
 80030f2:	3306      	adds	r3, #6
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	4a36      	ldr	r2, [pc, #216]	; (80031d0 <LoadEEparams+0x144>)
 80030f8:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030fe:	208c      	movs	r0, #140	; 0x8c
 8003100:	466b      	mov	r3, sp
 8003102:	1d99      	adds	r1, r3, #6
 8003104:	0040      	lsls	r0, r0, #1
 8003106:	f004 fb3b 	bl	8007780 <EE_ReadVariable>
 800310a:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800310c:	201a      	movs	r0, #26
 800310e:	a901      	add	r1, sp, #4
 8003110:	30ff      	adds	r0, #255	; 0xff
 8003112:	f004 fb35 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8003116:	4304      	orrs	r4, r0
 8003118:	b2a4      	uxth	r4, r4
 800311a:	2c00      	cmp	r4, #0
 800311c:	d13e      	bne.n	800319c <LoadEEparams+0x110>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800311e:	ab01      	add	r3, sp, #4
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	466a      	mov	r2, sp
 8003126:	3206      	adds	r2, #6
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <LoadEEparams+0x144>)
 800312e:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003130:	208d      	movs	r0, #141	; 0x8d
 8003132:	466b      	mov	r3, sp
 8003134:	1d99      	adds	r1, r3, #6
 8003136:	0040      	lsls	r0, r0, #1
 8003138:	f004 fb22 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 800313c:	2800      	cmp	r0, #0
 800313e:	d13b      	bne.n	80031b8 <LoadEEparams+0x12c>
		BOS.daylightsaving =(int8_t )temp1;
 8003140:	466b      	mov	r3, sp
 8003142:	3306      	adds	r3, #6
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <LoadEEparams+0x144>)
 8003148:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800314e:	201c      	movs	r0, #28
 8003150:	466b      	mov	r3, sp
 8003152:	1d99      	adds	r1, r3, #6
 8003154:	30ff      	adds	r0, #255	; 0xff
 8003156:	f004 fb13 	bl	8007780 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800315a:	2800      	cmp	r0, #0
 800315c:	d032      	beq.n	80031c4 <LoadEEparams+0x138>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <LoadEEparams+0x148>)
 8003160:	7eda      	ldrb	r2, [r3, #27]
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <LoadEEparams+0x144>)
 8003164:	76da      	strb	r2, [r3, #27]
	}
	
	return result;
}
 8003166:	2000      	movs	r0, #0
 8003168:	b002      	add	sp, #8
 800316a:	bd10      	pop	{r4, pc}
		BOS.response =BOS_default.response;
 800316c:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <LoadEEparams+0x144>)
 800316e:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <LoadEEparams+0x148>)
 8003170:	7991      	ldrb	r1, [r2, #6]
 8003172:	7199      	strb	r1, [r3, #6]
		BOS.trace =BOS_default.trace;
 8003174:	79d2      	ldrb	r2, [r2, #7]
 8003176:	71da      	strb	r2, [r3, #7]
 8003178:	e79a      	b.n	80030b0 <LoadEEparams+0x24>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <LoadEEparams+0x148>)
 800317c:	881a      	ldrh	r2, [r3, #0]
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <LoadEEparams+0x144>)
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	e7a1      	b.n	80030c8 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <LoadEEparams+0x148>)
 8003186:	885a      	ldrh	r2, [r3, #2]
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <LoadEEparams+0x144>)
 800318a:	805a      	strh	r2, [r3, #2]
 800318c:	e7a8      	b.n	80030e0 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <LoadEEparams+0x144>)
 8003190:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <LoadEEparams+0x148>)
 8003192:	7911      	ldrb	r1, [r2, #4]
 8003194:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003196:	7952      	ldrb	r2, [r2, #5]
 8003198:	715a      	strb	r2, [r3, #5]
 800319a:	e7b0      	b.n	80030fe <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <LoadEEparams+0x14c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <LoadEEparams+0x144>)
 80031a6:	22e1      	movs	r2, #225	; 0xe1
 80031a8:	0252      	lsls	r2, r2, #9
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e7c0      	b.n	8003130 <LoadEEparams+0xa4>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <LoadEEparams+0x148>)
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <LoadEEparams+0x144>)
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	e7bb      	b.n	8003130 <LoadEEparams+0xa4>
		BOS.hourformat =24;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <LoadEEparams+0x144>)
 80031ba:	2218      	movs	r2, #24
 80031bc:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031be:	2200      	movs	r2, #0
 80031c0:	731a      	strb	r2, [r3, #12]
 80031c2:	e7c4      	b.n	800314e <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 80031c4:	466b      	mov	r3, sp
 80031c6:	88da      	ldrh	r2, [r3, #6]
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <LoadEEparams+0x144>)
 80031ca:	76da      	strb	r2, [r3, #27]
 80031cc:	e7cb      	b.n	8003166 <LoadEEparams+0xda>
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	20006aa0 	.word	0x20006aa0
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000a76 	.word	0x20000a76

080031dc <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	46ce      	mov	lr, r9
 80031e0:	4647      	mov	r7, r8
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80031e6:	231e      	movs	r3, #30
 80031e8:	446b      	add	r3, sp
 80031ea:	2200      	movs	r2, #0
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	2501      	movs	r5, #1
 80031f0:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80031f2:	001e      	movs	r6, r3
 80031f4:	230f      	movs	r3, #15
 80031f6:	4698      	mov	r8, r3
 80031f8:	e004      	b.n	8003204 <LoadEEbuttons+0x28>
 80031fa:	3404      	adds	r4, #4
 80031fc:	b2a4      	uxth	r4, r4
 80031fe:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003200:	2d08      	cmp	r5, #8
 8003202:	d058      	beq.n	80032b6 <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003204:	0031      	movs	r1, r6
 8003206:	0020      	movs	r0, r4
 8003208:	f004 faba 	bl	8007780 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 800320c:	2800      	cmp	r0, #0
 800320e:	d1f4      	bne.n	80031fa <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 8003210:	8831      	ldrh	r1, [r6, #0]
 8003212:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003214:	091a      	lsrs	r2, r3, #4
 8003216:	42aa      	cmp	r2, r5
 8003218:	d1ef      	bne.n	80031fa <LoadEEbuttons+0x1e>
 800321a:	4640      	mov	r0, r8
 800321c:	4003      	ands	r3, r0
 800321e:	d0ec      	beq.n	80031fa <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 8003220:	00d0      	lsls	r0, r2, #3
 8003222:	1882      	adds	r2, r0, r2
 8003224:	4827      	ldr	r0, [pc, #156]	; (80032c4 <LoadEEbuttons+0xe8>)
 8003226:	4681      	mov	r9, r0
 8003228:	4491      	add	r9, r2
 800322a:	464a      	mov	r2, r9
 800322c:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 800322e:	7211      	strb	r1, [r2, #8]
 8003230:	00af      	lsls	r7, r5, #2
 8003232:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003234:	0038      	movs	r0, r7
 8003236:	30e9      	adds	r0, #233	; 0xe9
 8003238:	b280      	uxth	r0, r0
 800323a:	0031      	movs	r1, r6
 800323c:	f004 faa0 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003240:	8833      	ldrh	r3, [r6, #0]
 8003242:	0a1a      	lsrs	r2, r3, #8
 8003244:	4649      	mov	r1, r9
 8003246:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003248:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 800324a:	0038      	movs	r0, r7
 800324c:	30ea      	adds	r0, #234	; 0xea
 800324e:	b280      	uxth	r0, r0
 8003250:	0031      	movs	r1, r6
 8003252:	f004 fa95 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003256:	8833      	ldrh	r3, [r6, #0]
 8003258:	0a1a      	lsrs	r2, r3, #8
 800325a:	4649      	mov	r1, r9
 800325c:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 800325e:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003260:	37eb      	adds	r7, #235	; 0xeb
 8003262:	b2b8      	uxth	r0, r7
 8003264:	0031      	movs	r1, r6
 8003266:	f004 fa8b 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 800326a:	8833      	ldrh	r3, [r6, #0]
 800326c:	0a1a      	lsrs	r2, r3, #8
 800326e:	4649      	mov	r1, r9
 8003270:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003272:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8003274:	b2ef      	uxtb	r7, r5
 8003276:	7848      	ldrb	r0, [r1, #1]
 8003278:	0039      	movs	r1, r7
 800327a:	f004 ff97 	bl	80081ac <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800327e:	464b      	mov	r3, r9
 8003280:	7a19      	ldrb	r1, [r3, #8]
 8003282:	789b      	ldrb	r3, [r3, #2]
 8003284:	104a      	asrs	r2, r1, #1
 8003286:	2001      	movs	r0, #1
 8003288:	4002      	ands	r2, r0
 800328a:	4001      	ands	r1, r0
 800328c:	2000      	movs	r0, #0
 800328e:	9005      	str	r0, [sp, #20]
 8003290:	4648      	mov	r0, r9
 8003292:	79c0      	ldrb	r0, [r0, #7]
 8003294:	9004      	str	r0, [sp, #16]
 8003296:	4648      	mov	r0, r9
 8003298:	7980      	ldrb	r0, [r0, #6]
 800329a:	9003      	str	r0, [sp, #12]
 800329c:	4648      	mov	r0, r9
 800329e:	7940      	ldrb	r0, [r0, #5]
 80032a0:	9002      	str	r0, [sp, #8]
 80032a2:	4648      	mov	r0, r9
 80032a4:	7900      	ldrb	r0, [r0, #4]
 80032a6:	9001      	str	r0, [sp, #4]
 80032a8:	4648      	mov	r0, r9
 80032aa:	78c0      	ldrb	r0, [r0, #3]
 80032ac:	9000      	str	r0, [sp, #0]
 80032ae:	0038      	movs	r0, r7
 80032b0:	f005 f896 	bl	80083e0 <SetButtonEvents>
 80032b4:	e7a1      	b.n	80031fa <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 80032b6:	2000      	movs	r0, #0
 80032b8:	b009      	add	sp, #36	; 0x24
 80032ba:	bc0c      	pop	{r2, r3}
 80032bc:	4690      	mov	r8, r2
 80032be:	4699      	mov	r9, r3
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	2000151c 	.word	0x2000151c

080032c8 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	46de      	mov	lr, fp
 80032cc:	4657      	mov	r7, sl
 80032ce:	464e      	mov	r6, r9
 80032d0:	b5c0      	push	{r6, r7, lr}
 80032d2:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032d4:	2032      	movs	r0, #50	; 0x32
 80032d6:	f010 faef 	bl	80138b8 <malloc>
 80032da:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 80032dc:	d100      	bne.n	80032e0 <LoadROsnippets+0x18>
 80032de:	e071      	b.n	80033c4 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <LoadROsnippets+0x100>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 80032e4:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 80032e6:	2bfe      	cmp	r3, #254	; 0xfe
 80032e8:	d166      	bne.n	80033b8 <LoadROsnippets+0xf0>
 80032ea:	4e38      	ldr	r6, [pc, #224]	; (80033cc <LoadROsnippets+0x104>)
 80032ec:	3b9a      	subs	r3, #154	; 0x9a
 80032ee:	469b      	mov	fp, r3
 80032f0:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 80032f2:	4d35      	ldr	r5, [pc, #212]	; (80033c8 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80032f4:	1c7b      	adds	r3, r7, #1
 80032f6:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 80032f8:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <LoadROsnippets+0x108>)
 80032fa:	4699      	mov	r9, r3
 80032fc:	e023      	b.n	8003346 <LoadROsnippets+0x7e>
		i =0;
 80032fe:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 8003300:	193b      	adds	r3, r7, r4
 8003302:	3b01      	subs	r3, #1
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 800330a:	3401      	adds	r4, #1
 800330c:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 800330e:	0020      	movs	r0, r4
 8003310:	f010 fad2 	bl	80138b8 <malloc>
 8003314:	4653      	mov	r3, sl
 8003316:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003318:	2800      	cmp	r0, #0
 800331a:	d03f      	beq.n	800339c <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 800331c:	0022      	movs	r2, r4
 800331e:	0039      	movs	r1, r7
 8003320:	f010 fd17 	bl	8013d52 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003324:	464b      	mov	r3, r9
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	464a      	mov	r2, r9
 800332c:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 800332e:	0022      	movs	r2, r4
 8003330:	2100      	movs	r1, #0
 8003332:	0038      	movs	r0, r7
 8003334:	f010 fd16 	bl	8013d64 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003338:	9b00      	ldr	r3, [sp, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2bfe      	cmp	r3, #254	; 0xfe
 800333e:	d137      	bne.n	80033b0 <LoadROsnippets+0xe8>
 8003340:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003342:	455e      	cmp	r6, fp
 8003344:	d034      	beq.n	80033b0 <LoadROsnippets+0xe8>
 8003346:	0028      	movs	r0, r5
 8003348:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 800334a:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800334c:	1b79      	subs	r1, r7, r5
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	54ca      	strb	r2, [r1, r3]
 8003352:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003354:	4283      	cmp	r3, r0
 8003356:	d1fa      	bne.n	800334e <LoadROsnippets+0x86>
 8003358:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800335a:	46b2      	mov	sl, r6
 800335c:	2214      	movs	r2, #20
 800335e:	9901      	ldr	r1, [sp, #4]
 8003360:	0030      	movs	r0, r6
 8003362:	f010 fcf6 	bl	8013d52 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003366:	2214      	movs	r2, #20
 8003368:	2100      	movs	r1, #0
 800336a:	0038      	movs	r0, r7
 800336c:	f010 fcfa 	bl	8013d64 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003370:	9500      	str	r5, [sp, #0]
 8003372:	782a      	ldrb	r2, [r5, #0]
 8003374:	1c93      	adds	r3, r2, #2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d9c0      	bls.n	80032fe <LoadROsnippets+0x36>
 800337c:	0039      	movs	r1, r7
		i =0;
 800337e:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003380:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 8003382:	3501      	adds	r5, #1
			++i;
 8003384:	3401      	adds	r4, #1
 8003386:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003388:	9500      	str	r5, [sp, #0]
 800338a:	782a      	ldrb	r2, [r5, #0]
 800338c:	1c93      	adds	r3, r2, #2
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d9b5      	bls.n	8003300 <LoadROsnippets+0x38>
 8003394:	3101      	adds	r1, #1
 8003396:	2c32      	cmp	r4, #50	; 0x32
 8003398:	d1f2      	bne.n	8003380 <LoadROsnippets+0xb8>
 800339a:	e7b1      	b.n	8003300 <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 800339c:	2214      	movs	r2, #20
 800339e:	2100      	movs	r1, #0
 80033a0:	4650      	mov	r0, sl
 80033a2:	f010 fcdf 	bl	8013d64 <memset>
			free(snipBuffer);
 80033a6:	0038      	movs	r0, r7
 80033a8:	f010 fa90 	bl	80138cc <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033ac:	200e      	movs	r0, #14
 80033ae:	e003      	b.n	80033b8 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 80033b0:	0038      	movs	r0, r7
 80033b2:	f010 fa8b 	bl	80138cc <free>
	return BOS_OK;
 80033b6:	2000      	movs	r0, #0
}
 80033b8:	b002      	add	sp, #8
 80033ba:	bc1c      	pop	{r2, r3, r4}
 80033bc:	4691      	mov	r9, r2
 80033be:	469a      	mov	sl, r3
 80033c0:	46a3      	mov	fp, r4
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 80033c4:	20fb      	movs	r0, #251	; 0xfb
 80033c6:	e7f7      	b.n	80033b8 <LoadROsnippets+0xf0>
 80033c8:	0801dc00 	.word	0x0801dc00
 80033cc:	20006abc 	.word	0x20006abc
 80033d0:	2000121f 	.word	0x2000121f

080033d4 <LoadEEvars>:
void LoadEEvars(void){
 80033d4:	b510      	push	{r4, lr}
	LoadROtopology();
 80033d6:	f7ff fca5 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 80033da:	f7ff fcf7 	bl	8002dcc <LoadEEportsDir>
	LoadEEalias();
 80033de:	f7ff fd19 	bl	8002e14 <LoadEEalias>
	LoadEEgroup();
 80033e2:	f7ff fd59 	bl	8002e98 <LoadEEgroup>
	LoadEEstreams();
 80033e6:	f7ff fdab 	bl	8002f40 <LoadEEstreams>
	LoadEEparams();
 80033ea:	f7ff fe4f 	bl	800308c <LoadEEparams>
	LoadEEbuttons();
 80033ee:	f7ff fef5 	bl	80031dc <LoadEEbuttons>
	LoadROsnippets();
 80033f2:	f7ff ff69 	bl	80032c8 <LoadROsnippets>
}
 80033f6:	bd10      	pop	{r4, pc}

080033f8 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <SaveEEportsDir+0x4c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01a      	beq.n	800343a <SaveEEportsDir+0x42>
 8003404:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 800340a:	4e0f      	ldr	r6, [pc, #60]	; (8003448 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 800340c:	4f0d      	ldr	r7, [pc, #52]	; (8003444 <SaveEEportsDir+0x4c>)
 800340e:	e008      	b.n	8003422 <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003410:	1c60      	adds	r0, r4, #1
 8003412:	f004 f9e5 	bl	80077e0 <EE_WriteVariable>
 8003416:	e00a      	b.n	800342e <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 8003418:	3401      	adds	r4, #1
 800341a:	b2e4      	uxtb	r4, r4
 800341c:	783b      	ldrb	r3, [r7, #0]
 800341e:	42a3      	cmp	r3, r4
 8003420:	d30d      	bcc.n	800343e <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 8003422:	0025      	movs	r5, r4
 8003424:	1e63      	subs	r3, r4, #1
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	5b99      	ldrh	r1, [r3, r6]
 800342a:	2900      	cmp	r1, #0
 800342c:	d1f0      	bne.n	8003410 <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800342e:	3502      	adds	r5, #2
 8003430:	2d1b      	cmp	r5, #27
 8003432:	ddf1      	ble.n	8003418 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003434:	230a      	movs	r3, #10
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	e7ee      	b.n	8003418 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800343e:	9801      	ldr	r0, [sp, #4]
 8003440:	b003      	add	sp, #12
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003444:	2000001c 	.word	0x2000001c
 8003448:	20006f1c 	.word	0x20006f1c

0800344c <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	46d6      	mov	lr, sl
 8003450:	464f      	mov	r7, r9
 8003452:	4646      	mov	r6, r8
 8003454:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003456:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003458:	2300      	movs	r3, #0
 800345a:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <SaveEEalias+0x7c>)
 800345e:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <SaveEEalias+0x80>)
 8003462:	4699      	mov	r9, r3
 8003464:	e005      	b.n	8003472 <SaveEEalias+0x26>
 8003466:	3601      	adds	r6, #1
 8003468:	b2f6      	uxtb	r6, r6
 800346a:	464b      	mov	r3, r9
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	42b3      	cmp	r3, r6
 8003470:	d324      	bcc.n	80034bc <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 8003472:	00b3      	lsls	r3, r6, #2
 8003474:	199b      	adds	r3, r3, r6
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4652      	mov	r2, sl
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f2      	beq.n	8003466 <SaveEEalias+0x1a>
 8003480:	00b5      	lsls	r5, r6, #2
 8003482:	19ad      	adds	r5, r5, r6
 8003484:	006d      	lsls	r5, r5, #1
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <SaveEEalias+0x7c>)
 8003488:	469c      	mov	ip, r3
 800348a:	4465      	add	r5, ip
 800348c:	4644      	mov	r4, r8
 800348e:	341c      	adds	r4, #28
 8003490:	b2a4      	uxth	r4, r4
 8003492:	4647      	mov	r7, r8
 8003494:	3721      	adds	r7, #33	; 0x21
 8003496:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003498:	782b      	ldrb	r3, [r5, #0]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	7869      	ldrb	r1, [r5, #1]
 800349e:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034a0:	b289      	uxth	r1, r1
 80034a2:	0020      	movs	r0, r4
 80034a4:	f004 f99c 	bl	80077e0 <EE_WriteVariable>
 80034a8:	3502      	adds	r5, #2
 80034aa:	3401      	adds	r4, #1
 80034ac:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ae:	42bc      	cmp	r4, r7
 80034b0:	d1f2      	bne.n	8003498 <SaveEEalias+0x4c>
 80034b2:	4643      	mov	r3, r8
 80034b4:	3305      	adds	r3, #5
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4698      	mov	r8, r3
 80034ba:	e7d4      	b.n	8003466 <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 80034bc:	2000      	movs	r0, #0
 80034be:	bc1c      	pop	{r2, r3, r4}
 80034c0:	4690      	mov	r8, r2
 80034c2:	4699      	mov	r9, r3
 80034c4:	46a2      	mov	sl, r4
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c8:	20000f68 	.word	0x20000f68
 80034cc:	2000001c 	.word	0x2000001c

080034d0 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	46de      	mov	lr, fp
 80034d4:	4657      	mov	r7, sl
 80034d6:	464e      	mov	r6, r9
 80034d8:	4645      	mov	r5, r8
 80034da:	b5e0      	push	{r5, r6, r7, lr}
 80034dc:	000f      	movs	r7, r1
 80034de:	0016      	movs	r6, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	ab0a      	add	r3, sp, #40	; 0x28
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	469b      	mov	fp, r3
 80034e8:	ab0b      	add	r3, sp, #44	; 0x2c
 80034ea:	781d      	ldrb	r5, [r3, #0]
 80034ec:	ab0c      	add	r3, sp, #48	; 0x30
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	469a      	mov	sl, r3
 80034f2:	ab0d      	add	r3, sp, #52	; 0x34
 80034f4:	781c      	ldrb	r4, [r3, #0]
 80034f6:	ab0e      	add	r3, sp, #56	; 0x38
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80034fc:	b281      	uxth	r1, r0
 80034fe:	20e4      	movs	r0, #228	; 0xe4
 8003500:	f004 f96e 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003504:	0a39      	lsrs	r1, r7, #8
 8003506:	b289      	uxth	r1, r1
 8003508:	20e5      	movs	r0, #229	; 0xe5
 800350a:	f004 f969 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800350e:	b2b9      	uxth	r1, r7
 8003510:	20e6      	movs	r0, #230	; 0xe6
 8003512:	f004 f965 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003516:	0a31      	lsrs	r1, r6, #8
 8003518:	b289      	uxth	r1, r1
 800351a:	20e7      	movs	r0, #231	; 0xe7
 800351c:	f004 f960 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003520:	b2b1      	uxth	r1, r6
 8003522:	20e8      	movs	r0, #232	; 0xe8
 8003524:	f004 f95c 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003528:	464b      	mov	r3, r9
 800352a:	0219      	lsls	r1, r3, #8
 800352c:	4459      	add	r1, fp
 800352e:	b289      	uxth	r1, r1
 8003530:	20e9      	movs	r0, #233	; 0xe9
 8003532:	f004 f955 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003536:	022d      	lsls	r5, r5, #8
 8003538:	4455      	add	r5, sl
 800353a:	b2a9      	uxth	r1, r5
 800353c:	20ea      	movs	r0, #234	; 0xea
 800353e:	f004 f94f 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003542:	0224      	lsls	r4, r4, #8
 8003544:	4444      	add	r4, r8
 8003546:	b2a1      	uxth	r1, r4
 8003548:	20eb      	movs	r0, #235	; 0xeb
 800354a:	f004 f949 	bl	80077e0 <EE_WriteVariable>
	
	return result;
}
 800354e:	2000      	movs	r0, #0
 8003550:	bc3c      	pop	{r2, r3, r4, r5}
 8003552:	4690      	mov	r8, r2
 8003554:	4699      	mov	r9, r3
 8003556:	46a2      	mov	sl, r4
 8003558:	46ab      	mov	fp, r5
 800355a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800355c <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 800355c:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 5) | (uint16_t )BOS.response);
 800355e:	4c1a      	ldr	r4, [pc, #104]	; (80035c8 <SaveEEparams+0x6c>)
 8003560:	79e3      	ldrb	r3, [r4, #7]
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	79a1      	ldrb	r1, [r4, #6]
 8003566:	4319      	orrs	r1, r3
 8003568:	208a      	movs	r0, #138	; 0x8a
 800356a:	0040      	lsls	r0, r0, #1
 800356c:	f004 f938 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003570:	8821      	ldrh	r1, [r4, #0]
 8003572:	2016      	movs	r0, #22
 8003574:	30ff      	adds	r0, #255	; 0xff
 8003576:	f004 f933 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800357a:	8861      	ldrh	r1, [r4, #2]
 800357c:	208b      	movs	r0, #139	; 0x8b
 800357e:	0040      	lsls	r0, r0, #1
 8003580:	f004 f92e 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003584:	7963      	ldrb	r3, [r4, #5]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	7b21      	ldrb	r1, [r4, #12]
 800358a:	4319      	orrs	r1, r3
 800358c:	2018      	movs	r0, #24
 800358e:	30ff      	adds	r0, #255	; 0xff
 8003590:	f004 f926 	bl	80077e0 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003594:	8921      	ldrh	r1, [r4, #8]
 8003596:	208c      	movs	r0, #140	; 0x8c
 8003598:	0040      	lsls	r0, r0, #1
 800359a:	f004 f921 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800359e:	8961      	ldrh	r1, [r4, #10]
 80035a0:	201a      	movs	r0, #26
 80035a2:	30ff      	adds	r0, #255	; 0xff
 80035a4:	f004 f91c 	bl	80077e0 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035a8:	7b63      	ldrb	r3, [r4, #13]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	7921      	ldrb	r1, [r4, #4]
 80035ae:	4319      	orrs	r1, r3
 80035b0:	208d      	movs	r0, #141	; 0x8d
 80035b2:	0040      	lsls	r0, r0, #1
 80035b4:	f004 f914 	bl	80077e0 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80035b8:	7ee1      	ldrb	r1, [r4, #27]
 80035ba:	201c      	movs	r0, #28
 80035bc:	30ff      	adds	r0, #255	; 0xff
 80035be:	f004 f90f 	bl	80077e0 <EE_WriteVariable>
	
	return result;
}
 80035c2:	2000      	movs	r0, #0
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	20006aa0 	.word	0x20006aa0

080035cc <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80035d0:	2234      	movs	r2, #52	; 0x34
 80035d2:	2100      	movs	r1, #0
 80035d4:	4813      	ldr	r0, [pc, #76]	; (8003624 <ClearEEportsDir+0x58>)
 80035d6:	f010 fbc5 	bl	8013d64 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <ClearEEportsDir+0x5c>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01a      	beq.n	8003618 <ClearEEportsDir+0x4c>
 80035e2:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 80035e8:	4e0e      	ldr	r6, [pc, #56]	; (8003624 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 80035ea:	4f0f      	ldr	r7, [pc, #60]	; (8003628 <ClearEEportsDir+0x5c>)
 80035ec:	e008      	b.n	8003600 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80035ee:	1c60      	adds	r0, r4, #1
 80035f0:	f004 f8f6 	bl	80077e0 <EE_WriteVariable>
 80035f4:	e00a      	b.n	800360c <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 80035f6:	3401      	adds	r4, #1
 80035f8:	b2e4      	uxtb	r4, r4
 80035fa:	783b      	ldrb	r3, [r7, #0]
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	d30d      	bcc.n	800361c <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 8003600:	0025      	movs	r5, r4
 8003602:	1e63      	subs	r3, r4, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	5b99      	ldrh	r1, [r3, r6]
 8003608:	2900      	cmp	r1, #0
 800360a:	d1f0      	bne.n	80035ee <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800360c:	3502      	adds	r5, #2
 800360e:	2d1b      	cmp	r5, #27
 8003610:	ddf1      	ble.n	80035f6 <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 8003612:	230a      	movs	r3, #10
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	e7ee      	b.n	80035f6 <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800361c:	9801      	ldr	r0, [sp, #4]
 800361e:	b003      	add	sp, #12
 8003620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	20006f1c 	.word	0x20006f1c
 8003628:	2000001c 	.word	0x2000001c

0800362c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 800362c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <EE_FormatForFactoryReset+0x1c>)
 8003630:	4a06      	ldr	r2, [pc, #24]	; (800364c <EE_FormatForFactoryReset+0x20>)
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d006      	beq.n	8003646 <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003638:	f004 f97a 	bl	8007930 <EE_Format>
 800363c:	2800      	cmp	r0, #0
 800363e:	d102      	bne.n	8003646 <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003640:	4b02      	ldr	r3, [pc, #8]	; (800364c <EE_FormatForFactoryReset+0x20>)
 8003642:	4a01      	ldr	r2, [pc, #4]	; (8003648 <EE_FormatForFactoryReset+0x1c>)
 8003644:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003646:	bd10      	pop	{r4, pc}
 8003648:	beefdead 	.word	0xbeefdead
 800364c:	20007ff0 	.word	0x20007ff0

08003650 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003654:	2512      	movs	r5, #18
 8003656:	446d      	add	r5, sp
 8003658:	ab04      	add	r3, sp, #16
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	ab07      	add	r3, sp, #28
 800365e:	002a      	movs	r2, r5
 8003660:	a908      	add	r1, sp, #32
 8003662:	2001      	movs	r0, #1
 8003664:	f009 feae 	bl	800d3c4 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003668:	ac03      	add	r4, sp, #12
 800366a:	9400      	str	r4, [sp, #0]
 800366c:	ab05      	add	r3, sp, #20
 800366e:	220e      	movs	r2, #14
 8003670:	446a      	add	r2, sp
 8003672:	a906      	add	r1, sp, #24
 8003674:	2002      	movs	r0, #2
 8003676:	f009 fea5 	bl	800d3c4 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
 800367c:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2600      	movs	r6, #0
 8003680:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003682:	882b      	ldrh	r3, [r5, #0]
 8003684:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003686:	a909      	add	r1, sp, #36	; 0x24
 8003688:	9808      	ldr	r0, [sp, #32]
 800368a:	f00e f9c9 	bl	8011a20 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800368e:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003690:	2302      	movs	r3, #2
 8003692:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003694:	8823      	ldrh	r3, [r4, #0]
 8003696:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003698:	a909      	add	r1, sp, #36	; 0x24
 800369a:	9805      	ldr	r0, [sp, #20]
 800369c:	f00e f9c0 	bl	8011a20 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036a0:	8829      	ldrh	r1, [r5, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9808      	ldr	r0, [sp, #32]
 80036a6:	f00e fb2f 	bl	8011d08 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f00a fa2e 	bl	800db0c <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036b0:	8821      	ldrh	r1, [r4, #0]
 80036b2:	9805      	ldr	r0, [sp, #20]
 80036b4:	f00e fb22 	bl	8011cfc <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80036b8:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d002      	beq.n	80036c4 <IsLowerCLIbaud+0x74>
}
 80036be:	0018      	movs	r0, r3
 80036c0:	b00e      	add	sp, #56	; 0x38
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80036c4:	3312      	adds	r3, #18
 80036c6:	446b      	add	r3, sp
 80036c8:	8819      	ldrh	r1, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	9808      	ldr	r0, [sp, #32]
 80036ce:	f00e fb1b 	bl	8011d08 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80036d2:	2005      	movs	r0, #5
 80036d4:	f00a fa1a 	bl	800db0c <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80036d8:	ab03      	add	r3, sp, #12
 80036da:	8819      	ldrh	r1, [r3, #0]
 80036dc:	9805      	ldr	r0, [sp, #20]
 80036de:	f00e fb0d 	bl	8011cfc <HAL_GPIO_ReadPin>
 80036e2:	3801      	subs	r0, #1
 80036e4:	4243      	negs	r3, r0
 80036e6:	4143      	adcs	r3, r0
			return 1;
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e7e8      	b.n	80036be <IsLowerCLIbaud+0x6e>

080036ec <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 80036ec:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 80036ee:	f00a fbe7 	bl	800dec0 <GetUart>
 80036f2:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 80036f4:	23e1      	movs	r3, #225	; 0xe1
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	015b      	lsls	r3, r3, #5
 8003704:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8003706:	f00f ff35 	bl	8013574 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	6813      	ldr	r3, [r2, #0]
 800370e:	2120      	movs	r1, #32
 8003710:	430b      	orrs	r3, r1
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bd10      	pop	{r4, pc}
	...

08003718 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003718:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <IsModuleParameter+0x14>)
 800371c:	6899      	ldr	r1, [r3, #8]
 800371e:	f7fc fcf1 	bl	8000104 <strcmp>
 8003722:	4243      	negs	r3, r0
 8003724:	4158      	adcs	r0, r3
 8003726:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 8003728:	bd10      	pop	{r4, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	20000084 	.word	0x20000084

08003730 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003734:	491b      	ldr	r1, [pc, #108]	; (80037a4 <IsMathOperator+0x74>)
 8003736:	f7fc fce5 	bl	8000104 <strcmp>
 800373a:	0006      	movs	r6, r0
 800373c:	2506      	movs	r5, #6
 800373e:	2e00      	cmp	r6, #0
 8003740:	d023      	beq.n	800378a <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003742:	4919      	ldr	r1, [pc, #100]	; (80037a8 <IsMathOperator+0x78>)
 8003744:	0020      	movs	r0, r4
 8003746:	f7fc fcdd 	bl	8000104 <strcmp>
 800374a:	2800      	cmp	r0, #0
 800374c:	d01f      	beq.n	800378e <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800374e:	4917      	ldr	r1, [pc, #92]	; (80037ac <IsMathOperator+0x7c>)
 8003750:	0020      	movs	r0, r4
 8003752:	f7fc fcd7 	bl	8000104 <strcmp>
 8003756:	2800      	cmp	r0, #0
 8003758:	d01b      	beq.n	8003792 <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 800375a:	4915      	ldr	r1, [pc, #84]	; (80037b0 <IsMathOperator+0x80>)
 800375c:	0020      	movs	r0, r4
 800375e:	f7fc fcd1 	bl	8000104 <strcmp>
 8003762:	2800      	cmp	r0, #0
 8003764:	d017      	beq.n	8003796 <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003766:	4913      	ldr	r1, [pc, #76]	; (80037b4 <IsMathOperator+0x84>)
 8003768:	0020      	movs	r0, r4
 800376a:	f7fc fccb 	bl	8000104 <strcmp>
 800376e:	2800      	cmp	r0, #0
 8003770:	d013      	beq.n	800379a <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003772:	4911      	ldr	r1, [pc, #68]	; (80037b8 <IsMathOperator+0x88>)
 8003774:	0020      	movs	r0, r4
 8003776:	f7fc fcc5 	bl	8000104 <strcmp>
 800377a:	2800      	cmp	r0, #0
 800377c:	d00f      	beq.n	800379e <IsMathOperator+0x6e>
 800377e:	3d01      	subs	r5, #1
 8003780:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003782:	2d00      	cmp	r5, #0
 8003784:	d1db      	bne.n	800373e <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 8003786:	2000      	movs	r0, #0
}
 8003788:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 800378a:	2001      	movs	r0, #1
 800378c:	e7fc      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_GREATER;
 800378e:	2002      	movs	r0, #2
 8003790:	e7fa      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003792:	2003      	movs	r0, #3
 8003794:	e7f8      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003796:	2004      	movs	r0, #4
 8003798:	e7f6      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 800379a:	2005      	movs	r0, #5
 800379c:	e7f4      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 800379e:	2006      	movs	r0, #6
 80037a0:	e7f2      	b.n	8003788 <IsMathOperator+0x58>
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	080188b8 	.word	0x080188b8
 80037a8:	080188bc 	.word	0x080188bc
 80037ac:	080188c0 	.word	0x080188c0
 80037b0:	080188c4 	.word	0x080188c4
 80037b4:	080188c8 	.word	0x080188c8
 80037b8:	080188cc 	.word	0x080188cc

080037bc <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037be:	46c6      	mov	lr, r8
 80037c0:	b500      	push	{lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	0006      	movs	r6, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037c6:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <ExploreNeighbors+0x4c>)
 80037ca:	4698      	mov	r8, r3
 80037cc:	4d0f      	ldr	r5, [pc, #60]	; (800380c <ExploreNeighbors+0x50>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037ce:	2703      	movs	r7, #3
		if(port != ignore){
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d00f      	beq.n	80037f4 <ExploreNeighbors+0x38>
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037d4:	4643      	mov	r3, r8
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	0a1a      	lsrs	r2, r3, #8
 80037da:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 80037dc:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 80037de:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037e0:	9700      	str	r7, [sp, #0]
 80037e2:	230a      	movs	r3, #10
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	0020      	movs	r0, r4
 80037ea:	f005 fd43 	bl	8009274 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 80037ee:	200a      	movs	r0, #10
 80037f0:	f00a fcb5 	bl	800e15e <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037f4:	3401      	adds	r4, #1
 80037f6:	b2e4      	uxtb	r4, r4
 80037f8:	2c07      	cmp	r4, #7
 80037fa:	d1e9      	bne.n	80037d0 <ExploreNeighbors+0x14>
		}
	}
	
	return result;
}
 80037fc:	2000      	movs	r0, #0
 80037fe:	b002      	add	sp, #8
 8003800:	bc04      	pop	{r2}
 8003802:	4690      	mov	r8, r2
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	20000050 	.word	0x20000050
 800380c:	20000f38 	.word	0x20000f38

08003810 <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003812:	46de      	mov	lr, fp
 8003814:	4657      	mov	r7, sl
 8003816:	464e      	mov	r6, r9
 8003818:	4645      	mov	r5, r8
 800381a:	b5e0      	push	{r5, r6, r7, lr}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003820:	4b47      	ldr	r3, [pc, #284]	; (8003940 <FindBroadcastRoutes+0x130>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	469c      	mov	ip, r3
 8003826:	3307      	adds	r3, #7
 8003828:	08db      	lsrs	r3, r3, #3
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	466a      	mov	r2, sp
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	469d      	mov	sp, r3
 8003832:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003834:	4663      	mov	r3, ip
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <FindBroadcastRoutes+0x46>
 800383a:	0023      	movs	r3, r4
 800383c:	4a41      	ldr	r2, [pc, #260]	; (8003944 <FindBroadcastRoutes+0x134>)
 800383e:	4661      	mov	r1, ip
 8003840:	1e4d      	subs	r5, r1, #1
 8003842:	b2ed      	uxtb	r5, r5
 8003844:	3501      	adds	r5, #1
 8003846:	192d      	adds	r5, r5, r4
		modules[m] =0;
 8003848:	2100      	movs	r1, #0
 800384a:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 800384c:	8011      	strh	r1, [r2, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 8003852:	42ab      	cmp	r3, r5
 8003854:	d1f9      	bne.n	800384a <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 8003856:	3801      	subs	r0, #1
 8003858:	2301      	movs	r3, #1
 800385a:	5423      	strb	r3, [r4, r0]
 800385c:	2216      	movs	r2, #22
 800385e:	4342      	muls	r2, r0
 8003860:	3202      	adds	r2, #2
 8003862:	4b39      	ldr	r3, [pc, #228]	; (8003948 <FindBroadcastRoutes+0x138>)
 8003864:	18d2      	adds	r2, r2, r3
 8003866:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= NumOfPorts; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003868:	4d36      	ldr	r5, [pc, #216]	; (8003944 <FindBroadcastRoutes+0x134>)
 800386a:	0040      	lsls	r0, r0, #1
 800386c:	2301      	movs	r3, #1
 800386e:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003870:	46a3      	mov	fp, r4
 8003872:	e003      	b.n	800387c <FindBroadcastRoutes+0x6c>
 8003874:	3101      	adds	r1, #1
 8003876:	3202      	adds	r2, #2
	for(p =1; p <= NumOfPorts; p++){
 8003878:	2906      	cmp	r1, #6
 800387a:	d011      	beq.n	80038a0 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 800387c:	8813      	ldrh	r3, [r2, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f8      	beq.n	8003874 <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003882:	5b46      	ldrh	r6, [r0, r5]
 8003884:	46b1      	mov	r9, r6
 8003886:	4646      	mov	r6, r8
 8003888:	408e      	lsls	r6, r1
 800388a:	46b2      	mov	sl, r6
 800388c:	464e      	mov	r6, r9
 800388e:	4654      	mov	r4, sl
 8003890:	4326      	orrs	r6, r4
 8003892:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	445b      	add	r3, fp
 8003898:	3b01      	subs	r3, #1
 800389a:	2402      	movs	r4, #2
 800389c:	701c      	strb	r4, [r3, #0]
 800389e:	e7e9      	b.n	8003874 <FindBroadcastRoutes+0x64>
 80038a0:	465c      	mov	r4, fp
	++level;												// Move one level
 80038a2:	2602      	movs	r6, #2
 80038a4:	4b28      	ldr	r3, [pc, #160]	; (8003948 <FindBroadcastRoutes+0x138>)
 80038a6:	3302      	adds	r3, #2
 80038a8:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038aa:	2301      	movs	r3, #1
 80038ac:	469b      	mov	fp, r3
 80038ae:	46b0      	mov	r8, r6
 80038b0:	0026      	movs	r6, r4
		++level;											// Move one level
 80038b2:	4643      	mov	r3, r8
 80038b4:	3301      	adds	r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038ba:	4663      	mov	r3, ip
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d035      	beq.n	800392c <FindBroadcastRoutes+0x11c>
 80038c0:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80038c6:	3b01      	subs	r3, #1
 80038c8:	4443      	add	r3, r8
 80038ca:	4699      	mov	r9, r3
 80038cc:	e01e      	b.n	800390c <FindBroadcastRoutes+0xfc>
 80038ce:	3001      	adds	r0, #1
 80038d0:	3102      	adds	r1, #2
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
 80038d2:	2806      	cmp	r0, #6
 80038d4:	d015      	beq.n	8003902 <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 80038d6:	880b      	ldrh	r3, [r1, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f8      	beq.n	80038ce <FindBroadcastRoutes+0xbe>
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	3b01      	subs	r3, #1
 80038e0:	5cf5      	ldrb	r5, [r6, r3]
 80038e2:	2d00      	cmp	r5, #0
 80038e4:	d1f3      	bne.n	80038ce <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038e6:	4a17      	ldr	r2, [pc, #92]	; (8003944 <FindBroadcastRoutes+0x134>)
 80038e8:	5aa5      	ldrh	r5, [r4, r2]
 80038ea:	465a      	mov	r2, fp
 80038ec:	4082      	lsls	r2, r0
 80038ee:	4315      	orrs	r5, r2
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <FindBroadcastRoutes+0x134>)
 80038f2:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 80038f4:	4642      	mov	r2, r8
 80038f6:	54f2      	strb	r2, [r6, r3]
						++untaged;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e7e5      	b.n	80038ce <FindBroadcastRoutes+0xbe>
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003906:	b2d3      	uxtb	r3, r2
 8003908:	4563      	cmp	r3, ip
 800390a:	d20c      	bcs.n	8003926 <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 800390c:	5cb3      	ldrb	r3, [r6, r2]
 800390e:	454b      	cmp	r3, r9
 8003910:	d1f8      	bne.n	8003904 <FindBroadcastRoutes+0xf4>
 8003912:	2116      	movs	r1, #22
 8003914:	4351      	muls	r1, r2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	469a      	mov	sl, r3
 800391a:	4451      	add	r1, sl
 800391c:	0053      	lsls	r3, r2, #1
 800391e:	2000      	movs	r0, #0
 8003920:	60ba      	str	r2, [r7, #8]
 8003922:	001c      	movs	r4, r3
 8003924:	e7d7      	b.n	80038d6 <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1c2      	bne.n	80038b2 <FindBroadcastRoutes+0xa2>
	
	return result;
}
 800392c:	2000      	movs	r0, #0
 800392e:	46bd      	mov	sp, r7
 8003930:	b005      	add	sp, #20
 8003932:	bc3c      	pop	{r2, r3, r4, r5}
 8003934:	4690      	mov	r8, r2
 8003936:	4699      	mov	r9, r3
 8003938:	46a2      	mov	sl, r4
 800393a:	46ab      	mov	fp, r5
 800393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000001c 	.word	0x2000001c
 8003944:	20000cb8 	.word	0x20000cb8
 8003948:	20000a78 	.word	0x20000a78

0800394c <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 800394c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 800394e:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003950:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003952:	2b00      	cmp	r3, #0
 8003954:	d100      	bne.n	8003958 <minArr+0xc>
		smallest =arr[0];
 8003956:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <minArr+0x38>)
 800395a:	781d      	ldrb	r5, [r3, #0]
 800395c:	2d00      	cmp	r5, #0
 800395e:	dd0e      	ble.n	800397e <minArr+0x32>
 8003960:	2300      	movs	r3, #0
 8003962:	2700      	movs	r7, #0
 8003964:	e002      	b.n	800396c <minArr+0x20>
 8003966:	3301      	adds	r3, #1
 8003968:	42ab      	cmp	r3, r5
 800396a:	da09      	bge.n	8003980 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 800396c:	5cc2      	ldrb	r2, [r0, r3]
 800396e:	42a2      	cmp	r2, r4
 8003970:	d2f9      	bcs.n	8003966 <minArr+0x1a>
 8003972:	5cce      	ldrb	r6, [r1, r3]
 8003974:	2e00      	cmp	r6, #0
 8003976:	d1f6      	bne.n	8003966 <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8003978:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 800397a:	0014      	movs	r4, r2
 800397c:	e7f3      	b.n	8003966 <minArr+0x1a>
	for(int i =0; i < N; i++){
 800397e:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8003980:	0038      	movs	r0, r7
 8003982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003984:	2000001c 	.word	0x2000001c

08003988 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <QnotEmpty+0x20>)
 800398a:	7819      	ldrb	r1, [r3, #0]
 800398c:	2900      	cmp	r1, #0
 800398e:	d008      	beq.n	80039a2 <QnotEmpty+0x1a>
 8003990:	0003      	movs	r3, r0
 8003992:	1841      	adds	r1, r0, r1
	char temp =1;
 8003994:	2001      	movs	r0, #1
		temp &=Q[i];
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	4010      	ands	r0, r2
 800399a:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 800399c:	428b      	cmp	r3, r1
 800399e:	d1fa      	bne.n	8003996 <QnotEmpty+0xe>
	}
	
	return temp;
}
 80039a0:	4770      	bx	lr
	char temp =1;
 80039a2:	2001      	movs	r0, #1
 80039a4:	e7fc      	b.n	80039a0 <QnotEmpty+0x18>
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	2000001c 	.word	0x2000001c

080039ac <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ae:	46de      	mov	lr, fp
 80039b0:	4657      	mov	r7, sl
 80039b2:	464e      	mov	r6, r9
 80039b4:	4645      	mov	r5, r8
 80039b6:	b5e0      	push	{r5, r6, r7, lr}
 80039b8:	b08f      	sub	sp, #60	; 0x3c
 80039ba:	0005      	movs	r5, r0
 80039bc:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};		// All nodes initially in Q (unvisited nodes)
 80039be:	2232      	movs	r2, #50	; 0x32
 80039c0:	2100      	movs	r1, #0
 80039c2:	a801      	add	r0, sp, #4
 80039c4:	f010 f9ce 	bl	8013d64 <memset>
	memset(route,0,sizeof(route));
 80039c8:	221a      	movs	r2, #26
 80039ca:	2100      	movs	r1, #0
 80039cc:	485a      	ldr	r0, [pc, #360]	; (8003b38 <FindRoute+0x18c>)
 80039ce:	f010 f9c9 	bl	8013d64 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039d2:	0029      	movs	r1, r5
 80039d4:	1e68      	subs	r0, r5, #1
 80039d6:	2300      	movs	r3, #0
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <FindRoute+0x190>)
 80039da:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039dc:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <FindRoute+0x194>)
 80039de:	5413      	strb	r3, [r2, r0]
 80039e0:	2516      	movs	r5, #22
 80039e2:	4345      	muls	r5, r0
 80039e4:	3502      	adds	r5, #2
 80039e6:	4b57      	ldr	r3, [pc, #348]	; (8003b44 <FindRoute+0x198>)
 80039e8:	18ed      	adds	r5, r5, r3
 80039ea:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 80039ec:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039ee:	4653      	mov	r3, sl
 80039f0:	b29c      	uxth	r4, r3
 80039f2:	e003      	b.n	80039fc <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 80039f4:	3001      	adds	r0, #1
 80039f6:	3202      	adds	r2, #2
 80039f8:	2807      	cmp	r0, #7
 80039fa:	d00f      	beq.n	8003a1c <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039fc:	8813      	ldrh	r3, [r2, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f8      	beq.n	80039f4 <FindRoute+0x48>
 8003a02:	08db      	lsrs	r3, r3, #3
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	d1f5      	bne.n	80039f4 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <FindRoute+0x190>)
 8003a0a:	4453      	add	r3, sl
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003a12:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <FindRoute+0x18c>)
 8003a14:	4652      	mov	r2, sl
 8003a16:	701a      	strb	r2, [r3, #0]
			return col;
 8003a18:	b2c0      	uxtb	r0, r0
 8003a1a:	e085      	b.n	8003b28 <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <FindRoute+0x19c>)
 8003a1e:	781e      	ldrb	r6, [r3, #0]
 8003a20:	2e00      	cmp	r6, #0
 8003a22:	dd11      	ble.n	8003a48 <FindRoute+0x9c>
 8003a24:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a26:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a28:	4f45      	ldr	r7, [pc, #276]	; (8003b40 <FindRoute+0x194>)
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	46ac      	mov	ip, r5
 8003a2e:	e002      	b.n	8003a36 <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003a30:	3301      	adds	r3, #1
 8003a32:	42b3      	cmp	r3, r6
 8003a34:	dc07      	bgt.n	8003a46 <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a36:	4299      	cmp	r1, r3
 8003a38:	d0fa      	beq.n	8003a30 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a3a:	1e5a      	subs	r2, r3, #1
 8003a3c:	4d3f      	ldr	r5, [pc, #252]	; (8003b3c <FindRoute+0x190>)
 8003a3e:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a40:	18ba      	adds	r2, r7, r2
 8003a42:	7010      	strb	r0, [r2, #0]
 8003a44:	e7f4      	b.n	8003a30 <FindRoute+0x84>
 8003a46:	4665      	mov	r5, ip
	uint8_t u =0;
 8003a48:	2400      	movs	r4, #0
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <FindRoute+0x198>)
 8003a4c:	4698      	mov	r8, r3
 8003a4e:	230e      	movs	r3, #14
 8003a50:	4443      	add	r3, r8
 8003a52:	4656      	mov	r6, sl
 8003a54:	469b      	mov	fp, r3
 8003a56:	46a9      	mov	r9, r5
 8003a58:	e01d      	b.n	8003a96 <FindRoute+0xea>
 8003a5a:	464d      	mov	r5, r9
 8003a5c:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a5e:	0034      	movs	r4, r6
 8003a60:	e034      	b.n	8003acc <FindRoute+0x120>
 8003a62:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003a64:	4281      	cmp	r1, r0
 8003a66:	d015      	beq.n	8003a94 <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003a68:	880b      	ldrh	r3, [r1, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f9      	beq.n	8003a62 <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003a6e:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	5cd7      	ldrb	r7, [r2, r3]
 8003a76:	2f00      	cmp	r7, #0
 8003a78:	d1f3      	bne.n	8003a62 <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a7a:	4f30      	ldr	r7, [pc, #192]	; (8003b3c <FindRoute+0x190>)
 8003a7c:	5d7f      	ldrb	r7, [r7, r5]
 8003a7e:	3701      	adds	r7, #1
 8003a80:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a82:	4e2e      	ldr	r6, [pc, #184]	; (8003b3c <FindRoute+0x190>)
 8003a84:	5cf6      	ldrb	r6, [r6, r3]
 8003a86:	42be      	cmp	r6, r7
 8003a88:	d9eb      	bls.n	8003a62 <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003a8a:	4e2c      	ldr	r6, [pc, #176]	; (8003b3c <FindRoute+0x190>)
 8003a8c:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003a8e:	4e2c      	ldr	r6, [pc, #176]	; (8003b40 <FindRoute+0x194>)
 8003a90:	54f4      	strb	r4, [r6, r3]
 8003a92:	e7e6      	b.n	8003a62 <FindRoute+0xb6>
 8003a94:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003a96:	a801      	add	r0, sp, #4
 8003a98:	f7ff ff76 	bl	8003988 <QnotEmpty>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d113      	bne.n	8003ac8 <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003aa0:	a901      	add	r1, sp, #4
 8003aa2:	4826      	ldr	r0, [pc, #152]	; (8003b3c <FindRoute+0x190>)
 8003aa4:	f7ff ff52 	bl	800394c <minArr>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003aac:	42b4      	cmp	r4, r6
 8003aae:	d0d4      	beq.n	8003a5a <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003ab0:	1e65      	subs	r5, r4, #1
 8003ab2:	ab01      	add	r3, sp, #4
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	555a      	strb	r2, [r3, r5]
 8003ab8:	2016      	movs	r0, #22
 8003aba:	4368      	muls	r0, r5
 8003abc:	1c81      	adds	r1, r0, #2
 8003abe:	4441      	add	r1, r8
 8003ac0:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	46b2      	mov	sl, r6
 8003ac6:	e7cf      	b.n	8003a68 <FindRoute+0xbc>
 8003ac8:	464d      	mov	r5, r9
 8003aca:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003acc:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <FindRoute+0x194>)
 8003ace:	191b      	adds	r3, r3, r4
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	d00e      	beq.n	8003af8 <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003ada:	4917      	ldr	r1, [pc, #92]	; (8003b38 <FindRoute+0x18c>)
 8003adc:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ade:	4e18      	ldr	r6, [pc, #96]	; (8003b40 <FindRoute+0x194>)
 8003ae0:	e000      	b.n	8003ae4 <FindRoute+0x138>
 8003ae2:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003ae4:	1c58      	adds	r0, r3, #1
 8003ae6:	4661      	mov	r1, ip
 8003ae8:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003aea:	18b3      	adds	r3, r6, r2
 8003aec:	3b01      	subs	r3, #1
 8003aee:	7819      	ldrb	r1, [r3, #0]
 8003af0:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003af2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d1f4      	bne.n	8003ae2 <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003af8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003afa:	490f      	ldr	r1, [pc, #60]	; (8003b38 <FindRoute+0x18c>)
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <FindRoute+0x190>)
 8003afe:	4453      	add	r3, sl
 8003b00:	001f      	movs	r7, r3
 8003b02:	3f01      	subs	r7, #1
 8003b04:	e003      	b.n	8003b0e <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003b06:	3001      	adds	r0, #1
 8003b08:	3502      	adds	r5, #2
 8003b0a:	2807      	cmp	r0, #7
 8003b0c:	d00b      	beq.n	8003b26 <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003b0e:	882b      	ldrh	r3, [r5, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f8      	beq.n	8003b06 <FindRoute+0x15a>
 8003b14:	783a      	ldrb	r2, [r7, #0]
 8003b16:	188a      	adds	r2, r1, r2
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	08db      	lsrs	r3, r3, #3
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d1f1      	bne.n	8003b06 <FindRoute+0x15a>
			return col;
 8003b22:	b2c0      	uxtb	r0, r0
 8003b24:	e000      	b.n	8003b28 <FindRoute+0x17c>
	return 0;
 8003b26:	2000      	movs	r0, #0
}
 8003b28:	b00f      	add	sp, #60	; 0x3c
 8003b2a:	bc3c      	pop	{r2, r3, r4, r5}
 8003b2c:	4690      	mov	r8, r2
 8003b2e:	4699      	mov	r9, r3
 8003b30:	46a2      	mov	sl, r4
 8003b32:	46ab      	mov	fp, r5
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	20006ba4 	.word	0x20006ba4
 8003b3c:	20001114 	.word	0x20001114
 8003b40:	20001130 	.word	0x20001130
 8003b44:	20000a78 	.word	0x20000a78
 8003b48:	2000001c 	.word	0x2000001c

08003b4c <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	0007      	movs	r7, r0
 8003b52:	000e      	movs	r6, r1
 8003b54:	9205      	str	r2, [sp, #20]
 8003b56:	001d      	movs	r5, r3
	myOutport =FindRoute(myID,dst);
 8003b58:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b5a:	7818      	ldrb	r0, [r3, #0]
 8003b5c:	f7ff ff26 	bl	80039ac <FindRoute>
 8003b60:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	d020      	beq.n	8003ba8 <remoteBootloaderUpdate+0x5c>
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b68:	781c      	ldrb	r4, [r3, #0]
 8003b6a:	42b4      	cmp	r4, r6
 8003b6c:	d05f      	beq.n	8003c2e <remoteBootloaderUpdate+0xe2>
	if(src == myID){
 8003b6e:	42bc      	cmp	r4, r7
 8003b70:	d034      	beq.n	8003bdc <remoteBootloaderUpdate+0x90>
	uint8_t myOutport =0, lastModule =0;
 8003b72:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003b74:	9805      	ldr	r0, [sp, #20]
 8003b76:	f7ff fdb9 	bl	80036ec <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003b7a:	9804      	ldr	r0, [sp, #16]
 8003b7c:	f7ff fdb6 	bl	80036ec <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	42a3      	cmp	r3, r4
 8003b86:	d046      	beq.n	8003c16 <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b8a:	7819      	ldrb	r1, [r3, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	9302      	str	r3, [sp, #8]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	3303      	adds	r3, #3
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	000b      	movs	r3, r1
 8003b9c:	9a04      	ldr	r2, [sp, #16]
 8003b9e:	9805      	ldr	r0, [sp, #20]
 8003ba0:	f005 fdb6 	bl	8009710 <StartScastDMAStream>
}
 8003ba4:	b007      	add	sp, #28
 8003ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(NumberOfHops(dst)== 1)
 8003ba8:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <remoteBootloaderUpdate+0xf0>)
 8003baa:	199b      	adds	r3, r3, r6
 8003bac:	3b01      	subs	r3, #1
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	2a01      	cmp	r2, #1
 8003bb2:	d010      	beq.n	8003bd6 <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <remoteBootloaderUpdate+0xf4>)
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	781c      	ldrb	r4, [r3, #0]
	if(src == myID){
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	42bb      	cmp	r3, r7
 8003bc2:	d1d7      	bne.n	8003b74 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003bc4:	f00a fbe0 	bl	800e388 <FreeRTOS_CLIGetOutputBuffer>
 8003bc8:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <remoteBootloaderUpdate+0xf8>)
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	0032      	movs	r2, r6
 8003bd0:	f010 fac2 	bl	8014158 <sprintf>
 8003bd4:	e00d      	b.n	8003bf2 <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003bd8:	781c      	ldrb	r4, [r3, #0]
 8003bda:	e7ef      	b.n	8003bbc <remoteBootloaderUpdate+0x70>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003bdc:	f00a fbd4 	bl	800e388 <FreeRTOS_CLIGetOutputBuffer>
 8003be0:	0007      	movs	r7, r0
	uint8_t myOutport =0, lastModule =0;
 8003be2:	2400      	movs	r4, #0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <remoteBootloaderUpdate+0xfc>)
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	002b      	movs	r3, r5
 8003bea:	0032      	movs	r2, r6
 8003bec:	0038      	movs	r0, r7
 8003bee:	f010 fab3 	bl	8014158 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <remoteBootloaderUpdate+0x100>)
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	0038      	movs	r0, r7
 8003bf8:	f010 face 	bl	8014198 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003bfc:	0038      	movs	r0, r7
 8003bfe:	f7fc fa8b 	bl	8000118 <strlen>
 8003c02:	b282      	uxth	r2, r0
 8003c04:	2332      	movs	r3, #50	; 0x32
 8003c06:	0039      	movs	r1, r7
 8003c08:	9805      	ldr	r0, [sp, #20]
 8003c0a:	f00a f9a3 	bl	800df54 <writePxITMutex>
		Delay_ms(100);
 8003c0e:	2064      	movs	r0, #100	; 0x64
 8003c10:	f00c fc10 	bl	8010434 <HAL_Delay>
 8003c14:	e7ae      	b.n	8003b74 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003c16:	9804      	ldr	r0, [sp, #16]
 8003c18:	f00a f952 	bl	800dec0 <GetUart>
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	f00a f9e9 	bl	800dff4 <SwapUartPins>
 8003c22:	e7b1      	b.n	8003b88 <remoteBootloaderUpdate+0x3c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c24:	f00a fbb0 	bl	800e388 <FreeRTOS_CLIGetOutputBuffer>
 8003c28:	0007      	movs	r7, r0
		myOutport =outport;
 8003c2a:	9504      	str	r5, [sp, #16]
 8003c2c:	e7da      	b.n	8003be4 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8003c2e:	42bc      	cmp	r4, r7
 8003c30:	d0f8      	beq.n	8003c24 <remoteBootloaderUpdate+0xd8>
		myOutport =outport;
 8003c32:	9504      	str	r5, [sp, #16]
 8003c34:	e79e      	b.n	8003b74 <remoteBootloaderUpdate+0x28>
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	20001076 	.word	0x20001076
 8003c3c:	20001114 	.word	0x20001114
 8003c40:	20006ba4 	.word	0x20006ba4
 8003c44:	20000078 	.word	0x20000078
 8003c48:	2000007c 	.word	0x2000007c
 8003c4c:	20000080 	.word	0x20000080

08003c50 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	46d6      	mov	lr, sl
 8003c54:	464f      	mov	r7, r9
 8003c56:	4646      	mov	r6, r8
 8003c58:	b5c0      	push	{r6, r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	0005      	movs	r5, r0
 8003c5e:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c60:	4c56      	ldr	r4, [pc, #344]	; (8003dbc <DisplayTopology+0x16c>)
 8003c62:	4b57      	ldr	r3, [pc, #348]	; (8003dc0 <DisplayTopology+0x170>)
 8003c64:	0022      	movs	r2, r4
 8003c66:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003c68:	c243      	stmia	r2!, {r0, r1, r6}
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	889b      	ldrh	r3, [r3, #4]
 8003c70:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c72:	0020      	movs	r0, r4
 8003c74:	f7fc fa50 	bl	8000118 <strlen>
 8003c78:	b282      	uxth	r2, r0
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	425b      	negs	r3, r3
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	3333      	adds	r3, #51	; 0x33
 8003c82:	0021      	movs	r1, r4
 8003c84:	0028      	movs	r0, r5
 8003c86:	f00a f93d 	bl	800df04 <writePxMutex>
 8003c8a:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003c8c:	4f4d      	ldr	r7, [pc, #308]	; (8003dc4 <DisplayTopology+0x174>)
 8003c8e:	4d4b      	ldr	r5, [pc, #300]	; (8003dbc <DisplayTopology+0x16c>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c90:	2601      	movs	r6, #1
 8003c92:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003c94:	0022      	movs	r2, r4
 8003c96:	0039      	movs	r1, r7
 8003c98:	0028      	movs	r0, r5
 8003c9a:	f010 fa5d 	bl	8014158 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c9e:	0028      	movs	r0, r5
 8003ca0:	f7fc fa3a 	bl	8000118 <strlen>
 8003ca4:	b282      	uxth	r2, r0
 8003ca6:	9600      	str	r6, [sp, #0]
 8003ca8:	2332      	movs	r3, #50	; 0x32
 8003caa:	0029      	movs	r1, r5
 8003cac:	9803      	ldr	r0, [sp, #12]
 8003cae:	f00a f929 	bl	800df04 <writePxMutex>
 8003cb2:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003cb4:	2c07      	cmp	r4, #7
 8003cb6:	d1ed      	bne.n	8003c94 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003cb8:	2301      	movs	r3, #1
 8003cba:	425b      	negs	r3, r3
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	3333      	adds	r3, #51	; 0x33
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	4941      	ldr	r1, [pc, #260]	; (8003dc8 <DisplayTopology+0x178>)
 8003cc4:	9803      	ldr	r0, [sp, #12]
 8003cc6:	f00a f91d 	bl	800df04 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <DisplayTopology+0x17c>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d065      	beq.n	8003d9e <DisplayTopology+0x14e>
 8003cd2:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cd4:	2701      	movs	r7, #1
 8003cd6:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003cd8:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <DisplayTopology+0x180>)
 8003cda:	4699      	mov	r9, r3
 8003cdc:	230e      	movs	r3, #14
 8003cde:	444b      	add	r3, r9
 8003ce0:	469a      	mov	sl, r3
 8003ce2:	e02a      	b.n	8003d3a <DisplayTopology+0xea>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce4:	2307      	movs	r3, #7
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	08d2      	lsrs	r2, r2, #3
 8003cea:	493a      	ldr	r1, [pc, #232]	; (8003dd4 <DisplayTopology+0x184>)
 8003cec:	4833      	ldr	r0, [pc, #204]	; (8003dbc <DisplayTopology+0x16c>)
 8003cee:	f010 fa33 	bl	8014158 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cf2:	4d32      	ldr	r5, [pc, #200]	; (8003dbc <DisplayTopology+0x16c>)
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	f7fc fa0f 	bl	8000118 <strlen>
 8003cfa:	b282      	uxth	r2, r0
 8003cfc:	9700      	str	r7, [sp, #0]
 8003cfe:	2332      	movs	r3, #50	; 0x32
 8003d00:	0029      	movs	r1, r5
 8003d02:	9803      	ldr	r0, [sp, #12]
 8003d04:	f00a f8fe 	bl	800df04 <writePxMutex>
 8003d08:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d0a:	42b4      	cmp	r4, r6
 8003d0c:	d007      	beq.n	8003d1e <DisplayTopology+0xce>
			if(!array[row][col])
 8003d0e:	8822      	ldrh	r2, [r4, #0]
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	d1e7      	bne.n	8003ce4 <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003d14:	4930      	ldr	r1, [pc, #192]	; (8003dd8 <DisplayTopology+0x188>)
 8003d16:	4829      	ldr	r0, [pc, #164]	; (8003dbc <DisplayTopology+0x16c>)
 8003d18:	f010 fa1e 	bl	8014158 <sprintf>
 8003d1c:	e7e9      	b.n	8003cf2 <DisplayTopology+0xa2>
 8003d1e:	4646      	mov	r6, r8
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d20:	9700      	str	r7, [sp, #0]
 8003d22:	2332      	movs	r3, #50	; 0x32
 8003d24:	2202      	movs	r2, #2
 8003d26:	492d      	ldr	r1, [pc, #180]	; (8003ddc <DisplayTopology+0x18c>)
 8003d28:	9803      	ldr	r0, [sp, #12]
 8003d2a:	f00a f8eb 	bl	800df04 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003d2e:	3601      	adds	r6, #1
 8003d30:	b2f6      	uxtb	r6, r6
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <DisplayTopology+0x17c>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	42b3      	cmp	r3, r6
 8003d38:	d931      	bls.n	8003d9e <DisplayTopology+0x14e>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d3a:	1c72      	adds	r2, r6, #1
 8003d3c:	4c1f      	ldr	r4, [pc, #124]	; (8003dbc <DisplayTopology+0x16c>)
 8003d3e:	4928      	ldr	r1, [pc, #160]	; (8003de0 <DisplayTopology+0x190>)
 8003d40:	0020      	movs	r0, r4
 8003d42:	f010 fa09 	bl	8014158 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d46:	0020      	movs	r0, r4
 8003d48:	f7fc f9e6 	bl	8000118 <strlen>
 8003d4c:	b282      	uxth	r2, r0
 8003d4e:	9700      	str	r7, [sp, #0]
 8003d50:	2332      	movs	r3, #50	; 0x32
 8003d52:	0021      	movs	r1, r4
 8003d54:	9803      	ldr	r0, [sp, #12]
 8003d56:	f00a f8d5 	bl	800df04 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d5a:	2516      	movs	r5, #22
 8003d5c:	4375      	muls	r5, r6
 8003d5e:	464b      	mov	r3, r9
 8003d60:	5aeb      	ldrh	r3, [r5, r3]
 8003d62:	0059      	lsls	r1, r3, #1
 8003d64:	18c9      	adds	r1, r1, r3
 8003d66:	0049      	lsls	r1, r1, #1
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <DisplayTopology+0x194>)
 8003d6a:	18c9      	adds	r1, r1, r3
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	0020      	movs	r0, r4
 8003d70:	f010 fa47 	bl	8014202 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d74:	9700      	str	r7, [sp, #0]
 8003d76:	2332      	movs	r3, #50	; 0x32
 8003d78:	2205      	movs	r2, #5
 8003d7a:	0021      	movs	r1, r4
 8003d7c:	9c03      	ldr	r4, [sp, #12]
 8003d7e:	0020      	movs	r0, r4
 8003d80:	f00a f8c0 	bl	800df04 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d84:	9700      	str	r7, [sp, #0]
 8003d86:	2332      	movs	r3, #50	; 0x32
 8003d88:	2201      	movs	r2, #1
 8003d8a:	4917      	ldr	r1, [pc, #92]	; (8003de8 <DisplayTopology+0x198>)
 8003d8c:	0020      	movs	r0, r4
 8003d8e:	f00a f8b9 	bl	800df04 <writePxMutex>
 8003d92:	1cac      	adds	r4, r5, #2
 8003d94:	444c      	add	r4, r9
 8003d96:	4455      	add	r5, sl
				sprintf(pcUserMessage,"%d\t",0);
 8003d98:	46b0      	mov	r8, r6
 8003d9a:	002e      	movs	r6, r5
 8003d9c:	e7b7      	b.n	8003d0e <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003d9e:	2301      	movs	r3, #1
 8003da0:	425b      	negs	r3, r3
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	3333      	adds	r3, #51	; 0x33
 8003da6:	2201      	movs	r2, #1
 8003da8:	4910      	ldr	r1, [pc, #64]	; (8003dec <DisplayTopology+0x19c>)
 8003daa:	9803      	ldr	r0, [sp, #12]
 8003dac:	f00a f8aa 	bl	800df04 <writePxMutex>
}
 8003db0:	b004      	add	sp, #16
 8003db2:	bc1c      	pop	{r2, r3, r4}
 8003db4:	4690      	mov	r8, r2
 8003db6:	4699      	mov	r9, r3
 8003db8:	46a2      	mov	sl, r4
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbc:	200010a8 	.word	0x200010a8
 8003dc0:	0801887c 	.word	0x0801887c
 8003dc4:	08018890 	.word	0x08018890
 8003dc8:	08019d14 	.word	0x08019d14
 8003dcc:	2000001c 	.word	0x2000001c
 8003dd0:	20000a78 	.word	0x20000a78
 8003dd4:	080188a8 	.word	0x080188a8
 8003dd8:	080188a4 	.word	0x080188a4
 8003ddc:	08018724 	.word	0x08018724
 8003de0:	08018898 	.word	0x08018898
 8003de4:	080188e4 	.word	0x080188e4
 8003de8:	0801888c 	.word	0x0801888c
 8003dec:	08019ed8 	.word	0x08019ed8

08003df0 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df2:	46c6      	mov	lr, r8
 8003df4:	b500      	push	{lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	0005      	movs	r5, r0
 8003dfa:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003dfc:	4c30      	ldr	r4, [pc, #192]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <DisplayPortsDir+0xd4>)
 8003e00:	0022      	movs	r2, r4
 8003e02:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e04:	c243      	stmia	r2!, {r0, r1, r6}
 8003e06:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e08:	c243      	stmia	r2!, {r0, r1, r6}
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e0e:	0020      	movs	r0, r4
 8003e10:	f7fc f982 	bl	8000118 <strlen>
 8003e14:	b282      	uxth	r2, r0
 8003e16:	2301      	movs	r3, #1
 8003e18:	425b      	negs	r3, r3
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	3333      	adds	r3, #51	; 0x33
 8003e1e:	0021      	movs	r1, r4
 8003e20:	0028      	movs	r0, r5
 8003e22:	f00a f86f 	bl	800df04 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e26:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <DisplayPortsDir+0xd8>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02c      	beq.n	8003e8c <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e32:	4e26      	ldr	r6, [pc, #152]	; (8003ecc <DisplayPortsDir+0xdc>)
 8003e34:	e025      	b.n	8003e82 <DisplayPortsDir+0x92>
 8003e36:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e38:	2c0a      	cmp	r4, #10
 8003e3a:	d01a      	beq.n	8003e72 <DisplayPortsDir+0x82>
 8003e3c:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e3e:	5ba9      	ldrh	r1, [r5, r6]
 8003e40:	2280      	movs	r2, #128	; 0x80
 8003e42:	0212      	lsls	r2, r2, #8
 8003e44:	411a      	asrs	r2, r3
 8003e46:	420a      	tst	r2, r1
 8003e48:	d0f5      	beq.n	8003e36 <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e4a:	4f1d      	ldr	r7, [pc, #116]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003e4c:	0023      	movs	r3, r4
 8003e4e:	4642      	mov	r2, r8
 8003e50:	491f      	ldr	r1, [pc, #124]	; (8003ed0 <DisplayPortsDir+0xe0>)
 8003e52:	0038      	movs	r0, r7
 8003e54:	f010 f980 	bl	8014158 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003e58:	0038      	movs	r0, r7
 8003e5a:	f7fc f95d 	bl	8000118 <strlen>
 8003e5e:	b282      	uxth	r2, r0
 8003e60:	2301      	movs	r3, #1
 8003e62:	425b      	negs	r3, r3
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	3333      	adds	r3, #51	; 0x33
 8003e68:	0039      	movs	r1, r7
 8003e6a:	9803      	ldr	r0, [sp, #12]
 8003e6c:	f00a f84a 	bl	800df04 <writePxMutex>
 8003e70:	e7e1      	b.n	8003e36 <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8003e72:	4643      	mov	r3, r8
 8003e74:	3301      	adds	r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	4698      	mov	r8, r3
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <DisplayPortsDir+0xd8>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	4543      	cmp	r3, r8
 8003e80:	d304      	bcc.n	8003e8c <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8003e82:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e84:	4642      	mov	r2, r8
 8003e86:	1e55      	subs	r5, r2, #1
 8003e88:	006d      	lsls	r5, r5, #1
 8003e8a:	e7d7      	b.n	8003e3c <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003e8c:	4c0c      	ldr	r4, [pc, #48]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <DisplayPortsDir+0xe4>)
 8003e90:	0022      	movs	r2, r4
 8003e92:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e94:	c223      	stmia	r2!, {r0, r1, r5}
 8003e96:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e98:	c223      	stmia	r2!, {r0, r1, r5}
 8003e9a:	cb03      	ldmia	r3!, {r0, r1}
 8003e9c:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e9e:	0020      	movs	r0, r4
 8003ea0:	f7fc f93a 	bl	8000118 <strlen>
 8003ea4:	b282      	uxth	r2, r0
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	3333      	adds	r3, #51	; 0x33
 8003eae:	0021      	movs	r1, r4
 8003eb0:	9803      	ldr	r0, [sp, #12]
 8003eb2:	f00a f827 	bl	800df04 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bc04      	pop	{r2}
 8003eba:	4690      	mov	r8, r2
 8003ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	200010a8 	.word	0x200010a8
 8003ec4:	0801882c 	.word	0x0801882c
 8003ec8:	2000001c 	.word	0x2000001c
 8003ecc:	20006f1c 	.word	0x20006f1c
 8003ed0:	08018848 	.word	0x08018848
 8003ed4:	0801885c 	.word	0x0801885c

08003ed8 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	46d6      	mov	lr, sl
 8003edc:	b500      	push	{lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003ee2:	f00a fa51 	bl	800e388 <FreeRTOS_CLIGetOutputBuffer>
 8003ee6:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8003ee8:	2300      	movs	r3, #0
 8003eea:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003eec:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <DisplayModuleStatus+0x24c>)
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	4d8d      	ldr	r5, [pc, #564]	; (8004128 <DisplayModuleStatus+0x250>)
 8003ef2:	498e      	ldr	r1, [pc, #568]	; (800412c <DisplayModuleStatus+0x254>)
 8003ef4:	0028      	movs	r0, r5
 8003ef6:	f010 f92f 	bl	8014158 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003efa:	0029      	movs	r1, r5
 8003efc:	0020      	movs	r0, r4
 8003efe:	f010 f94b 	bl	8014198 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f02:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <DisplayModuleStatus+0x258>)
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	498b      	ldr	r1, [pc, #556]	; (8004134 <DisplayModuleStatus+0x25c>)
 8003f08:	0028      	movs	r0, r5
 8003f0a:	f010 f925 	bl	8014158 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f0e:	0029      	movs	r1, r5
 8003f10:	0020      	movs	r0, r4
 8003f12:	f010 f941 	bl	8014198 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f16:	2305      	movs	r3, #5
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	3b03      	subs	r3, #3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4986      	ldr	r1, [pc, #536]	; (8004138 <DisplayModuleStatus+0x260>)
 8003f20:	0028      	movs	r0, r5
 8003f22:	f010 f919 	bl	8014158 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f26:	0029      	movs	r1, r5
 8003f28:	0020      	movs	r0, r4
 8003f2a:	f010 f935 	bl	8014198 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f2e:	4a83      	ldr	r2, [pc, #524]	; (800413c <DisplayModuleStatus+0x264>)
 8003f30:	4983      	ldr	r1, [pc, #524]	; (8004140 <DisplayModuleStatus+0x268>)
 8003f32:	0028      	movs	r0, r5
 8003f34:	f010 f910 	bl	8014158 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f38:	0029      	movs	r1, r5
 8003f3a:	0020      	movs	r0, r4
 8003f3c:	f010 f92c 	bl	8014198 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003f40:	4a80      	ldr	r2, [pc, #512]	; (8004144 <DisplayModuleStatus+0x26c>)
 8003f42:	4981      	ldr	r1, [pc, #516]	; (8004148 <DisplayModuleStatus+0x270>)
 8003f44:	0028      	movs	r0, r5
 8003f46:	f010 f907 	bl	8014158 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f4a:	0029      	movs	r1, r5
 8003f4c:	0020      	movs	r0, r4
 8003f4e:	f010 f923 	bl	8014198 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f52:	4b7e      	ldr	r3, [pc, #504]	; (800414c <DisplayModuleStatus+0x274>)
 8003f54:	002a      	movs	r2, r5
 8003f56:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f58:	c243      	stmia	r2!, {r0, r1, r6}
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	8899      	ldrh	r1, [r3, #4]
 8003f60:	8091      	strh	r1, [r2, #4]
 8003f62:	799b      	ldrb	r3, [r3, #6]
 8003f64:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f66:	0029      	movs	r1, r5
 8003f68:	0020      	movs	r0, r4
 8003f6a:	f010 f915 	bl	8014198 <strcat>
 8003f6e:	2701      	movs	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8003f70:	4d6d      	ldr	r5, [pc, #436]	; (8004128 <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003f72:	4b77      	ldr	r3, [pc, #476]	; (8004150 <DisplayModuleStatus+0x278>)
 8003f74:	469a      	mov	sl, r3
 8003f76:	e00e      	b.n	8003f96 <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8003f78:	4b6b      	ldr	r3, [pc, #428]	; (8004128 <DisplayModuleStatus+0x250>)
 8003f7a:	4a76      	ldr	r2, [pc, #472]	; (8004154 <DisplayModuleStatus+0x27c>)
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	6019      	str	r1, [r3, #0]
 8003f80:	8891      	ldrh	r1, [r2, #4]
 8003f82:	8099      	strh	r1, [r3, #4]
 8003f84:	7992      	ldrb	r2, [r2, #6]
 8003f86:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003f88:	4967      	ldr	r1, [pc, #412]	; (8004128 <DisplayModuleStatus+0x250>)
 8003f8a:	0020      	movs	r0, r4
 8003f8c:	f010 f904 	bl	8014198 <strcat>
 8003f90:	3701      	adds	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f92:	2f07      	cmp	r7, #7
 8003f94:	d039      	beq.n	800400a <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8003f96:	003a      	movs	r2, r7
 8003f98:	496f      	ldr	r1, [pc, #444]	; (8004158 <DisplayModuleStatus+0x280>)
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	f010 f8dc 	bl	8014158 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003fa0:	0029      	movs	r1, r5
 8003fa2:	0020      	movs	r0, r4
 8003fa4:	f010 f8f8 	bl	8014198 <strcat>
		switch(portStatus[i]){
 8003fa8:	4653      	mov	r3, sl
 8003faa:	5cfb      	ldrb	r3, [r7, r3]
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d8eb      	bhi.n	8003f88 <DisplayModuleStatus+0xb0>
 8003fb0:	4653      	mov	r3, sl
 8003fb2:	5cfb      	ldrb	r3, [r7, r3]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a69      	ldr	r2, [pc, #420]	; (800415c <DisplayModuleStatus+0x284>)
 8003fb8:	58d3      	ldr	r3, [r2, r3]
 8003fba:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8003fbc:	495a      	ldr	r1, [pc, #360]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fbe:	4b68      	ldr	r3, [pc, #416]	; (8004160 <DisplayModuleStatus+0x288>)
 8003fc0:	000a      	movs	r2, r1
 8003fc2:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fc4:	c243      	stmia	r2!, {r0, r1, r6}
 8003fc6:	cb03      	ldmia	r3!, {r0, r1}
 8003fc8:	c203      	stmia	r2!, {r0, r1}
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	7013      	strb	r3, [r2, #0]
				break;
 8003fce:	e7db      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8003fd0:	4a55      	ldr	r2, [pc, #340]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fd2:	4b64      	ldr	r3, [pc, #400]	; (8004164 <DisplayModuleStatus+0x28c>)
 8003fd4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fd6:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 8003fd8:	e7d6      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003fda:	4953      	ldr	r1, [pc, #332]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fdc:	4b62      	ldr	r3, [pc, #392]	; (8004168 <DisplayModuleStatus+0x290>)
 8003fde:	000a      	movs	r2, r1
 8003fe0:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fe2:	c243      	stmia	r2!, {r0, r1, r6}
 8003fe4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fe6:	c243      	stmia	r2!, {r0, r1, r6}
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	8013      	strh	r3, [r2, #0]
				break;
 8003fec:	e7cc      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003fee:	494e      	ldr	r1, [pc, #312]	; (8004128 <DisplayModuleStatus+0x250>)
 8003ff0:	4b5e      	ldr	r3, [pc, #376]	; (800416c <DisplayModuleStatus+0x294>)
 8003ff2:	000a      	movs	r2, r1
 8003ff4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ff6:	c243      	stmia	r2!, {r0, r1, r6}
 8003ff8:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ffa:	c243      	stmia	r2!, {r0, r1, r6}
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	6011      	str	r1, [r2, #0]
 8004000:	8899      	ldrh	r1, [r3, #4]
 8004002:	8091      	strh	r1, [r2, #4]
 8004004:	799b      	ldrb	r3, [r3, #6]
 8004006:	7193      	strb	r3, [r2, #6]
				break;
 8004008:	e7be      	b.n	8003f88 <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800400a:	4947      	ldr	r1, [pc, #284]	; (8004128 <DisplayModuleStatus+0x250>)
 800400c:	4b58      	ldr	r3, [pc, #352]	; (8004170 <DisplayModuleStatus+0x298>)
 800400e:	000a      	movs	r2, r1
 8004010:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004012:	c261      	stmia	r2!, {r0, r5, r6}
 8004014:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004016:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8004018:	0020      	movs	r0, r4
 800401a:	f010 f8bd 	bl	8014198 <strcat>
 800401e:	4f55      	ldr	r7, [pc, #340]	; (8004174 <DisplayModuleStatus+0x29c>)
 8004020:	2601      	movs	r6, #1
 8004022:	e00d      	b.n	8004040 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004024:	4d40      	ldr	r5, [pc, #256]	; (8004128 <DisplayModuleStatus+0x250>)
 8004026:	0032      	movs	r2, r6
 8004028:	4953      	ldr	r1, [pc, #332]	; (8004178 <DisplayModuleStatus+0x2a0>)
 800402a:	0028      	movs	r0, r5
 800402c:	f010 f894 	bl	8014158 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004030:	0029      	movs	r1, r5
 8004032:	0020      	movs	r0, r4
 8004034:	f010 f8b0 	bl	8014198 <strcat>
 8004038:	3601      	adds	r6, #1
 800403a:	3738      	adds	r7, #56	; 0x38
	for(char i =1; i <= 6; i++){
 800403c:	2e07      	cmp	r6, #7
 800403e:	d018      	beq.n	8004072 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ee      	beq.n	8004024 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004048:	f008 f8a2 	bl	800c190 <GetPort>
 800404c:	0005      	movs	r5, r0
 800404e:	00b3      	lsls	r3, r6, #2
 8004050:	3b04      	subs	r3, #4
 8004052:	4a4a      	ldr	r2, [pc, #296]	; (800417c <DisplayModuleStatus+0x2a4>)
 8004054:	58d0      	ldr	r0, [r2, r3]
 8004056:	f008 f89b 	bl	800c190 <GetPort>
 800405a:	9000      	str	r0, [sp, #0]
 800405c:	002b      	movs	r3, r5
 800405e:	0032      	movs	r2, r6
 8004060:	4947      	ldr	r1, [pc, #284]	; (8004180 <DisplayModuleStatus+0x2a8>)
 8004062:	4831      	ldr	r0, [pc, #196]	; (8004128 <DisplayModuleStatus+0x250>)
 8004064:	f010 f878 	bl	8014158 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004068:	492f      	ldr	r1, [pc, #188]	; (8004128 <DisplayModuleStatus+0x250>)
 800406a:	0020      	movs	r0, r4
 800406c:	f010 f894 	bl	8014198 <strcat>
 8004070:	e7e2      	b.n	8004038 <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004072:	0020      	movs	r0, r4
 8004074:	f7fc f850 	bl	8000118 <strlen>
 8004078:	1820      	adds	r0, r4, r0
 800407a:	2203      	movs	r2, #3
 800407c:	4941      	ldr	r1, [pc, #260]	; (8004184 <DisplayModuleStatus+0x2ac>)
 800407e:	f00f fe68 	bl	8013d52 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004082:	0020      	movs	r0, r4
 8004084:	f7fc f848 	bl	8000118 <strlen>
 8004088:	1820      	adds	r0, r4, r0
 800408a:	221d      	movs	r2, #29
 800408c:	493e      	ldr	r1, [pc, #248]	; (8004188 <DisplayModuleStatus+0x2b0>)
 800408e:	f00f fe60 	bl	8013d52 <memcpy>
	temp =strlen((char* )pcOutputString);
 8004092:	0020      	movs	r0, r4
 8004094:	f7fc f840 	bl	8000118 <strlen>
 8004098:	4682      	mov	sl, r0
 800409a:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800409c:	4f3b      	ldr	r7, [pc, #236]	; (800418c <DisplayModuleStatus+0x2b4>)
 800409e:	4e21      	ldr	r6, [pc, #132]	; (8004124 <DisplayModuleStatus+0x24c>)
 80040a0:	e002      	b.n	80040a8 <DisplayModuleStatus+0x1d0>
 80040a2:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040a4:	2d06      	cmp	r5, #6
 80040a6:	d013      	beq.n	80040d0 <DisplayModuleStatus+0x1f8>
 80040a8:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040aa:	7833      	ldrb	r3, [r6, #0]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	5bd9      	ldrh	r1, [r3, r7]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	4113      	asrs	r3, r2
 80040b8:	420b      	tst	r3, r1
 80040ba:	d0f2      	beq.n	80040a2 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 80040bc:	002a      	movs	r2, r5
 80040be:	4934      	ldr	r1, [pc, #208]	; (8004190 <DisplayModuleStatus+0x2b8>)
 80040c0:	4819      	ldr	r0, [pc, #100]	; (8004128 <DisplayModuleStatus+0x250>)
 80040c2:	f010 f849 	bl	8014158 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040c6:	4918      	ldr	r1, [pc, #96]	; (8004128 <DisplayModuleStatus+0x250>)
 80040c8:	0020      	movs	r0, r4
 80040ca:	f010 f865 	bl	8014198 <strcat>
 80040ce:	e7e8      	b.n	80040a2 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80040d0:	0020      	movs	r0, r4
 80040d2:	f7fc f821 	bl	8000118 <strlen>
 80040d6:	4653      	mov	r3, sl
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	4298      	cmp	r0, r3
 80040de:	d00e      	beq.n	80040fe <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80040e0:	0020      	movs	r0, r4
 80040e2:	f7fc f819 	bl	8000118 <strlen>
 80040e6:	1820      	adds	r0, r4, r0
 80040e8:	2203      	movs	r2, #3
 80040ea:	4926      	ldr	r1, [pc, #152]	; (8004184 <DisplayModuleStatus+0x2ac>)
 80040ec:	f00f fe31 	bl	8013d52 <memcpy>
	
	/* Display output */
	if(port)
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80040f6:	b004      	add	sp, #16
 80040f8:	bc04      	pop	{r2}
 80040fa:	4692      	mov	sl, r2
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 80040fe:	1820      	adds	r0, r4, r0
 8004100:	2205      	movs	r2, #5
 8004102:	4924      	ldr	r1, [pc, #144]	; (8004194 <DisplayModuleStatus+0x2bc>)
 8004104:	f00f fe25 	bl	8013d52 <memcpy>
 8004108:	e7ea      	b.n	80040e0 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800410a:	0020      	movs	r0, r4
 800410c:	f7fc f804 	bl	8000118 <strlen>
 8004110:	b282      	uxth	r2, r0
 8004112:	2301      	movs	r3, #1
 8004114:	425b      	negs	r3, r3
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	3333      	adds	r3, #51	; 0x33
 800411a:	0021      	movs	r1, r4
 800411c:	9803      	ldr	r0, [sp, #12]
 800411e:	f009 fef1 	bl	800df04 <writePxMutex>
}
 8004122:	e7e8      	b.n	80040f6 <DisplayModuleStatus+0x21e>
 8004124:	20001076 	.word	0x20001076
 8004128:	200010a8 	.word	0x200010a8
 800412c:	08018670 	.word	0x08018670
 8004130:	20000a77 	.word	0x20000a77
 8004134:	0801868c 	.word	0x0801868c
 8004138:	080186a8 	.word	0x080186a8
 800413c:	080186c8 	.word	0x080186c8
 8004140:	080186d4 	.word	0x080186d4
 8004144:	080186ec 	.word	0x080186ec
 8004148:	080186f8 	.word	0x080186f8
 800414c:	08018714 	.word	0x08018714
 8004150:	200010f8 	.word	0x200010f8
 8004154:	08018730 	.word	0x08018730
 8004158:	08018728 	.word	0x08018728
 800415c:	0801864c 	.word	0x0801864c
 8004160:	08018738 	.word	0x08018738
 8004164:	08018750 	.word	0x08018750
 8004168:	0801875c 	.word	0x0801875c
 800416c:	08018778 	.word	0x08018778
 8004170:	08018798 	.word	0x08018798
 8004174:	20001a70 	.word	0x20001a70
 8004178:	080187b0 	.word	0x080187b0
 800417c:	200014a8 	.word	0x200014a8
 8004180:	080187cc 	.word	0x080187cc
 8004184:	08018724 	.word	0x08018724
 8004188:	080187fc 	.word	0x080187fc
 800418c:	20006f1c 	.word	0x20006f1c
 8004190:	0801881c 	.word	0x0801881c
 8004194:	08018824 	.word	0x08018824

08004198 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	46c6      	mov	lr, r8
 800419c:	b500      	push	{lr}
 800419e:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80041a0:	4929      	ldr	r1, [pc, #164]	; (8004248 <GetID+0xb0>)
 80041a2:	f7fb ffaf 	bl	8000104 <strcmp>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d010      	beq.n	80041cc <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 80041aa:	4928      	ldr	r1, [pc, #160]	; (800424c <GetID+0xb4>)
 80041ac:	0028      	movs	r0, r5
 80041ae:	f7fb ffa9 	bl	8000104 <strcmp>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d045      	beq.n	8004242 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80041b6:	782b      	ldrb	r3, [r5, #0]
 80041b8:	4698      	mov	r8, r3
 80041ba:	2b23      	cmp	r3, #35	; 0x23
 80041bc:	d00b      	beq.n	80041d6 <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <GetID+0xb8>)
 80041c0:	781f      	ldrb	r7, [r3, #0]
 80041c2:	2f00      	cmp	r7, #0
 80041c4:	d02a      	beq.n	800421c <GetID+0x84>
 80041c6:	4e23      	ldr	r6, [pc, #140]	; (8004254 <GetID+0xbc>)
 80041c8:	2400      	movs	r4, #0
 80041ca:	e01c      	b.n	8004206 <GetID+0x6e>
		return myID;
 80041cc:	4b22      	ldr	r3, [pc, #136]	; (8004258 <GetID+0xc0>)
 80041ce:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 80041d0:	bc04      	pop	{r2}
 80041d2:	4690      	mov	r8, r2
 80041d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 80041d6:	1c68      	adds	r0, r5, #1
 80041d8:	f00f fb31 	bl	801383e <atol>
 80041dc:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <GetID+0x52>
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <GetID+0xb8>)
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d206      	bcs.n	80041f8 <GetID+0x60>
		else if(id == myID)
 80041ea:	4a1b      	ldr	r2, [pc, #108]	; (8004258 <GetID+0xc0>)
 80041ec:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 80041ee:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d1ed      	bne.n	80041d0 <GetID+0x38>
			return myID;
 80041f4:	b210      	sxth	r0, r2
 80041f6:	e7eb      	b.n	80041d0 <GetID+0x38>
			return id;
 80041f8:	b218      	sxth	r0, r3
 80041fa:	e7e9      	b.n	80041d0 <GetID+0x38>
		for(i =0; i < N; i++){
 80041fc:	3401      	adds	r4, #1
 80041fe:	b2e4      	uxtb	r4, r4
 8004200:	360a      	adds	r6, #10
 8004202:	42bc      	cmp	r4, r7
 8004204:	d00a      	beq.n	800421c <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004206:	0031      	movs	r1, r6
 8004208:	0028      	movs	r0, r5
 800420a:	f7fb ff7b 	bl	8000104 <strcmp>
 800420e:	2800      	cmp	r0, #0
 8004210:	d1f4      	bne.n	80041fc <GetID+0x64>
 8004212:	4643      	mov	r3, r8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f1      	beq.n	80041fc <GetID+0x64>
				return (i);
 8004218:	b220      	sxth	r0, r4
 800421a:	e7d9      	b.n	80041d0 <GetID+0x38>
 800421c:	4f0f      	ldr	r7, [pc, #60]	; (800425c <GetID+0xc4>)
		for(i =0; i < N; i++){
 800421e:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 8004220:	0039      	movs	r1, r7
 8004222:	0028      	movs	r0, r5
 8004224:	f7fb ff6e 	bl	8000104 <strcmp>
 8004228:	2800      	cmp	r0, #0
 800422a:	d005      	beq.n	8004238 <GetID+0xa0>
 800422c:	3601      	adds	r6, #1
 800422e:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004230:	2e0a      	cmp	r6, #10
 8004232:	d1f5      	bne.n	8004220 <GetID+0x88>
		return BOS_ERR_WrongName;
 8004234:	2064      	movs	r0, #100	; 0x64
 8004236:	e7cb      	b.n	80041d0 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 8004238:	0234      	lsls	r4, r6, #8
 800423a:	20fe      	movs	r0, #254	; 0xfe
 800423c:	4320      	orrs	r0, r4
 800423e:	b200      	sxth	r0, r0
 8004240:	e7c6      	b.n	80041d0 <GetID+0x38>
		return BOS_BROADCAST;
 8004242:	20ff      	movs	r0, #255	; 0xff
 8004244:	e7c4      	b.n	80041d0 <GetID+0x38>
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	080188b0 	.word	0x080188b0
 800424c:	080188b4 	.word	0x080188b4
 8004250:	2000001c 	.word	0x2000001c
 8004254:	20000f68 	.word	0x20000f68
 8004258:	20001076 	.word	0x20001076
 800425c:	20000e5c 	.word	0x20000e5c

08004260 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	b083      	sub	sp, #12
 8004264:	9001      	str	r0, [sp, #4]
 8004266:	000d      	movs	r5, r1
 8004268:	4c2a      	ldr	r4, [pc, #168]	; (8004314 <NameModule+0xb4>)
 800426a:	0027      	movs	r7, r4
 800426c:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800426e:	0021      	movs	r1, r4
 8004270:	0028      	movs	r0, r5
 8004272:	f7fb ff47 	bl	8000104 <strcmp>
 8004276:	2800      	cmp	r0, #0
 8004278:	d043      	beq.n	8004302 <NameModule+0xa2>
 800427a:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800427c:	42bc      	cmp	r4, r7
 800427e:	d1f6      	bne.n	800426e <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <NameModule+0xb8>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d90f      	bls.n	80042a8 <NameModule+0x48>
 8004288:	4c24      	ldr	r4, [pc, #144]	; (800431c <NameModule+0xbc>)
 800428a:	009f      	lsls	r7, r3, #2
 800428c:	18ff      	adds	r7, r7, r3
 800428e:	007f      	lsls	r7, r7, #1
 8004290:	0023      	movs	r3, r4
 8004292:	3b0a      	subs	r3, #10
 8004294:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 8004296:	0021      	movs	r1, r4
 8004298:	0028      	movs	r0, r5
 800429a:	f7fb ff33 	bl	8000104 <strcmp>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d031      	beq.n	8004306 <NameModule+0xa6>
 80042a2:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 80042a4:	42bc      	cmp	r4, r7
 80042a6:	d1f6      	bne.n	8004296 <NameModule+0x36>
 80042a8:	4c1d      	ldr	r4, [pc, #116]	; (8004320 <NameModule+0xc0>)
 80042aa:	0027      	movs	r7, r4
 80042ac:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 80042ae:	0021      	movs	r1, r4
 80042b0:	0028      	movs	r0, r5
 80042b2:	f7fb ff27 	bl	8000104 <strcmp>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d028      	beq.n	800430c <NameModule+0xac>
 80042ba:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 80042bc:	42bc      	cmp	r4, r7
 80042be:	d1f6      	bne.n	80042ae <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80042c0:	4c18      	ldr	r4, [pc, #96]	; (8004324 <NameModule+0xc4>)
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <NameModule+0xc8>)
 80042c4:	601c      	str	r4, [r3, #0]
 80042c6:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80042cc:	0038      	movs	r0, r7
 80042ce:	f7fb ff23 	bl	8000118 <strlen>
 80042d2:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80042d4:	0039      	movs	r1, r7
 80042d6:	0028      	movs	r0, r5
 80042d8:	f00f ff82 	bl	80141e0 <strncmp>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d017      	beq.n	8004310 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80042e0:	6864      	ldr	r4, [r4, #4]
 80042e2:	6034      	str	r4, [r6, #0]
 80042e4:	2c00      	cmp	r4, #0
 80042e6:	d1ef      	bne.n	80042c8 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	0098      	lsls	r0, r3, #2
 80042ec:	469c      	mov	ip, r3
 80042ee:	4460      	add	r0, ip
 80042f0:	0040      	lsls	r0, r0, #1
 80042f2:	4e0e      	ldr	r6, [pc, #56]	; (800432c <NameModule+0xcc>)
 80042f4:	1980      	adds	r0, r0, r6
 80042f6:	0029      	movs	r1, r5
 80042f8:	f00f ff6a 	bl	80141d0 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80042fc:	f7ff f8a6 	bl	800344c <SaveEEalias>
	
	return result;
 8004300:	e002      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 8004302:	2006      	movs	r0, #6
 8004304:	e000      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 8004306:	2007      	movs	r0, #7
}
 8004308:	b003      	add	sp, #12
 800430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 800430c:	2007      	movs	r0, #7
 800430e:	e7fb      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8004310:	2008      	movs	r0, #8
 8004312:	e7f9      	b.n	8004308 <NameModule+0xa8>
 8004314:	08018660 	.word	0x08018660
 8004318:	2000001c 	.word	0x2000001c
 800431c:	20000f72 	.word	0x20000f72
 8004320:	20000e5c 	.word	0x20000e5c
 8004324:	20000098 	.word	0x20000098
 8004328:	20001100 	.word	0x20001100
 800432c:	20000f68 	.word	0x20000f68

08004330 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	46c6      	mov	lr, r8
 8004334:	b500      	push	{lr}
 8004336:	0007      	movs	r7, r0
 8004338:	000e      	movs	r6, r1
 800433a:	4d3a      	ldr	r5, [pc, #232]	; (8004424 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 800433c:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800433e:	0029      	movs	r1, r5
 8004340:	0030      	movs	r0, r6
 8004342:	f7fb fedf 	bl	8000104 <strcmp>
 8004346:	2800      	cmp	r0, #0
 8004348:	d050      	beq.n	80043ec <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 800434a:	3401      	adds	r4, #1
 800434c:	350a      	adds	r5, #10
 800434e:	2c0a      	cmp	r4, #10
 8004350:	d1f5      	bne.n	800433e <AddModuleToGroup+0xe>
 8004352:	4c35      	ldr	r4, [pc, #212]	; (8004428 <AddModuleToGroup+0xf8>)
 8004354:	0025      	movs	r5, r4
 8004356:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004358:	0021      	movs	r1, r4
 800435a:	0030      	movs	r0, r6
 800435c:	f7fb fed2 	bl	8000104 <strcmp>
 8004360:	2800      	cmp	r0, #0
 8004362:	d058      	beq.n	8004416 <AddModuleToGroup+0xe6>
 8004364:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004366:	42ac      	cmp	r4, r5
 8004368:	d1f6      	bne.n	8004358 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 800436a:	4b30      	ldr	r3, [pc, #192]	; (800442c <AddModuleToGroup+0xfc>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d90f      	bls.n	8004392 <AddModuleToGroup+0x62>
 8004372:	4c2f      	ldr	r4, [pc, #188]	; (8004430 <AddModuleToGroup+0x100>)
 8004374:	009d      	lsls	r5, r3, #2
 8004376:	18ed      	adds	r5, r5, r3
 8004378:	006d      	lsls	r5, r5, #1
 800437a:	0023      	movs	r3, r4
 800437c:	3b0a      	subs	r3, #10
 800437e:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 8004380:	0021      	movs	r1, r4
 8004382:	0030      	movs	r0, r6
 8004384:	f7fb febe 	bl	8000104 <strcmp>
 8004388:	2800      	cmp	r0, #0
 800438a:	d046      	beq.n	800441a <AddModuleToGroup+0xea>
 800438c:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 800438e:	42ac      	cmp	r4, r5
 8004390:	d1f6      	bne.n	8004380 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004392:	4c28      	ldr	r4, [pc, #160]	; (8004434 <AddModuleToGroup+0x104>)
 8004394:	4b28      	ldr	r3, [pc, #160]	; (8004438 <AddModuleToGroup+0x108>)
 8004396:	601c      	str	r4, [r3, #0]
 8004398:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800439e:	0028      	movs	r0, r5
 80043a0:	f7fb feba 	bl	8000118 <strlen>
 80043a4:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80043a6:	0029      	movs	r1, r5
 80043a8:	0030      	movs	r0, r6
 80043aa:	f00f ff19 	bl	80141e0 <strncmp>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d035      	beq.n	800441e <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80043b2:	6864      	ldr	r4, [r4, #4]
 80043b4:	4643      	mov	r3, r8
 80043b6:	601c      	str	r4, [r3, #0]
 80043b8:	2c00      	cmp	r4, #0
 80043ba:	d1ee      	bne.n	800439a <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <AddModuleToGroup+0xf4>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01e      	beq.n	8004402 <AddModuleToGroup+0xd2>
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <AddModuleToGroup+0xf4>)
 80043c6:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 80043c8:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	d019      	beq.n	8004404 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 80043d0:	3401      	adds	r4, #1
 80043d2:	330a      	adds	r3, #10
 80043d4:	2c0a      	cmp	r4, #10
 80043d6:	d1f8      	bne.n	80043ca <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 80043d8:	3f01      	subs	r7, #1
 80043da:	4918      	ldr	r1, [pc, #96]	; (800443c <AddModuleToGroup+0x10c>)
 80043dc:	007f      	lsls	r7, r7, #1
 80043de:	2201      	movs	r2, #1
 80043e0:	40a2      	lsls	r2, r4
 80043e2:	5a7b      	ldrh	r3, [r7, r1]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 80043e8:	2000      	movs	r0, #0
 80043ea:	e007      	b.n	80043fc <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 80043ec:	3f01      	subs	r7, #1
 80043ee:	4913      	ldr	r1, [pc, #76]	; (800443c <AddModuleToGroup+0x10c>)
 80043f0:	007f      	lsls	r7, r7, #1
 80043f2:	2201      	movs	r2, #1
 80043f4:	40a2      	lsls	r2, r4
 80043f6:	5a7b      	ldrh	r3, [r7, r1]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	527b      	strh	r3, [r7, r1]
}
 80043fc:	bc04      	pop	{r2}
 80043fe:	4690      	mov	r8, r2
 8004400:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 8004402:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 8004404:	00a0      	lsls	r0, r4, #2
 8004406:	1900      	adds	r0, r0, r4
 8004408:	0040      	lsls	r0, r0, #1
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <AddModuleToGroup+0xf4>)
 800440c:	1818      	adds	r0, r3, r0
 800440e:	0031      	movs	r1, r6
 8004410:	f00f fede 	bl	80141d0 <strcpy>
			break;
 8004414:	e7e0      	b.n	80043d8 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 8004416:	2006      	movs	r0, #6
 8004418:	e7f0      	b.n	80043fc <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 800441a:	2007      	movs	r0, #7
 800441c:	e7ee      	b.n	80043fc <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 800441e:	2008      	movs	r0, #8
 8004420:	e7ec      	b.n	80043fc <AddModuleToGroup+0xcc>
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20000e5c 	.word	0x20000e5c
 8004428:	08018660 	.word	0x08018660
 800442c:	2000001c 	.word	0x2000001c
 8004430:	20000f72 	.word	0x20000f72
 8004434:	20000098 	.word	0x20000098
 8004438:	20001104 	.word	0x20001104
 800443c:	20000ec0 	.word	0x20000ec0

08004440 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	46ce      	mov	lr, r9
 8004444:	4647      	mov	r7, r8
 8004446:	b580      	push	{r7, lr}
 8004448:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 800444a:	4b24      	ldr	r3, [pc, #144]	; (80044dc <ReadPortsDir+0x9c>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d03c      	beq.n	80044cc <ReadPortsDir+0x8c>
 8004452:	2501      	movs	r5, #1
	BOS_Status result =BOS_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	9301      	str	r3, [sp, #4]
		if(i != myID){
 8004458:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <ReadPortsDir+0xa0>)
 800445a:	4699      	mov	r9, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 800445c:	4b21      	ldr	r3, [pc, #132]	; (80044e4 <ReadPortsDir+0xa4>)
 800445e:	4698      	mov	r8, r3
 8004460:	e021      	b.n	80044a6 <ReadPortsDir+0x66>
 8004462:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004464:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004466:	2780      	movs	r7, #128	; 0x80
 8004468:	023f      	lsls	r7, r7, #8
 800446a:	e004      	b.n	8004476 <ReadPortsDir+0x36>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 800446c:	3401      	adds	r4, #1
 800446e:	b2e4      	uxtb	r4, r4
 8004470:	3601      	adds	r6, #1
 8004472:	2c07      	cmp	r4, #7
 8004474:	d011      	beq.n	800449a <ReadPortsDir+0x5a>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004476:	0020      	movs	r0, r4
 8004478:	f009 fd22 	bl	800dec0 <GetUart>
 800447c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800447e:	42bb      	cmp	r3, r7
 8004480:	d1f4      	bne.n	800446c <ReadPortsDir+0x2c>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <ReadPortsDir+0xa0>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4642      	mov	r2, r8
 800448c:	5a9a      	ldrh	r2, [r3, r2]
 800448e:	0039      	movs	r1, r7
 8004490:	4131      	asrs	r1, r6
 8004492:	430a      	orrs	r2, r1
 8004494:	4641      	mov	r1, r8
 8004496:	525a      	strh	r2, [r3, r1]
 8004498:	e7e8      	b.n	800446c <ReadPortsDir+0x2c>
	for(uint8_t i =1; i <= N; i++){
 800449a:	3501      	adds	r5, #1
 800449c:	b2ed      	uxtb	r5, r5
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <ReadPortsDir+0x9c>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	42ab      	cmp	r3, r5
 80044a4:	d314      	bcc.n	80044d0 <ReadPortsDir+0x90>
		if(i != myID){
 80044a6:	464b      	mov	r3, r9
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	42ab      	cmp	r3, r5
 80044ac:	d0d9      	beq.n	8004462 <ReadPortsDir+0x22>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 80044ae:	2200      	movs	r2, #0
 80044b0:	2113      	movs	r1, #19
 80044b2:	0028      	movs	r0, r5
 80044b4:	f005 f906 	bl	80096c4 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80044b8:	2032      	movs	r0, #50	; 0x32
 80044ba:	f009 fb27 	bl	800db0c <StartMilliDelay>
			if(responseStatus != BOS_OK){
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <ReadPortsDir+0xa8>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0e9      	beq.n	800449a <ReadPortsDir+0x5a>
				result =BOS_ERR_NoResponse;
 80044c6:	2302      	movs	r3, #2
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	e7e6      	b.n	800449a <ReadPortsDir+0x5a>
	BOS_Status result =BOS_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 80044d0:	9801      	ldr	r0, [sp, #4]
 80044d2:	b003      	add	sp, #12
 80044d4:	bc0c      	pop	{r2, r3}
 80044d6:	4690      	mov	r8, r2
 80044d8:	4699      	mov	r9, r3
 80044da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044dc:	2000001c 	.word	0x2000001c
 80044e0:	20001076 	.word	0x20001076
 80044e4:	20006f1c 	.word	0x20006f1c
 80044e8:	20001110 	.word	0x20001110

080044ec <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 80044ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ee:	46c6      	mov	lr, r8
 80044f0:	b500      	push	{lr}
 80044f2:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80044f4:	2401      	movs	r4, #1
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <UpdateMyPortsDir+0x54>)
 80044f8:	4698      	mov	r8, r3
 80044fa:	4f12      	ldr	r7, [pc, #72]	; (8004544 <UpdateMyPortsDir+0x58>)
 80044fc:	2680      	movs	r6, #128	; 0x80
 80044fe:	0236      	lsls	r6, r6, #8
 8004500:	e00a      	b.n	8004518 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004502:	0020      	movs	r0, r4
 8004504:	f009 fcdc 	bl	800dec0 <GetUart>
 8004508:	2101      	movs	r1, #1
 800450a:	f009 fd73 	bl	800dff4 <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800450e:	3401      	adds	r4, #1
 8004510:	b2e4      	uxtb	r4, r4
 8004512:	3501      	adds	r5, #1
 8004514:	2c07      	cmp	r4, #7
 8004516:	d00f      	beq.n	8004538 <UpdateMyPortsDir+0x4c>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004518:	783b      	ldrb	r3, [r7, #0]
 800451a:	3b01      	subs	r3, #1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4642      	mov	r2, r8
 8004520:	5a9b      	ldrh	r3, [r3, r2]
 8004522:	0032      	movs	r2, r6
 8004524:	412a      	asrs	r2, r5
 8004526:	421a      	tst	r2, r3
 8004528:	d1eb      	bne.n	8004502 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p),NORMAL);
 800452a:	0020      	movs	r0, r4
 800452c:	f009 fcc8 	bl	800dec0 <GetUart>
 8004530:	2100      	movs	r1, #0
 8004532:	f009 fd5f 	bl	800dff4 <SwapUartPins>
 8004536:	e7ea      	b.n	800450e <UpdateMyPortsDir+0x22>
		}
	}
	
	return result;
}
 8004538:	2000      	movs	r0, #0
 800453a:	bc04      	pop	{r2}
 800453c:	4690      	mov	r8, r2
 800453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004540:	20006f1c 	.word	0x20006f1c
 8004544:	20001076 	.word	0x20001076

08004548 <BOS_Init>:
void BOS_Init(void){
 8004548:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 800454a:	f009 f997 	bl	800d87c <RTC_Init>
	GetTimeDate();
 800454e:	f009 fa35 	bl	800d9bc <GetTimeDate>
	EE_Init();
 8004552:	f003 fa51 	bl	80079f8 <EE_Init>
	GPIO_Init();
 8004556:	f008 feeb 	bl	800d330 <GPIO_Init>
	DMA_Init();
 800455a:	f007 fe6b 	bl	800c234 <DMA_Init>
	TIM_USEC_Init();
 800455e:	f009 fa61 	bl	800da24 <TIM_USEC_Init>
	CRC_Init();
 8004562:	f008 fe91 	bl	800d288 <CRC_Init>
	TIM_MSEC_Init();
 8004566:	f009 fa8f 	bl	800da88 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 800456a:	f008 ff97 	bl	800d49c <IsFactoryReset>
 800456e:	2800      	cmp	r0, #0
 8004570:	d11a      	bne.n	80045a8 <BOS_Init+0x60>
	if(IsLowerCLIbaud()){
 8004572:	f7ff f86d 	bl	8003650 <IsLowerCLIbaud>
 8004576:	2800      	cmp	r0, #0
 8004578:	d021      	beq.n	80045be <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 800457a:	4b36      	ldr	r3, [pc, #216]	; (8004654 <BOS_Init+0x10c>)
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004580:	2032      	movs	r0, #50	; 0x32
 8004582:	f009 fac3 	bl	800db0c <StartMilliDelay>
		Module_Peripheral_Init();
 8004586:	f007 fd05 	bl	800bf94 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800458a:	4b33      	ldr	r3, [pc, #204]	; (8004658 <BOS_Init+0x110>)
 800458c:	22e1      	movs	r2, #225	; 0xe1
 800458e:	0252      	lsls	r2, r2, #9
 8004590:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004592:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 8004594:	001d      	movs	r5, r3
 8004596:	68a9      	ldr	r1, [r5, #8]
 8004598:	0020      	movs	r0, r4
 800459a:	f009 fd21 	bl	800dfe0 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800459e:	3401      	adds	r4, #1
 80045a0:	b2e4      	uxtb	r4, r4
 80045a2:	2c07      	cmp	r4, #7
 80045a4:	d1f7      	bne.n	8004596 <BOS_Init+0x4e>
 80045a6:	e00f      	b.n	80045c8 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 80045a8:	f7ff f840 	bl	800362c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045ac:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b0:	4b2a      	ldr	r3, [pc, #168]	; (800465c <BOS_Init+0x114>)
 80045b2:	4a2b      	ldr	r2, [pc, #172]	; (8004660 <BOS_Init+0x118>)
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	e7fd      	b.n	80045ba <BOS_Init+0x72>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045be:	2032      	movs	r0, #50	; 0x32
 80045c0:	f009 faa4 	bl	800db0c <StartMilliDelay>
		Module_Peripheral_Init();
 80045c4:	f007 fce6 	bl	800bf94 <Module_Peripheral_Init>
	LoadEEvars();
 80045c8:	f7fe ff04 	bl	80033d4 <LoadEEvars>
	UpdateMyPortsDir();
 80045cc:	f7ff ff8e 	bl	80044ec <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 80045d0:	f008 fa98 	bl	800cb04 <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 80045d4:	4b23      	ldr	r3, [pc, #140]	; (8004664 <BOS_Init+0x11c>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d027      	beq.n	800462c <BOS_Init+0xe4>
		IND_ON();
 80045dc:	2580      	movs	r5, #128	; 0x80
 80045de:	012d      	lsls	r5, r5, #4
 80045e0:	2490      	movs	r4, #144	; 0x90
 80045e2:	05e4      	lsls	r4, r4, #23
 80045e4:	2201      	movs	r2, #1
 80045e6:	0029      	movs	r1, r5
 80045e8:	0020      	movs	r0, r4
 80045ea:	f00d fb8d 	bl	8011d08 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 80045ee:	20fa      	movs	r0, #250	; 0xfa
 80045f0:	0040      	lsls	r0, r0, #1
 80045f2:	f009 fa8b 	bl	800db0c <StartMilliDelay>
		IND_OFF();
 80045f6:	2200      	movs	r2, #0
 80045f8:	0029      	movs	r1, r5
 80045fa:	0020      	movs	r0, r4
 80045fc:	f00d fb84 	bl	8011d08 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004600:	2064      	movs	r0, #100	; 0x64
 8004602:	f009 fa83 	bl	800db0c <StartMilliDelay>
		IND_ON();
 8004606:	2201      	movs	r2, #1
 8004608:	0029      	movs	r1, r5
 800460a:	0020      	movs	r0, r4
 800460c:	f00d fb7c 	bl	8011d08 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004610:	2064      	movs	r0, #100	; 0x64
 8004612:	f009 fa7b 	bl	800db0c <StartMilliDelay>
		IND_OFF();
 8004616:	2200      	movs	r2, #0
 8004618:	0029      	movs	r1, r5
 800461a:	0020      	movs	r0, r4
 800461c:	f00d fb74 	bl	8011d08 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004620:	f003 f826 	bl	8007670 <ResetUartORE>
	BOS_initialized =1;
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <BOS_Init+0x120>)
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
}
 800462a:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 800462c:	2580      	movs	r5, #128	; 0x80
 800462e:	012d      	lsls	r5, r5, #4
 8004630:	2490      	movs	r4, #144	; 0x90
 8004632:	05e4      	lsls	r4, r4, #23
 8004634:	2201      	movs	r2, #1
 8004636:	0029      	movs	r1, r5
 8004638:	0020      	movs	r0, r4
 800463a:	f00d fb65 	bl	8011d08 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 800463e:	20fa      	movs	r0, #250	; 0xfa
 8004640:	0040      	lsls	r0, r0, #1
 8004642:	f009 fa63 	bl	800db0c <StartMilliDelay>
 8004646:	2200      	movs	r2, #0
 8004648:	0029      	movs	r1, r5
 800464a:	0020      	movs	r0, r4
 800464c:	f00d fb5c 	bl	8011d08 <HAL_GPIO_WritePin>
 8004650:	e7e6      	b.n	8004620 <BOS_Init+0xd8>
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	20000a76 	.word	0x20000a76
 8004658:	20006aa0 	.word	0x20006aa0
 800465c:	e000ed00 	.word	0xe000ed00
 8004660:	05fa0004 	.word	0x05fa0004
 8004664:	20001076 	.word	0x20001076
 8004668:	20000a75 	.word	0x20000a75

0800466c <Module_Init>:
void Module_Init(void){
 800466c:	b510      	push	{r4, lr}
	HAL_Init();
 800466e:	f00b fec3 	bl	80103f8 <HAL_Init>
	SystemClock_Config();
 8004672:	f006 fe89 	bl	800b388 <SystemClock_Config>
	BOS_Init();
 8004676:	f7ff ff67 	bl	8004548 <BOS_Init>
	MX_FREERTOS_Init();
 800467a:	f003 fbe7 	bl	8007e4c <MX_FREERTOS_Init>
	osKernelStart();
 800467e:	f009 fd69 	bl	800e154 <osKernelStart>
}
 8004682:	bd10      	pop	{r4, pc}

08004684 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004684:	b510      	push	{r4, lr}
 8004686:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004688:	201e      	movs	r0, #30
 800468a:	f00f f915 	bl	80138b8 <malloc>
 800468e:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004690:	221e      	movs	r2, #30
 8004692:	2100      	movs	r1, #0
 8004694:	f00f fb66 	bl	8013d64 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004698:	4908      	ldr	r1, [pc, #32]	; (80046bc <GetDateString+0x38>)
 800469a:	7d8b      	ldrb	r3, [r1, #22]
 800469c:	7d0a      	ldrb	r2, [r1, #20]
 800469e:	3a01      	subs	r2, #1
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	4807      	ldr	r0, [pc, #28]	; (80046c0 <GetDateString+0x3c>)
 80046a4:	5812      	ldr	r2, [r2, r0]
 80046a6:	8b08      	ldrh	r0, [r1, #24]
 80046a8:	9001      	str	r0, [sp, #4]
 80046aa:	7d49      	ldrb	r1, [r1, #21]
 80046ac:	9100      	str	r1, [sp, #0]
 80046ae:	4905      	ldr	r1, [pc, #20]	; (80046c4 <GetDateString+0x40>)
 80046b0:	0020      	movs	r0, r4
 80046b2:	f00f fd51 	bl	8014158 <sprintf>
	return buffer;
}
 80046b6:	0020      	movs	r0, r4
 80046b8:	b002      	add	sp, #8
 80046ba:	bd10      	pop	{r4, pc}
 80046bc:	20006aa0 	.word	0x20006aa0
 80046c0:	08018bc4 	.word	0x08018bc4
 80046c4:	080188d0 	.word	0x080188d0

080046c8 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 80046c8:	b500      	push	{lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <Bridge+0x24>)
 80046d0:	7819      	ldrb	r1, [r3, #0]
 80046d2:	2301      	movs	r3, #1
 80046d4:	9303      	str	r3, [sp, #12]
 80046d6:	3b02      	subs	r3, #2
 80046d8:	9302      	str	r3, [sp, #8]
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	3303      	adds	r3, #3
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	000b      	movs	r3, r1
 80046e2:	f005 f815 	bl	8009710 <StartScastDMAStream>
}
 80046e6:	b005      	add	sp, #20
 80046e8:	bd00      	pop	{pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	20001076 	.word	0x20001076

080046f0 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 80046f0:	b530      	push	{r4, r5, lr}
 80046f2:	b087      	sub	sp, #28
 80046f4:	0004      	movs	r4, r0
 80046f6:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80046f8:	2300      	movs	r3, #0
 80046fa:	9304      	str	r3, [sp, #16]
 80046fc:	9303      	str	r3, [sp, #12]
 80046fe:	9302      	str	r3, [sp, #8]
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	2100      	movs	r1, #0
 8004708:	2000      	movs	r0, #0
 800470a:	f7fe fee1 	bl	80034d0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800470e:	1e62      	subs	r2, r4, #1
 8004710:	00d3      	lsls	r3, r2, #3
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4a14      	ldr	r2, [pc, #80]	; (8004768 <Unbridge+0x78>)
 8004718:	589b      	ldr	r3, [r3, r2]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d015      	beq.n	800474a <Unbridge+0x5a>
 800471e:	1e6a      	subs	r2, r5, #1
 8004720:	00d3      	lsls	r3, r2, #3
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4a10      	ldr	r2, [pc, #64]	; (8004768 <Unbridge+0x78>)
 8004728:	589b      	ldr	r3, [r3, r2]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 800472e:	0020      	movs	r0, r4
 8004730:	f002 ff12 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004734:	2000      	movs	r0, #0
 8004736:	e006      	b.n	8004746 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 8004738:	0020      	movs	r0, r4
 800473a:	f002 ff0d 	bl	8007558 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800473e:	0028      	movs	r0, r5
 8004740:	f002 ff0a 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004744:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004746:	b007      	add	sp, #28
 8004748:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 800474a:	1e6a      	subs	r2, r5, #1
 800474c:	00d3      	lsls	r3, r2, #3
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4a05      	ldr	r2, [pc, #20]	; (8004768 <Unbridge+0x78>)
 8004754:	589b      	ldr	r3, [r3, r2]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 800475a:	0028      	movs	r0, r5
 800475c:	f002 fefc 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004760:	2000      	movs	r0, #0
 8004762:	e7f0      	b.n	8004746 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 8004764:	2068      	movs	r0, #104	; 0x68
 8004766:	e7ee      	b.n	8004746 <Unbridge+0x56>
 8004768:	20001a70 	.word	0x20001a70

0800476c <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004770:	7804      	ldrb	r4, [r0, #0]
 8004772:	2c00      	cmp	r4, #0
 8004774:	d010      	beq.n	8004798 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004776:	2603      	movs	r6, #3
 8004778:	e004      	b.n	8004784 <StringToLowerCase+0x18>
 800477a:	702a      	strb	r2, [r5, #0]
 800477c:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 800477e:	782c      	ldrb	r4, [r5, #0]
 8004780:	2c00      	cmp	r4, #0
 8004782:	d009      	beq.n	8004798 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004784:	f00f f88a 	bl	801389c <__locale_ctype_ptr>
 8004788:	1900      	adds	r0, r0, r4
 800478a:	7843      	ldrb	r3, [r0, #1]
 800478c:	4033      	ands	r3, r6
 800478e:	0022      	movs	r2, r4
 8004790:	2b01      	cmp	r3, #1
 8004792:	d1f2      	bne.n	800477a <StringToLowerCase+0xe>
 8004794:	3220      	adds	r2, #32
 8004796:	e7f0      	b.n	800477a <StringToLowerCase+0xe>
	}
}
 8004798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800479c <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 800479c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479e:	46c6      	mov	lr, r8
 80047a0:	b500      	push	{lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80047a6:	4bdc      	ldr	r3, [pc, #880]	; (8004b18 <ParseSnippetCondition+0x37c>)
 80047a8:	781c      	ldrb	r4, [r3, #0]
 80047aa:	2c05      	cmp	r4, #5
 80047ac:	d100      	bne.n	80047b0 <ParseSnippetCondition+0x14>
 80047ae:	e210      	b.n	8004bd2 <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80047b0:	49da      	ldr	r1, [pc, #872]	; (8004b1c <ParseSnippetCondition+0x380>)
 80047b2:	00a3      	lsls	r3, r4, #2
 80047b4:	191a      	adds	r2, r3, r4
 80047b6:	0092      	lsls	r2, r2, #2
 80047b8:	2000      	movs	r0, #0
 80047ba:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 80047bc:	191a      	adds	r2, r3, r4
 80047be:	0092      	lsls	r2, r2, #2
 80047c0:	188a      	adds	r2, r1, r2
 80047c2:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80047c4:	1918      	adds	r0, r3, r4
 80047c6:	0080      	lsls	r0, r0, #2
 80047c8:	3002      	adds	r0, #2
 80047ca:	1840      	adds	r0, r0, r1
 80047cc:	2204      	movs	r2, #4
 80047ce:	2100      	movs	r1, #0
 80047d0:	f00f fac8 	bl	8013d64 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 80047d4:	782b      	ldrb	r3, [r5, #0]
 80047d6:	2b62      	cmp	r3, #98	; 0x62
 80047d8:	d102      	bne.n	80047e0 <ParseSnippetCondition+0x44>
 80047da:	78ab      	ldrb	r3, [r5, #2]
 80047dc:	2b2e      	cmp	r3, #46	; 0x2e
 80047de:	d032      	beq.n	8004846 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 80047e0:	4ecf      	ldr	r6, [pc, #828]	; (8004b20 <ParseSnippetCondition+0x384>)
 80047e2:	0029      	movs	r1, r5
 80047e4:	0030      	movs	r0, r6
 80047e6:	f00f fcf3 	bl	80141d0 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 80047ea:	4cce      	ldr	r4, [pc, #824]	; (8004b24 <ParseSnippetCondition+0x388>)
 80047ec:	0021      	movs	r1, r4
 80047ee:	0030      	movs	r0, r6
 80047f0:	f010 fb6e 	bl	8014ed0 <strtok>
 80047f4:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 80047f6:	0021      	movs	r1, r4
 80047f8:	2000      	movs	r0, #0
 80047fa:	f010 fb69 	bl	8014ed0 <strtok>
 80047fe:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004800:	0021      	movs	r1, r4
 8004802:	2000      	movs	r0, #0
 8004804:	f010 fb64 	bl	8014ed0 <strtok>
 8004808:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 800480a:	2d00      	cmp	r5, #0
 800480c:	d100      	bne.n	8004810 <ParseSnippetCondition+0x74>
 800480e:	e1e5      	b.n	8004bdc <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004810:	0028      	movs	r0, r5
 8004812:	f7fe ff81 	bl	8003718 <IsModuleParameter>
 8004816:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004818:	d100      	bne.n	800481c <ParseSnippetCondition+0x80>
 800481a:	e18f      	b.n	8004b3c <ParseSnippetCondition+0x3a0>
 800481c:	2e00      	cmp	r6, #0
 800481e:	d000      	beq.n	8004822 <ParseSnippetCondition+0x86>
 8004820:	e18e      	b.n	8004b40 <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 8004822:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004824:	2c00      	cmp	r4, #0
 8004826:	d000      	beq.n	800482a <ParseSnippetCondition+0x8e>
 8004828:	e1d4      	b.n	8004bd4 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 800482a:	4cbb      	ldr	r4, [pc, #748]	; (8004b18 <ParseSnippetCondition+0x37c>)
 800482c:	7823      	ldrb	r3, [r4, #0]
 800482e:	49bb      	ldr	r1, [pc, #748]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004830:	009a      	lsls	r2, r3, #2
 8004832:	18d0      	adds	r0, r2, r3
 8004834:	0080      	lsls	r0, r0, #2
 8004836:	3602      	adds	r6, #2
 8004838:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800483a:	180a      	adds	r2, r1, r0
 800483c:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800483e:	3301      	adds	r3, #1
 8004840:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 8004842:	2000      	movs	r0, #0
 8004844:	e1c6      	b.n	8004bd4 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004846:	786e      	ldrb	r6, [r5, #1]
 8004848:	3e30      	subs	r6, #48	; 0x30
 800484a:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 800484c:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 800484e:	2e06      	cmp	r6, #6
 8004850:	d900      	bls.n	8004854 <ParseSnippetCondition+0xb8>
 8004852:	e1bf      	b.n	8004bd4 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004854:	4ab1      	ldr	r2, [pc, #708]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004856:	00a3      	lsls	r3, r4, #2
 8004858:	1919      	adds	r1, r3, r4
 800485a:	0089      	lsls	r1, r1, #2
 800485c:	3001      	adds	r0, #1
 800485e:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004860:	1853      	adds	r3, r2, r1
 8004862:	2200      	movs	r2, #0
 8004864:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004866:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004868:	1cef      	adds	r7, r5, #3
 800486a:	3207      	adds	r2, #7
 800486c:	49ae      	ldr	r1, [pc, #696]	; (8004b28 <ParseSnippetCondition+0x38c>)
 800486e:	0038      	movs	r0, r7
 8004870:	f00f fcb6 	bl	80141e0 <strncmp>
 8004874:	2800      	cmp	r0, #0
 8004876:	d121      	bne.n	80048bc <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004878:	00a3      	lsls	r3, r4, #2
 800487a:	191c      	adds	r4, r3, r4
 800487c:	00a4      	lsls	r4, r4, #2
 800487e:	4ba7      	ldr	r3, [pc, #668]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004880:	191c      	adds	r4, r3, r4
 8004882:	2305      	movs	r3, #5
 8004884:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004886:	00f2      	lsls	r2, r6, #3
 8004888:	1992      	adds	r2, r2, r6
 800488a:	4ba8      	ldr	r3, [pc, #672]	; (8004b2c <ParseSnippetCondition+0x390>)
 800488c:	189b      	adds	r3, r3, r2
 800488e:	7a1b      	ldrb	r3, [r3, #8]
 8004890:	07db      	lsls	r3, r3, #31
 8004892:	d504      	bpl.n	800489e <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004894:	4aa0      	ldr	r2, [pc, #640]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004896:	7813      	ldrb	r3, [r2, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	7013      	strb	r3, [r2, #0]
 800489c:	e19a      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 800489e:	2301      	movs	r3, #1
 80048a0:	9305      	str	r3, [sp, #20]
 80048a2:	2300      	movs	r3, #0
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	9302      	str	r3, [sp, #8]
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2101      	movs	r1, #1
 80048b2:	0030      	movs	r0, r6
 80048b4:	f003 fd94 	bl	80083e0 <SetButtonEvents>
				status =BOS_OK;
 80048b8:	2000      	movs	r0, #0
 80048ba:	e7eb      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 80048bc:	220e      	movs	r2, #14
 80048be:	499c      	ldr	r1, [pc, #624]	; (8004b30 <ParseSnippetCondition+0x394>)
 80048c0:	0038      	movs	r0, r7
 80048c2:	f00f fc8d 	bl	80141e0 <strncmp>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d11c      	bne.n	8004904 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 80048ca:	00a3      	lsls	r3, r4, #2
 80048cc:	191c      	adds	r4, r3, r4
 80048ce:	00a4      	lsls	r4, r4, #2
 80048d0:	4b92      	ldr	r3, [pc, #584]	; (8004b1c <ParseSnippetCondition+0x380>)
 80048d2:	191c      	adds	r4, r3, r4
 80048d4:	2306      	movs	r3, #6
 80048d6:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 80048d8:	00f2      	lsls	r2, r6, #3
 80048da:	1992      	adds	r2, r2, r6
 80048dc:	4b93      	ldr	r3, [pc, #588]	; (8004b2c <ParseSnippetCondition+0x390>)
 80048de:	189b      	adds	r3, r3, r2
 80048e0:	7a1b      	ldrb	r3, [r3, #8]
 80048e2:	079b      	lsls	r3, r3, #30
 80048e4:	d4d6      	bmi.n	8004894 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80048e6:	2301      	movs	r3, #1
 80048e8:	9305      	str	r3, [sp, #20]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9304      	str	r3, [sp, #16]
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	9302      	str	r3, [sp, #8]
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	2201      	movs	r2, #1
 80048f8:	2100      	movs	r1, #0
 80048fa:	0030      	movs	r0, r6
 80048fc:	f003 fd70 	bl	80083e0 <SetButtonEvents>
				status =BOS_OK;
 8004900:	2000      	movs	r0, #0
 8004902:	e7c7      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004904:	220c      	movs	r2, #12
 8004906:	498b      	ldr	r1, [pc, #556]	; (8004b34 <ParseSnippetCondition+0x398>)
 8004908:	0038      	movs	r0, r7
 800490a:	f00f fc69 	bl	80141e0 <strncmp>
 800490e:	2800      	cmp	r0, #0
 8004910:	d17a      	bne.n	8004a08 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 8004912:	00f2      	lsls	r2, r6, #3
 8004914:	1992      	adds	r2, r2, r6
 8004916:	4b85      	ldr	r3, [pc, #532]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004918:	189b      	adds	r3, r3, r2
 800491a:	789b      	ldrb	r3, [r3, #2]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d030      	beq.n	8004982 <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 8004920:	00f2      	lsls	r2, r6, #3
 8004922:	1992      	adds	r2, r2, r6
 8004924:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004926:	189b      	adds	r3, r3, r2
 8004928:	78db      	ldrb	r3, [r3, #3]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04a      	beq.n	80049c4 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 800492e:	00f2      	lsls	r2, r6, #3
 8004930:	1992      	adds	r2, r2, r6
 8004932:	4b7e      	ldr	r3, [pc, #504]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004934:	189b      	adds	r3, r3, r2
 8004936:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004938:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1aa      	bne.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 800493e:	4f77      	ldr	r7, [pc, #476]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004940:	00a3      	lsls	r3, r4, #2
 8004942:	191b      	adds	r3, r3, r4
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	220b      	movs	r2, #11
 800494a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800494c:	0028      	movs	r0, r5
 800494e:	300f      	adds	r0, #15
 8004950:	f00e ff6f 	bl	8013832 <atoi>
 8004954:	b2c0      	uxtb	r0, r0
 8004956:	4b70      	ldr	r3, [pc, #448]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	0093      	lsls	r3, r2, #2
 800495c:	189b      	adds	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	18ff      	adds	r7, r7, r3
 8004962:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004964:	2301      	movs	r3, #1
 8004966:	9305      	str	r3, [sp, #20]
 8004968:	2300      	movs	r3, #0
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	9303      	str	r3, [sp, #12]
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	9001      	str	r0, [sp, #4]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	2100      	movs	r1, #0
 8004978:	0030      	movs	r0, r6
 800497a:	f003 fd31 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 800497e:	2000      	movs	r0, #0
 8004980:	e788      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004982:	4f66      	ldr	r7, [pc, #408]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004984:	00a3      	lsls	r3, r4, #2
 8004986:	191b      	adds	r3, r3, r4
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	2209      	movs	r2, #9
 800498e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004990:	0028      	movs	r0, r5
 8004992:	300f      	adds	r0, #15
 8004994:	f00e ff4d 	bl	8013832 <atoi>
 8004998:	b2c3      	uxtb	r3, r0
 800499a:	4a5f      	ldr	r2, [pc, #380]	; (8004b18 <ParseSnippetCondition+0x37c>)
 800499c:	7811      	ldrb	r1, [r2, #0]
 800499e:	008a      	lsls	r2, r1, #2
 80049a0:	1852      	adds	r2, r2, r1
 80049a2:	0092      	lsls	r2, r2, #2
 80049a4:	18bf      	adds	r7, r7, r2
 80049a6:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049a8:	2201      	movs	r2, #1
 80049aa:	9205      	str	r2, [sp, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	9204      	str	r2, [sp, #16]
 80049b0:	9203      	str	r2, [sp, #12]
 80049b2:	9202      	str	r2, [sp, #8]
 80049b4:	9201      	str	r2, [sp, #4]
 80049b6:	9200      	str	r2, [sp, #0]
 80049b8:	2100      	movs	r1, #0
 80049ba:	0030      	movs	r0, r6
 80049bc:	f003 fd10 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 80049c0:	2000      	movs	r0, #0
 80049c2:	e767      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 80049c4:	4f55      	ldr	r7, [pc, #340]	; (8004b1c <ParseSnippetCondition+0x380>)
 80049c6:	00a3      	lsls	r3, r4, #2
 80049c8:	191b      	adds	r3, r3, r4
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	220a      	movs	r2, #10
 80049d0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80049d2:	0028      	movs	r0, r5
 80049d4:	300f      	adds	r0, #15
 80049d6:	f00e ff2c 	bl	8013832 <atoi>
 80049da:	b2c0      	uxtb	r0, r0
 80049dc:	4b4e      	ldr	r3, [pc, #312]	; (8004b18 <ParseSnippetCondition+0x37c>)
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	0093      	lsls	r3, r2, #2
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	18ff      	adds	r7, r7, r3
 80049e8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049ea:	2301      	movs	r3, #1
 80049ec:	9305      	str	r3, [sp, #20]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	9303      	str	r3, [sp, #12]
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	9000      	str	r0, [sp, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2100      	movs	r1, #0
 80049fe:	0030      	movs	r0, r6
 8004a00:	f003 fcee 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004a04:	2000      	movs	r0, #0
 8004a06:	e745      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a08:	220d      	movs	r2, #13
 8004a0a:	494b      	ldr	r1, [pc, #300]	; (8004b38 <ParseSnippetCondition+0x39c>)
 8004a0c:	0038      	movs	r0, r7
 8004a0e:	f00f fbe7 	bl	80141e0 <strncmp>
 8004a12:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004a14:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d000      	beq.n	8004a1c <ParseSnippetCondition+0x280>
 8004a1a:	e73b      	b.n	8004894 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004a1c:	00f2      	lsls	r2, r6, #3
 8004a1e:	1992      	adds	r2, r2, r6
 8004a20:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	795b      	ldrb	r3, [r3, #5]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d031      	beq.n	8004a8e <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 8004a2a:	00f2      	lsls	r2, r6, #3
 8004a2c:	1992      	adds	r2, r2, r6
 8004a2e:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a30:	189b      	adds	r3, r3, r2
 8004a32:	799b      	ldrb	r3, [r3, #6]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d04c      	beq.n	8004ad2 <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 8004a38:	00f2      	lsls	r2, r6, #3
 8004a3a:	1992      	adds	r2, r2, r6
 8004a3c:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004a42:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d000      	beq.n	8004a4a <ParseSnippetCondition+0x2ae>
 8004a48:	e724      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004a4a:	4f34      	ldr	r7, [pc, #208]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	4698      	mov	r8, r3
 8004a50:	435c      	muls	r4, r3
 8004a52:	193c      	adds	r4, r7, r4
 8004a54:	3b06      	subs	r3, #6
 8004a56:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004a58:	0028      	movs	r0, r5
 8004a5a:	3010      	adds	r0, #16
 8004a5c:	f00e fee9 	bl	8013832 <atoi>
 8004a60:	b2c0      	uxtb	r0, r0
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	4642      	mov	r2, r8
 8004a68:	4353      	muls	r3, r2
 8004a6a:	18ff      	adds	r7, r7, r3
 8004a6c:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004a6e:	2301      	movs	r3, #1
 8004a70:	9305      	str	r3, [sp, #20]
 8004a72:	9004      	str	r0, [sp, #16]
 8004a74:	2400      	movs	r4, #0
 8004a76:	9403      	str	r4, [sp, #12]
 8004a78:	9402      	str	r4, [sp, #8]
 8004a7a:	9401      	str	r4, [sp, #4]
 8004a7c:	9400      	str	r4, [sp, #0]
 8004a7e:	0023      	movs	r3, r4
 8004a80:	0022      	movs	r2, r4
 8004a82:	0021      	movs	r1, r4
 8004a84:	0030      	movs	r0, r6
 8004a86:	f003 fcab 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004a8a:	0020      	movs	r0, r4
 8004a8c:	e702      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004a8e:	4f23      	ldr	r7, [pc, #140]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004a90:	00a3      	lsls	r3, r4, #2
 8004a92:	191b      	adds	r3, r3, r4
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	220c      	movs	r2, #12
 8004a9a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	3010      	adds	r0, #16
 8004aa0:	f00e fec7 	bl	8013832 <atoi>
 8004aa4:	b2c0      	uxtb	r0, r0
 8004aa6:	4b1c      	ldr	r3, [pc, #112]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	0093      	lsls	r3, r2, #2
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	18ff      	adds	r7, r7, r3
 8004ab2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9305      	str	r3, [sp, #20]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	9303      	str	r3, [sp, #12]
 8004abe:	9002      	str	r0, [sp, #8]
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	0030      	movs	r0, r6
 8004aca:	f003 fc89 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e6e0      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004ad2:	4f12      	ldr	r7, [pc, #72]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004ad4:	00a3      	lsls	r3, r4, #2
 8004ad6:	191b      	adds	r3, r3, r4
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	220d      	movs	r2, #13
 8004ade:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	3010      	adds	r0, #16
 8004ae4:	f00e fea5 	bl	8013832 <atoi>
 8004ae8:	b2c0      	uxtb	r0, r0
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	0093      	lsls	r3, r2, #2
 8004af0:	189b      	adds	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	18ff      	adds	r7, r7, r3
 8004af6:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004af8:	2301      	movs	r3, #1
 8004afa:	9305      	str	r3, [sp, #20]
 8004afc:	2300      	movs	r3, #0
 8004afe:	9304      	str	r3, [sp, #16]
 8004b00:	9003      	str	r0, [sp, #12]
 8004b02:	9302      	str	r3, [sp, #8]
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	0030      	movs	r0, r6
 8004b0e:	f003 fc67 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004b12:	2000      	movs	r0, #0
 8004b14:	e6be      	b.n	8004894 <ParseSnippetCondition+0xf8>
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	2000121f 	.word	0x2000121f
 8004b1c:	20006abc 	.word	0x20006abc
 8004b20:	20001184 	.word	0x20001184
 8004b24:	0801872c 	.word	0x0801872c
 8004b28:	08019d48 	.word	0x08019d48
 8004b2c:	2000151c 	.word	0x2000151c
 8004b30:	08018dc8 	.word	0x08018dc8
 8004b34:	08018dd8 	.word	0x08018dd8
 8004b38:	08018de8 	.word	0x08018de8
			else if(secondPart != NULL && thirdPart != NULL){
 8004b3c:	2e00      	cmp	r6, #0
 8004b3e:	d04f      	beq.n	8004be0 <ParseSnippetCondition+0x444>
 8004b40:	2c00      	cmp	r4, #0
 8004b42:	d04f      	beq.n	8004be4 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004b44:	0020      	movs	r0, r4
 8004b46:	f7fe fde7 	bl	8003718 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d024      	beq.n	8004b98 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b4e:	4b27      	ldr	r3, [pc, #156]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b50:	781c      	ldrb	r4, [r3, #0]
 8004b52:	4a27      	ldr	r2, [pc, #156]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004b54:	00a3      	lsls	r3, r4, #2
 8004b56:	1919      	adds	r1, r3, r4
 8004b58:	0089      	lsls	r1, r1, #2
 8004b5a:	2704      	movs	r7, #4
 8004b5c:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b5e:	1919      	adds	r1, r3, r4
 8004b60:	0089      	lsls	r1, r1, #2
 8004b62:	1851      	adds	r1, r2, r1
 8004b64:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b66:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b68:	4d20      	ldr	r5, [pc, #128]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b6a:	782c      	ldrb	r4, [r5, #0]
 8004b6c:	0030      	movs	r0, r6
 8004b6e:	f7fe fddf 	bl	8003730 <IsMathOperator>
 8004b72:	491f      	ldr	r1, [pc, #124]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004b74:	00a3      	lsls	r3, r4, #2
 8004b76:	191b      	adds	r3, r3, r4
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	18cb      	adds	r3, r1, r3
 8004b7c:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b7e:	782a      	ldrb	r2, [r5, #0]
 8004b80:	0093      	lsls	r3, r2, #2
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	18cb      	adds	r3, r1, r3
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d02c      	beq.n	8004be8 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004b8e:	3201      	adds	r2, #1
 8004b90:	4b16      	ldr	r3, [pc, #88]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b92:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004b94:	2000      	movs	r0, #0
 8004b96:	e01d      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b9a:	4698      	mov	r8, r3
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	4f14      	ldr	r7, [pc, #80]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004ba0:	0093      	lsls	r3, r2, #2
 8004ba2:	1899      	adds	r1, r3, r2
 8004ba4:	0089      	lsls	r1, r1, #2
 8004ba6:	2003      	movs	r0, #3
 8004ba8:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 8004bae:	0020      	movs	r0, r4
 8004bb0:	f00e fe3a 	bl	8013828 <atof>
 8004bb4:	f7fe f808 	bl	8002bc8 <__aeabi_d2f>
 8004bb8:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004bba:	4643      	mov	r3, r8
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	0098      	lsls	r0, r3, #2
 8004bc0:	18c0      	adds	r0, r0, r3
 8004bc2:	0080      	lsls	r0, r0, #2
 8004bc4:	3006      	adds	r0, #6
 8004bc6:	19c0      	adds	r0, r0, r7
 8004bc8:	2204      	movs	r2, #4
 8004bca:	a907      	add	r1, sp, #28
 8004bcc:	f00f f8c1 	bl	8013d52 <memcpy>
 8004bd0:	e7ca      	b.n	8004b68 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004bd2:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004bd4:	b008      	add	sp, #32
 8004bd6:	bc04      	pop	{r2}
 8004bd8:	4690      	mov	r8, r2
 8004bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004bdc:	2067      	movs	r0, #103	; 0x67
 8004bde:	e7f9      	b.n	8004bd4 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004be0:	2067      	movs	r0, #103	; 0x67
 8004be2:	e7f7      	b.n	8004bd4 <ParseSnippetCondition+0x438>
 8004be4:	2067      	movs	r0, #103	; 0x67
 8004be6:	e7f5      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004be8:	2067      	movs	r0, #103	; 0x67
 8004bea:	e7f3      	b.n	8004bd4 <ParseSnippetCondition+0x438>
 8004bec:	2000121f 	.word	0x2000121f
 8004bf0:	20006abc 	.word	0x20006abc

08004bf4 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	000c      	movs	r4, r1
	switch(code){
 8004bf8:	2802      	cmp	r0, #2
 8004bfa:	d017      	beq.n	8004c2c <AddSnippet+0x38>
 8004bfc:	2803      	cmp	r0, #3
 8004bfe:	d003      	beq.n	8004c08 <AddSnippet+0x14>
 8004c00:	2801      	cmp	r0, #1
 8004c02:	d00f      	beq.n	8004c24 <AddSnippet+0x30>
	return BOS_OK;
 8004c04:	2000      	movs	r0, #0
 8004c06:	e00c      	b.n	8004c22 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004c08:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <AddSnippet+0xec>)
 8004c0a:	781a      	ldrb	r2, [r3, #0]
 8004c0c:	3a01      	subs	r2, #1
 8004c0e:	0093      	lsls	r3, r2, #2
 8004c10:	189b      	adds	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <AddSnippet+0xf0>)
 8004c16:	18d3      	adds	r3, r2, r3
 8004c18:	2201      	movs	r2, #1
 8004c1a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004c1c:	f006 fc0c 	bl	800b438 <SaveToRO>
	return BOS_OK;
 8004c20:	2000      	movs	r0, #0
}
 8004c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004c24:	0008      	movs	r0, r1
 8004c26:	f7ff fdb9 	bl	800479c <ParseSnippetCondition>
 8004c2a:	e7fa      	b.n	8004c22 <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004c2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ce0 <AddSnippet+0xec>)
 8004c2e:	781d      	ldrb	r5, [r3, #0]
 8004c30:	3d01      	subs	r5, #1
 8004c32:	00ab      	lsls	r3, r5, #2
 8004c34:	195b      	adds	r3, r3, r5
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <AddSnippet+0xf0>)
 8004c3a:	18d3      	adds	r3, r2, r3
 8004c3c:	68de      	ldr	r6, [r3, #12]
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	d03d      	beq.n	8004cbe <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004c42:	0030      	movs	r0, r6
 8004c44:	f7fb fa68 	bl	8000118 <strlen>
 8004c48:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004c4a:	0020      	movs	r0, r4
 8004c4c:	f7fb fa64 	bl	8000118 <strlen>
 8004c50:	1839      	adds	r1, r7, r0
 8004c52:	3102      	adds	r1, #2
 8004c54:	0030      	movs	r0, r6
 8004c56:	f00f f8b7 	bl	8013dc8 <realloc>
 8004c5a:	4e22      	ldr	r6, [pc, #136]	; (8004ce4 <AddSnippet+0xf0>)
 8004c5c:	00ab      	lsls	r3, r5, #2
 8004c5e:	195d      	adds	r5, r3, r5
 8004c60:	00ad      	lsls	r5, r5, #2
 8004c62:	1975      	adds	r5, r6, r5
 8004c64:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004c66:	4d1e      	ldr	r5, [pc, #120]	; (8004ce0 <AddSnippet+0xec>)
 8004c68:	782a      	ldrb	r2, [r5, #0]
 8004c6a:	3a01      	subs	r2, #1
 8004c6c:	0093      	lsls	r3, r2, #2
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	18f3      	adds	r3, r6, r3
 8004c74:	1c7a      	adds	r2, r7, #1
 8004c76:	68d8      	ldr	r0, [r3, #12]
 8004c78:	1880      	adds	r0, r0, r2
 8004c7a:	0021      	movs	r1, r4
 8004c7c:	f00f faa8 	bl	80141d0 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004c80:	782a      	ldrb	r2, [r5, #0]
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0093      	lsls	r3, r2, #2
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	18f6      	adds	r6, r6, r3
 8004c8c:	68f3      	ldr	r3, [r6, #12]
 8004c8e:	2213      	movs	r2, #19
 8004c90:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004c92:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <AddSnippet+0xec>)
 8004c94:	781a      	ldrb	r2, [r3, #0]
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0093      	lsls	r3, r2, #2
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4911      	ldr	r1, [pc, #68]	; (8004ce4 <AddSnippet+0xf0>)
 8004ca0:	18cb      	adds	r3, r1, r3
 8004ca2:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004ca4:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1bb      	bne.n	8004c22 <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004caa:	0090      	lsls	r0, r2, #2
 8004cac:	1880      	adds	r0, r0, r2
 8004cae:	0080      	lsls	r0, r0, #2
 8004cb0:	1840      	adds	r0, r0, r1
 8004cb2:	2214      	movs	r2, #20
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f00f f855 	bl	8013d64 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004cba:	200e      	movs	r0, #14
 8004cbc:	e7b1      	b.n	8004c22 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004cbe:	0008      	movs	r0, r1
 8004cc0:	f7fb fa2a 	bl	8000118 <strlen>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f00e fdf7 	bl	80138b8 <malloc>
 8004cca:	00ab      	lsls	r3, r5, #2
 8004ccc:	195d      	adds	r5, r3, r5
 8004cce:	00ad      	lsls	r5, r5, #2
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <AddSnippet+0xf0>)
 8004cd2:	195d      	adds	r5, r3, r5
 8004cd4:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004cd6:	0021      	movs	r1, r4
 8004cd8:	f00f fa7a 	bl	80141d0 <strcpy>
 8004cdc:	e7d9      	b.n	8004c92 <AddSnippet+0x9e>
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	2000121f 	.word	0x2000121f
 8004ce4:	20006abc 	.word	0x20006abc

08004ce8 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cea:	46de      	mov	lr, fp
 8004cec:	4657      	mov	r7, sl
 8004cee:	464e      	mov	r6, r9
 8004cf0:	4645      	mov	r5, r8
 8004cf2:	b5e0      	push	{r5, r6, r7, lr}
 8004cf4:	b08b      	sub	sp, #44	; 0x2c
 8004cf6:	9004      	str	r0, [sp, #16]
 8004cf8:	4688      	mov	r8, r1
 8004cfa:	9203      	str	r2, [sp, #12]
 8004cfc:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004cfe:	2209      	movs	r2, #9
 8004d00:	2100      	movs	r1, #0
 8004d02:	a807      	add	r0, sp, #28
 8004d04:	f00f f82e 	bl	8013d64 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d08:	4fd5      	ldr	r7, [pc, #852]	; (8005060 <CLI_CommandParser+0x378>)
				if(id == myID){
 8004d0a:	002e      	movs	r6, r5
 8004d0c:	e034      	b.n	8004d78 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004d0e:	2252      	movs	r2, #82	; 0x52
 8004d10:	49d4      	ldr	r1, [pc, #848]	; (8005064 <CLI_CommandParser+0x37c>)
 8004d12:	0020      	movs	r0, r4
 8004d14:	f00f f81d 	bl	8013d52 <memcpy>
				recordSnippet =0;
 8004d18:	4bd1      	ldr	r3, [pc, #836]	; (8005060 <CLI_CommandParser+0x378>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e044      	b.n	8004daa <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004d20:	2206      	movs	r2, #6
 8004d22:	49d1      	ldr	r1, [pc, #836]	; (8005068 <CLI_CommandParser+0x380>)
 8004d24:	9803      	ldr	r0, [sp, #12]
 8004d26:	f00f fa5b 	bl	80141e0 <strncmp>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d053      	beq.n	8004dd6 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004d2e:	2d02      	cmp	r5, #2
 8004d30:	d05e      	beq.n	8004df0 <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004d32:	212e      	movs	r1, #46	; 0x2e
 8004d34:	9803      	ldr	r0, [sp, #12]
 8004d36:	f00f fa3d 	bl	80141b4 <strchr>
 8004d3a:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004d3c:	d006      	beq.n	8004d4c <CLI_CommandParser+0x64>
 8004d3e:	3803      	subs	r0, #3
 8004d40:	2203      	movs	r2, #3
 8004d42:	49ca      	ldr	r1, [pc, #808]	; (800506c <CLI_CommandParser+0x384>)
 8004d44:	f00f fa4c 	bl	80141e0 <strncmp>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d160      	bne.n	8004e0e <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004d4c:	2299      	movs	r2, #153	; 0x99
 8004d4e:	0092      	lsls	r2, r2, #2
 8004d50:	0021      	movs	r1, r4
 8004d52:	9803      	ldr	r0, [sp, #12]
 8004d54:	f009 fa9a 	bl	800e28c <FreeRTOS_CLIProcessCommand>
 8004d58:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d5a:	7823      	ldrb	r3, [r4, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d000      	beq.n	8004d62 <CLI_CommandParser+0x7a>
 8004d60:	e16f      	b.n	8005042 <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d62:	0020      	movs	r0, r4
 8004d64:	f7fb f9d8 	bl	8000118 <strlen>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	0020      	movs	r0, r4
 8004d6e:	f00e fff9 	bl	8013d64 <memset>
	} while(xReturned != pdFALSE);
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	d100      	bne.n	8004d78 <CLI_CommandParser+0x90>
 8004d76:	e1ab      	b.n	80050d0 <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8004d78:	9803      	ldr	r0, [sp, #12]
 8004d7a:	f7ff fcf7 	bl	800476c <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d7e:	783d      	ldrb	r5, [r7, #0]
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	d1cd      	bne.n	8004d20 <CLI_CommandParser+0x38>
 8004d84:	2203      	movs	r2, #3
 8004d86:	49ba      	ldr	r1, [pc, #744]	; (8005070 <CLI_CommandParser+0x388>)
 8004d88:	9803      	ldr	r0, [sp, #12]
 8004d8a:	f00f fa29 	bl	80141e0 <strncmp>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d1cf      	bne.n	8004d32 <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	1cd9      	adds	r1, r3, #3
 8004d96:	3001      	adds	r0, #1
 8004d98:	f7ff ff2c 	bl	8004bf4 <AddSnippet>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d1b6      	bne.n	8004d0e <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004da0:	4baf      	ldr	r3, [pc, #700]	; (8005060 <CLI_CommandParser+0x378>)
 8004da2:	2202      	movs	r2, #2
 8004da4:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004da6:	230d      	movs	r3, #13
 8004da8:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004daa:	7823      	ldrb	r3, [r4, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d100      	bne.n	8004db2 <CLI_CommandParser+0xca>
 8004db0:	e186      	b.n	80050c0 <CLI_CommandParser+0x3d8>
 8004db2:	4643      	mov	r3, r8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d100      	bne.n	8004dba <CLI_CommandParser+0xd2>
 8004db8:	e19d      	b.n	80050f6 <CLI_CommandParser+0x40e>
 8004dba:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004dbc:	0020      	movs	r0, r4
 8004dbe:	f7fb f9ab 	bl	8000118 <strlen>
 8004dc2:	b282      	uxth	r2, r0
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	425b      	negs	r3, r3
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	3333      	adds	r3, #51	; 0x33
 8004dcc:	0021      	movs	r1, r4
 8004dce:	9804      	ldr	r0, [sp, #16]
 8004dd0:	f009 f898 	bl	800df04 <writePxMutex>
 8004dd4:	e7c5      	b.n	8004d62 <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004dd6:	4ba2      	ldr	r3, [pc, #648]	; (8005060 <CLI_CommandParser+0x378>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004ddc:	49a5      	ldr	r1, [pc, #660]	; (8005074 <CLI_CommandParser+0x38c>)
 8004dde:	3003      	adds	r0, #3
 8004de0:	f7ff ff08 	bl	8004bf4 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004de4:	2241      	movs	r2, #65	; 0x41
 8004de6:	49a4      	ldr	r1, [pc, #656]	; (8005078 <CLI_CommandParser+0x390>)
 8004de8:	0020      	movs	r0, r4
 8004dea:	f00e ffb2 	bl	8013d52 <memcpy>
			xReturned = pdFALSE;
 8004dee:	e7dc      	b.n	8004daa <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004df0:	9903      	ldr	r1, [sp, #12]
 8004df2:	2002      	movs	r0, #2
 8004df4:	f7ff fefe 	bl	8004bf4 <AddSnippet>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d102      	bne.n	8004e02 <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004dfc:	230d      	movs	r3, #13
 8004dfe:	7023      	strb	r3, [r4, #0]
 8004e00:	e7d3      	b.n	8004daa <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e02:	2252      	movs	r2, #82	; 0x52
 8004e04:	4997      	ldr	r1, [pc, #604]	; (8005064 <CLI_CommandParser+0x37c>)
 8004e06:	0020      	movs	r0, r4
 8004e08:	f00e ffa3 	bl	8013d52 <memcpy>
 8004e0c:	e7cd      	b.n	8004daa <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004e0e:	f00e fd45 	bl	801389c <__locale_ctype_ptr>
 8004e12:	786b      	ldrb	r3, [r5, #1]
 8004e14:	18c0      	adds	r0, r0, r3
 8004e16:	7843      	ldrb	r3, [r0, #1]
 8004e18:	075b      	lsls	r3, r3, #29
 8004e1a:	d497      	bmi.n	8004d4c <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004e1c:	9903      	ldr	r1, [sp, #12]
 8004e1e:	1a6a      	subs	r2, r5, r1
 8004e20:	a807      	add	r0, sp, #28
 8004e22:	f00f f9ee 	bl	8014202 <strncpy>
				id =GetID(idString);
 8004e26:	a807      	add	r0, sp, #28
 8004e28:	f7ff f9b6 	bl	8004198 <GetID>
 8004e2c:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004e2e:	4a93      	ldr	r2, [pc, #588]	; (800507c <CLI_CommandParser+0x394>)
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	4693      	mov	fp, r2
 8004e34:	4290      	cmp	r0, r2
 8004e36:	d03d      	beq.n	8004eb4 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004e38:	2864      	cmp	r0, #100	; 0x64
 8004e3a:	d043      	beq.n	8004ec4 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004e3c:	2866      	cmp	r0, #102	; 0x66
 8004e3e:	d047      	beq.n	8004ed0 <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004e40:	28ff      	cmp	r0, #255	; 0xff
 8004e42:	d04b      	beq.n	8004edc <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004e44:	466b      	mov	r3, sp
 8004e46:	7d1b      	ldrb	r3, [r3, #20]
 8004e48:	469a      	mov	sl, r3
 8004e4a:	2bfe      	cmp	r3, #254	; 0xfe
 8004e4c:	d078      	beq.n	8004f40 <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004e4e:	3501      	adds	r5, #1
 8004e50:	2206      	movs	r2, #6
 8004e52:	498b      	ldr	r1, [pc, #556]	; (8005080 <CLI_CommandParser+0x398>)
 8004e54:	0028      	movs	r0, r5
 8004e56:	f00f f9c3 	bl	80141e0 <strncmp>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d000      	beq.n	8004e60 <CLI_CommandParser+0x178>
 8004e5e:	e0b4      	b.n	8004fca <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;
 8004e60:	4b88      	ldr	r3, [pc, #544]	; (8005084 <CLI_CommandParser+0x39c>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	719a      	strb	r2, [r3, #6]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e66:	2119      	movs	r1, #25
 8004e68:	4650      	mov	r0, sl
 8004e6a:	f004 fc2b 	bl	80096c4 <SendMessageToModule>
						osDelay(100);
 8004e6e:	2064      	movs	r0, #100	; 0x64
 8004e70:	f009 f975 	bl	800e15e <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004e74:	4b84      	ldr	r3, [pc, #528]	; (8005088 <CLI_CommandParser+0x3a0>)
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	4b80      	ldr	r3, [pc, #512]	; (800507c <CLI_CommandParser+0x394>)
 8004e7a:	7818      	ldrb	r0, [r3, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4651      	mov	r1, sl
 8004e80:	f7fe fe64 	bl	8003b4c <remoteBootloaderUpdate>
					if(BOS.response == BOS_RESPONSE_ALL){
 8004e84:	4b7f      	ldr	r3, [pc, #508]	; (8005084 <CLI_CommandParser+0x39c>)
 8004e86:	799b      	ldrb	r3, [r3, #6]
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d18e      	bne.n	8004daa <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004e8c:	21fa      	movs	r1, #250	; 0xfa
 8004e8e:	0089      	lsls	r1, r1, #2
 8004e90:	2001      	movs	r0, #1
 8004e92:	f00a fe77 	bl	800fb84 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004e96:	4b7d      	ldr	r3, [pc, #500]	; (800508c <CLI_CommandParser+0x3a4>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d085      	beq.n	8004daa <CLI_CommandParser+0xc2>
							++timedoutMsg;
 8004e9e:	4a7c      	ldr	r2, [pc, #496]	; (8005090 <CLI_CommandParser+0x3a8>)
 8004ea0:	8813      	ldrh	r3, [r2, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004ea6:	9b05      	ldr	r3, [sp, #20]
 8004ea8:	0022      	movs	r2, r4
 8004eaa:	497a      	ldr	r1, [pc, #488]	; (8005094 <CLI_CommandParser+0x3ac>)
 8004eac:	0020      	movs	r0, r4
 8004eae:	f00f f953 	bl	8014158 <sprintf>
 8004eb2:	e77a      	b.n	8004daa <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004eb4:	2299      	movs	r2, #153	; 0x99
 8004eb6:	1c68      	adds	r0, r5, #1
 8004eb8:	0092      	lsls	r2, r2, #2
 8004eba:	0021      	movs	r1, r4
 8004ebc:	f009 f9e6 	bl	800e28c <FreeRTOS_CLIProcessCommand>
 8004ec0:	0006      	movs	r6, r0
 8004ec2:	e74a      	b.n	8004d5a <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004ec4:	2227      	movs	r2, #39	; 0x27
 8004ec6:	4974      	ldr	r1, [pc, #464]	; (8005098 <CLI_CommandParser+0x3b0>)
 8004ec8:	0020      	movs	r0, r4
 8004eca:	f00e ff42 	bl	8013d52 <memcpy>
 8004ece:	e76c      	b.n	8004daa <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004ed0:	2225      	movs	r2, #37	; 0x25
 8004ed2:	4972      	ldr	r1, [pc, #456]	; (800509c <CLI_CommandParser+0x3b4>)
 8004ed4:	0020      	movs	r0, r4
 8004ed6:	f00e ff3c 	bl	8013d52 <memcpy>
 8004eda:	e766      	b.n	8004daa <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004edc:	221a      	movs	r2, #26
 8004ede:	2100      	movs	r1, #0
 8004ee0:	486f      	ldr	r0, [pc, #444]	; (80050a0 <CLI_CommandParser+0x3b8>)
 8004ee2:	f00e ff3f 	bl	8013d64 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ee6:	3501      	adds	r5, #1
 8004ee8:	9803      	ldr	r0, [sp, #12]
 8004eea:	f7fb f915 	bl	8000118 <strlen>
 8004eee:	0006      	movs	r6, r0
 8004ef0:	ab07      	add	r3, sp, #28
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7fb f910 	bl	8000118 <strlen>
 8004ef8:	1e72      	subs	r2, r6, #1
 8004efa:	1a12      	subs	r2, r2, r0
 8004efc:	0029      	movs	r1, r5
 8004efe:	4869      	ldr	r0, [pc, #420]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004f00:	f00f f97f 	bl	8014202 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f04:	9803      	ldr	r0, [sp, #12]
 8004f06:	f7fb f907 	bl	8000118 <strlen>
 8004f0a:	0006      	movs	r6, r0
 8004f0c:	a807      	add	r0, sp, #28
 8004f0e:	f7fb f903 	bl	8000118 <strlen>
 8004f12:	1a33      	subs	r3, r6, r0
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2217      	movs	r2, #23
 8004f18:	21ff      	movs	r1, #255	; 0xff
 8004f1a:	4658      	mov	r0, fp
 8004f1c:	f004 fbaa 	bl	8009674 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f20:	2299      	movs	r2, #153	; 0x99
 8004f22:	0092      	lsls	r2, r2, #2
 8004f24:	0021      	movs	r1, r4
 8004f26:	0028      	movs	r0, r5
 8004f28:	f009 f9b0 	bl	800e28c <FreeRTOS_CLIProcessCommand>
 8004f2c:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f2e:	0020      	movs	r0, r4
 8004f30:	f7fb f8f2 	bl	8000118 <strlen>
 8004f34:	1820      	adds	r0, r4, r0
 8004f36:	221d      	movs	r2, #29
 8004f38:	495b      	ldr	r1, [pc, #364]	; (80050a8 <CLI_CommandParser+0x3c0>)
 8004f3a:	f00e ff0a 	bl	8013d52 <memcpy>
 8004f3e:	e70c      	b.n	8004d5a <CLI_CommandParser+0x72>
					group =id >> 8;
 8004f40:	9b05      	ldr	r3, [sp, #20]
 8004f42:	121b      	asrs	r3, r3, #8
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	469a      	mov	sl, r3
 8004f48:	4b58      	ldr	r3, [pc, #352]	; (80050ac <CLI_CommandParser+0x3c4>)
 8004f4a:	4699      	mov	r9, r3
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f50:	221a      	movs	r2, #26
 8004f52:	2100      	movs	r1, #0
 8004f54:	4852      	ldr	r0, [pc, #328]	; (80050a0 <CLI_CommandParser+0x3b8>)
 8004f56:	f00e ff05 	bl	8013d64 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f5a:	1c6b      	adds	r3, r5, #1
 8004f5c:	9305      	str	r3, [sp, #20]
 8004f5e:	9803      	ldr	r0, [sp, #12]
 8004f60:	f7fb f8da 	bl	8000118 <strlen>
 8004f64:	0005      	movs	r5, r0
 8004f66:	aa07      	add	r2, sp, #28
 8004f68:	0010      	movs	r0, r2
 8004f6a:	f7fb f8d5 	bl	8000118 <strlen>
 8004f6e:	3d01      	subs	r5, #1
 8004f70:	1a2a      	subs	r2, r5, r0
 8004f72:	9905      	ldr	r1, [sp, #20]
 8004f74:	484b      	ldr	r0, [pc, #300]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004f76:	f00f f944 	bl	8014202 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f7a:	9803      	ldr	r0, [sp, #12]
 8004f7c:	f7fb f8cc 	bl	8000118 <strlen>
 8004f80:	0005      	movs	r5, r0
 8004f82:	a807      	add	r0, sp, #28
 8004f84:	f7fb f8c8 	bl	8000118 <strlen>
 8004f88:	1a2b      	subs	r3, r5, r0
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2217      	movs	r2, #23
 8004f8e:	4651      	mov	r1, sl
 8004f90:	4658      	mov	r0, fp
 8004f92:	f004 fb6f 	bl	8009674 <BroadcastMessage>
					if(InGroup(myID,group))
 8004f96:	4b39      	ldr	r3, [pc, #228]	; (800507c <CLI_CommandParser+0x394>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4a44      	ldr	r2, [pc, #272]	; (80050b0 <CLI_CommandParser+0x3c8>)
 8004fa0:	5a9b      	ldrh	r3, [r3, r2]
 8004fa2:	464a      	mov	r2, r9
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	4113      	asrs	r3, r2
 8004fa8:	07db      	lsls	r3, r3, #31
 8004faa:	d406      	bmi.n	8004fba <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004fac:	ab07      	add	r3, sp, #28
 8004fae:	0022      	movs	r2, r4
 8004fb0:	4940      	ldr	r1, [pc, #256]	; (80050b4 <CLI_CommandParser+0x3cc>)
 8004fb2:	0020      	movs	r0, r4
 8004fb4:	f00f f8d0 	bl	8014158 <sprintf>
 8004fb8:	e6cf      	b.n	8004d5a <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004fba:	2299      	movs	r2, #153	; 0x99
 8004fbc:	0092      	lsls	r2, r2, #2
 8004fbe:	0021      	movs	r1, r4
 8004fc0:	9805      	ldr	r0, [sp, #20]
 8004fc2:	f009 f963 	bl	800e28c <FreeRTOS_CLIProcessCommand>
 8004fc6:	0006      	movs	r6, r0
 8004fc8:	e7f0      	b.n	8004fac <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004fca:	9803      	ldr	r0, [sp, #12]
 8004fcc:	f7fb f8a4 	bl	8000118 <strlen>
 8004fd0:	0006      	movs	r6, r0
 8004fd2:	ab07      	add	r3, sp, #28
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7fb f89f 	bl	8000118 <strlen>
 8004fda:	1e72      	subs	r2, r6, #1
 8004fdc:	1a12      	subs	r2, r2, r0
 8004fde:	0029      	movs	r1, r5
 8004fe0:	4830      	ldr	r0, [pc, #192]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004fe2:	f00f f90e 	bl	8014202 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004fe6:	9803      	ldr	r0, [sp, #12]
 8004fe8:	f7fb f896 	bl	8000118 <strlen>
 8004fec:	0005      	movs	r5, r0
 8004fee:	a807      	add	r0, sp, #28
 8004ff0:	f7fb f892 	bl	8000118 <strlen>
 8004ff4:	3d01      	subs	r5, #1
 8004ff6:	1a2a      	subs	r2, r5, r0
 8004ff8:	b292      	uxth	r2, r2
 8004ffa:	2117      	movs	r1, #23
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	f004 fb61 	bl	80096c4 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005002:	9a05      	ldr	r2, [sp, #20]
 8005004:	492c      	ldr	r1, [pc, #176]	; (80050b8 <CLI_CommandParser+0x3d0>)
 8005006:	0020      	movs	r0, r4
 8005008:	f00f f8a6 	bl	8014158 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 800500c:	7823      	ldrb	r3, [r4, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <CLI_CommandParser+0x330>
 8005012:	4643      	mov	r3, r8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005018:	0020      	movs	r0, r4
 800501a:	f7fb f87d 	bl	8000118 <strlen>
 800501e:	0002      	movs	r2, r0
 8005020:	2100      	movs	r1, #0
 8005022:	0020      	movs	r0, r4
 8005024:	f00e fe9e 	bl	8013d64 <memset>
 8005028:	e72c      	b.n	8004e84 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 800502a:	0020      	movs	r0, r4
 800502c:	f7fb f874 	bl	8000118 <strlen>
 8005030:	b282      	uxth	r2, r0
 8005032:	2301      	movs	r3, #1
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	3331      	adds	r3, #49	; 0x31
 8005038:	0021      	movs	r1, r4
 800503a:	9804      	ldr	r0, [sp, #16]
 800503c:	f008 ff62 	bl	800df04 <writePxMutex>
 8005040:	e7ea      	b.n	8005018 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005042:	4643      	mov	r3, r8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d100      	bne.n	800504a <CLI_CommandParser+0x362>
 8005048:	e68b      	b.n	8004d62 <CLI_CommandParser+0x7a>
 800504a:	e6b7      	b.n	8004dbc <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 800504c:	2301      	movs	r3, #1
 800504e:	425b      	negs	r3, r3
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	3333      	adds	r3, #51	; 0x33
 8005054:	2238      	movs	r2, #56	; 0x38
 8005056:	4919      	ldr	r1, [pc, #100]	; (80050bc <CLI_CommandParser+0x3d4>)
 8005058:	9804      	ldr	r0, [sp, #16]
 800505a:	f008 ff53 	bl	800df04 <writePxMutex>
}
 800505e:	e043      	b.n	80050e8 <CLI_CommandParser+0x400>
 8005060:	2000124c 	.word	0x2000124c
 8005064:	08018c00 	.word	0x08018c00
 8005068:	08018c54 	.word	0x08018c54
 800506c:	08018ca0 	.word	0x08018ca0
 8005070:	08018bfc 	.word	0x08018bfc
 8005074:	08018894 	.word	0x08018894
 8005078:	08018c5c 	.word	0x08018c5c
 800507c:	20001076 	.word	0x20001076
 8005080:	08018d40 	.word	0x08018d40
 8005084:	20006aa0 	.word	0x20006aa0
 8005088:	20000a77 	.word	0x20000a77
 800508c:	20001110 	.word	0x20001110
 8005090:	2000179a 	.word	0x2000179a
 8005094:	08018d6c 	.word	0x08018d6c
 8005098:	08018ca4 	.word	0x08018ca4
 800509c:	08018ccc 	.word	0x08018ccc
 80050a0:	20000cec 	.word	0x20000cec
 80050a4:	20000f38 	.word	0x20000f38
 80050a8:	08018cf4 	.word	0x08018cf4
 80050ac:	2000121e 	.word	0x2000121e
 80050b0:	20000ec0 	.word	0x20000ec0
 80050b4:	08018d14 	.word	0x08018d14
 80050b8:	08018d48 	.word	0x08018d48
 80050bc:	08018d8c 	.word	0x08018d8c
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80050c0:	0020      	movs	r0, r4
 80050c2:	f7fb f829 	bl	8000118 <strlen>
 80050c6:	0002      	movs	r2, r0
 80050c8:	2100      	movs	r1, #0
 80050ca:	0020      	movs	r0, r4
 80050cc:	f00e fe4a 	bl	8013d64 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 80050d0:	2209      	movs	r2, #9
 80050d2:	2100      	movs	r1, #0
 80050d4:	a807      	add	r0, sp, #28
 80050d6:	f00e fe45 	bl	8013d64 <memset>
	if(!recordSnippet && enableOutput)
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <CLI_CommandParser+0x420>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <CLI_CommandParser+0x400>
 80050e2:	4643      	mov	r3, r8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1b1      	bne.n	800504c <CLI_CommandParser+0x364>
}
 80050e8:	b00b      	add	sp, #44	; 0x2c
 80050ea:	bc3c      	pop	{r2, r3, r4, r5}
 80050ec:	4690      	mov	r8, r2
 80050ee:	4699      	mov	r9, r3
 80050f0:	46a2      	mov	sl, r4
 80050f2:	46ab      	mov	fp, r5
 80050f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80050f6:	0020      	movs	r0, r4
 80050f8:	f7fb f80e 	bl	8000118 <strlen>
 80050fc:	0002      	movs	r2, r0
 80050fe:	2100      	movs	r1, #0
 8005100:	0020      	movs	r0, r4
 8005102:	f00e fe2f 	bl	8013d64 <memset>
 8005106:	e7e3      	b.n	80050d0 <CLI_CommandParser+0x3e8>
 8005108:	2000124c 	.word	0x2000124c

0800510c <prvCLITask>:
void prvCLITask(void *pvParameters){
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	46de      	mov	lr, fp
 8005110:	4657      	mov	r7, sl
 8005112:	464e      	mov	r6, r9
 8005114:	b5c0      	push	{r6, r7, lr}
 8005116:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005118:	2101      	movs	r1, #1
 800511a:	4249      	negs	r1, r1
 800511c:	2001      	movs	r0, #1
 800511e:	f00a fd31 	bl	800fb84 <ulTaskNotifyTake>
	cRxedChar ='\0';
 8005122:	230f      	movs	r3, #15
 8005124:	aa02      	add	r2, sp, #8
 8005126:	4694      	mov	ip, r2
 8005128:	4463      	add	r3, ip
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800512e:	f009 f92b 	bl	800e388 <FreeRTOS_CLIGetOutputBuffer>
 8005132:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005134:	23e1      	movs	r3, #225	; 0xe1
 8005136:	031b      	lsls	r3, r3, #12
 8005138:	4a5f      	ldr	r2, [pc, #380]	; (80052b8 <prvCLITask+0x1ac>)
 800513a:	6892      	ldr	r2, [r2, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	d009      	beq.n	8005154 <prvCLITask+0x48>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005140:	2401      	movs	r4, #1
			if(port != PcPort)
 8005142:	4e5e      	ldr	r6, [pc, #376]	; (80052bc <prvCLITask+0x1b0>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005144:	001d      	movs	r5, r3
			if(port != PcPort)
 8005146:	7833      	ldrb	r3, [r6, #0]
 8005148:	42a3      	cmp	r3, r4
 800514a:	d12d      	bne.n	80051a8 <prvCLITask+0x9c>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800514c:	3401      	adds	r4, #1
 800514e:	b2e4      	uxtb	r4, r4
 8005150:	2c07      	cmp	r4, #7
 8005152:	d1f8      	bne.n	8005146 <prvCLITask+0x3a>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005154:	4b5a      	ldr	r3, [pc, #360]	; (80052c0 <prvCLITask+0x1b4>)
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	0053      	lsls	r3, r2, #1
 800515a:	189b      	adds	r3, r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4a59      	ldr	r2, [pc, #356]	; (80052c4 <prvCLITask+0x1b8>)
 8005160:	189b      	adds	r3, r3, r2
 8005162:	4a59      	ldr	r2, [pc, #356]	; (80052c8 <prvCLITask+0x1bc>)
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	4c59      	ldr	r4, [pc, #356]	; (80052cc <prvCLITask+0x1c0>)
 8005168:	4d54      	ldr	r5, [pc, #336]	; (80052bc <prvCLITask+0x1b0>)
 800516a:	7829      	ldrb	r1, [r5, #0]
 800516c:	9100      	str	r1, [sp, #0]
 800516e:	4958      	ldr	r1, [pc, #352]	; (80052d0 <prvCLITask+0x1c4>)
 8005170:	0020      	movs	r0, r4
 8005172:	f00e fff1 	bl	8014158 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005176:	22a4      	movs	r2, #164	; 0xa4
 8005178:	7828      	ldrb	r0, [r5, #0]
 800517a:	230a      	movs	r3, #10
 800517c:	0092      	lsls	r2, r2, #2
 800517e:	4955      	ldr	r1, [pc, #340]	; (80052d4 <prvCLITask+0x1c8>)
 8005180:	f008 fee8 	bl	800df54 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005184:	0020      	movs	r0, r4
 8005186:	f7fa ffc7 	bl	8000118 <strlen>
 800518a:	b282      	uxth	r2, r0
 800518c:	7828      	ldrb	r0, [r5, #0]
 800518e:	230a      	movs	r3, #10
 8005190:	0021      	movs	r1, r4
 8005192:	f008 fedf 	bl	800df54 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005196:	2300      	movs	r3, #0
 8005198:	469b      	mov	fp, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800519a:	4b48      	ldr	r3, [pc, #288]	; (80052bc <prvCLITask+0x1b0>)
 800519c:	469a      	mov	sl, r3
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <prvCLITask+0x1cc>)
 80051a0:	4699      	mov	r9, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80051a2:	001f      	movs	r7, r3
			if(UARTRxBuf[PcPort - 1][chr]){
 80051a4:	4656      	mov	r6, sl
 80051a6:	e066      	b.n	8005276 <prvCLITask+0x16a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80051a8:	0029      	movs	r1, r5
 80051aa:	0020      	movs	r0, r4
 80051ac:	f008 ff18 	bl	800dfe0 <UpdateBaudrate>
 80051b0:	e7cc      	b.n	800514c <prvCLITask+0x40>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 80051b2:	200f      	movs	r0, #15
 80051b4:	ad02      	add	r5, sp, #8
 80051b6:	46ac      	mov	ip, r5
 80051b8:	4460      	add	r0, ip
 80051ba:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 80051bc:	0198      	lsls	r0, r3, #6
 80051be:	4a47      	ldr	r2, [pc, #284]	; (80052dc <prvCLITask+0x1d0>)
 80051c0:	1812      	adds	r2, r2, r0
 80051c2:	2000      	movs	r0, #0
 80051c4:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 80051c6:	4a44      	ldr	r2, [pc, #272]	; (80052d8 <prvCLITask+0x1cc>)
 80051c8:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 80051ca:	240f      	movs	r4, #15
 80051cc:	ab02      	add	r3, sp, #8
 80051ce:	469c      	mov	ip, r3
 80051d0:	4464      	add	r4, ip
 80051d2:	4b3a      	ldr	r3, [pc, #232]	; (80052bc <prvCLITask+0x1b0>)
 80051d4:	7818      	ldrb	r0, [r3, #0]
 80051d6:	230a      	movs	r3, #10
 80051d8:	2201      	movs	r2, #1
 80051da:	0021      	movs	r1, r4
 80051dc:	f008 feba 	bl	800df54 <writePxITMutex>
		if(cRxedChar == '\r'){
 80051e0:	7823      	ldrb	r3, [r4, #0]
 80051e2:	2b0d      	cmp	r3, #13
 80051e4:	d028      	beq.n	8005238 <prvCLITask+0x12c>
			if(cRxedChar == '\n'){
 80051e6:	2b0a      	cmp	r3, #10
 80051e8:	d043      	beq.n	8005272 <prvCLITask+0x166>
			else if(cRxedChar == '\b'){
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d059      	beq.n	80052a2 <prvCLITask+0x196>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80051ee:	001a      	movs	r2, r3
 80051f0:	3a20      	subs	r2, #32
 80051f2:	2a5e      	cmp	r2, #94	; 0x5e
 80051f4:	d83d      	bhi.n	8005272 <prvCLITask+0x166>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 80051f6:	465a      	mov	r2, fp
 80051f8:	2a31      	cmp	r2, #49	; 0x31
 80051fa:	dc3a      	bgt.n	8005272 <prvCLITask+0x166>
						cInputString[cInputIndex] =cRxedChar;
 80051fc:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <prvCLITask+0x1d4>)
 80051fe:	4659      	mov	r1, fp
 8005200:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005202:	465b      	mov	r3, fp
 8005204:	3301      	adds	r3, #1
 8005206:	b25b      	sxtb	r3, r3
 8005208:	469b      	mov	fp, r3
 800520a:	e032      	b.n	8005272 <prvCLITask+0x166>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800520c:	2200      	movs	r2, #0
 800520e:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8005210:	f00a ff92 	bl	8010138 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005214:	3c3e      	subs	r4, #62	; 0x3e
			if(UARTRxBuf[PcPort - 1][chr]){
 8005216:	7833      	ldrb	r3, [r6, #0]
 8005218:	3b01      	subs	r3, #1
 800521a:	0021      	movs	r1, r4
 800521c:	019a      	lsls	r2, r3, #6
 800521e:	18aa      	adds	r2, r5, r2
 8005220:	5d12      	ldrb	r2, [r2, r4]
 8005222:	2a00      	cmp	r2, #0
 8005224:	d1c5      	bne.n	80051b2 <prvCLITask+0xa6>
			if(chr == MSG_RX_BUF_SIZE - 1){
 8005226:	2c3f      	cmp	r4, #63	; 0x3f
 8005228:	d0f0      	beq.n	800520c <prvCLITask+0x100>
			taskYIELD();
 800522a:	f00a ff85 	bl	8010138 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800522e:	3401      	adds	r4, #1
 8005230:	b2a4      	uxth	r4, r4
 8005232:	2c3f      	cmp	r4, #63	; 0x3f
 8005234:	d9ef      	bls.n	8005216 <prvCLITask+0x10a>
 8005236:	e7c8      	b.n	80051ca <prvCLITask+0xbe>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <prvCLITask+0x1b0>)
 800523a:	7818      	ldrb	r0, [r3, #0]
 800523c:	230a      	movs	r3, #10
 800523e:	2202      	movs	r2, #2
 8005240:	4928      	ldr	r1, [pc, #160]	; (80052e4 <prvCLITask+0x1d8>)
 8005242:	f008 fe87 	bl	800df54 <writePxITMutex>
			if(cInputIndex == 0){
 8005246:	465b      	mov	r3, fp
 8005248:	2b00      	cmp	r3, #0
 800524a:	d025      	beq.n	8005298 <prvCLITask+0x18c>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800524c:	4c24      	ldr	r4, [pc, #144]	; (80052e0 <prvCLITask+0x1d4>)
 800524e:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <prvCLITask+0x1b0>)
 8005250:	7818      	ldrb	r0, [r3, #0]
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	0022      	movs	r2, r4
 8005256:	2101      	movs	r1, #1
 8005258:	f7ff fd46 	bl	8004ce8 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 800525c:	0021      	movs	r1, r4
 800525e:	4822      	ldr	r0, [pc, #136]	; (80052e8 <prvCLITask+0x1dc>)
 8005260:	f00e ffb6 	bl	80141d0 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005264:	2232      	movs	r2, #50	; 0x32
 8005266:	2100      	movs	r1, #0
 8005268:	0020      	movs	r0, r4
 800526a:	f00e fd7b 	bl	8013d64 <memset>
			cInputIndex =0;
 800526e:	2300      	movs	r3, #0
 8005270:	469b      	mov	fp, r3
		taskYIELD();
 8005272:	f00a ff61 	bl	8010138 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005276:	4653      	mov	r3, sl
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	3b01      	subs	r3, #1
 800527c:	464a      	mov	r2, r9
 800527e:	5cd2      	ldrb	r2, [r2, r3]
 8005280:	b294      	uxth	r4, r2
 8005282:	2c3f      	cmp	r4, #63	; 0x3f
 8005284:	d8a1      	bhi.n	80051ca <prvCLITask+0xbe>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005286:	0011      	movs	r1, r2
 8005288:	019d      	lsls	r5, r3, #6
 800528a:	4814      	ldr	r0, [pc, #80]	; (80052dc <prvCLITask+0x1d0>)
 800528c:	1940      	adds	r0, r0, r5
 800528e:	5c82      	ldrb	r2, [r0, r2]
 8005290:	2a00      	cmp	r2, #0
 8005292:	d18e      	bne.n	80051b2 <prvCLITask+0xa6>
 8005294:	4d11      	ldr	r5, [pc, #68]	; (80052dc <prvCLITask+0x1d0>)
 8005296:	e7c6      	b.n	8005226 <prvCLITask+0x11a>
				strcpy((char* )cInputString,(char* )cLastInputString);
 8005298:	4913      	ldr	r1, [pc, #76]	; (80052e8 <prvCLITask+0x1dc>)
 800529a:	4811      	ldr	r0, [pc, #68]	; (80052e0 <prvCLITask+0x1d4>)
 800529c:	f00e ff98 	bl	80141d0 <strcpy>
 80052a0:	e7d4      	b.n	800524c <prvCLITask+0x140>
				if(cInputIndex > 0){
 80052a2:	465b      	mov	r3, fp
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	dde4      	ble.n	8005272 <prvCLITask+0x166>
					cInputIndex--;
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	469b      	mov	fp, r3
					cInputString[cInputIndex] ='\0';
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <prvCLITask+0x1d4>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	4659      	mov	r1, fp
 80052b4:	545a      	strb	r2, [r3, r1]
 80052b6:	e7dc      	b.n	8005272 <prvCLITask+0x166>
 80052b8:	20006aa0 	.word	0x20006aa0
 80052bc:	20000a77 	.word	0x20000a77
 80052c0:	20000050 	.word	0x20000050
 80052c4:	080188e4 	.word	0x080188e4
 80052c8:	20001076 	.word	0x20001076
 80052cc:	20001220 	.word	0x20001220
 80052d0:	08018df8 	.word	0x08018df8
 80052d4:	08018e24 	.word	0x08018e24
 80052d8:	20001450 	.word	0x20001450
 80052dc:	200012d0 	.word	0x200012d0
 80052e0:	20001150 	.word	0x20001150
 80052e4:	0801a6e4 	.word	0x0801a6e4
 80052e8:	200011ec 	.word	0x200011ec

080052ec <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80052f0:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <ParseSnippetCommand+0x78>)
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	3a01      	subs	r2, #1
 80052f6:	0093      	lsls	r3, r2, #2
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <ParseSnippetCommand+0x7c>)
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02c      	beq.n	8005360 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005306:	4b19      	ldr	r3, [pc, #100]	; (800536c <ParseSnippetCommand+0x80>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d014      	beq.n	8005338 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800530e:	4b17      	ldr	r3, [pc, #92]	; (800536c <ParseSnippetCommand+0x80>)
 8005310:	681d      	ldr	r5, [r3, #0]
 8005312:	782b      	ldrb	r3, [r5, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005318:	2113      	movs	r1, #19
 800531a:	0028      	movs	r0, r5
 800531c:	f00e ff4a 	bl	80141b4 <strchr>
 8005320:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8005322:	d011      	beq.n	8005348 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005324:	1b42      	subs	r2, r0, r5
 8005326:	0029      	movs	r1, r5
 8005328:	0020      	movs	r0, r4
 800532a:	f00e ff6a 	bl	8014202 <strncpy>
		ptrStart =ptrEnd + 1;
 800532e:	3601      	adds	r6, #1
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <ParseSnippetCommand+0x80>)
 8005332:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005334:	2001      	movs	r0, #1
 8005336:	e006      	b.n	8005346 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <ParseSnippetCommand+0x80>)
 800533a:	6018      	str	r0, [r3, #0]
 800533c:	e7e7      	b.n	800530e <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <ParseSnippetCommand+0x80>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
		return false;
 8005344:	2000      	movs	r0, #0
}
 8005346:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005348:	0029      	movs	r1, r5
 800534a:	0020      	movs	r0, r4
 800534c:	f00e ff40 	bl	80141d0 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005350:	0020      	movs	r0, r4
 8005352:	f7fa fee1 	bl	8000118 <strlen>
 8005356:	182d      	adds	r5, r5, r0
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <ParseSnippetCommand+0x80>)
 800535a:	601d      	str	r5, [r3, #0]
	return true;
 800535c:	2001      	movs	r0, #1
 800535e:	e7f2      	b.n	8005346 <ParseSnippetCommand+0x5a>
		return false;
 8005360:	2000      	movs	r0, #0
 8005362:	e7f0      	b.n	8005346 <ParseSnippetCommand+0x5a>
 8005364:	2000121f 	.word	0x2000121f
 8005368:	20006abc 	.word	0x20006abc
 800536c:	20001248 	.word	0x20001248

08005370 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8005370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005372:	b083      	sub	sp, #12
 8005374:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005376:	0083      	lsls	r3, r0, #2
 8005378:	181b      	adds	r3, r3, r0
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4a3f      	ldr	r2, [pc, #252]	; (800547c <CheckSnippetCondition+0x10c>)
 800537e:	5c9b      	ldrb	r3, [r3, r2]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d003      	beq.n	800538c <CheckSnippetCondition+0x1c>
 8005384:	2b03      	cmp	r3, #3
 8005386:	d015      	beq.n	80053b4 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 8005388:	2000      	movs	r0, #0
 800538a:	e011      	b.n	80053b0 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800538c:	493b      	ldr	r1, [pc, #236]	; (800547c <CheckSnippetCondition+0x10c>)
 800538e:	0083      	lsls	r3, r0, #2
 8005390:	181a      	adds	r2, r3, r0
 8005392:	0092      	lsls	r2, r2, #2
 8005394:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005396:	7890      	ldrb	r0, [r2, #2]
 8005398:	00c2      	lsls	r2, r0, #3
 800539a:	1812      	adds	r2, r2, r0
 800539c:	191b      	adds	r3, r3, r4
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	18cb      	adds	r3, r1, r3
 80053a2:	4937      	ldr	r1, [pc, #220]	; (8005480 <CheckSnippetCondition+0x110>)
 80053a4:	5c50      	ldrb	r0, [r2, r1]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	1ac0      	subs	r0, r0, r3
 80053aa:	4243      	negs	r3, r0
 80053ac:	4158      	adcs	r0, r3
 80053ae:	b2c0      	uxtb	r0, r0
}
 80053b0:	b003      	add	sp, #12
 80053b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80053b4:	4e31      	ldr	r6, [pc, #196]	; (800547c <CheckSnippetCondition+0x10c>)
 80053b6:	0085      	lsls	r5, r0, #2
 80053b8:	182b      	adds	r3, r5, r0
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	18f3      	adds	r3, r6, r3
 80053be:	78da      	ldrb	r2, [r3, #3]
 80053c0:	3a01      	subs	r2, #1
 80053c2:	0053      	lsls	r3, r2, #1
 80053c4:	189b      	adds	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <CheckSnippetCondition+0x114>)
 80053ca:	589b      	ldr	r3, [r3, r2]
 80053cc:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80053ce:	1829      	adds	r1, r5, r0
 80053d0:	0089      	lsls	r1, r1, #2
 80053d2:	3106      	adds	r1, #6
 80053d4:	1989      	adds	r1, r1, r6
 80053d6:	2204      	movs	r2, #4
 80053d8:	a801      	add	r0, sp, #4
 80053da:	f00e fcba 	bl	8013d52 <memcpy>
			switch(snippets[index].cond.mathOperator){
 80053de:	192d      	adds	r5, r5, r4
 80053e0:	00ad      	lsls	r5, r5, #2
 80053e2:	1975      	adds	r5, r6, r5
 80053e4:	786b      	ldrb	r3, [r5, #1]
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d83f      	bhi.n	800546a <CheckSnippetCondition+0xfa>
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4a26      	ldr	r2, [pc, #152]	; (8005488 <CheckSnippetCondition+0x118>)
 80053ee:	58d3      	ldr	r3, [r2, r3]
 80053f0:	469f      	mov	pc, r3
					if(flt1 == flt2)
 80053f2:	1c39      	adds	r1, r7, #0
 80053f4:	9801      	ldr	r0, [sp, #4]
 80053f6:	f7fb f86b 	bl	80004d0 <__aeabi_fcmpeq>
 80053fa:	1e43      	subs	r3, r0, #1
 80053fc:	4198      	sbcs	r0, r3
 80053fe:	e7d7      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005400:	1c39      	adds	r1, r7, #0
 8005402:	9801      	ldr	r0, [sp, #4]
 8005404:	f7fb f86a 	bl	80004dc <__aeabi_fcmplt>
 8005408:	1e43      	subs	r3, r0, #1
 800540a:	4198      	sbcs	r0, r3
 800540c:	e7d0      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 800540e:	1c39      	adds	r1, r7, #0
 8005410:	9801      	ldr	r0, [sp, #4]
 8005412:	f7fb f877 	bl	8000504 <__aeabi_fcmpgt>
 8005416:	2800      	cmp	r0, #0
 8005418:	d029      	beq.n	800546e <CheckSnippetCondition+0xfe>
 800541a:	2100      	movs	r1, #0
 800541c:	1c38      	adds	r0, r7, #0
 800541e:	f7fb f857 	bl	80004d0 <__aeabi_fcmpeq>
 8005422:	4243      	negs	r3, r0
 8005424:	4158      	adcs	r0, r3
 8005426:	e7c3      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 8005428:	1c39      	adds	r1, r7, #0
 800542a:	9801      	ldr	r0, [sp, #4]
 800542c:	f7fb f860 	bl	80004f0 <__aeabi_fcmple>
 8005430:	1e43      	subs	r3, r0, #1
 8005432:	4198      	sbcs	r0, r3
 8005434:	e7bc      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005436:	1c39      	adds	r1, r7, #0
 8005438:	9801      	ldr	r0, [sp, #4]
 800543a:	f7fb f86d 	bl	8000518 <__aeabi_fcmpge>
 800543e:	2800      	cmp	r0, #0
 8005440:	d017      	beq.n	8005472 <CheckSnippetCondition+0x102>
 8005442:	2100      	movs	r1, #0
 8005444:	1c38      	adds	r0, r7, #0
 8005446:	f7fb f843 	bl	80004d0 <__aeabi_fcmpeq>
 800544a:	4243      	negs	r3, r0
 800544c:	4158      	adcs	r0, r3
 800544e:	e7af      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005450:	1c39      	adds	r1, r7, #0
 8005452:	9801      	ldr	r0, [sp, #4]
 8005454:	f7fb f83c 	bl	80004d0 <__aeabi_fcmpeq>
 8005458:	2800      	cmp	r0, #0
 800545a:	d10c      	bne.n	8005476 <CheckSnippetCondition+0x106>
 800545c:	2100      	movs	r1, #0
 800545e:	1c38      	adds	r0, r7, #0
 8005460:	f7fb f836 	bl	80004d0 <__aeabi_fcmpeq>
 8005464:	4243      	negs	r3, r0
 8005466:	4158      	adcs	r0, r3
 8005468:	e7a2      	b.n	80053b0 <CheckSnippetCondition+0x40>
	return false;
 800546a:	2000      	movs	r0, #0
 800546c:	e7a0      	b.n	80053b0 <CheckSnippetCondition+0x40>
 800546e:	2000      	movs	r0, #0
 8005470:	e79e      	b.n	80053b0 <CheckSnippetCondition+0x40>
 8005472:	2000      	movs	r0, #0
 8005474:	e79c      	b.n	80053b0 <CheckSnippetCondition+0x40>
 8005476:	2000      	movs	r0, #0
 8005478:	e79a      	b.n	80053b0 <CheckSnippetCondition+0x40>
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	20006abc 	.word	0x20006abc
 8005480:	2000151c 	.word	0x2000151c
 8005484:	20000084 	.word	0x20000084
 8005488:	08018be0 	.word	0x08018be0

0800548c <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800548e:	f008 ff7b 	bl	800e388 <FreeRTOS_CLIGetOutputBuffer>
 8005492:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005494:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <ExecuteSnippet+0x7c>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d032      	beq.n	8005502 <ExecuteSnippet+0x76>
 800549c:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 800549e:	4f1b      	ldr	r7, [pc, #108]	; (800550c <ExecuteSnippet+0x80>)
 80054a0:	e01a      	b.n	80054d8 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80054a2:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <ExecuteSnippet+0x84>)
 80054a4:	7818      	ldrb	r0, [r3, #0]
 80054a6:	002b      	movs	r3, r5
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <ExecuteSnippet+0x88>)
 80054aa:	2100      	movs	r1, #0
 80054ac:	f7ff fc1c 	bl	8004ce8 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80054b0:	0028      	movs	r0, r5
 80054b2:	f7fa fe31 	bl	8000118 <strlen>
 80054b6:	0002      	movs	r2, r0
 80054b8:	2100      	movs	r1, #0
 80054ba:	0028      	movs	r0, r5
 80054bc:	f00e fc52 	bl	8013d64 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80054c0:	4914      	ldr	r1, [pc, #80]	; (8005514 <ExecuteSnippet+0x88>)
 80054c2:	68f0      	ldr	r0, [r6, #12]
 80054c4:	f7ff ff12 	bl	80052ec <ParseSnippetCommand>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d1ea      	bne.n	80054a2 <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 80054cc:	3401      	adds	r4, #1
 80054ce:	b2a4      	uxth	r4, r4
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <ExecuteSnippet+0x7c>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	d914      	bls.n	8005502 <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 80054d8:	00a3      	lsls	r3, r4, #2
 80054da:	191b      	adds	r3, r3, r4
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	7c1b      	ldrb	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f2      	beq.n	80054cc <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80054e6:	b2e0      	uxtb	r0, r4
 80054e8:	f7ff ff42 	bl	8005370 <CheckSnippetCondition>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d0ed      	beq.n	80054cc <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <ExecuteSnippet+0x8c>)
 80054f2:	2220      	movs	r2, #32
 80054f4:	719a      	strb	r2, [r3, #6]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80054f6:	00a3      	lsls	r3, r4, #2
 80054f8:	191e      	adds	r6, r3, r4
 80054fa:	00b6      	lsls	r6, r6, #2
 80054fc:	4b03      	ldr	r3, [pc, #12]	; (800550c <ExecuteSnippet+0x80>)
 80054fe:	199e      	adds	r6, r3, r6
 8005500:	e7de      	b.n	80054c0 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 8005502:	2000      	movs	r0, #0
 8005504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	2000121f 	.word	0x2000121f
 800550c:	20006abc 	.word	0x20006abc
 8005510:	20000a77 	.word	0x20000a77
 8005514:	200011b8 	.word	0x200011b8
 8005518:	20006aa0 	.word	0x20006aa0

0800551c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800551c:	2000      	movs	r0, #0
 800551e:	4770      	bx	lr

08005520 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	0004      	movs	r4, r0
 8005526:	0015      	movs	r5, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005528:	2300      	movs	r3, #0
 800552a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800552c:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800552e:	2800      	cmp	r0, #0
 8005530:	d101      	bne.n	8005536 <setBaudrateCommand+0x16>
 8005532:	b672      	cpsid	i
 8005534:	e7fe      	b.n	8005534 <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005536:	aa01      	add	r2, sp, #4
 8005538:	2101      	movs	r1, #1
 800553a:	0028      	movs	r0, r5
 800553c:	f008 ff28 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005540:	2300      	movs	r3, #0
 8005542:	56c3      	ldrsb	r3, [r0, r3]
 8005544:	2b70      	cmp	r3, #112	; 0x70
 8005546:	d00c      	beq.n	8005562 <setBaudrateCommand+0x42>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005548:	466a      	mov	r2, sp
 800554a:	2102      	movs	r1, #2
 800554c:	0028      	movs	r0, r5
 800554e:	f008 ff1f 	bl	800e390 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005552:	f00e f974 	bl	801383e <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005556:	2213      	movs	r2, #19
 8005558:	490f      	ldr	r1, [pc, #60]	; (8005598 <setBaudrateCommand+0x78>)
 800555a:	0020      	movs	r0, r4
 800555c:	f00e fbf9 	bl	8013d52 <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005560:	e016      	b.n	8005590 <setBaudrateCommand+0x70>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005562:	3001      	adds	r0, #1
 8005564:	f00e f96b 	bl	801383e <atol>
 8005568:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800556a:	466a      	mov	r2, sp
 800556c:	2102      	movs	r1, #2
 800556e:	0028      	movs	r0, r5
 8005570:	f008 ff0e 	bl	800e390 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005574:	f00e f963 	bl	801383e <atol>
 8005578:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 800557a:	b2f0      	uxtb	r0, r6
 800557c:	0029      	movs	r1, r5
 800557e:	f008 fd2f 	bl	800dfe0 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005582:	23ff      	movs	r3, #255	; 0xff
 8005584:	4033      	ands	r3, r6
 8005586:	002a      	movs	r2, r5
 8005588:	4904      	ldr	r1, [pc, #16]	; (800559c <setBaudrateCommand+0x7c>)
 800558a:	0020      	movs	r0, r4
 800558c:	f00e fde4 	bl	8014158 <sprintf>
}
 8005590:	2000      	movs	r0, #0
 8005592:	b002      	add	sp, #8
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	08019ab0 	.word	0x08019ab0
 800559c:	08019a88 	.word	0x08019a88

080055a0 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055a0:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d101      	bne.n	80055aa <flashsizeCommand+0xa>
 80055a6:	b672      	cpsid	i
 80055a8:	e7fe      	b.n	80055a8 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80055aa:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <flashsizeCommand+0x18>)
 80055ac:	881a      	ldrh	r2, [r3, #0]
 80055ae:	4903      	ldr	r1, [pc, #12]	; (80055bc <flashsizeCommand+0x1c>)
 80055b0:	f00e fdd2 	bl	8014158 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80055b4:	2000      	movs	r0, #0
 80055b6:	bd10      	pop	{r4, pc}
 80055b8:	1ffff7cc 	.word	0x1ffff7cc
 80055bc:	0801947c 	.word	0x0801947c

080055c0 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055c0:	b510      	push	{r4, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	0004      	movs	r4, r0
 80055c6:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055d0:	2c00      	cmp	r4, #0
 80055d2:	d101      	bne.n	80055d8 <GetReadPrecentageCommand+0x18>
 80055d4:	b672      	cpsid	i
 80055d6:	e7fe      	b.n	80055d6 <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d8:	aa01      	add	r2, sp, #4
 80055da:	2101      	movs	r1, #1
 80055dc:	f008 fed8 	bl	800e390 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80055e0:	7803      	ldrb	r3, [r0, #0]
 80055e2:	3b32      	subs	r3, #50	; 0x32
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d907      	bls.n	80055f8 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80055e8:	2215      	movs	r2, #21
 80055ea:	490b      	ldr	r1, [pc, #44]	; (8005618 <GetReadPrecentageCommand+0x58>)
 80055ec:	0020      	movs	r0, r4
 80055ee:	f00e fbb0 	bl	8013d52 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80055f2:	2000      	movs	r0, #0
 80055f4:	b002      	add	sp, #8
 80055f6:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80055f8:	f00e f921 	bl	801383e <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80055fc:	b2c0      	uxtb	r0, r0
 80055fe:	4669      	mov	r1, sp
 8005600:	f003 f98a 	bl	8008918 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005604:	9800      	ldr	r0, [sp, #0]
 8005606:	f7fd fa8d 	bl	8002b24 <__aeabi_f2d>
 800560a:	0002      	movs	r2, r0
 800560c:	000b      	movs	r3, r1
 800560e:	4903      	ldr	r1, [pc, #12]	; (800561c <GetReadPrecentageCommand+0x5c>)
 8005610:	0020      	movs	r0, r4
 8005612:	f00e fda1 	bl	8014158 <sprintf>
 8005616:	e7ec      	b.n	80055f2 <GetReadPrecentageCommand+0x32>
 8005618:	08019178 	.word	0x08019178
 800561c:	08019154 	.word	0x08019154

08005620 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005620:	b510      	push	{r4, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005626:	2300      	movs	r3, #0
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800562c:	2800      	cmp	r0, #0
 800562e:	d101      	bne.n	8005634 <ReadVrefCommand+0x14>
 8005630:	b672      	cpsid	i
 8005632:	e7fe      	b.n	8005632 <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005634:	4669      	mov	r1, sp
 8005636:	a801      	add	r0, sp, #4
 8005638:	f003 f8b0 	bl	800879c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800563c:	a901      	add	r1, sp, #4
 800563e:	0020      	movs	r0, r4
 8005640:	f00e fdc6 	bl	80141d0 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005644:	9800      	ldr	r0, [sp, #0]
 8005646:	f7fd fa6d 	bl	8002b24 <__aeabi_f2d>
 800564a:	0002      	movs	r2, r0
 800564c:	000b      	movs	r3, r1
 800564e:	4903      	ldr	r1, [pc, #12]	; (800565c <ReadVrefCommand+0x3c>)
 8005650:	0020      	movs	r0, r4
 8005652:	f00e fd81 	bl	8014158 <sprintf>
}
 8005656:	2000      	movs	r0, #0
 8005658:	b002      	add	sp, #8
 800565a:	bd10      	pop	{r4, pc}
 800565c:	080191c4 	.word	0x080191c4

08005660 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005660:	b510      	push	{r4, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005666:	2300      	movs	r3, #0
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800566c:	2800      	cmp	r0, #0
 800566e:	d101      	bne.n	8005674 <ReadTempCommand+0x14>
 8005670:	b672      	cpsid	i
 8005672:	e7fe      	b.n	8005672 <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005674:	4669      	mov	r1, sp
 8005676:	a801      	add	r0, sp, #4
 8005678:	f003 f890 	bl	800879c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800567c:	a901      	add	r1, sp, #4
 800567e:	0020      	movs	r0, r4
 8005680:	f00e fda6 	bl	80141d0 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005684:	9801      	ldr	r0, [sp, #4]
 8005686:	f7fd fa4d 	bl	8002b24 <__aeabi_f2d>
 800568a:	0002      	movs	r2, r0
 800568c:	000b      	movs	r3, r1
 800568e:	4903      	ldr	r1, [pc, #12]	; (800569c <ReadTempCommand+0x3c>)
 8005690:	0020      	movs	r0, r4
 8005692:	f00e fd61 	bl	8014158 <sprintf>
}
 8005696:	2000      	movs	r0, #0
 8005698:	b002      	add	sp, #8
 800569a:	bd10      	pop	{r4, pc}
 800569c:	08019190 	.word	0x08019190

080056a0 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	0004      	movs	r4, r0
 80056a6:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80056ac:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d101      	bne.n	80056ba <ADCReadCommand+0x1a>
 80056b6:	b672      	cpsid	i
 80056b8:	e7fe      	b.n	80056b8 <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80056ba:	aa03      	add	r2, sp, #12
 80056bc:	2101      	movs	r1, #1
 80056be:	0030      	movs	r0, r6
 80056c0:	f008 fe66 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80056c4:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056c6:	aa02      	add	r2, sp, #8
 80056c8:	2102      	movs	r1, #2
 80056ca:	0030      	movs	r0, r6
 80056cc:	f008 fe60 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80056d0:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80056d2:	782b      	ldrb	r3, [r5, #0]
 80056d4:	3b32      	subs	r3, #50	; 0x32
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d907      	bls.n	80056ea <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80056da:	2215      	movs	r2, #21
 80056dc:	4919      	ldr	r1, [pc, #100]	; (8005744 <ADCReadCommand+0xa4>)
 80056de:	0020      	movs	r0, r4
 80056e0:	f00e fb37 	bl	8013d52 <memcpy>
}
 80056e4:	2000      	movs	r0, #0
 80056e6:	b004      	add	sp, #16
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80056ea:	0028      	movs	r0, r5
 80056ec:	f00e f8a7 	bl	801383e <atol>
 80056f0:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80056f2:	4915      	ldr	r1, [pc, #84]	; (8005748 <ADCReadCommand+0xa8>)
 80056f4:	0030      	movs	r0, r6
 80056f6:	f7fa fd05 	bl	8000104 <strcmp>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d005      	beq.n	800570a <ADCReadCommand+0x6a>
 80056fe:	4913      	ldr	r1, [pc, #76]	; (800574c <ADCReadCommand+0xac>)
 8005700:	0030      	movs	r0, r6
 8005702:	f7fa fcff 	bl	8000104 <strcmp>
 8005706:	2800      	cmp	r0, #0
 8005708:	d116      	bne.n	8005738 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 800570a:	4e0f      	ldr	r6, [pc, #60]	; (8005748 <ADCReadCommand+0xa8>)
 800570c:	0031      	movs	r1, r6
 800570e:	0028      	movs	r0, r5
 8005710:	f003 f9cc 	bl	8008aac <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005714:	aa01      	add	r2, sp, #4
 8005716:	0031      	movs	r1, r6
 8005718:	0028      	movs	r0, r5
 800571a:	f003 f9f5 	bl	8008b08 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800571e:	a901      	add	r1, sp, #4
 8005720:	0020      	movs	r0, r4
 8005722:	f00e fd55 	bl	80141d0 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005726:	9801      	ldr	r0, [sp, #4]
 8005728:	f7fa ff4a 	bl	80005c0 <__aeabi_f2uiz>
 800572c:	b282      	uxth	r2, r0
 800572e:	4908      	ldr	r1, [pc, #32]	; (8005750 <ADCReadCommand+0xb0>)
 8005730:	0020      	movs	r0, r4
 8005732:	f00e fd11 	bl	8014158 <sprintf>
 8005736:	e7d5      	b.n	80056e4 <ADCReadCommand+0x44>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005738:	2212      	movs	r2, #18
 800573a:	4906      	ldr	r1, [pc, #24]	; (8005754 <ADCReadCommand+0xb4>)
 800573c:	0020      	movs	r0, r4
 800573e:	f00e fb08 	bl	8013d52 <memcpy>
 8005742:	e7cf      	b.n	80056e4 <ADCReadCommand+0x44>
 8005744:	08019178 	.word	0x08019178
 8005748:	08019104 	.word	0x08019104
 800574c:	08019108 	.word	0x08019108
 8005750:	08019110 	.word	0x08019110
 8005754:	08019120 	.word	0x08019120

08005758 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575a:	46d6      	mov	lr, sl
 800575c:	4647      	mov	r7, r8
 800575e:	b580      	push	{r7, lr}
 8005760:	b085      	sub	sp, #20
 8005762:	0004      	movs	r4, r0
 8005764:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005766:	2300      	movs	r3, #0
 8005768:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 800576a:	4b62      	ldr	r3, [pc, #392]	; (80058f4 <testportCommand+0x19c>)
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	ab02      	add	r3, sp, #8
 8005770:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 8005772:	2c00      	cmp	r4, #0
 8005774:	d101      	bne.n	800577a <testportCommand+0x22>
 8005776:	b672      	cpsid	i
 8005778:	e7fe      	b.n	8005778 <testportCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800577a:	aa03      	add	r2, sp, #12
 800577c:	2101      	movs	r1, #1
 800577e:	f008 fe07 	bl	800e390 <FreeRTOS_CLIGetParameter>
 8005782:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005784:	495c      	ldr	r1, [pc, #368]	; (80058f8 <testportCommand+0x1a0>)
 8005786:	f7fa fcbd 	bl	8000104 <strcmp>
 800578a:	2800      	cmp	r0, #0
 800578c:	d173      	bne.n	8005876 <testportCommand+0x11e>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 800578e:	4b5b      	ldr	r3, [pc, #364]	; (80058fc <testportCommand+0x1a4>)
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	4b5b      	ldr	r3, [pc, #364]	; (8005900 <testportCommand+0x1a8>)
 8005794:	189b      	adds	r3, r3, r2
 8005796:	3b01      	subs	r3, #1
 8005798:	781e      	ldrb	r6, [r3, #0]
 800579a:	2501      	movs	r5, #1
			if(PcPort != ports){
 800579c:	4b57      	ldr	r3, [pc, #348]	; (80058fc <testportCommand+0x1a4>)
 800579e:	4698      	mov	r8, r3
 80057a0:	e015      	b.n	80057ce <testportCommand+0x76>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80057a2:	002a      	movs	r2, r5
 80057a4:	4957      	ldr	r1, [pc, #348]	; (8005904 <testportCommand+0x1ac>)
 80057a6:	0020      	movs	r0, r4
 80057a8:	f00e fcd6 	bl	8014158 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80057ac:	0020      	movs	r0, r4
 80057ae:	f7fa fcb3 	bl	8000118 <strlen>
 80057b2:	b282      	uxth	r2, r0
 80057b4:	4b51      	ldr	r3, [pc, #324]	; (80058fc <testportCommand+0x1a4>)
 80057b6:	7818      	ldrb	r0, [r3, #0]
 80057b8:	2364      	movs	r3, #100	; 0x64
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	3b5a      	subs	r3, #90	; 0x5a
 80057be:	0021      	movs	r1, r4
 80057c0:	f008 fba0 	bl	800df04 <writePxMutex>
 80057c4:	e02f      	b.n	8005826 <testportCommand+0xce>
 80057c6:	3501      	adds	r5, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80057c8:	2d07      	cmp	r5, #7
 80057ca:	d100      	bne.n	80057ce <testportCommand+0x76>
 80057cc:	e07f      	b.n	80058ce <testportCommand+0x176>
 80057ce:	b2eb      	uxtb	r3, r5
 80057d0:	469a      	mov	sl, r3
			if(PcPort != ports){
 80057d2:	4643      	mov	r3, r8
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	4553      	cmp	r3, sl
 80057d8:	d0f5      	beq.n	80057c6 <testportCommand+0x6e>
				WriteVaule[0] =rand();
 80057da:	f00e fadb 	bl	8013d94 <rand>
 80057de:	af02      	add	r7, sp, #8
 80057e0:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 80057e2:	2364      	movs	r3, #100	; 0x64
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	3b5a      	subs	r3, #90	; 0x5a
 80057e8:	2201      	movs	r2, #1
 80057ea:	0039      	movs	r1, r7
 80057ec:	4650      	mov	r0, sl
 80057ee:	f008 fb89 	bl	800df04 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80057f2:	4650      	mov	r0, sl
 80057f4:	f008 fb64 	bl	800dec0 <GetUart>
 80057f8:	6803      	ldr	r3, [r0, #0]
 80057fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 80057fc:	783a      	ldrb	r2, [r7, #0]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	429a      	cmp	r2, r3
 8005802:	d0ce      	beq.n	80057a2 <testportCommand+0x4a>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005804:	002a      	movs	r2, r5
 8005806:	4940      	ldr	r1, [pc, #256]	; (8005908 <testportCommand+0x1b0>)
 8005808:	0020      	movs	r0, r4
 800580a:	f00e fca5 	bl	8014158 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800580e:	0020      	movs	r0, r4
 8005810:	f7fa fc82 	bl	8000118 <strlen>
 8005814:	b282      	uxth	r2, r0
 8005816:	4b39      	ldr	r3, [pc, #228]	; (80058fc <testportCommand+0x1a4>)
 8005818:	7818      	ldrb	r0, [r3, #0]
 800581a:	2364      	movs	r3, #100	; 0x64
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	3b5a      	subs	r3, #90	; 0x5a
 8005820:	0021      	movs	r1, r4
 8005822:	f008 fb6f 	bl	800df04 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005826:	2254      	movs	r2, #84	; 0x54
 8005828:	4938      	ldr	r1, [pc, #224]	; (800590c <testportCommand+0x1b4>)
 800582a:	0020      	movs	r0, r4
 800582c:	f00e fa91 	bl	8013d52 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005830:	0020      	movs	r0, r4
 8005832:	f7fa fc71 	bl	8000118 <strlen>
 8005836:	b282      	uxth	r2, r0
 8005838:	4b30      	ldr	r3, [pc, #192]	; (80058fc <testportCommand+0x1a4>)
 800583a:	7818      	ldrb	r0, [r3, #0]
 800583c:	2364      	movs	r3, #100	; 0x64
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	3b5a      	subs	r3, #90	; 0x5a
 8005842:	0021      	movs	r1, r4
 8005844:	f008 fb5e 	bl	800df04 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005848:	3601      	adds	r6, #1
 800584a:	4b2c      	ldr	r3, [pc, #176]	; (80058fc <testportCommand+0x1a4>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	3b01      	subs	r3, #1
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	4a2f      	ldr	r2, [pc, #188]	; (8005910 <testportCommand+0x1b8>)
 8005854:	18d3      	adds	r3, r2, r3
 8005856:	5d9b      	ldrb	r3, [r3, r6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1b4      	bne.n	80057c6 <testportCommand+0x6e>
 800585c:	4692      	mov	sl, r2
 800585e:	4f27      	ldr	r7, [pc, #156]	; (80058fc <testportCommand+0x1a4>)
					Delay_ms(1);
 8005860:	2001      	movs	r0, #1
 8005862:	f00a fde7 	bl	8010434 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005866:	783b      	ldrb	r3, [r7, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	019b      	lsls	r3, r3, #6
 800586c:	4453      	add	r3, sl
 800586e:	5d9b      	ldrb	r3, [r3, r6]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f5      	beq.n	8005860 <testportCommand+0x108>
 8005874:	e7a7      	b.n	80057c6 <testportCommand+0x6e>
	else if(pcParameterString1[0] == 'p'){
 8005876:	2300      	movs	r3, #0
 8005878:	56eb      	ldrsb	r3, [r5, r3]
 800587a:	2b70      	cmp	r3, #112	; 0x70
 800587c:	d005      	beq.n	800588a <testportCommand+0x132>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800587e:	220f      	movs	r2, #15
 8005880:	4924      	ldr	r1, [pc, #144]	; (8005914 <testportCommand+0x1bc>)
 8005882:	0020      	movs	r0, r4
 8005884:	f00e fa65 	bl	8013d52 <memcpy>
 8005888:	e021      	b.n	80058ce <testportCommand+0x176>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 800588a:	1c68      	adds	r0, r5, #1
 800588c:	f00d ffd7 	bl	801383e <atol>
 8005890:	0005      	movs	r5, r0
 8005892:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005894:	1e7b      	subs	r3, r7, #1
 8005896:	2b05      	cmp	r3, #5
 8005898:	d825      	bhi.n	80058e6 <testportCommand+0x18e>
				WriteVaule[0] =rand();
 800589a:	f00e fa7b 	bl	8013d94 <rand>
 800589e:	ae02      	add	r6, sp, #8
 80058a0:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80058a2:	2364      	movs	r3, #100	; 0x64
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	3b32      	subs	r3, #50	; 0x32
 80058a8:	2201      	movs	r2, #1
 80058aa:	0031      	movs	r1, r6
 80058ac:	0038      	movs	r0, r7
 80058ae:	f008 fb29 	bl	800df04 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 80058b2:	0038      	movs	r0, r7
 80058b4:	f008 fb04 	bl	800dec0 <GetUart>
 80058b8:	6803      	ldr	r3, [r0, #0]
 80058ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 80058bc:	7832      	ldrb	r2, [r6, #0]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d10a      	bne.n	80058da <testportCommand+0x182>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 80058c4:	b2ea      	uxtb	r2, r5
 80058c6:	490f      	ldr	r1, [pc, #60]	; (8005904 <testportCommand+0x1ac>)
 80058c8:	0020      	movs	r0, r4
 80058ca:	f00e fc45 	bl	8014158 <sprintf>
}
 80058ce:	2000      	movs	r0, #0
 80058d0:	b005      	add	sp, #20
 80058d2:	bc0c      	pop	{r2, r3}
 80058d4:	4690      	mov	r8, r2
 80058d6:	469a      	mov	sl, r3
 80058d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 80058da:	b2ea      	uxtb	r2, r5
 80058dc:	490a      	ldr	r1, [pc, #40]	; (8005908 <testportCommand+0x1b0>)
 80058de:	0020      	movs	r0, r4
 80058e0:	f00e fc3a 	bl	8014158 <sprintf>
 80058e4:	e7f3      	b.n	80058ce <testportCommand+0x176>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80058e6:	221b      	movs	r2, #27
 80058e8:	490b      	ldr	r1, [pc, #44]	; (8005918 <testportCommand+0x1c0>)
 80058ea:	0020      	movs	r0, r4
 80058ec:	f00e fa31 	bl	8013d52 <memcpy>
	return pdFALSE;
 80058f0:	e7ed      	b.n	80058ce <testportCommand+0x176>
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	08018558 	.word	0x08018558
 80058f8:	080188b4 	.word	0x080188b4
 80058fc:	20000a77 	.word	0x20000a77
 8005900:	20001450 	.word	0x20001450
 8005904:	0801ad74 	.word	0x0801ad74
 8005908:	0801ad90 	.word	0x0801ad90
 800590c:	0801ada4 	.word	0x0801ada4
 8005910:	200012d0 	.word	0x200012d0
 8005914:	0801adf8 	.word	0x0801adf8
 8005918:	0801ae08 	.word	0x0801ae08

0800591c <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800591c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591e:	b083      	sub	sp, #12
 8005920:	0004      	movs	r4, r0
 8005922:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005924:	2300      	movs	r3, #0
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800592a:	2800      	cmp	r0, #0
 800592c:	d101      	bne.n	8005932 <unbridgeCommand+0x16>
 800592e:	b672      	cpsid	i
 8005930:	e7fe      	b.n	8005930 <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005932:	aa01      	add	r2, sp, #4
 8005934:	2101      	movs	r1, #1
 8005936:	0028      	movs	r0, r5
 8005938:	f008 fd2a 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800593c:	2300      	movs	r3, #0
 800593e:	56c3      	ldrsb	r3, [r0, r3]
 8005940:	2b70      	cmp	r3, #112	; 0x70
 8005942:	d00e      	beq.n	8005962 <unbridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005944:	466a      	mov	r2, sp
 8005946:	2102      	movs	r1, #2
 8005948:	0028      	movs	r0, r5
 800594a:	f008 fd21 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800594e:	2300      	movs	r3, #0
 8005950:	56c3      	ldrsb	r3, [r0, r3]
 8005952:	2b70      	cmp	r3, #112	; 0x70
 8005954:	d01e      	beq.n	8005994 <unbridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005956:	220f      	movs	r2, #15
 8005958:	491a      	ldr	r1, [pc, #104]	; (80059c4 <unbridgeCommand+0xa8>)
 800595a:	0020      	movs	r0, r4
 800595c:	f00e f9f9 	bl	8013d52 <memcpy>
 8005960:	e015      	b.n	800598e <unbridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005962:	3001      	adds	r0, #1
 8005964:	f00d ff6b 	bl	801383e <atol>
 8005968:	0006      	movs	r6, r0
 800596a:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800596c:	466a      	mov	r2, sp
 800596e:	2102      	movs	r1, #2
 8005970:	0028      	movs	r0, r5
 8005972:	f008 fd0d 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005976:	2300      	movs	r3, #0
 8005978:	56c3      	ldrsb	r3, [r0, r3]
 800597a:	2b70      	cmp	r3, #112	; 0x70
 800597c:	d00e      	beq.n	800599c <unbridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 800597e:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005980:	2867      	cmp	r0, #103	; 0x67
 8005982:	d0e8      	beq.n	8005956 <unbridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005984:	2219      	movs	r2, #25
 8005986:	4910      	ldr	r1, [pc, #64]	; (80059c8 <unbridgeCommand+0xac>)
 8005988:	0020      	movs	r0, r4
 800598a:	f00e f9e2 	bl	8013d52 <memcpy>
}
 800598e:	2000      	movs	r0, #0
 8005990:	b003      	add	sp, #12
 8005992:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005994:	3001      	adds	r0, #1
 8005996:	f00d ff52 	bl	801383e <atol>
 800599a:	e7dc      	b.n	8005956 <unbridgeCommand+0x3a>
 800599c:	3001      	adds	r0, #1
 800599e:	f00d ff4e 	bl	801383e <atol>
 80059a2:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 80059a4:	b2c1      	uxtb	r1, r0
 80059a6:	0038      	movs	r0, r7
 80059a8:	f7fe fea2 	bl	80046f0 <Unbridge>
	if(result == BOS_OK)
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d1e7      	bne.n	8005980 <unbridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	002b      	movs	r3, r5
 80059b4:	4013      	ands	r3, r2
 80059b6:	4032      	ands	r2, r6
 80059b8:	4904      	ldr	r1, [pc, #16]	; (80059cc <unbridgeCommand+0xb0>)
 80059ba:	0020      	movs	r0, r4
 80059bc:	f00e fbcc 	bl	8014158 <sprintf>
 80059c0:	e7e5      	b.n	800598e <unbridgeCommand+0x72>
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	0801adf8 	.word	0x0801adf8
 80059c8:	0801aec0 	.word	0x0801aec0
 80059cc:	0801aea0 	.word	0x0801aea0

080059d0 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d2:	b083      	sub	sp, #12
 80059d4:	0004      	movs	r4, r0
 80059d6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80059d8:	2300      	movs	r3, #0
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80059de:	2800      	cmp	r0, #0
 80059e0:	d101      	bne.n	80059e6 <bridgeCommand+0x16>
 80059e2:	b672      	cpsid	i
 80059e4:	e7fe      	b.n	80059e4 <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059e6:	aa01      	add	r2, sp, #4
 80059e8:	2101      	movs	r1, #1
 80059ea:	0028      	movs	r0, r5
 80059ec:	f008 fcd0 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80059f0:	2300      	movs	r3, #0
 80059f2:	56c3      	ldrsb	r3, [r0, r3]
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d00e      	beq.n	8005a16 <bridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059f8:	466a      	mov	r2, sp
 80059fa:	2102      	movs	r1, #2
 80059fc:	0028      	movs	r0, r5
 80059fe:	f008 fcc7 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a02:	2300      	movs	r3, #0
 8005a04:	56c3      	ldrsb	r3, [r0, r3]
 8005a06:	2b70      	cmp	r3, #112	; 0x70
 8005a08:	d01e      	beq.n	8005a48 <bridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a0a:	220f      	movs	r2, #15
 8005a0c:	491a      	ldr	r1, [pc, #104]	; (8005a78 <bridgeCommand+0xa8>)
 8005a0e:	0020      	movs	r0, r4
 8005a10:	f00e f99f 	bl	8013d52 <memcpy>
 8005a14:	e015      	b.n	8005a42 <bridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a16:	3001      	adds	r0, #1
 8005a18:	f00d ff11 	bl	801383e <atol>
 8005a1c:	0006      	movs	r6, r0
 8005a1e:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a20:	466a      	mov	r2, sp
 8005a22:	2102      	movs	r1, #2
 8005a24:	0028      	movs	r0, r5
 8005a26:	f008 fcb3 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	56c3      	ldrsb	r3, [r0, r3]
 8005a2e:	2b70      	cmp	r3, #112	; 0x70
 8005a30:	d00e      	beq.n	8005a50 <bridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 8005a32:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005a34:	2867      	cmp	r0, #103	; 0x67
 8005a36:	d0e8      	beq.n	8005a0a <bridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005a38:	2217      	movs	r2, #23
 8005a3a:	4910      	ldr	r1, [pc, #64]	; (8005a7c <bridgeCommand+0xac>)
 8005a3c:	0020      	movs	r0, r4
 8005a3e:	f00e f988 	bl	8013d52 <memcpy>
}
 8005a42:	2000      	movs	r0, #0
 8005a44:	b003      	add	sp, #12
 8005a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f00d fef8 	bl	801383e <atol>
 8005a4e:	e7dc      	b.n	8005a0a <bridgeCommand+0x3a>
 8005a50:	3001      	adds	r0, #1
 8005a52:	f00d fef4 	bl	801383e <atol>
 8005a56:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005a58:	b2c1      	uxtb	r1, r0
 8005a5a:	0038      	movs	r0, r7
 8005a5c:	f7fe fe34 	bl	80046c8 <Bridge>
	if(result == BOS_OK)
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d1e7      	bne.n	8005a34 <bridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	002b      	movs	r3, r5
 8005a68:	4013      	ands	r3, r2
 8005a6a:	4032      	ands	r2, r6
 8005a6c:	4904      	ldr	r1, [pc, #16]	; (8005a80 <bridgeCommand+0xb0>)
 8005a6e:	0020      	movs	r0, r4
 8005a70:	f00e fb72 	bl	8014158 <sprintf>
 8005a74:	e7e5      	b.n	8005a42 <bridgeCommand+0x72>
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	0801adf8 	.word	0x0801adf8
 8005a7c:	08019318 	.word	0x08019318
 8005a80:	080192f4 	.word	0x080192f4

08005a84 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a86:	b085      	sub	sp, #20
 8005a88:	0005      	movs	r5, r0
 8005a8a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	d101      	bne.n	8005a98 <delSnipCommand+0x14>
 8005a94:	b672      	cpsid	i
 8005a96:	e7fe      	b.n	8005a96 <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a98:	aa03      	add	r2, sp, #12
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	f008 fc78 	bl	800e390 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005aa0:	f00d fec7 	bl	8013832 <atoi>
 8005aa4:	9001      	str	r0, [sp, #4]
 8005aa6:	b2c6      	uxtb	r6, r0
	if(!index || index > numOfRecordedSnippets)
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	d003      	beq.n	8005ab4 <delSnipCommand+0x30>
 8005aac:	4b27      	ldr	r3, [pc, #156]	; (8005b4c <delSnipCommand+0xc8>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	42b3      	cmp	r3, r6
 8005ab2:	d207      	bcs.n	8005ac4 <delSnipCommand+0x40>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ab4:	2223      	movs	r2, #35	; 0x23
 8005ab6:	4926      	ldr	r1, [pc, #152]	; (8005b50 <delSnipCommand+0xcc>)
 8005ab8:	0028      	movs	r0, r5
 8005aba:	f00e f94a 	bl	8013d52 <memcpy>
}
 8005abe:	2000      	movs	r0, #0
 8005ac0:	b005      	add	sp, #20
 8005ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005ac4:	466b      	mov	r3, sp
 8005ac6:	791a      	ldrb	r2, [r3, #4]
 8005ac8:	3a01      	subs	r2, #1
 8005aca:	4822      	ldr	r0, [pc, #136]	; (8005b54 <delSnipCommand+0xd0>)
 8005acc:	2314      	movs	r3, #20
 8005ace:	4353      	muls	r3, r2
 8005ad0:	2700      	movs	r7, #0
 8005ad2:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator =0;
 8005ad4:	18c4      	adds	r4, r0, r3
 8005ad6:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005ad8:	3302      	adds	r3, #2
 8005ada:	1818      	adds	r0, r3, r0
 8005adc:	2204      	movs	r2, #4
 8005ade:	0039      	movs	r1, r7
 8005ae0:	f00e f940 	bl	8013d64 <memset>
		snippets[index - 1].state = false;
 8005ae4:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 8005ae6:	68e0      	ldr	r0, [r4, #12]
 8005ae8:	f00d fef0 	bl	80138cc <free>
		snippets[index - 1].cmd = NULL;
 8005aec:	60e7      	str	r7, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005aee:	4b17      	ldr	r3, [pc, #92]	; (8005b4c <delSnipCommand+0xc8>)
 8005af0:	781f      	ldrb	r7, [r3, #0]
 8005af2:	42be      	cmp	r6, r7
 8005af4:	d213      	bcs.n	8005b1e <delSnipCommand+0x9a>
 8005af6:	466b      	mov	r3, sp
 8005af8:	7919      	ldrb	r1, [r3, #4]
 8005afa:	2214      	movs	r2, #20
 8005afc:	0014      	movs	r4, r2
 8005afe:	434c      	muls	r4, r1
 8005b00:	4814      	ldr	r0, [pc, #80]	; (8005b54 <delSnipCommand+0xd0>)
 8005b02:	1824      	adds	r4, r4, r0
 8005b04:	1e7b      	subs	r3, r7, #1
 8005b06:	1b9b      	subs	r3, r3, r6
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	185b      	adds	r3, r3, r1
 8005b0c:	4353      	muls	r3, r2
 8005b0e:	1880      	adds	r0, r0, r2
 8005b10:	181e      	adds	r6, r3, r0
			if(snippets[s].cond.conditionType){
 8005b12:	7823      	ldrb	r3, [r4, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <delSnipCommand+0xb0>
 8005b18:	3414      	adds	r4, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b1a:	42b4      	cmp	r4, r6
 8005b1c:	d1f9      	bne.n	8005b12 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005b1e:	1e7b      	subs	r3, r7, #1
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <delSnipCommand+0xc8>)
 8005b22:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005b24:	f005 fc88 	bl	800b438 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005b28:	2236      	movs	r2, #54	; 0x36
 8005b2a:	490b      	ldr	r1, [pc, #44]	; (8005b58 <delSnipCommand+0xd4>)
 8005b2c:	0028      	movs	r0, r5
 8005b2e:	f00e f910 	bl	8013d52 <memcpy>
 8005b32:	e7c4      	b.n	8005abe <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005b34:	2214      	movs	r2, #20
 8005b36:	0021      	movs	r1, r4
 8005b38:	0020      	movs	r0, r4
 8005b3a:	3814      	subs	r0, #20
 8005b3c:	f00e f909 	bl	8013d52 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005b40:	2214      	movs	r2, #20
 8005b42:	2100      	movs	r1, #0
 8005b44:	0020      	movs	r0, r4
 8005b46:	f00e f90d 	bl	8013d64 <memset>
 8005b4a:	e7e5      	b.n	8005b18 <delSnipCommand+0x94>
 8005b4c:	2000121f 	.word	0x2000121f
 8005b50:	08019438 	.word	0x08019438
 8005b54:	20006abc 	.word	0x20006abc
 8005b58:	08019400 	.word	0x08019400

08005b5c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	0004      	movs	r4, r0
 8005b62:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	d101      	bne.n	8005b70 <pauseSnipCommand+0x14>
 8005b6c:	b672      	cpsid	i
 8005b6e:	e7fe      	b.n	8005b6e <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b70:	aa01      	add	r2, sp, #4
 8005b72:	2101      	movs	r1, #1
 8005b74:	f008 fc0c 	bl	800e390 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005b78:	f00d fe5b 	bl	8013832 <atoi>
 8005b7c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <pauseSnipCommand+0x2e>
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <pauseSnipCommand+0x60>)
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d207      	bcs.n	8005b9a <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b8a:	2223      	movs	r2, #35	; 0x23
 8005b8c:	490c      	ldr	r1, [pc, #48]	; (8005bc0 <pauseSnipCommand+0x64>)
 8005b8e:	0020      	movs	r0, r4
 8005b90:	f00e f8df 	bl	8013d52 <memcpy>
}
 8005b94:	2000      	movs	r0, #0
 8005b96:	b002      	add	sp, #8
 8005b98:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005b9a:	b2c0      	uxtb	r0, r0
 8005b9c:	3801      	subs	r0, #1
 8005b9e:	2314      	movs	r3, #20
 8005ba0:	4343      	muls	r3, r0
 8005ba2:	4808      	ldr	r0, [pc, #32]	; (8005bc4 <pauseSnipCommand+0x68>)
 8005ba4:	18c0      	adds	r0, r0, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005baa:	f005 fc45 	bl	800b438 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005bae:	2235      	movs	r2, #53	; 0x35
 8005bb0:	4905      	ldr	r1, [pc, #20]	; (8005bc8 <pauseSnipCommand+0x6c>)
 8005bb2:	0020      	movs	r0, r4
 8005bb4:	f00e f8cd 	bl	8013d52 <memcpy>
 8005bb8:	e7ec      	b.n	8005b94 <pauseSnipCommand+0x38>
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	2000121f 	.word	0x2000121f
 8005bc0:	08019438 	.word	0x08019438
 8005bc4:	20006abc 	.word	0x20006abc
 8005bc8:	08019848 	.word	0x08019848

08005bcc <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	0004      	movs	r4, r0
 8005bd2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005bd8:	2c00      	cmp	r4, #0
 8005bda:	d101      	bne.n	8005be0 <actSnipCommand+0x14>
 8005bdc:	b672      	cpsid	i
 8005bde:	e7fe      	b.n	8005bde <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005be0:	aa01      	add	r2, sp, #4
 8005be2:	2101      	movs	r1, #1
 8005be4:	f008 fbd4 	bl	800e390 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005be8:	f00d fe23 	bl	8013832 <atoi>
 8005bec:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <actSnipCommand+0x2e>
 8005bf2:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <actSnipCommand+0x60>)
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d207      	bcs.n	8005c0a <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bfa:	2223      	movs	r2, #35	; 0x23
 8005bfc:	490c      	ldr	r1, [pc, #48]	; (8005c30 <actSnipCommand+0x64>)
 8005bfe:	0020      	movs	r0, r4
 8005c00:	f00e f8a7 	bl	8013d52 <memcpy>
}
 8005c04:	2000      	movs	r0, #0
 8005c06:	b002      	add	sp, #8
 8005c08:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005c0a:	b2c0      	uxtb	r0, r0
 8005c0c:	3801      	subs	r0, #1
 8005c0e:	2314      	movs	r3, #20
 8005c10:	4343      	muls	r3, r0
 8005c12:	4808      	ldr	r0, [pc, #32]	; (8005c34 <actSnipCommand+0x68>)
 8005c14:	18c0      	adds	r0, r0, r3
 8005c16:	2301      	movs	r3, #1
 8005c18:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c1a:	f005 fc0d 	bl	800b438 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c1e:	2238      	movs	r2, #56	; 0x38
 8005c20:	4905      	ldr	r1, [pc, #20]	; (8005c38 <actSnipCommand+0x6c>)
 8005c22:	0020      	movs	r0, r4
 8005c24:	f00e f895 	bl	8013d52 <memcpy>
 8005c28:	e7ec      	b.n	8005c04 <actSnipCommand+0x38>
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	2000121f 	.word	0x2000121f
 8005c30:	08019438 	.word	0x08019438
 8005c34:	20006abc 	.word	0x20006abc
 8005c38:	080191fc 	.word	0x080191fc

08005c3c <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	46d6      	mov	lr, sl
 8005c40:	464f      	mov	r7, r9
 8005c42:	4646      	mov	r6, r8
 8005c44:	b5c0      	push	{r6, r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005c4a:	aa06      	add	r2, sp, #24
 8005c4c:	4b7a      	ldr	r3, [pc, #488]	; (8005e38 <snipCommand+0x1fc>)
 8005c4e:	3304      	adds	r3, #4
 8005c50:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005c52:	c223      	stmia	r2!, {r0, r1, r5}
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005c58:	2c00      	cmp	r4, #0
 8005c5a:	d101      	bne.n	8005c60 <snipCommand+0x24>
 8005c5c:	b672      	cpsid	i
 8005c5e:	e7fe      	b.n	8005c5e <snipCommand+0x22>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005c60:	4b76      	ldr	r3, [pc, #472]	; (8005e3c <snipCommand+0x200>)
 8005c62:	7818      	ldrb	r0, [r3, #0]
 8005c64:	2301      	movs	r3, #1
 8005c66:	425b      	negs	r3, r3
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	3333      	adds	r3, #51	; 0x33
 8005c6c:	2237      	movs	r2, #55	; 0x37
 8005c6e:	4974      	ldr	r1, [pc, #464]	; (8005e40 <snipCommand+0x204>)
 8005c70:	f008 f948 	bl	800df04 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005c74:	4b73      	ldr	r3, [pc, #460]	; (8005e44 <snipCommand+0x208>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d100      	bne.n	8005c7e <snipCommand+0x42>
 8005c7c:	e0d0      	b.n	8005e20 <snipCommand+0x1e4>
 8005c7e:	2500      	movs	r5, #0
		if(snippets[s].cond.conditionType)
 8005c80:	4b71      	ldr	r3, [pc, #452]	; (8005e48 <snipCommand+0x20c>)
 8005c82:	4698      	mov	r8, r3
 8005c84:	e0ba      	b.n	8005dfc <snipCommand+0x1c0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005c86:	4b70      	ldr	r3, [pc, #448]	; (8005e48 <snipCommand+0x20c>)
 8005c88:	4699      	mov	r9, r3
 8005c8a:	00ab      	lsls	r3, r5, #2
 8005c8c:	469a      	mov	sl, r3
 8005c8e:	195b      	adds	r3, r3, r5
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	444b      	add	r3, r9
 8005c94:	7c1a      	ldrb	r2, [r3, #16]
 8005c96:	00d3      	lsls	r3, r2, #3
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	aa06      	add	r2, sp, #24
 8005c9c:	4694      	mov	ip, r2
 8005c9e:	4463      	add	r3, ip
 8005ca0:	003a      	movs	r2, r7
 8005ca2:	496a      	ldr	r1, [pc, #424]	; (8005e4c <snipCommand+0x210>)
 8005ca4:	0020      	movs	r0, r4
 8005ca6:	f00e fa57 	bl	8014158 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005caa:	4653      	mov	r3, sl
 8005cac:	195b      	adds	r3, r3, r5
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	464a      	mov	r2, r9
 8005cb2:	5c9b      	ldrb	r3, [r3, r2]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d02d      	beq.n	8005d14 <snipCommand+0xd8>
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d000      	beq.n	8005cbe <snipCommand+0x82>
 8005cbc:	e0a9      	b.n	8005e12 <snipCommand+0x1d6>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005cbe:	00a9      	lsls	r1, r5, #2
 8005cc0:	1949      	adds	r1, r1, r5
 8005cc2:	0089      	lsls	r1, r1, #2
 8005cc4:	3106      	adds	r1, #6
 8005cc6:	4b60      	ldr	r3, [pc, #384]	; (8005e48 <snipCommand+0x20c>)
 8005cc8:	4699      	mov	r9, r3
 8005cca:	4449      	add	r1, r9
 8005ccc:	2204      	movs	r2, #4
 8005cce:	a805      	add	r0, sp, #20
 8005cd0:	f00e f83f 	bl	8013d52 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005cd4:	00ad      	lsls	r5, r5, #2
 8005cd6:	19ad      	adds	r5, r5, r6
 8005cd8:	00ad      	lsls	r5, r5, #2
 8005cda:	444d      	add	r5, r9
 8005cdc:	78ea      	ldrb	r2, [r5, #3]
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	0053      	lsls	r3, r2, #1
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4a5a      	ldr	r2, [pc, #360]	; (8005e50 <snipCommand+0x214>)
 8005ce8:	18d3      	adds	r3, r2, r3
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4699      	mov	r9, r3
 8005cee:	9805      	ldr	r0, [sp, #20]
 8005cf0:	f7fc ff18 	bl	8002b24 <__aeabi_f2d>
 8005cf4:	9002      	str	r0, [sp, #8]
 8005cf6:	9103      	str	r1, [sp, #12]
 8005cf8:	786b      	ldrb	r3, [r5, #1]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	005a      	lsls	r2, r3, #1
 8005cfe:	18d2      	adds	r2, r2, r3
 8005d00:	4b54      	ldr	r3, [pc, #336]	; (8005e54 <snipCommand+0x218>)
 8005d02:	189b      	adds	r3, r3, r2
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	464b      	mov	r3, r9
 8005d08:	0022      	movs	r2, r4
 8005d0a:	4953      	ldr	r1, [pc, #332]	; (8005e58 <snipCommand+0x21c>)
 8005d0c:	0020      	movs	r0, r4
 8005d0e:	f00e fa23 	bl	8014158 <sprintf>
				break;
 8005d12:	e07e      	b.n	8005e12 <snipCommand+0x1d6>
				switch(snippets[s].cond.buffer1[1]){
 8005d14:	00ab      	lsls	r3, r5, #2
 8005d16:	195b      	adds	r3, r3, r5
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4a4b      	ldr	r2, [pc, #300]	; (8005e48 <snipCommand+0x20c>)
 8005d1c:	18d3      	adds	r3, r2, r3
 8005d1e:	78db      	ldrb	r3, [r3, #3]
 8005d20:	3b05      	subs	r3, #5
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	2a09      	cmp	r2, #9
 8005d26:	d874      	bhi.n	8005e12 <snipCommand+0x1d6>
 8005d28:	0093      	lsls	r3, r2, #2
 8005d2a:	4a4c      	ldr	r2, [pc, #304]	; (8005e5c <snipCommand+0x220>)
 8005d2c:	58d3      	ldr	r3, [r2, r3]
 8005d2e:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d30:	2314      	movs	r3, #20
 8005d32:	436b      	muls	r3, r5
 8005d34:	4a44      	ldr	r2, [pc, #272]	; (8005e48 <snipCommand+0x20c>)
 8005d36:	18d2      	adds	r2, r2, r3
 8005d38:	7893      	ldrb	r3, [r2, #2]
 8005d3a:	68d2      	ldr	r2, [r2, #12]
 8005d3c:	9200      	str	r2, [sp, #0]
 8005d3e:	0022      	movs	r2, r4
 8005d40:	4947      	ldr	r1, [pc, #284]	; (8005e60 <snipCommand+0x224>)
 8005d42:	0020      	movs	r0, r4
 8005d44:	f00e fa08 	bl	8014158 <sprintf>
						break;
 8005d48:	e063      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d4a:	2314      	movs	r3, #20
 8005d4c:	436b      	muls	r3, r5
 8005d4e:	4a3e      	ldr	r2, [pc, #248]	; (8005e48 <snipCommand+0x20c>)
 8005d50:	18d2      	adds	r2, r2, r3
 8005d52:	7893      	ldrb	r3, [r2, #2]
 8005d54:	68d2      	ldr	r2, [r2, #12]
 8005d56:	9200      	str	r2, [sp, #0]
 8005d58:	0022      	movs	r2, r4
 8005d5a:	4942      	ldr	r1, [pc, #264]	; (8005e64 <snipCommand+0x228>)
 8005d5c:	0020      	movs	r0, r4
 8005d5e:	f00e f9fb 	bl	8014158 <sprintf>
						break;
 8005d62:	e056      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005d64:	2314      	movs	r3, #20
 8005d66:	436b      	muls	r3, r5
 8005d68:	4a37      	ldr	r2, [pc, #220]	; (8005e48 <snipCommand+0x20c>)
 8005d6a:	18d2      	adds	r2, r2, r3
 8005d6c:	7893      	ldrb	r3, [r2, #2]
 8005d6e:	68d1      	ldr	r1, [r2, #12]
 8005d70:	9101      	str	r1, [sp, #4]
 8005d72:	7912      	ldrb	r2, [r2, #4]
 8005d74:	9200      	str	r2, [sp, #0]
 8005d76:	0022      	movs	r2, r4
 8005d78:	493b      	ldr	r1, [pc, #236]	; (8005e68 <snipCommand+0x22c>)
 8005d7a:	0020      	movs	r0, r4
 8005d7c:	f00e f9ec 	bl	8014158 <sprintf>
						break;
 8005d80:	e047      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005d82:	2314      	movs	r3, #20
 8005d84:	436b      	muls	r3, r5
 8005d86:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <snipCommand+0x20c>)
 8005d88:	18d2      	adds	r2, r2, r3
 8005d8a:	7893      	ldrb	r3, [r2, #2]
 8005d8c:	68d1      	ldr	r1, [r2, #12]
 8005d8e:	9101      	str	r1, [sp, #4]
 8005d90:	7912      	ldrb	r2, [r2, #4]
 8005d92:	9200      	str	r2, [sp, #0]
 8005d94:	0022      	movs	r2, r4
 8005d96:	4935      	ldr	r1, [pc, #212]	; (8005e6c <snipCommand+0x230>)
 8005d98:	0020      	movs	r0, r4
 8005d9a:	f00e f9dd 	bl	8014158 <sprintf>
						break;
 8005d9e:	e038      	b.n	8005e12 <snipCommand+0x1d6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005da0:	4b33      	ldr	r3, [pc, #204]	; (8005e70 <snipCommand+0x234>)
 8005da2:	0022      	movs	r2, r4
 8005da4:	4933      	ldr	r1, [pc, #204]	; (8005e74 <snipCommand+0x238>)
 8005da6:	0020      	movs	r0, r4
 8005da8:	f00e f9d6 	bl	8014158 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005dac:	4830      	ldr	r0, [pc, #192]	; (8005e70 <snipCommand+0x234>)
 8005dae:	f7fa f9b3 	bl	8000118 <strlen>
 8005db2:	0002      	movs	r2, r0
 8005db4:	2100      	movs	r1, #0
 8005db6:	482e      	ldr	r0, [pc, #184]	; (8005e70 <snipCommand+0x234>)
 8005db8:	f00d ffd4 	bl	8013d64 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005dbc:	0029      	movs	r1, r5
 8005dbe:	68f0      	ldr	r0, [r6, #12]
 8005dc0:	f7ff fa94 	bl	80052ec <ParseSnippetCommand>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d1eb      	bne.n	8005da0 <snipCommand+0x164>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005dc8:	0020      	movs	r0, r4
 8005dca:	f7fa f9a5 	bl	8000118 <strlen>
 8005dce:	1820      	adds	r0, r4, r0
 8005dd0:	220c      	movs	r2, #12
 8005dd2:	4929      	ldr	r1, [pc, #164]	; (8005e78 <snipCommand+0x23c>)
 8005dd4:	f00d ffbd 	bl	8013d52 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005dd8:	0020      	movs	r0, r4
 8005dda:	f7fa f99d 	bl	8000118 <strlen>
 8005dde:	b282      	uxth	r2, r0
 8005de0:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <snipCommand+0x200>)
 8005de2:	7818      	ldrb	r0, [r3, #0]
 8005de4:	2301      	movs	r3, #1
 8005de6:	425b      	negs	r3, r3
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	3333      	adds	r3, #51	; 0x33
 8005dec:	0021      	movs	r1, r4
 8005dee:	f008 f889 	bl	800df04 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005df2:	003d      	movs	r5, r7
 8005df4:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <snipCommand+0x208>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	42bb      	cmp	r3, r7
 8005dfa:	d911      	bls.n	8005e20 <snipCommand+0x1e4>
 8005dfc:	1c6f      	adds	r7, r5, #1
 8005dfe:	b2ff      	uxtb	r7, r7
		if(snippets[s].cond.conditionType)
 8005e00:	002e      	movs	r6, r5
 8005e02:	00ab      	lsls	r3, r5, #2
 8005e04:	195b      	adds	r3, r3, r5
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4642      	mov	r2, r8
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d000      	beq.n	8005e12 <snipCommand+0x1d6>
 8005e10:	e739      	b.n	8005c86 <snipCommand+0x4a>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e12:	4d17      	ldr	r5, [pc, #92]	; (8005e70 <snipCommand+0x234>)
 8005e14:	00b3      	lsls	r3, r6, #2
 8005e16:	199b      	adds	r3, r3, r6
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4e0b      	ldr	r6, [pc, #44]	; (8005e48 <snipCommand+0x20c>)
 8005e1c:	18f6      	adds	r6, r6, r3
 8005e1e:	e7cd      	b.n	8005dbc <snipCommand+0x180>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005e20:	22b5      	movs	r2, #181	; 0xb5
 8005e22:	4916      	ldr	r1, [pc, #88]	; (8005e7c <snipCommand+0x240>)
 8005e24:	0020      	movs	r0, r4
 8005e26:	f00d ff94 	bl	8013d52 <memcpy>
}
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	b00a      	add	sp, #40	; 0x28
 8005e2e:	bc1c      	pop	{r2, r3, r4}
 8005e30:	4690      	mov	r8, r2
 8005e32:	4699      	mov	r9, r3
 8005e34:	46a2      	mov	sl, r4
 8005e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e38:	08018558 	.word	0x08018558
 8005e3c:	20000a77 	.word	0x20000a77
 8005e40:	08019ce0 	.word	0x08019ce0
 8005e44:	2000121f 	.word	0x2000121f
 8005e48:	20006abc 	.word	0x20006abc
 8005e4c:	08019d18 	.word	0x08019d18
 8005e50:	20000084 	.word	0x20000084
 8005e54:	0801980c 	.word	0x0801980c
 8005e58:	08019d84 	.word	0x08019d84
 8005e5c:	080190b8 	.word	0x080190b8
 8005e60:	08019d24 	.word	0x08019d24
 8005e64:	08019d38 	.word	0x08019d38
 8005e68:	08019d50 	.word	0x08019d50
 8005e6c:	08019d68 	.word	0x08019d68
 8005e70:	20001250 	.word	0x20001250
 8005e74:	08019d94 	.word	0x08019d94
 8005e78:	08019d9c 	.word	0x08019d9c
 8005e7c:	08019da8 	.word	0x08019da8

08005e80 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e80:	b510      	push	{r4, lr}
 8005e82:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005e84:	d101      	bne.n	8005e8a <idcodeCommand+0xa>
 8005e86:	b672      	cpsid	i
 8005e88:	e7fe      	b.n	8005e88 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 8005e8a:	f00a fae7 	bl	801045c <HAL_GetDEVID>
	switch(dev){
 8005e8e:	0403      	lsls	r3, r0, #16
 8005e90:	0c1b      	lsrs	r3, r3, #16
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <idcodeCommand+0x80>)
 8005e94:	4694      	mov	ip, r2
 8005e96:	4463      	add	r3, ip
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d82a      	bhi.n	8005ef2 <idcodeCommand+0x72>
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <idcodeCommand+0x84>)
 8005ea0:	58d3      	ldr	r3, [r2, r3]
 8005ea2:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005ea4:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <idcodeCommand+0x88>)
 8005ea6:	4919      	ldr	r1, [pc, #100]	; (8005f0c <idcodeCommand+0x8c>)
 8005ea8:	0020      	movs	r0, r4
 8005eaa:	f00e f955 	bl	8014158 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005eae:	f00a facf 	bl	8010450 <HAL_GetREVID>
 8005eb2:	0b03      	lsrs	r3, r0, #12
 8005eb4:	0022      	movs	r2, r4
 8005eb6:	4916      	ldr	r1, [pc, #88]	; (8005f10 <idcodeCommand+0x90>)
 8005eb8:	0020      	movs	r0, r4
 8005eba:	f00e f94d 	bl	8014158 <sprintf>
}
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005ec2:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <idcodeCommand+0x94>)
 8005ec4:	4911      	ldr	r1, [pc, #68]	; (8005f0c <idcodeCommand+0x8c>)
 8005ec6:	0020      	movs	r0, r4
 8005ec8:	f00e f946 	bl	8014158 <sprintf>
			break;
 8005ecc:	e7ef      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005ece:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <idcodeCommand+0x98>)
 8005ed0:	490e      	ldr	r1, [pc, #56]	; (8005f0c <idcodeCommand+0x8c>)
 8005ed2:	0020      	movs	r0, r4
 8005ed4:	f00e f940 	bl	8014158 <sprintf>
			break;
 8005ed8:	e7e9      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005eda:	4a10      	ldr	r2, [pc, #64]	; (8005f1c <idcodeCommand+0x9c>)
 8005edc:	490b      	ldr	r1, [pc, #44]	; (8005f0c <idcodeCommand+0x8c>)
 8005ede:	0020      	movs	r0, r4
 8005ee0:	f00e f93a 	bl	8014158 <sprintf>
			break;
 8005ee4:	e7e3      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <idcodeCommand+0xa0>)
 8005ee8:	4908      	ldr	r1, [pc, #32]	; (8005f0c <idcodeCommand+0x8c>)
 8005eea:	0020      	movs	r0, r4
 8005eec:	f00e f934 	bl	8014158 <sprintf>
			break;
 8005ef0:	e7dd      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005ef2:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <idcodeCommand+0xa4>)
 8005ef4:	4905      	ldr	r1, [pc, #20]	; (8005f0c <idcodeCommand+0x8c>)
 8005ef6:	0020      	movs	r0, r4
 8005ef8:	f00e f92e 	bl	8014158 <sprintf>
			break;
 8005efc:	e7d7      	b.n	8005eae <idcodeCommand+0x2e>
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	fffffbc0 	.word	0xfffffbc0
 8005f04:	080190e0 	.word	0x080190e0
 8005f08:	08019708 	.word	0x08019708
 8005f0c:	08019714 	.word	0x08019714
 8005f10:	08019760 	.word	0x08019760
 8005f14:	08019728 	.word	0x08019728
 8005f18:	08019734 	.word	0x08019734
 8005f1c:	08019740 	.word	0x08019740
 8005f20:	0801974c 	.word	0x0801974c
 8005f24:	08019758 	.word	0x08019758

08005f28 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f2c:	d101      	bne.n	8005f32 <uuidCommand+0xa>
 8005f2e:	b672      	cpsid	i
 8005f30:	e7fe      	b.n	8005f30 <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005f32:	220e      	movs	r2, #14
 8005f34:	4911      	ldr	r1, [pc, #68]	; (8005f7c <uuidCommand+0x54>)
 8005f36:	f00d ff0c 	bl	8013d52 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005f3a:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <uuidCommand+0x58>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4d11      	ldr	r5, [pc, #68]	; (8005f84 <uuidCommand+0x5c>)
 8005f40:	0022      	movs	r2, r4
 8005f42:	0029      	movs	r1, r5
 8005f44:	0020      	movs	r0, r4
 8005f46:	f00e f907 	bl	8014158 <sprintf>
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <uuidCommand+0x60>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	0022      	movs	r2, r4
 8005f50:	0029      	movs	r1, r5
 8005f52:	0020      	movs	r0, r4
 8005f54:	f00e f900 	bl	8014158 <sprintf>
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <uuidCommand+0x64>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	0022      	movs	r2, r4
 8005f5e:	0029      	movs	r1, r5
 8005f60:	0020      	movs	r0, r4
 8005f62:	f00e f8f9 	bl	8014158 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005f66:	0020      	movs	r0, r4
 8005f68:	f7fa f8d6 	bl	8000118 <strlen>
 8005f6c:	1820      	adds	r0, r4, r0
 8005f6e:	2203      	movs	r2, #3
 8005f70:	4907      	ldr	r1, [pc, #28]	; (8005f90 <uuidCommand+0x68>)
 8005f72:	f00d feee 	bl	8013d52 <memcpy>
}
 8005f76:	2000      	movs	r0, #0
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	0801aeec 	.word	0x0801aeec
 8005f80:	1ffff7ac 	.word	0x1ffff7ac
 8005f84:	0801aefc 	.word	0x0801aefc
 8005f88:	1ffff7b0 	.word	0x1ffff7b0
 8005f8c:	1ffff7b4 	.word	0x1ffff7b4
 8005f90:	0801a6e4 	.word	0x0801a6e4

08005f94 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f94:	b510      	push	{r4, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f9a:	d101      	bne.n	8005fa0 <timeCommand+0xc>
 8005f9c:	b672      	cpsid	i
 8005f9e:	e7fe      	b.n	8005f9e <timeCommand+0xa>
	GetTimeDate();
 8005fa0:	f007 fd0c 	bl	800d9bc <GetTimeDate>
	if(BOS.hourformat == 24)
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <timeCommand+0x80>)
 8005fa6:	7b5b      	ldrb	r3, [r3, #13]
 8005fa8:	2b18      	cmp	r3, #24
 8005faa:	d004      	beq.n	8005fb6 <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d00e      	beq.n	8005fce <timeCommand+0x3a>
}
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	b004      	add	sp, #16
 8005fb4:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8005fb6:	4917      	ldr	r1, [pc, #92]	; (8006014 <timeCommand+0x80>)
 8005fb8:	7c4b      	ldrb	r3, [r1, #17]
 8005fba:	7c8a      	ldrb	r2, [r1, #18]
 8005fbc:	89c8      	ldrh	r0, [r1, #14]
 8005fbe:	9001      	str	r0, [sp, #4]
 8005fc0:	7c09      	ldrb	r1, [r1, #16]
 8005fc2:	9100      	str	r1, [sp, #0]
 8005fc4:	4914      	ldr	r1, [pc, #80]	; (8006018 <timeCommand+0x84>)
 8005fc6:	0020      	movs	r0, r4
 8005fc8:	f00e f8c6 	bl	8014158 <sprintf>
 8005fcc:	e7f0      	b.n	8005fb0 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <timeCommand+0x80>)
 8005fd0:	7cdb      	ldrb	r3, [r3, #19]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d10d      	bne.n	8005ff2 <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8005fd6:	490f      	ldr	r1, [pc, #60]	; (8006014 <timeCommand+0x80>)
 8005fd8:	7c4b      	ldrb	r3, [r1, #17]
 8005fda:	7c8a      	ldrb	r2, [r1, #18]
 8005fdc:	480f      	ldr	r0, [pc, #60]	; (800601c <timeCommand+0x88>)
 8005fde:	9002      	str	r0, [sp, #8]
 8005fe0:	89c8      	ldrh	r0, [r1, #14]
 8005fe2:	9001      	str	r0, [sp, #4]
 8005fe4:	7c09      	ldrb	r1, [r1, #16]
 8005fe6:	9100      	str	r1, [sp, #0]
 8005fe8:	490d      	ldr	r1, [pc, #52]	; (8006020 <timeCommand+0x8c>)
 8005fea:	0020      	movs	r0, r4
 8005fec:	f00e f8b4 	bl	8014158 <sprintf>
 8005ff0:	e7de      	b.n	8005fb0 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d1dc      	bne.n	8005fb0 <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8005ff6:	4907      	ldr	r1, [pc, #28]	; (8006014 <timeCommand+0x80>)
 8005ff8:	7c4b      	ldrb	r3, [r1, #17]
 8005ffa:	7c8a      	ldrb	r2, [r1, #18]
 8005ffc:	4809      	ldr	r0, [pc, #36]	; (8006024 <timeCommand+0x90>)
 8005ffe:	9002      	str	r0, [sp, #8]
 8006000:	89c8      	ldrh	r0, [r1, #14]
 8006002:	9001      	str	r0, [sp, #4]
 8006004:	7c09      	ldrb	r1, [r1, #16]
 8006006:	9100      	str	r1, [sp, #0]
 8006008:	4905      	ldr	r1, [pc, #20]	; (8006020 <timeCommand+0x8c>)
 800600a:	0020      	movs	r0, r4
 800600c:	f00e f8a4 	bl	8014158 <sprintf>
 8006010:	e7ce      	b.n	8005fb0 <timeCommand+0x1c>
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	20006aa0 	.word	0x20006aa0
 8006018:	0801ae34 	.word	0x0801ae34
 800601c:	0801ae88 	.word	0x0801ae88
 8006020:	0801ae5c 	.word	0x0801ae5c
 8006024:	0801ae8c 	.word	0x0801ae8c

08006028 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006028:	b510      	push	{r4, lr}
 800602a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800602c:	d101      	bne.n	8006032 <dateCommand+0xa>
 800602e:	b672      	cpsid	i
 8006030:	e7fe      	b.n	8006030 <dateCommand+0x8>
	GetTimeDate();
 8006032:	f007 fcc3 	bl	800d9bc <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8006036:	f7fe fb25 	bl	8004684 <GetDateString>
 800603a:	0002      	movs	r2, r0
 800603c:	4902      	ldr	r1, [pc, #8]	; (8006048 <dateCommand+0x20>)
 800603e:	0020      	movs	r0, r4
 8006040:	f00e f88a 	bl	8014158 <sprintf>
}
 8006044:	2000      	movs	r0, #0
 8006046:	bd10      	pop	{r4, pc}
 8006048:	08019340 	.word	0x08019340

0800604c <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604e:	46c6      	mov	lr, r8
 8006050:	b500      	push	{lr}
 8006052:	b082      	sub	sp, #8
 8006054:	0004      	movs	r4, r0
 8006056:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006058:	2300      	movs	r3, #0
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800605e:	2800      	cmp	r0, #0
 8006060:	d101      	bne.n	8006066 <getCommand+0x1a>
 8006062:	b672      	cpsid	i
 8006064:	e7fe      	b.n	8006064 <getCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006066:	aa01      	add	r2, sp, #4
 8006068:	2101      	movs	r1, #1
 800606a:	0030      	movs	r0, r6
 800606c:	f008 f990 	bl	800e390 <FreeRTOS_CLIGetParameter>
 8006070:	0005      	movs	r5, r0
 8006072:	4b74      	ldr	r3, [pc, #464]	; (8006244 <getCommand+0x1f8>)
 8006074:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006076:	2204      	movs	r2, #4
 8006078:	4973      	ldr	r1, [pc, #460]	; (8006248 <getCommand+0x1fc>)
 800607a:	f00e f8b1 	bl	80141e0 <strncmp>
 800607e:	2800      	cmp	r0, #0
 8006080:	d000      	beq.n	8006084 <getCommand+0x38>
 8006082:	e090      	b.n	80061a6 <getCommand+0x15a>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006084:	1d2f      	adds	r7, r5, #4
 8006086:	9b01      	ldr	r3, [sp, #4]
 8006088:	1f1e      	subs	r6, r3, #4
 800608a:	0032      	movs	r2, r6
 800608c:	496f      	ldr	r1, [pc, #444]	; (800624c <getCommand+0x200>)
 800608e:	0038      	movs	r0, r7
 8006090:	f00e f8a6 	bl	80141e0 <strncmp>
 8006094:	2800      	cmp	r0, #0
 8006096:	d11e      	bne.n	80060d6 <getCommand+0x8a>
			if(BOS.response == BOS_RESPONSE_ALL)
 8006098:	4b6d      	ldr	r3, [pc, #436]	; (8006250 <getCommand+0x204>)
 800609a:	799b      	ldrb	r3, [r3, #6]
 800609c:	2b60      	cmp	r3, #96	; 0x60
 800609e:	d109      	bne.n	80060b4 <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060a0:	4a6c      	ldr	r2, [pc, #432]	; (8006254 <getCommand+0x208>)
 80060a2:	496d      	ldr	r1, [pc, #436]	; (8006258 <getCommand+0x20c>)
 80060a4:	0020      	movs	r0, r4
 80060a6:	f00e f857 	bl	8014158 <sprintf>
}
 80060aa:	2000      	movs	r0, #0
 80060ac:	b002      	add	sp, #8
 80060ae:	bc04      	pop	{r2}
 80060b0:	4690      	mov	r8, r2
 80060b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOS.response == BOS_RESPONSE_MSG)
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d105      	bne.n	80060c4 <getCommand+0x78>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80060b8:	4a68      	ldr	r2, [pc, #416]	; (800625c <getCommand+0x210>)
 80060ba:	4967      	ldr	r1, [pc, #412]	; (8006258 <getCommand+0x20c>)
 80060bc:	0020      	movs	r0, r4
 80060be:	f00e f84b 	bl	8014158 <sprintf>
 80060c2:	e7f2      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.response == BOS_RESPONSE_NONE)
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d000      	beq.n	80060ca <getCommand+0x7e>
 80060c8:	e0b6      	b.n	8006238 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80060ca:	4a65      	ldr	r2, [pc, #404]	; (8006260 <getCommand+0x214>)
 80060cc:	4962      	ldr	r1, [pc, #392]	; (8006258 <getCommand+0x20c>)
 80060ce:	0020      	movs	r0, r4
 80060d0:	f00e f842 	bl	8014158 <sprintf>
 80060d4:	e7e9      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80060d6:	0032      	movs	r2, r6
 80060d8:	4962      	ldr	r1, [pc, #392]	; (8006264 <getCommand+0x218>)
 80060da:	0038      	movs	r0, r7
 80060dc:	f00e f880 	bl	80141e0 <strncmp>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d11a      	bne.n	800611a <getCommand+0xce>
			if(BOS.trace == TRACE_BOTH)
 80060e4:	4b5a      	ldr	r3, [pc, #360]	; (8006250 <getCommand+0x204>)
 80060e6:	79db      	ldrb	r3, [r3, #7]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d105      	bne.n	80060f8 <getCommand+0xac>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060ec:	4a59      	ldr	r2, [pc, #356]	; (8006254 <getCommand+0x208>)
 80060ee:	495a      	ldr	r1, [pc, #360]	; (8006258 <getCommand+0x20c>)
 80060f0:	0020      	movs	r0, r4
 80060f2:	f00e f831 	bl	8014158 <sprintf>
 80060f6:	e7d8      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.trace == TRACE_MESSAGE)
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d105      	bne.n	8006108 <getCommand+0xbc>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80060fc:	4a57      	ldr	r2, [pc, #348]	; (800625c <getCommand+0x210>)
 80060fe:	4956      	ldr	r1, [pc, #344]	; (8006258 <getCommand+0x20c>)
 8006100:	0020      	movs	r0, r4
 8006102:	f00e f829 	bl	8014158 <sprintf>
 8006106:	e7d0      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.trace == TRACE_NONE)
 8006108:	2b00      	cmp	r3, #0
 800610a:	d000      	beq.n	800610e <getCommand+0xc2>
 800610c:	e094      	b.n	8006238 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800610e:	4a54      	ldr	r2, [pc, #336]	; (8006260 <getCommand+0x214>)
 8006110:	4951      	ldr	r1, [pc, #324]	; (8006258 <getCommand+0x20c>)
 8006112:	0020      	movs	r0, r4
 8006114:	f00e f820 	bl	8014158 <sprintf>
 8006118:	e7c7      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800611a:	0032      	movs	r2, r6
 800611c:	4952      	ldr	r1, [pc, #328]	; (8006268 <getCommand+0x21c>)
 800611e:	0038      	movs	r0, r7
 8006120:	f00e f85e 	bl	80141e0 <strncmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	d106      	bne.n	8006136 <getCommand+0xea>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006128:	4b49      	ldr	r3, [pc, #292]	; (8006250 <getCommand+0x204>)
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	494f      	ldr	r1, [pc, #316]	; (800626c <getCommand+0x220>)
 800612e:	0020      	movs	r0, r4
 8006130:	f00e f812 	bl	8014158 <sprintf>
 8006134:	e7b9      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006136:	0032      	movs	r2, r6
 8006138:	494d      	ldr	r1, [pc, #308]	; (8006270 <getCommand+0x224>)
 800613a:	0038      	movs	r0, r7
 800613c:	f00e f850 	bl	80141e0 <strncmp>
 8006140:	2800      	cmp	r0, #0
 8006142:	d106      	bne.n	8006152 <getCommand+0x106>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006144:	4b42      	ldr	r3, [pc, #264]	; (8006250 <getCommand+0x204>)
 8006146:	881a      	ldrh	r2, [r3, #0]
 8006148:	4948      	ldr	r1, [pc, #288]	; (800626c <getCommand+0x220>)
 800614a:	0020      	movs	r0, r4
 800614c:	f00e f804 	bl	8014158 <sprintf>
 8006150:	e7ab      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006152:	0032      	movs	r2, r6
 8006154:	4947      	ldr	r1, [pc, #284]	; (8006274 <getCommand+0x228>)
 8006156:	0038      	movs	r0, r7
 8006158:	f00e f842 	bl	80141e0 <strncmp>
 800615c:	2800      	cmp	r0, #0
 800615e:	d106      	bne.n	800616e <getCommand+0x122>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006160:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <getCommand+0x204>)
 8006162:	885a      	ldrh	r2, [r3, #2]
 8006164:	4941      	ldr	r1, [pc, #260]	; (800626c <getCommand+0x220>)
 8006166:	0020      	movs	r0, r4
 8006168:	f00d fff6 	bl	8014158 <sprintf>
 800616c:	e79d      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800616e:	0032      	movs	r2, r6
 8006170:	4941      	ldr	r1, [pc, #260]	; (8006278 <getCommand+0x22c>)
 8006172:	0038      	movs	r0, r7
 8006174:	f00e f834 	bl	80141e0 <strncmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	d106      	bne.n	800618a <getCommand+0x13e>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 800617c:	4b34      	ldr	r3, [pc, #208]	; (8006250 <getCommand+0x204>)
 800617e:	791a      	ldrb	r2, [r3, #4]
 8006180:	493a      	ldr	r1, [pc, #232]	; (800626c <getCommand+0x220>)
 8006182:	0020      	movs	r0, r4
 8006184:	f00d ffe8 	bl	8014158 <sprintf>
 8006188:	e78f      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800618a:	0032      	movs	r2, r6
 800618c:	493b      	ldr	r1, [pc, #236]	; (800627c <getCommand+0x230>)
 800618e:	0038      	movs	r0, r7
 8006190:	f00e f826 	bl	80141e0 <strncmp>
 8006194:	2800      	cmp	r0, #0
 8006196:	d10d      	bne.n	80061b4 <getCommand+0x168>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006198:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <getCommand+0x204>)
 800619a:	795a      	ldrb	r2, [r3, #5]
 800619c:	4933      	ldr	r1, [pc, #204]	; (800626c <getCommand+0x220>)
 800619e:	0020      	movs	r0, r4
 80061a0:	f00d ffda 	bl	8014158 <sprintf>
 80061a4:	e781      	b.n	80060aa <getCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 80061a6:	2205      	movs	r2, #5
 80061a8:	4935      	ldr	r1, [pc, #212]	; (8006280 <getCommand+0x234>)
 80061aa:	0028      	movs	r0, r5
 80061ac:	f00e f818 	bl	80141e0 <strncmp>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d005      	beq.n	80061c0 <getCommand+0x174>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80061b4:	2213      	movs	r2, #19
 80061b6:	4933      	ldr	r1, [pc, #204]	; (8006284 <getCommand+0x238>)
 80061b8:	0020      	movs	r0, r4
 80061ba:	f00d fdca 	bl	8013d52 <memcpy>
 80061be:	e774      	b.n	80060aa <getCommand+0x5e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80061c0:	466a      	mov	r2, sp
 80061c2:	2102      	movs	r1, #2
 80061c4:	0030      	movs	r0, r6
 80061c6:	f008 f8e3 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80061ca:	0005      	movs	r5, r0
 80061cc:	4f2e      	ldr	r7, [pc, #184]	; (8006288 <getCommand+0x23c>)
		for(i =0; i < MaxNumOfGroups; i++){
 80061ce:	2600      	movs	r6, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80061d0:	0039      	movs	r1, r7
 80061d2:	0028      	movs	r0, r5
 80061d4:	f7f9 ff96 	bl	8000104 <strcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d011      	beq.n	8006200 <getCommand+0x1b4>
		for(i =0; i < MaxNumOfGroups; i++){
 80061dc:	3601      	adds	r6, #1
 80061de:	b2f6      	uxtb	r6, r6
 80061e0:	370a      	adds	r7, #10
 80061e2:	2e0a      	cmp	r6, #10
 80061e4:	d1f4      	bne.n	80061d0 <getCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 80061e6:	002a      	movs	r2, r5
 80061e8:	4928      	ldr	r1, [pc, #160]	; (800628c <getCommand+0x240>)
 80061ea:	0020      	movs	r0, r4
 80061ec:	f00d ffb4 	bl	8014158 <sprintf>
			return pdFALSE;
 80061f0:	e75b      	b.n	80060aa <getCommand+0x5e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061f2:	002b      	movs	r3, r5
 80061f4:	0022      	movs	r2, r4
 80061f6:	4926      	ldr	r1, [pc, #152]	; (8006290 <getCommand+0x244>)
 80061f8:	0020      	movs	r0, r4
 80061fa:	f00d ffad 	bl	8014158 <sprintf>
 80061fe:	e015      	b.n	800622c <getCommand+0x1e0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8006200:	002a      	movs	r2, r5
 8006202:	4924      	ldr	r1, [pc, #144]	; (8006294 <getCommand+0x248>)
 8006204:	0020      	movs	r0, r4
 8006206:	f00d ffa7 	bl	8014158 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 800620a:	4b23      	ldr	r3, [pc, #140]	; (8006298 <getCommand+0x24c>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d100      	bne.n	8006214 <getCommand+0x1c8>
 8006212:	e74a      	b.n	80060aa <getCommand+0x5e>
 8006214:	2501      	movs	r5, #1
 8006216:	002b      	movs	r3, r5
 8006218:	40b3      	lsls	r3, r6
 800621a:	4698      	mov	r8, r3
				if(InGroup(j,i)){
 800621c:	4f1f      	ldr	r7, [pc, #124]	; (800629c <getCommand+0x250>)
			for(j =1; j <= N; j++)						// N modules
 800621e:	4e1e      	ldr	r6, [pc, #120]	; (8006298 <getCommand+0x24c>)
				if(InGroup(j,i)){
 8006220:	1e6b      	subs	r3, r5, #1
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	5bdb      	ldrh	r3, [r3, r7]
 8006226:	4642      	mov	r2, r8
 8006228:	421a      	tst	r2, r3
 800622a:	d1e2      	bne.n	80061f2 <getCommand+0x1a6>
			for(j =1; j <= N; j++)						// N modules
 800622c:	3501      	adds	r5, #1
 800622e:	b2ed      	uxtb	r5, r5
 8006230:	7833      	ldrb	r3, [r6, #0]
 8006232:	42ab      	cmp	r3, r5
 8006234:	d2f4      	bcs.n	8006220 <getCommand+0x1d4>
 8006236:	e738      	b.n	80060aa <getCommand+0x5e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006238:	002a      	movs	r2, r5
 800623a:	4919      	ldr	r1, [pc, #100]	; (80062a0 <getCommand+0x254>)
 800623c:	0020      	movs	r0, r4
 800623e:	f00d ff8b 	bl	8014158 <sprintf>
 8006242:	e732      	b.n	80060aa <getCommand+0x5e>
 8006244:	20001294 	.word	0x20001294
 8006248:	080194ac 	.word	0x080194ac
 800624c:	080194b4 	.word	0x080194b4
 8006250:	20006aa0 	.word	0x20006aa0
 8006254:	080188b4 	.word	0x080188b4
 8006258:	0801870c 	.word	0x0801870c
 800625c:	080194c0 	.word	0x080194c0
 8006260:	080194c4 	.word	0x080194c4
 8006264:	080194cc 	.word	0x080194cc
 8006268:	080194d4 	.word	0x080194d4
 800626c:	08018d64 	.word	0x08018d64
 8006270:	080194e0 	.word	0x080194e0
 8006274:	080194ec 	.word	0x080194ec
 8006278:	080194fc 	.word	0x080194fc
 800627c:	08019510 	.word	0x08019510
 8006280:	08019524 	.word	0x08019524
 8006284:	08019534 	.word	0x08019534
 8006288:	20000e5c 	.word	0x20000e5c
 800628c:	08019548 	.word	0x08019548
 8006290:	0801952c 	.word	0x0801952c
 8006294:	08019564 	.word	0x08019564
 8006298:	2000001c 	.word	0x2000001c
 800629c:	20000ec0 	.word	0x20000ec0
 80062a0:	08019578 	.word	0x08019578

080062a4 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	0004      	movs	r4, r0
 80062aa:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80062b0:	2c00      	cmp	r4, #0
 80062b2:	d101      	bne.n	80062b8 <defaultCommand+0x14>
 80062b4:	b672      	cpsid	i
 80062b6:	e7fe      	b.n	80062b6 <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062b8:	aa01      	add	r2, sp, #4
 80062ba:	2101      	movs	r1, #1
 80062bc:	f008 f868 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80062c0:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 80062c2:	9e01      	ldr	r6, [sp, #4]
 80062c4:	0032      	movs	r2, r6
 80062c6:	491e      	ldr	r1, [pc, #120]	; (8006340 <defaultCommand+0x9c>)
 80062c8:	f00d ff8a 	bl	80141e0 <strncmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d01e      	beq.n	800630e <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 80062d0:	0032      	movs	r2, r6
 80062d2:	491c      	ldr	r1, [pc, #112]	; (8006344 <defaultCommand+0xa0>)
 80062d4:	0028      	movs	r0, r5
 80062d6:	f00d ff83 	bl	80141e0 <strncmp>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d12a      	bne.n	8006334 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 80062de:	2200      	movs	r2, #0
 80062e0:	2116      	movs	r1, #22
 80062e2:	20ff      	movs	r0, #255	; 0xff
 80062e4:	f003 f9ee 	bl	80096c4 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80062e8:	4b17      	ldr	r3, [pc, #92]	; (8006348 <defaultCommand+0xa4>)
 80062ea:	2202      	movs	r2, #2
 80062ec:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80062ee:	2064      	movs	r0, #100	; 0x64
 80062f0:	f007 ff35 	bl	800e15e <osDelay>
		ClearEEportsDir();
 80062f4:	f7fd f96a 	bl	80035cc <ClearEEportsDir>
		ClearROtopology();
 80062f8:	f005 f9a6 	bl	800b648 <ClearROtopology>
		osDelay(100);
 80062fc:	2064      	movs	r0, #100	; 0x64
 80062fe:	f007 ff2e 	bl	800e15e <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006302:	2240      	movs	r2, #64	; 0x40
 8006304:	4911      	ldr	r1, [pc, #68]	; (800634c <defaultCommand+0xa8>)
 8006306:	0020      	movs	r0, r4
 8006308:	f00d fd23 	bl	8013d52 <memcpy>
 800630c:	e00f      	b.n	800632e <defaultCommand+0x8a>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800630e:	4910      	ldr	r1, [pc, #64]	; (8006350 <defaultCommand+0xac>)
 8006310:	4b10      	ldr	r3, [pc, #64]	; (8006354 <defaultCommand+0xb0>)
 8006312:	000a      	movs	r2, r1
 8006314:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006316:	c223      	stmia	r2!, {r0, r1, r5}
 8006318:	cb23      	ldmia	r3!, {r0, r1, r5}
 800631a:	c223      	stmia	r2!, {r0, r1, r5}
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006320:	f7fd f91c 	bl	800355c <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006324:	2227      	movs	r2, #39	; 0x27
 8006326:	490c      	ldr	r1, [pc, #48]	; (8006358 <defaultCommand+0xb4>)
 8006328:	0020      	movs	r0, r4
 800632a:	f00d fd12 	bl	8013d52 <memcpy>
}
 800632e:	2000      	movs	r0, #0
 8006330:	b002      	add	sp, #8
 8006332:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006334:	220f      	movs	r2, #15
 8006336:	4909      	ldr	r1, [pc, #36]	; (800635c <defaultCommand+0xb8>)
 8006338:	0020      	movs	r0, r4
 800633a:	f00d fd0a 	bl	8013d52 <memcpy>
 800633e:	e7f6      	b.n	800632e <defaultCommand+0x8a>
 8006340:	08019368 	.word	0x08019368
 8006344:	08019398 	.word	0x08019398
 8006348:	20000ef4 	.word	0x20000ef4
 800634c:	080193b0 	.word	0x080193b0
 8006350:	20006aa0 	.word	0x20006aa0
 8006354:	20000000 	.word	0x20000000
 8006358:	08019370 	.word	0x08019370
 800635c:	080193a0 	.word	0x080193a0

08006360 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006362:	46ce      	mov	lr, r9
 8006364:	4647      	mov	r7, r8
 8006366:	b580      	push	{r7, lr}
 8006368:	b08d      	sub	sp, #52	; 0x34
 800636a:	0005      	movs	r5, r0
 800636c:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 800636e:	2300      	movs	r3, #0
 8006370:	930b      	str	r3, [sp, #44]	; 0x2c
 8006372:	930a      	str	r3, [sp, #40]	; 0x28
 8006374:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8006376:	9308      	str	r3, [sp, #32]
 8006378:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 800637a:	2800      	cmp	r0, #0
 800637c:	d101      	bne.n	8006382 <setCommand+0x22>
 800637e:	b672      	cpsid	i
 8006380:	e7fe      	b.n	8006380 <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006382:	aa0b      	add	r2, sp, #44	; 0x2c
 8006384:	2101      	movs	r1, #1
 8006386:	0020      	movs	r0, r4
 8006388:	f008 f802 	bl	800e390 <FreeRTOS_CLIGetParameter>
 800638c:	0006      	movs	r6, r0
 800638e:	4bb3      	ldr	r3, [pc, #716]	; (800665c <setCommand+0x2fc>)
 8006390:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006392:	2204      	movs	r2, #4
 8006394:	49b2      	ldr	r1, [pc, #712]	; (8006660 <setCommand+0x300>)
 8006396:	f00d ff23 	bl	80141e0 <strncmp>
 800639a:	2800      	cmp	r0, #0
 800639c:	d015      	beq.n	80063ca <setCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800639e:	2204      	movs	r2, #4
 80063a0:	49b0      	ldr	r1, [pc, #704]	; (8006664 <setCommand+0x304>)
 80063a2:	0030      	movs	r0, r6
 80063a4:	f00d ff1c 	bl	80141e0 <strncmp>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d100      	bne.n	80063ae <setCommand+0x4e>
 80063ac:	e180      	b.n	80066b0 <setCommand+0x350>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80063ae:	2204      	movs	r2, #4
 80063b0:	49ad      	ldr	r1, [pc, #692]	; (8006668 <setCommand+0x308>)
 80063b2:	0030      	movs	r0, r6
 80063b4:	f00d ff14 	bl	80141e0 <strncmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d100      	bne.n	80063be <setCommand+0x5e>
 80063bc:	e1e6      	b.n	800678c <setCommand+0x42c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80063be:	2213      	movs	r2, #19
 80063c0:	49aa      	ldr	r1, [pc, #680]	; (800666c <setCommand+0x30c>)
 80063c2:	0028      	movs	r0, r5
 80063c4:	f00d fcc5 	bl	8013d52 <memcpy>
 80063c8:	e1d7      	b.n	800677a <setCommand+0x41a>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80063ca:	aa0a      	add	r2, sp, #40	; 0x28
 80063cc:	2102      	movs	r1, #2
 80063ce:	0020      	movs	r0, r4
 80063d0:	f007 ffde 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80063d4:	0004      	movs	r4, r0
 80063d6:	4ba6      	ldr	r3, [pc, #664]	; (8006670 <setCommand+0x310>)
 80063d8:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80063da:	4ba0      	ldr	r3, [pc, #640]	; (800665c <setCommand+0x2fc>)
 80063dc:	681e      	ldr	r6, [r3, #0]
 80063de:	3604      	adds	r6, #4
 80063e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e2:	1f1f      	subs	r7, r3, #4
 80063e4:	003a      	movs	r2, r7
 80063e6:	49a3      	ldr	r1, [pc, #652]	; (8006674 <setCommand+0x314>)
 80063e8:	0030      	movs	r0, r6
 80063ea:	f00d fef9 	bl	80141e0 <strncmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d153      	bne.n	800649a <setCommand+0x13a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80063f2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80063f4:	0032      	movs	r2, r6
 80063f6:	49a0      	ldr	r1, [pc, #640]	; (8006678 <setCommand+0x318>)
 80063f8:	0020      	movs	r0, r4
 80063fa:	f00d fef1 	bl	80141e0 <strncmp>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d115      	bne.n	800642e <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 8006402:	4b9e      	ldr	r3, [pc, #632]	; (800667c <setCommand+0x31c>)
 8006404:	2160      	movs	r1, #96	; 0x60
 8006406:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006408:	79db      	ldrb	r3, [r3, #7]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	4319      	orrs	r1, r3
 800640e:	308a      	adds	r0, #138	; 0x8a
 8006410:	0040      	lsls	r0, r0, #1
 8006412:	f001 f9e5 	bl	80077e0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006416:	4b91      	ldr	r3, [pc, #580]	; (800665c <setCommand+0x2fc>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	2300      	movs	r3, #0
 800641c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800641e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006420:	4b93      	ldr	r3, [pc, #588]	; (8006670 <setCommand+0x310>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4996      	ldr	r1, [pc, #600]	; (8006680 <setCommand+0x320>)
 8006426:	0028      	movs	r0, r5
 8006428:	f00d fe96 	bl	8014158 <sprintf>
	return pdFALSE;
 800642c:	e1a5      	b.n	800677a <setCommand+0x41a>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800642e:	0032      	movs	r2, r6
 8006430:	4994      	ldr	r1, [pc, #592]	; (8006684 <setCommand+0x324>)
 8006432:	0020      	movs	r0, r4
 8006434:	f00d fed4 	bl	80141e0 <strncmp>
 8006438:	2800      	cmp	r0, #0
 800643a:	d10a      	bne.n	8006452 <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 800643c:	4b8f      	ldr	r3, [pc, #572]	; (800667c <setCommand+0x31c>)
 800643e:	2120      	movs	r1, #32
 8006440:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006442:	79db      	ldrb	r3, [r3, #7]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	4319      	orrs	r1, r3
 8006448:	308a      	adds	r0, #138	; 0x8a
 800644a:	0040      	lsls	r0, r0, #1
 800644c:	f001 f9c8 	bl	80077e0 <EE_WriteVariable>
 8006450:	e7e1      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006452:	0032      	movs	r2, r6
 8006454:	498c      	ldr	r1, [pc, #560]	; (8006688 <setCommand+0x328>)
 8006456:	0020      	movs	r0, r4
 8006458:	f00d fec2 	bl	80141e0 <strncmp>
 800645c:	2800      	cmp	r0, #0
 800645e:	d10a      	bne.n	8006476 <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 8006460:	4b86      	ldr	r3, [pc, #536]	; (800667c <setCommand+0x31c>)
 8006462:	2140      	movs	r1, #64	; 0x40
 8006464:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006466:	79db      	ldrb	r3, [r3, #7]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	4319      	orrs	r1, r3
 800646c:	308a      	adds	r0, #138	; 0x8a
 800646e:	0040      	lsls	r0, r0, #1
 8006470:	f001 f9b6 	bl	80077e0 <EE_WriteVariable>
 8006474:	e7cf      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006476:	0032      	movs	r2, r6
 8006478:	4984      	ldr	r1, [pc, #528]	; (800668c <setCommand+0x32c>)
 800647a:	0020      	movs	r0, r4
 800647c:	f00d feb0 	bl	80141e0 <strncmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	d000      	beq.n	8006486 <setCommand+0x126>
 8006484:	e2a7      	b.n	80069d6 <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 8006486:	4b7d      	ldr	r3, [pc, #500]	; (800667c <setCommand+0x31c>)
 8006488:	2200      	movs	r2, #0
 800648a:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800648c:	79d9      	ldrb	r1, [r3, #7]
 800648e:	0209      	lsls	r1, r1, #8
 8006490:	308a      	adds	r0, #138	; 0x8a
 8006492:	0040      	lsls	r0, r0, #1
 8006494:	f001 f9a4 	bl	80077e0 <EE_WriteVariable>
 8006498:	e7bd      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800649a:	003a      	movs	r2, r7
 800649c:	497c      	ldr	r1, [pc, #496]	; (8006690 <setCommand+0x330>)
 800649e:	0030      	movs	r0, r6
 80064a0:	f00d fe9e 	bl	80141e0 <strncmp>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d14a      	bne.n	800653e <setCommand+0x1de>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80064a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064aa:	0032      	movs	r2, r6
 80064ac:	4972      	ldr	r1, [pc, #456]	; (8006678 <setCommand+0x318>)
 80064ae:	0020      	movs	r0, r4
 80064b0:	f00d fe96 	bl	80141e0 <strncmp>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d10b      	bne.n	80064d0 <setCommand+0x170>
				BOS.trace =TRACE_BOTH;
 80064b8:	4b70      	ldr	r3, [pc, #448]	; (800667c <setCommand+0x31c>)
 80064ba:	2203      	movs	r2, #3
 80064bc:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80064be:	799b      	ldrb	r3, [r3, #6]
 80064c0:	21c0      	movs	r1, #192	; 0xc0
 80064c2:	0089      	lsls	r1, r1, #2
 80064c4:	4319      	orrs	r1, r3
 80064c6:	308a      	adds	r0, #138	; 0x8a
 80064c8:	0040      	lsls	r0, r0, #1
 80064ca:	f001 f989 	bl	80077e0 <EE_WriteVariable>
 80064ce:	e7a2      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80064d0:	0032      	movs	r2, r6
 80064d2:	496c      	ldr	r1, [pc, #432]	; (8006684 <setCommand+0x324>)
 80064d4:	0020      	movs	r0, r4
 80064d6:	f00d fe83 	bl	80141e0 <strncmp>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d10b      	bne.n	80064f6 <setCommand+0x196>
				BOS.trace =TRACE_MESSAGE;
 80064de:	4b67      	ldr	r3, [pc, #412]	; (800667c <setCommand+0x31c>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80064e4:	799b      	ldrb	r3, [r3, #6]
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	0049      	lsls	r1, r1, #1
 80064ea:	4319      	orrs	r1, r3
 80064ec:	308a      	adds	r0, #138	; 0x8a
 80064ee:	4090      	lsls	r0, r2
 80064f0:	f001 f976 	bl	80077e0 <EE_WriteVariable>
 80064f4:	e78f      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80064f6:	0032      	movs	r2, r6
 80064f8:	495e      	ldr	r1, [pc, #376]	; (8006674 <setCommand+0x314>)
 80064fa:	0020      	movs	r0, r4
 80064fc:	f00d fe70 	bl	80141e0 <strncmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	d10b      	bne.n	800651c <setCommand+0x1bc>
				BOS.trace =TRACE_RESPONSE;
 8006504:	4b5d      	ldr	r3, [pc, #372]	; (800667c <setCommand+0x31c>)
 8006506:	2202      	movs	r2, #2
 8006508:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800650a:	799b      	ldrb	r3, [r3, #6]
 800650c:	2180      	movs	r1, #128	; 0x80
 800650e:	0089      	lsls	r1, r1, #2
 8006510:	4319      	orrs	r1, r3
 8006512:	308a      	adds	r0, #138	; 0x8a
 8006514:	0040      	lsls	r0, r0, #1
 8006516:	f001 f963 	bl	80077e0 <EE_WriteVariable>
 800651a:	e77c      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 800651c:	0032      	movs	r2, r6
 800651e:	495b      	ldr	r1, [pc, #364]	; (800668c <setCommand+0x32c>)
 8006520:	0020      	movs	r0, r4
 8006522:	f00d fe5d 	bl	80141e0 <strncmp>
 8006526:	2800      	cmp	r0, #0
 8006528:	d000      	beq.n	800652c <setCommand+0x1cc>
 800652a:	e254      	b.n	80069d6 <setCommand+0x676>
				BOS.trace =TRACE_NONE;
 800652c:	4b53      	ldr	r3, [pc, #332]	; (800667c <setCommand+0x31c>)
 800652e:	2200      	movs	r2, #0
 8006530:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006532:	7999      	ldrb	r1, [r3, #6]
 8006534:	308a      	adds	r0, #138	; 0x8a
 8006536:	0040      	lsls	r0, r0, #1
 8006538:	f001 f952 	bl	80077e0 <EE_WriteVariable>
 800653c:	e76b      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800653e:	003a      	movs	r2, r7
 8006540:	4954      	ldr	r1, [pc, #336]	; (8006694 <setCommand+0x334>)
 8006542:	0030      	movs	r0, r6
 8006544:	f00d fe4c 	bl	80141e0 <strncmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	d128      	bne.n	800659e <setCommand+0x23e>
			temp2 =atoi((const char* )pcParameterString2);
 800654c:	0020      	movs	r0, r4
 800654e:	f00d f970 	bl	8013832 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006552:	23e1      	movs	r3, #225	; 0xe1
 8006554:	031b      	lsls	r3, r3, #12
 8006556:	4298      	cmp	r0, r3
 8006558:	d900      	bls.n	800655c <setCommand+0x1fc>
 800655a:	e23c      	b.n	80069d6 <setCommand+0x676>
				BOS.clibaudrate =temp2;
 800655c:	4c47      	ldr	r4, [pc, #284]	; (800667c <setCommand+0x31c>)
 800655e:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006560:	b281      	uxth	r1, r0
 8006562:	208c      	movs	r0, #140	; 0x8c
 8006564:	0040      	lsls	r0, r0, #1
 8006566:	f001 f93b 	bl	80077e0 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800656a:	68a1      	ldr	r1, [r4, #8]
 800656c:	0c09      	lsrs	r1, r1, #16
 800656e:	201a      	movs	r0, #26
 8006570:	30ff      	adds	r0, #255	; 0xff
 8006572:	f001 f935 	bl	80077e0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <setCommand+0x2fc>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800657e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006580:	4b3b      	ldr	r3, [pc, #236]	; (8006670 <setCommand+0x310>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	493e      	ldr	r1, [pc, #248]	; (8006680 <setCommand+0x320>)
 8006586:	0028      	movs	r0, r5
 8006588:	f00d fde6 	bl	8014158 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 800658c:	4942      	ldr	r1, [pc, #264]	; (8006698 <setCommand+0x338>)
 800658e:	0028      	movs	r0, r5
 8006590:	f00d fe02 	bl	8014198 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006594:	4941      	ldr	r1, [pc, #260]	; (800669c <setCommand+0x33c>)
 8006596:	0028      	movs	r0, r5
 8006598:	f00d fdfe 	bl	8014198 <strcat>
 800659c:	e0ed      	b.n	800677a <setCommand+0x41a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800659e:	003a      	movs	r2, r7
 80065a0:	493f      	ldr	r1, [pc, #252]	; (80066a0 <setCommand+0x340>)
 80065a2:	0030      	movs	r0, r6
 80065a4:	f00d fe1c 	bl	80141e0 <strncmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d10d      	bne.n	80065c8 <setCommand+0x268>
			temp16 =atoi((const char* )pcParameterString2);
 80065ac:	0020      	movs	r0, r4
 80065ae:	f00d f940 	bl	8013832 <atoi>
 80065b2:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d100      	bne.n	80065ba <setCommand+0x25a>
 80065b8:	e20d      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.debounce =temp16;
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <setCommand+0x31c>)
 80065bc:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80065be:	2016      	movs	r0, #22
 80065c0:	30ff      	adds	r0, #255	; 0xff
 80065c2:	f001 f90d 	bl	80077e0 <EE_WriteVariable>
 80065c6:	e726      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80065c8:	003a      	movs	r2, r7
 80065ca:	4936      	ldr	r1, [pc, #216]	; (80066a4 <setCommand+0x344>)
 80065cc:	0030      	movs	r0, r6
 80065ce:	f00d fe07 	bl	80141e0 <strncmp>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d10d      	bne.n	80065f2 <setCommand+0x292>
			temp16 =atoi((const char* )pcParameterString2);
 80065d6:	0020      	movs	r0, r4
 80065d8:	f00d f92b 	bl	8013832 <atoi>
 80065dc:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80065de:	2900      	cmp	r1, #0
 80065e0:	d100      	bne.n	80065e4 <setCommand+0x284>
 80065e2:	e1f8      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.singleClickTime =temp16;
 80065e4:	4b25      	ldr	r3, [pc, #148]	; (800667c <setCommand+0x31c>)
 80065e6:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80065e8:	208b      	movs	r0, #139	; 0x8b
 80065ea:	0040      	lsls	r0, r0, #1
 80065ec:	f001 f8f8 	bl	80077e0 <EE_WriteVariable>
 80065f0:	e711      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80065f2:	003a      	movs	r2, r7
 80065f4:	492c      	ldr	r1, [pc, #176]	; (80066a8 <setCommand+0x348>)
 80065f6:	0030      	movs	r0, r6
 80065f8:	f00d fdf2 	bl	80141e0 <strncmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d112      	bne.n	8006626 <setCommand+0x2c6>
			temp16 =atoi((const char* )pcParameterString2);
 8006600:	0020      	movs	r0, r4
 8006602:	f00d f916 	bl	8013832 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006606:	1e43      	subs	r3, r0, #1
 8006608:	b29b      	uxth	r3, r3
 800660a:	2bfe      	cmp	r3, #254	; 0xfe
 800660c:	d900      	bls.n	8006610 <setCommand+0x2b0>
 800660e:	e1e2      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.minInterClickTime =temp16;
 8006610:	b2c0      	uxtb	r0, r0
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <setCommand+0x31c>)
 8006614:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006616:	7959      	ldrb	r1, [r3, #5]
 8006618:	0209      	lsls	r1, r1, #8
 800661a:	4301      	orrs	r1, r0
 800661c:	2018      	movs	r0, #24
 800661e:	30ff      	adds	r0, #255	; 0xff
 8006620:	f001 f8de 	bl	80077e0 <EE_WriteVariable>
 8006624:	e6f7      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006626:	003a      	movs	r2, r7
 8006628:	4920      	ldr	r1, [pc, #128]	; (80066ac <setCommand+0x34c>)
 800662a:	0030      	movs	r0, r6
 800662c:	f00d fdd8 	bl	80141e0 <strncmp>
 8006630:	2800      	cmp	r0, #0
 8006632:	d000      	beq.n	8006636 <setCommand+0x2d6>
 8006634:	e6c3      	b.n	80063be <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 8006636:	0020      	movs	r0, r4
 8006638:	f00d f8fb 	bl	8013832 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800663c:	1e43      	subs	r3, r0, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	2bfe      	cmp	r3, #254	; 0xfe
 8006642:	d900      	bls.n	8006646 <setCommand+0x2e6>
 8006644:	e1c7      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.maxInterClickTime =temp16;
 8006646:	4b0d      	ldr	r3, [pc, #52]	; (800667c <setCommand+0x31c>)
 8006648:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800664a:	0200      	lsls	r0, r0, #8
 800664c:	7919      	ldrb	r1, [r3, #4]
 800664e:	4301      	orrs	r1, r0
 8006650:	b289      	uxth	r1, r1
 8006652:	2018      	movs	r0, #24
 8006654:	30ff      	adds	r0, #255	; 0xff
 8006656:	f001 f8c3 	bl	80077e0 <EE_WriteVariable>
 800665a:	e6dc      	b.n	8006416 <setCommand+0xb6>
 800665c:	20001290 	.word	0x20001290
 8006660:	080194ac 	.word	0x080194ac
 8006664:	08019bd8 	.word	0x08019bd8
 8006668:	08019be8 	.word	0x08019be8
 800666c:	08019534 	.word	0x08019534
 8006670:	2000129c 	.word	0x2000129c
 8006674:	080194b4 	.word	0x080194b4
 8006678:	080188b4 	.word	0x080188b4
 800667c:	20006aa0 	.word	0x20006aa0
 8006680:	08019ae0 	.word	0x08019ae0
 8006684:	08019ad4 	.word	0x08019ad4
 8006688:	08019adc 	.word	0x08019adc
 800668c:	080194c4 	.word	0x080194c4
 8006690:	080194cc 	.word	0x080194cc
 8006694:	080194d4 	.word	0x080194d4
 8006698:	08019af4 	.word	0x08019af4
 800669c:	08019b24 	.word	0x08019b24
 80066a0:	080194e0 	.word	0x080194e0
 80066a4:	080194ec 	.word	0x080194ec
 80066a8:	080194fc 	.word	0x080194fc
 80066ac:	08019510 	.word	0x08019510
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80066b0:	aa0a      	add	r2, sp, #40	; 0x28
 80066b2:	2102      	movs	r1, #2
 80066b4:	0020      	movs	r0, r4
 80066b6:	f007 fe6b 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80066ba:	4bca      	ldr	r3, [pc, #808]	; (80069e4 <setCommand+0x684>)
 80066bc:	4699      	mov	r9, r3
 80066be:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80066c0:	aa09      	add	r2, sp, #36	; 0x24
 80066c2:	2103      	movs	r1, #3
 80066c4:	0020      	movs	r0, r4
 80066c6:	f007 fe63 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80066ca:	4fc7      	ldr	r7, [pc, #796]	; (80069e8 <setCommand+0x688>)
 80066cc:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80066ce:	aa08      	add	r2, sp, #32
 80066d0:	2104      	movs	r1, #4
 80066d2:	0020      	movs	r0, r4
 80066d4:	f007 fe5c 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80066d8:	4ec4      	ldr	r6, [pc, #784]	; (80069ec <setCommand+0x68c>)
 80066da:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80066dc:	aa07      	add	r2, sp, #28
 80066de:	2105      	movs	r1, #5
 80066e0:	0020      	movs	r0, r4
 80066e2:	f007 fe55 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80066e6:	4cc2      	ldr	r4, [pc, #776]	; (80069f0 <setCommand+0x690>)
 80066e8:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 80066ea:	464b      	mov	r3, r9
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f00d f8a0 	bl	8013832 <atoi>
 80066f2:	b2c3      	uxtb	r3, r0
 80066f4:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80066f6:	6838      	ldr	r0, [r7, #0]
 80066f8:	f00d f89b 	bl	8013832 <atoi>
 80066fc:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80066fe:	6830      	ldr	r0, [r6, #0]
 8006700:	f00d f897 	bl	8013832 <atoi>
 8006704:	b2c6      	uxtb	r6, r0
		if(pcParameterString5 != NULL){
 8006706:	6824      	ldr	r4, [r4, #0]
 8006708:	2c00      	cmp	r4, #0
 800670a:	d010      	beq.n	800672e <setCommand+0x3ce>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 800670c:	2202      	movs	r2, #2
 800670e:	49b9      	ldr	r1, [pc, #740]	; (80069f4 <setCommand+0x694>)
 8006710:	0020      	movs	r0, r4
 8006712:	f00d fd65 	bl	80141e0 <strncmp>
 8006716:	2800      	cmp	r0, #0
 8006718:	d035      	beq.n	8006786 <setCommand+0x426>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 800671a:	2202      	movs	r2, #2
 800671c:	49b6      	ldr	r1, [pc, #728]	; (80069f8 <setCommand+0x698>)
 800671e:	0020      	movs	r0, r4
 8006720:	f00d fd5e 	bl	80141e0 <strncmp>
 8006724:	2800      	cmp	r0, #0
 8006726:	d000      	beq.n	800672a <setCommand+0x3ca>
 8006728:	e155      	b.n	80069d6 <setCommand+0x676>
				temp84 =RTC_PM;
 800672a:	2302      	movs	r3, #2
 800672c:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800672e:	464b      	mov	r3, r9
 8006730:	2b17      	cmp	r3, #23
 8006732:	d900      	bls.n	8006736 <setCommand+0x3d6>
 8006734:	e14f      	b.n	80069d6 <setCommand+0x676>
 8006736:	2f3b      	cmp	r7, #59	; 0x3b
 8006738:	d900      	bls.n	800673c <setCommand+0x3dc>
 800673a:	e14c      	b.n	80069d6 <setCommand+0x676>
 800673c:	2e3b      	cmp	r6, #59	; 0x3b
 800673e:	d900      	bls.n	8006742 <setCommand+0x3e2>
 8006740:	e149      	b.n	80069d6 <setCommand+0x676>
				GetTimeDate();
 8006742:	f007 f93b 	bl	800d9bc <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006746:	4cad      	ldr	r4, [pc, #692]	; (80069fc <setCommand+0x69c>)
 8006748:	7d23      	ldrb	r3, [r4, #20]
 800674a:	8b22      	ldrh	r2, [r4, #24]
 800674c:	7d61      	ldrb	r1, [r4, #21]
 800674e:	7da0      	ldrb	r0, [r4, #22]
 8006750:	7b24      	ldrb	r4, [r4, #12]
 8006752:	b264      	sxtb	r4, r4
 8006754:	9404      	str	r4, [sp, #16]
 8006756:	4644      	mov	r4, r8
 8006758:	9403      	str	r4, [sp, #12]
 800675a:	464c      	mov	r4, r9
 800675c:	9402      	str	r4, [sp, #8]
 800675e:	9701      	str	r7, [sp, #4]
 8006760:	9600      	str	r6, [sp, #0]
 8006762:	f007 f8d1 	bl	800d908 <BOS_CalendarConfig>
 8006766:	0006      	movs	r6, r0
	if(result == BOS_OK){
 8006768:	2e00      	cmp	r6, #0
 800676a:	d100      	bne.n	800676e <setCommand+0x40e>
 800676c:	e653      	b.n	8006416 <setCommand+0xb6>
	else if(result == BOS_ERR_WrongParam)
 800676e:	2e67      	cmp	r6, #103	; 0x67
 8006770:	d100      	bne.n	8006774 <setCommand+0x414>
 8006772:	e624      	b.n	80063be <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 8006774:	2e68      	cmp	r6, #104	; 0x68
 8006776:	d100      	bne.n	800677a <setCommand+0x41a>
 8006778:	e12d      	b.n	80069d6 <setCommand+0x676>
}
 800677a:	2000      	movs	r0, #0
 800677c:	b00d      	add	sp, #52	; 0x34
 800677e:	bc0c      	pop	{r2, r3}
 8006780:	4690      	mov	r8, r2
 8006782:	4699      	mov	r9, r3
 8006784:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 =RTC_AM;
 8006786:	2301      	movs	r3, #1
 8006788:	4698      	mov	r8, r3
 800678a:	e7d0      	b.n	800672e <setCommand+0x3ce>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800678c:	aa0a      	add	r2, sp, #40	; 0x28
 800678e:	2102      	movs	r1, #2
 8006790:	0020      	movs	r0, r4
 8006792:	f007 fdfd 	bl	800e390 <FreeRTOS_CLIGetParameter>
 8006796:	4e93      	ldr	r6, [pc, #588]	; (80069e4 <setCommand+0x684>)
 8006798:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800679a:	aa09      	add	r2, sp, #36	; 0x24
 800679c:	2103      	movs	r1, #3
 800679e:	0020      	movs	r0, r4
 80067a0:	f007 fdf6 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80067a4:	4b90      	ldr	r3, [pc, #576]	; (80069e8 <setCommand+0x688>)
 80067a6:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80067a8:	aa08      	add	r2, sp, #32
 80067aa:	2104      	movs	r1, #4
 80067ac:	0020      	movs	r0, r4
 80067ae:	f007 fdef 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80067b2:	4b8e      	ldr	r3, [pc, #568]	; (80069ec <setCommand+0x68c>)
 80067b4:	4698      	mov	r8, r3
 80067b6:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80067b8:	aa07      	add	r2, sp, #28
 80067ba:	2105      	movs	r1, #5
 80067bc:	0020      	movs	r0, r4
 80067be:	f007 fde7 	bl	800e390 <FreeRTOS_CLIGetParameter>
 80067c2:	4c8b      	ldr	r4, [pc, #556]	; (80069f0 <setCommand+0x690>)
 80067c4:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 80067c6:	4643      	mov	r3, r8
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f00d f832 	bl	8013832 <atoi>
 80067ce:	b2c3      	uxtb	r3, r0
 80067d0:	4698      	mov	r8, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	f00d f82d 	bl	8013832 <atoi>
 80067d8:	b283      	uxth	r3, r0
 80067da:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80067dc:	6834      	ldr	r4, [r6, #0]
 80067de:	2206      	movs	r2, #6
 80067e0:	4987      	ldr	r1, [pc, #540]	; (8006a00 <setCommand+0x6a0>)
 80067e2:	0020      	movs	r0, r4
 80067e4:	f00d fcfc 	bl	80141e0 <strncmp>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d100      	bne.n	80067ee <setCommand+0x48e>
 80067ec:	e195      	b.n	8006b1a <setCommand+0x7ba>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80067ee:	2207      	movs	r2, #7
 80067f0:	4984      	ldr	r1, [pc, #528]	; (8006a04 <setCommand+0x6a4>)
 80067f2:	0020      	movs	r0, r4
 80067f4:	f00d fcf4 	bl	80141e0 <strncmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d100      	bne.n	80067fe <setCommand+0x49e>
 80067fc:	e19b      	b.n	8006b36 <setCommand+0x7d6>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 80067fe:	2209      	movs	r2, #9
 8006800:	4981      	ldr	r1, [pc, #516]	; (8006a08 <setCommand+0x6a8>)
 8006802:	0020      	movs	r0, r4
 8006804:	f00d fcec 	bl	80141e0 <strncmp>
 8006808:	2800      	cmp	r0, #0
 800680a:	d100      	bne.n	800680e <setCommand+0x4ae>
 800680c:	e195      	b.n	8006b3a <setCommand+0x7da>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800680e:	2208      	movs	r2, #8
 8006810:	497e      	ldr	r1, [pc, #504]	; (8006a0c <setCommand+0x6ac>)
 8006812:	0020      	movs	r0, r4
 8006814:	f00d fce4 	bl	80141e0 <strncmp>
 8006818:	2800      	cmp	r0, #0
 800681a:	d100      	bne.n	800681e <setCommand+0x4be>
 800681c:	e18f      	b.n	8006b3e <setCommand+0x7de>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800681e:	2206      	movs	r2, #6
 8006820:	497b      	ldr	r1, [pc, #492]	; (8006a10 <setCommand+0x6b0>)
 8006822:	0020      	movs	r0, r4
 8006824:	f00d fcdc 	bl	80141e0 <strncmp>
 8006828:	2800      	cmp	r0, #0
 800682a:	d100      	bne.n	800682e <setCommand+0x4ce>
 800682c:	e189      	b.n	8006b42 <setCommand+0x7e2>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 800682e:	2208      	movs	r2, #8
 8006830:	4978      	ldr	r1, [pc, #480]	; (8006a14 <setCommand+0x6b4>)
 8006832:	0020      	movs	r0, r4
 8006834:	f00d fcd4 	bl	80141e0 <strncmp>
 8006838:	2800      	cmp	r0, #0
 800683a:	d100      	bne.n	800683e <setCommand+0x4de>
 800683c:	e183      	b.n	8006b46 <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 800683e:	2206      	movs	r2, #6
 8006840:	4975      	ldr	r1, [pc, #468]	; (8006a18 <setCommand+0x6b8>)
 8006842:	0020      	movs	r0, r4
 8006844:	f00d fccc 	bl	80141e0 <strncmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	d100      	bne.n	800684e <setCommand+0x4ee>
 800684c:	e17d      	b.n	8006b4a <setCommand+0x7ea>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800684e:	4b66      	ldr	r3, [pc, #408]	; (80069e8 <setCommand+0x688>)
 8006850:	681c      	ldr	r4, [r3, #0]
 8006852:	2207      	movs	r2, #7
 8006854:	4971      	ldr	r1, [pc, #452]	; (8006a1c <setCommand+0x6bc>)
 8006856:	0020      	movs	r0, r4
 8006858:	f00d fcc2 	bl	80141e0 <strncmp>
			result =BOS_ERR_WrongValue;
 800685c:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800685e:	2800      	cmp	r0, #0
 8006860:	d101      	bne.n	8006866 <setCommand+0x506>
			result =BOS_ERR_WrongValue;
 8006862:	2668      	movs	r6, #104	; 0x68
 8006864:	e783      	b.n	800676e <setCommand+0x40e>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006866:	2202      	movs	r2, #2
 8006868:	496d      	ldr	r1, [pc, #436]	; (8006a20 <setCommand+0x6c0>)
 800686a:	0020      	movs	r0, r4
 800686c:	f00d fcb8 	bl	80141e0 <strncmp>
 8006870:	2800      	cmp	r0, #0
 8006872:	d100      	bne.n	8006876 <setCommand+0x516>
 8006874:	e104      	b.n	8006a80 <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006876:	2208      	movs	r2, #8
 8006878:	496a      	ldr	r1, [pc, #424]	; (8006a24 <setCommand+0x6c4>)
 800687a:	0020      	movs	r0, r4
 800687c:	f00d fcb0 	bl	80141e0 <strncmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	d100      	bne.n	8006886 <setCommand+0x526>
 8006884:	e11f      	b.n	8006ac6 <setCommand+0x766>
 8006886:	2202      	movs	r2, #2
 8006888:	4967      	ldr	r1, [pc, #412]	; (8006a28 <setCommand+0x6c8>)
 800688a:	0020      	movs	r0, r4
 800688c:	f00d fca8 	bl	80141e0 <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d100      	bne.n	8006896 <setCommand+0x536>
 8006894:	e119      	b.n	8006aca <setCommand+0x76a>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006896:	2205      	movs	r2, #5
 8006898:	4964      	ldr	r1, [pc, #400]	; (8006a2c <setCommand+0x6cc>)
 800689a:	0020      	movs	r0, r4
 800689c:	f00d fca0 	bl	80141e0 <strncmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d100      	bne.n	80068a6 <setCommand+0x546>
 80068a4:	e113      	b.n	8006ace <setCommand+0x76e>
 80068a6:	2202      	movs	r2, #2
 80068a8:	4961      	ldr	r1, [pc, #388]	; (8006a30 <setCommand+0x6d0>)
 80068aa:	0020      	movs	r0, r4
 80068ac:	f00d fc98 	bl	80141e0 <strncmp>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d100      	bne.n	80068b6 <setCommand+0x556>
 80068b4:	e10d      	b.n	8006ad2 <setCommand+0x772>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 80068b6:	2205      	movs	r2, #5
 80068b8:	495e      	ldr	r1, [pc, #376]	; (8006a34 <setCommand+0x6d4>)
 80068ba:	0020      	movs	r0, r4
 80068bc:	f00d fc90 	bl	80141e0 <strncmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d100      	bne.n	80068c6 <setCommand+0x566>
 80068c4:	e107      	b.n	8006ad6 <setCommand+0x776>
 80068c6:	2202      	movs	r2, #2
 80068c8:	495b      	ldr	r1, [pc, #364]	; (8006a38 <setCommand+0x6d8>)
 80068ca:	0020      	movs	r0, r4
 80068cc:	f00d fc88 	bl	80141e0 <strncmp>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d100      	bne.n	80068d6 <setCommand+0x576>
 80068d4:	e101      	b.n	8006ada <setCommand+0x77a>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 80068d6:	2203      	movs	r2, #3
 80068d8:	4958      	ldr	r1, [pc, #352]	; (8006a3c <setCommand+0x6dc>)
 80068da:	0020      	movs	r0, r4
 80068dc:	f00d fc80 	bl	80141e0 <strncmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d100      	bne.n	80068e6 <setCommand+0x586>
 80068e4:	e0fb      	b.n	8006ade <setCommand+0x77e>
 80068e6:	2202      	movs	r2, #2
 80068e8:	4955      	ldr	r1, [pc, #340]	; (8006a40 <setCommand+0x6e0>)
 80068ea:	0020      	movs	r0, r4
 80068ec:	f00d fc78 	bl	80141e0 <strncmp>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d100      	bne.n	80068f6 <setCommand+0x596>
 80068f4:	e0f5      	b.n	8006ae2 <setCommand+0x782>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80068f6:	2204      	movs	r2, #4
 80068f8:	4952      	ldr	r1, [pc, #328]	; (8006a44 <setCommand+0x6e4>)
 80068fa:	0020      	movs	r0, r4
 80068fc:	f00d fc70 	bl	80141e0 <strncmp>
 8006900:	2800      	cmp	r0, #0
 8006902:	d100      	bne.n	8006906 <setCommand+0x5a6>
 8006904:	e0ef      	b.n	8006ae6 <setCommand+0x786>
 8006906:	2202      	movs	r2, #2
 8006908:	494f      	ldr	r1, [pc, #316]	; (8006a48 <setCommand+0x6e8>)
 800690a:	0020      	movs	r0, r4
 800690c:	f00d fc68 	bl	80141e0 <strncmp>
 8006910:	2800      	cmp	r0, #0
 8006912:	d100      	bne.n	8006916 <setCommand+0x5b6>
 8006914:	e0e9      	b.n	8006aea <setCommand+0x78a>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006916:	2204      	movs	r2, #4
 8006918:	494c      	ldr	r1, [pc, #304]	; (8006a4c <setCommand+0x6ec>)
 800691a:	0020      	movs	r0, r4
 800691c:	f00d fc60 	bl	80141e0 <strncmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	d100      	bne.n	8006926 <setCommand+0x5c6>
 8006924:	e0e3      	b.n	8006aee <setCommand+0x78e>
 8006926:	2202      	movs	r2, #2
 8006928:	4949      	ldr	r1, [pc, #292]	; (8006a50 <setCommand+0x6f0>)
 800692a:	0020      	movs	r0, r4
 800692c:	f00d fc58 	bl	80141e0 <strncmp>
 8006930:	2800      	cmp	r0, #0
 8006932:	d100      	bne.n	8006936 <setCommand+0x5d6>
 8006934:	e0dd      	b.n	8006af2 <setCommand+0x792>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006936:	2205      	movs	r2, #5
 8006938:	4946      	ldr	r1, [pc, #280]	; (8006a54 <setCommand+0x6f4>)
 800693a:	0020      	movs	r0, r4
 800693c:	f00d fc50 	bl	80141e0 <strncmp>
 8006940:	2800      	cmp	r0, #0
 8006942:	d100      	bne.n	8006946 <setCommand+0x5e6>
 8006944:	e0d7      	b.n	8006af6 <setCommand+0x796>
 8006946:	2202      	movs	r2, #2
 8006948:	4943      	ldr	r1, [pc, #268]	; (8006a58 <setCommand+0x6f8>)
 800694a:	0020      	movs	r0, r4
 800694c:	f00d fc48 	bl	80141e0 <strncmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	d100      	bne.n	8006956 <setCommand+0x5f6>
 8006954:	e0d1      	b.n	8006afa <setCommand+0x79a>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006956:	2209      	movs	r2, #9
 8006958:	4940      	ldr	r1, [pc, #256]	; (8006a5c <setCommand+0x6fc>)
 800695a:	0020      	movs	r0, r4
 800695c:	f00d fc40 	bl	80141e0 <strncmp>
 8006960:	2800      	cmp	r0, #0
 8006962:	d100      	bne.n	8006966 <setCommand+0x606>
 8006964:	e0cb      	b.n	8006afe <setCommand+0x79e>
 8006966:	2202      	movs	r2, #2
 8006968:	493d      	ldr	r1, [pc, #244]	; (8006a60 <setCommand+0x700>)
 800696a:	0020      	movs	r0, r4
 800696c:	f00d fc38 	bl	80141e0 <strncmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	d100      	bne.n	8006976 <setCommand+0x616>
 8006974:	e0c5      	b.n	8006b02 <setCommand+0x7a2>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006976:	2207      	movs	r2, #7
 8006978:	493a      	ldr	r1, [pc, #232]	; (8006a64 <setCommand+0x704>)
 800697a:	0020      	movs	r0, r4
 800697c:	f00d fc30 	bl	80141e0 <strncmp>
 8006980:	2800      	cmp	r0, #0
 8006982:	d100      	bne.n	8006986 <setCommand+0x626>
 8006984:	e0bf      	b.n	8006b06 <setCommand+0x7a6>
 8006986:	2202      	movs	r2, #2
 8006988:	4937      	ldr	r1, [pc, #220]	; (8006a68 <setCommand+0x708>)
 800698a:	0020      	movs	r0, r4
 800698c:	f00d fc28 	bl	80141e0 <strncmp>
 8006990:	2800      	cmp	r0, #0
 8006992:	d100      	bne.n	8006996 <setCommand+0x636>
 8006994:	e0b9      	b.n	8006b0a <setCommand+0x7aa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006996:	2208      	movs	r2, #8
 8006998:	4934      	ldr	r1, [pc, #208]	; (8006a6c <setCommand+0x70c>)
 800699a:	0020      	movs	r0, r4
 800699c:	f00d fc20 	bl	80141e0 <strncmp>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d100      	bne.n	80069a6 <setCommand+0x646>
 80069a4:	e0b3      	b.n	8006b0e <setCommand+0x7ae>
 80069a6:	2202      	movs	r2, #2
 80069a8:	4931      	ldr	r1, [pc, #196]	; (8006a70 <setCommand+0x710>)
 80069aa:	0020      	movs	r0, r4
 80069ac:	f00d fc18 	bl	80141e0 <strncmp>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d100      	bne.n	80069b6 <setCommand+0x656>
 80069b4:	e0ad      	b.n	8006b12 <setCommand+0x7b2>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 80069b6:	2208      	movs	r2, #8
 80069b8:	492e      	ldr	r1, [pc, #184]	; (8006a74 <setCommand+0x714>)
 80069ba:	0020      	movs	r0, r4
 80069bc:	f00d fc10 	bl	80141e0 <strncmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d100      	bne.n	80069c6 <setCommand+0x666>
 80069c4:	e0a7      	b.n	8006b16 <setCommand+0x7b6>
 80069c6:	2202      	movs	r2, #2
 80069c8:	492b      	ldr	r1, [pc, #172]	; (8006a78 <setCommand+0x718>)
 80069ca:	0020      	movs	r0, r4
 80069cc:	f00d fc08 	bl	80141e0 <strncmp>
			temp82 =DECEMBER;
 80069d0:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d055      	beq.n	8006a82 <setCommand+0x722>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80069d6:	220f      	movs	r2, #15
 80069d8:	4928      	ldr	r1, [pc, #160]	; (8006a7c <setCommand+0x71c>)
 80069da:	0028      	movs	r0, r5
 80069dc:	f00d f9b9 	bl	8013d52 <memcpy>
 80069e0:	e6cb      	b.n	800677a <setCommand+0x41a>
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	2000129c 	.word	0x2000129c
 80069e8:	200012a4 	.word	0x200012a4
 80069ec:	200012a8 	.word	0x200012a8
 80069f0:	200012ac 	.word	0x200012ac
 80069f4:	08019be0 	.word	0x08019be0
 80069f8:	08019be4 	.word	0x08019be4
 80069fc:	20006aa0 	.word	0x20006aa0
 8006a00:	08019bf0 	.word	0x08019bf0
 8006a04:	08019bf8 	.word	0x08019bf8
 8006a08:	08019c00 	.word	0x08019c00
 8006a0c:	08019c0c 	.word	0x08019c0c
 8006a10:	08019c18 	.word	0x08019c18
 8006a14:	08019c20 	.word	0x08019c20
 8006a18:	08019c2c 	.word	0x08019c2c
 8006a1c:	08019cc8 	.word	0x08019cc8
 8006a20:	08019c34 	.word	0x08019c34
 8006a24:	08019c38 	.word	0x08019c38
 8006a28:	08019c44 	.word	0x08019c44
 8006a2c:	08019c48 	.word	0x08019c48
 8006a30:	08019c50 	.word	0x08019c50
 8006a34:	08019c54 	.word	0x08019c54
 8006a38:	08019c5c 	.word	0x08019c5c
 8006a3c:	08019c60 	.word	0x08019c60
 8006a40:	08019c64 	.word	0x08019c64
 8006a44:	08019c68 	.word	0x08019c68
 8006a48:	08019c70 	.word	0x08019c70
 8006a4c:	08019c74 	.word	0x08019c74
 8006a50:	08019c7c 	.word	0x08019c7c
 8006a54:	08019c80 	.word	0x08019c80
 8006a58:	08019c88 	.word	0x08019c88
 8006a5c:	08019c8c 	.word	0x08019c8c
 8006a60:	08019c98 	.word	0x08019c98
 8006a64:	08019c9c 	.word	0x08019c9c
 8006a68:	08019ca4 	.word	0x08019ca4
 8006a6c:	08019ca8 	.word	0x08019ca8
 8006a70:	08019cb4 	.word	0x08019cb4
 8006a74:	08019cb8 	.word	0x08019cb8
 8006a78:	08019cc4 	.word	0x08019cc4
 8006a7c:	080193a0 	.word	0x080193a0
			temp82 =JANUARY;
 8006a80:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d000      	beq.n	8006a88 <setCommand+0x728>
 8006a86:	e672      	b.n	800676e <setCommand+0x40e>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006a88:	4643      	mov	r3, r8
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	2b1e      	cmp	r3, #30
 8006a8e:	d8a2      	bhi.n	80069d6 <setCommand+0x676>
 8006a90:	4b2f      	ldr	r3, [pc, #188]	; (8006b50 <setCommand+0x7f0>)
 8006a92:	444b      	add	r3, r9
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d89d      	bhi.n	80069d6 <setCommand+0x676>
				GetTimeDate();
 8006a9a:	f006 ff8f 	bl	800d9bc <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006a9e:	4b2d      	ldr	r3, [pc, #180]	; (8006b54 <setCommand+0x7f4>)
 8006aa0:	220c      	movs	r2, #12
 8006aa2:	569a      	ldrsb	r2, [r3, r2]
 8006aa4:	9204      	str	r2, [sp, #16]
 8006aa6:	7cda      	ldrb	r2, [r3, #19]
 8006aa8:	9203      	str	r2, [sp, #12]
 8006aaa:	7c9a      	ldrb	r2, [r3, #18]
 8006aac:	9202      	str	r2, [sp, #8]
 8006aae:	7c5a      	ldrb	r2, [r3, #17]
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	7c1b      	ldrb	r3, [r3, #16]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	003b      	movs	r3, r7
 8006ab8:	464a      	mov	r2, r9
 8006aba:	4641      	mov	r1, r8
 8006abc:	0020      	movs	r0, r4
 8006abe:	f006 ff23 	bl	800d908 <BOS_CalendarConfig>
 8006ac2:	0006      	movs	r6, r0
 8006ac4:	e650      	b.n	8006768 <setCommand+0x408>
			temp82 =FEBRUARY;
 8006ac6:	2402      	movs	r4, #2
 8006ac8:	e7db      	b.n	8006a82 <setCommand+0x722>
 8006aca:	2402      	movs	r4, #2
 8006acc:	e7d9      	b.n	8006a82 <setCommand+0x722>
			temp82 =MARCH;
 8006ace:	2403      	movs	r4, #3
 8006ad0:	e7d7      	b.n	8006a82 <setCommand+0x722>
 8006ad2:	2403      	movs	r4, #3
 8006ad4:	e7d5      	b.n	8006a82 <setCommand+0x722>
			temp82 =APRIL;
 8006ad6:	2404      	movs	r4, #4
 8006ad8:	e7d3      	b.n	8006a82 <setCommand+0x722>
 8006ada:	2404      	movs	r4, #4
 8006adc:	e7d1      	b.n	8006a82 <setCommand+0x722>
			temp82 =MAY;
 8006ade:	2405      	movs	r4, #5
 8006ae0:	e7cf      	b.n	8006a82 <setCommand+0x722>
 8006ae2:	2405      	movs	r4, #5
 8006ae4:	e7cd      	b.n	8006a82 <setCommand+0x722>
			temp82 =JUNE;
 8006ae6:	2406      	movs	r4, #6
 8006ae8:	e7cb      	b.n	8006a82 <setCommand+0x722>
 8006aea:	2406      	movs	r4, #6
 8006aec:	e7c9      	b.n	8006a82 <setCommand+0x722>
			temp82 =JULY;
 8006aee:	2407      	movs	r4, #7
 8006af0:	e7c7      	b.n	8006a82 <setCommand+0x722>
 8006af2:	2407      	movs	r4, #7
 8006af4:	e7c5      	b.n	8006a82 <setCommand+0x722>
			temp82 =AUGUST;
 8006af6:	2408      	movs	r4, #8
 8006af8:	e7c3      	b.n	8006a82 <setCommand+0x722>
 8006afa:	2408      	movs	r4, #8
 8006afc:	e7c1      	b.n	8006a82 <setCommand+0x722>
			temp82 =SEPTEMBER;
 8006afe:	2409      	movs	r4, #9
 8006b00:	e7bf      	b.n	8006a82 <setCommand+0x722>
 8006b02:	2409      	movs	r4, #9
 8006b04:	e7bd      	b.n	8006a82 <setCommand+0x722>
			temp82 =OCTOBER;
 8006b06:	240a      	movs	r4, #10
 8006b08:	e7bb      	b.n	8006a82 <setCommand+0x722>
 8006b0a:	240a      	movs	r4, #10
 8006b0c:	e7b9      	b.n	8006a82 <setCommand+0x722>
			temp82 =NOVEMBER;
 8006b0e:	240b      	movs	r4, #11
 8006b10:	e7b7      	b.n	8006a82 <setCommand+0x722>
 8006b12:	240b      	movs	r4, #11
 8006b14:	e7b5      	b.n	8006a82 <setCommand+0x722>
			temp82 =DECEMBER;
 8006b16:	240c      	movs	r4, #12
 8006b18:	e7b3      	b.n	8006a82 <setCommand+0x722>
			temp81 =MONDAY;
 8006b1a:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <setCommand+0x7f8>)
 8006b1e:	681c      	ldr	r4, [r3, #0]
 8006b20:	2207      	movs	r2, #7
 8006b22:	490e      	ldr	r1, [pc, #56]	; (8006b5c <setCommand+0x7fc>)
 8006b24:	0020      	movs	r0, r4
 8006b26:	f00d fb5b 	bl	80141e0 <strncmp>
 8006b2a:	2600      	movs	r6, #0
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d000      	beq.n	8006b32 <setCommand+0x7d2>
 8006b30:	e699      	b.n	8006866 <setCommand+0x506>
			temp82 =JANUARY;
 8006b32:	2401      	movs	r4, #1
 8006b34:	e7a8      	b.n	8006a88 <setCommand+0x728>
			temp81 =TUESDAY;
 8006b36:	2702      	movs	r7, #2
 8006b38:	e7f0      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =WEDNESDAY;
 8006b3a:	2703      	movs	r7, #3
 8006b3c:	e7ee      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =THURSDAY;
 8006b3e:	2704      	movs	r7, #4
 8006b40:	e7ec      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =FRIDAY;
 8006b42:	2705      	movs	r7, #5
 8006b44:	e7ea      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =SATURDAY;
 8006b46:	2706      	movs	r7, #6
 8006b48:	e7e8      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =SUNDAY;
 8006b4a:	2707      	movs	r7, #7
 8006b4c:	e7e6      	b.n	8006b1c <setCommand+0x7bc>
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	fffff830 	.word	0xfffff830
 8006b54:	20006aa0 	.word	0x20006aa0
 8006b58:	200012a4 	.word	0x200012a4
 8006b5c:	08019cc8 	.word	0x08019cc8

08006b60 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b60:	b530      	push	{r4, r5, lr}
 8006b62:	b083      	sub	sp, #12
 8006b64:	0005      	movs	r5, r0
 8006b66:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	d101      	bne.n	8006b74 <removebuttonCommand+0x14>
 8006b70:	b672      	cpsid	i
 8006b72:	e7fe      	b.n	8006b72 <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b74:	aa01      	add	r2, sp, #4
 8006b76:	2101      	movs	r1, #1
 8006b78:	f007 fc0a 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006b80:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006b82:	2b70      	cmp	r3, #112	; 0x70
 8006b84:	d007      	beq.n	8006b96 <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006b86:	0020      	movs	r0, r4
 8006b88:	f001 fba2 	bl	80082d0 <RemovePortButton>
	if(result == BOS_OK){
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d007      	beq.n	8006ba0 <removebuttonCommand+0x40>
}
 8006b90:	2000      	movs	r0, #0
 8006b92:	b003      	add	sp, #12
 8006b94:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b96:	3001      	adds	r0, #1
 8006b98:	f00c fe51 	bl	801383e <atol>
 8006b9c:	b2c4      	uxtb	r4, r0
 8006b9e:	e7f2      	b.n	8006b86 <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006ba0:	0023      	movs	r3, r4
 8006ba2:	0022      	movs	r2, r4
 8006ba4:	4902      	ldr	r1, [pc, #8]	; (8006bb0 <removebuttonCommand+0x50>)
 8006ba6:	0028      	movs	r0, r5
 8006ba8:	f00d fad6 	bl	8014158 <sprintf>
 8006bac:	e7f0      	b.n	8006b90 <removebuttonCommand+0x30>
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	08019984 	.word	0x08019984

08006bb4 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	0006      	movs	r6, r0
 8006bba:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d101      	bne.n	8006bca <addbuttonCommand+0x16>
 8006bc6:	b672      	cpsid	i
 8006bc8:	e7fe      	b.n	8006bc8 <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bca:	aa05      	add	r2, sp, #20
 8006bcc:	2101      	movs	r1, #1
 8006bce:	9803      	ldr	r0, [sp, #12]
 8006bd0:	f007 fbde 	bl	800e390 <FreeRTOS_CLIGetParameter>
 8006bd4:	0004      	movs	r4, r0
 8006bd6:	4b23      	ldr	r3, [pc, #140]	; (8006c64 <addbuttonCommand+0xb0>)
 8006bd8:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006bda:	9d05      	ldr	r5, [sp, #20]
 8006bdc:	002a      	movs	r2, r5
 8006bde:	4922      	ldr	r1, [pc, #136]	; (8006c68 <addbuttonCommand+0xb4>)
 8006be0:	f00d fafe 	bl	80141e0 <strncmp>
		type =MOMENTARY_NO;
 8006be4:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d017      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006bea:	002a      	movs	r2, r5
 8006bec:	491f      	ldr	r1, [pc, #124]	; (8006c6c <addbuttonCommand+0xb8>)
 8006bee:	0020      	movs	r0, r4
 8006bf0:	f00d faf6 	bl	80141e0 <strncmp>
		type =MOMENTARY_NC;
 8006bf4:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d00f      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006bfa:	002a      	movs	r2, r5
 8006bfc:	491c      	ldr	r1, [pc, #112]	; (8006c70 <addbuttonCommand+0xbc>)
 8006bfe:	0020      	movs	r0, r4
 8006c00:	f00d faee 	bl	80141e0 <strncmp>
		type =ONOFF_NO;
 8006c04:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d007      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006c0a:	002a      	movs	r2, r5
 8006c0c:	4919      	ldr	r1, [pc, #100]	; (8006c74 <addbuttonCommand+0xc0>)
 8006c0e:	0020      	movs	r0, r4
 8006c10:	f00d fae6 	bl	80141e0 <strncmp>
		type =ONOFF_NC;
 8006c14:	4243      	negs	r3, r0
 8006c16:	4158      	adcs	r0, r3
 8006c18:	0087      	lsls	r7, r0, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c1a:	aa04      	add	r2, sp, #16
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	9803      	ldr	r0, [sp, #12]
 8006c20:	f007 fbb6 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006c24:	2300      	movs	r3, #0
 8006c26:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006c28:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006c2a:	2b70      	cmp	r3, #112	; 0x70
 8006c2c:	d008      	beq.n	8006c40 <addbuttonCommand+0x8c>
	result =AddPortButton(type,port);
 8006c2e:	0021      	movs	r1, r4
 8006c30:	0038      	movs	r0, r7
 8006c32:	f001 fabb 	bl	80081ac <AddPortButton>
	if(result == BOS_OK){
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d007      	beq.n	8006c4a <addbuttonCommand+0x96>
}
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	b007      	add	sp, #28
 8006c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006c40:	3001      	adds	r0, #1
 8006c42:	f00c fdfc 	bl	801383e <atol>
 8006c46:	b2c4      	uxtb	r4, r0
 8006c48:	e7f1      	b.n	8006c2e <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <addbuttonCommand+0xb0>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9905      	ldr	r1, [sp, #20]
 8006c52:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c54:	9400      	str	r4, [sp, #0]
 8006c56:	0023      	movs	r3, r4
 8006c58:	4907      	ldr	r1, [pc, #28]	; (8006c78 <addbuttonCommand+0xc4>)
 8006c5a:	0030      	movs	r0, r6
 8006c5c:	f00d fa7c 	bl	8014158 <sprintf>
 8006c60:	e7eb      	b.n	8006c3a <addbuttonCommand+0x86>
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	2000128c 	.word	0x2000128c
 8006c68:	08019244 	.word	0x08019244
 8006c6c:	08019254 	.word	0x08019254
 8006c70:	08019264 	.word	0x08019264
 8006c74:	08019270 	.word	0x08019270
 8006c78:	0801927c 	.word	0x0801927c

08006c7c <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	46de      	mov	lr, fp
 8006c80:	4657      	mov	r7, sl
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b09b      	sub	sp, #108	; 0x6c
 8006c86:	0005      	movs	r5, r0
 8006c88:	9009      	str	r0, [sp, #36]	; 0x24
 8006c8a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9319      	str	r3, [sp, #100]	; 0x64
 8006c90:	9318      	str	r3, [sp, #96]	; 0x60
 8006c92:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006c94:	9316      	str	r3, [sp, #88]	; 0x58
 8006c96:	9315      	str	r3, [sp, #84]	; 0x54
 8006c98:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 8006c9a:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	a810      	add	r0, sp, #64	; 0x40
 8006ca2:	f00d f85f 	bl	8013d64 <memset>
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	2100      	movs	r1, #0
 8006caa:	a80d      	add	r0, sp, #52	; 0x34
 8006cac:	f00d f85a 	bl	8013d64 <memset>
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	a80a      	add	r0, sp, #40	; 0x28
 8006cb6:	f00d f855 	bl	8013d64 <memset>
	configASSERT(pcWriteBuffer);
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	d101      	bne.n	8006cc2 <scastCommand+0x46>
 8006cbe:	b672      	cpsid	i
 8006cc0:	e7fe      	b.n	8006cc0 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006cc2:	aa19      	add	r2, sp, #100	; 0x64
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	0020      	movs	r0, r4
 8006cc8:	f007 fb62 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006ccc:	2300      	movs	r3, #0
 8006cce:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	9208      	str	r2, [sp, #32]
	if(pcParameterString1[0] == 'P'){
 8006cd4:	2b50      	cmp	r3, #80	; 0x50
 8006cd6:	d100      	bne.n	8006cda <scastCommand+0x5e>
 8006cd8:	e06d      	b.n	8006db6 <scastCommand+0x13a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006cda:	aa18      	add	r2, sp, #96	; 0x60
 8006cdc:	2102      	movs	r1, #2
 8006cde:	0020      	movs	r0, r4
 8006ce0:	f007 fb56 	bl	800e390 <FreeRTOS_CLIGetParameter>
 8006ce4:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006ce6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ce8:	a810      	add	r0, sp, #64	; 0x40
 8006cea:	f00d fa8a 	bl	8014202 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006cee:	a810      	add	r0, sp, #64	; 0x40
 8006cf0:	f7fd fa52 	bl	8004198 <GetID>
 8006cf4:	b2c3      	uxtb	r3, r0
 8006cf6:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006cf8:	aa17      	add	r2, sp, #92	; 0x5c
 8006cfa:	2103      	movs	r1, #3
 8006cfc:	0020      	movs	r0, r4
 8006cfe:	f007 fb47 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006d02:	2300      	movs	r3, #0
 8006d04:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d06:	2700      	movs	r7, #0
	if(pcParameterString3[0] == 'p'){
 8006d08:	2b70      	cmp	r3, #112	; 0x70
 8006d0a:	d05a      	beq.n	8006dc2 <scastCommand+0x146>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d0c:	aa16      	add	r2, sp, #88	; 0x58
 8006d0e:	2104      	movs	r1, #4
 8006d10:	0020      	movs	r0, r4
 8006d12:	f007 fb3d 	bl	800e390 <FreeRTOS_CLIGetParameter>
 8006d16:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d1a:	a80d      	add	r0, sp, #52	; 0x34
 8006d1c:	f00d fa71 	bl	8014202 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006d20:	a80d      	add	r0, sp, #52	; 0x34
 8006d22:	f7fd fa39 	bl	8004198 <GetID>
 8006d26:	b2c3      	uxtb	r3, r0
 8006d28:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d2a:	aa15      	add	r2, sp, #84	; 0x54
 8006d2c:	2105      	movs	r1, #5
 8006d2e:	0020      	movs	r0, r4
 8006d30:	f007 fb2e 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d34:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006d36:	0032      	movs	r2, r6
 8006d38:	492b      	ldr	r1, [pc, #172]	; (8006de8 <scastCommand+0x16c>)
 8006d3a:	9007      	str	r0, [sp, #28]
 8006d3c:	f00d fa50 	bl	80141e0 <strncmp>
		direction =FORWARD;
 8006d40:	2500      	movs	r5, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d00f      	beq.n	8006d66 <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d46:	0032      	movs	r2, r6
 8006d48:	4928      	ldr	r1, [pc, #160]	; (8006dec <scastCommand+0x170>)
 8006d4a:	9807      	ldr	r0, [sp, #28]
 8006d4c:	f00d fa48 	bl	80141e0 <strncmp>
		direction =BACKWARD;
 8006d50:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d007      	beq.n	8006d66 <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006d56:	0032      	movs	r2, r6
 8006d58:	4925      	ldr	r1, [pc, #148]	; (8006df0 <scastCommand+0x174>)
 8006d5a:	9807      	ldr	r0, [sp, #28]
 8006d5c:	f00d fa40 	bl	80141e0 <strncmp>
		direction =BIDIRECTIONAL;
 8006d60:	4243      	negs	r3, r0
 8006d62:	4158      	adcs	r0, r3
 8006d64:	0045      	lsls	r5, r0, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006d66:	0032      	movs	r2, r6
 8006d68:	9907      	ldr	r1, [sp, #28]
 8006d6a:	a80a      	add	r0, sp, #40	; 0x28
 8006d6c:	f00d fa49 	bl	8014202 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006d70:	aa14      	add	r2, sp, #80	; 0x50
 8006d72:	2106      	movs	r1, #6
 8006d74:	0020      	movs	r0, r4
 8006d76:	f007 fb0b 	bl	800e390 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006d7a:	f00c fd60 	bl	801383e <atol>
 8006d7e:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006d80:	aa13      	add	r2, sp, #76	; 0x4c
 8006d82:	2107      	movs	r1, #7
 8006d84:	0020      	movs	r0, r4
 8006d86:	f007 fb03 	bl	800e390 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006d8a:	f00c fd58 	bl	801383e <atol>
 8006d8e:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006d90:	2300      	movs	r3, #0
 8006d92:	9303      	str	r3, [sp, #12]
 8006d94:	9002      	str	r0, [sp, #8]
 8006d96:	9601      	str	r6, [sp, #4]
 8006d98:	9500      	str	r5, [sp, #0]
 8006d9a:	465b      	mov	r3, fp
 8006d9c:	003a      	movs	r2, r7
 8006d9e:	4651      	mov	r1, sl
 8006da0:	9808      	ldr	r0, [sp, #32]
 8006da2:	f002 fcb5 	bl	8009710 <StartScastDMAStream>
	if(result == BOS_OK){
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d010      	beq.n	8006dcc <scastCommand+0x150>
}
 8006daa:	2000      	movs	r0, #0
 8006dac:	b01b      	add	sp, #108	; 0x6c
 8006dae:	bc0c      	pop	{r2, r3}
 8006db0:	4692      	mov	sl, r2
 8006db2:	469b      	mov	fp, r3
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006db6:	3001      	adds	r0, #1
 8006db8:	f00c fd41 	bl	801383e <atol>
 8006dbc:	b2c3      	uxtb	r3, r0
 8006dbe:	9308      	str	r3, [sp, #32]
 8006dc0:	e78b      	b.n	8006cda <scastCommand+0x5e>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f00c fd3b 	bl	801383e <atol>
 8006dc8:	b2c7      	uxtb	r7, r0
 8006dca:	e79f      	b.n	8006d0c <scastCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006dcc:	9404      	str	r4, [sp, #16]
 8006dce:	9603      	str	r6, [sp, #12]
 8006dd0:	ab0d      	add	r3, sp, #52	; 0x34
 8006dd2:	9302      	str	r3, [sp, #8]
 8006dd4:	9701      	str	r7, [sp, #4]
 8006dd6:	ab10      	add	r3, sp, #64	; 0x40
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	9b08      	ldr	r3, [sp, #32]
 8006ddc:	aa0a      	add	r2, sp, #40	; 0x28
 8006dde:	4905      	ldr	r1, [pc, #20]	; (8006df4 <scastCommand+0x178>)
 8006de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006de2:	f00d f9b9 	bl	8014158 <sprintf>
 8006de6:	e7e0      	b.n	8006daa <scastCommand+0x12e>
 8006de8:	080199cc 	.word	0x080199cc
 8006dec:	080199d4 	.word	0x080199d4
 8006df0:	080199e0 	.word	0x080199e0
 8006df4:	080199f0 	.word	0x080199f0

08006df8 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006dfe:	d039      	beq.n	8006e74 <infoCommand+0x7c>
	if(N > 1)
 8006e00:	4b26      	ldr	r3, [pc, #152]	; (8006e9c <infoCommand+0xa4>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006e04:	2500      	movs	r5, #0
	if(N > 1)
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d902      	bls.n	8006e10 <infoCommand+0x18>
		result =ReadPortsDir();
 8006e0a:	f7fd fb19 	bl	8004440 <ReadPortsDir>
 8006e0e:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006e10:	4b22      	ldr	r3, [pc, #136]	; (8006e9c <infoCommand+0xa4>)
 8006e12:	781a      	ldrb	r2, [r3, #0]
 8006e14:	4922      	ldr	r1, [pc, #136]	; (8006ea0 <infoCommand+0xa8>)
 8006e16:	0020      	movs	r0, r4
 8006e18:	f00d f99e 	bl	8014158 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	f7f9 f97b 	bl	8000118 <strlen>
 8006e22:	b282      	uxth	r2, r0
 8006e24:	4e1f      	ldr	r6, [pc, #124]	; (8006ea4 <infoCommand+0xac>)
 8006e26:	7830      	ldrb	r0, [r6, #0]
 8006e28:	2701      	movs	r7, #1
 8006e2a:	427f      	negs	r7, r7
 8006e2c:	9700      	str	r7, [sp, #0]
 8006e2e:	2332      	movs	r3, #50	; 0x32
 8006e30:	0021      	movs	r1, r4
 8006e32:	f007 f867 	bl	800df04 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006e36:	2213      	movs	r2, #19
 8006e38:	491b      	ldr	r1, [pc, #108]	; (8006ea8 <infoCommand+0xb0>)
 8006e3a:	0020      	movs	r0, r4
 8006e3c:	f00c ff89 	bl	8013d52 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e40:	0020      	movs	r0, r4
 8006e42:	f7f9 f969 	bl	8000118 <strlen>
 8006e46:	b282      	uxth	r2, r0
 8006e48:	7830      	ldrb	r0, [r6, #0]
 8006e4a:	9700      	str	r7, [sp, #0]
 8006e4c:	2332      	movs	r3, #50	; 0x32
 8006e4e:	0021      	movs	r1, r4
 8006e50:	f007 f858 	bl	800df04 <writePxMutex>
	DisplayTopology(PcPort);
 8006e54:	7830      	ldrb	r0, [r6, #0]
 8006e56:	f7fc fefb 	bl	8003c50 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006e5a:	7830      	ldrb	r0, [r6, #0]
 8006e5c:	f7fc ffc8 	bl	8003df0 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006e60:	2d02      	cmp	r5, #2
 8006e62:	d009      	beq.n	8006e78 <infoCommand+0x80>
	sprintf((char* )pcWriteBuffer," ");
 8006e64:	2202      	movs	r2, #2
 8006e66:	4911      	ldr	r1, [pc, #68]	; (8006eac <infoCommand+0xb4>)
 8006e68:	0020      	movs	r0, r4
 8006e6a:	f00c ff72 	bl	8013d52 <memcpy>
}
 8006e6e:	2000      	movs	r0, #0
 8006e70:	b003      	add	sp, #12
 8006e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006e74:	b672      	cpsid	i
 8006e76:	e7fe      	b.n	8006e76 <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006e78:	2244      	movs	r2, #68	; 0x44
 8006e7a:	490d      	ldr	r1, [pc, #52]	; (8006eb0 <infoCommand+0xb8>)
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	f00c ff68 	bl	8013d52 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006e82:	0020      	movs	r0, r4
 8006e84:	f7f9 f948 	bl	8000118 <strlen>
 8006e88:	b282      	uxth	r2, r0
 8006e8a:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <infoCommand+0xac>)
 8006e8c:	7818      	ldrb	r0, [r3, #0]
 8006e8e:	003b      	movs	r3, r7
 8006e90:	9700      	str	r7, [sp, #0]
 8006e92:	3333      	adds	r3, #51	; 0x33
 8006e94:	0021      	movs	r1, r4
 8006e96:	f007 f835 	bl	800df04 <writePxMutex>
 8006e9a:	e7e3      	b.n	8006e64 <infoCommand+0x6c>
 8006e9c:	2000001c 	.word	0x2000001c
 8006ea0:	08019788 	.word	0x08019788
 8006ea4:	20000a77 	.word	0x20000a77
 8006ea8:	080197a4 	.word	0x080197a4
 8006eac:	0801872c 	.word	0x0801872c
 8006eb0:	080197b8 	.word	0x080197b8

08006eb4 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006eb4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d101      	bne.n	8006ebe <statusCommand+0xa>
 8006eba:	b672      	cpsid	i
 8006ebc:	e7fe      	b.n	8006ebc <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	f7fd f80a 	bl	8003ed8 <DisplayModuleStatus>
}
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	bd10      	pop	{r4, pc}

08006ec8 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eca:	46ce      	mov	lr, r9
 8006ecc:	b500      	push	{lr}
 8006ece:	b090      	sub	sp, #64	; 0x40
 8006ed0:	0004      	movs	r4, r0
 8006ed2:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006ed4:	2227      	movs	r2, #39	; 0x27
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	a806      	add	r0, sp, #24
 8006eda:	f00c ff43 	bl	8013d64 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006ede:	220a      	movs	r2, #10
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	a803      	add	r0, sp, #12
 8006ee4:	f00c ff3e 	bl	8013d64 <memset>
	configASSERT(pcWriteBuffer);
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	d101      	bne.n	8006ef0 <groupCommand+0x28>
 8006eec:	b672      	cpsid	i
 8006eee:	e7fe      	b.n	8006eee <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ef0:	4d54      	ldr	r5, [pc, #336]	; (8007044 <groupCommand+0x17c>)
 8006ef2:	002a      	movs	r2, r5
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	9801      	ldr	r0, [sp, #4]
 8006ef8:	f007 fa4a 	bl	800e390 <FreeRTOS_CLIGetParameter>
 8006efc:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006efe:	682a      	ldr	r2, [r5, #0]
 8006f00:	a803      	add	r0, sp, #12
 8006f02:	f00d f97e 	bl	8014202 <strncpy>
 8006f06:	4d50      	ldr	r5, [pc, #320]	; (8007048 <groupCommand+0x180>)
 8006f08:	002f      	movs	r7, r5
 8006f0a:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006f0c:	0029      	movs	r1, r5
 8006f0e:	a803      	add	r0, sp, #12
 8006f10:	f7f9 f8f8 	bl	8000104 <strcmp>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d016      	beq.n	8006f46 <groupCommand+0x7e>
 8006f18:	350a      	adds	r5, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006f1a:	42bd      	cmp	r5, r7
 8006f1c:	d1f6      	bne.n	8006f0c <groupCommand+0x44>
	type =1;
 8006f1e:	2701      	movs	r7, #1
	count =2;
 8006f20:	4b4a      	ldr	r3, [pc, #296]	; (800704c <groupCommand+0x184>)
 8006f22:	2202      	movs	r2, #2
 8006f24:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f26:	3208      	adds	r2, #8
 8006f28:	4949      	ldr	r1, [pc, #292]	; (8007050 <groupCommand+0x188>)
 8006f2a:	0020      	movs	r0, r4
 8006f2c:	f00c ff11 	bl	8013d52 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006f30:	4a48      	ldr	r2, [pc, #288]	; (8007054 <groupCommand+0x18c>)
 8006f32:	2102      	movs	r1, #2
 8006f34:	9801      	ldr	r0, [sp, #4]
 8006f36:	f007 fa2b 	bl	800e390 <FreeRTOS_CLIGetParameter>
 8006f3a:	4b47      	ldr	r3, [pc, #284]	; (8007058 <groupCommand+0x190>)
 8006f3c:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d061      	beq.n	8007006 <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006f42:	4e44      	ldr	r6, [pc, #272]	; (8007054 <groupCommand+0x18c>)
 8006f44:	e011      	b.n	8006f6a <groupCommand+0xa2>
			type =0;
 8006f46:	2700      	movs	r7, #0
 8006f48:	e7ea      	b.n	8006f20 <groupCommand+0x58>
		strcat((char* )pcWriteBuffer,module);
 8006f4a:	a906      	add	r1, sp, #24
 8006f4c:	0020      	movs	r0, r4
 8006f4e:	f00d f923 	bl	8014198 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006f52:	1c69      	adds	r1, r5, #1
 8006f54:	b249      	sxtb	r1, r1
 8006f56:	4b3d      	ldr	r3, [pc, #244]	; (800704c <groupCommand+0x184>)
 8006f58:	7019      	strb	r1, [r3, #0]
 8006f5a:	4a3e      	ldr	r2, [pc, #248]	; (8007054 <groupCommand+0x18c>)
 8006f5c:	9801      	ldr	r0, [sp, #4]
 8006f5e:	f007 fa17 	bl	800e390 <FreeRTOS_CLIGetParameter>
 8006f62:	4b3d      	ldr	r3, [pc, #244]	; (8007058 <groupCommand+0x190>)
 8006f64:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d04d      	beq.n	8007006 <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006f6a:	6833      	ldr	r3, [r6, #0]
 8006f6c:	4699      	mov	r9, r3
 8006f6e:	ad06      	add	r5, sp, #24
 8006f70:	001a      	movs	r2, r3
 8006f72:	0001      	movs	r1, r0
 8006f74:	0028      	movs	r0, r5
 8006f76:	f00d f944 	bl	8014202 <strncpy>
		module[xParameterStringLength] ='\0';
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	464a      	mov	r2, r9
 8006f7e:	54ab      	strb	r3, [r5, r2]
		modID =GetID(module);
 8006f80:	0028      	movs	r0, r5
 8006f82:	f7fd f909 	bl	8004198 <GetID>
		if(modID < 0)
 8006f86:	2800      	cmp	r0, #0
 8006f88:	db37      	blt.n	8006ffa <groupCommand+0x132>
		result =AddModuleToGroup(modID,alias);
 8006f8a:	b2c0      	uxtb	r0, r0
 8006f8c:	a903      	add	r1, sp, #12
 8006f8e:	f7fd f9cf 	bl	8004330 <AddModuleToGroup>
		if(result != BOS_OK)
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d146      	bne.n	8007024 <groupCommand+0x15c>
		if(count > 2)
 8006f96:	4b2d      	ldr	r3, [pc, #180]	; (800704c <groupCommand+0x184>)
 8006f98:	2500      	movs	r5, #0
 8006f9a:	575d      	ldrsb	r5, [r3, r5]
 8006f9c:	2d02      	cmp	r5, #2
 8006f9e:	ddd4      	ble.n	8006f4a <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8006fa0:	0020      	movs	r0, r4
 8006fa2:	f7f9 f8b9 	bl	8000118 <strlen>
 8006fa6:	1820      	adds	r0, r4, r0
 8006fa8:	2203      	movs	r2, #3
 8006faa:	492c      	ldr	r1, [pc, #176]	; (800705c <groupCommand+0x194>)
 8006fac:	f00c fed1 	bl	8013d52 <memcpy>
 8006fb0:	e7cb      	b.n	8006f4a <groupCommand+0x82>
	else if(result == BOS_OK && type){
 8006fb2:	2f00      	cmp	r7, #0
 8006fb4:	d009      	beq.n	8006fca <groupCommand+0x102>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006fb6:	aa03      	add	r2, sp, #12
 8006fb8:	4929      	ldr	r1, [pc, #164]	; (8007060 <groupCommand+0x198>)
 8006fba:	a806      	add	r0, sp, #24
 8006fbc:	f00d f8cc 	bl	8014158 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006fc0:	a906      	add	r1, sp, #24
 8006fc2:	0020      	movs	r0, r4
 8006fc4:	f00d f8e8 	bl	8014198 <strcat>
 8006fc8:	e027      	b.n	800701a <groupCommand+0x152>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006fca:	aa03      	add	r2, sp, #12
 8006fcc:	4925      	ldr	r1, [pc, #148]	; (8007064 <groupCommand+0x19c>)
 8006fce:	a806      	add	r0, sp, #24
 8006fd0:	f00d f8c2 	bl	8014158 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006fd4:	a906      	add	r1, sp, #24
 8006fd6:	0020      	movs	r0, r4
 8006fd8:	f00d f8de 	bl	8014198 <strcat>
 8006fdc:	e01d      	b.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006fde:	aa03      	add	r2, sp, #12
 8006fe0:	4921      	ldr	r1, [pc, #132]	; (8007068 <groupCommand+0x1a0>)
 8006fe2:	0020      	movs	r0, r4
 8006fe4:	f00d f8b8 	bl	8014158 <sprintf>
 8006fe8:	e017      	b.n	800701a <groupCommand+0x152>
	else if(result == BOS_ERR_ExistingCmd)
 8006fea:	2808      	cmp	r0, #8
 8006fec:	d115      	bne.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006fee:	aa03      	add	r2, sp, #12
 8006ff0:	491e      	ldr	r1, [pc, #120]	; (800706c <groupCommand+0x1a4>)
 8006ff2:	0020      	movs	r0, r4
 8006ff4:	f00d f8b0 	bl	8014158 <sprintf>
 8006ff8:	e00f      	b.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006ffa:	aa06      	add	r2, sp, #24
 8006ffc:	491c      	ldr	r1, [pc, #112]	; (8007070 <groupCommand+0x1a8>)
 8006ffe:	0020      	movs	r0, r4
 8007000:	f00d f8aa 	bl	8014158 <sprintf>
	return pdFALSE;
 8007004:	e009      	b.n	800701a <groupCommand+0x152>
	else if(count == 2)
 8007006:	4b11      	ldr	r3, [pc, #68]	; (800704c <groupCommand+0x184>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	b25b      	sxtb	r3, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d1d0      	bne.n	8006fb2 <groupCommand+0xea>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007010:	aa03      	add	r2, sp, #12
 8007012:	4918      	ldr	r1, [pc, #96]	; (8007074 <groupCommand+0x1ac>)
 8007014:	0020      	movs	r0, r4
 8007016:	f00d f89f 	bl	8014158 <sprintf>
}
 800701a:	2000      	movs	r0, #0
 800701c:	b010      	add	sp, #64	; 0x40
 800701e:	bc04      	pop	{r2}
 8007020:	4691      	mov	r9, r2
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8007024:	4b09      	ldr	r3, [pc, #36]	; (800704c <groupCommand+0x184>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	b25b      	sxtb	r3, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d0f0      	beq.n	8007010 <groupCommand+0x148>
	else if(result == BOS_ERR_Keyword)
 800702e:	2806      	cmp	r0, #6
 8007030:	d0d5      	beq.n	8006fde <groupCommand+0x116>
	else if(result == BOS_ERR_ExistingAlias)
 8007032:	2807      	cmp	r0, #7
 8007034:	d1d9      	bne.n	8006fea <groupCommand+0x122>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8007036:	aa03      	add	r2, sp, #12
 8007038:	490f      	ldr	r1, [pc, #60]	; (8007078 <groupCommand+0x1b0>)
 800703a:	0020      	movs	r0, r4
 800703c:	f00d f88c 	bl	8014158 <sprintf>
 8007040:	e7eb      	b.n	800701a <groupCommand+0x152>
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	200012bc 	.word	0x200012bc
 8007048:	20000e5c 	.word	0x20000e5c
 800704c:	20001282 	.word	0x20001282
 8007050:	080195a8 	.word	0x080195a8
 8007054:	200012b0 	.word	0x200012b0
 8007058:	20001284 	.word	0x20001284
 800705c:	080195b4 	.word	0x080195b4
 8007060:	080195e4 	.word	0x080195e4
 8007064:	08019600 	.word	0x08019600
 8007068:	08019620 	.word	0x08019620
 800706c:	08019694 	.word	0x08019694
 8007070:	080196d4 	.word	0x080196d4
 8007074:	080195b8 	.word	0x080195b8
 8007078:	08019660 	.word	0x08019660

0800707c <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	0004      	movs	r4, r0
 8007080:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8007082:	2c00      	cmp	r4, #0
 8007084:	d101      	bne.n	800708a <nameCommand+0xe>
 8007086:	b672      	cpsid	i
 8007088:	e7fe      	b.n	8007088 <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800708a:	4d1c      	ldr	r5, [pc, #112]	; (80070fc <nameCommand+0x80>)
 800708c:	002a      	movs	r2, r5
 800708e:	2101      	movs	r1, #1
 8007090:	f007 f97e 	bl	800e390 <FreeRTOS_CLIGetParameter>
 8007094:	0001      	movs	r1, r0
 8007096:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <nameCommand+0x84>)
 8007098:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800709a:	682b      	ldr	r3, [r5, #0]
 800709c:	2b09      	cmp	r3, #9
 800709e:	dd01      	ble.n	80070a4 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80070a0:	2300      	movs	r3, #0
 80070a2:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <nameCommand+0x88>)
 80070a6:	7818      	ldrb	r0, [r3, #0]
 80070a8:	f7fd f8da 	bl	8004260 <NameModule>
	if(result == BOS_OK)
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d007      	beq.n	80070c0 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 80070b0:	2806      	cmp	r0, #6
 80070b2:	d00e      	beq.n	80070d2 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 80070b4:	2807      	cmp	r0, #7
 80070b6:	d013      	beq.n	80070e0 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 80070b8:	2808      	cmp	r0, #8
 80070ba:	d018      	beq.n	80070ee <nameCommand+0x72>
}
 80070bc:	2000      	movs	r0, #0
 80070be:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 80070c0:	4b10      	ldr	r3, [pc, #64]	; (8007104 <nameCommand+0x88>)
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <nameCommand+0x84>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	490f      	ldr	r1, [pc, #60]	; (8007108 <nameCommand+0x8c>)
 80070ca:	0020      	movs	r0, r4
 80070cc:	f00d f844 	bl	8014158 <sprintf>
 80070d0:	e7f4      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <nameCommand+0x84>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	490d      	ldr	r1, [pc, #52]	; (800710c <nameCommand+0x90>)
 80070d8:	0020      	movs	r0, r4
 80070da:	f00d f83d 	bl	8014158 <sprintf>
 80070de:	e7ed      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <nameCommand+0x84>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	490a      	ldr	r1, [pc, #40]	; (8007110 <nameCommand+0x94>)
 80070e6:	0020      	movs	r0, r4
 80070e8:	f00d f836 	bl	8014158 <sprintf>
 80070ec:	e7e6      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 80070ee:	4b04      	ldr	r3, [pc, #16]	; (8007100 <nameCommand+0x84>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4908      	ldr	r1, [pc, #32]	; (8007114 <nameCommand+0x98>)
 80070f4:	0020      	movs	r0, r4
 80070f6:	f00d f82f 	bl	8014158 <sprintf>
 80070fa:	e7df      	b.n	80070bc <nameCommand+0x40>
 80070fc:	200012b8 	.word	0x200012b8
 8007100:	20001288 	.word	0x20001288
 8007104:	20001076 	.word	0x20001076
 8007108:	08019820 	.word	0x08019820
 800710c:	08019620 	.word	0x08019620
 8007110:	08019660 	.word	0x08019660
 8007114:	08019694 	.word	0x08019694

08007118 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711a:	b085      	sub	sp, #20
 800711c:	1e04      	subs	r4, r0, #0
 800711e:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007120:	d101      	bne.n	8007126 <bootloaderUpdateCommand+0xe>
 8007122:	b672      	cpsid	i
 8007124:	e7fe      	b.n	8007124 <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007126:	4a4b      	ldr	r2, [pc, #300]	; (8007254 <bootloaderUpdateCommand+0x13c>)
 8007128:	2101      	movs	r1, #1
 800712a:	9803      	ldr	r0, [sp, #12]
 800712c:	f007 f930 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007130:	2800      	cmp	r0, #0
 8007132:	d040      	beq.n	80071b6 <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007134:	4b47      	ldr	r3, [pc, #284]	; (8007254 <bootloaderUpdateCommand+0x13c>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	4947      	ldr	r1, [pc, #284]	; (8007258 <bootloaderUpdateCommand+0x140>)
 800713a:	f00d f851 	bl	80141e0 <strncmp>
 800713e:	2800      	cmp	r0, #0
 8007140:	d000      	beq.n	8007144 <bootloaderUpdateCommand+0x2c>
 8007142:	e080      	b.n	8007246 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007144:	4a45      	ldr	r2, [pc, #276]	; (800725c <bootloaderUpdateCommand+0x144>)
 8007146:	2102      	movs	r1, #2
 8007148:	9803      	ldr	r0, [sp, #12]
 800714a:	f007 f921 	bl	800e390 <FreeRTOS_CLIGetParameter>
 800714e:	4f44      	ldr	r7, [pc, #272]	; (8007260 <bootloaderUpdateCommand+0x148>)
 8007150:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007152:	4a44      	ldr	r2, [pc, #272]	; (8007264 <bootloaderUpdateCommand+0x14c>)
 8007154:	2103      	movs	r1, #3
 8007156:	9803      	ldr	r0, [sp, #12]
 8007158:	f007 f91a 	bl	800e390 <FreeRTOS_CLIGetParameter>
 800715c:	4b42      	ldr	r3, [pc, #264]	; (8007268 <bootloaderUpdateCommand+0x150>)
 800715e:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8007160:	6838      	ldr	r0, [r7, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 8007166:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8007168:	2b23      	cmp	r3, #35	; 0x23
 800716a:	d04e      	beq.n	800720a <bootloaderUpdateCommand+0xf2>
			if(pcParameterString3[0] == 'p'){
 800716c:	4b3e      	ldr	r3, [pc, #248]	; (8007268 <bootloaderUpdateCommand+0x150>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	2300      	movs	r3, #0
 8007172:	56c3      	ldrsb	r3, [r0, r3]
 8007174:	2b70      	cmp	r3, #112	; 0x70
 8007176:	d04e      	beq.n	8007216 <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 8007178:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 800717a:	4b3c      	ldr	r3, [pc, #240]	; (800726c <bootloaderUpdateCommand+0x154>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	42b3      	cmp	r3, r6
 8007180:	d04e      	beq.n	8007220 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;
 8007182:	4b3b      	ldr	r3, [pc, #236]	; (8007270 <bootloaderUpdateCommand+0x158>)
 8007184:	2200      	movs	r2, #0
 8007186:	719a      	strb	r2, [r3, #6]
				messageParams[0] =port;
 8007188:	4b3a      	ldr	r3, [pc, #232]	; (8007274 <bootloaderUpdateCommand+0x15c>)
 800718a:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 800718c:	3201      	adds	r2, #1
 800718e:	211a      	movs	r1, #26
 8007190:	0030      	movs	r0, r6
 8007192:	f002 fa97 	bl	80096c4 <SendMessageToModule>
				osDelay(100);
 8007196:	2064      	movs	r0, #100	; 0x64
 8007198:	f006 ffe1 	bl	800e15e <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 800719c:	4b36      	ldr	r3, [pc, #216]	; (8007278 <bootloaderUpdateCommand+0x160>)
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	4b32      	ldr	r3, [pc, #200]	; (800726c <bootloaderUpdateCommand+0x154>)
 80071a2:	7818      	ldrb	r0, [r3, #0]
 80071a4:	002b      	movs	r3, r5
 80071a6:	0031      	movs	r1, r6
 80071a8:	f7fc fcd0 	bl	8003b4c <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80071ac:	2f68      	cmp	r7, #104	; 0x68
 80071ae:	d04a      	beq.n	8007246 <bootloaderUpdateCommand+0x12e>
}
 80071b0:	2000      	movs	r0, #0
 80071b2:	b005      	add	sp, #20
 80071b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80071b6:	4b2d      	ldr	r3, [pc, #180]	; (800726c <bootloaderUpdateCommand+0x154>)
 80071b8:	781a      	ldrb	r2, [r3, #0]
 80071ba:	4930      	ldr	r1, [pc, #192]	; (800727c <bootloaderUpdateCommand+0x164>)
 80071bc:	0020      	movs	r0, r4
 80071be:	f00c ffcb 	bl	8014158 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 80071c2:	4b2f      	ldr	r3, [pc, #188]	; (8007280 <bootloaderUpdateCommand+0x168>)
 80071c4:	6819      	ldr	r1, [r3, #0]
 80071c6:	0020      	movs	r0, r4
 80071c8:	f00c ffe6 	bl	8014198 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80071cc:	0020      	movs	r0, r4
 80071ce:	f7f8 ffa3 	bl	8000118 <strlen>
 80071d2:	b282      	uxth	r2, r0
 80071d4:	4b28      	ldr	r3, [pc, #160]	; (8007278 <bootloaderUpdateCommand+0x160>)
 80071d6:	7818      	ldrb	r0, [r3, #0]
 80071d8:	2301      	movs	r3, #1
 80071da:	425b      	negs	r3, r3
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	3333      	adds	r3, #51	; 0x33
 80071e0:	0021      	movs	r1, r4
 80071e2:	f006 fe8f 	bl	800df04 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80071e6:	4b27      	ldr	r3, [pc, #156]	; (8007284 <bootloaderUpdateCommand+0x16c>)
 80071e8:	4a27      	ldr	r2, [pc, #156]	; (8007288 <bootloaderUpdateCommand+0x170>)
 80071ea:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 80071ec:	4b27      	ldr	r3, [pc, #156]	; (800728c <bootloaderUpdateCommand+0x174>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80071f2:	200a      	movs	r0, #10
 80071f4:	f006 ffb3 	bl	800e15e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	4b24      	ldr	r3, [pc, #144]	; (8007290 <bootloaderUpdateCommand+0x178>)
 80071fe:	4a25      	ldr	r2, [pc, #148]	; (8007294 <bootloaderUpdateCommand+0x17c>)
 8007200:	60da      	str	r2, [r3, #12]
 8007202:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	e7fd      	b.n	8007206 <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800720a:	3001      	adds	r0, #1
 800720c:	f00c fb17 	bl	801383e <atol>
 8007210:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8007212:	2700      	movs	r7, #0
 8007214:	e7aa      	b.n	800716c <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007216:	3001      	adds	r0, #1
 8007218:	f00c fb11 	bl	801383e <atol>
 800721c:	b2c5      	uxtb	r5, r0
 800721e:	e7ac      	b.n	800717a <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007220:	2100      	movs	r1, #0
 8007222:	9100      	str	r1, [sp, #0]
 8007224:	2319      	movs	r3, #25
 8007226:	000a      	movs	r2, r1
 8007228:	0028      	movs	r0, r5
 800722a:	f002 f823 	bl	8009274 <SendMessageFromPort>
				osDelay(100);
 800722e:	2064      	movs	r0, #100	; 0x64
 8007230:	f006 ff95 	bl	800e15e <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <bootloaderUpdateCommand+0x154>)
 8007236:	7818      	ldrb	r0, [r3, #0]
 8007238:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <bootloaderUpdateCommand+0x160>)
 800723a:	781a      	ldrb	r2, [r3, #0]
 800723c:	002b      	movs	r3, r5
 800723e:	0001      	movs	r1, r0
 8007240:	f7fc fc84 	bl	8003b4c <remoteBootloaderUpdate>
 8007244:	e7b2      	b.n	80071ac <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007246:	220f      	movs	r2, #15
 8007248:	4913      	ldr	r1, [pc, #76]	; (8007298 <bootloaderUpdateCommand+0x180>)
 800724a:	0020      	movs	r0, r4
 800724c:	f00c fd81 	bl	8013d52 <memcpy>
 8007250:	e7ae      	b.n	80071b0 <bootloaderUpdateCommand+0x98>
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	200012b4 	.word	0x200012b4
 8007258:	080192e0 	.word	0x080192e0
 800725c:	200012c0 	.word	0x200012c0
 8007260:	20001298 	.word	0x20001298
 8007264:	200012c4 	.word	0x200012c4
 8007268:	200012a0 	.word	0x200012a0
 800726c:	20001076 	.word	0x20001076
 8007270:	20006aa0 	.word	0x20006aa0
 8007274:	20000f38 	.word	0x20000f38
 8007278:	20000a77 	.word	0x20000a77
 800727c:	080192c0 	.word	0x080192c0
 8007280:	20000074 	.word	0x20000074
 8007284:	20007ff0 	.word	0x20007ff0
 8007288:	deadbeef 	.word	0xdeadbeef
 800728c:	20000ef4 	.word	0x20000ef4
 8007290:	e000ed00 	.word	0xe000ed00
 8007294:	05fa0004 	.word	0x05fa0004
 8007298:	080193a0 	.word	0x080193a0

0800729c <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800729c:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 800729e:	2800      	cmp	r0, #0
 80072a0:	d01e      	beq.n	80072e0 <pingCommand+0x44>
	if(!moduleAlias[myID][0])
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <pingCommand+0x5c>)
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	0093      	lsls	r3, r2, #2
 80072a8:	189b      	adds	r3, r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	4913      	ldr	r1, [pc, #76]	; (80072fc <pingCommand+0x60>)
 80072ae:	5c5b      	ldrb	r3, [r3, r1]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d117      	bne.n	80072e4 <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 80072b4:	4912      	ldr	r1, [pc, #72]	; (8007300 <pingCommand+0x64>)
 80072b6:	f00c ff4f 	bl	8014158 <sprintf>
	RTOS_IND_blink(200);
 80072ba:	2580      	movs	r5, #128	; 0x80
 80072bc:	012d      	lsls	r5, r5, #4
 80072be:	2490      	movs	r4, #144	; 0x90
 80072c0:	05e4      	lsls	r4, r4, #23
 80072c2:	2201      	movs	r2, #1
 80072c4:	0029      	movs	r1, r5
 80072c6:	0020      	movs	r0, r4
 80072c8:	f00a fd1e 	bl	8011d08 <HAL_GPIO_WritePin>
 80072cc:	20c8      	movs	r0, #200	; 0xc8
 80072ce:	f006 ff46 	bl	800e15e <osDelay>
 80072d2:	2200      	movs	r2, #0
 80072d4:	0029      	movs	r1, r5
 80072d6:	0020      	movs	r0, r4
 80072d8:	f00a fd16 	bl	8011d08 <HAL_GPIO_WritePin>
}
 80072dc:	2000      	movs	r0, #0
 80072de:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80072e0:	b672      	cpsid	i
 80072e2:	e7fe      	b.n	80072e2 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80072e4:	0093      	lsls	r3, r2, #2
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	4904      	ldr	r1, [pc, #16]	; (80072fc <pingCommand+0x60>)
 80072ec:	185b      	adds	r3, r3, r1
 80072ee:	4905      	ldr	r1, [pc, #20]	; (8007304 <pingCommand+0x68>)
 80072f0:	f00c ff32 	bl	8014158 <sprintf>
 80072f4:	e7e1      	b.n	80072ba <pingCommand+0x1e>
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	20001076 	.word	0x20001076
 80072fc:	20000f68 	.word	0x20000f68
 8007300:	08019890 	.word	0x08019890
 8007304:	080198a4 	.word	0x080198a4

08007308 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007308:	b510      	push	{r4, lr}
 800730a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800730c:	d101      	bne.n	8007312 <prvRunTimeStatsCommand+0xa>
 800730e:	b672      	cpsid	i
 8007310:	e7fe      	b.n	8007310 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007312:	2241      	movs	r2, #65	; 0x41
 8007314:	4904      	ldr	r1, [pc, #16]	; (8007328 <prvRunTimeStatsCommand+0x20>)
 8007316:	f00c fd1c 	bl	8013d52 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800731a:	0020      	movs	r0, r4
 800731c:	3040      	adds	r0, #64	; 0x40
 800731e:	f008 fbbf 	bl	800faa0 <vTaskGetRunTimeStats>
}
 8007322:	2000      	movs	r0, #0
 8007324:	bd10      	pop	{r4, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	080198d0 	.word	0x080198d0

0800732c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800732c:	b510      	push	{r4, lr}
 800732e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007330:	d101      	bne.n	8007336 <prvTaskStatsCommand+0xa>
 8007332:	b672      	cpsid	i
 8007334:	e7fe      	b.n	8007334 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007336:	2250      	movs	r2, #80	; 0x50
 8007338:	4904      	ldr	r1, [pc, #16]	; (800734c <prvTaskStatsCommand+0x20>)
 800733a:	f00c fd0a 	bl	8013d52 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800733e:	0020      	movs	r0, r4
 8007340:	304f      	adds	r0, #79	; 0x4f
 8007342:	f008 fb4d 	bl	800f9e0 <vTaskList>
}
 8007346:	2000      	movs	r0, #0
 8007348:	bd10      	pop	{r4, pc}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	08019924 	.word	0x08019924

08007350 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007350:	2800      	cmp	r0, #0
 8007352:	d101      	bne.n	8007358 <resetCommand+0x8>
 8007354:	b672      	cpsid	i
 8007356:	e7fe      	b.n	8007356 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	4b03      	ldr	r3, [pc, #12]	; (800736c <resetCommand+0x1c>)
 800735e:	4a04      	ldr	r2, [pc, #16]	; (8007370 <resetCommand+0x20>)
 8007360:	60da      	str	r2, [r3, #12]
 8007362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	e7fd      	b.n	8007366 <resetCommand+0x16>
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	e000ed00 	.word	0xe000ed00
 8007370:	05fa0004 	.word	0x05fa0004

08007374 <RegisterUserCLICommands>:
}
 8007374:	4770      	bx	lr
	...

08007378 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007378:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800737a:	4835      	ldr	r0, [pc, #212]	; (8007450 <vRegisterCLICommands+0xd8>)
 800737c:	f006 ff6a 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007380:	4834      	ldr	r0, [pc, #208]	; (8007454 <vRegisterCLICommands+0xdc>)
 8007382:	f006 ff67 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007386:	4834      	ldr	r0, [pc, #208]	; (8007458 <vRegisterCLICommands+0xe0>)
 8007388:	f006 ff64 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800738c:	4833      	ldr	r0, [pc, #204]	; (800745c <vRegisterCLICommands+0xe4>)
 800738e:	f006 ff61 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007392:	4833      	ldr	r0, [pc, #204]	; (8007460 <vRegisterCLICommands+0xe8>)
 8007394:	f006 ff5e 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007398:	4832      	ldr	r0, [pc, #200]	; (8007464 <vRegisterCLICommands+0xec>)
 800739a:	f006 ff5b 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 800739e:	4832      	ldr	r0, [pc, #200]	; (8007468 <vRegisterCLICommands+0xf0>)
 80073a0:	f006 ff58 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80073a4:	4831      	ldr	r0, [pc, #196]	; (800746c <vRegisterCLICommands+0xf4>)
 80073a6:	f006 ff55 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80073aa:	4831      	ldr	r0, [pc, #196]	; (8007470 <vRegisterCLICommands+0xf8>)
 80073ac:	f006 ff52 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80073b0:	4830      	ldr	r0, [pc, #192]	; (8007474 <vRegisterCLICommands+0xfc>)
 80073b2:	f006 ff4f 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 80073b6:	4830      	ldr	r0, [pc, #192]	; (8007478 <vRegisterCLICommands+0x100>)
 80073b8:	f006 ff4c 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80073bc:	482f      	ldr	r0, [pc, #188]	; (800747c <vRegisterCLICommands+0x104>)
 80073be:	f006 ff49 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80073c2:	482f      	ldr	r0, [pc, #188]	; (8007480 <vRegisterCLICommands+0x108>)
 80073c4:	f006 ff46 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80073c8:	482e      	ldr	r0, [pc, #184]	; (8007484 <vRegisterCLICommands+0x10c>)
 80073ca:	f006 ff43 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80073ce:	482e      	ldr	r0, [pc, #184]	; (8007488 <vRegisterCLICommands+0x110>)
 80073d0:	f006 ff40 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80073d4:	482d      	ldr	r0, [pc, #180]	; (800748c <vRegisterCLICommands+0x114>)
 80073d6:	f006 ff3d 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80073da:	482d      	ldr	r0, [pc, #180]	; (8007490 <vRegisterCLICommands+0x118>)
 80073dc:	f006 ff3a 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80073e0:	482c      	ldr	r0, [pc, #176]	; (8007494 <vRegisterCLICommands+0x11c>)
 80073e2:	f006 ff37 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 80073e6:	482c      	ldr	r0, [pc, #176]	; (8007498 <vRegisterCLICommands+0x120>)
 80073e8:	f006 ff34 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 80073ec:	482b      	ldr	r0, [pc, #172]	; (800749c <vRegisterCLICommands+0x124>)
 80073ee:	f006 ff31 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80073f2:	482b      	ldr	r0, [pc, #172]	; (80074a0 <vRegisterCLICommands+0x128>)
 80073f4:	f006 ff2e 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80073f8:	482a      	ldr	r0, [pc, #168]	; (80074a4 <vRegisterCLICommands+0x12c>)
 80073fa:	f006 ff2b 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80073fe:	482a      	ldr	r0, [pc, #168]	; (80074a8 <vRegisterCLICommands+0x130>)
 8007400:	f006 ff28 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007404:	4829      	ldr	r0, [pc, #164]	; (80074ac <vRegisterCLICommands+0x134>)
 8007406:	f006 ff25 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800740a:	4829      	ldr	r0, [pc, #164]	; (80074b0 <vRegisterCLICommands+0x138>)
 800740c:	f006 ff22 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007410:	4828      	ldr	r0, [pc, #160]	; (80074b4 <vRegisterCLICommands+0x13c>)
 8007412:	f006 ff1f 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007416:	4828      	ldr	r0, [pc, #160]	; (80074b8 <vRegisterCLICommands+0x140>)
 8007418:	f006 ff1c 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800741c:	4827      	ldr	r0, [pc, #156]	; (80074bc <vRegisterCLICommands+0x144>)
 800741e:	f006 ff19 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007422:	4827      	ldr	r0, [pc, #156]	; (80074c0 <vRegisterCLICommands+0x148>)
 8007424:	f006 ff16 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007428:	4826      	ldr	r0, [pc, #152]	; (80074c4 <vRegisterCLICommands+0x14c>)
 800742a:	f006 ff13 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 800742e:	4826      	ldr	r0, [pc, #152]	; (80074c8 <vRegisterCLICommands+0x150>)
 8007430:	f006 ff10 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007434:	4825      	ldr	r0, [pc, #148]	; (80074cc <vRegisterCLICommands+0x154>)
 8007436:	f006 ff0d 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800743a:	4825      	ldr	r0, [pc, #148]	; (80074d0 <vRegisterCLICommands+0x158>)
 800743c:	f006 ff0a 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <vRegisterCLICommands+0x15c>)
 8007442:	2223      	movs	r2, #35	; 0x23
 8007444:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007446:	f004 f93d 	bl	800b6c4 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800744a:	f7ff ff93 	bl	8007374 <RegisterUserCLICommands>
}
 800744e:	bd10      	pop	{r4, pc}
 8007450:	08019974 	.word	0x08019974
 8007454:	08019914 	.word	0x08019914
 8007458:	080198c0 	.word	0x080198c0
 800745c:	080192e4 	.word	0x080192e4
 8007460:	0801946c 	.word	0x0801946c
 8007464:	080199bc 	.word	0x080199bc
 8007468:	08019838 	.word	0x08019838
 800746c:	080196f8 	.word	0x080196f8
 8007470:	08019e70 	.word	0x08019e70
 8007474:	080197fc 	.word	0x080197fc
 8007478:	08019a78 	.word	0x08019a78
 800747c:	080192b0 	.word	0x080192b0
 8007480:	080199ac 	.word	0x080199ac
 8007484:	08019cd0 	.word	0x08019cd0
 8007488:	08019598 	.word	0x08019598
 800748c:	080193f0 	.word	0x080193f0
 8007490:	0801ae90 	.word	0x0801ae90
 8007494:	08019358 	.word	0x08019358
 8007498:	08019ac4 	.word	0x08019ac4
 800749c:	0801af04 	.word	0x0801af04
 80074a0:	08019778 	.word	0x08019778
 80074a4:	0801949c 	.word	0x0801949c
 80074a8:	08019e60 	.word	0x08019e60
 80074ac:	08019234 	.word	0x08019234
 80074b0:	08019880 	.word	0x08019880
 80074b4:	0801945c 	.word	0x0801945c
 80074b8:	08019330 	.word	0x08019330
 80074bc:	0801aedc 	.word	0x0801aedc
 80074c0:	0801ae24 	.word	0x0801ae24
 80074c4:	08019134 	.word	0x08019134
 80074c8:	080191b4 	.word	0x080191b4
 80074cc:	080191ec 	.word	0x080191ec
 80074d0:	08019144 	.word	0x08019144
 80074d4:	20006a24 	.word	0x20006a24

080074d8 <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 80074d8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 80074da:	1e45      	subs	r5, r0, #1
 80074dc:	00ec      	lsls	r4, r5, #3
 80074de:	1b60      	subs	r0, r4, r5
 80074e0:	00c0      	lsls	r0, r0, #3
 80074e2:	4e05      	ldr	r6, [pc, #20]	; (80074f8 <StopMsgDMA+0x20>)
 80074e4:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80074e6:	f009 fcce 	bl	8010e86 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80074ea:	1b64      	subs	r4, r4, r5
 80074ec:	00e4      	lsls	r4, r4, #3
 80074ee:	59a3      	ldr	r3, [r4, r6]
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
}
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	20001878 	.word	0x20001878

080074fc <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80074fc:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80074fe:	1e44      	subs	r4, r0, #1
 8007500:	00e5      	lsls	r5, r4, #3
 8007502:	1b28      	subs	r0, r5, r4
 8007504:	00c0      	lsls	r0, r0, #3
 8007506:	4e07      	ldr	r6, [pc, #28]	; (8007524 <StopStreamDMA+0x28>)
 8007508:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800750a:	f009 fcbc 	bl	8010e86 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800750e:	1b2d      	subs	r5, r5, r4
 8007510:	00ed      	lsls	r5, r5, #3
 8007512:	59aa      	ldr	r2, [r5, r6]
 8007514:	2300      	movs	r3, #0
 8007516:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007518:	00a4      	lsls	r4, r4, #2
 800751a:	4a03      	ldr	r2, [pc, #12]	; (8007528 <StopStreamDMA+0x2c>)
 800751c:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 800751e:	4a03      	ldr	r2, [pc, #12]	; (800752c <StopStreamDMA+0x30>)
 8007520:	50a3      	str	r3, [r4, r2]
	
}
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	20001a70 	.word	0x20001a70
 8007528:	20001490 	.word	0x20001490
 800752c:	200014c0 	.word	0x200014c0

08007530 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8007530:	b510      	push	{r4, lr}
 8007532:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007534:	f7ff ffd0 	bl	80074d8 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8007538:	3c01      	subs	r4, #1
 800753a:	00e0      	lsls	r0, r4, #3
 800753c:	1b02      	subs	r2, r0, r4
 800753e:	00d2      	lsls	r2, r2, #3
 8007540:	4903      	ldr	r1, [pc, #12]	; (8007550 <SwitchMsgDMAToStream+0x20>)
 8007542:	5851      	ldr	r1, [r2, r1]
 8007544:	4b03      	ldr	r3, [pc, #12]	; (8007554 <SwitchMsgDMAToStream+0x24>)
 8007546:	18d0      	adds	r0, r2, r3
 8007548:	f004 fed0 	bl	800c2ec <DMA_STREAM_CH_Init>
}
 800754c:	bd10      	pop	{r4, pc}
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	20001878 	.word	0x20001878
 8007554:	20001a70 	.word	0x20001a70

08007558 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	b083      	sub	sp, #12
 800755c:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800755e:	f7ff ffcd 	bl	80074fc <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007562:	9401      	str	r4, [sp, #4]
 8007564:	3c01      	subs	r4, #1
 8007566:	00e7      	lsls	r7, r4, #3
 8007568:	1b3d      	subs	r5, r7, r4
 800756a:	00ed      	lsls	r5, r5, #3
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <SwitchStreamDMAToMsg+0x54>)
 800756e:	18ed      	adds	r5, r5, r3
 8007570:	4e0f      	ldr	r6, [pc, #60]	; (80075b0 <SwitchStreamDMAToMsg+0x58>)
 8007572:	1b3b      	subs	r3, r7, r4
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	5999      	ldr	r1, [r3, r6]
 8007578:	0028      	movs	r0, r5
 800757a:	f004 fe39 	bl	800c1f0 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 800757e:	1b3b      	subs	r3, r7, r4
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	18f3      	adds	r3, r6, r3
 8007584:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007586:	f004 fe03 	bl	800c190 <GetPort>
 800758a:	2300      	movs	r3, #0
 800758c:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <SwitchStreamDMAToMsg+0x5c>)
 800758e:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 8007590:	1b3f      	subs	r7, r7, r4
 8007592:	00ff      	lsls	r7, r7, #3
 8007594:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] =0;
 8007596:	00a4      	lsls	r4, r4, #2
 8007598:	4a07      	ldr	r2, [pc, #28]	; (80075b8 <SwitchStreamDMAToMsg+0x60>)
 800759a:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 800759c:	9801      	ldr	r0, [sp, #4]
 800759e:	f006 fc8f 	bl	800dec0 <GetUart>
 80075a2:	0029      	movs	r1, r5
 80075a4:	f005 fa96 	bl	800cad4 <DMA_MSG_RX_Setup>
	
}
 80075a8:	b003      	add	sp, #12
 80075aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ac:	20001878 	.word	0x20001878
 80075b0:	20001a70 	.word	0x20001a70
 80075b4:	200010f8 	.word	0x200010f8
 80075b8:	200014a8 	.word	0x200014a8

080075bc <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	0005      	movs	r5, r0
 80075c0:	000e      	movs	r6, r1
 80075c2:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80075c4:	f004 fde4 	bl	800c190 <GetPort>
 80075c8:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <StartDMAstream+0x44>)
 80075cc:	5c1b      	ldrb	r3, [r3, r0]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d902      	bls.n	80075d8 <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80075d2:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d112      	bne.n	80075fe <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 80075d8:	0020      	movs	r0, r4
 80075da:	f7ff ffa9 	bl	8007530 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 80075de:	1e63      	subs	r3, r4, #1
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a08      	ldr	r2, [pc, #32]	; (8007604 <StartDMAstream+0x48>)
 80075e4:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80075e6:	4a06      	ldr	r2, [pc, #24]	; (8007600 <StartDMAstream+0x44>)
 80075e8:	2102      	movs	r1, #2
 80075ea:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80075ec:	4a06      	ldr	r2, [pc, #24]	; (8007608 <StartDMAstream+0x4c>)
 80075ee:	2100      	movs	r1, #0
 80075f0:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80075f2:	003a      	movs	r2, r7
 80075f4:	0031      	movs	r1, r6
 80075f6:	0028      	movs	r0, r5
 80075f8:	f005 fad6 	bl	800cba8 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80075fc:	2000      	movs	r0, #0
}
 80075fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007600:	200010f8 	.word	0x200010f8
 8007604:	200014a8 	.word	0x200014a8
 8007608:	20001490 	.word	0x20001490

0800760c <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <DMA_IRQHandler+0x50>)
 8007612:	5c1b      	ldrb	r3, [r3, r0]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d008      	beq.n	800762a <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007618:	3c01      	subs	r4, #1
 800761a:	00e0      	lsls	r0, r4, #3
 800761c:	1b00      	subs	r0, r0, r4
 800761e:	00c0      	lsls	r0, r0, #3
 8007620:	4c0f      	ldr	r4, [pc, #60]	; (8007660 <DMA_IRQHandler+0x54>)
 8007622:	1900      	adds	r0, r0, r4
 8007624:	f009 fc58 	bl	8010ed8 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007628:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800762a:	1e45      	subs	r5, r0, #1
 800762c:	00e8      	lsls	r0, r5, #3
 800762e:	1b40      	subs	r0, r0, r5
 8007630:	00c0      	lsls	r0, r0, #3
 8007632:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <DMA_IRQHandler+0x58>)
 8007634:	18c0      	adds	r0, r0, r3
 8007636:	f009 fc4f 	bl	8010ed8 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800763a:	00aa      	lsls	r2, r5, #2
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <DMA_IRQHandler+0x5c>)
 800763e:	58d2      	ldr	r2, [r2, r3]
 8007640:	2a00      	cmp	r2, #0
 8007642:	d006      	beq.n	8007652 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 8007644:	4909      	ldr	r1, [pc, #36]	; (800766c <DMA_IRQHandler+0x60>)
 8007646:	00ad      	lsls	r5, r5, #2
 8007648:	586b      	ldr	r3, [r5, r1]
 800764a:	3301      	adds	r3, #1
 800764c:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800764e:	429a      	cmp	r2, r3
 8007650:	d8ea      	bhi.n	8007628 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007652:	0020      	movs	r0, r4
 8007654:	f7ff ff52 	bl	80074fc <StopStreamDMA>
}
 8007658:	e7e6      	b.n	8007628 <DMA_IRQHandler+0x1c>
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	200010f8 	.word	0x200010f8
 8007660:	20001878 	.word	0x20001878
 8007664:	20001a70 	.word	0x20001a70
 8007668:	200014c0 	.word	0x200014c0
 800766c:	20001490 	.word	0x20001490

08007670 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007670:	4b08      	ldr	r3, [pc, #32]	; (8007694 <ResetUartORE+0x24>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	2308      	movs	r3, #8
 8007676:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007678:	4a07      	ldr	r2, [pc, #28]	; (8007698 <ResetUartORE+0x28>)
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800767e:	4a07      	ldr	r2, [pc, #28]	; (800769c <ResetUartORE+0x2c>)
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007684:	4a06      	ldr	r2, [pc, #24]	; (80076a0 <ResetUartORE+0x30>)
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800768a:	4a06      	ldr	r2, [pc, #24]	; (80076a4 <ResetUartORE+0x34>)
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	6213      	str	r3, [r2, #32]
#endif
}
 8007690:	4770      	bx	lr
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	20006ca0 	.word	0x20006ca0
 8007698:	20006df0 	.word	0x20006df0
 800769c:	20006bc0 	.word	0x20006bc0
 80076a0:	20006c30 	.word	0x20006c30
 80076a4:	20006d10 	.word	0x20006d10

080076a8 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	0006      	movs	r6, r0
 80076ac:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 80076ae:	f00a f883 	bl	80117b8 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80076b2:	4b2b      	ldr	r3, [pc, #172]	; (8007760 <EE_VerifyPageFullWriteVariable+0xb8>)
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80076b8:	4b2a      	ldr	r3, [pc, #168]	; (8007764 <EE_VerifyPageFullWriteVariable+0xbc>)
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 80076c2:	4929      	ldr	r1, [pc, #164]	; (8007768 <EE_VerifyPageFullWriteVariable+0xc0>)
 80076c4:	428a      	cmp	r2, r1
 80076c6:	d007      	beq.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 80076c8:	3302      	adds	r3, #2
 80076ca:	e005      	b.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 80076cc:	2a00      	cmp	r2, #0
 80076ce:	d143      	bne.n	8007758 <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 80076d0:	4925      	ldr	r1, [pc, #148]	; (8007768 <EE_VerifyPageFullWriteVariable+0xc0>)
 80076d2:	428b      	cmp	r3, r1
 80076d4:	d042      	beq.n	800775c <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 80076d6:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80076d8:	4a24      	ldr	r2, [pc, #144]	; (800776c <EE_VerifyPageFullWriteVariable+0xc4>)
 80076da:	189c      	adds	r4, r3, r2
 80076dc:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80076de:	02db      	lsls	r3, r3, #11
 80076e0:	4a23      	ldr	r2, [pc, #140]	; (8007770 <EE_VerifyPageFullWriteVariable+0xc8>)
 80076e2:	4694      	mov	ip, r2
 80076e4:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	3201      	adds	r2, #1
 80076ea:	d005      	beq.n	80076f8 <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 80076ec:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d22e      	bcs.n	8007750 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	3201      	adds	r2, #1
 80076f6:	d1f9      	bne.n	80076ec <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 80076f8:	002a      	movs	r2, r5
 80076fa:	2300      	movs	r3, #0
 80076fc:	0021      	movs	r1, r4
 80076fe:	2001      	movs	r0, #1
 8007700:	f00a f8a4 	bl	801184c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007704:	481b      	ldr	r0, [pc, #108]	; (8007774 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007706:	f00a f873 	bl	80117f0 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800770a:	2800      	cmp	r0, #0
 800770c:	d003      	beq.n	8007716 <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 800770e:	4b1a      	ldr	r3, [pc, #104]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007710:	69d8      	ldr	r0, [r3, #28]
 8007712:	b280      	uxth	r0, r0
 8007714:	e01f      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007716:	4a19      	ldr	r2, [pc, #100]	; (800777c <EE_VerifyPageFullWriteVariable+0xd4>)
 8007718:	6913      	ldr	r3, [r2, #16]
 800771a:	2101      	movs	r1, #1
 800771c:	438b      	bics	r3, r1
 800771e:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007720:	1ca1      	adds	r1, r4, #2
 8007722:	0032      	movs	r2, r6
 8007724:	2300      	movs	r3, #0
 8007726:	2001      	movs	r0, #1
 8007728:	f00a f890 	bl	801184c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800772c:	4811      	ldr	r0, [pc, #68]	; (8007774 <EE_VerifyPageFullWriteVariable+0xcc>)
 800772e:	f00a f85f 	bl	80117f0 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007732:	2800      	cmp	r0, #0
 8007734:	d003      	beq.n	800773e <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007738:	69d8      	ldr	r0, [r3, #28]
 800773a:	b280      	uxth	r0, r0
 800773c:	e00b      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800773e:	4a0f      	ldr	r2, [pc, #60]	; (800777c <EE_VerifyPageFullWriteVariable+0xd4>)
 8007740:	6913      	ldr	r3, [r2, #16]
 8007742:	2101      	movs	r1, #1
 8007744:	438b      	bics	r3, r1
 8007746:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 8007748:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 800774a:	69d8      	ldr	r0, [r3, #28]
 800774c:	b280      	uxth	r0, r0
 800774e:	e002      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 8007750:	f00a f844 	bl	80117dc <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8007754:	2080      	movs	r0, #128	; 0x80
}
 8007756:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 8007758:	20ab      	movs	r0, #171	; 0xab
 800775a:	e7fc      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 800775c:	2302      	movs	r3, #2
 800775e:	e7bb      	b.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
 8007760:	0801e000 	.word	0x0801e000
 8007764:	0801f000 	.word	0x0801f000
 8007768:	0000eeee 	.word	0x0000eeee
 800776c:	0001003c 	.word	0x0001003c
 8007770:	0801effe 	.word	0x0801effe
 8007774:	0000c350 	.word	0x0000c350
 8007778:	20006f90 	.word	0x20006f90
 800777c:	40022000 	.word	0x40022000

08007780 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007780:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007782:	4b13      	ldr	r3, [pc, #76]	; (80077d0 <EE_ReadVariable+0x50>)
 8007784:	881c      	ldrh	r4, [r3, #0]
 8007786:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007788:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <EE_ReadVariable+0x54>)
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800778e:	2c00      	cmp	r4, #0
 8007790:	d006      	beq.n	80077a0 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 8007796:	20ab      	movs	r0, #171	; 0xab
 8007798:	e019      	b.n	80077ce <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800779a:	2001      	movs	r0, #1
 800779c:	e017      	b.n	80077ce <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 800779e:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80077a0:	02e3      	lsls	r3, r4, #11
 80077a2:	4a0d      	ldr	r2, [pc, #52]	; (80077d8 <EE_ReadVariable+0x58>)
 80077a4:	4694      	mov	ip, r2
 80077a6:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80077a8:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 80077aa:	4a0c      	ldr	r2, [pc, #48]	; (80077dc <EE_ReadVariable+0x5c>)
 80077ac:	4694      	mov	ip, r2
 80077ae:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 80077b0:	881a      	ldrh	r2, [r3, #0]
 80077b2:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 80077b4:	4290      	cmp	r0, r2
 80077b6:	d006      	beq.n	80077c6 <EE_ReadVariable+0x46>
			Address =Address - 4;
 80077b8:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	d9ed      	bls.n	800779a <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 80077be:	881a      	ldrh	r2, [r3, #0]
 80077c0:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 80077c2:	4282      	cmp	r2, r0
 80077c4:	d1f8      	bne.n	80077b8 <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 80077c6:	3b02      	subs	r3, #2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 80077cc:	2000      	movs	r0, #0
}
 80077ce:	bd10      	pop	{r4, pc}
 80077d0:	0801e000 	.word	0x0801e000
 80077d4:	0801f000 	.word	0x0801f000
 80077d8:	0801effe 	.word	0x0801effe
 80077dc:	0801e002 	.word	0x0801e002

080077e0 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 80077e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e2:	46de      	mov	lr, fp
 80077e4:	4647      	mov	r7, r8
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b083      	sub	sp, #12
 80077ea:	0005      	movs	r5, r0
 80077ec:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 80077ee:	f009 ffe3 	bl	80117b8 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80077f2:	0031      	movs	r1, r6
 80077f4:	0028      	movs	r0, r5
 80077f6:	f7ff ff57 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 80077fa:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 80077fc:	2880      	cmp	r0, #128	; 0x80
 80077fe:	d007      	beq.n	8007810 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007800:	f009 ffec 	bl	80117dc <HAL_FLASH_Lock>
}
 8007804:	0020      	movs	r0, r4
 8007806:	b003      	add	sp, #12
 8007808:	bc0c      	pop	{r2, r3}
 800780a:	4690      	mov	r8, r2
 800780c:	469b      	mov	fp, r3
 800780e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007810:	f009 ffd2 	bl	80117b8 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007814:	4b3e      	ldr	r3, [pc, #248]	; (8007910 <EE_WriteVariable+0x130>)
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800781a:	4a3e      	ldr	r2, [pc, #248]	; (8007914 <EE_WriteVariable+0x134>)
 800781c:	8812      	ldrh	r2, [r2, #0]
 800781e:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 8007824:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 8007826:	2a00      	cmp	r2, #0
 8007828:	d1ea      	bne.n	8007800 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800782a:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <EE_WriteVariable+0x134>)
 800782c:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800782e:	4b38      	ldr	r3, [pc, #224]	; (8007910 <EE_WriteVariable+0x130>)
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	e003      	b.n	800783c <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007834:	4b36      	ldr	r3, [pc, #216]	; (8007910 <EE_WriteVariable+0x130>)
 8007836:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007838:	4b36      	ldr	r3, [pc, #216]	; (8007914 <EE_WriteVariable+0x134>)
 800783a:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800783c:	4a36      	ldr	r2, [pc, #216]	; (8007918 <EE_WriteVariable+0x138>)
 800783e:	2300      	movs	r3, #0
 8007840:	9901      	ldr	r1, [sp, #4]
 8007842:	2001      	movs	r0, #1
 8007844:	f00a f802 	bl	801184c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007848:	4834      	ldr	r0, [pc, #208]	; (800791c <EE_WriteVariable+0x13c>)
 800784a:	f009 ffd1 	bl	80117f0 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800784e:	2800      	cmp	r0, #0
 8007850:	d003      	beq.n	800785a <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 8007852:	4b33      	ldr	r3, [pc, #204]	; (8007920 <EE_WriteVariable+0x140>)
 8007854:	69dc      	ldr	r4, [r3, #28]
 8007856:	b2a4      	uxth	r4, r4
 8007858:	e7d2      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800785a:	4a32      	ldr	r2, [pc, #200]	; (8007924 <EE_WriteVariable+0x144>)
 800785c:	6913      	ldr	r3, [r2, #16]
 800785e:	2101      	movs	r1, #1
 8007860:	438b      	bics	r3, r1
 8007862:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007864:	0031      	movs	r1, r6
 8007866:	0028      	movs	r0, r5
 8007868:	f7ff ff1e 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 800786c:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800786e:	d1c7      	bne.n	8007800 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007870:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007872:	4b2d      	ldr	r3, [pc, #180]	; (8007928 <EE_WriteVariable+0x148>)
 8007874:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007876:	4e2d      	ldr	r6, [pc, #180]	; (800792c <EE_WriteVariable+0x14c>)
 8007878:	e003      	b.n	8007882 <EE_WriteVariable+0xa2>
 800787a:	3701      	adds	r7, #1
 800787c:	b2bf      	uxth	r7, r7
 800787e:	42b7      	cmp	r7, r6
 8007880:	d00f      	beq.n	80078a2 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007882:	42bd      	cmp	r5, r7
 8007884:	d0f9      	beq.n	800787a <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007886:	4928      	ldr	r1, [pc, #160]	; (8007928 <EE_WriteVariable+0x148>)
 8007888:	0038      	movs	r0, r7
 800788a:	f7ff ff79 	bl	8007780 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800788e:	2801      	cmp	r0, #1
 8007890:	d0f3      	beq.n	800787a <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007892:	4643      	mov	r3, r8
 8007894:	8819      	ldrh	r1, [r3, #0]
 8007896:	0038      	movs	r0, r7
 8007898:	f7ff ff06 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 800789c:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800789e:	d0ec      	beq.n	800787a <EE_WriteVariable+0x9a>
 80078a0:	e7ae      	b.n	8007800 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 80078a2:	4658      	mov	r0, fp
 80078a4:	f00a f84a 	bl	801193c <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078a8:	481c      	ldr	r0, [pc, #112]	; (800791c <EE_WriteVariable+0x13c>)
 80078aa:	f009 ffa1 	bl	80117f0 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d003      	beq.n	80078ba <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <EE_WriteVariable+0x140>)
 80078b4:	69dc      	ldr	r4, [r3, #28]
 80078b6:	b2a4      	uxth	r4, r4
 80078b8:	e7a2      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 80078ba:	2080      	movs	r0, #128	; 0x80
 80078bc:	0100      	lsls	r0, r0, #4
 80078be:	4458      	add	r0, fp
 80078c0:	f00a f83c 	bl	801193c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078c4:	4815      	ldr	r0, [pc, #84]	; (800791c <EE_WriteVariable+0x13c>)
 80078c6:	f009 ff93 	bl	80117f0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d003      	beq.n	80078d6 <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 80078ce:	4b14      	ldr	r3, [pc, #80]	; (8007920 <EE_WriteVariable+0x140>)
 80078d0:	69dc      	ldr	r4, [r3, #28]
 80078d2:	b2a4      	uxth	r4, r4
 80078d4:	e794      	b.n	8007800 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80078d6:	4a13      	ldr	r2, [pc, #76]	; (8007924 <EE_WriteVariable+0x144>)
 80078d8:	6913      	ldr	r3, [r2, #16]
 80078da:	2102      	movs	r1, #2
 80078dc:	438b      	bics	r3, r1
 80078de:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	9901      	ldr	r1, [sp, #4]
 80078e6:	2001      	movs	r0, #1
 80078e8:	f009 ffb0 	bl	801184c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078ec:	480b      	ldr	r0, [pc, #44]	; (800791c <EE_WriteVariable+0x13c>)
 80078ee:	f009 ff7f 	bl	80117f0 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d003      	beq.n	80078fe <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <EE_WriteVariable+0x140>)
 80078f8:	69dc      	ldr	r4, [r3, #28]
 80078fa:	b2a4      	uxth	r4, r4
 80078fc:	e780      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80078fe:	4a09      	ldr	r2, [pc, #36]	; (8007924 <EE_WriteVariable+0x144>)
 8007900:	6913      	ldr	r3, [r2, #16]
 8007902:	2101      	movs	r1, #1
 8007904:	438b      	bics	r3, r1
 8007906:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 8007908:	f009 ff68 	bl	80117dc <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 800790c:	2400      	movs	r4, #0
 800790e:	e777      	b.n	8007800 <EE_WriteVariable+0x20>
 8007910:	0801e000 	.word	0x0801e000
 8007914:	0801f000 	.word	0x0801f000
 8007918:	0000eeee 	.word	0x0000eeee
 800791c:	0000c350 	.word	0x0000c350
 8007920:	20006f90 	.word	0x20006f90
 8007924:	40022000 	.word	0x40022000
 8007928:	200014d8 	.word	0x200014d8
 800792c:	00000401 	.word	0x00000401

08007930 <EE_Format>:
uint16_t EE_Format(void){
 8007930:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007932:	f009 ff41 	bl	80117b8 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007936:	4829      	ldr	r0, [pc, #164]	; (80079dc <EE_Format+0xac>)
 8007938:	f00a f800 	bl	801193c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800793c:	4828      	ldr	r0, [pc, #160]	; (80079e0 <EE_Format+0xb0>)
 800793e:	f009 ff57 	bl	80117f0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007942:	2800      	cmp	r0, #0
 8007944:	d003      	beq.n	800794e <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007946:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <EE_Format+0xb4>)
 8007948:	69d8      	ldr	r0, [r3, #28]
 800794a:	b280      	uxth	r0, r0
}
 800794c:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800794e:	4826      	ldr	r0, [pc, #152]	; (80079e8 <EE_Format+0xb8>)
 8007950:	f009 fff4 	bl	801193c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007954:	4822      	ldr	r0, [pc, #136]	; (80079e0 <EE_Format+0xb0>)
 8007956:	f009 ff4b 	bl	80117f0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800795a:	2800      	cmp	r0, #0
 800795c:	d003      	beq.n	8007966 <EE_Format+0x36>
			return pFlash.ErrorCode;
 800795e:	4b21      	ldr	r3, [pc, #132]	; (80079e4 <EE_Format+0xb4>)
 8007960:	69d8      	ldr	r0, [r3, #28]
 8007962:	b280      	uxth	r0, r0
 8007964:	e7f2      	b.n	800794c <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007966:	4a21      	ldr	r2, [pc, #132]	; (80079ec <EE_Format+0xbc>)
 8007968:	6913      	ldr	r3, [r2, #16]
 800796a:	2102      	movs	r1, #2
 800796c:	438b      	bics	r3, r1
 800796e:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007970:	2200      	movs	r2, #0
 8007972:	2300      	movs	r3, #0
 8007974:	4919      	ldr	r1, [pc, #100]	; (80079dc <EE_Format+0xac>)
 8007976:	2001      	movs	r0, #1
 8007978:	f009 ff68 	bl	801184c <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800797c:	4818      	ldr	r0, [pc, #96]	; (80079e0 <EE_Format+0xb0>)
 800797e:	f009 ff37 	bl	80117f0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007982:	2800      	cmp	r0, #0
 8007984:	d003      	beq.n	800798e <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007986:	4b17      	ldr	r3, [pc, #92]	; (80079e4 <EE_Format+0xb4>)
 8007988:	69d8      	ldr	r0, [r3, #28]
 800798a:	b280      	uxth	r0, r0
 800798c:	e7de      	b.n	800794c <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800798e:	4a17      	ldr	r2, [pc, #92]	; (80079ec <EE_Format+0xbc>)
 8007990:	6913      	ldr	r3, [r2, #16]
 8007992:	2101      	movs	r1, #1
 8007994:	438b      	bics	r3, r1
 8007996:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007998:	4815      	ldr	r0, [pc, #84]	; (80079f0 <EE_Format+0xc0>)
 800799a:	f009 ffcf 	bl	801193c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800799e:	4810      	ldr	r0, [pc, #64]	; (80079e0 <EE_Format+0xb0>)
 80079a0:	f009 ff26 	bl	80117f0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d003      	beq.n	80079b0 <EE_Format+0x80>
		return pFlash.ErrorCode;
 80079a8:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <EE_Format+0xb4>)
 80079aa:	69d8      	ldr	r0, [r3, #28]
 80079ac:	b280      	uxth	r0, r0
 80079ae:	e7cd      	b.n	800794c <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80079b0:	4810      	ldr	r0, [pc, #64]	; (80079f4 <EE_Format+0xc4>)
 80079b2:	f009 ffc3 	bl	801193c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079b6:	480a      	ldr	r0, [pc, #40]	; (80079e0 <EE_Format+0xb0>)
 80079b8:	f009 ff1a 	bl	80117f0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80079bc:	2800      	cmp	r0, #0
 80079be:	d003      	beq.n	80079c8 <EE_Format+0x98>
			return pFlash.ErrorCode;
 80079c0:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <EE_Format+0xb4>)
 80079c2:	69d8      	ldr	r0, [r3, #28]
 80079c4:	b280      	uxth	r0, r0
 80079c6:	e7c1      	b.n	800794c <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079c8:	4a08      	ldr	r2, [pc, #32]	; (80079ec <EE_Format+0xbc>)
 80079ca:	6913      	ldr	r3, [r2, #16]
 80079cc:	2101      	movs	r1, #1
 80079ce:	438b      	bics	r3, r1
 80079d0:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 80079d2:	f009 ff03 	bl	80117dc <HAL_FLASH_Lock>
	return FlashStatus;
 80079d6:	2000      	movs	r0, #0
 80079d8:	e7b8      	b.n	800794c <EE_Format+0x1c>
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	0801e000 	.word	0x0801e000
 80079e0:	0000c350 	.word	0x0000c350
 80079e4:	20006f90 	.word	0x20006f90
 80079e8:	0801e800 	.word	0x0801e800
 80079ec:	40022000 	.word	0x40022000
 80079f0:	0801f000 	.word	0x0801f000
 80079f4:	0801f800 	.word	0x0801f800

080079f8 <EE_Init>:
uint16_t EE_Init(void){
 80079f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fa:	46c6      	mov	lr, r8
 80079fc:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 80079fe:	f009 fedb 	bl	80117b8 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a02:	4bbe      	ldr	r3, [pc, #760]	; (8007cfc <EE_Init+0x304>)
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a08:	4abd      	ldr	r2, [pc, #756]	; (8007d00 <EE_Init+0x308>)
 8007a0a:	8812      	ldrh	r2, [r2, #0]
 8007a0c:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007a0e:	49bd      	ldr	r1, [pc, #756]	; (8007d04 <EE_Init+0x30c>)
 8007a10:	428b      	cmp	r3, r1
 8007a12:	d100      	bne.n	8007a16 <EE_Init+0x1e>
 8007a14:	e074      	b.n	8007b00 <EE_Init+0x108>
 8007a16:	49bc      	ldr	r1, [pc, #752]	; (8007d08 <EE_Init+0x310>)
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	d011      	beq.n	8007a40 <EE_Init+0x48>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d100      	bne.n	8007a22 <EE_Init+0x2a>
 8007a20:	e109      	b.n	8007c36 <EE_Init+0x23e>
			FlashStatus =EE_Format();
 8007a22:	f7ff ff85 	bl	8007930 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a26:	48b9      	ldr	r0, [pc, #740]	; (8007d0c <EE_Init+0x314>)
 8007a28:	f009 fee2 	bl	80117f0 <FLASH_WaitForLastOperation>
 8007a2c:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d102      	bne.n	8007a38 <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007a32:	f009 fed3 	bl	80117dc <HAL_FLASH_Lock>
	return HAL_OK;
 8007a36:	2600      	movs	r6, #0
}
 8007a38:	0030      	movs	r0, r6
 8007a3a:	bc04      	pop	{r2}
 8007a3c:	4690      	mov	r8, r2
 8007a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d00d      	beq.n	8007a60 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007a44:	4baf      	ldr	r3, [pc, #700]	; (8007d04 <EE_Init+0x30c>)
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d028      	beq.n	8007a9c <EE_Init+0xa4>
				FlashStatus =EE_Format();
 8007a4a:	f7ff ff71 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a4e:	48af      	ldr	r0, [pc, #700]	; (8007d0c <EE_Init+0x314>)
 8007a50:	f009 fece 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d0ec      	beq.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007a58:	4bad      	ldr	r3, [pc, #692]	; (8007d10 <EE_Init+0x318>)
 8007a5a:	69de      	ldr	r6, [r3, #28]
 8007a5c:	b2b6      	uxth	r6, r6
 8007a5e:	e7eb      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007a60:	48a6      	ldr	r0, [pc, #664]	; (8007cfc <EE_Init+0x304>)
 8007a62:	f009 ff6b 	bl	801193c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a66:	48a9      	ldr	r0, [pc, #676]	; (8007d0c <EE_Init+0x314>)
 8007a68:	f009 fec2 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d003      	beq.n	8007a78 <EE_Init+0x80>
					return pFlash.ErrorCode;
 8007a70:	4ba7      	ldr	r3, [pc, #668]	; (8007d10 <EE_Init+0x318>)
 8007a72:	69de      	ldr	r6, [r3, #28]
 8007a74:	b2b6      	uxth	r6, r6
 8007a76:	e7df      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007a78:	48a6      	ldr	r0, [pc, #664]	; (8007d14 <EE_Init+0x31c>)
 8007a7a:	f009 ff5f 	bl	801193c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a7e:	48a3      	ldr	r0, [pc, #652]	; (8007d0c <EE_Init+0x314>)
 8007a80:	f009 feb6 	bl	80117f0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d105      	bne.n	8007a94 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a88:	4aa3      	ldr	r2, [pc, #652]	; (8007d18 <EE_Init+0x320>)
 8007a8a:	6913      	ldr	r3, [r2, #16]
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	438b      	bics	r3, r1
 8007a90:	6113      	str	r3, [r2, #16]
 8007a92:	e7ce      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007a94:	4b9e      	ldr	r3, [pc, #632]	; (8007d10 <EE_Init+0x318>)
 8007a96:	69de      	ldr	r6, [r3, #28]
 8007a98:	b2b6      	uxth	r6, r6
 8007a9a:	e7cd      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007a9c:	4897      	ldr	r0, [pc, #604]	; (8007cfc <EE_Init+0x304>)
 8007a9e:	f009 ff4d 	bl	801193c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aa2:	489a      	ldr	r0, [pc, #616]	; (8007d0c <EE_Init+0x314>)
 8007aa4:	f009 fea4 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d003      	beq.n	8007ab4 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 8007aac:	4b98      	ldr	r3, [pc, #608]	; (8007d10 <EE_Init+0x318>)
 8007aae:	69de      	ldr	r6, [r3, #28]
 8007ab0:	b2b6      	uxth	r6, r6
 8007ab2:	e7c1      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007ab4:	4897      	ldr	r0, [pc, #604]	; (8007d14 <EE_Init+0x31c>)
 8007ab6:	f009 ff41 	bl	801193c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aba:	4894      	ldr	r0, [pc, #592]	; (8007d0c <EE_Init+0x314>)
 8007abc:	f009 fe98 	bl	80117f0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d003      	beq.n	8007acc <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007ac4:	4b92      	ldr	r3, [pc, #584]	; (8007d10 <EE_Init+0x318>)
 8007ac6:	69de      	ldr	r6, [r3, #28]
 8007ac8:	b2b6      	uxth	r6, r6
 8007aca:	e7b5      	b.n	8007a38 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007acc:	4a92      	ldr	r2, [pc, #584]	; (8007d18 <EE_Init+0x320>)
 8007ace:	6913      	ldr	r3, [r2, #16]
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	438b      	bics	r3, r1
 8007ad4:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4989      	ldr	r1, [pc, #548]	; (8007d00 <EE_Init+0x308>)
 8007adc:	2001      	movs	r0, #1
 8007ade:	f009 feb5 	bl	801184c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ae2:	488a      	ldr	r0, [pc, #552]	; (8007d0c <EE_Init+0x314>)
 8007ae4:	f009 fe84 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d105      	bne.n	8007af8 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007aec:	4a8a      	ldr	r2, [pc, #552]	; (8007d18 <EE_Init+0x320>)
 8007aee:	6913      	ldr	r3, [r2, #16]
 8007af0:	2101      	movs	r1, #1
 8007af2:	438b      	bics	r3, r1
 8007af4:	6113      	str	r3, [r2, #16]
 8007af6:	e79c      	b.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007af8:	4b85      	ldr	r3, [pc, #532]	; (8007d10 <EE_Init+0x318>)
 8007afa:	69de      	ldr	r6, [r3, #28]
 8007afc:	b2b6      	uxth	r6, r6
 8007afe:	e79b      	b.n	8007a38 <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d157      	bne.n	8007bb4 <EE_Init+0x1bc>
 8007b04:	2401      	movs	r4, #1
	int16_t x =-1;
 8007b06:	2701      	movs	r7, #1
 8007b08:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b0a:	4d84      	ldr	r5, [pc, #528]	; (8007d1c <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b0c:	4b84      	ldr	r3, [pc, #528]	; (8007d20 <EE_Init+0x328>)
 8007b0e:	4698      	mov	r8, r3
 8007b10:	e005      	b.n	8007b1e <EE_Init+0x126>
						x =VarIdx;
 8007b12:	b227      	sxth	r7, r4
 8007b14:	e008      	b.n	8007b28 <EE_Init+0x130>
 8007b16:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007b18:	4b82      	ldr	r3, [pc, #520]	; (8007d24 <EE_Init+0x32c>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d018      	beq.n	8007b50 <EE_Init+0x158>
 8007b1e:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b20:	882b      	ldrh	r3, [r5, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	42b3      	cmp	r3, r6
 8007b26:	d0f4      	beq.n	8007b12 <EE_Init+0x11a>
					if(VarIdx != x){
 8007b28:	42bc      	cmp	r4, r7
 8007b2a:	d0f4      	beq.n	8007b16 <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b2c:	497c      	ldr	r1, [pc, #496]	; (8007d20 <EE_Init+0x328>)
 8007b2e:	0030      	movs	r0, r6
 8007b30:	f7ff fe26 	bl	8007780 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007b34:	2801      	cmp	r0, #1
 8007b36:	d0ee      	beq.n	8007b16 <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b38:	4643      	mov	r3, r8
 8007b3a:	8819      	ldrh	r1, [r3, #0]
 8007b3c:	0030      	movs	r0, r6
 8007b3e:	f7ff fdb3 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 8007b42:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b44:	4871      	ldr	r0, [pc, #452]	; (8007d0c <EE_Init+0x314>)
 8007b46:	f009 fe53 	bl	80117f0 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d0e3      	beq.n	8007b16 <EE_Init+0x11e>
 8007b4e:	e773      	b.n	8007a38 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007b50:	2200      	movs	r2, #0
 8007b52:	2300      	movs	r3, #0
 8007b54:	4969      	ldr	r1, [pc, #420]	; (8007cfc <EE_Init+0x304>)
 8007b56:	2001      	movs	r0, #1
 8007b58:	f009 fe78 	bl	801184c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b5c:	486b      	ldr	r0, [pc, #428]	; (8007d0c <EE_Init+0x314>)
 8007b5e:	f009 fe47 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d003      	beq.n	8007b6e <EE_Init+0x176>
					return pFlash.ErrorCode;
 8007b66:	4b6a      	ldr	r3, [pc, #424]	; (8007d10 <EE_Init+0x318>)
 8007b68:	69de      	ldr	r6, [r3, #28]
 8007b6a:	b2b6      	uxth	r6, r6
 8007b6c:	e764      	b.n	8007a38 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b6e:	4a6a      	ldr	r2, [pc, #424]	; (8007d18 <EE_Init+0x320>)
 8007b70:	6913      	ldr	r3, [r2, #16]
 8007b72:	2101      	movs	r1, #1
 8007b74:	438b      	bics	r3, r1
 8007b76:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007b78:	4861      	ldr	r0, [pc, #388]	; (8007d00 <EE_Init+0x308>)
 8007b7a:	f009 fedf 	bl	801193c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b7e:	4863      	ldr	r0, [pc, #396]	; (8007d0c <EE_Init+0x314>)
 8007b80:	f009 fe36 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d003      	beq.n	8007b90 <EE_Init+0x198>
					return pFlash.ErrorCode;
 8007b88:	4b61      	ldr	r3, [pc, #388]	; (8007d10 <EE_Init+0x318>)
 8007b8a:	69de      	ldr	r6, [r3, #28]
 8007b8c:	b2b6      	uxth	r6, r6
 8007b8e:	e753      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007b90:	4865      	ldr	r0, [pc, #404]	; (8007d28 <EE_Init+0x330>)
 8007b92:	f009 fed3 	bl	801193c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b96:	485d      	ldr	r0, [pc, #372]	; (8007d0c <EE_Init+0x314>)
 8007b98:	f009 fe2a 	bl	80117f0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d105      	bne.n	8007bac <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ba0:	4a5d      	ldr	r2, [pc, #372]	; (8007d18 <EE_Init+0x320>)
 8007ba2:	6913      	ldr	r3, [r2, #16]
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	438b      	bics	r3, r1
 8007ba8:	6113      	str	r3, [r2, #16]
 8007baa:	e742      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007bac:	4b58      	ldr	r3, [pc, #352]	; (8007d10 <EE_Init+0x318>)
 8007bae:	69de      	ldr	r6, [r3, #28]
 8007bb0:	b2b6      	uxth	r6, r6
 8007bb2:	e741      	b.n	8007a38 <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007bb4:	4b54      	ldr	r3, [pc, #336]	; (8007d08 <EE_Init+0x310>)
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d00b      	beq.n	8007bd2 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 8007bba:	f7ff feb9 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bbe:	4853      	ldr	r0, [pc, #332]	; (8007d0c <EE_Init+0x314>)
 8007bc0:	f009 fe16 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d100      	bne.n	8007bca <EE_Init+0x1d2>
 8007bc8:	e733      	b.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007bca:	4b51      	ldr	r3, [pc, #324]	; (8007d10 <EE_Init+0x318>)
 8007bcc:	69de      	ldr	r6, [r3, #28]
 8007bce:	b2b6      	uxth	r6, r6
 8007bd0:	e732      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bd2:	484b      	ldr	r0, [pc, #300]	; (8007d00 <EE_Init+0x308>)
 8007bd4:	f009 feb2 	bl	801193c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bd8:	484c      	ldr	r0, [pc, #304]	; (8007d0c <EE_Init+0x314>)
 8007bda:	f009 fe09 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d003      	beq.n	8007bea <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 8007be2:	4b4b      	ldr	r3, [pc, #300]	; (8007d10 <EE_Init+0x318>)
 8007be4:	69de      	ldr	r6, [r3, #28]
 8007be6:	b2b6      	uxth	r6, r6
 8007be8:	e726      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007bea:	484f      	ldr	r0, [pc, #316]	; (8007d28 <EE_Init+0x330>)
 8007bec:	f009 fea6 	bl	801193c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bf0:	4846      	ldr	r0, [pc, #280]	; (8007d0c <EE_Init+0x314>)
 8007bf2:	f009 fdfd 	bl	80117f0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d003      	beq.n	8007c02 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007bfa:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <EE_Init+0x318>)
 8007bfc:	69de      	ldr	r6, [r3, #28]
 8007bfe:	b2b6      	uxth	r6, r6
 8007c00:	e71a      	b.n	8007a38 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c02:	4a45      	ldr	r2, [pc, #276]	; (8007d18 <EE_Init+0x320>)
 8007c04:	6913      	ldr	r3, [r2, #16]
 8007c06:	2102      	movs	r1, #2
 8007c08:	438b      	bics	r3, r1
 8007c0a:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	493a      	ldr	r1, [pc, #232]	; (8007cfc <EE_Init+0x304>)
 8007c12:	2001      	movs	r0, #1
 8007c14:	f009 fe1a 	bl	801184c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c18:	483c      	ldr	r0, [pc, #240]	; (8007d0c <EE_Init+0x314>)
 8007c1a:	f009 fde9 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d003      	beq.n	8007c2a <EE_Init+0x232>
					return pFlash.ErrorCode;
 8007c22:	4b3b      	ldr	r3, [pc, #236]	; (8007d10 <EE_Init+0x318>)
 8007c24:	69de      	ldr	r6, [r3, #28]
 8007c26:	b2b6      	uxth	r6, r6
 8007c28:	e706      	b.n	8007a38 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c2a:	4a3b      	ldr	r2, [pc, #236]	; (8007d18 <EE_Init+0x320>)
 8007c2c:	6913      	ldr	r3, [r2, #16]
 8007c2e:	2101      	movs	r1, #1
 8007c30:	438b      	bics	r3, r1
 8007c32:	6113      	str	r3, [r2, #16]
 8007c34:	e6fd      	b.n	8007a32 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007c36:	2a00      	cmp	r2, #0
 8007c38:	d009      	beq.n	8007c4e <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007c3a:	4b33      	ldr	r3, [pc, #204]	; (8007d08 <EE_Init+0x310>)
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d010      	beq.n	8007c62 <EE_Init+0x26a>
 8007c40:	2401      	movs	r4, #1
	int16_t x =-1;
 8007c42:	2701      	movs	r7, #1
 8007c44:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007c46:	4d39      	ldr	r5, [pc, #228]	; (8007d2c <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007c48:	4b35      	ldr	r3, [pc, #212]	; (8007d20 <EE_Init+0x328>)
 8007c4a:	4698      	mov	r8, r3
 8007c4c:	e02d      	b.n	8007caa <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 8007c4e:	f7ff fe6f 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c52:	482e      	ldr	r0, [pc, #184]	; (8007d0c <EE_Init+0x314>)
 8007c54:	f009 fdcc 	bl	80117f0 <FLASH_WaitForLastOperation>
 8007c58:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 8007c5a:	2e00      	cmp	r6, #0
 8007c5c:	d100      	bne.n	8007c60 <EE_Init+0x268>
 8007c5e:	e6e8      	b.n	8007a32 <EE_Init+0x3a>
 8007c60:	e6ea      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c62:	4827      	ldr	r0, [pc, #156]	; (8007d00 <EE_Init+0x308>)
 8007c64:	f009 fe6a 	bl	801193c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c68:	4828      	ldr	r0, [pc, #160]	; (8007d0c <EE_Init+0x314>)
 8007c6a:	f009 fdc1 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d003      	beq.n	8007c7a <EE_Init+0x282>
					return pFlash.ErrorCode;
 8007c72:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <EE_Init+0x318>)
 8007c74:	69de      	ldr	r6, [r3, #28]
 8007c76:	b2b6      	uxth	r6, r6
 8007c78:	e6de      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c7a:	482b      	ldr	r0, [pc, #172]	; (8007d28 <EE_Init+0x330>)
 8007c7c:	f009 fe5e 	bl	801193c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c80:	4822      	ldr	r0, [pc, #136]	; (8007d0c <EE_Init+0x314>)
 8007c82:	f009 fdb5 	bl	80117f0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d105      	bne.n	8007c96 <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c8a:	4a23      	ldr	r2, [pc, #140]	; (8007d18 <EE_Init+0x320>)
 8007c8c:	6913      	ldr	r3, [r2, #16]
 8007c8e:	2102      	movs	r1, #2
 8007c90:	438b      	bics	r3, r1
 8007c92:	6113      	str	r3, [r2, #16]
 8007c94:	e6cd      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007c96:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <EE_Init+0x318>)
 8007c98:	69de      	ldr	r6, [r3, #28]
 8007c9a:	b2b6      	uxth	r6, r6
 8007c9c:	e6cc      	b.n	8007a38 <EE_Init+0x40>
						x =VarIdx;
 8007c9e:	b227      	sxth	r7, r4
 8007ca0:	e008      	b.n	8007cb4 <EE_Init+0x2bc>
 8007ca2:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007ca4:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <EE_Init+0x32c>)
 8007ca6:	429c      	cmp	r4, r3
 8007ca8:	d018      	beq.n	8007cdc <EE_Init+0x2e4>
 8007caa:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007cac:	882b      	ldrh	r3, [r5, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	42b3      	cmp	r3, r6
 8007cb2:	d0f4      	beq.n	8007c9e <EE_Init+0x2a6>
					if(VarIdx != x){
 8007cb4:	42bc      	cmp	r4, r7
 8007cb6:	d0f4      	beq.n	8007ca2 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007cb8:	4919      	ldr	r1, [pc, #100]	; (8007d20 <EE_Init+0x328>)
 8007cba:	0030      	movs	r0, r6
 8007cbc:	f7ff fd60 	bl	8007780 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007cc0:	2801      	cmp	r0, #1
 8007cc2:	d0ee      	beq.n	8007ca2 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007cc4:	4643      	mov	r3, r8
 8007cc6:	8819      	ldrh	r1, [r3, #0]
 8007cc8:	0030      	movs	r0, r6
 8007cca:	f7ff fced 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 8007cce:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cd0:	480e      	ldr	r0, [pc, #56]	; (8007d0c <EE_Init+0x314>)
 8007cd2:	f009 fd8d 	bl	80117f0 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d0e3      	beq.n	8007ca2 <EE_Init+0x2aa>
 8007cda:	e6ad      	b.n	8007a38 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4907      	ldr	r1, [pc, #28]	; (8007d00 <EE_Init+0x308>)
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	f009 fdb2 	bl	801184c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ce8:	4808      	ldr	r0, [pc, #32]	; (8007d0c <EE_Init+0x314>)
 8007cea:	f009 fd81 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d01e      	beq.n	8007d30 <EE_Init+0x338>
					return pFlash.ErrorCode;
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <EE_Init+0x318>)
 8007cf4:	69de      	ldr	r6, [r3, #28]
 8007cf6:	b2b6      	uxth	r6, r6
 8007cf8:	e69e      	b.n	8007a38 <EE_Init+0x40>
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	0801e000 	.word	0x0801e000
 8007d00:	0801f000 	.word	0x0801f000
 8007d04:	0000eeee 	.word	0x0000eeee
 8007d08:	0000ffff 	.word	0x0000ffff
 8007d0c:	0000c350 	.word	0x0000c350
 8007d10:	20006f90 	.word	0x20006f90
 8007d14:	0801e800 	.word	0x0801e800
 8007d18:	40022000 	.word	0x40022000
 8007d1c:	0801e006 	.word	0x0801e006
 8007d20:	200014d8 	.word	0x200014d8
 8007d24:	00000401 	.word	0x00000401
 8007d28:	0801f800 	.word	0x0801f800
 8007d2c:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d30:	4a11      	ldr	r2, [pc, #68]	; (8007d78 <EE_Init+0x380>)
 8007d32:	6913      	ldr	r3, [r2, #16]
 8007d34:	2101      	movs	r1, #1
 8007d36:	438b      	bics	r3, r1
 8007d38:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d3a:	4810      	ldr	r0, [pc, #64]	; (8007d7c <EE_Init+0x384>)
 8007d3c:	f009 fdfe 	bl	801193c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d40:	480f      	ldr	r0, [pc, #60]	; (8007d80 <EE_Init+0x388>)
 8007d42:	f009 fd55 	bl	80117f0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d003      	beq.n	8007d52 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <EE_Init+0x38c>)
 8007d4c:	69de      	ldr	r6, [r3, #28]
 8007d4e:	b2b6      	uxth	r6, r6
 8007d50:	e672      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d52:	480d      	ldr	r0, [pc, #52]	; (8007d88 <EE_Init+0x390>)
 8007d54:	f009 fdf2 	bl	801193c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d58:	4809      	ldr	r0, [pc, #36]	; (8007d80 <EE_Init+0x388>)
 8007d5a:	f009 fd49 	bl	80117f0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d105      	bne.n	8007d6e <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d62:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <EE_Init+0x380>)
 8007d64:	6913      	ldr	r3, [r2, #16]
 8007d66:	2102      	movs	r1, #2
 8007d68:	438b      	bics	r3, r1
 8007d6a:	6113      	str	r3, [r2, #16]
 8007d6c:	e661      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <EE_Init+0x38c>)
 8007d70:	69de      	ldr	r6, [r3, #28]
 8007d72:	b2b6      	uxth	r6, r6
 8007d74:	e660      	b.n	8007a38 <EE_Init+0x40>
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	40022000 	.word	0x40022000
 8007d7c:	0801e000 	.word	0x0801e000
 8007d80:	0000c350 	.word	0x0000c350
 8007d84:	20006f90 	.word	0x20006f90
 8007d88:	0801e800 	.word	0x0801e800

08007d8c <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 8007d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d8e:	46c6      	mov	lr, r8
 8007d90:	b500      	push	{lr}
	
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
 8007d92:	4c2b      	ldr	r4, [pc, #172]	; (8007e40 <StartDefaultTask+0xb4>)
				indMode =IND_OFF;
				break;
				
			case IND_TOPOLOGY:
				RTOS_IND_blink(100);
				indMode =IND_OFF;
 8007d94:	46a0      	mov	r8, r4
				break;
				
			case IND_SHORT_BLINK:
				RTOS_IND_blink(30);
				indMode =IND_OFF;
 8007d96:	0027      	movs	r7, r4
 8007d98:	e020      	b.n	8007ddc <StartDefaultTask+0x50>
				RTOS_IND_blink(200);
 8007d9a:	2680      	movs	r6, #128	; 0x80
 8007d9c:	0136      	lsls	r6, r6, #4
 8007d9e:	2590      	movs	r5, #144	; 0x90
 8007da0:	05ed      	lsls	r5, r5, #23
 8007da2:	2201      	movs	r2, #1
 8007da4:	0031      	movs	r1, r6
 8007da6:	0028      	movs	r0, r5
 8007da8:	f009 ffae 	bl	8011d08 <HAL_GPIO_WritePin>
 8007dac:	20c8      	movs	r0, #200	; 0xc8
 8007dae:	f006 f9d6 	bl	800e15e <osDelay>
 8007db2:	2200      	movs	r2, #0
 8007db4:	0031      	movs	r1, r6
 8007db6:	0028      	movs	r0, r5
 8007db8:	f009 ffa6 	bl	8011d08 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007dbc:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <StartDefaultTask+0xb4>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	701a      	strb	r2, [r3, #0]
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007dc2:	f000 ff07 	bl	8008bd4 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007dc6:	f7fd fb61 	bl	800548c <ExecuteSnippet>

		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 8007dca:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <StartDefaultTask+0xb8>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <StartDefaultTask+0x4c>
			delayButtonStateReset = false;
 8007dd2:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <StartDefaultTask+0xbc>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
		
		taskYIELD();
 8007dd8:	f008 f9ae 	bl	8010138 <vPortYield>
		switch(indMode){
 8007ddc:	7823      	ldrb	r3, [r4, #0]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d004      	beq.n	8007dec <StartDefaultTask+0x60>
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d017      	beq.n	8007e16 <StartDefaultTask+0x8a>
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d1eb      	bne.n	8007dc2 <StartDefaultTask+0x36>
 8007dea:	e7d6      	b.n	8007d9a <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 8007dec:	2680      	movs	r6, #128	; 0x80
 8007dee:	0136      	lsls	r6, r6, #4
 8007df0:	2590      	movs	r5, #144	; 0x90
 8007df2:	05ed      	lsls	r5, r5, #23
 8007df4:	2201      	movs	r2, #1
 8007df6:	0031      	movs	r1, r6
 8007df8:	0028      	movs	r0, r5
 8007dfa:	f009 ff85 	bl	8011d08 <HAL_GPIO_WritePin>
 8007dfe:	2064      	movs	r0, #100	; 0x64
 8007e00:	f006 f9ad 	bl	800e15e <osDelay>
 8007e04:	2200      	movs	r2, #0
 8007e06:	0031      	movs	r1, r6
 8007e08:	0028      	movs	r0, r5
 8007e0a:	f009 ff7d 	bl	8011d08 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4642      	mov	r2, r8
 8007e12:	7013      	strb	r3, [r2, #0]
				break;
 8007e14:	e7d5      	b.n	8007dc2 <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 8007e16:	2680      	movs	r6, #128	; 0x80
 8007e18:	0136      	lsls	r6, r6, #4
 8007e1a:	2590      	movs	r5, #144	; 0x90
 8007e1c:	05ed      	lsls	r5, r5, #23
 8007e1e:	2201      	movs	r2, #1
 8007e20:	0031      	movs	r1, r6
 8007e22:	0028      	movs	r0, r5
 8007e24:	f009 ff70 	bl	8011d08 <HAL_GPIO_WritePin>
 8007e28:	201e      	movs	r0, #30
 8007e2a:	f006 f998 	bl	800e15e <osDelay>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	0031      	movs	r1, r6
 8007e32:	0028      	movs	r0, r5
 8007e34:	f009 ff68 	bl	8011d08 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	703b      	strb	r3, [r7, #0]
				break;
 8007e3c:	e7c1      	b.n	8007dc2 <StartDefaultTask+0x36>
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	20000ef4 	.word	0x20000ef4
 8007e44:	20001568 	.word	0x20001568
 8007e48:	20001567 	.word	0x20001567

08007e4c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	b090      	sub	sp, #64	; 0x40
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007e50:	25a0      	movs	r5, #160	; 0xa0
 8007e52:	006d      	lsls	r5, r5, #1
 8007e54:	2400      	movs	r4, #0
 8007e56:	9403      	str	r4, [sp, #12]
 8007e58:	9402      	str	r4, [sp, #8]
 8007e5a:	4b5e      	ldr	r3, [pc, #376]	; (8007fd4 <MX_FREERTOS_Init+0x188>)
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	2603      	movs	r6, #3
 8007e60:	9600      	str	r6, [sp, #0]
 8007e62:	2300      	movs	r3, #0
 8007e64:	002a      	movs	r2, r5
 8007e66:	495c      	ldr	r1, [pc, #368]	; (8007fd8 <MX_FREERTOS_Init+0x18c>)
 8007e68:	485c      	ldr	r0, [pc, #368]	; (8007fdc <MX_FREERTOS_Init+0x190>)
 8007e6a:	f007 f83b 	bl	800eee4 <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007e6e:	9403      	str	r4, [sp, #12]
 8007e70:	9402      	str	r4, [sp, #8]
 8007e72:	4b5b      	ldr	r3, [pc, #364]	; (8007fe0 <MX_FREERTOS_Init+0x194>)
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	9600      	str	r6, [sp, #0]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	002a      	movs	r2, r5
 8007e7c:	4959      	ldr	r1, [pc, #356]	; (8007fe4 <MX_FREERTOS_Init+0x198>)
 8007e7e:	485a      	ldr	r0, [pc, #360]	; (8007fe8 <MX_FREERTOS_Init+0x19c>)
 8007e80:	f007 f830 	bl	800eee4 <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007e84:	9403      	str	r4, [sp, #12]
 8007e86:	9402      	str	r4, [sp, #8]
 8007e88:	4b58      	ldr	r3, [pc, #352]	; (8007fec <MX_FREERTOS_Init+0x1a0>)
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	9600      	str	r6, [sp, #0]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	002a      	movs	r2, r5
 8007e92:	4957      	ldr	r1, [pc, #348]	; (8007ff0 <MX_FREERTOS_Init+0x1a4>)
 8007e94:	4857      	ldr	r0, [pc, #348]	; (8007ff4 <MX_FREERTOS_Init+0x1a8>)
 8007e96:	f007 f825 	bl	800eee4 <xTaskGenericCreate>
	vRegisterCLICommands();
 8007e9a:	f7ff fa6d 	bl	8007378 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007e9e:	9403      	str	r4, [sp, #12]
 8007ea0:	9402      	str	r4, [sp, #8]
 8007ea2:	4b55      	ldr	r3, [pc, #340]	; (8007ff8 <MX_FREERTOS_Init+0x1ac>)
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	9600      	str	r6, [sp, #0]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	002a      	movs	r2, r5
 8007eac:	4953      	ldr	r1, [pc, #332]	; (8007ffc <MX_FREERTOS_Init+0x1b0>)
 8007eae:	4854      	ldr	r0, [pc, #336]	; (8008000 <MX_FREERTOS_Init+0x1b4>)
 8007eb0:	f007 f818 	bl	800eee4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",configMINIMAL_STACK_SIZE,(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007eb4:	4d53      	ldr	r5, [pc, #332]	; (8008004 <MX_FREERTOS_Init+0x1b8>)
 8007eb6:	9403      	str	r4, [sp, #12]
 8007eb8:	9402      	str	r4, [sp, #8]
 8007eba:	4b53      	ldr	r3, [pc, #332]	; (8008008 <MX_FREERTOS_Init+0x1bc>)
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	3601      	adds	r6, #1
 8007ec0:	9600      	str	r6, [sp, #0]
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	22a0      	movs	r2, #160	; 0xa0
 8007ec6:	4951      	ldr	r1, [pc, #324]	; (800800c <MX_FREERTOS_Init+0x1c0>)
 8007ec8:	0028      	movs	r0, r5
 8007eca:	f007 f80b 	bl	800eee4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",configMINIMAL_STACK_SIZE,(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007ece:	9403      	str	r4, [sp, #12]
 8007ed0:	9402      	str	r4, [sp, #8]
 8007ed2:	4b4f      	ldr	r3, [pc, #316]	; (8008010 <MX_FREERTOS_Init+0x1c4>)
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	9600      	str	r6, [sp, #0]
 8007ed8:	2302      	movs	r3, #2
 8007eda:	22a0      	movs	r2, #160	; 0xa0
 8007edc:	494d      	ldr	r1, [pc, #308]	; (8008014 <MX_FREERTOS_Init+0x1c8>)
 8007ede:	0028      	movs	r0, r5
 8007ee0:	f007 f800 	bl	800eee4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",configMINIMAL_STACK_SIZE,(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007ee4:	9403      	str	r4, [sp, #12]
 8007ee6:	9402      	str	r4, [sp, #8]
 8007ee8:	4b4b      	ldr	r3, [pc, #300]	; (8008018 <MX_FREERTOS_Init+0x1cc>)
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	9600      	str	r6, [sp, #0]
 8007eee:	2303      	movs	r3, #3
 8007ef0:	22a0      	movs	r2, #160	; 0xa0
 8007ef2:	494a      	ldr	r1, [pc, #296]	; (800801c <MX_FREERTOS_Init+0x1d0>)
 8007ef4:	0028      	movs	r0, r5
 8007ef6:	f006 fff5 	bl	800eee4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",configMINIMAL_STACK_SIZE,(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007efa:	9403      	str	r4, [sp, #12]
 8007efc:	9402      	str	r4, [sp, #8]
 8007efe:	4b48      	ldr	r3, [pc, #288]	; (8008020 <MX_FREERTOS_Init+0x1d4>)
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	9600      	str	r6, [sp, #0]
 8007f04:	2304      	movs	r3, #4
 8007f06:	22a0      	movs	r2, #160	; 0xa0
 8007f08:	4946      	ldr	r1, [pc, #280]	; (8008024 <MX_FREERTOS_Init+0x1d8>)
 8007f0a:	0028      	movs	r0, r5
 8007f0c:	f006 ffea 	bl	800eee4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",configMINIMAL_STACK_SIZE,(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007f10:	9403      	str	r4, [sp, #12]
 8007f12:	9402      	str	r4, [sp, #8]
 8007f14:	4b44      	ldr	r3, [pc, #272]	; (8008028 <MX_FREERTOS_Init+0x1dc>)
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	9600      	str	r6, [sp, #0]
 8007f1a:	2305      	movs	r3, #5
 8007f1c:	22a0      	movs	r2, #160	; 0xa0
 8007f1e:	4943      	ldr	r1, [pc, #268]	; (800802c <MX_FREERTOS_Init+0x1e0>)
 8007f20:	0028      	movs	r0, r5
 8007f22:	f006 ffdf 	bl	800eee4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",configMINIMAL_STACK_SIZE,(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 8007f26:	9403      	str	r4, [sp, #12]
 8007f28:	9402      	str	r4, [sp, #8]
 8007f2a:	4b41      	ldr	r3, [pc, #260]	; (8008030 <MX_FREERTOS_Init+0x1e4>)
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	9600      	str	r6, [sp, #0]
 8007f30:	2306      	movs	r3, #6
 8007f32:	22a0      	movs	r2, #160	; 0xa0
 8007f34:	493f      	ldr	r1, [pc, #252]	; (8008034 <MX_FREERTOS_Init+0x1e8>)
 8007f36:	0028      	movs	r0, r5
 8007f38:	f006 ffd4 	bl	800eee4 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1);
 8007f3c:	940f      	str	r4, [sp, #60]	; 0x3c
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007f3e:	2101      	movs	r1, #1
 8007f40:	a80f      	add	r0, sp, #60	; 0x3c
 8007f42:	f006 f914 	bl	800e16e <osSemaphoreCreate>
 8007f46:	4e3c      	ldr	r6, [pc, #240]	; (8008038 <MX_FREERTOS_Init+0x1ec>)
 8007f48:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007f4a:	940e      	str	r4, [sp, #56]	; 0x38
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	a80e      	add	r0, sp, #56	; 0x38
 8007f50:	f006 f90d 	bl	800e16e <osSemaphoreCreate>
 8007f54:	4d39      	ldr	r5, [pc, #228]	; (800803c <MX_FREERTOS_Init+0x1f0>)
 8007f56:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3);
 8007f58:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	a80d      	add	r0, sp, #52	; 0x34
 8007f5e:	f006 f906 	bl	800e16e <osSemaphoreCreate>
 8007f62:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8007f64:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007f66:	2101      	movs	r1, #1
 8007f68:	a80c      	add	r0, sp, #48	; 0x30
 8007f6a:	f006 f900 	bl	800e16e <osSemaphoreCreate>
 8007f6e:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5);
 8007f70:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007f72:	2101      	movs	r1, #1
 8007f74:	a80b      	add	r0, sp, #44	; 0x2c
 8007f76:	f006 f8fa 	bl	800e16e <osSemaphoreCreate>
 8007f7a:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007f7c:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007f7e:	2101      	movs	r1, #1
 8007f80:	a80a      	add	r0, sp, #40	; 0x28
 8007f82:	f006 f8f4 	bl	800e16e <osSemaphoreCreate>
 8007f86:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7);
 8007f88:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	a809      	add	r0, sp, #36	; 0x24
 8007f8e:	f006 f8ee 	bl	800e16e <osSemaphoreCreate>
 8007f92:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 8007f94:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007f96:	2101      	movs	r1, #1
 8007f98:	a808      	add	r0, sp, #32
 8007f9a:	f006 f8e8 	bl	800e16e <osSemaphoreCreate>
 8007f9e:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9);
 8007fa0:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	a807      	add	r0, sp, #28
 8007fa6:	f006 f8e2 	bl	800e16e <osSemaphoreCreate>
 8007faa:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 8007fac:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007fae:	2101      	movs	r1, #1
 8007fb0:	a806      	add	r0, sp, #24
 8007fb2:	f006 f8dc 	bl	800e16e <osSemaphoreCreate>
 8007fb6:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11);
 8007fb8:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007fba:	2101      	movs	r1, #1
 8007fbc:	a805      	add	r0, sp, #20
 8007fbe:	f006 f8d6 	bl	800e16e <osSemaphoreCreate>
 8007fc2:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12);
 8007fc4:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	a804      	add	r0, sp, #16
 8007fca:	f006 f8d0 	bl	800e16e <osSemaphoreCreate>
 8007fce:	61a8      	str	r0, [r5, #24]
}
 8007fd0:	b010      	add	sp, #64	; 0x40
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	200014fc 	.word	0x200014fc
 8007fd8:	0801af14 	.word	0x0801af14
 8007fdc:	08007d8d 	.word	0x08007d8d
 8007fe0:	200014dc 	.word	0x200014dc
 8007fe4:	0801af20 	.word	0x0801af20
 8007fe8:	080098ad 	.word	0x080098ad
 8007fec:	200014f8 	.word	0x200014f8
 8007ff0:	0801af2c 	.word	0x0801af2c
 8007ff4:	08013827 	.word	0x08013827
 8007ff8:	20001504 	.word	0x20001504
 8007ffc:	0801af38 	.word	0x0801af38
 8008000:	0800510d 	.word	0x0800510d
 8008004:	08009c4d 	.word	0x08009c4d
 8008008:	200014e0 	.word	0x200014e0
 800800c:	0801af40 	.word	0x0801af40
 8008010:	200014e4 	.word	0x200014e4
 8008014:	0801af4c 	.word	0x0801af4c
 8008018:	200014e8 	.word	0x200014e8
 800801c:	0801af58 	.word	0x0801af58
 8008020:	200014ec 	.word	0x200014ec
 8008024:	0801af64 	.word	0x0801af64
 8008028:	200014f0 	.word	0x200014f0
 800802c:	0801af70 	.word	0x0801af70
 8008030:	200014f4 	.word	0x200014f4
 8008034:	0801af7c 	.word	0x0801af7c
 8008038:	20006b3c 	.word	0x20006b3c
 800803c:	20006b20 	.word	0x20006b20

08008040 <vMainConfigureTimerForRunTimeStats>:
	
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
 8008040:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008042:	4b04      	ldr	r3, [pc, #16]	; (8008054 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	4904      	ldr	r1, [pc, #16]	; (8008058 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008048:	f7f8 f882 	bl	8000150 <__udivsi3>
 800804c:	4b03      	ldr	r3, [pc, #12]	; (800805c <vMainConfigureTimerForRunTimeStats+0x1c>)
 800804e:	6018      	str	r0, [r3, #0]
}
 8008050:	bd10      	pop	{r4, pc}
 8008052:	46c0      	nop			; (mov r8, r8)
 8008054:	20000090 	.word	0x20000090
 8008058:	00002710 	.word	0x00002710
 800805c:	20001500 	.word	0x20001500

08008060 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8008060:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008062:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <ulMainGetRunTimeCounterValue+0x40>)
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	21fa      	movs	r1, #250	; 0xfa
 8008068:	0089      	lsls	r1, r1, #2
 800806a:	f7f8 f871 	bl	8000150 <__udivsi3>
 800806e:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008070:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <ulMainGetRunTimeCounterValue+0x44>)
 8008072:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8008074:	f007 f8c8 	bl	800f208 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <ulMainGetRunTimeCounterValue+0x48>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	015b      	lsls	r3, r3, #5
 800807e:	d50d      	bpl.n	800809c <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8008080:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008082:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <ulMainGetRunTimeCounterValue+0x44>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8008088:	0084      	lsls	r4, r0, #2
 800808a:	1824      	adds	r4, r4, r0
 800808c:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 800808e:	4b07      	ldr	r3, [pc, #28]	; (80080ac <ulMainGetRunTimeCounterValue+0x4c>)
 8008090:	6819      	ldr	r1, [r3, #0]
 8008092:	0028      	movs	r0, r5
 8008094:	f7f8 f85c 	bl	8000150 <__udivsi3>
 8008098:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 800809a:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800809c:	1b2d      	subs	r5, r5, r4
 800809e:	e7f3      	b.n	8008088 <ulMainGetRunTimeCounterValue+0x28>
 80080a0:	20000090 	.word	0x20000090
 80080a4:	e000e018 	.word	0xe000e018
 80080a8:	e000ed04 	.word	0xe000ed04
 80080ac:	20001500 	.word	0x20001500

080080b0 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 80080b0:	4770      	bx	lr
	...

080080b4 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port){
 80080b4:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080b6:	00c2      	lsls	r2, r0, #3
 80080b8:	1812      	adds	r2, r2, r0
 80080ba:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <CheckForTimedButtonPress+0x74>)
 80080bc:	189b      	adds	r3, r3, r2
 80080be:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(pressCounter[port] == t1){
 80080c0:	0082      	lsls	r2, r0, #2
 80080c2:	4b1a      	ldr	r3, [pc, #104]	; (800812c <CheckForTimedButtonPress+0x78>)
 80080c4:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 80080c6:	0163      	lsls	r3, r4, #5
 80080c8:	1b1b      	subs	r3, r3, r4
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	191b      	adds	r3, r3, r4
 80080ce:	00db      	lsls	r3, r3, #3
	if(pressCounter[port] == t1){
 80080d0:	4299      	cmp	r1, r3
 80080d2:	d01c      	beq.n	800810e <CheckForTimedButtonPress+0x5a>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080d4:	00c2      	lsls	r2, r0, #3
 80080d6:	1812      	adds	r2, r2, r0
 80080d8:	4b13      	ldr	r3, [pc, #76]	; (8008128 <CheckForTimedButtonPress+0x74>)
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	78dc      	ldrb	r4, [r3, #3]
	t2 *=1000;
 80080de:	0163      	lsls	r3, r4, #5
 80080e0:	1b1b      	subs	r3, r3, r4
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	191b      	adds	r3, r3, r4
 80080e6:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X1_SEC;
	}
	else if(pressCounter[port] == t2){
 80080e8:	4299      	cmp	r1, r3
 80080ea:	d017      	beq.n	800811c <CheckForTimedButtonPress+0x68>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080ec:	00c2      	lsls	r2, r0, #3
 80080ee:	1812      	adds	r2, r2, r0
 80080f0:	4b0d      	ldr	r3, [pc, #52]	; (8008128 <CheckForTimedButtonPress+0x74>)
 80080f2:	189b      	adds	r3, r3, r2
 80080f4:	791c      	ldrb	r4, [r3, #4]
	t3 *=1000;
 80080f6:	0163      	lsls	r3, r4, #5
 80080f8:	1b1b      	subs	r3, r3, r4
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	191b      	adds	r3, r3, r4
 80080fe:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X2_SEC;
	}
	else if(pressCounter[port] == t3){
 8008100:	4299      	cmp	r1, r3
 8008102:	d109      	bne.n	8008118 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X2_SEC;
 8008104:	0010      	movs	r0, r2
 8008106:	4b08      	ldr	r3, [pc, #32]	; (8008128 <CheckForTimedButtonPress+0x74>)
 8008108:	220a      	movs	r2, #10
 800810a:	54c2      	strb	r2, [r0, r3]
 800810c:	e004      	b.n	8008118 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X1_SEC;
 800810e:	00c3      	lsls	r3, r0, #3
 8008110:	1818      	adds	r0, r3, r0
 8008112:	4b05      	ldr	r3, [pc, #20]	; (8008128 <CheckForTimedButtonPress+0x74>)
 8008114:	2209      	movs	r2, #9
 8008116:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008118:	2000      	movs	r0, #0
 800811a:	bd10      	pop	{r4, pc}
		button[port].state =PRESSED_FOR_X2_SEC;
 800811c:	0010      	movs	r0, r2
 800811e:	4b02      	ldr	r3, [pc, #8]	; (8008128 <CheckForTimedButtonPress+0x74>)
 8008120:	220a      	movs	r2, #10
 8008122:	54c2      	strb	r2, [r0, r3]
 8008124:	e7f8      	b.n	8008118 <CheckForTimedButtonPress+0x64>
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	2000151c 	.word	0x2000151c
 800812c:	20001570 	.word	0x20001570

08008130 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port){
 8008130:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008132:	00c2      	lsls	r2, r0, #3
 8008134:	1812      	adds	r2, r2, r0
 8008136:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008138:	189b      	adds	r3, r3, r2
 800813a:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(releaseCounter[port] == t1){
 800813c:	0082      	lsls	r2, r0, #2
 800813e:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <CheckForTimedButtonRelease+0x78>)
 8008140:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 8008142:	0163      	lsls	r3, r4, #5
 8008144:	1b1b      	subs	r3, r3, r4
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	191b      	adds	r3, r3, r4
 800814a:	00db      	lsls	r3, r3, #3
	if(releaseCounter[port] == t1){
 800814c:	4299      	cmp	r1, r3
 800814e:	d01c      	beq.n	800818a <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008150:	00c2      	lsls	r2, r0, #3
 8008152:	1812      	adds	r2, r2, r0
 8008154:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008156:	189b      	adds	r3, r3, r2
 8008158:	799c      	ldrb	r4, [r3, #6]
	t2 *=1000;
 800815a:	0163      	lsls	r3, r4, #5
 800815c:	1b1b      	subs	r3, r3, r4
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	191b      	adds	r3, r3, r4
 8008162:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y1_SEC;
	}
	else if(releaseCounter[port] == t2){
 8008164:	4299      	cmp	r1, r3
 8008166:	d017      	beq.n	8008198 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008168:	00c2      	lsls	r2, r0, #3
 800816a:	1812      	adds	r2, r2, r0
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 800816e:	189b      	adds	r3, r3, r2
 8008170:	79dc      	ldrb	r4, [r3, #7]
	t3 *=1000;
 8008172:	0163      	lsls	r3, r4, #5
 8008174:	1b1b      	subs	r3, r3, r4
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	191b      	adds	r3, r3, r4
 800817a:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y2_SEC;
	}
	else if(releaseCounter[port] == t3){
 800817c:	4299      	cmp	r1, r3
 800817e:	d109      	bne.n	8008194 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008180:	0010      	movs	r0, r2
 8008182:	4b08      	ldr	r3, [pc, #32]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008184:	220d      	movs	r2, #13
 8008186:	54c2      	strb	r2, [r0, r3]
 8008188:	e004      	b.n	8008194 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y1_SEC;
 800818a:	00c3      	lsls	r3, r0, #3
 800818c:	1818      	adds	r0, r3, r0
 800818e:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008190:	220c      	movs	r2, #12
 8008192:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008194:	2000      	movs	r0, #0
 8008196:	bd10      	pop	{r4, pc}
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008198:	0010      	movs	r0, r2
 800819a:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 800819c:	220d      	movs	r2, #13
 800819e:	54c2      	strb	r2, [r0, r3]
 80081a0:	e7f8      	b.n	8008194 <CheckForTimedButtonRelease+0x64>
 80081a2:	46c0      	nop			; (mov r8, r8)
 80081a4:	2000151c 	.word	0x2000151c
 80081a8:	2000158c 	.word	0x2000158c

080081ac <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 80081ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ae:	b08d      	sub	sp, #52	; 0x34
 80081b0:	0006      	movs	r6, r0
 80081b2:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 80081b4:	4b41      	ldr	r3, [pc, #260]	; (80082bc <AddPortButton+0x110>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d157      	bne.n	800826c <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 80081bc:	4b40      	ldr	r3, [pc, #256]	; (80082c0 <AddPortButton+0x114>)
 80081be:	2204      	movs	r2, #4
 80081c0:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if(BOS_initialized){
 80081c2:	4b3e      	ldr	r3, [pc, #248]	; (80082bc <AddPortButton+0x110>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d15a      	bne.n	8008280 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 80081ca:	2512      	movs	r5, #18
 80081cc:	446d      	add	r5, sp
 80081ce:	af04      	add	r7, sp, #16
 80081d0:	9700      	str	r7, [sp, #0]
 80081d2:	ab05      	add	r3, sp, #20
 80081d4:	002a      	movs	r2, r5
 80081d6:	a906      	add	r1, sp, #24
 80081d8:	0020      	movs	r0, r4
 80081da:	f005 f8f3 	bl	800d3c4 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 80081de:	882b      	ldrh	r3, [r5, #0]
 80081e0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081e2:	2301      	movs	r3, #1
 80081e4:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e6:	2500      	movs	r5, #0
 80081e8:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80081ea:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 80081ec:	a907      	add	r1, sp, #28
 80081ee:	9806      	ldr	r0, [sp, #24]
 80081f0:	f009 fc16 	bl	8011a20 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 80081f4:	883b      	ldrh	r3, [r7, #0]
 80081f6:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081f8:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80081fa:	2302      	movs	r3, #2
 80081fc:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 80081fe:	a907      	add	r1, sp, #28
 8008200:	9805      	ldr	r0, [sp, #20]
 8008202:	f009 fc0d 	bl	8011a20 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 8008206:	00e2      	lsls	r2, r4, #3
 8008208:	1912      	adds	r2, r2, r4
 800820a:	4b2e      	ldr	r3, [pc, #184]	; (80082c4 <AddPortButton+0x118>)
 800820c:	189b      	adds	r3, r3, r2
 800820e:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008210:	0025      	movs	r5, r4
 8008212:	353a      	adds	r5, #58	; 0x3a
 8008214:	00ad      	lsls	r5, r5, #2
 8008216:	210e      	movs	r1, #14
 8008218:	4469      	add	r1, sp
 800821a:	0028      	movs	r0, r5
 800821c:	f7ff fab0 	bl	8007780 <EE_ReadVariable>
	if(!res)											// This variable exists
 8008220:	2800      	cmp	r0, #0
 8008222:	d133      	bne.n	800828c <AddPortButton+0xe0>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 8008224:	230e      	movs	r3, #14
 8008226:	446b      	add	r3, sp
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	0a1b      	lsrs	r3, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 800822c:	091a      	lsrs	r2, r3, #4
 800822e:	42a2      	cmp	r2, r4
 8008230:	d103      	bne.n	800823a <AddPortButton+0x8e>
 8008232:	220f      	movs	r2, #15
 8008234:	4013      	ands	r3, r2
 8008236:	42b3      	cmp	r3, r6
 8008238:	d015      	beq.n	8008266 <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 800823a:	0324      	lsls	r4, r4, #12
 800823c:	0231      	lsls	r1, r6, #8
 800823e:	4321      	orrs	r1, r4
 8008240:	b289      	uxth	r1, r1
 8008242:	230e      	movs	r3, #14
 8008244:	446b      	add	r3, sp
 8008246:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008248:	0028      	movs	r0, r5
 800824a:	f7ff fac9 	bl	80077e0 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 800824e:	1c68      	adds	r0, r5, #1
 8008250:	2100      	movs	r1, #0
 8008252:	f7ff fac5 	bl	80077e0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 8008256:	1ca8      	adds	r0, r5, #2
 8008258:	2100      	movs	r1, #0
 800825a:	f7ff fac1 	bl	80077e0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 800825e:	1ce8      	adds	r0, r5, #3
 8008260:	2100      	movs	r1, #0
 8008262:	f7ff fabd 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	return result;
}
 8008266:	2000      	movs	r0, #0
 8008268:	b00d      	add	sp, #52	; 0x34
 800826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800826c:	008d      	lsls	r5, r1, #2
 800826e:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <AddPortButton+0x11c>)
 8008270:	58e8      	ldr	r0, [r5, r3]
 8008272:	f005 ffbf 	bl	800e1f4 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8008276:	4b15      	ldr	r3, [pc, #84]	; (80082cc <AddPortButton+0x120>)
 8008278:	58e8      	ldr	r0, [r5, r3]
 800827a:	f005 ffbb 	bl	800e1f4 <osSemaphoreRelease>
 800827e:	e79d      	b.n	80081bc <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008280:	0020      	movs	r0, r4
 8008282:	f005 fe1d 	bl	800dec0 <GetUart>
 8008286:	f00a fd1c 	bl	8012cc2 <HAL_UART_DeInit>
 800828a:	e79e      	b.n	80081ca <AddPortButton+0x1e>
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 800828c:	0324      	lsls	r4, r4, #12
 800828e:	0231      	lsls	r1, r6, #8
 8008290:	4321      	orrs	r1, r4
 8008292:	b289      	uxth	r1, r1
 8008294:	230e      	movs	r3, #14
 8008296:	446b      	add	r3, sp
 8008298:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 800829a:	0028      	movs	r0, r5
 800829c:	f7ff faa0 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80082a0:	1c68      	adds	r0, r5, #1
 80082a2:	2100      	movs	r1, #0
 80082a4:	f7ff fa9c 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80082a8:	1ca8      	adds	r0, r5, #2
 80082aa:	2100      	movs	r1, #0
 80082ac:	f7ff fa98 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80082b0:	1ce8      	adds	r0, r5, #3
 80082b2:	2100      	movs	r1, #0
 80082b4:	f7ff fa94 	bl	80077e0 <EE_WriteVariable>
 80082b8:	e7d5      	b.n	8008266 <AddPortButton+0xba>
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	20000a75 	.word	0x20000a75
 80082c0:	200010f8 	.word	0x200010f8
 80082c4:	2000151c 	.word	0x2000151c
 80082c8:	20006b3c 	.word	0x20006b3c
 80082cc:	20006b20 	.word	0x20006b20

080082d0 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 80082d6:	4837      	ldr	r0, [pc, #220]	; (80083b4 <RemovePortButton+0xe4>)
 80082d8:	00e9      	lsls	r1, r5, #3
 80082da:	1949      	adds	r1, r1, r5
 80082dc:	1842      	adds	r2, r0, r1
 80082de:	2300      	movs	r3, #0
 80082e0:	7053      	strb	r3, [r2, #1]
	button[port].state =NONE;
 80082e2:	540b      	strb	r3, [r1, r0]
	button[port].events =0;
 80082e4:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 80082e6:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 80082e8:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 80082ea:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 80082ec:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 80082ee:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 80082f0:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80082f2:	002c      	movs	r4, r5
 80082f4:	343a      	adds	r4, #58	; 0x3a
 80082f6:	00a4      	lsls	r4, r4, #2
 80082f8:	466b      	mov	r3, sp
 80082fa:	1d99      	adds	r1, r3, #6
 80082fc:	0020      	movs	r0, r4
 80082fe:	f7ff fa3f 	bl	8007780 <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 8008302:	2800      	cmp	r0, #0
 8008304:	d02b      	beq.n	800835e <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 8008306:	0028      	movs	r0, r5
 8008308:	f005 fdda 	bl	800dec0 <GetUart>
 800830c:	0006      	movs	r6, r0
	
	if(huart->Instance == USART1){
 800830e:	6803      	ldr	r3, [r0, #0]
 8008310:	4a29      	ldr	r2, [pc, #164]	; (80083b8 <RemovePortButton+0xe8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d034      	beq.n	8008380 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 8008316:	4a29      	ldr	r2, [pc, #164]	; (80083bc <RemovePortButton+0xec>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d035      	beq.n	8008388 <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 800831c:	4a28      	ldr	r2, [pc, #160]	; (80083c0 <RemovePortButton+0xf0>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d036      	beq.n	8008390 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 8008322:	4a28      	ldr	r2, [pc, #160]	; (80083c4 <RemovePortButton+0xf4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d037      	beq.n	8008398 <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 8008328:	4a27      	ldr	r2, [pc, #156]	; (80083c8 <RemovePortButton+0xf8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d038      	beq.n	80083a0 <RemovePortButton+0xd0>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 800832e:	4a27      	ldr	r2, [pc, #156]	; (80083cc <RemovePortButton+0xfc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d039      	beq.n	80083a8 <RemovePortButton+0xd8>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 8008334:	4a26      	ldr	r2, [pc, #152]	; (80083d0 <RemovePortButton+0x100>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d03a      	beq.n	80083b0 <RemovePortButton+0xe0>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 800833a:	4a26      	ldr	r2, [pc, #152]	; (80083d4 <RemovePortButton+0x104>)
 800833c:	4694      	mov	ip, r2
 800833e:	4463      	add	r3, ip
 8008340:	1e5c      	subs	r4, r3, #1
 8008342:	41a3      	sbcs	r3, r4
 8008344:	425c      	negs	r4, r3
 8008346:	b2e4      	uxtb	r4, r4
	}
	else
		result =BOS_ERROR;
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 8008348:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <RemovePortButton+0x108>)
 800834a:	2200      	movs	r2, #0
 800834c:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 800834e:	3201      	adds	r2, #1
 8008350:	4922      	ldr	r1, [pc, #136]	; (80083dc <RemovePortButton+0x10c>)
 8008352:	0030      	movs	r0, r6
 8008354:	f00a fd0e 	bl	8012d74 <HAL_UART_Receive_IT>
	
	return result;
}
 8008358:	0020      	movs	r0, r4
 800835a:	b002      	add	sp, #8
 800835c:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 800835e:	2100      	movs	r1, #0
 8008360:	0020      	movs	r0, r4
 8008362:	f7ff fa3d 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008366:	1c60      	adds	r0, r4, #1
 8008368:	2100      	movs	r1, #0
 800836a:	f7ff fa39 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800836e:	1ca0      	adds	r0, r4, #2
 8008370:	2100      	movs	r1, #0
 8008372:	f7ff fa35 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008376:	1ce0      	adds	r0, r4, #3
 8008378:	2100      	movs	r1, #0
 800837a:	f7ff fa31 	bl	80077e0 <EE_WriteVariable>
 800837e:	e7c2      	b.n	8008306 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008380:	f005 fbd6 	bl	800db30 <MX_USART1_UART_Init>
	BOS_Status result =BOS_OK;
 8008384:	2400      	movs	r4, #0
 8008386:	e7df      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008388:	f005 fbea 	bl	800db60 <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 800838c:	2400      	movs	r4, #0
 800838e:	e7db      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008390:	f005 fbfe 	bl	800db90 <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 8008394:	2400      	movs	r4, #0
 8008396:	e7d7      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008398:	f005 fc12 	bl	800dbc0 <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 800839c:	2400      	movs	r4, #0
 800839e:	e7d3      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 80083a0:	f005 fc26 	bl	800dbf0 <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 80083a4:	2400      	movs	r4, #0
 80083a6:	e7cf      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 80083a8:	f005 fc3a 	bl	800dc20 <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 80083ac:	2400      	movs	r4, #0
 80083ae:	e7cb      	b.n	8008348 <RemovePortButton+0x78>
 80083b0:	2400      	movs	r4, #0
 80083b2:	e7c9      	b.n	8008348 <RemovePortButton+0x78>
 80083b4:	2000151c 	.word	0x2000151c
 80083b8:	40013800 	.word	0x40013800
 80083bc:	40004400 	.word	0x40004400
 80083c0:	40004800 	.word	0x40004800
 80083c4:	40004c00 	.word	0x40004c00
 80083c8:	40005000 	.word	0x40005000
 80083cc:	40011400 	.word	0x40011400
 80083d0:	40011800 	.word	0x40011800
 80083d4:	bffee400 	.word	0xbffee400
 80083d8:	200010f8 	.word	0x200010f8
 80083dc:	20000e58 	.word	0x20000e58

080083e0 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 80083e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e2:	46de      	mov	lr, fp
 80083e4:	4657      	mov	r7, sl
 80083e6:	464e      	mov	r6, r9
 80083e8:	4645      	mov	r5, r8
 80083ea:	b5e0      	push	{r5, r6, r7, lr}
 80083ec:	b085      	sub	sp, #20
 80083ee:	0007      	movs	r7, r0
 80083f0:	001e      	movs	r6, r3
 80083f2:	ab0e      	add	r3, sp, #56	; 0x38
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	4698      	mov	r8, r3
 80083f8:	ab0f      	add	r3, sp, #60	; 0x3c
 80083fa:	781d      	ldrb	r5, [r3, #0]
 80083fc:	ab10      	add	r3, sp, #64	; 0x40
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	469b      	mov	fp, r3
 8008402:	ab11      	add	r3, sp, #68	; 0x44
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	469a      	mov	sl, r3
 8008408:	ab12      	add	r3, sp, #72	; 0x48
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	4699      	mov	r9, r3
 800840e:	ab13      	add	r3, sp, #76	; 0x4c
 8008410:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 8008412:	00fc      	lsls	r4, r7, #3
 8008414:	19e4      	adds	r4, r4, r7
 8008416:	4b9e      	ldr	r3, [pc, #632]	; (8008690 <SetButtonEvents+0x2b0>)
 8008418:	191b      	adds	r3, r3, r4
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d04c      	beq.n	80084ba <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8008420:	00fc      	lsls	r4, r7, #3
 8008422:	19e4      	adds	r4, r4, r7
 8008424:	4b9a      	ldr	r3, [pc, #616]	; (8008690 <SetButtonEvents+0x2b0>)
 8008426:	191b      	adds	r3, r3, r4
 8008428:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 800842a:	4644      	mov	r4, r8
 800842c:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 800842e:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec =released_y1sec;
 8008430:	465c      	mov	r4, fp
 8008432:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec =released_y2sec;
 8008434:	4654      	mov	r4, sl
 8008436:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec =released_y3sec;
 8008438:	464c      	mov	r4, r9
 800843a:	71dc      	strb	r4, [r3, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 800843c:	2801      	cmp	r0, #1
 800843e:	d003      	beq.n	8008448 <SetButtonEvents+0x68>
 8008440:	2800      	cmp	r0, #0
 8008442:	d113      	bne.n	800846c <SetButtonEvents+0x8c>
 8008444:	2900      	cmp	r1, #0
 8008446:	d042      	beq.n	80084ce <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008448:	00f9      	lsls	r1, r7, #3
 800844a:	19c9      	adds	r1, r1, r7
 800844c:	4b90      	ldr	r3, [pc, #576]	; (8008690 <SetButtonEvents+0x2b0>)
 800844e:	185b      	adds	r3, r3, r1
 8008450:	7a19      	ldrb	r1, [r3, #8]
 8008452:	2401      	movs	r4, #1
 8008454:	4321      	orrs	r1, r4
 8008456:	7219      	strb	r1, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008458:	2801      	cmp	r0, #1
 800845a:	d10c      	bne.n	8008476 <SetButtonEvents+0x96>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800845c:	00fa      	lsls	r2, r7, #3
 800845e:	19d2      	adds	r2, r2, r7
 8008460:	4b8b      	ldr	r3, [pc, #556]	; (8008690 <SetButtonEvents+0x2b0>)
 8008462:	189b      	adds	r3, r3, r2
 8008464:	7a1a      	ldrb	r2, [r3, #8]
 8008466:	2102      	movs	r1, #2
 8008468:	430a      	orrs	r2, r1
 800846a:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 800846c:	2801      	cmp	r0, #1
 800846e:	d042      	beq.n	80084f6 <SetButtonEvents+0x116>
 8008470:	2800      	cmp	r0, #0
 8008472:	d152      	bne.n	800851a <SetButtonEvents+0x13a>
 8008474:	e03d      	b.n	80084f2 <SetButtonEvents+0x112>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008476:	2800      	cmp	r0, #0
 8008478:	d031      	beq.n	80084de <SetButtonEvents+0xfe>
 800847a:	e044      	b.n	8008506 <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 800847c:	2800      	cmp	r0, #0
 800847e:	d059      	beq.n	8008534 <SetButtonEvents+0x154>
 8008480:	e06d      	b.n	800855e <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 8008482:	2800      	cmp	r0, #0
 8008484:	d100      	bne.n	8008488 <SetButtonEvents+0xa8>
 8008486:	e082      	b.n	800858e <SetButtonEvents+0x1ae>
 8008488:	e097      	b.n	80085ba <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 800848a:	2800      	cmp	r0, #0
 800848c:	d100      	bne.n	8008490 <SetButtonEvents+0xb0>
 800848e:	e0f2      	b.n	8008676 <SetButtonEvents+0x296>
 8008490:	e09f      	b.n	80085d2 <SetButtonEvents+0x1f2>
	if(!res)											// This variable exists
	{
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 8008492:	0a19      	lsrs	r1, r3, #8
 8008494:	0209      	lsls	r1, r1, #8
 8008496:	4311      	orrs	r1, r2
 8008498:	ab02      	add	r3, sp, #8
 800849a:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 800849c:	0020      	movs	r0, r4
 800849e:	f7ff f99f 	bl	80077e0 <EE_WriteVariable>
 80084a2:	e0ad      	b.n	8008600 <SetButtonEvents+0x220>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 80084a4:	0019      	movs	r1, r3
 80084a6:	9801      	ldr	r0, [sp, #4]
 80084a8:	f7ff f99a 	bl	80077e0 <EE_WriteVariable>
 80084ac:	e0b7      	b.n	800861e <SetButtonEvents+0x23e>
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 80084ae:	4653      	mov	r3, sl
 80084b0:	4319      	orrs	r1, r3
 80084b2:	0030      	movs	r0, r6
 80084b4:	f7ff f994 	bl	80077e0 <EE_WriteVariable>
 80084b8:	e0c0      	b.n	800863c <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80084ba:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
}
 80084bc:	b005      	add	sp, #20
 80084be:	bc3c      	pop	{r2, r3, r4, r5}
 80084c0:	4690      	mov	r8, r2
 80084c2:	4699      	mov	r9, r3
 80084c4:	46a2      	mov	sl, r4
 80084c6:	46ab      	mov	fp, r5
 80084c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80084ca:	200b      	movs	r0, #11
 80084cc:	e7f6      	b.n	80084bc <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_CLICKED;
 80084ce:	00f9      	lsls	r1, r7, #3
 80084d0:	19c9      	adds	r1, r1, r7
 80084d2:	4b6f      	ldr	r3, [pc, #444]	; (8008690 <SetButtonEvents+0x2b0>)
 80084d4:	185b      	adds	r3, r3, r1
 80084d6:	7a19      	ldrb	r1, [r3, #8]
 80084d8:	2401      	movs	r4, #1
 80084da:	43a1      	bics	r1, r4
 80084dc:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 80084de:	2a00      	cmp	r2, #0
 80084e0:	d1bc      	bne.n	800845c <SetButtonEvents+0x7c>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 80084e2:	00fa      	lsls	r2, r7, #3
 80084e4:	19d2      	adds	r2, r2, r7
 80084e6:	4b6a      	ldr	r3, [pc, #424]	; (8008690 <SetButtonEvents+0x2b0>)
 80084e8:	189b      	adds	r3, r3, r2
 80084ea:	7a1a      	ldrb	r2, [r3, #8]
 80084ec:	2102      	movs	r1, #2
 80084ee:	438a      	bics	r2, r1
 80084f0:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	d016      	beq.n	8008524 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80084f6:	00fa      	lsls	r2, r7, #3
 80084f8:	19d2      	adds	r2, r2, r7
 80084fa:	4b65      	ldr	r3, [pc, #404]	; (8008690 <SetButtonEvents+0x2b0>)
 80084fc:	189b      	adds	r3, r3, r2
 80084fe:	7a1a      	ldrb	r2, [r3, #8]
 8008500:	2104      	movs	r1, #4
 8008502:	430a      	orrs	r2, r1
 8008504:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008506:	2801      	cmp	r0, #1
 8008508:	d1b8      	bne.n	800847c <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800850a:	00fa      	lsls	r2, r7, #3
 800850c:	19d2      	adds	r2, r2, r7
 800850e:	4b60      	ldr	r3, [pc, #384]	; (8008690 <SetButtonEvents+0x2b0>)
 8008510:	189b      	adds	r3, r3, r2
 8008512:	7a1a      	ldrb	r2, [r3, #8]
 8008514:	2108      	movs	r1, #8
 8008516:	430a      	orrs	r2, r1
 8008518:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 800851a:	2801      	cmp	r0, #1
 800851c:	d017      	beq.n	800854e <SetButtonEvents+0x16e>
 800851e:	2800      	cmp	r0, #0
 8008520:	d128      	bne.n	8008574 <SetButtonEvents+0x194>
 8008522:	e012      	b.n	800854a <SetButtonEvents+0x16a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008524:	00fa      	lsls	r2, r7, #3
 8008526:	19d2      	adds	r2, r2, r7
 8008528:	4b59      	ldr	r3, [pc, #356]	; (8008690 <SetButtonEvents+0x2b0>)
 800852a:	189b      	adds	r3, r3, r2
 800852c:	7a1a      	ldrb	r2, [r3, #8]
 800852e:	2104      	movs	r1, #4
 8008530:	438a      	bics	r2, r1
 8008532:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008534:	4643      	mov	r3, r8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e7      	bne.n	800850a <SetButtonEvents+0x12a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800853a:	00fa      	lsls	r2, r7, #3
 800853c:	19d2      	adds	r2, r2, r7
 800853e:	4b54      	ldr	r3, [pc, #336]	; (8008690 <SetButtonEvents+0x2b0>)
 8008540:	189b      	adds	r3, r3, r2
 8008542:	7a1a      	ldrb	r2, [r3, #8]
 8008544:	2108      	movs	r1, #8
 8008546:	438a      	bics	r2, r1
 8008548:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 800854a:	2d00      	cmp	r5, #0
 800854c:	d017      	beq.n	800857e <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800854e:	00fa      	lsls	r2, r7, #3
 8008550:	19d2      	adds	r2, r2, r7
 8008552:	4b4f      	ldr	r3, [pc, #316]	; (8008690 <SetButtonEvents+0x2b0>)
 8008554:	189b      	adds	r3, r3, r2
 8008556:	7a1a      	ldrb	r2, [r3, #8]
 8008558:	2110      	movs	r1, #16
 800855a:	430a      	orrs	r2, r1
 800855c:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800855e:	2801      	cmp	r0, #1
 8008560:	d000      	beq.n	8008564 <SetButtonEvents+0x184>
 8008562:	e78e      	b.n	8008482 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008564:	00fa      	lsls	r2, r7, #3
 8008566:	19d2      	adds	r2, r2, r7
 8008568:	4b49      	ldr	r3, [pc, #292]	; (8008690 <SetButtonEvents+0x2b0>)
 800856a:	189b      	adds	r3, r3, r2
 800856c:	7a1a      	ldrb	r2, [r3, #8]
 800856e:	2120      	movs	r1, #32
 8008570:	430a      	orrs	r2, r1
 8008572:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008574:	2801      	cmp	r0, #1
 8008576:	d018      	beq.n	80085aa <SetButtonEvents+0x1ca>
 8008578:	2800      	cmp	r0, #0
 800857a:	d12a      	bne.n	80085d2 <SetButtonEvents+0x1f2>
 800857c:	e012      	b.n	80085a4 <SetButtonEvents+0x1c4>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800857e:	00fa      	lsls	r2, r7, #3
 8008580:	19d2      	adds	r2, r2, r7
 8008582:	4b43      	ldr	r3, [pc, #268]	; (8008690 <SetButtonEvents+0x2b0>)
 8008584:	189b      	adds	r3, r3, r2
 8008586:	7a1a      	ldrb	r2, [r3, #8]
 8008588:	2110      	movs	r1, #16
 800858a:	438a      	bics	r2, r1
 800858c:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800858e:	465b      	mov	r3, fp
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e7      	bne.n	8008564 <SetButtonEvents+0x184>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008594:	00fa      	lsls	r2, r7, #3
 8008596:	19d2      	adds	r2, r2, r7
 8008598:	4b3d      	ldr	r3, [pc, #244]	; (8008690 <SetButtonEvents+0x2b0>)
 800859a:	189b      	adds	r3, r3, r2
 800859c:	7a1a      	ldrb	r2, [r3, #8]
 800859e:	2120      	movs	r1, #32
 80085a0:	438a      	bics	r2, r1
 80085a2:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 80085a4:	4653      	mov	r3, sl
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d05d      	beq.n	8008666 <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80085aa:	00fa      	lsls	r2, r7, #3
 80085ac:	19d2      	adds	r2, r2, r7
 80085ae:	4b38      	ldr	r3, [pc, #224]	; (8008690 <SetButtonEvents+0x2b0>)
 80085b0:	189b      	adds	r3, r3, r2
 80085b2:	7a1a      	ldrb	r2, [r3, #8]
 80085b4:	2140      	movs	r1, #64	; 0x40
 80085b6:	430a      	orrs	r2, r1
 80085b8:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 80085ba:	2801      	cmp	r0, #1
 80085bc:	d000      	beq.n	80085c0 <SetButtonEvents+0x1e0>
 80085be:	e764      	b.n	800848a <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80085c0:	00fa      	lsls	r2, r7, #3
 80085c2:	19d2      	adds	r2, r2, r7
 80085c4:	4b32      	ldr	r3, [pc, #200]	; (8008690 <SetButtonEvents+0x2b0>)
 80085c6:	189b      	adds	r3, r3, r2
 80085c8:	7a19      	ldrb	r1, [r3, #8]
 80085ca:	2280      	movs	r2, #128	; 0x80
 80085cc:	4252      	negs	r2, r2
 80085ce:	430a      	orrs	r2, r1
 80085d0:	721a      	strb	r2, [r3, #8]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80085d2:	003c      	movs	r4, r7
 80085d4:	343a      	adds	r4, #58	; 0x3a
 80085d6:	00a4      	lsls	r4, r4, #2
 80085d8:	ab02      	add	r3, sp, #8
 80085da:	1d99      	adds	r1, r3, #6
 80085dc:	0020      	movs	r0, r4
 80085de:	f7ff f8cf 	bl	8007780 <EE_ReadVariable>
	if(!res)											// This variable exists
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d000      	beq.n	80085e8 <SetButtonEvents+0x208>
 80085e6:	e770      	b.n	80084ca <SetButtonEvents+0xea>
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 80085e8:	ab02      	add	r3, sp, #8
 80085ea:	3306      	adds	r3, #6
 80085ec:	881b      	ldrh	r3, [r3, #0]
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 80085ee:	00fa      	lsls	r2, r7, #3
 80085f0:	19d2      	adds	r2, r2, r7
 80085f2:	4f27      	ldr	r7, [pc, #156]	; (8008690 <SetButtonEvents+0x2b0>)
 80085f4:	18bf      	adds	r7, r7, r2
 80085f6:	7a3a      	ldrb	r2, [r7, #8]
 80085f8:	b2d9      	uxtb	r1, r3
 80085fa:	4291      	cmp	r1, r2
 80085fc:	d000      	beq.n	8008600 <SetButtonEvents+0x220>
 80085fe:	e748      	b.n	8008492 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 8008600:	1c63      	adds	r3, r4, #1
 8008602:	aa02      	add	r2, sp, #8
 8008604:	1d97      	adds	r7, r2, #6
 8008606:	0039      	movs	r1, r7
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	0018      	movs	r0, r3
 800860c:	f7ff f8b8 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 8008610:	0236      	lsls	r6, r6, #8
 8008612:	883a      	ldrh	r2, [r7, #0]
 8008614:	465b      	mov	r3, fp
 8008616:	4333      	orrs	r3, r6
 8008618:	429a      	cmp	r2, r3
 800861a:	d000      	beq.n	800861e <SetButtonEvents+0x23e>
 800861c:	e742      	b.n	80084a4 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 800861e:	1ca6      	adds	r6, r4, #2
 8008620:	ab02      	add	r3, sp, #8
 8008622:	1d9f      	adds	r7, r3, #6
 8008624:	0039      	movs	r1, r7
 8008626:	0030      	movs	r0, r6
 8008628:	f7ff f8aa 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 800862c:	4643      	mov	r3, r8
 800862e:	0219      	lsls	r1, r3, #8
 8008630:	883a      	ldrh	r2, [r7, #0]
 8008632:	4653      	mov	r3, sl
 8008634:	430b      	orrs	r3, r1
 8008636:	429a      	cmp	r2, r3
 8008638:	d000      	beq.n	800863c <SetButtonEvents+0x25c>
 800863a:	e738      	b.n	80084ae <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 800863c:	3403      	adds	r4, #3
 800863e:	ab02      	add	r3, sp, #8
 8008640:	1d9e      	adds	r6, r3, #6
 8008642:	0031      	movs	r1, r6
 8008644:	0020      	movs	r0, r4
 8008646:	f7ff f89b 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 800864a:	022d      	lsls	r5, r5, #8
 800864c:	8832      	ldrh	r2, [r6, #0]
 800864e:	464b      	mov	r3, r9
 8008650:	432b      	orrs	r3, r5
	return result;
 8008652:	2000      	movs	r0, #0
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008654:	429a      	cmp	r2, r3
 8008656:	d100      	bne.n	800865a <SetButtonEvents+0x27a>
 8008658:	e730      	b.n	80084bc <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 800865a:	0019      	movs	r1, r3
 800865c:	0020      	movs	r0, r4
 800865e:	f7ff f8bf 	bl	80077e0 <EE_WriteVariable>
	return result;
 8008662:	2000      	movs	r0, #0
 8008664:	e72a      	b.n	80084bc <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008666:	00fa      	lsls	r2, r7, #3
 8008668:	19d2      	adds	r2, r2, r7
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <SetButtonEvents+0x2b0>)
 800866c:	189b      	adds	r3, r3, r2
 800866e:	7a1a      	ldrb	r2, [r3, #8]
 8008670:	2140      	movs	r1, #64	; 0x40
 8008672:	438a      	bics	r2, r1
 8008674:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008676:	464b      	mov	r3, r9
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1a1      	bne.n	80085c0 <SetButtonEvents+0x1e0>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800867c:	00fa      	lsls	r2, r7, #3
 800867e:	19d2      	adds	r2, r2, r7
 8008680:	4b03      	ldr	r3, [pc, #12]	; (8008690 <SetButtonEvents+0x2b0>)
 8008682:	189b      	adds	r3, r3, r2
 8008684:	7a19      	ldrb	r1, [r3, #8]
 8008686:	227f      	movs	r2, #127	; 0x7f
 8008688:	400a      	ands	r2, r1
 800868a:	721a      	strb	r2, [r3, #8]
 800868c:	e7a1      	b.n	80085d2 <SetButtonEvents+0x1f2>
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	2000151c 	.word	0x2000151c

08008694 <HAL_ADC_MspInit>:
		Error_Handler();
	}
	ADC_flag =1;
}

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle){
 8008694:	b510      	push	{r4, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	0004      	movs	r4, r0
	
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 800869a:	2214      	movs	r2, #20
 800869c:	2100      	movs	r1, #0
 800869e:	a803      	add	r0, sp, #12
 80086a0:	f00b fb60 	bl	8013d64 <memset>
	if(adcHandle->Instance == ADC1){
 80086a4:	4b11      	ldr	r3, [pc, #68]	; (80086ec <HAL_ADC_MspInit+0x58>)
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d001      	beq.n	80086b0 <HAL_ADC_MspInit+0x1c>
		
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80086ac:	b008      	add	sp, #32
 80086ae:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 80086b0:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <HAL_ADC_MspInit+0x5c>)
 80086b2:	6999      	ldr	r1, [r3, #24]
 80086b4:	2080      	movs	r0, #128	; 0x80
 80086b6:	0080      	lsls	r0, r0, #2
 80086b8:	4301      	orrs	r1, r0
 80086ba:	6199      	str	r1, [r3, #24]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	4002      	ands	r2, r0
 80086c0:	9201      	str	r2, [sp, #4]
 80086c2:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	2180      	movs	r1, #128	; 0x80
 80086c8:	0289      	lsls	r1, r1, #10
 80086ca:	430a      	orrs	r2, r1
 80086cc:	615a      	str	r2, [r3, #20]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	400b      	ands	r3, r1
 80086d2:	9302      	str	r3, [sp, #8]
 80086d4:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80086d6:	233c      	movs	r3, #60	; 0x3c
 80086d8:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086da:	3b39      	subs	r3, #57	; 0x39
 80086dc:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80086de:	3871      	subs	r0, #113	; 0x71
 80086e0:	38ff      	subs	r0, #255	; 0xff
 80086e2:	a903      	add	r1, sp, #12
 80086e4:	05c0      	lsls	r0, r0, #23
 80086e6:	f009 f99b 	bl	8011a20 <HAL_GPIO_Init>
}
 80086ea:	e7df      	b.n	80086ac <HAL_ADC_MspInit+0x18>
 80086ec:	40012400 	.word	0x40012400
 80086f0:	40021000 	.word	0x40021000

080086f4 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart,char *side){
	
	if(huart->Instance == USART2 && side == "top")
 80086f4:	6803      	ldr	r3, [r0, #0]
 80086f6:	4a0d      	ldr	r2, [pc, #52]	; (800872c <Get_channel+0x38>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if(huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if(huart->Instance == USART6 && side == "top")
 80086fc:	4a0c      	ldr	r2, [pc, #48]	; (8008730 <Get_channel+0x3c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d008      	beq.n	8008714 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if(huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 8008702:	4770      	bx	lr
	if(huart->Instance == USART2 && side == "top")
 8008704:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <Get_channel+0x40>)
 8008706:	4299      	cmp	r1, r3
 8008708:	d00c      	beq.n	8008724 <Get_channel+0x30>
	else if(huart->Instance == USART2 && side == "bottom")
 800870a:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <Get_channel+0x44>)
 800870c:	4299      	cmp	r1, r3
 800870e:	d1f8      	bne.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008710:	2003      	movs	r0, #3
 8008712:	e7f6      	b.n	8008702 <Get_channel+0xe>
	else if(huart->Instance == USART6 && side == "top")
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <Get_channel+0x40>)
 8008716:	4299      	cmp	r1, r3
 8008718:	d006      	beq.n	8008728 <Get_channel+0x34>
	else if(huart->Instance == USART6 && side == "bottom")
 800871a:	4b07      	ldr	r3, [pc, #28]	; (8008738 <Get_channel+0x44>)
 800871c:	4299      	cmp	r1, r3
 800871e:	d1f0      	bne.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_5;
 8008720:	2005      	movs	r0, #5
 8008722:	e7ee      	b.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_2;
 8008724:	2002      	movs	r0, #2
 8008726:	e7ec      	b.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_4;
 8008728:	2004      	movs	r0, #4
 800872a:	e7ea      	b.n	8008702 <Get_channel+0xe>
 800872c:	40004400 	.word	0x40004400
 8008730:	40011400 	.word	0x40011400
 8008734:	08019104 	.word	0x08019104
 8008738:	08019108 	.word	0x08019108

0800873c <Error_Handler>:

void Error_Handler(void){
 800873c:	b510      	push	{r4, lr}
	
	HAL_Delay(100);
 800873e:	2064      	movs	r0, #100	; 0x64
 8008740:	f007 fe78 	bl	8010434 <HAL_Delay>
	
}
 8008744:	bd10      	pop	{r4, pc}
	...

08008748 <MX_ADC_Init>:
void MX_ADC_Init(void){
 8008748:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800874a:	4811      	ldr	r0, [pc, #68]	; (8008790 <MX_ADC_Init+0x48>)
 800874c:	4b11      	ldr	r3, [pc, #68]	; (8008794 <MX_ADC_Init+0x4c>)
 800874e:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	061b      	lsls	r3, r3, #24
 8008754:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008756:	2300      	movs	r3, #0
 8008758:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800875a:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800875c:	2201      	movs	r2, #1
 800875e:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008760:	2104      	movs	r1, #4
 8008762:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait =DISABLE;
 8008764:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 8008766:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 8008768:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 800876a:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800876c:	21c2      	movs	r1, #194	; 0xc2
 800876e:	31ff      	adds	r1, #255	; 0xff
 8008770:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008772:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 8008774:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008776:	6342      	str	r2, [r0, #52]	; 0x34
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 8008778:	f007 ff36 	bl	80105e8 <HAL_ADC_Init>
 800877c:	2800      	cmp	r0, #0
 800877e:	d103      	bne.n	8008788 <MX_ADC_Init+0x40>
	ADC_flag =1;
 8008780:	4b05      	ldr	r3, [pc, #20]	; (8008798 <MX_ADC_Init+0x50>)
 8008782:	2201      	movs	r2, #1
 8008784:	701a      	strb	r2, [r3, #0]
}
 8008786:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008788:	f7ff ffd8 	bl	800873c <Error_Handler>
 800878c:	e7f8      	b.n	8008780 <MX_ADC_Init+0x38>
 800878e:	46c0      	nop			; (mov r8, r8)
 8008790:	20006b58 	.word	0x20006b58
 8008794:	40012400 	.word	0x40012400
 8008798:	20001508 	.word	0x20001508

0800879c <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	0005      	movs	r5, r0
 80087a2:	000e      	movs	r6, r1
	if(0 == ADC_flag)
 80087a4:	4b4d      	ldr	r3, [pc, #308]	; (80088dc <ReadTempAndVref+0x140>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d100      	bne.n	80087ae <ReadTempAndVref+0x12>
 80087ac:	e087      	b.n	80088be <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80087ae:	494c      	ldr	r1, [pc, #304]	; (80088e0 <ReadTempAndVref+0x144>)
 80087b0:	2310      	movs	r3, #16
 80087b2:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80087b4:	2380      	movs	r3, #128	; 0x80
 80087b6:	015b      	lsls	r3, r3, #5
 80087b8:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80087ba:	2301      	movs	r3, #1
 80087bc:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80087be:	4849      	ldr	r0, [pc, #292]	; (80088e4 <ReadTempAndVref+0x148>)
 80087c0:	f008 f872 	bl	80108a8 <HAL_ADC_ConfigChannel>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d000      	beq.n	80087ca <ReadTempAndVref+0x2e>
 80087c8:	e07c      	b.n	80088c4 <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 80087ca:	4c46      	ldr	r4, [pc, #280]	; (80088e4 <ReadTempAndVref+0x148>)
 80087cc:	0020      	movs	r0, r4
 80087ce:	f007 ffb3 	bl	8010738 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 80087d2:	2164      	movs	r1, #100	; 0x64
 80087d4:	0020      	movs	r0, r4
 80087d6:	f008 f801 	bl	80107dc <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 80087da:	0020      	movs	r0, r4
 80087dc:	f008 f85e 	bl	801089c <HAL_ADC_GetValue>
 80087e0:	4b41      	ldr	r3, [pc, #260]	; (80088e8 <ReadTempAndVref+0x14c>)
 80087e2:	8018      	strh	r0, [r3, #0]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 80087e4:	0400      	lsls	r0, r0, #16
 80087e6:	0c00      	lsrs	r0, r0, #16
 80087e8:	f7fa f930 	bl	8002a4c <__aeabi_i2d>
 80087ec:	4a3f      	ldr	r2, [pc, #252]	; (80088ec <ReadTempAndVref+0x150>)
 80087ee:	4b40      	ldr	r3, [pc, #256]	; (80088f0 <ReadTempAndVref+0x154>)
 80087f0:	f7f9 fb20 	bl	8001e34 <__aeabi_dmul>
 80087f4:	2200      	movs	r2, #0
 80087f6:	4b3f      	ldr	r3, [pc, #252]	; (80088f4 <ReadTempAndVref+0x158>)
 80087f8:	f7f8 ff12 	bl	8001620 <__aeabi_ddiv>
 80087fc:	4a3e      	ldr	r2, [pc, #248]	; (80088f8 <ReadTempAndVref+0x15c>)
 80087fe:	4b3f      	ldr	r3, [pc, #252]	; (80088fc <ReadTempAndVref+0x160>)
 8008800:	f7f9 fd8a 	bl	8002318 <__aeabi_dsub>
 8008804:	4a3e      	ldr	r2, [pc, #248]	; (8008900 <ReadTempAndVref+0x164>)
 8008806:	4b3f      	ldr	r3, [pc, #252]	; (8008904 <ReadTempAndVref+0x168>)
 8008808:	f7f8 ff0a 	bl	8001620 <__aeabi_ddiv>
 800880c:	2200      	movs	r2, #0
 800880e:	4b3e      	ldr	r3, [pc, #248]	; (8008908 <ReadTempAndVref+0x16c>)
 8008810:	f7f8 fbea 	bl	8000fe8 <__aeabi_dadd>
 8008814:	f7fa f9d8 	bl	8002bc8 <__aeabi_d2f>
 8008818:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800881a:	0020      	movs	r0, r4
 800881c:	f007 ffbc 	bl	8010798 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008820:	492f      	ldr	r1, [pc, #188]	; (80088e0 <ReadTempAndVref+0x144>)
 8008822:	2310      	movs	r3, #16
 8008824:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008826:	4b39      	ldr	r3, [pc, #228]	; (800890c <ReadTempAndVref+0x170>)
 8008828:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800882a:	2301      	movs	r3, #1
 800882c:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800882e:	0020      	movs	r0, r4
 8008830:	f008 f83a 	bl	80108a8 <HAL_ADC_ConfigChannel>
 8008834:	2800      	cmp	r0, #0
 8008836:	d148      	bne.n	80088ca <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008838:	4929      	ldr	r1, [pc, #164]	; (80088e0 <ReadTempAndVref+0x144>)
 800883a:	2311      	movs	r3, #17
 800883c:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800883e:	2380      	movs	r3, #128	; 0x80
 8008840:	015b      	lsls	r3, r3, #5
 8008842:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008844:	2305      	movs	r3, #5
 8008846:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008848:	4826      	ldr	r0, [pc, #152]	; (80088e4 <ReadTempAndVref+0x148>)
 800884a:	f008 f82d 	bl	80108a8 <HAL_ADC_ConfigChannel>
 800884e:	2800      	cmp	r0, #0
 8008850:	d13e      	bne.n	80088d0 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 8008852:	4d24      	ldr	r5, [pc, #144]	; (80088e4 <ReadTempAndVref+0x148>)
 8008854:	0028      	movs	r0, r5
 8008856:	f007 ff6f 	bl	8010738 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 800885a:	2164      	movs	r1, #100	; 0x64
 800885c:	0028      	movs	r0, r5
 800885e:	f007 ffbd 	bl	80107dc <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 8008862:	0028      	movs	r0, r5
 8008864:	f008 f81a 	bl	801089c <HAL_ADC_GetValue>
 8008868:	0004      	movs	r4, r0
 800886a:	4b29      	ldr	r3, [pc, #164]	; (8008910 <ReadTempAndVref+0x174>)
 800886c:	8018      	strh	r0, [r3, #0]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 800886e:	4b29      	ldr	r3, [pc, #164]	; (8008914 <ReadTempAndVref+0x178>)
 8008870:	8818      	ldrh	r0, [r3, #0]
 8008872:	f7fa f8eb 	bl	8002a4c <__aeabi_i2d>
 8008876:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <ReadTempAndVref+0x150>)
 8008878:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <ReadTempAndVref+0x154>)
 800887a:	f7f9 fadb 	bl	8001e34 <__aeabi_dmul>
 800887e:	9000      	str	r0, [sp, #0]
 8008880:	9101      	str	r1, [sp, #4]
 8008882:	0420      	lsls	r0, r4, #16
 8008884:	0c00      	lsrs	r0, r0, #16
 8008886:	f7fa f8e1 	bl	8002a4c <__aeabi_i2d>
 800888a:	0002      	movs	r2, r0
 800888c:	000b      	movs	r3, r1
 800888e:	9800      	ldr	r0, [sp, #0]
 8008890:	9901      	ldr	r1, [sp, #4]
 8008892:	f7f8 fec5 	bl	8001620 <__aeabi_ddiv>
 8008896:	f7fa f997 	bl	8002bc8 <__aeabi_d2f>
 800889a:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800889c:	0028      	movs	r0, r5
 800889e:	f007 ff7b 	bl	8010798 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80088a2:	490f      	ldr	r1, [pc, #60]	; (80088e0 <ReadTempAndVref+0x144>)
 80088a4:	2311      	movs	r3, #17
 80088a6:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 80088a8:	4b18      	ldr	r3, [pc, #96]	; (800890c <ReadTempAndVref+0x170>)
 80088aa:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80088ac:	2301      	movs	r3, #1
 80088ae:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80088b0:	0028      	movs	r0, r5
 80088b2:	f007 fff9 	bl	80108a8 <HAL_ADC_ConfigChannel>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d10d      	bne.n	80088d6 <ReadTempAndVref+0x13a>
}
 80088ba:	b002      	add	sp, #8
 80088bc:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 80088be:	f7ff ff43 	bl	8008748 <MX_ADC_Init>
 80088c2:	e774      	b.n	80087ae <ReadTempAndVref+0x12>
		Error_Handler();
 80088c4:	f7ff ff3a 	bl	800873c <Error_Handler>
 80088c8:	e77f      	b.n	80087ca <ReadTempAndVref+0x2e>
		Error_Handler();
 80088ca:	f7ff ff37 	bl	800873c <Error_Handler>
 80088ce:	e7b3      	b.n	8008838 <ReadTempAndVref+0x9c>
		Error_Handler();
 80088d0:	f7ff ff34 	bl	800873c <Error_Handler>
 80088d4:	e7bd      	b.n	8008852 <ReadTempAndVref+0xb6>
		Error_Handler();
 80088d6:	f7ff ff31 	bl	800873c <Error_Handler>
}
 80088da:	e7ee      	b.n	80088ba <ReadTempAndVref+0x11e>
 80088dc:	20001508 	.word	0x20001508
 80088e0:	200015a8 	.word	0x200015a8
 80088e4:	20006b58 	.word	0x20006b58
 80088e8:	2000150c 	.word	0x2000150c
 80088ec:	66666666 	.word	0x66666666
 80088f0:	400a6666 	.word	0x400a6666
 80088f4:	40affe00 	.word	0x40affe00
 80088f8:	28f5c28f 	.word	0x28f5c28f
 80088fc:	3ff68f5c 	.word	0x3ff68f5c
 8008900:	33333333 	.word	0x33333333
 8008904:	40113333 	.word	0x40113333
 8008908:	40390000 	.word	0x40390000
 800890c:	00001001 	.word	0x00001001
 8008910:	2000150a 	.word	0x2000150a
 8008914:	1ffff7ba 	.word	0x1ffff7ba

08008918 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	0004      	movs	r4, r0
 800891e:	000d      	movs	r5, r1
	if(port == 2 || port == 3){
 8008920:	1e83      	subs	r3, r0, #2
 8008922:	2b01      	cmp	r3, #1
 8008924:	d901      	bls.n	800892a <GetReadPrecentage+0x12>
}
 8008926:	b006      	add	sp, #24
 8008928:	bd70      	pop	{r4, r5, r6, pc}
		if(0 == ADC_flag){
 800892a:	4b3e      	ldr	r3, [pc, #248]	; (8008a24 <GetReadPrecentage+0x10c>)
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d055      	beq.n	80089de <GetReadPrecentage+0xc6>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8008932:	2090      	movs	r0, #144	; 0x90
 8008934:	2201      	movs	r2, #1
 8008936:	2110      	movs	r1, #16
 8008938:	05c0      	lsls	r0, r0, #23
 800893a:	f009 f9e5 	bl	8011d08 <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 800893e:	0020      	movs	r0, r4
 8008940:	f005 fabe 	bl	800dec0 <GetUart>
 8008944:	4938      	ldr	r1, [pc, #224]	; (8008a28 <GetReadPrecentage+0x110>)
 8008946:	f7ff fed5 	bl	80086f4 <Get_channel>
 800894a:	4b38      	ldr	r3, [pc, #224]	; (8008a2c <GetReadPrecentage+0x114>)
 800894c:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 800894e:	4938      	ldr	r1, [pc, #224]	; (8008a30 <GetReadPrecentage+0x118>)
 8008950:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008952:	2380      	movs	r3, #128	; 0x80
 8008954:	015b      	lsls	r3, r3, #5
 8008956:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008958:	2301      	movs	r3, #1
 800895a:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800895c:	4835      	ldr	r0, [pc, #212]	; (8008a34 <GetReadPrecentage+0x11c>)
 800895e:	f007 ffa3 	bl	80108a8 <HAL_ADC_ConfigChannel>
 8008962:	2800      	cmp	r0, #0
 8008964:	d15b      	bne.n	8008a1e <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008966:	4c33      	ldr	r4, [pc, #204]	; (8008a34 <GetReadPrecentage+0x11c>)
 8008968:	0020      	movs	r0, r4
 800896a:	f007 fee5 	bl	8010738 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 800896e:	2164      	movs	r1, #100	; 0x64
 8008970:	0020      	movs	r0, r4
 8008972:	f007 ff33 	bl	80107dc <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008976:	0020      	movs	r0, r4
 8008978:	f007 ff90 	bl	801089c <HAL_ADC_GetValue>
 800897c:	f7f8 faf4 	bl	8000f68 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008980:	f7fa f8d0 	bl	8002b24 <__aeabi_f2d>
 8008984:	4a2c      	ldr	r2, [pc, #176]	; (8008a38 <GetReadPrecentage+0x120>)
 8008986:	4b2d      	ldr	r3, [pc, #180]	; (8008a3c <GetReadPrecentage+0x124>)
 8008988:	f7f9 fa54 	bl	8001e34 <__aeabi_dmul>
 800898c:	2200      	movs	r2, #0
 800898e:	4b2c      	ldr	r3, [pc, #176]	; (8008a40 <GetReadPrecentage+0x128>)
 8008990:	f7f8 fe46 	bl	8001620 <__aeabi_ddiv>
 8008994:	f7fa f918 	bl	8002bc8 <__aeabi_d2f>
 8008998:	4b2a      	ldr	r3, [pc, #168]	; (8008a44 <GetReadPrecentage+0x12c>)
 800899a:	6018      	str	r0, [r3, #0]
		current =(100 * percentage) / 3.3;
 800899c:	492a      	ldr	r1, [pc, #168]	; (8008a48 <GetReadPrecentage+0x130>)
 800899e:	f7f7 ffcd 	bl	800093c <__aeabi_fmul>
 80089a2:	f7fa f8bf 	bl	8002b24 <__aeabi_f2d>
 80089a6:	4a24      	ldr	r2, [pc, #144]	; (8008a38 <GetReadPrecentage+0x120>)
 80089a8:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <GetReadPrecentage+0x124>)
 80089aa:	f7f8 fe39 	bl	8001620 <__aeabi_ddiv>
 80089ae:	f7fa f90b 	bl	8002bc8 <__aeabi_d2f>
 80089b2:	4b26      	ldr	r3, [pc, #152]	; (8008a4c <GetReadPrecentage+0x134>)
 80089b4:	6018      	str	r0, [r3, #0]
		*precentageValue =current;
 80089b6:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 80089b8:	0020      	movs	r0, r4
 80089ba:	f007 feed 	bl	8010798 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 80089be:	491c      	ldr	r1, [pc, #112]	; (8008a30 <GetReadPrecentage+0x118>)
 80089c0:	4b1a      	ldr	r3, [pc, #104]	; (8008a2c <GetReadPrecentage+0x114>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 80089c6:	4b22      	ldr	r3, [pc, #136]	; (8008a50 <GetReadPrecentage+0x138>)
 80089c8:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089ca:	2301      	movs	r3, #1
 80089cc:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80089ce:	0020      	movs	r0, r4
 80089d0:	f007 ff6a 	bl	80108a8 <HAL_ADC_ConfigChannel>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d0a6      	beq.n	8008926 <GetReadPrecentage+0xe>
			Error_Handler();
 80089d8:	f7ff feb0 	bl	800873c <Error_Handler>
 80089dc:	e7a3      	b.n	8008926 <GetReadPrecentage+0xe>
			MX_ADC_Init();
 80089de:	f7ff feb3 	bl	8008748 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 80089e2:	0020      	movs	r0, r4
 80089e4:	f005 fa6c 	bl	800dec0 <GetUart>
 80089e8:	f00a f96b 	bl	8012cc2 <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 80089ec:	2690      	movs	r6, #144	; 0x90
 80089ee:	05f6      	lsls	r6, r6, #23
 80089f0:	2110      	movs	r1, #16
 80089f2:	0030      	movs	r0, r6
 80089f4:	f009 f8f4 	bl	8011be0 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 80089f8:	480e      	ldr	r0, [pc, #56]	; (8008a34 <GetReadPrecentage+0x11c>)
 80089fa:	f007 fff9 	bl	80109f0 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 80089fe:	2310      	movs	r3, #16
 8008a00:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a02:	3b0f      	subs	r3, #15
 8008a04:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008a06:	3302      	adds	r3, #2
 8008a08:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008a0a:	a901      	add	r1, sp, #4
 8008a0c:	0030      	movs	r0, r6
 8008a0e:	f009 f807 	bl	8011a20 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008a12:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <GetReadPrecentage+0x13c>)
 8008a14:	191b      	adds	r3, r3, r4
 8008a16:	3b01      	subs	r3, #1
 8008a18:	2206      	movs	r2, #6
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	e789      	b.n	8008932 <GetReadPrecentage+0x1a>
			Error_Handler();
 8008a1e:	f7ff fe8d 	bl	800873c <Error_Handler>
 8008a22:	e7a0      	b.n	8008966 <GetReadPrecentage+0x4e>
 8008a24:	20001508 	.word	0x20001508
 8008a28:	08019108 	.word	0x08019108
 8008a2c:	20001518 	.word	0x20001518
 8008a30:	200015a8 	.word	0x200015a8
 8008a34:	20006b58 	.word	0x20006b58
 8008a38:	66666666 	.word	0x66666666
 8008a3c:	400a6666 	.word	0x400a6666
 8008a40:	40affe00 	.word	0x40affe00
 8008a44:	2000156c 	.word	0x2000156c
 8008a48:	42c80000 	.word	0x42c80000
 8008a4c:	2000155c 	.word	0x2000155c
 8008a50:	00001001 	.word	0x00001001
 8008a54:	200010f8 	.word	0x200010f8

08008a58 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008a58:	2802      	cmp	r0, #2
 8008a5a:	d004      	beq.n	8008a66 <Get_Rank+0xe>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008a5c:	2803      	cmp	r0, #3
 8008a5e:	d010      	beq.n	8008a82 <Get_Rank+0x2a>
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
		Rank_t =3;
	return Rank_t;
 8008a60:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <Get_Rank+0x48>)
 8008a62:	7818      	ldrb	r0, [r3, #0]
}
 8008a64:	4770      	bx	lr
	if(Port == 2 && side == "top")
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <Get_Rank+0x4c>)
 8008a68:	4299      	cmp	r1, r3
 8008a6a:	d006      	beq.n	8008a7a <Get_Rank+0x22>
	else if(Port == 2 && side == "bottom")
 8008a6c:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <Get_Rank+0x50>)
 8008a6e:	4299      	cmp	r1, r3
 8008a70:	d1f6      	bne.n	8008a60 <Get_Rank+0x8>
		Rank_t =1;
 8008a72:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <Get_Rank+0x48>)
 8008a74:	2201      	movs	r2, #1
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e7f2      	b.n	8008a60 <Get_Rank+0x8>
		Rank_t =0;
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <Get_Rank+0x48>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	e7ee      	b.n	8008a60 <Get_Rank+0x8>
	else if(Port == 3 && side == "top")
 8008a82:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <Get_Rank+0x4c>)
 8008a84:	4299      	cmp	r1, r3
 8008a86:	d006      	beq.n	8008a96 <Get_Rank+0x3e>
	else if(Port == 3 && side == "bottom")
 8008a88:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <Get_Rank+0x50>)
 8008a8a:	4299      	cmp	r1, r3
 8008a8c:	d1e8      	bne.n	8008a60 <Get_Rank+0x8>
		Rank_t =3;
 8008a8e:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <Get_Rank+0x48>)
 8008a90:	2203      	movs	r2, #3
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	e7e4      	b.n	8008a60 <Get_Rank+0x8>
		Rank_t =2;
 8008a96:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <Get_Rank+0x48>)
 8008a98:	2202      	movs	r2, #2
 8008a9a:	701a      	strb	r2, [r3, #0]
 8008a9c:	e7e0      	b.n	8008a60 <Get_Rank+0x8>
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	20001519 	.word	0x20001519
 8008aa4:	08019104 	.word	0x08019104
 8008aa8:	08019108 	.word	0x08019108

08008aac <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	0004      	movs	r4, r0
 8008ab0:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008ab2:	1e83      	subs	r3, r0, #2
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d900      	bls.n	8008aba <ADCSelectChannel+0xe>
}
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008aba:	f005 fa01 	bl	800dec0 <GetUart>
 8008abe:	f00a f900 	bl	8012cc2 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008ac2:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <ADCSelectChannel+0x4c>)
 8008ac4:	191b      	adds	r3, r3, r4
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	2206      	movs	r2, #6
 8008aca:	701a      	strb	r2, [r3, #0]
		Channel =Get_channel(GetUart(ADC_port),side);
 8008acc:	0020      	movs	r0, r4
 8008ace:	f005 f9f7 	bl	800dec0 <GetUart>
 8008ad2:	0029      	movs	r1, r5
 8008ad4:	f7ff fe0e 	bl	80086f4 <Get_channel>
 8008ad8:	4b08      	ldr	r3, [pc, #32]	; (8008afc <ADCSelectChannel+0x50>)
 8008ada:	7018      	strb	r0, [r3, #0]
		Rank_t =Get_Rank(ADC_port,side);
 8008adc:	0029      	movs	r1, r5
 8008ade:	0020      	movs	r0, r4
 8008ae0:	f7ff ffba 	bl	8008a58 <Get_Rank>
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <ADCSelectChannel+0x54>)
 8008ae6:	7018      	strb	r0, [r3, #0]
		if(ADC_flag == 0)
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <ADCSelectChannel+0x58>)
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e3      	bne.n	8008ab8 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008af0:	f7ff fe2a 	bl	8008748 <MX_ADC_Init>
}
 8008af4:	e7e0      	b.n	8008ab8 <ADCSelectChannel+0xc>
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	200010f8 	.word	0x200010f8
 8008afc:	20001518 	.word	0x20001518
 8008b00:	20001519 	.word	0x20001519
 8008b04:	20001508 	.word	0x20001508

08008b08 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	0005      	movs	r5, r0
 8008b0c:	000e      	movs	r6, r1
 8008b0e:	0014      	movs	r4, r2
	if(ADC_flag == 1){
 8008b10:	4b26      	ldr	r3, [pc, #152]	; (8008bac <ReadADCChannel+0xa4>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d008      	beq.n	8008b2a <ReadADCChannel+0x22>
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008b18:	4b25      	ldr	r3, [pc, #148]	; (8008bb0 <ReadADCChannel+0xa8>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	4a25      	ldr	r2, [pc, #148]	; (8008bb4 <ReadADCChannel+0xac>)
 8008b20:	5a98      	ldrh	r0, [r3, r2]
 8008b22:	f7f8 fa21 	bl	8000f68 <__aeabi_ui2f>
 8008b26:	6020      	str	r0, [r4, #0]
}
 8008b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008b2a:	f005 f9c9 	bl	800dec0 <GetUart>
 8008b2e:	0031      	movs	r1, r6
 8008b30:	f7ff fde0 	bl	80086f4 <Get_channel>
 8008b34:	4f20      	ldr	r7, [pc, #128]	; (8008bb8 <ReadADCChannel+0xb0>)
 8008b36:	7038      	strb	r0, [r7, #0]
		Rank_t =Get_Rank(Port,side);
 8008b38:	0031      	movs	r1, r6
 8008b3a:	0028      	movs	r0, r5
 8008b3c:	f7ff ff8c 	bl	8008a58 <Get_Rank>
 8008b40:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <ReadADCChannel+0xa8>)
 8008b42:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008b44:	491d      	ldr	r1, [pc, #116]	; (8008bbc <ReadADCChannel+0xb4>)
 8008b46:	783b      	ldrb	r3, [r7, #0]
 8008b48:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b4a:	2380      	movs	r3, #128	; 0x80
 8008b4c:	015b      	lsls	r3, r3, #5
 8008b4e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b50:	2303      	movs	r3, #3
 8008b52:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b54:	481a      	ldr	r0, [pc, #104]	; (8008bc0 <ReadADCChannel+0xb8>)
 8008b56:	f007 fea7 	bl	80108a8 <HAL_ADC_ConfigChannel>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d122      	bne.n	8008ba4 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008b5e:	4d18      	ldr	r5, [pc, #96]	; (8008bc0 <ReadADCChannel+0xb8>)
 8008b60:	0028      	movs	r0, r5
 8008b62:	f007 fde9 	bl	8010738 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008b66:	2164      	movs	r1, #100	; 0x64
 8008b68:	0028      	movs	r0, r5
 8008b6a:	f007 fe37 	bl	80107dc <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8008b6e:	0028      	movs	r0, r5
 8008b70:	f007 fe94 	bl	801089c <HAL_ADC_GetValue>
 8008b74:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <ReadADCChannel+0xa8>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	4a0e      	ldr	r2, [pc, #56]	; (8008bb4 <ReadADCChannel+0xac>)
 8008b7c:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 8008b7e:	0028      	movs	r0, r5
 8008b80:	f007 fe0a 	bl	8010798 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008b84:	490d      	ldr	r1, [pc, #52]	; (8008bbc <ReadADCChannel+0xb4>)
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <ReadADCChannel+0xb0>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <ReadADCChannel+0xbc>)
 8008b8e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b90:	2303      	movs	r3, #3
 8008b92:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b94:	0028      	movs	r0, r5
 8008b96:	f007 fe87 	bl	80108a8 <HAL_ADC_ConfigChannel>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0bc      	beq.n	8008b18 <ReadADCChannel+0x10>
			Error_Handler();
 8008b9e:	f7ff fdcd 	bl	800873c <Error_Handler>
 8008ba2:	e7b9      	b.n	8008b18 <ReadADCChannel+0x10>
			Error_Handler();
 8008ba4:	f7ff fdca 	bl	800873c <Error_Handler>
 8008ba8:	e7d9      	b.n	8008b5e <ReadADCChannel+0x56>
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	20001508 	.word	0x20001508
 8008bb0:	20001519 	.word	0x20001519
 8008bb4:	20001510 	.word	0x20001510
 8008bb8:	20001518 	.word	0x20001518
 8008bbc:	200015a8 	.word	0x200015a8
 8008bc0:	20006b58 	.word	0x20006b58
 8008bc4:	00001001 	.word	0x00001001

08008bc8 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port){
}
 8008bc8:	4770      	bx	lr

08008bca <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port){
}
 8008bca:	4770      	bx	lr

08008bcc <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port){
}
 8008bcc:	4770      	bx	lr

08008bce <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8008bce:	4770      	bx	lr

08008bd0 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port,uint8_t eventType){
}
 8008bd0:	4770      	bx	lr
	...

08008bd4 <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 8008bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd6:	46de      	mov	lr, fp
 8008bd8:	4657      	mov	r7, sl
 8008bda:	464e      	mov	r6, r9
 8008bdc:	4645      	mov	r5, r8
 8008bde:	b5e0      	push	{r5, r6, r7, lr}
 8008be0:	b089      	sub	sp, #36	; 0x24
 8008be2:	4dbd      	ldr	r5, [pc, #756]	; (8008ed8 <CheckAttachedButtons+0x304>)
 8008be4:	3509      	adds	r5, #9
 8008be6:	2404      	movs	r4, #4
 8008be8:	2601      	movs	r6, #1
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	469b      	mov	fp, r3
 8008bee:	4699      	mov	r9, r3
 8008bf0:	e111      	b.n	8008e16 <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 8008bf2:	230e      	movs	r3, #14
 8008bf4:	aa02      	add	r2, sp, #8
 8008bf6:	4694      	mov	ip, r2
 8008bf8:	4463      	add	r3, ip
 8008bfa:	8819      	ldrh	r1, [r3, #0]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	9807      	ldr	r0, [sp, #28]
 8008c00:	f009 f882 	bl	8011d08 <HAL_GPIO_WritePin>
				Delay_us(10);
 8008c04:	200a      	movs	r0, #10
 8008c06:	f004 ff6f 	bl	800dae8 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 8008c0a:	ab05      	add	r3, sp, #20
 8008c0c:	8819      	ldrh	r1, [r3, #0]
 8008c0e:	9806      	ldr	r0, [sp, #24]
 8008c10:	f009 f874 	bl	8011cfc <HAL_GPIO_ReadPin>
 8008c14:	4681      	mov	r9, r0
 8008c16:	e126      	b.n	8008e66 <CheckAttachedButtons+0x292>
			switch(button[i].type){
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d105      	bne.n	8008c28 <CheckAttachedButtons+0x54>
					if(connected == GPIO_PIN_SET)
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d046      	beq.n	8008cb0 <CheckAttachedButtons+0xdc>
					else if(connected == GPIO_PIN_RESET)
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d100      	bne.n	8008c28 <CheckAttachedButtons+0x54>
 8008c26:	e1c5      	b.n	8008fb4 <CheckAttachedButtons+0x3e0>
			if(state == CLOSED || state == ON){
 8008c28:	465b      	mov	r3, fp
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d001      	beq.n	8008c32 <CheckAttachedButtons+0x5e>
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d107      	bne.n	8008c42 <CheckAttachedButtons+0x6e>
				if(pressCounter[i] < 0xFFFF)
 8008c32:	4baa      	ldr	r3, [pc, #680]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c34:	58e3      	ldr	r3, [r4, r3]
 8008c36:	4aaa      	ldr	r2, [pc, #680]	; (8008ee0 <CheckAttachedButtons+0x30c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d842      	bhi.n	8008cc2 <CheckAttachedButtons+0xee>
					++pressCounter[i];			// Advance the debounce counter
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	4aa7      	ldr	r2, [pc, #668]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c40:	50a3      	str	r3, [r4, r2]
			if(state == OPEN || state == OFF){
 8008c42:	23fd      	movs	r3, #253	; 0xfd
 8008c44:	465a      	mov	r2, fp
 8008c46:	4013      	ands	r3, r2
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d100      	bne.n	8008c4e <CheckAttachedButtons+0x7a>
 8008c4c:	e1b6      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
			if(pressCounter[i] < BOS.buttons.debounce){
 8008c4e:	4ba3      	ldr	r3, [pc, #652]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c50:	58e3      	ldr	r3, [r4, r3]
 8008c52:	4aa4      	ldr	r2, [pc, #656]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008c54:	8812      	ldrh	r2, [r2, #0]
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d36f      	bcc.n	8008d3a <CheckAttachedButtons+0x166>
				if(pressCounter[i] == BOS.buttons.debounce){
 8008c5a:	d045      	beq.n	8008ce8 <CheckAttachedButtons+0x114>
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008c5c:	4ba2      	ldr	r3, [pc, #648]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008c5e:	58e3      	ldr	r3, [r4, r3]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d202      	bcs.n	8008c6a <CheckAttachedButtons+0x96>
					releaseCounter[i] =0;
 8008c64:	4ba0      	ldr	r3, [pc, #640]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	50e2      	str	r2, [r4, r3]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 8008c6a:	4b9c      	ldr	r3, [pc, #624]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c6c:	58e3      	ldr	r3, [r4, r3]
 8008c6e:	4a9d      	ldr	r2, [pc, #628]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008c70:	8852      	ldrh	r2, [r2, #2]
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d952      	bls.n	8008d1c <CheckAttachedButtons+0x148>
 8008c76:	22f4      	movs	r2, #244	; 0xf4
 8008c78:	32ff      	adds	r2, #255	; 0xff
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d84e      	bhi.n	8008d1c <CheckAttachedButtons+0x148>
					if(clicked == 0)
 8008c7e:	4b9b      	ldr	r3, [pc, #620]	; (8008eec <CheckAttachedButtons+0x318>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d137      	bne.n	8008cf6 <CheckAttachedButtons+0x122>
						clicked =1;		// Record a possible single click
 8008c86:	4b99      	ldr	r3, [pc, #612]	; (8008eec <CheckAttachedButtons+0x318>)
 8008c88:	3af3      	subs	r2, #243	; 0xf3
 8008c8a:	3aff      	subs	r2, #255	; 0xff
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	e054      	b.n	8008d3a <CheckAttachedButtons+0x166>
					if(connected == GPIO_PIN_SET)
 8008c90:	464b      	mov	r3, r9
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d00f      	beq.n	8008cb6 <CheckAttachedButtons+0xe2>
					else if(connected == GPIO_PIN_RESET)
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1c6      	bne.n	8008c28 <CheckAttachedButtons+0x54>
						state =OPEN;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	469b      	mov	fp, r3
 8008c9e:	e18d      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
					if(connected == GPIO_PIN_SET)
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d00a      	beq.n	8008cbc <CheckAttachedButtons+0xe8>
					else if(connected == GPIO_PIN_RESET)
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1be      	bne.n	8008c28 <CheckAttachedButtons+0x54>
						state =OFF;
 8008caa:	2301      	movs	r3, #1
 8008cac:	469b      	mov	fp, r3
 8008cae:	e185      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
						state =CLOSED;
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	469b      	mov	fp, r3
 8008cb4:	e7bd      	b.n	8008c32 <CheckAttachedButtons+0x5e>
						state =CLOSED;
 8008cb6:	2304      	movs	r3, #4
 8008cb8:	469b      	mov	fp, r3
 8008cba:	e7ba      	b.n	8008c32 <CheckAttachedButtons+0x5e>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	469b      	mov	fp, r3
 8008cc0:	e7b7      	b.n	8008c32 <CheckAttachedButtons+0x5e>
					pressCounter[i] =0;			// Reset debounce counter
 8008cc2:	4b86      	ldr	r3, [pc, #536]	; (8008edc <CheckAttachedButtons+0x308>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	50e2      	str	r2, [r4, r3]
 8008cc8:	e7bb      	b.n	8008c42 <CheckAttachedButtons+0x6e>
					releaseCounter[i] =0;		// Reset debounce counter
 8008cca:	4b87      	ldr	r3, [pc, #540]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	50e2      	str	r2, [r4, r3]
 8008cd0:	e17d      	b.n	8008fce <CheckAttachedButtons+0x3fa>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008cd2:	4b87      	ldr	r3, [pc, #540]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008cd4:	5cf3      	ldrb	r3, [r6, r3]
 8008cd6:	4a83      	ldr	r2, [pc, #524]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008cd8:	7952      	ldrb	r2, [r2, #5]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d200      	bcs.n	8008ce0 <CheckAttachedButtons+0x10c>
 8008cde:	e182      	b.n	8008fe6 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	4a83      	ldr	r2, [pc, #524]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008ce4:	54b3      	strb	r3, [r6, r2]
 8008ce6:	e7b2      	b.n	8008c4e <CheckAttachedButtons+0x7a>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 8008ce8:	2107      	movs	r1, #7
 8008cea:	4640      	mov	r0, r8
 8008cec:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 8008cee:	3301      	adds	r3, #1
 8008cf0:	497a      	ldr	r1, [pc, #488]	; (8008edc <CheckAttachedButtons+0x308>)
 8008cf2:	5063      	str	r3, [r4, r1]
 8008cf4:	e7b2      	b.n	8008c5c <CheckAttachedButtons+0x88>
					else if(clicked == 2){
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d11f      	bne.n	8008d3a <CheckAttachedButtons+0x166>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8008cfa:	4b7d      	ldr	r3, [pc, #500]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008cfc:	5cf3      	ldrb	r3, [r6, r3]
 8008cfe:	4a79      	ldr	r2, [pc, #484]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d00:	7912      	ldrb	r2, [r2, #4]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d219      	bcs.n	8008d3a <CheckAttachedButtons+0x166>
 8008d06:	4a77      	ldr	r2, [pc, #476]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d08:	7952      	ldrb	r2, [r2, #5]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d915      	bls.n	8008d3a <CheckAttachedButtons+0x166>
							clicked =3;	// Record a possible double click
 8008d0e:	4b77      	ldr	r3, [pc, #476]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d10:	2203      	movs	r2, #3
 8008d12:	701a      	strb	r2, [r3, #0]
							dblCounter[i] =0;	// Reset the inter-click counter
 8008d14:	4b76      	ldr	r3, [pc, #472]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	54f2      	strb	r2, [r6, r3]
 8008d1a:	e00e      	b.n	8008d3a <CheckAttachedButtons+0x166>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 8008d1c:	3bf5      	subs	r3, #245	; 0xf5
 8008d1e:	3bff      	subs	r3, #255	; 0xff
 8008d20:	4a74      	ldr	r2, [pc, #464]	; (8008ef4 <CheckAttachedButtons+0x320>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d809      	bhi.n	8008d3a <CheckAttachedButtons+0x166>
					if(clicked)
 8008d26:	4b71      	ldr	r3, [pc, #452]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <CheckAttachedButtons+0x160>
						clicked =0;						// Cannot be a click
 8008d2e:	4b6f      	ldr	r3, [pc, #444]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8008d34:	9803      	ldr	r0, [sp, #12]
 8008d36:	f7ff f9bd 	bl	80080b4 <CheckForTimedButtonPress>
			if(releaseCounter[i] < BOS.buttons.debounce){
 8008d3a:	4b6b      	ldr	r3, [pc, #428]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008d3c:	58e3      	ldr	r3, [r4, r3]
 8008d3e:	4a69      	ldr	r2, [pc, #420]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d40:	8812      	ldrh	r2, [r2, #0]
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d34d      	bcc.n	8008de2 <CheckAttachedButtons+0x20e>
				if(releaseCounter[i] == BOS.buttons.debounce){
 8008d46:	d02b      	beq.n	8008da0 <CheckAttachedButtons+0x1cc>
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008d48:	4b64      	ldr	r3, [pc, #400]	; (8008edc <CheckAttachedButtons+0x308>)
 8008d4a:	58e3      	ldr	r3, [r4, r3]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d202      	bcs.n	8008d56 <CheckAttachedButtons+0x182>
					pressCounter[i] =0;
 8008d50:	4b62      	ldr	r3, [pc, #392]	; (8008edc <CheckAttachedButtons+0x308>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	50e2      	str	r2, [r4, r3]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 8008d56:	4b64      	ldr	r3, [pc, #400]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008d58:	58e3      	ldr	r3, [r4, r3]
 8008d5a:	4a62      	ldr	r2, [pc, #392]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d5c:	8852      	ldrh	r2, [r2, #2]
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d93a      	bls.n	8008dd8 <CheckAttachedButtons+0x204>
 8008d62:	22f4      	movs	r2, #244	; 0xf4
 8008d64:	32ff      	adds	r2, #255	; 0xff
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d836      	bhi.n	8008dd8 <CheckAttachedButtons+0x204>
					if(clicked == 1){
 8008d6a:	4b60      	ldr	r3, [pc, #384]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d01d      	beq.n	8008dae <CheckAttachedButtons+0x1da>
					else if(clicked == 3){
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d135      	bne.n	8008de2 <CheckAttachedButtons+0x20e>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 8008d76:	3303      	adds	r3, #3
 8008d78:	4642      	mov	r2, r8
 8008d7a:	7013      	strb	r3, [r2, #0]
						clicked =0;			// Prepare for a single click
 8008d7c:	4b5b      	ldr	r3, [pc, #364]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 8008d82:	4b5d      	ldr	r3, [pc, #372]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d13f      	bne.n	8008e0a <CheckAttachedButtons+0x236>
 8008d8a:	4643      	mov	r3, r8
 8008d8c:	7a1b      	ldrb	r3, [r3, #8]
 8008d8e:	079b      	lsls	r3, r3, #30
 8008d90:	d53b      	bpl.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008d92:	4b59      	ldr	r3, [pc, #356]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008d94:	2201      	movs	r2, #1
 8008d96:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8008d98:	9803      	ldr	r0, [sp, #12]
 8008d9a:	f7ff ff17 	bl	8008bcc <buttonDblClickedCallback>
 8008d9e:	e034      	b.n	8008e0a <CheckAttachedButtons+0x236>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8008da0:	2108      	movs	r1, #8
 8008da2:	4640      	mov	r0, r8
 8008da4:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 8008da6:	3301      	adds	r3, #1
 8008da8:	494f      	ldr	r1, [pc, #316]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008daa:	5063      	str	r3, [r4, r1]
 8008dac:	e7cc      	b.n	8008d48 <CheckAttachedButtons+0x174>
						button[i].state =CLICKED;	// Record a single button click event
 8008dae:	3304      	adds	r3, #4
 8008db0:	4642      	mov	r2, r8
 8008db2:	7013      	strb	r3, [r2, #0]
						clicked =2;			// Prepare for a double click
 8008db4:	4b4d      	ldr	r3, [pc, #308]	; (8008eec <CheckAttachedButtons+0x318>)
 8008db6:	2202      	movs	r2, #2
 8008db8:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 8008dba:	4b4f      	ldr	r3, [pc, #316]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d123      	bne.n	8008e0a <CheckAttachedButtons+0x236>
 8008dc2:	4643      	mov	r3, r8
 8008dc4:	7a1b      	ldrb	r3, [r3, #8]
 8008dc6:	07db      	lsls	r3, r3, #31
 8008dc8:	d51f      	bpl.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008dca:	4b4b      	ldr	r3, [pc, #300]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8008dd0:	9803      	ldr	r0, [sp, #12]
 8008dd2:	f7ff fefa 	bl	8008bca <buttonClickedCallback>
 8008dd6:	e018      	b.n	8008e0a <CheckAttachedButtons+0x236>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 8008dd8:	3bf5      	subs	r3, #245	; 0xf5
 8008dda:	3bff      	subs	r3, #255	; 0xff
 8008ddc:	4a45      	ldr	r2, [pc, #276]	; (8008ef4 <CheckAttachedButtons+0x320>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d909      	bls.n	8008df6 <CheckAttachedButtons+0x222>
			switch(button[i].state){
 8008de2:	4643      	mov	r3, r8
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	3b05      	subs	r3, #5
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	2a09      	cmp	r2, #9
 8008dec:	d80d      	bhi.n	8008e0a <CheckAttachedButtons+0x236>
 8008dee:	0093      	lsls	r3, r2, #2
 8008df0:	4a42      	ldr	r2, [pc, #264]	; (8008efc <CheckAttachedButtons+0x328>)
 8008df2:	58d3      	ldr	r3, [r2, r3]
 8008df4:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8008df6:	9803      	ldr	r0, [sp, #12]
 8008df8:	f7ff f99a 	bl	8008130 <CheckForTimedButtonRelease>
 8008dfc:	e7f1      	b.n	8008de2 <CheckAttachedButtons+0x20e>
					buttonPressedCallback(i);
 8008dfe:	9803      	ldr	r0, [sp, #12]
 8008e00:	f7ff f956 	bl	80080b0 <buttonPressedCallback>
					button[i].state =NONE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	4642      	mov	r2, r8
 8008e08:	7013      	strb	r3, [r2, #0]
 8008e0a:	3601      	adds	r6, #1
 8008e0c:	3509      	adds	r5, #9
 8008e0e:	3404      	adds	r4, #4
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8008e10:	2c1c      	cmp	r4, #28
 8008e12:	d100      	bne.n	8008e16 <CheckAttachedButtons+0x242>
 8008e14:	e0ed      	b.n	8008ff2 <CheckAttachedButtons+0x41e>
 8008e16:	b2f3      	uxtb	r3, r6
 8008e18:	9303      	str	r3, [sp, #12]
 8008e1a:	46a8      	mov	r8, r5
		if(button[i].type)			// Only check defined butons
 8008e1c:	786b      	ldrb	r3, [r5, #1]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0f3      	beq.n	8008e0a <CheckAttachedButtons+0x236>
			if(delayButtonStateReset == false)
 8008e22:	4b35      	ldr	r3, [pc, #212]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d100      	bne.n	8008e2c <CheckAttachedButtons+0x258>
				button[i].state =NONE;
 8008e2a:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008e2c:	230e      	movs	r3, #14
 8008e2e:	aa02      	add	r2, sp, #8
 8008e30:	4694      	mov	ip, r2
 8008e32:	4463      	add	r3, ip
 8008e34:	469a      	mov	sl, r3
 8008e36:	af05      	add	r7, sp, #20
 8008e38:	9700      	str	r7, [sp, #0]
 8008e3a:	ab06      	add	r3, sp, #24
 8008e3c:	4652      	mov	r2, sl
 8008e3e:	a907      	add	r1, sp, #28
 8008e40:	9803      	ldr	r0, [sp, #12]
 8008e42:	f004 fabf 	bl	800d3c4 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008e46:	4653      	mov	r3, sl
 8008e48:	8819      	ldrh	r1, [r3, #0]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	9807      	ldr	r0, [sp, #28]
 8008e4e:	f008 ff5b 	bl	8011d08 <HAL_GPIO_WritePin>
			Delay_us(10);
 8008e52:	200a      	movs	r0, #10
 8008e54:	f004 fe48 	bl	800dae8 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 8008e58:	8839      	ldrh	r1, [r7, #0]
 8008e5a:	9806      	ldr	r0, [sp, #24]
 8008e5c:	f008 ff4e 	bl	8011cfc <HAL_GPIO_ReadPin>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d100      	bne.n	8008e66 <CheckAttachedButtons+0x292>
 8008e64:	e6c5      	b.n	8008bf2 <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008e66:	230e      	movs	r3, #14
 8008e68:	aa02      	add	r2, sp, #8
 8008e6a:	4694      	mov	ip, r2
 8008e6c:	4463      	add	r3, ip
 8008e6e:	8819      	ldrh	r1, [r3, #0]
 8008e70:	2200      	movs	r2, #0
 8008e72:	9807      	ldr	r0, [sp, #28]
 8008e74:	f008 ff48 	bl	8011d08 <HAL_GPIO_WritePin>
			switch(button[i].type){
 8008e78:	4643      	mov	r3, r8
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d100      	bne.n	8008e82 <CheckAttachedButtons+0x2ae>
 8008e80:	e706      	b.n	8008c90 <CheckAttachedButtons+0xbc>
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	2a02      	cmp	r2, #2
 8008e86:	d800      	bhi.n	8008e8a <CheckAttachedButtons+0x2b6>
 8008e88:	e6c6      	b.n	8008c18 <CheckAttachedButtons+0x44>
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d100      	bne.n	8008e90 <CheckAttachedButtons+0x2bc>
 8008e8e:	e707      	b.n	8008ca0 <CheckAttachedButtons+0xcc>
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d000      	beq.n	8008e96 <CheckAttachedButtons+0x2c2>
 8008e94:	e6c8      	b.n	8008c28 <CheckAttachedButtons+0x54>
					if(connected == GPIO_PIN_SET)
 8008e96:	464b      	mov	r3, r9
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d100      	bne.n	8008e9e <CheckAttachedButtons+0x2ca>
 8008e9c:	e08d      	b.n	8008fba <CheckAttachedButtons+0x3e6>
					else if(connected == GPIO_PIN_RESET)
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d000      	beq.n	8008ea4 <CheckAttachedButtons+0x2d0>
 8008ea2:	e6c1      	b.n	8008c28 <CheckAttachedButtons+0x54>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	469b      	mov	fp, r3
 8008ea8:	e6c3      	b.n	8008c32 <CheckAttachedButtons+0x5e>
					buttonReleasedCallback(i);
 8008eaa:	9803      	ldr	r0, [sp, #12]
 8008eac:	f7ff fe8c 	bl	8008bc8 <buttonReleasedCallback>
					button[i].state =NONE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4642      	mov	r2, r8
 8008eb4:	7013      	strb	r3, [r2, #0]
					break;
 8008eb6:	e7a8      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 8008eb8:	4b0f      	ldr	r3, [pc, #60]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1a4      	bne.n	8008e0a <CheckAttachedButtons+0x236>
 8008ec0:	4643      	mov	r3, r8
 8008ec2:	7a1b      	ldrb	r3, [r3, #8]
 8008ec4:	075b      	lsls	r3, r3, #29
 8008ec6:	d5a0      	bpl.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008ec8:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008eca:	2201      	movs	r2, #1
 8008ecc:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 8008ece:	2101      	movs	r1, #1
 8008ed0:	9803      	ldr	r0, [sp, #12]
 8008ed2:	f7ff fe7c 	bl	8008bce <buttonPressedForXCallback>
 8008ed6:	e798      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008ed8:	2000151c 	.word	0x2000151c
 8008edc:	20001570 	.word	0x20001570
 8008ee0:	0000fffe 	.word	0x0000fffe
 8008ee4:	20006aa0 	.word	0x20006aa0
 8008ee8:	2000158c 	.word	0x2000158c
 8008eec:	2000155b 	.word	0x2000155b
 8008ef0:	20001560 	.word	0x20001560
 8008ef4:	0000fe0a 	.word	0x0000fe0a
 8008ef8:	20001567 	.word	0x20001567
 8008efc:	0801af88 	.word	0x0801af88
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 8008f00:	4b3f      	ldr	r3, [pc, #252]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d000      	beq.n	8008f0a <CheckAttachedButtons+0x336>
 8008f08:	e77f      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f0a:	4643      	mov	r3, r8
 8008f0c:	7a1b      	ldrb	r3, [r3, #8]
 8008f0e:	071b      	lsls	r3, r3, #28
 8008f10:	d400      	bmi.n	8008f14 <CheckAttachedButtons+0x340>
 8008f12:	e77a      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f14:	4b3a      	ldr	r3, [pc, #232]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	9803      	ldr	r0, [sp, #12]
 8008f1e:	f7ff fe56 	bl	8008bce <buttonPressedForXCallback>
 8008f22:	e772      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8008f24:	4b36      	ldr	r3, [pc, #216]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d000      	beq.n	8008f2e <CheckAttachedButtons+0x35a>
 8008f2c:	e76d      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f2e:	4643      	mov	r3, r8
 8008f30:	7a1b      	ldrb	r3, [r3, #8]
 8008f32:	06db      	lsls	r3, r3, #27
 8008f34:	d400      	bmi.n	8008f38 <CheckAttachedButtons+0x364>
 8008f36:	e768      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f38:	4b31      	ldr	r3, [pc, #196]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8008f3e:	2103      	movs	r1, #3
 8008f40:	9803      	ldr	r0, [sp, #12]
 8008f42:	f7ff fe44 	bl	8008bce <buttonPressedForXCallback>
 8008f46:	e760      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 8008f48:	4b2d      	ldr	r3, [pc, #180]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d000      	beq.n	8008f52 <CheckAttachedButtons+0x37e>
 8008f50:	e75b      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f52:	4643      	mov	r3, r8
 8008f54:	7a1b      	ldrb	r3, [r3, #8]
 8008f56:	069b      	lsls	r3, r3, #26
 8008f58:	d400      	bmi.n	8008f5c <CheckAttachedButtons+0x388>
 8008f5a:	e756      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f5c:	4b28      	ldr	r3, [pc, #160]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 8008f62:	2101      	movs	r1, #1
 8008f64:	9803      	ldr	r0, [sp, #12]
 8008f66:	f7ff fe33 	bl	8008bd0 <buttonReleasedForYCallback>
 8008f6a:	e74e      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 8008f6c:	4b24      	ldr	r3, [pc, #144]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d000      	beq.n	8008f76 <CheckAttachedButtons+0x3a2>
 8008f74:	e749      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f76:	4643      	mov	r3, r8
 8008f78:	7a1b      	ldrb	r3, [r3, #8]
 8008f7a:	065b      	lsls	r3, r3, #25
 8008f7c:	d400      	bmi.n	8008f80 <CheckAttachedButtons+0x3ac>
 8008f7e:	e744      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f80:	4b1f      	ldr	r3, [pc, #124]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f82:	2201      	movs	r2, #1
 8008f84:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8008f86:	2102      	movs	r1, #2
 8008f88:	9803      	ldr	r0, [sp, #12]
 8008f8a:	f7ff fe21 	bl	8008bd0 <buttonReleasedForYCallback>
 8008f8e:	e73c      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 8008f90:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d000      	beq.n	8008f9a <CheckAttachedButtons+0x3c6>
 8008f98:	e737      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f9a:	4643      	mov	r3, r8
 8008f9c:	7a1b      	ldrb	r3, [r3, #8]
 8008f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008fa0:	d800      	bhi.n	8008fa4 <CheckAttachedButtons+0x3d0>
 8008fa2:	e732      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008fa4:	4b16      	ldr	r3, [pc, #88]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 8008faa:	2103      	movs	r1, #3
 8008fac:	9803      	ldr	r0, [sp, #12]
 8008fae:	f7ff fe0f 	bl	8008bd0 <buttonReleasedForYCallback>
 8008fb2:	e72a      	b.n	8008e0a <CheckAttachedButtons+0x236>
						state =OPEN;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	469b      	mov	fp, r3
 8008fb8:	e000      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
						state =OFF;
 8008fba:	46cb      	mov	fp, r9
				if(releaseCounter[i] < 0xFFFF)
 8008fbc:	4b11      	ldr	r3, [pc, #68]	; (8009004 <CheckAttachedButtons+0x430>)
 8008fbe:	58e3      	ldr	r3, [r4, r3]
 8008fc0:	4a11      	ldr	r2, [pc, #68]	; (8009008 <CheckAttachedButtons+0x434>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d900      	bls.n	8008fc8 <CheckAttachedButtons+0x3f4>
 8008fc6:	e680      	b.n	8008cca <CheckAttachedButtons+0xf6>
					++releaseCounter[i];		// Advance the debounce counter
 8008fc8:	3301      	adds	r3, #1
 8008fca:	4a0e      	ldr	r2, [pc, #56]	; (8009004 <CheckAttachedButtons+0x430>)
 8008fcc:	50a3      	str	r3, [r4, r2]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008fce:	4b0f      	ldr	r3, [pc, #60]	; (800900c <CheckAttachedButtons+0x438>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d100      	bne.n	8008fd8 <CheckAttachedButtons+0x404>
 8008fd6:	e67c      	b.n	8008cd2 <CheckAttachedButtons+0xfe>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <CheckAttachedButtons+0x43c>)
 8008fda:	5cf2      	ldrb	r2, [r6, r3]
 8008fdc:	4b0d      	ldr	r3, [pc, #52]	; (8009014 <CheckAttachedButtons+0x440>)
 8008fde:	795b      	ldrb	r3, [r3, #5]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d800      	bhi.n	8008fe6 <CheckAttachedButtons+0x412>
 8008fe4:	e633      	b.n	8008c4e <CheckAttachedButtons+0x7a>
					clicked =0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4a08      	ldr	r2, [pc, #32]	; (800900c <CheckAttachedButtons+0x438>)
 8008fea:	7013      	strb	r3, [r2, #0]
					dblCounter[i] =0;			// Reset the inter-click counter
 8008fec:	4a08      	ldr	r2, [pc, #32]	; (8009010 <CheckAttachedButtons+0x43c>)
 8008fee:	54b3      	strb	r3, [r6, r2]
 8008ff0:	e62d      	b.n	8008c4e <CheckAttachedButtons+0x7a>
}
 8008ff2:	b009      	add	sp, #36	; 0x24
 8008ff4:	bc3c      	pop	{r2, r3, r4, r5}
 8008ff6:	4690      	mov	r8, r2
 8008ff8:	4699      	mov	r9, r3
 8008ffa:	46a2      	mov	sl, r4
 8008ffc:	46ab      	mov	fp, r5
 8008ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009000:	20001567 	.word	0x20001567
 8009004:	2000158c 	.word	0x2000158c
 8009008:	0000fffe 	.word	0x0000fffe
 800900c:	2000155b 	.word	0x2000155b
 8009010:	20001560 	.word	0x20001560
 8009014:	20006aa0 	.word	0x20006aa0

08009018 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009018:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 800901a:	f007 f82b 	bl	8010074 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800901e:	b2c4      	uxtb	r4, r0
 8009020:	0020      	movs	r0, r4
 8009022:	f7fe fa6b 	bl	80074fc <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8009026:	0020      	movs	r0, r4
 8009028:	f7fe fa96 	bl	8007558 <SwitchStreamDMAToMsg>
}
 800902c:	bd10      	pop	{r4, pc}
	...

08009030 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8009030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009032:	b085      	sub	sp, #20
 8009034:	000d      	movs	r5, r1
 8009036:	0014      	movs	r4, r2
 8009038:	220f      	movs	r2, #15
 800903a:	446a      	add	r2, sp
 800903c:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800903e:	aa0a      	add	r2, sp, #40	; 0x28
 8009040:	7812      	ldrb	r2, [r2, #0]
 8009042:	4293      	cmp	r3, r2
 8009044:	d058      	beq.n	80090f8 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8009046:	2b00      	cmp	r3, #0
 8009048:	d100      	bne.n	800904c <SetupDMAStreams+0x1c>
 800904a:	e0be      	b.n	80091ca <SetupDMAStreams+0x19a>
 800904c:	2a00      	cmp	r2, #0
 800904e:	d100      	bne.n	8009052 <SetupDMAStreams+0x22>
 8009050:	e0bf      	b.n	80091d2 <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 8009052:	2800      	cmp	r0, #0
 8009054:	d055      	beq.n	8009102 <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 8009056:	2801      	cmp	r0, #1
 8009058:	d100      	bne.n	800905c <SetupDMAStreams+0x2c>
 800905a:	e08b      	b.n	8009174 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 800905c:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 800905e:	2802      	cmp	r0, #2
 8009060:	d000      	beq.n	8009064 <SetupDMAStreams+0x34>
 8009062:	e0b3      	b.n	80091cc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009064:	0018      	movs	r0, r3
 8009066:	f004 ff2b 	bl	800dec0 <GetUart>
 800906a:	0006      	movs	r6, r0
 800906c:	ab0a      	add	r3, sp, #40	; 0x28
 800906e:	7818      	ldrb	r0, [r3, #0]
 8009070:	f004 ff26 	bl	800dec0 <GetUart>
 8009074:	0001      	movs	r1, r0
 8009076:	2201      	movs	r2, #1
 8009078:	0030      	movs	r0, r6
 800907a:	f7fe fa9f 	bl	80075bc <StartDMAstream>
 800907e:	0002      	movs	r2, r0
 8009080:	2817      	cmp	r0, #23
 8009082:	d100      	bne.n	8009086 <SetupDMAStreams+0x56>
 8009084:	e0a2      	b.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009086:	0160      	lsls	r0, r4, #5
 8009088:	1b00      	subs	r0, r0, r4
 800908a:	0080      	lsls	r0, r0, #2
 800908c:	1900      	adds	r0, r0, r4
 800908e:	00c0      	lsls	r0, r0, #3
 8009090:	21fa      	movs	r1, #250	; 0xfa
 8009092:	0089      	lsls	r1, r1, #2
 8009094:	f7f7 f85c 	bl	8000150 <__udivsi3>
 8009098:	0004      	movs	r4, r0
 800909a:	260f      	movs	r6, #15
 800909c:	446e      	add	r6, sp
 800909e:	4b4e      	ldr	r3, [pc, #312]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	0033      	movs	r3, r6
 80090a4:	2200      	movs	r2, #0
 80090a6:	0001      	movs	r1, r0
 80090a8:	484c      	ldr	r0, [pc, #304]	; (80091dc <SetupDMAStreams+0x1ac>)
 80090aa:	f006 fe87 	bl	800fdbc <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80090ae:	7833      	ldrb	r3, [r6, #0]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4a4a      	ldr	r2, [pc, #296]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80090b6:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80090b8:	ab0a      	add	r3, sp, #40	; 0x28
 80090ba:	7818      	ldrb	r0, [r3, #0]
 80090bc:	f004 ff00 	bl	800dec0 <GetUart>
 80090c0:	0007      	movs	r7, r0
 80090c2:	7830      	ldrb	r0, [r6, #0]
 80090c4:	f004 fefc 	bl	800dec0 <GetUart>
 80090c8:	0001      	movs	r1, r0
 80090ca:	2201      	movs	r2, #1
 80090cc:	0038      	movs	r0, r7
 80090ce:	f7fe fa75 	bl	80075bc <StartDMAstream>
 80090d2:	0002      	movs	r2, r0
 80090d4:	2817      	cmp	r0, #23
 80090d6:	d079      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80090d8:	4b3f      	ldr	r3, [pc, #252]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	ab0a      	add	r3, sp, #40	; 0x28
 80090de:	2200      	movs	r2, #0
 80090e0:	0021      	movs	r1, r4
 80090e2:	483e      	ldr	r0, [pc, #248]	; (80091dc <SetupDMAStreams+0x1ac>)
 80090e4:	f006 fe6a 	bl	800fdbc <xTimerCreate>
 80090e8:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 80090ea:	ab0a      	add	r3, sp, #40	; 0x28
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4a3b      	ldr	r2, [pc, #236]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80090f4:	509d      	str	r5, [r3, r2]
 80090f6:	e02d      	b.n	8009154 <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 80090f8:	4a3a      	ldr	r2, [pc, #232]	; (80091e4 <SetupDMAStreams+0x1b4>)
 80090fa:	2102      	movs	r1, #2
 80090fc:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 80090fe:	2267      	movs	r2, #103	; 0x67
 8009100:	e064      	b.n	80091cc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009102:	0018      	movs	r0, r3
 8009104:	f004 fedc 	bl	800dec0 <GetUart>
 8009108:	0006      	movs	r6, r0
 800910a:	ab0a      	add	r3, sp, #40	; 0x28
 800910c:	7818      	ldrb	r0, [r3, #0]
 800910e:	f004 fed7 	bl	800dec0 <GetUart>
 8009112:	0001      	movs	r1, r0
 8009114:	2201      	movs	r2, #1
 8009116:	0030      	movs	r0, r6
 8009118:	f7fe fa50 	bl	80075bc <StartDMAstream>
 800911c:	0002      	movs	r2, r0
 800911e:	2817      	cmp	r0, #23
 8009120:	d054      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009122:	260f      	movs	r6, #15
 8009124:	446e      	add	r6, sp
 8009126:	0160      	lsls	r0, r4, #5
 8009128:	1b00      	subs	r0, r0, r4
 800912a:	0080      	lsls	r0, r0, #2
 800912c:	1900      	adds	r0, r0, r4
 800912e:	00c0      	lsls	r0, r0, #3
 8009130:	21fa      	movs	r1, #250	; 0xfa
 8009132:	0089      	lsls	r1, r1, #2
 8009134:	f7f7 f80c 	bl	8000150 <__udivsi3>
 8009138:	0001      	movs	r1, r0
 800913a:	4b27      	ldr	r3, [pc, #156]	; (80091d8 <SetupDMAStreams+0x1a8>)
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	0033      	movs	r3, r6
 8009140:	2200      	movs	r2, #0
 8009142:	4826      	ldr	r0, [pc, #152]	; (80091dc <SetupDMAStreams+0x1ac>)
 8009144:	f006 fe3a 	bl	800fdbc <xTimerCreate>
 8009148:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 800914a:	7833      	ldrb	r3, [r6, #0]
 800914c:	3b01      	subs	r3, #1
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4a23      	ldr	r2, [pc, #140]	; (80091e0 <SetupDMAStreams+0x1b0>)
 8009152:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8009154:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 8009156:	2c00      	cmp	r4, #0
 8009158:	d038      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 800915a:	f006 f84f 	bl	800f1fc <xTaskGetTickCount>
 800915e:	0002      	movs	r2, r0
 8009160:	2301      	movs	r3, #1
 8009162:	425b      	negs	r3, r3
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	2300      	movs	r3, #0
 8009168:	2101      	movs	r1, #1
 800916a:	0020      	movs	r0, r4
 800916c:	f006 fe46 	bl	800fdfc <xTimerGenericCommand>
	return BOS_OK;
 8009170:	2200      	movs	r2, #0
 8009172:	e02b      	b.n	80091cc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009174:	0010      	movs	r0, r2
 8009176:	f004 fea3 	bl	800dec0 <GetUart>
 800917a:	0006      	movs	r6, r0
 800917c:	230f      	movs	r3, #15
 800917e:	446b      	add	r3, sp
 8009180:	7818      	ldrb	r0, [r3, #0]
 8009182:	f004 fe9d 	bl	800dec0 <GetUart>
 8009186:	0001      	movs	r1, r0
 8009188:	2201      	movs	r2, #1
 800918a:	0030      	movs	r0, r6
 800918c:	f7fe fa16 	bl	80075bc <StartDMAstream>
 8009190:	0002      	movs	r2, r0
 8009192:	2817      	cmp	r0, #23
 8009194:	d01a      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009196:	0160      	lsls	r0, r4, #5
 8009198:	1b00      	subs	r0, r0, r4
 800919a:	0080      	lsls	r0, r0, #2
 800919c:	1900      	adds	r0, r0, r4
 800919e:	00c0      	lsls	r0, r0, #3
 80091a0:	21fa      	movs	r1, #250	; 0xfa
 80091a2:	0089      	lsls	r1, r1, #2
 80091a4:	f7f6 ffd4 	bl	8000150 <__udivsi3>
 80091a8:	0001      	movs	r1, r0
 80091aa:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	ab0a      	add	r3, sp, #40	; 0x28
 80091b0:	2200      	movs	r2, #0
 80091b2:	480a      	ldr	r0, [pc, #40]	; (80091dc <SetupDMAStreams+0x1ac>)
 80091b4:	f006 fe02 	bl	800fdbc <xTimerCreate>
 80091b8:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80091ba:	230f      	movs	r3, #15
 80091bc:	446b      	add	r3, sp
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4a06      	ldr	r2, [pc, #24]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80091c6:	509d      	str	r5, [r3, r2]
 80091c8:	e7c4      	b.n	8009154 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 80091ca:	2267      	movs	r2, #103	; 0x67
}
 80091cc:	0010      	movs	r0, r2
 80091ce:	b005      	add	sp, #20
 80091d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 80091d2:	2267      	movs	r2, #103	; 0x67
 80091d4:	e7fa      	b.n	80091cc <SetupDMAStreams+0x19c>
 80091d6:	46c0      	nop			; (mov r8, r8)
 80091d8:	08009019 	.word	0x08009019
 80091dc:	0801afcc 	.word	0x0801afcc
 80091e0:	200014c0 	.word	0x200014c0
 80091e4:	200010f8 	.word	0x200010f8

080091e8 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 80091e8:	b510      	push	{r4, lr}
	switch(port){
 80091ea:	2806      	cmp	r0, #6
 80091ec:	d80a      	bhi.n	8009204 <NotifyMessagingTask+0x1c>
 80091ee:	0080      	lsls	r0, r0, #2
 80091f0:	4b19      	ldr	r3, [pc, #100]	; (8009258 <NotifyMessagingTask+0x70>)
 80091f2:	581b      	ldr	r3, [r3, r0]
 80091f4:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <NotifyMessagingTask+0x74>)
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	2300      	movs	r3, #0
 80091fc:	2202      	movs	r2, #2
 80091fe:	2100      	movs	r1, #0
 8009200:	f006 fd0c 	bl	800fc1c <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009204:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8009206:	4b16      	ldr	r3, [pc, #88]	; (8009260 <NotifyMessagingTask+0x78>)
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	2300      	movs	r3, #0
 800920c:	2202      	movs	r2, #2
 800920e:	2100      	movs	r1, #0
 8009210:	f006 fd04 	bl	800fc1c <xTaskGenericNotify>
			break;
 8009214:	e7f6      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009216:	4b13      	ldr	r3, [pc, #76]	; (8009264 <NotifyMessagingTask+0x7c>)
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	2300      	movs	r3, #0
 800921c:	2202      	movs	r2, #2
 800921e:	2100      	movs	r1, #0
 8009220:	f006 fcfc 	bl	800fc1c <xTaskGenericNotify>
			break;
 8009224:	e7ee      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 8009226:	4b10      	ldr	r3, [pc, #64]	; (8009268 <NotifyMessagingTask+0x80>)
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	2300      	movs	r3, #0
 800922c:	2202      	movs	r2, #2
 800922e:	2100      	movs	r1, #0
 8009230:	f006 fcf4 	bl	800fc1c <xTaskGenericNotify>
			break;
 8009234:	e7e6      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 8009236:	4b0d      	ldr	r3, [pc, #52]	; (800926c <NotifyMessagingTask+0x84>)
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	2300      	movs	r3, #0
 800923c:	2202      	movs	r2, #2
 800923e:	2100      	movs	r1, #0
 8009240:	f006 fcec 	bl	800fc1c <xTaskGenericNotify>
			break;
 8009244:	e7de      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle)
 8009246:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <NotifyMessagingTask+0x88>)
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	2202      	movs	r2, #2
 800924e:	2100      	movs	r1, #0
 8009250:	f006 fce4 	bl	800fc1c <xTaskGenericNotify>
}
 8009254:	e7d6      	b.n	8009204 <NotifyMessagingTask+0x1c>
 8009256:	46c0      	nop			; (mov r8, r8)
 8009258:	0801afb0 	.word	0x0801afb0
 800925c:	200014e0 	.word	0x200014e0
 8009260:	200014e4 	.word	0x200014e4
 8009264:	200014e8 	.word	0x200014e8
 8009268:	200014ec 	.word	0x200014ec
 800926c:	200014f0 	.word	0x200014f0
 8009270:	200014f4 	.word	0x200014f4

08009274 <SendMessageFromPort>:
 6   !0        0					!0							Either single-cast message with myID as source module OR (if code == 0)
 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7   !0        !0				0								Not allowed.
 8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009276:	46de      	mov	lr, fp
 8009278:	4657      	mov	r7, sl
 800927a:	464e      	mov	r6, r9
 800927c:	4645      	mov	r5, r8
 800927e:	b5e0      	push	{r5, r6, r7, lr}
 8009280:	b085      	sub	sp, #20
 8009282:	4680      	mov	r8, r0
 8009284:	468b      	mov	fp, r1
 8009286:	0014      	movs	r4, r2
 8009288:	469a      	mov	sl, r3
 800928a:	ab0e      	add	r3, sp, #56	; 0x38
 800928c:	881d      	ldrh	r5, [r3, #0]
	static uint16_t ptrShift =0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 800928e:	0003      	movs	r3, r0
 8009290:	4313      	orrs	r3, r2
 8009292:	d100      	bne.n	8009296 <SendMessageFromPort+0x22>
 8009294:	e170      	b.n	8009578 <SendMessageFromPort+0x304>
 8009296:	2800      	cmp	r0, #0
 8009298:	d147      	bne.n	800932a <SendMessageFromPort+0xb6>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800929a:	1c93      	adds	r3, r2, #2
 800929c:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 800929e:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d900      	bls.n	80092a6 <SendMessageFromPort+0x32>
 80092a4:	e149      	b.n	800953a <SendMessageFromPort+0x2c6>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80092a6:	2000      	movs	r0, #0
 80092a8:	f005 ff10 	bl	800f0cc <uxTaskPriorityGet>
 80092ac:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80092ae:	2105      	movs	r1, #5
 80092b0:	2000      	movs	r0, #0
 80092b2:	f005 ff1b 	bl	800f0ec <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 80092b6:	4bbe      	ldr	r3, [pc, #760]	; (80095b0 <SendMessageFromPort+0x33c>)
 80092b8:	2248      	movs	r2, #72	; 0x48
 80092ba:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80092bc:	3212      	adds	r2, #18
 80092be:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80092c0:	465b      	mov	r3, fp
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d000      	beq.n	80092c8 <SendMessageFromPort+0x54>
 80092c6:	e16d      	b.n	80095a4 <SendMessageFromPort+0x330>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 80092c8:	3d01      	subs	r5, #1
 80092ca:	4bba      	ldr	r3, [pc, #744]	; (80095b4 <SendMessageFromPort+0x340>)
 80092cc:	5d5f      	ldrb	r7, [r3, r5]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80092ce:	4eba      	ldr	r6, [pc, #744]	; (80095b8 <SendMessageFromPort+0x344>)
 80092d0:	00e9      	lsls	r1, r5, #3
 80092d2:	1b49      	subs	r1, r1, r5
 80092d4:	00c9      	lsls	r1, r1, #3
 80092d6:	4db9      	ldr	r5, [pc, #740]	; (80095bc <SendMessageFromPort+0x348>)
 80092d8:	1949      	adds	r1, r1, r5
 80092da:	003a      	movs	r2, r7
 80092dc:	0030      	movs	r0, r6
 80092de:	f00a fd38 	bl	8013d52 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 80092e2:	3e03      	subs	r6, #3
 80092e4:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 80092e6:	1cfd      	adds	r5, r7, #3
 80092e8:	002a      	movs	r2, r5
 80092ea:	0031      	movs	r1, r6
 80092ec:	48b4      	ldr	r0, [pc, #720]	; (80095c0 <SendMessageFromPort+0x34c>)
 80092ee:	f00a fd30 	bl	8013d52 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 80092f2:	b2bf      	uxth	r7, r7
 80092f4:	1cf9      	adds	r1, r7, #3
 80092f6:	48b2      	ldr	r0, [pc, #712]	; (80095c0 <SendMessageFromPort+0x34c>)
 80092f8:	f003 ffe8 	bl	800d2cc <CalculateCRC8>
 80092fc:	5570      	strb	r0, [r6, r5]
	/* end of crc calculation function addition */

//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
	memset(crcBuffer,0,sizeof(crcBuffer));
 80092fe:	2238      	movs	r2, #56	; 0x38
 8009300:	2100      	movs	r1, #0
 8009302:	48af      	ldr	r0, [pc, #700]	; (80095c0 <SendMessageFromPort+0x34c>)
 8009304:	f00a fd2e 	bl	8013d64 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009308:	3402      	adds	r4, #2
 800930a:	b2e4      	uxtb	r4, r4
 800930c:	2c01      	cmp	r4, #1
 800930e:	d900      	bls.n	8009312 <SendMessageFromPort+0x9e>
 8009310:	e104      	b.n	800951c <SendMessageFromPort+0x2a8>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else{
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8009312:	4653      	mov	r3, sl
 8009314:	2b00      	cmp	r3, #0
 8009316:	d000      	beq.n	800931a <SendMessageFromPort+0xa6>
 8009318:	e0f5      	b.n	8009506 <SendMessageFromPort+0x292>
 800931a:	465b      	mov	r3, fp
 800931c:	2b00      	cmp	r3, #0
 800931e:	d000      	beq.n	8009322 <SendMessageFromPort+0xae>
 8009320:	e0f1      	b.n	8009506 <SendMessageFromPort+0x292>
			src =message[4];
 8009322:	4ba3      	ldr	r3, [pc, #652]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009324:	791b      	ldrb	r3, [r3, #4]
 8009326:	469b      	mov	fp, r3
 8009328:	e0ed      	b.n	8009506 <SendMessageFromPort+0x292>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 800932a:	2900      	cmp	r1, #0
 800932c:	d002      	beq.n	8009334 <SendMessageFromPort+0xc0>
 800932e:	2a00      	cmp	r2, #0
 8009330:	d100      	bne.n	8009334 <SendMessageFromPort+0xc0>
 8009332:	e123      	b.n	800957c <SendMessageFromPort+0x308>
	TaskPriority =uxTaskPriorityGet( NULL);
 8009334:	2000      	movs	r0, #0
 8009336:	f005 fec9 	bl	800f0cc <uxTaskPriorityGet>
 800933a:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 800933c:	2105      	movs	r1, #5
 800933e:	2000      	movs	r0, #0
 8009340:	f005 fed4 	bl	800f0ec <vTaskPrioritySet>
	message[0] ='H';
 8009344:	4b9a      	ldr	r3, [pc, #616]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009346:	2248      	movs	r2, #72	; 0x48
 8009348:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 800934a:	3212      	adds	r2, #18
 800934c:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800934e:	4653      	mov	r3, sl
 8009350:	2b00      	cmp	r3, #0
 8009352:	d0b9      	beq.n	80092c8 <SendMessageFromPort+0x54>
		if(src == 0)
 8009354:	465b      	mov	r3, fp
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <SendMessageFromPort+0xec>
			src =myID;
 800935a:	4b9a      	ldr	r3, [pc, #616]	; (80095c4 <SendMessageFromPort+0x350>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	469b      	mov	fp, r3
		message[2] =length;
 8009360:	4993      	ldr	r1, [pc, #588]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009362:	2300      	movs	r3, #0
 8009364:	708b      	strb	r3, [r1, #2]
		message[3] =dst;
 8009366:	70cc      	strb	r4, [r1, #3]
		message[4] =src;
 8009368:	465b      	mov	r3, fp
 800936a:	710b      	strb	r3, [r1, #4]
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 800936c:	4a96      	ldr	r2, [pc, #600]	; (80095c8 <SendMessageFromPort+0x354>)
 800936e:	79d3      	ldrb	r3, [r2, #7]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	7992      	ldrb	r2, [r2, #6]
 8009374:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8009376:	22ff      	movs	r2, #255	; 0xff
 8009378:	4552      	cmp	r2, sl
 800937a:	4192      	sbcs	r2, r2
 800937c:	4252      	negs	r2, r2
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 800937e:	0052      	lsls	r2, r2, #1
 8009380:	4313      	orrs	r3, r2
 8009382:	b2db      	uxtb	r3, r3
 8009384:	714b      	strb	r3, [r1, #5]
		message[6 + shift] =(uint8_t )code;
 8009386:	4652      	mov	r2, sl
 8009388:	718a      	strb	r2, [r1, #6]
 800938a:	2200      	movs	r2, #0
 800938c:	4691      	mov	r9, r2
		if(extendCode == true){
 800938e:	4652      	mov	r2, sl
 8009390:	2aff      	cmp	r2, #255	; 0xff
 8009392:	d903      	bls.n	800939c <SendMessageFromPort+0x128>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009394:	0a12      	lsrs	r2, r2, #8
 8009396:	71ca      	strb	r2, [r1, #7]
			++shift;
 8009398:	2201      	movs	r2, #1
 800939a:	4691      	mov	r9, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 800939c:	2d2e      	cmp	r5, #46	; 0x2e
 800939e:	d92f      	bls.n	8009400 <SendMessageFromPort+0x18c>
			message[5] |=0x80;
 80093a0:	2280      	movs	r2, #128	; 0x80
 80093a2:	4252      	negs	r2, r2
 80093a4:	4313      	orrs	r3, r2
 80093a6:	4a82      	ldr	r2, [pc, #520]	; (80095b0 <SendMessageFromPort+0x33c>)
 80093a8:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 80093aa:	4b88      	ldr	r3, [pc, #544]	; (80095cc <SendMessageFromPort+0x358>)
 80093ac:	801d      	strh	r5, [r3, #0]
	uint8_t length =0, shift =0;
 80093ae:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80093b0:	252e      	movs	r5, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80093b2:	464b      	mov	r3, r9
 80093b4:	3307      	adds	r3, #7
 80093b6:	4694      	mov	ip, r2
 80093b8:	4463      	add	r3, ip
 80093ba:	9303      	str	r3, [sp, #12]
			while(totalNumberOfParams != 0){
 80093bc:	4b83      	ldr	r3, [pc, #524]	; (80095cc <SendMessageFromPort+0x358>)
 80093be:	881f      	ldrh	r7, [r3, #0]
 80093c0:	2f00      	cmp	r7, #0
 80093c2:	d02b      	beq.n	800941c <SendMessageFromPort+0x1a8>
				if((totalNumberOfParams / numberOfParams) >= 1){
 80093c4:	0029      	movs	r1, r5
 80093c6:	0038      	movs	r0, r7
 80093c8:	f7f6 fec2 	bl	8000150 <__udivsi3>
 80093cc:	b280      	uxth	r0, r0
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d140      	bne.n	8009454 <SendMessageFromPort+0x1e0>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 80093d2:	4b77      	ldr	r3, [pc, #476]	; (80095b0 <SendMessageFromPort+0x33c>)
 80093d4:	795a      	ldrb	r2, [r3, #5]
 80093d6:	237f      	movs	r3, #127	; 0x7f
 80093d8:	4013      	ands	r3, r2
 80093da:	4a75      	ldr	r2, [pc, #468]	; (80095b0 <SendMessageFromPort+0x33c>)
 80093dc:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80093de:	4d7c      	ldr	r5, [pc, #496]	; (80095d0 <SendMessageFromPort+0x35c>)
 80093e0:	8829      	ldrh	r1, [r5, #0]
 80093e2:	4b7c      	ldr	r3, [pc, #496]	; (80095d4 <SendMessageFromPort+0x360>)
 80093e4:	18c9      	adds	r1, r1, r3
 80093e6:	003a      	movs	r2, r7
 80093e8:	9803      	ldr	r0, [sp, #12]
 80093ea:	f00a fcb2 	bl	8013d52 <memcpy>
					ptrShift =0;
 80093ee:	2300      	movs	r3, #0
 80093f0:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 80093f2:	4a76      	ldr	r2, [pc, #472]	; (80095cc <SendMessageFromPort+0x358>)
 80093f4:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 80093f6:	1d3e      	adds	r6, r7, #4
 80093f8:	444e      	add	r6, r9
 80093fa:	b2f6      	uxtb	r6, r6
					numberOfParams =totalNumberOfParams;
 80093fc:	003d      	movs	r5, r7
 80093fe:	e7dd      	b.n	80093bc <SendMessageFromPort+0x148>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009400:	464b      	mov	r3, r9
 8009402:	3307      	adds	r3, #7
 8009404:	486a      	ldr	r0, [pc, #424]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009406:	1818      	adds	r0, r3, r0
 8009408:	4b71      	ldr	r3, [pc, #452]	; (80095d0 <SendMessageFromPort+0x35c>)
 800940a:	8819      	ldrh	r1, [r3, #0]
 800940c:	4b71      	ldr	r3, [pc, #452]	; (80095d4 <SendMessageFromPort+0x360>)
 800940e:	18c9      	adds	r1, r1, r3
 8009410:	002a      	movs	r2, r5
 8009412:	f00a fc9e 	bl	8013d52 <memcpy>
			length =numberOfParams + shift + 4;
 8009416:	1d2e      	adds	r6, r5, #4
 8009418:	444e      	add	r6, r9
 800941a:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true){
 800941c:	4b6e      	ldr	r3, [pc, #440]	; (80095d8 <SendMessageFromPort+0x364>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d057      	beq.n	80094d4 <SendMessageFromPort+0x260>
			if(dstGroupID < BOS_BROADCAST){
 8009424:	4b6d      	ldr	r3, [pc, #436]	; (80095dc <SendMessageFromPort+0x368>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2bff      	cmp	r3, #255	; 0xff
 800942a:	d100      	bne.n	800942e <SendMessageFromPort+0x1ba>
 800942c:	e0aa      	b.n	8009584 <SendMessageFromPort+0x310>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800942e:	4a6c      	ldr	r2, [pc, #432]	; (80095e0 <SendMessageFromPort+0x36c>)
 8009430:	7812      	ldrb	r2, [r2, #0]
 8009432:	4694      	mov	ip, r2
 8009434:	2a00      	cmp	r2, #0
 8009436:	d06f      	beq.n	8009518 <SendMessageFromPort+0x2a4>
 8009438:	2701      	movs	r7, #1
 800943a:	409f      	lsls	r7, r3
 800943c:	4869      	ldr	r0, [pc, #420]	; (80095e4 <SendMessageFromPort+0x370>)
 800943e:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8009440:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009442:	495b      	ldr	r1, [pc, #364]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009444:	468a      	mov	sl, r1
 8009446:	44aa      	add	sl, r5
 8009448:	0021      	movs	r1, r4
 800944a:	4664      	mov	r4, ip
 800944c:	46b4      	mov	ip, r6
 800944e:	464e      	mov	r6, r9
 8009450:	4689      	mov	r9, r1
 8009452:	e017      	b.n	8009484 <SendMessageFromPort+0x210>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009454:	9500      	str	r5, [sp, #0]
 8009456:	4653      	mov	r3, sl
 8009458:	0022      	movs	r2, r4
 800945a:	4659      	mov	r1, fp
 800945c:	4640      	mov	r0, r8
 800945e:	f7ff ff09 	bl	8009274 <SendMessageFromPort>
					osDelay(10);
 8009462:	200a      	movs	r0, #10
 8009464:	f004 fe7b 	bl	800e15e <osDelay>
					totalNumberOfParams -=numberOfParams;
 8009468:	4a58      	ldr	r2, [pc, #352]	; (80095cc <SendMessageFromPort+0x358>)
 800946a:	8813      	ldrh	r3, [r2, #0]
 800946c:	1b5b      	subs	r3, r3, r5
 800946e:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 8009470:	4a57      	ldr	r2, [pc, #348]	; (80095d0 <SendMessageFromPort+0x35c>)
 8009472:	8813      	ldrh	r3, [r2, #0]
 8009474:	18eb      	adds	r3, r5, r3
 8009476:	8013      	strh	r3, [r2, #0]
 8009478:	e7a0      	b.n	80093bc <SendMessageFromPort+0x148>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800947a:	3301      	adds	r3, #1
 800947c:	b29b      	uxth	r3, r3
 800947e:	3002      	adds	r0, #2
 8009480:	42a3      	cmp	r3, r4
 8009482:	d80e      	bhi.n	80094a2 <SendMessageFromPort+0x22e>
					if(InGroup(i,dstGroupID)){
 8009484:	8801      	ldrh	r1, [r0, #0]
 8009486:	420f      	tst	r7, r1
 8009488:	d0f7      	beq.n	800947a <SendMessageFromPort+0x206>
						++groupMembers;							// Add this member
 800948a:	3201      	adds	r2, #1
 800948c:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 800948e:	18a9      	adds	r1, r5, r2
 8009490:	3101      	adds	r1, #1
 8009492:	292d      	cmp	r1, #45	; 0x2d
 8009494:	dd00      	ble.n	8009498 <SendMessageFromPort+0x224>
 8009496:	e073      	b.n	8009580 <SendMessageFromPort+0x30c>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009498:	4651      	mov	r1, sl
 800949a:	1889      	adds	r1, r1, r2
 800949c:	1989      	adds	r1, r1, r6
 800949e:	718b      	strb	r3, [r1, #6]
 80094a0:	e7eb      	b.n	800947a <SendMessageFromPort+0x206>
 80094a2:	464c      	mov	r4, r9
 80094a4:	46b1      	mov	r9, r6
 80094a6:	4666      	mov	r6, ip
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80094a8:	464b      	mov	r3, r9
 80094aa:	3307      	adds	r3, #7
 80094ac:	195b      	adds	r3, r3, r5
 80094ae:	189b      	adds	r3, r3, r2
 80094b0:	493f      	ldr	r1, [pc, #252]	; (80095b0 <SendMessageFromPort+0x33c>)
 80094b2:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80094b4:	18ad      	adds	r5, r5, r2
 80094b6:	3502      	adds	r5, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80094b8:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80094ba:	2d2d      	cmp	r5, #45	; 0x2d
 80094bc:	dc3d      	bgt.n	800953a <SendMessageFromPort+0x2c6>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80094be:	484a      	ldr	r0, [pc, #296]	; (80095e8 <SendMessageFromPort+0x374>)
 80094c0:	7801      	ldrb	r1, [r0, #0]
 80094c2:	3101      	adds	r1, #1
 80094c4:	b2c9      	uxtb	r1, r1
 80094c6:	7001      	strb	r1, [r0, #0]
 80094c8:	4839      	ldr	r0, [pc, #228]	; (80095b0 <SendMessageFromPort+0x33c>)
 80094ca:	18c3      	adds	r3, r0, r3
 80094cc:	7059      	strb	r1, [r3, #1]
 80094ce:	3602      	adds	r6, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80094d0:	18b6      	adds	r6, r6, r2
 80094d2:	b2f6      	uxtb	r6, r6
	message[2] =length;
 80094d4:	4b36      	ldr	r3, [pc, #216]	; (80095b0 <SendMessageFromPort+0x33c>)
 80094d6:	469a      	mov	sl, r3
 80094d8:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 80094da:	1cf5      	adds	r5, r6, #3
 80094dc:	002a      	movs	r2, r5
 80094de:	0019      	movs	r1, r3
 80094e0:	4837      	ldr	r0, [pc, #220]	; (80095c0 <SendMessageFromPort+0x34c>)
 80094e2:	f00a fc36 	bl	8013d52 <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 80094e6:	b2b7      	uxth	r7, r6
 80094e8:	0029      	movs	r1, r5
 80094ea:	4835      	ldr	r0, [pc, #212]	; (80095c0 <SendMessageFromPort+0x34c>)
 80094ec:	f003 feee 	bl	800d2cc <CalculateCRC8>
 80094f0:	4653      	mov	r3, sl
 80094f2:	5558      	strb	r0, [r3, r5]
	memset(crcBuffer,0,sizeof(crcBuffer));
 80094f4:	2238      	movs	r2, #56	; 0x38
 80094f6:	2100      	movs	r1, #0
 80094f8:	4831      	ldr	r0, [pc, #196]	; (80095c0 <SendMessageFromPort+0x34c>)
 80094fa:	f00a fc33 	bl	8013d64 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80094fe:	3402      	adds	r4, #2
 8009500:	b2e4      	uxtb	r4, r4
 8009502:	2c01      	cmp	r4, #1
 8009504:	d80a      	bhi.n	800951c <SendMessageFromPort+0x2a8>
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009506:	4658      	mov	r0, fp
 8009508:	f7fa f982 	bl	8003810 <FindBroadcastRoutes>
 800950c:	2500      	movs	r5, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800950e:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009510:	4b36      	ldr	r3, [pc, #216]	; (80095ec <SendMessageFromPort+0x378>)
 8009512:	4698      	mov	r8, r3
 8009514:	4e2b      	ldr	r6, [pc, #172]	; (80095c4 <SendMessageFromPort+0x350>)
 8009516:	e01c      	b.n	8009552 <SendMessageFromPort+0x2de>
			uint8_t groupMembers =0;
 8009518:	2200      	movs	r2, #0
 800951a:	e7c5      	b.n	80094a8 <SendMessageFromPort+0x234>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
 800951c:	1d3a      	adds	r2, r7, #4
 800951e:	b292      	uxth	r2, r2
 8009520:	2332      	movs	r3, #50	; 0x32
 8009522:	4923      	ldr	r1, [pc, #140]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009524:	4640      	mov	r0, r8
 8009526:	f004 fd37 	bl	800df98 <writePxDMAMutex>
			}
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 800952a:	9902      	ldr	r1, [sp, #8]
 800952c:	2000      	movs	r0, #0
 800952e:	f005 fddd 	bl	800f0ec <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8009532:	4b2f      	ldr	r3, [pc, #188]	; (80095f0 <SendMessageFromPort+0x37c>)
 8009534:	2202      	movs	r2, #2
 8009536:	701a      	strb	r2, [r3, #0]
	
	return result;
 8009538:	2000      	movs	r0, #0
}
 800953a:	b005      	add	sp, #20
 800953c:	bc3c      	pop	{r2, r3, r4, r5}
 800953e:	4690      	mov	r8, r2
 8009540:	4699      	mov	r9, r3
 8009542:	46a2      	mov	sl, r4
 8009544:	46ab      	mov	fp, r5
 8009546:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009548:	3401      	adds	r4, #1
 800954a:	b2e4      	uxtb	r4, r4
 800954c:	3501      	adds	r5, #1
 800954e:	2c07      	cmp	r4, #7
 8009550:	d0eb      	beq.n	800952a <SendMessageFromPort+0x2b6>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009552:	7833      	ldrb	r3, [r6, #0]
 8009554:	3b01      	subs	r3, #1
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	4642      	mov	r2, r8
 800955a:	5a9b      	ldrh	r3, [r3, r2]
 800955c:	412b      	asrs	r3, r5
 800955e:	07db      	lsls	r3, r3, #31
 8009560:	d5f2      	bpl.n	8009548 <SendMessageFromPort+0x2d4>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009562:	1d3a      	adds	r2, r7, #4
 8009564:	b292      	uxth	r2, r2
 8009566:	2332      	movs	r3, #50	; 0x32
 8009568:	4911      	ldr	r1, [pc, #68]	; (80095b0 <SendMessageFromPort+0x33c>)
 800956a:	0020      	movs	r0, r4
 800956c:	f004 fd14 	bl	800df98 <writePxDMAMutex>
				Delay_ms(1);
 8009570:	2001      	movs	r0, #1
 8009572:	f006 ff5f 	bl	8010434 <HAL_Delay>
 8009576:	e7e7      	b.n	8009548 <SendMessageFromPort+0x2d4>
		return BOS_ERR_WrongParam;
 8009578:	2067      	movs	r0, #103	; 0x67
 800957a:	e7de      	b.n	800953a <SendMessageFromPort+0x2c6>
 800957c:	2067      	movs	r0, #103	; 0x67
 800957e:	e7dc      	b.n	800953a <SendMessageFromPort+0x2c6>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009580:	2069      	movs	r0, #105	; 0x69
 8009582:	e7da      	b.n	800953a <SendMessageFromPort+0x2c6>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009584:	1c6b      	adds	r3, r5, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009586:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009588:	2b2d      	cmp	r3, #45	; 0x2d
 800958a:	dcd6      	bgt.n	800953a <SendMessageFromPort+0x2c6>
				message[7 + shift + numberOfParams] =++bcastID;
 800958c:	4a16      	ldr	r2, [pc, #88]	; (80095e8 <SendMessageFromPort+0x374>)
 800958e:	7813      	ldrb	r3, [r2, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	b2db      	uxtb	r3, r3
 8009594:	7013      	strb	r3, [r2, #0]
 8009596:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009598:	1955      	adds	r5, r2, r5
 800959a:	444d      	add	r5, r9
 800959c:	71eb      	strb	r3, [r5, #7]
				length +=1;		// + bcastID
 800959e:	3601      	adds	r6, #1
 80095a0:	b2f6      	uxtb	r6, r6
 80095a2:	e797      	b.n	80094d4 <SendMessageFromPort+0x260>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80095a4:	4653      	mov	r3, sl
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d100      	bne.n	80095ac <SendMessageFromPort+0x338>
 80095aa:	e68d      	b.n	80092c8 <SendMessageFromPort+0x54>
 80095ac:	e6d8      	b.n	8009360 <SendMessageFromPort+0xec>
 80095ae:	46c0      	nop			; (mov r8, r8)
 80095b0:	20000ef8 	.word	0x20000ef8
 80095b4:	20000f30 	.word	0x20000f30
 80095b8:	20000efb 	.word	0x20000efb
 80095bc:	20000d08 	.word	0x20000d08
 80095c0:	20001458 	.word	0x20001458
 80095c4:	20001076 	.word	0x20001076
 80095c8:	20006aa0 	.word	0x20006aa0
 80095cc:	200015b6 	.word	0x200015b6
 80095d0:	200015b4 	.word	0x200015b4
 80095d4:	20000f38 	.word	0x20000f38
 80095d8:	20000a74 	.word	0x20000a74
 80095dc:	2000001d 	.word	0x2000001d
 80095e0:	2000001c 	.word	0x2000001c
 80095e4:	20000ec0 	.word	0x20000ec0
 80095e8:	20000cb4 	.word	0x20000cb4
 80095ec:	20000cb8 	.word	0x20000cb8
 80095f0:	20001110 	.word	0x20001110

080095f4 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80095f4:	b530      	push	{r4, r5, lr}
 80095f6:	b083      	sub	sp, #12
 80095f8:	0005      	movs	r5, r0
	AddBcastPayload = false;
 80095fa:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <ForwardReceivedMessage+0x34>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009600:	1e42      	subs	r2, r0, #1
 8009602:	00d3      	lsls	r3, r2, #3
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	4a08      	ldr	r2, [pc, #32]	; (800962c <ForwardReceivedMessage+0x38>)
 800960a:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 800960c:	4b08      	ldr	r3, [pc, #32]	; (8009630 <ForwardReceivedMessage+0x3c>)
 800960e:	7818      	ldrb	r0, [r3, #0]
 8009610:	0021      	movs	r1, r4
 8009612:	f7fa f9cb 	bl	80039ac <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009616:	9500      	str	r5, [sp, #0]
 8009618:	2300      	movs	r3, #0
 800961a:	0022      	movs	r2, r4
 800961c:	2100      	movs	r1, #0
 800961e:	f7ff fe29 	bl	8009274 <SendMessageFromPort>
}
 8009622:	2000      	movs	r0, #0
 8009624:	b003      	add	sp, #12
 8009626:	bd30      	pop	{r4, r5, pc}
 8009628:	20000a74 	.word	0x20000a74
 800962c:	20000d08 	.word	0x20000d08
 8009630:	20001076 	.word	0x20001076

08009634 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009634:	b500      	push	{lr}
 8009636:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009638:	4b0c      	ldr	r3, [pc, #48]	; (800966c <BroadcastReceivedMessage+0x38>)
 800963a:	2200      	movs	r2, #0
 800963c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <BroadcastReceivedMessage+0x3c>)
 8009640:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009642:	28ff      	cmp	r0, #255	; 0xff
 8009644:	d009      	beq.n	800965a <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8009646:	9100      	str	r1, [sp, #0]
 8009648:	2300      	movs	r3, #0
 800964a:	22fe      	movs	r2, #254	; 0xfe
 800964c:	2100      	movs	r1, #0
 800964e:	2000      	movs	r0, #0
 8009650:	f7ff fe10 	bl	8009274 <SendMessageFromPort>
}
 8009654:	2000      	movs	r0, #0
 8009656:	b003      	add	sp, #12
 8009658:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 800965a:	9100      	str	r1, [sp, #0]
 800965c:	2300      	movs	r3, #0
 800965e:	32ff      	adds	r2, #255	; 0xff
 8009660:	2100      	movs	r1, #0
 8009662:	2000      	movs	r0, #0
 8009664:	f7ff fe06 	bl	8009274 <SendMessageFromPort>
 8009668:	e7f4      	b.n	8009654 <BroadcastReceivedMessage+0x20>
 800966a:	46c0      	nop			; (mov r8, r8)
 800966c:	20000a74 	.word	0x20000a74
 8009670:	2000001d 	.word	0x2000001d

08009674 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009674:	b530      	push	{r4, r5, lr}
 8009676:	b083      	sub	sp, #12
 8009678:	001c      	movs	r4, r3
	AddBcastPayload = true;
 800967a:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <BroadcastMessage+0x44>)
 800967c:	2501      	movs	r5, #1
 800967e:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009680:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <BroadcastMessage+0x48>)
 8009682:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009684:	29ff      	cmp	r1, #255	; 0xff
 8009686:	d00e      	beq.n	80096a6 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009688:	9400      	str	r4, [sp, #0]
 800968a:	0013      	movs	r3, r2
 800968c:	22fe      	movs	r2, #254	; 0xfe
 800968e:	0001      	movs	r1, r0
 8009690:	2000      	movs	r0, #0
 8009692:	f7ff fdef 	bl	8009274 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8009696:	0022      	movs	r2, r4
 8009698:	2100      	movs	r1, #0
 800969a:	4809      	ldr	r0, [pc, #36]	; (80096c0 <BroadcastMessage+0x4c>)
 800969c:	f00a fb62 	bl	8013d64 <memset>
}
 80096a0:	2000      	movs	r0, #0
 80096a2:	b003      	add	sp, #12
 80096a4:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 80096a6:	9400      	str	r4, [sp, #0]
 80096a8:	0013      	movs	r3, r2
 80096aa:	22ff      	movs	r2, #255	; 0xff
 80096ac:	0001      	movs	r1, r0
 80096ae:	2000      	movs	r0, #0
 80096b0:	f7ff fde0 	bl	8009274 <SendMessageFromPort>
 80096b4:	e7ef      	b.n	8009696 <BroadcastMessage+0x22>
 80096b6:	46c0      	nop			; (mov r8, r8)
 80096b8:	20000a74 	.word	0x20000a74
 80096bc:	2000001d 	.word	0x2000001d
 80096c0:	20000f38 	.word	0x20000f38

080096c4 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80096c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c6:	b083      	sub	sp, #12
 80096c8:	0004      	movs	r4, r0
 80096ca:	000e      	movs	r6, r1
 80096cc:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 80096ce:	28ff      	cmp	r0, #255	; 0xff
 80096d0:	d012      	beq.n	80096f8 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 80096d2:	4f0d      	ldr	r7, [pc, #52]	; (8009708 <SendMessageToModule+0x44>)
 80096d4:	7838      	ldrb	r0, [r7, #0]
 80096d6:	0021      	movs	r1, r4
 80096d8:	f7fa f968 	bl	80039ac <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 80096dc:	7839      	ldrb	r1, [r7, #0]
 80096de:	9500      	str	r5, [sp, #0]
 80096e0:	0033      	movs	r3, r6
 80096e2:	0022      	movs	r2, r4
 80096e4:	f7ff fdc6 	bl	8009274 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 80096e8:	002a      	movs	r2, r5
 80096ea:	2100      	movs	r1, #0
 80096ec:	4807      	ldr	r0, [pc, #28]	; (800970c <SendMessageToModule+0x48>)
 80096ee:	f00a fb39 	bl	8013d64 <memset>
}
 80096f2:	2000      	movs	r0, #0
 80096f4:	b003      	add	sp, #12
 80096f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 80096f8:	4b03      	ldr	r3, [pc, #12]	; (8009708 <SendMessageToModule+0x44>)
 80096fa:	7818      	ldrb	r0, [r3, #0]
 80096fc:	0013      	movs	r3, r2
 80096fe:	000a      	movs	r2, r1
 8009700:	21ff      	movs	r1, #255	; 0xff
 8009702:	f7ff ffb7 	bl	8009674 <BroadcastMessage>
 8009706:	e7f4      	b.n	80096f2 <SendMessageToModule+0x2e>
 8009708:	20001076 	.word	0x20001076
 800970c:	20000f38 	.word	0x20000f38

08009710 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009712:	46de      	mov	lr, fp
 8009714:	4657      	mov	r7, sl
 8009716:	464e      	mov	r6, r9
 8009718:	4645      	mov	r5, r8
 800971a:	b5e0      	push	{r5, r6, r7, lr}
 800971c:	b091      	sub	sp, #68	; 0x44
 800971e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009720:	000c      	movs	r4, r1
 8009722:	9106      	str	r1, [sp, #24]
 8009724:	0015      	movs	r5, r2
 8009726:	920e      	str	r2, [sp, #56]	; 0x38
 8009728:	001e      	movs	r6, r3
 800972a:	ab1a      	add	r3, sp, #104	; 0x68
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	4698      	mov	r8, r3
 8009730:	ab1d      	add	r3, sp, #116	; 0x74
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009736:	4b5a      	ldr	r3, [pc, #360]	; (80098a0 <StartScastDMAStream+0x190>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	428b      	cmp	r3, r1
 800973c:	d11d      	bne.n	800977a <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800973e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009740:	0e1b      	lsrs	r3, r3, #24
 8009742:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8009744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009746:	0c1b      	lsrs	r3, r3, #16
 8009748:	b2db      	uxtb	r3, r3
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 800974c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	b2db      	uxtb	r3, r3
 8009752:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009754:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009756:	0e1b      	lsrs	r3, r3, #24
 8009758:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 800975a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800975c:	0c1b      	lsrs	r3, r3, #16
 800975e:	b2db      	uxtb	r3, r3
 8009760:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009762:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009764:	0a1b      	lsrs	r3, r3, #8
 8009766:	b2db      	uxtb	r3, r3
 8009768:	469b      	mov	fp, r3
 800976a:	4d4e      	ldr	r5, [pc, #312]	; (80098a4 <StartScastDMAStream+0x194>)
 800976c:	231a      	movs	r3, #26
 800976e:	4699      	mov	r9, r3
 8009770:	44a9      	add	r9, r5
				temp2 =dstP;
 8009772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009774:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009776:	4c4c      	ldr	r4, [pc, #304]	; (80098a8 <StartScastDMAStream+0x198>)
 8009778:	e05c      	b.n	8009834 <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800977a:	4b4b      	ldr	r3, [pc, #300]	; (80098a8 <StartScastDMAStream+0x198>)
 800977c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800977e:	0e12      	lsrs	r2, r2, #24
 8009780:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009782:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009784:	0c12      	lsrs	r2, r2, #16
 8009786:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009788:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800978a:	0a12      	lsrs	r2, r2, #8
 800978c:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 800978e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009790:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009792:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009794:	0e12      	lsrs	r2, r2, #24
 8009796:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009798:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800979a:	0c12      	lsrs	r2, r2, #16
 800979c:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 800979e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097a0:	0a12      	lsrs	r2, r2, #8
 80097a2:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80097a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097a6:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80097a8:	4642      	mov	r2, r8
 80097aa:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80097ac:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 80097ae:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 80097b0:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 80097b2:	4652      	mov	r2, sl
 80097b4:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80097b6:	220d      	movs	r2, #13
 80097b8:	211c      	movs	r1, #28
 80097ba:	0020      	movs	r0, r4
 80097bc:	f7ff ff82 	bl	80096c4 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80097c0:	2000      	movs	r0, #0
 80097c2:	b011      	add	sp, #68	; 0x44
 80097c4:	bc3c      	pop	{r2, r3, r4, r5}
 80097c6:	4690      	mov	r8, r2
 80097c8:	4699      	mov	r9, r3
 80097ca:	46a2      	mov	sl, r4
 80097cc:	46ab      	mov	fp, r5
 80097ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 80097d0:	9906      	ldr	r1, [sp, #24]
 80097d2:	f7fa f8eb 	bl	80039ac <FindRoute>
 80097d6:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 80097d8:	0031      	movs	r1, r6
 80097da:	9806      	ldr	r0, [sp, #24]
 80097dc:	f7fa f8e6 	bl	80039ac <FindRoute>
			if(route[i] == dstM){
 80097e0:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 80097e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 80097e4:	42b0      	cmp	r0, r6
 80097e6:	d134      	bne.n	8009852 <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80097e8:	9a08      	ldr	r2, [sp, #32]
 80097ea:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 80097ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ee:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 80097f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097f2:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 80097f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80097f6:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80097f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097fa:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 80097fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097fe:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009800:	465a      	mov	r2, fp
 8009802:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009804:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009806:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009808:	4642      	mov	r2, r8
 800980a:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 800980c:	9a07      	ldr	r2, [sp, #28]
 800980e:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8009810:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009812:	4653      	mov	r3, sl
 8009814:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8009816:	0031      	movs	r1, r6
 8009818:	9806      	ldr	r0, [sp, #24]
 800981a:	f7fa f8c7 	bl	80039ac <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 800981e:	7878      	ldrb	r0, [r7, #1]
 8009820:	220c      	movs	r2, #12
 8009822:	211b      	movs	r1, #27
 8009824:	f7ff ff4e 	bl	80096c4 <SendMessageToModule>
			osDelay(10);
 8009828:	200a      	movs	r0, #10
 800982a:	f004 fc98 	bl	800e15e <osDelay>
 800982e:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009830:	454d      	cmp	r5, r9
 8009832:	d013      	beq.n	800985c <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8009834:	0031      	movs	r1, r6
 8009836:	9806      	ldr	r0, [sp, #24]
 8009838:	f7fa f8b8 	bl	80039ac <FindRoute>
 800983c:	002f      	movs	r7, r5
		if(route[i]){
 800983e:	7868      	ldrb	r0, [r5, #1]
 8009840:	2800      	cmp	r0, #0
 8009842:	d0f4      	beq.n	800982e <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8009844:	78a9      	ldrb	r1, [r5, #2]
 8009846:	2900      	cmp	r1, #0
 8009848:	d0c2      	beq.n	80097d0 <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 800984a:	f7fa f8af 	bl	80039ac <FindRoute>
 800984e:	9007      	str	r0, [sp, #28]
 8009850:	e7c2      	b.n	80097d8 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009852:	7839      	ldrb	r1, [r7, #0]
 8009854:	f7fa f8aa 	bl	80039ac <FindRoute>
 8009858:	0003      	movs	r3, r0
 800985a:	e7c5      	b.n	80097e8 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 800985c:	9806      	ldr	r0, [sp, #24]
 800985e:	42b0      	cmp	r0, r6
 8009860:	d118      	bne.n	8009894 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009868:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800986a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800986c:	4640      	mov	r0, r8
 800986e:	f7ff fbdf 	bl	8009030 <SetupDMAStreams>
	if(stored){
 8009872:	4653      	mov	r3, sl
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0a3      	beq.n	80097c0 <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009878:	2300      	movs	r3, #0
 800987a:	9304      	str	r3, [sp, #16]
 800987c:	9303      	str	r3, [sp, #12]
 800987e:	9302      	str	r3, [sp, #8]
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009888:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800988a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800988c:	4640      	mov	r0, r8
 800988e:	f7f9 fe1f 	bl	80034d0 <SaveEEstreams>
 8009892:	e795      	b.n	80097c0 <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8009894:	0031      	movs	r1, r6
 8009896:	f7fa f889 	bl	80039ac <FindRoute>
 800989a:	900e      	str	r0, [sp, #56]	; 0x38
 800989c:	e7e1      	b.n	8009862 <StartScastDMAStream+0x152>
 800989e:	46c0      	nop			; (mov r8, r8)
 80098a0:	20001076 	.word	0x20001076
 80098a4:	20006ba3 	.word	0x20006ba3
 80098a8:	20000f38 	.word	0x20000f38

080098ac <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument){
 80098ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ae:	46de      	mov	lr, fp
 80098b0:	4657      	mov	r7, sl
 80098b2:	464e      	mov	r6, r9
 80098b4:	4645      	mov	r5, r8
 80098b6:	b5e0      	push	{r5, r6, r7, lr}
 80098b8:	b087      	sub	sp, #28
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	469b      	mov	fp, r3
						/* A.5.1. Copy the packet to message buffer */
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
						}
						else{ // Message wraps around
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 80098be:	4bd5      	ldr	r3, [pc, #852]	; (8009c14 <BackEndTask+0x368>)
 80098c0:	3b70      	subs	r3, #112	; 0x70
 80098c2:	9304      	str	r3, [sp, #16]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 80098c4:	4bd3      	ldr	r3, [pc, #844]	; (8009c14 <BackEndTask+0x368>)
 80098c6:	3b70      	subs	r3, #112	; 0x70
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	e19e      	b.n	8009c0a <BackEndTask+0x35e>
 80098cc:	1ebb      	subs	r3, r7, #2
 80098ce:	4698      	mov	r8, r3
 80098d0:	4bd1      	ldr	r3, [pc, #836]	; (8009c18 <BackEndTask+0x36c>)
 80098d2:	4443      	add	r3, r8
 80098d4:	4699      	mov	r9, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098d6:	7819      	ldrb	r1, [r3, #0]
 80098d8:	293f      	cmp	r1, #63	; 0x3f
 80098da:	dc17      	bgt.n	800990c <BackEndTask+0x60>
							if(BOS.disableCLI == false){
 80098dc:	4bcf      	ldr	r3, [pc, #828]	; (8009c1c <BackEndTask+0x370>)
 80098de:	7edb      	ldrb	r3, [r3, #27]
 80098e0:	469c      	mov	ip, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098e2:	000b      	movs	r3, r1
							if(BOS.disableCLI == false){
 80098e4:	2000      	movs	r0, #0
 80098e6:	e004      	b.n	80098f2 <BackEndTask+0x46>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 80098e8:	2b3f      	cmp	r3, #63	; 0x3f
 80098ea:	d023      	beq.n	8009934 <BackEndTask+0x88>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098ec:	3301      	adds	r3, #1
 80098ee:	2b40      	cmp	r3, #64	; 0x40
 80098f0:	d009      	beq.n	8009906 <BackEndTask+0x5a>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 80098f2:	2b3e      	cmp	r3, #62	; 0x3e
 80098f4:	dcf8      	bgt.n	80098e8 <BackEndTask+0x3c>
 80098f6:	5cf2      	ldrb	r2, [r6, r3]
 80098f8:	2a48      	cmp	r2, #72	; 0x48
 80098fa:	d1f5      	bne.n	80098e8 <BackEndTask+0x3c>
 80098fc:	18f2      	adds	r2, r6, r3
 80098fe:	7852      	ldrb	r2, [r2, #1]
 8009900:	2a5a      	cmp	r2, #90	; 0x5a
 8009902:	d1f1      	bne.n	80098e8 <BackEndTask+0x3c>
 8009904:	469b      	mov	fp, r3
				if(emptyBuffer){
 8009906:	2800      	cmp	r0, #0
 8009908:	d000      	beq.n	800990c <BackEndTask+0x60>
 800990a:	e15f      	b.n	8009bcc <BackEndTask+0x320>
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 800990c:	465b      	mov	r3, fp
 800990e:	2b3d      	cmp	r3, #61	; 0x3d
 8009910:	d051      	beq.n	80099b6 <BackEndTask+0x10a>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009912:	2b3e      	cmp	r3, #62	; 0x3e
 8009914:	d100      	bne.n	8009918 <BackEndTask+0x6c>
 8009916:	e090      	b.n	8009a3a <BackEndTask+0x18e>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009918:	2b3f      	cmp	r3, #63	; 0x3f
 800991a:	d100      	bne.n	800991e <BackEndTask+0x72>
 800991c:	e092      	b.n	8009a44 <BackEndTask+0x198>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 800991e:	4643      	mov	r3, r8
 8009920:	019a      	lsls	r2, r3, #6
 8009922:	4bbf      	ldr	r3, [pc, #764]	; (8009c20 <BackEndTask+0x374>)
 8009924:	189b      	adds	r3, r3, r2
 8009926:	445b      	add	r3, fp
 8009928:	789b      	ldrb	r3, [r3, #2]
 800992a:	9300      	str	r3, [sp, #0]
					parseStart =packetStart + 3;
 800992c:	465b      	mov	r3, fp
 800992e:	3303      	adds	r3, #3
 8009930:	9302      	str	r3, [sp, #8]
 8009932:	e046      	b.n	80099c2 <BackEndTask+0x116>
 8009934:	9600      	str	r6, [sp, #0]
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009936:	223f      	movs	r2, #63	; 0x3f
 8009938:	4692      	mov	sl, r2
 800993a:	44b2      	add	sl, r6
 800993c:	4652      	mov	r2, sl
 800993e:	7812      	ldrb	r2, [r2, #0]
 8009940:	2a48      	cmp	r2, #72	; 0x48
 8009942:	d005      	beq.n	8009950 <BackEndTask+0xa4>
							if(BOS.disableCLI == false){
 8009944:	4663      	mov	r3, ip
 8009946:	2b00      	cmp	r3, #0
 8009948:	d000      	beq.n	800994c <BackEndTask+0xa0>
 800994a:	e13f      	b.n	8009bcc <BackEndTask+0x320>
 800994c:	9a00      	ldr	r2, [sp, #0]
 800994e:	e00c      	b.n	800996a <BackEndTask+0xbe>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009950:	7832      	ldrb	r2, [r6, #0]
 8009952:	2a5a      	cmp	r2, #90	; 0x5a
 8009954:	d1f6      	bne.n	8009944 <BackEndTask+0x98>
				if(emptyBuffer){
 8009956:	2800      	cmp	r0, #0
 8009958:	d074      	beq.n	8009a44 <BackEndTask+0x198>
						packetStart = MSG_RX_BUF_SIZE - 1;
 800995a:	469b      	mov	fp, r3
 800995c:	e136      	b.n	8009bcc <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 800995e:	293f      	cmp	r1, #63	; 0x3f
 8009960:	d024      	beq.n	80099ac <BackEndTask+0x100>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009962:	3101      	adds	r1, #1
 8009964:	2940      	cmp	r1, #64	; 0x40
 8009966:	d100      	bne.n	800996a <BackEndTask+0xbe>
 8009968:	e130      	b.n	8009bcc <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 800996a:	5c53      	ldrb	r3, [r2, r1]
 800996c:	2b0d      	cmp	r3, #13
 800996e:	d1f8      	bne.n	8009962 <BackEndTask+0xb6>
 8009970:	293e      	cmp	r1, #62	; 0x3e
 8009972:	dcf4      	bgt.n	800995e <BackEndTask+0xb2>
 8009974:	1850      	adds	r0, r2, r1
 8009976:	7843      	ldrb	r3, [r0, #1]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1f0      	bne.n	800995e <BackEndTask+0xb2>
										UARTRxBuf[port - 1][j] =0;
 800997c:	4643      	mov	r3, r8
 800997e:	019a      	lsls	r2, r3, #6
 8009980:	4ba7      	ldr	r3, [pc, #668]	; (8009c20 <BackEndTask+0x374>)
 8009982:	189b      	adds	r3, r3, r2
 8009984:	2200      	movs	r2, #0
 8009986:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009988:	3101      	adds	r1, #1
 800998a:	464b      	mov	r3, r9
 800998c:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 800998e:	4ba5      	ldr	r3, [pc, #660]	; (8009c24 <BackEndTask+0x378>)
 8009990:	7819      	ldrb	r1, [r3, #0]
 8009992:	48a5      	ldr	r0, [pc, #660]	; (8009c28 <BackEndTask+0x37c>)
 8009994:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009996:	3203      	adds	r2, #3
 8009998:	7022      	strb	r2, [r4, #0]
										PcPort =port;
 800999a:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 800999c:	4ba3      	ldr	r3, [pc, #652]	; (8009c2c <BackEndTask+0x380>)
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	2300      	movs	r3, #0
 80099a2:	3a01      	subs	r2, #1
 80099a4:	2100      	movs	r1, #0
 80099a6:	f006 f939 	bl	800fc1c <xTaskGenericNotify>
										break;
 80099aa:	e10f      	b.n	8009bcc <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80099ac:	7813      	ldrb	r3, [r2, #0]
							emptyBuffer = true;
 80099ae:	2001      	movs	r0, #1
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1a8      	bne.n	8009906 <BackEndTask+0x5a>
 80099b4:	e7e2      	b.n	800997c <BackEndTask+0xd0>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 80099b6:	0033      	movs	r3, r6
 80099b8:	333f      	adds	r3, #63	; 0x3f
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	9300      	str	r3, [sp, #0]
					parseStart =0;
 80099be:	2300      	movs	r3, #0
 80099c0:	9302      	str	r3, [sp, #8]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 80099c2:	9b00      	ldr	r3, [sp, #0]
 80099c4:	3303      	adds	r3, #3
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	445b      	add	r3, fp
 80099ca:	469a      	mov	sl, r3
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 80099cc:	2b3f      	cmp	r3, #63	; 0x3f
 80099ce:	dd03      	ble.n	80099d8 <BackEndTask+0x12c>
					packetEnd -= MSG_RX_BUF_SIZE;
 80099d0:	2340      	movs	r3, #64	; 0x40
 80099d2:	425b      	negs	r3, r3
 80099d4:	469c      	mov	ip, r3
 80099d6:	44e2      	add	sl, ip
				if(packetStart != packetEnd) // Non-empty packet
 80099d8:	45da      	cmp	sl, fp
 80099da:	d100      	bne.n	80099de <BackEndTask+0x132>
 80099dc:	e0d0      	b.n	8009b80 <BackEndTask+0x2d4>
					Delay_ms(1);
 80099de:	2001      	movs	r0, #1
 80099e0:	f006 fd28 	bl	8010434 <HAL_Delay>
					if(packetStart < packetEnd){
 80099e4:	45da      	cmp	sl, fp
 80099e6:	dd34      	ble.n	8009a52 <BackEndTask+0x1a6>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 80099e8:	4b91      	ldr	r3, [pc, #580]	; (8009c30 <BackEndTask+0x384>)
 80099ea:	18fb      	adds	r3, r7, r3
 80099ec:	019b      	lsls	r3, r3, #6
 80099ee:	445b      	add	r3, fp
 80099f0:	4a8b      	ldr	r2, [pc, #556]	; (8009c20 <BackEndTask+0x374>)
 80099f2:	4694      	mov	ip, r2
 80099f4:	4463      	add	r3, ip
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	9a01      	ldr	r2, [sp, #4]
 80099fa:	0019      	movs	r1, r3
 80099fc:	488d      	ldr	r0, [pc, #564]	; (8009c34 <BackEndTask+0x388>)
 80099fe:	f00a f9a8 	bl	8013d52 <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	1cd9      	adds	r1, r3, #3
 8009a06:	488b      	ldr	r0, [pc, #556]	; (8009c34 <BackEndTask+0x388>)
 8009a08:	f003 fc60 	bl	800d2cc <CalculateCRC8>
 8009a0c:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009a0e:	2238      	movs	r2, #56	; 0x38
 8009a10:	2100      	movs	r1, #0
 8009a12:	4888      	ldr	r0, [pc, #544]	; (8009c34 <BackEndTask+0x388>)
 8009a14:	f00a f9a6 	bl	8013d64 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009a18:	4643      	mov	r3, r8
 8009a1a:	019b      	lsls	r3, r3, #6
 8009a1c:	4a80      	ldr	r2, [pc, #512]	; (8009c20 <BackEndTask+0x374>)
 8009a1e:	4694      	mov	ip, r2
 8009a20:	4463      	add	r3, ip
 8009a22:	4652      	mov	r2, sl
 8009a24:	5c9b      	ldrb	r3, [r3, r2]
 8009a26:	9a01      	ldr	r2, [sp, #4]
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d040      	beq.n	8009aae <BackEndTask+0x202>
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009a2c:	9a00      	ldr	r2, [sp, #0]
 8009a2e:	3204      	adds	r2, #4
 8009a30:	2100      	movs	r1, #0
 8009a32:	9803      	ldr	r0, [sp, #12]
 8009a34:	f00a f996 	bl	8013d64 <memset>
 8009a38:	e0b8      	b.n	8009bac <BackEndTask+0x300>
					packetLength =UARTRxBuf[port - 1][0];
 8009a3a:	7833      	ldrb	r3, [r6, #0]
 8009a3c:	9300      	str	r3, [sp, #0]
					parseStart =1;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	9302      	str	r3, [sp, #8]
 8009a42:	e7be      	b.n	80099c2 <BackEndTask+0x116>
					packetLength =UARTRxBuf[port - 1][1];
 8009a44:	7873      	ldrb	r3, [r6, #1]
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	233f      	movs	r3, #63	; 0x3f
 8009a4a:	469b      	mov	fp, r3
					parseStart =2;
 8009a4c:	3b3d      	subs	r3, #61	; 0x3d
 8009a4e:	9302      	str	r3, [sp, #8]
 8009a50:	e7b7      	b.n	80099c2 <BackEndTask+0x116>
						MSG_RX_BUF_SIZE - packetStart);
 8009a52:	2240      	movs	r2, #64	; 0x40
 8009a54:	465b      	mov	r3, fp
 8009a56:	1ad3      	subs	r3, r2, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009a58:	4a75      	ldr	r2, [pc, #468]	; (8009c30 <BackEndTask+0x384>)
 8009a5a:	18b9      	adds	r1, r7, r2
 8009a5c:	0189      	lsls	r1, r1, #6
 8009a5e:	4459      	add	r1, fp
 8009a60:	4a6f      	ldr	r2, [pc, #444]	; (8009c20 <BackEndTask+0x374>)
 8009a62:	4694      	mov	ip, r2
 8009a64:	4461      	add	r1, ip
 8009a66:	9303      	str	r3, [sp, #12]
 8009a68:	001a      	movs	r2, r3
 8009a6a:	4872      	ldr	r0, [pc, #456]	; (8009c34 <BackEndTask+0x388>)
 8009a6c:	f00a f971 	bl	8013d52 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009a70:	4a70      	ldr	r2, [pc, #448]	; (8009c34 <BackEndTask+0x388>)
 8009a72:	0010      	movs	r0, r2
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	469c      	mov	ip, r3
 8009a78:	4460      	add	r0, ip
 8009a7a:	9a01      	ldr	r2, [sp, #4]
 8009a7c:	1ad2      	subs	r2, r2, r3
 8009a7e:	0031      	movs	r1, r6
 8009a80:	f00a f967 	bl	8013d52 <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009a84:	9b00      	ldr	r3, [sp, #0]
 8009a86:	1cd9      	adds	r1, r3, #3
 8009a88:	486a      	ldr	r0, [pc, #424]	; (8009c34 <BackEndTask+0x388>)
 8009a8a:	f003 fc1f 	bl	800d2cc <CalculateCRC8>
 8009a8e:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009a90:	2238      	movs	r2, #56	; 0x38
 8009a92:	2100      	movs	r1, #0
 8009a94:	4867      	ldr	r0, [pc, #412]	; (8009c34 <BackEndTask+0x388>)
 8009a96:	f00a f965 	bl	8013d64 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009a9a:	4643      	mov	r3, r8
 8009a9c:	019b      	lsls	r3, r3, #6
 8009a9e:	4a60      	ldr	r2, [pc, #384]	; (8009c20 <BackEndTask+0x374>)
 8009aa0:	4694      	mov	ip, r2
 8009aa2:	4463      	add	r3, ip
 8009aa4:	4652      	mov	r2, sl
 8009aa6:	5c9b      	ldrb	r3, [r3, r2]
 8009aa8:	9a01      	ldr	r2, [sp, #4]
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d168      	bne.n	8009b80 <BackEndTask+0x2d4>
						portStatus[port] =MSG;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	7023      	strb	r3, [r4, #0]
						messageLength[port - 1] =packetLength;
 8009ab2:	1ebb      	subs	r3, r7, #2
 8009ab4:	4a60      	ldr	r2, [pc, #384]	; (8009c38 <BackEndTask+0x38c>)
 8009ab6:	9900      	ldr	r1, [sp, #0]
 8009ab8:	54d1      	strb	r1, [r2, r3]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009aba:	233f      	movs	r3, #63	; 0x3f
 8009abc:	9c02      	ldr	r4, [sp, #8]
 8009abe:	1b1b      	subs	r3, r3, r4
 8009ac0:	000a      	movs	r2, r1
 8009ac2:	428b      	cmp	r3, r1
 8009ac4:	db27      	blt.n	8009b16 <BackEndTask+0x26a>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009ac6:	00f8      	lsls	r0, r7, #3
 8009ac8:	1bc0      	subs	r0, r0, r7
 8009aca:	00c0      	lsls	r0, r0, #3
 8009acc:	9b05      	ldr	r3, [sp, #20]
 8009ace:	469c      	mov	ip, r3
 8009ad0:	4460      	add	r0, ip
 8009ad2:	4b57      	ldr	r3, [pc, #348]	; (8009c30 <BackEndTask+0x384>)
 8009ad4:	18f9      	adds	r1, r7, r3
 8009ad6:	0189      	lsls	r1, r1, #6
 8009ad8:	46a4      	mov	ip, r4
 8009ada:	4461      	add	r1, ip
 8009adc:	4b50      	ldr	r3, [pc, #320]	; (8009c20 <BackEndTask+0x374>)
 8009ade:	18c9      	adds	r1, r1, r3
 8009ae0:	f00a f937 	bl	8013d52 <memcpy>
						if(packetStart < packetEnd){
 8009ae4:	45da      	cmp	sl, fp
 8009ae6:	dd36      	ble.n	8009b56 <BackEndTask+0x2aa>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009ae8:	9a00      	ldr	r2, [sp, #0]
 8009aea:	3204      	adds	r2, #4
 8009aec:	4b50      	ldr	r3, [pc, #320]	; (8009c30 <BackEndTask+0x384>)
 8009aee:	18f8      	adds	r0, r7, r3
 8009af0:	0180      	lsls	r0, r0, #6
 8009af2:	4458      	add	r0, fp
 8009af4:	4b4a      	ldr	r3, [pc, #296]	; (8009c20 <BackEndTask+0x374>)
 8009af6:	18c0      	adds	r0, r0, r3
 8009af8:	2100      	movs	r1, #0
 8009afa:	f00a f933 	bl	8013d64 <memset>
						UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009afe:	4653      	mov	r3, sl
 8009b00:	3301      	adds	r3, #1
 8009b02:	464a      	mov	r2, r9
 8009b04:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009b06:	4a4d      	ldr	r2, [pc, #308]	; (8009c3c <BackEndTask+0x390>)
 8009b08:	8813      	ldrh	r3, [r2, #0]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 8009b0e:	0028      	movs	r0, r5
 8009b10:	f7ff fb6a 	bl	80091e8 <NotifyMessagingTask>
						continue; // Inspect the next port circular buffer
 8009b14:	e05a      	b.n	8009bcc <BackEndTask+0x320>
 8009b16:	00fb      	lsls	r3, r7, #3
 8009b18:	1bdb      	subs	r3, r3, r7
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	4698      	mov	r8, r3
							MSG_RX_BUF_SIZE - parseStart);
 8009b1e:	2440      	movs	r4, #64	; 0x40
 8009b20:	9b02      	ldr	r3, [sp, #8]
 8009b22:	1ae4      	subs	r4, r4, r3
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009b24:	9a04      	ldr	r2, [sp, #16]
 8009b26:	4442      	add	r2, r8
 8009b28:	0010      	movs	r0, r2
 8009b2a:	4a41      	ldr	r2, [pc, #260]	; (8009c30 <BackEndTask+0x384>)
 8009b2c:	18b9      	adds	r1, r7, r2
 8009b2e:	0189      	lsls	r1, r1, #6
 8009b30:	469c      	mov	ip, r3
 8009b32:	4461      	add	r1, ip
 8009b34:	4b3a      	ldr	r3, [pc, #232]	; (8009c20 <BackEndTask+0x374>)
 8009b36:	18c9      	adds	r1, r1, r3
 8009b38:	0022      	movs	r2, r4
 8009b3a:	f00a f90a 	bl	8013d52 <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009b3e:	4640      	mov	r0, r8
 8009b40:	3870      	subs	r0, #112	; 0x70
 8009b42:	1900      	adds	r0, r0, r4
 8009b44:	4b33      	ldr	r3, [pc, #204]	; (8009c14 <BackEndTask+0x368>)
 8009b46:	469c      	mov	ip, r3
 8009b48:	4460      	add	r0, ip
 8009b4a:	9b00      	ldr	r3, [sp, #0]
 8009b4c:	1b1a      	subs	r2, r3, r4
 8009b4e:	0031      	movs	r1, r6
 8009b50:	f00a f8ff 	bl	8013d52 <memcpy>
 8009b54:	e7c6      	b.n	8009ae4 <BackEndTask+0x238>
							MSG_RX_BUF_SIZE - packetStart);
 8009b56:	2440      	movs	r4, #64	; 0x40
 8009b58:	465b      	mov	r3, fp
 8009b5a:	1ae4      	subs	r4, r4, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009b5c:	4b34      	ldr	r3, [pc, #208]	; (8009c30 <BackEndTask+0x384>)
 8009b5e:	18f8      	adds	r0, r7, r3
 8009b60:	0180      	lsls	r0, r0, #6
 8009b62:	4458      	add	r0, fp
 8009b64:	4b2e      	ldr	r3, [pc, #184]	; (8009c20 <BackEndTask+0x374>)
 8009b66:	18c0      	adds	r0, r0, r3
 8009b68:	0022      	movs	r2, r4
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	f00a f8fa 	bl	8013d64 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009b70:	9a00      	ldr	r2, [sp, #0]
 8009b72:	3204      	adds	r2, #4
 8009b74:	1b12      	subs	r2, r2, r4
 8009b76:	2100      	movs	r1, #0
 8009b78:	0030      	movs	r0, r6
 8009b7a:	f00a f8f3 	bl	8013d64 <memset>
 8009b7e:	e7be      	b.n	8009afe <BackEndTask+0x252>
				}
				else{ // wrap around
					memset(&UARTRxBuf[port - 1][packetStart],0,
					MSG_RX_BUF_SIZE - packetStart);
 8009b80:	2240      	movs	r2, #64	; 0x40
 8009b82:	465b      	mov	r3, fp
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	4698      	mov	r8, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009b88:	4b29      	ldr	r3, [pc, #164]	; (8009c30 <BackEndTask+0x384>)
 8009b8a:	18f8      	adds	r0, r7, r3
 8009b8c:	0180      	lsls	r0, r0, #6
 8009b8e:	4458      	add	r0, fp
 8009b90:	4b23      	ldr	r3, [pc, #140]	; (8009c20 <BackEndTask+0x374>)
 8009b92:	18c0      	adds	r0, r0, r3
 8009b94:	4642      	mov	r2, r8
 8009b96:	2100      	movs	r1, #0
 8009b98:	f00a f8e4 	bl	8013d64 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009b9c:	9a00      	ldr	r2, [sp, #0]
 8009b9e:	3204      	adds	r2, #4
 8009ba0:	4643      	mov	r3, r8
 8009ba2:	1ad2      	subs	r2, r2, r3
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	0030      	movs	r0, r6
 8009ba8:	f00a f8dc 	bl	8013d64 <memset>
				}
				
				/* A.6.2 Advance buffer index */
				UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009bac:	4653      	mov	r3, sl
 8009bae:	3301      	adds	r3, #1
 8009bb0:	464a      	mov	r2, r9
 8009bb2:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;
 8009bb4:	4a22      	ldr	r2, [pc, #136]	; (8009c40 <BackEndTask+0x394>)
 8009bb6:	8813      	ldrh	r3, [r2, #0]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	8013      	strh	r3, [r2, #0]
 8009bbc:	e014      	b.n	8009be8 <BackEndTask+0x33c>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009bbe:	0028      	movs	r0, r5
 8009bc0:	f004 f97e 	bl	800dec0 <GetUart>
 8009bc4:	2240      	movs	r2, #64	; 0x40
 8009bc6:	0031      	movs	r1, r6
 8009bc8:	f009 f994 	bl	8012ef4 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009bcc:	3501      	adds	r5, #1
 8009bce:	b2ed      	uxtb	r5, r5
 8009bd0:	3701      	adds	r7, #1
 8009bd2:	3640      	adds	r6, #64	; 0x40
 8009bd4:	2d07      	cmp	r5, #7
 8009bd6:	d016      	beq.n	8009c06 <BackEndTask+0x35a>
 8009bd8:	1e7c      	subs	r4, r7, #1
 8009bda:	4b13      	ldr	r3, [pc, #76]	; (8009c28 <BackEndTask+0x37c>)
 8009bdc:	469c      	mov	ip, r3
 8009bde:	4464      	add	r4, ip
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009be0:	7823      	ldrb	r3, [r4, #0]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d800      	bhi.n	8009be8 <BackEndTask+0x33c>
 8009be6:	e671      	b.n	80098cc <BackEndTask+0x20>
 8009be8:	1ebb      	subs	r3, r7, #2
 8009bea:	4a16      	ldr	r2, [pc, #88]	; (8009c44 <BackEndTask+0x398>)
 8009bec:	4694      	mov	ip, r2
 8009bee:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true){
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	2a00      	cmp	r2, #0
 8009bf4:	d0ea      	beq.n	8009bcc <BackEndTask+0x320>
				MsgDMAStopped[port - 1] = false;
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 8009bfa:	7823      	ldrb	r3, [r4, #0]
 8009bfc:	2b05      	cmp	r3, #5
 8009bfe:	d1de      	bne.n	8009bbe <BackEndTask+0x312>
					portStatus[port] =FREE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	7023      	strb	r3, [r4, #0]
 8009c04:	e7db      	b.n	8009bbe <BackEndTask+0x312>
			}
		}

		taskYIELD();
 8009c06:	f006 fa97 	bl	8010138 <vPortYield>
 8009c0a:	4e05      	ldr	r6, [pc, #20]	; (8009c20 <BackEndTask+0x374>)
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009c0c:	2702      	movs	r7, #2
		for(port =1; port <= NumOfPorts; port++){
 8009c0e:	2501      	movs	r5, #1
 8009c10:	e7e2      	b.n	8009bd8 <BackEndTask+0x32c>
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	20000d08 	.word	0x20000d08
 8009c18:	20001450 	.word	0x20001450
 8009c1c:	20006aa0 	.word	0x20006aa0
 8009c20:	200012d0 	.word	0x200012d0
 8009c24:	20000a77 	.word	0x20000a77
 8009c28:	200010f8 	.word	0x200010f8
 8009c2c:	20001504 	.word	0x20001504
 8009c30:	03fffffe 	.word	0x03fffffe
 8009c34:	20001458 	.word	0x20001458
 8009c38:	20000f30 	.word	0x20000f30
 8009c3c:	200015f0 	.word	0x200015f0
 8009c40:	20001798 	.word	0x20001798
 8009c44:	200012c8 	.word	0x200012c8

08009c48 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8009c48:	2001      	movs	r0, #1
 8009c4a:	4770      	bx	lr

08009c4c <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8009c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4e:	46de      	mov	lr, fp
 8009c50:	4657      	mov	r7, sl
 8009c52:	464e      	mov	r6, r9
 8009c54:	4645      	mov	r5, r8
 8009c56:	b5e0      	push	{r5, r6, r7, lr}
 8009c58:	b097      	sub	sp, #92	; 0x5c
	port =(int8_t )(unsigned )argument;
 8009c5a:	b2c3      	uxtb	r3, r0
 8009c5c:	9308      	str	r3, [sp, #32]
 8009c5e:	23ff      	movs	r3, #255	; 0xff
 8009c60:	4003      	ands	r3, r0
 8009c62:	469b      	mov	fp, r3
		if(messageLength[port - 1]){
 8009c64:	1e5d      	subs	r5, r3, #1
 8009c66:	00eb      	lsls	r3, r5, #3
 8009c68:	1b5b      	subs	r3, r3, r5
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009c6e:	4ad6      	ldr	r2, [pc, #856]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009c70:	18d3      	adds	r3, r2, r3
 8009c72:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 8009c78:	2700      	movs	r7, #0
			if(cMessage[port - 1][2] >> 7){
 8009c7a:	000e      	movs	r6, r1
 8009c7c:	1853      	adds	r3, r2, r1
 8009c7e:	3302      	adds	r3, #2
 8009c80:	9309      	str	r3, [sp, #36]	; 0x24
 8009c82:	468a      	mov	sl, r1
 8009c84:	e026      	b.n	8009cd4 <PxMessagingTask+0x88>
				longMessage =1;
 8009c86:	4ad1      	ldr	r2, [pc, #836]	; (8009fcc <PxMessagingTask+0x380>)
 8009c88:	2001      	movs	r0, #1
 8009c8a:	7010      	strb	r0, [r2, #0]
 8009c8c:	e033      	b.n	8009cf6 <PxMessagingTask+0xaa>
				code =cMessage[port - 1][3 + shift];
 8009c8e:	4bce      	ldr	r3, [pc, #824]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009c90:	199b      	adds	r3, r3, r6
 8009c92:	189a      	adds	r2, r3, r2
 8009c94:	78d3      	ldrb	r3, [r2, #3]
 8009c96:	4698      	mov	r8, r3
 8009c98:	e04a      	b.n	8009d30 <PxMessagingTask+0xe4>
				if(code == CODE_UPDATE){ // Remote bootloader update
 8009c9a:	4643      	mov	r3, r8
 8009c9c:	2b19      	cmp	r3, #25
 8009c9e:	d063      	beq.n	8009d68 <PxMessagingTask+0x11c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8009ca0:	2b1a      	cmp	r3, #26
 8009ca2:	d06b      	beq.n	8009d7c <PxMessagingTask+0x130>
		if(result == BOS_ERR_UnknownMessage){
 8009ca4:	2f01      	cmp	r7, #1
 8009ca6:	d101      	bne.n	8009cac <PxMessagingTask+0x60>
 8009ca8:	f001 fabe 	bl	800b228 <PxMessagingTask+0x15dc>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009cac:	4cc8      	ldr	r4, [pc, #800]	; (8009fd0 <PxMessagingTask+0x384>)
 8009cae:	5d62      	ldrb	r2, [r4, r5]
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	9807      	ldr	r0, [sp, #28]
 8009cb4:	f00a f856 	bl	8013d64 <memset>
		messageLength[port - 1] =0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8009cbc:	4bc5      	ldr	r3, [pc, #788]	; (8009fd4 <PxMessagingTask+0x388>)
 8009cbe:	465a      	mov	r2, fp
 8009cc0:	5c9b      	ldrb	r3, [r3, r2]
 8009cc2:	3b02      	subs	r3, #2
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d903      	bls.n	8009cd0 <PxMessagingTask+0x84>
			portStatus[port] =FREE;
 8009cc8:	4bc2      	ldr	r3, [pc, #776]	; (8009fd4 <PxMessagingTask+0x388>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4659      	mov	r1, fp
 8009cce:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8009cd0:	f006 fa32 	bl	8010138 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	4249      	negs	r1, r1
 8009cd8:	2001      	movs	r0, #1
 8009cda:	f005 ff53 	bl	800fb84 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8009cde:	4bbc      	ldr	r3, [pc, #752]	; (8009fd0 <PxMessagingTask+0x384>)
 8009ce0:	5d59      	ldrb	r1, [r3, r5]
 8009ce2:	2900      	cmp	r1, #0
 8009ce4:	d0de      	beq.n	8009ca4 <PxMessagingTask+0x58>
			if(cMessage[port - 1][2] >> 7){
 8009ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	b25a      	sxtb	r2, r3
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	dbca      	blt.n	8009c86 <PxMessagingTask+0x3a>
				longMessage =0;
 8009cf0:	4ab6      	ldr	r2, [pc, #728]	; (8009fcc <PxMessagingTask+0x380>)
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	7010      	strb	r0, [r2, #0]
			dst =cMessage[port - 1][0];
 8009cf6:	4ab4      	ldr	r2, [pc, #720]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009cf8:	5cb0      	ldrb	r0, [r6, r2]
 8009cfa:	4681      	mov	r9, r0
			src =cMessage[port - 1][1];
 8009cfc:	1992      	adds	r2, r2, r6
 8009cfe:	7852      	ldrb	r2, [r2, #1]
 8009d00:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8009d02:	2201      	movs	r2, #1
 8009d04:	401a      	ands	r2, r3
			shift =0;
 8009d06:	9206      	str	r2, [sp, #24]
			BOS.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03); // 3rd-4th bits Trace
 8009d08:	4cb3      	ldr	r4, [pc, #716]	; (8009fd8 <PxMessagingTask+0x38c>)
 8009d0a:	0718      	lsls	r0, r3, #28
 8009d0c:	0f80      	lsrs	r0, r0, #30
 8009d0e:	71e0      	strb	r0, [r4, #7]
			BOS.response =(cMessage[port - 1][2]) & 0x60; // 6th-7th bits Response mode
 8009d10:	2060      	movs	r0, #96	; 0x60
 8009d12:	4018      	ands	r0, r3
 8009d14:	71a0      	strb	r0, [r4, #6]
			if(extendCode == true){
 8009d16:	079b      	lsls	r3, r3, #30
 8009d18:	d5b9      	bpl.n	8009c8e <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8009d1a:	4bab      	ldr	r3, [pc, #684]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009d1c:	199b      	adds	r3, r3, r6
 8009d1e:	189b      	adds	r3, r3, r2
 8009d20:	7918      	ldrb	r0, [r3, #4]
 8009d22:	0200      	lsls	r0, r0, #8
 8009d24:	78db      	ldrb	r3, [r3, #3]
 8009d26:	181b      	adds	r3, r3, r0
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	4698      	mov	r8, r3
				++shift;
 8009d2c:	1c53      	adds	r3, r2, #1
 8009d2e:	9306      	str	r3, [sp, #24]
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009d30:	464b      	mov	r3, r9
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2bfc      	cmp	r3, #252	; 0xfc
 8009d38:	d901      	bls.n	8009d3e <PxMessagingTask+0xf2>
 8009d3a:	f001 faae 	bl	800b29a <PxMessagingTask+0x164e>
 8009d3e:	4ba7      	ldr	r3, [pc, #668]	; (8009fdc <PxMessagingTask+0x390>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	454b      	cmp	r3, r9
 8009d44:	d101      	bne.n	8009d4a <PxMessagingTask+0xfe>
 8009d46:	f001 faa8 	bl	800b29a <PxMessagingTask+0x164e>
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d101      	bne.n	8009d52 <PxMessagingTask+0x106>
 8009d4e:	f001 fa9d 	bl	800b28c <PxMessagingTask+0x1640>
				ForwardReceivedMessage(port);
 8009d52:	9808      	ldr	r0, [sp, #32]
 8009d54:	f7ff fc4e 	bl	80095f4 <ForwardReceivedMessage>
				if(BOS.trace)
 8009d58:	4b9f      	ldr	r3, [pc, #636]	; (8009fd8 <PxMessagingTask+0x38c>)
 8009d5a:	79db      	ldrb	r3, [r3, #7]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d09c      	beq.n	8009c9a <PxMessagingTask+0x4e>
					indMode =IND_SHORT_BLINK;
 8009d60:	4b9f      	ldr	r3, [pc, #636]	; (8009fe0 <PxMessagingTask+0x394>)
 8009d62:	2203      	movs	r2, #3
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e798      	b.n	8009c9a <PxMessagingTask+0x4e>
					Delay_ms(100);
 8009d68:	2064      	movs	r0, #100	; 0x64
 8009d6a:	f006 fb63 	bl	8010434 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9a08      	ldr	r2, [sp, #32]
 8009d72:	4649      	mov	r1, r9
 8009d74:	9804      	ldr	r0, [sp, #16]
 8009d76:	f7f9 fee9 	bl	8003b4c <remoteBootloaderUpdate>
 8009d7a:	e793      	b.n	8009ca4 <PxMessagingTask+0x58>
					Delay_ms(100);
 8009d7c:	2064      	movs	r0, #100	; 0x64
 8009d7e:	f006 fb59 	bl	8010434 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8009d82:	4b91      	ldr	r3, [pc, #580]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009d84:	199b      	adds	r3, r3, r6
 8009d86:	9a06      	ldr	r2, [sp, #24]
 8009d88:	5c9b      	ldrb	r3, [r3, r2]
 8009d8a:	9a08      	ldr	r2, [sp, #32]
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	9804      	ldr	r0, [sp, #16]
 8009d90:	f7f9 fedc 	bl	8003b4c <remoteBootloaderUpdate>
 8009d94:	e786      	b.n	8009ca4 <PxMessagingTask+0x58>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009d96:	4b8c      	ldr	r3, [pc, #560]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009d98:	199b      	adds	r3, r3, r6
 8009d9a:	1859      	adds	r1, r3, r1
 8009d9c:	3901      	subs	r1, #1
 8009d9e:	780b      	ldrb	r3, [r1, #0]
 8009da0:	4a90      	ldr	r2, [pc, #576]	; (8009fe4 <PxMessagingTask+0x398>)
 8009da2:	7812      	ldrb	r2, [r2, #0]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d113      	bne.n	8009dd0 <PxMessagingTask+0x184>
					result =BOS_ERR_MSG_Reflection;
 8009da8:	2703      	movs	r7, #3
				if(result == BOS_OK){
 8009daa:	2f00      	cmp	r7, #0
 8009dac:	d000      	beq.n	8009db0 <PxMessagingTask+0x164>
 8009dae:	e779      	b.n	8009ca4 <PxMessagingTask+0x58>
				shift +=4;
 8009db0:	9c06      	ldr	r4, [sp, #24]
 8009db2:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 8009db4:	4b86      	ldr	r3, [pc, #536]	; (8009fd0 <PxMessagingTask+0x384>)
 8009db6:	5d59      	ldrb	r1, [r3, r5]
 8009db8:	1b0a      	subs	r2, r1, r4
 8009dba:	b2d3      	uxtb	r3, r2
 8009dbc:	9306      	str	r3, [sp, #24]
					switch(code){
 8009dbe:	4643      	mov	r3, r8
 8009dc0:	2b24      	cmp	r3, #36	; 0x24
 8009dc2:	d901      	bls.n	8009dc8 <PxMessagingTask+0x17c>
 8009dc4:	f001 fa04 	bl	800b1d0 <PxMessagingTask+0x1584>
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4a87      	ldr	r2, [pc, #540]	; (8009fe8 <PxMessagingTask+0x39c>)
 8009dcc:	58d3      	ldr	r3, [r2, r3]
 8009dce:	469f      	mov	pc, r3
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009dd0:	4a84      	ldr	r2, [pc, #528]	; (8009fe4 <PxMessagingTask+0x398>)
 8009dd2:	7013      	strb	r3, [r2, #0]
 8009dd4:	4a85      	ldr	r2, [pc, #532]	; (8009fec <PxMessagingTask+0x3a0>)
 8009dd6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8009dd8:	9908      	ldr	r1, [sp, #32]
 8009dda:	20ff      	movs	r0, #255	; 0xff
 8009ddc:	f7ff fc2a 	bl	8009634 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009de0:	4b7b      	ldr	r3, [pc, #492]	; (8009fd0 <PxMessagingTask+0x384>)
 8009de2:	5d5a      	ldrb	r2, [r3, r5]
 8009de4:	4b78      	ldr	r3, [pc, #480]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009de6:	199b      	adds	r3, r3, r6
 8009de8:	189b      	adds	r3, r3, r2
 8009dea:	3b01      	subs	r3, #1
 8009dec:	2200      	movs	r2, #0
 8009dee:	701a      	strb	r2, [r3, #0]
 8009df0:	e7db      	b.n	8009daa <PxMessagingTask+0x15e>
							for(p =0; p < numOfParams; p++){
 8009df2:	9b06      	ldr	r3, [sp, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d01f      	beq.n	8009e38 <PxMessagingTask+0x1ec>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8009df8:	9b04      	ldr	r3, [sp, #16]
 8009dfa:	1e58      	subs	r0, r3, #1
 8009dfc:	0042      	lsls	r2, r0, #1
 8009dfe:	4b7c      	ldr	r3, [pc, #496]	; (8009ff0 <PxMessagingTask+0x3a4>)
 8009e00:	5ad3      	ldrh	r3, [r2, r3]
 8009e02:	4652      	mov	r2, sl
 8009e04:	18a1      	adds	r1, r4, r2
 8009e06:	4a70      	ldr	r2, [pc, #448]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009e08:	1889      	adds	r1, r1, r2
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	4452      	add	r2, sl
 8009e0e:	1914      	adds	r4, r2, r4
 8009e10:	9a06      	ldr	r2, [sp, #24]
 8009e12:	3a01      	subs	r2, #1
 8009e14:	b2d2      	uxtb	r2, r2
 8009e16:	18a4      	adds	r4, r4, r2
 8009e18:	2780      	movs	r7, #128	; 0x80
 8009e1a:	023f      	lsls	r7, r7, #8
 8009e1c:	4684      	mov	ip, r0
 8009e1e:	780a      	ldrb	r2, [r1, #0]
 8009e20:	3a01      	subs	r2, #1
 8009e22:	0038      	movs	r0, r7
 8009e24:	4110      	asrs	r0, r2
 8009e26:	4303      	orrs	r3, r0
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 8009e2c:	42a1      	cmp	r1, r4
 8009e2e:	d1f6      	bne.n	8009e1e <PxMessagingTask+0x1d2>
 8009e30:	4660      	mov	r0, ip
 8009e32:	0040      	lsls	r0, r0, #1
 8009e34:	4a6e      	ldr	r2, [pc, #440]	; (8009ff0 <PxMessagingTask+0x3a4>)
 8009e36:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 8009e38:	4b6e      	ldr	r3, [pc, #440]	; (8009ff4 <PxMessagingTask+0x3a8>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	701a      	strb	r2, [r3, #0]
							break;
 8009e3e:	2700      	movs	r7, #0
 8009e40:	e734      	b.n	8009cac <PxMessagingTask+0x60>
							indMode =IND_PING;
 8009e42:	4b67      	ldr	r3, [pc, #412]	; (8009fe0 <PxMessagingTask+0x394>)
 8009e44:	2201      	movs	r2, #1
 8009e46:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8009e48:	200a      	movs	r0, #10
 8009e4a:	f004 f988 	bl	800e15e <osDelay>
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009e4e:	4b62      	ldr	r3, [pc, #392]	; (8009fd8 <PxMessagingTask+0x38c>)
 8009e50:	799b      	ldrb	r3, [r3, #6]
 8009e52:	2240      	movs	r2, #64	; 0x40
 8009e54:	4393      	bics	r3, r2
 8009e56:	2700      	movs	r7, #0
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d000      	beq.n	8009e5e <PxMessagingTask+0x212>
 8009e5c:	e726      	b.n	8009cac <PxMessagingTask+0x60>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8009e5e:	003a      	movs	r2, r7
 8009e60:	2102      	movs	r1, #2
 8009e62:	9804      	ldr	r0, [sp, #16]
 8009e64:	f7ff fc2e 	bl	80096c4 <SendMessageToModule>
 8009e68:	e720      	b.n	8009cac <PxMessagingTask+0x60>
							if(!moduleAlias[myID][0])
 8009e6a:	4b5c      	ldr	r3, [pc, #368]	; (8009fdc <PxMessagingTask+0x390>)
 8009e6c:	781a      	ldrb	r2, [r3, #0]
 8009e6e:	0093      	lsls	r3, r2, #2
 8009e70:	189b      	adds	r3, r3, r2
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	4a60      	ldr	r2, [pc, #384]	; (8009ff8 <PxMessagingTask+0x3ac>)
 8009e76:	5c9b      	ldrb	r3, [r3, r2]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d117      	bne.n	8009eac <PxMessagingTask+0x260>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8009e7c:	9a04      	ldr	r2, [sp, #16]
 8009e7e:	495f      	ldr	r1, [pc, #380]	; (8009ffc <PxMessagingTask+0x3b0>)
 8009e80:	485f      	ldr	r0, [pc, #380]	; (800a000 <PxMessagingTask+0x3b4>)
 8009e82:	f00a f969 	bl	8014158 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8009e86:	4c5e      	ldr	r4, [pc, #376]	; (800a000 <PxMessagingTask+0x3b4>)
 8009e88:	0020      	movs	r0, r4
 8009e8a:	f7f6 f945 	bl	8000118 <strlen>
 8009e8e:	b282      	uxth	r2, r0
 8009e90:	4b5c      	ldr	r3, [pc, #368]	; (800a004 <PxMessagingTask+0x3b8>)
 8009e92:	7818      	ldrb	r0, [r3, #0]
 8009e94:	2301      	movs	r3, #1
 8009e96:	425b      	negs	r3, r3
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	3333      	adds	r3, #51	; 0x33
 8009e9c:	0021      	movs	r1, r4
 8009e9e:	f004 f831 	bl	800df04 <writePxMutex>
							responseStatus =BOS_OK;
 8009ea2:	4b54      	ldr	r3, [pc, #336]	; (8009ff4 <PxMessagingTask+0x3a8>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	701a      	strb	r2, [r3, #0]
							break;
 8009ea8:	2700      	movs	r7, #0
 8009eaa:	e6ff      	b.n	8009cac <PxMessagingTask+0x60>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8009eac:	230a      	movs	r3, #10
 8009eae:	9904      	ldr	r1, [sp, #16]
 8009eb0:	434b      	muls	r3, r1
 8009eb2:	4a51      	ldr	r2, [pc, #324]	; (8009ff8 <PxMessagingTask+0x3ac>)
 8009eb4:	189b      	adds	r3, r3, r2
 8009eb6:	000a      	movs	r2, r1
 8009eb8:	4953      	ldr	r1, [pc, #332]	; (800a008 <PxMessagingTask+0x3bc>)
 8009eba:	4851      	ldr	r0, [pc, #324]	; (800a000 <PxMessagingTask+0x3b4>)
 8009ebc:	f00a f94c 	bl	8014158 <sprintf>
 8009ec0:	e7e1      	b.n	8009e86 <PxMessagingTask+0x23a>
							IND_ON();
 8009ec2:	2180      	movs	r1, #128	; 0x80
 8009ec4:	2090      	movs	r0, #144	; 0x90
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	0109      	lsls	r1, r1, #4
 8009eca:	05c0      	lsls	r0, r0, #23
 8009ecc:	f007 ff1c 	bl	8011d08 <HAL_GPIO_WritePin>
							break;
 8009ed0:	2700      	movs	r7, #0
 8009ed2:	e6eb      	b.n	8009cac <PxMessagingTask+0x60>
							IND_OFF();
 8009ed4:	2180      	movs	r1, #128	; 0x80
 8009ed6:	2090      	movs	r0, #144	; 0x90
 8009ed8:	2200      	movs	r2, #0
 8009eda:	0109      	lsls	r1, r1, #4
 8009edc:	05c0      	lsls	r0, r0, #23
 8009ede:	f007 ff13 	bl	8011d08 <HAL_GPIO_WritePin>
							break;
 8009ee2:	2700      	movs	r7, #0
 8009ee4:	e6e2      	b.n	8009cac <PxMessagingTask+0x60>
							IND_toggle();
 8009ee6:	2180      	movs	r1, #128	; 0x80
 8009ee8:	2090      	movs	r0, #144	; 0x90
 8009eea:	0109      	lsls	r1, r1, #4
 8009eec:	05c0      	lsls	r0, r0, #23
 8009eee:	f007 ff11 	bl	8011d14 <HAL_GPIO_TogglePin>
							break;
 8009ef2:	2700      	movs	r7, #0
 8009ef4:	e6da      	b.n	8009cac <PxMessagingTask+0x60>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009ef6:	4f45      	ldr	r7, [pc, #276]	; (800a00c <PxMessagingTask+0x3c0>)
 8009ef8:	00ab      	lsls	r3, r5, #2
 8009efa:	4a33      	ldr	r2, [pc, #204]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009efc:	1992      	adds	r2, r2, r6
 8009efe:	1910      	adds	r0, r2, r4
 8009f00:	7881      	ldrb	r1, [r0, #2]
 8009f02:	468c      	mov	ip, r1
 8009f04:	9904      	ldr	r1, [sp, #16]
 8009f06:	0209      	lsls	r1, r1, #8
 8009f08:	4461      	add	r1, ip
 8009f0a:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009f0c:	18fb      	adds	r3, r7, r3
 8009f0e:	5d11      	ldrb	r1, [r2, r4]
 8009f10:	0209      	lsls	r1, r1, #8
 8009f12:	7842      	ldrb	r2, [r0, #1]
 8009f14:	1852      	adds	r2, r2, r1
 8009f16:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 8009f18:	4b3d      	ldr	r3, [pc, #244]	; (800a010 <PxMessagingTask+0x3c4>)
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	4a3d      	ldr	r2, [pc, #244]	; (800a014 <PxMessagingTask+0x3c8>)
 8009f1e:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8009f20:	0a1b      	lsrs	r3, r3, #8
 8009f22:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8009f24:	9c08      	ldr	r4, [sp, #32]
 8009f26:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8009f28:	2002      	movs	r0, #2
 8009f2a:	f004 f918 	bl	800e15e <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8009f2e:	2303      	movs	r3, #3
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	0020      	movs	r0, r4
 8009f3a:	f7ff f99b 	bl	8009274 <SendMessageFromPort>
							break;
 8009f3e:	2700      	movs	r7, #0
 8009f40:	e6b4      	b.n	8009cac <PxMessagingTask+0x60>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009f42:	4f32      	ldr	r7, [pc, #200]	; (800a00c <PxMessagingTask+0x3c0>)
 8009f44:	00ab      	lsls	r3, r5, #2
 8009f46:	4a20      	ldr	r2, [pc, #128]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009f48:	1992      	adds	r2, r2, r6
 8009f4a:	1910      	adds	r0, r2, r4
 8009f4c:	7881      	ldrb	r1, [r0, #2]
 8009f4e:	468c      	mov	ip, r1
 8009f50:	9904      	ldr	r1, [sp, #16]
 8009f52:	0209      	lsls	r1, r1, #8
 8009f54:	4461      	add	r1, ip
 8009f56:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	5d11      	ldrb	r1, [r2, r4]
 8009f5c:	0209      	lsls	r1, r1, #8
 8009f5e:	7842      	ldrb	r2, [r0, #1]
 8009f60:	1852      	adds	r2, r2, r1
 8009f62:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 8009f64:	4b23      	ldr	r3, [pc, #140]	; (8009ff4 <PxMessagingTask+0x3a8>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	701a      	strb	r2, [r3, #0]
							break;
 8009f6a:	2700      	movs	r7, #0
 8009f6c:	e69e      	b.n	8009cac <PxMessagingTask+0x60>
							ExploreNeighbors(port);
 8009f6e:	9808      	ldr	r0, [sp, #32]
 8009f70:	f7f9 fc24 	bl	80037bc <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8009f74:	4b1a      	ldr	r3, [pc, #104]	; (8009fe0 <PxMessagingTask+0x394>)
 8009f76:	2202      	movs	r2, #2
 8009f78:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8009f7a:	200a      	movs	r0, #10
 8009f7c:	f004 f8ef 	bl	800e15e <osDelay>
 8009f80:	4f22      	ldr	r7, [pc, #136]	; (800a00c <PxMessagingTask+0x3c0>)
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009f82:	2401      	movs	r4, #1
							temp =0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	e004      	b.n	8009f94 <PxMessagingTask+0x348>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009f8a:	3401      	adds	r4, #1
 8009f8c:	b2e4      	uxtb	r4, r4
 8009f8e:	3704      	adds	r7, #4
 8009f90:	2c07      	cmp	r4, #7
 8009f92:	d011      	beq.n	8009fb8 <PxMessagingTask+0x36c>
								if(neighbors[p - 1][0]){
 8009f94:	883b      	ldrh	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0f7      	beq.n	8009f8a <PxMessagingTask+0x33e>
									messageParams[temp] =p;
 8009f9a:	4a1e      	ldr	r2, [pc, #120]	; (800a014 <PxMessagingTask+0x3c8>)
 8009f9c:	9b05      	ldr	r3, [sp, #20]
 8009f9e:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8009fa0:	1c58      	adds	r0, r3, #1
 8009fa2:	4694      	mov	ip, r2
 8009fa4:	4460      	add	r0, ip
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	0039      	movs	r1, r7
 8009faa:	f009 fed2 	bl	8013d52 <memcpy>
									temp +=5;
 8009fae:	9b05      	ldr	r3, [sp, #20]
 8009fb0:	3305      	adds	r3, #5
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	9305      	str	r3, [sp, #20]
 8009fb6:	e7e8      	b.n	8009f8a <PxMessagingTask+0x33e>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8009fb8:	466b      	mov	r3, sp
 8009fba:	8a9a      	ldrh	r2, [r3, #20]
 8009fbc:	210d      	movs	r1, #13
 8009fbe:	9804      	ldr	r0, [sp, #16]
 8009fc0:	f7ff fb80 	bl	80096c4 <SendMessageToModule>
							break;
 8009fc4:	2700      	movs	r7, #0
 8009fc6:	e671      	b.n	8009cac <PxMessagingTask+0x60>
 8009fc8:	20000d08 	.word	0x20000d08
 8009fcc:	20000ef5 	.word	0x20000ef5
 8009fd0:	20000f30 	.word	0x20000f30
 8009fd4:	200010f8 	.word	0x200010f8
 8009fd8:	20006aa0 	.word	0x20006aa0
 8009fdc:	20001076 	.word	0x20001076
 8009fe0:	20000ef4 	.word	0x20000ef4
 8009fe4:	200015f2 	.word	0x200015f2
 8009fe8:	0801afd8 	.word	0x0801afd8
 8009fec:	20000cb4 	.word	0x20000cb4
 8009ff0:	20006f1c 	.word	0x20006f1c
 8009ff4:	20001110 	.word	0x20001110
 8009ff8:	20000f68 	.word	0x20000f68
 8009ffc:	08019890 	.word	0x08019890
 800a000:	20001748 	.word	0x20001748
 800a004:	20000a77 	.word	0x20000a77
 800a008:	080198a4 	.word	0x080198a4
 800a00c:	20001078 	.word	0x20001078
 800a010:	20000050 	.word	0x20000050
 800a014:	20000f38 	.word	0x20000f38
							temp =numOfParams / 5;
 800a018:	2105      	movs	r1, #5
 800a01a:	9806      	ldr	r0, [sp, #24]
 800a01c:	f7f6 f898 	bl	8000150 <__udivsi3>
 800a020:	b2c2      	uxtb	r2, r0
 800a022:	9205      	str	r2, [sp, #20]
							for(uint8_t k =0; k < temp; k++){
 800a024:	2a00      	cmp	r2, #0
 800a026:	d018      	beq.n	800a05a <PxMessagingTask+0x40e>
 800a028:	4653      	mov	r3, sl
 800a02a:	191f      	adds	r7, r3, r4
 800a02c:	4bd4      	ldr	r3, [pc, #848]	; (800a380 <PxMessagingTask+0x734>)
 800a02e:	18ff      	adds	r7, r7, r3
 800a030:	3305      	adds	r3, #5
 800a032:	4453      	add	r3, sl
 800a034:	191c      	adds	r4, r3, r4
 800a036:	1e53      	subs	r3, r2, #1
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	009a      	lsls	r2, r3, #2
 800a03c:	18d3      	adds	r3, r2, r3
 800a03e:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a040:	4bd0      	ldr	r3, [pc, #832]	; (800a384 <PxMessagingTask+0x738>)
 800a042:	4698      	mov	r8, r3
 800a044:	7838      	ldrb	r0, [r7, #0]
 800a046:	3801      	subs	r0, #1
 800a048:	0080      	lsls	r0, r0, #2
 800a04a:	4440      	add	r0, r8
 800a04c:	1c79      	adds	r1, r7, #1
 800a04e:	2204      	movs	r2, #4
 800a050:	f009 fe7f 	bl	8013d52 <memcpy>
 800a054:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 800a056:	42bc      	cmp	r4, r7
 800a058:	d1f4      	bne.n	800a044 <PxMessagingTask+0x3f8>
							responseStatus =BOS_OK;
 800a05a:	4bcb      	ldr	r3, [pc, #812]	; (800a388 <PxMessagingTask+0x73c>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	701a      	strb	r2, [r3, #0]
							break;
 800a060:	2700      	movs	r7, #0
 800a062:	e623      	b.n	8009cac <PxMessagingTask+0x60>
 800a064:	4653      	mov	r3, sl
 800a066:	18e3      	adds	r3, r4, r3
 800a068:	4ac5      	ldr	r2, [pc, #788]	; (800a380 <PxMessagingTask+0x734>)
 800a06a:	4698      	mov	r8, r3
 800a06c:	4490      	add	r8, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a06e:	2701      	movs	r7, #1
								if(p != port)
 800a070:	9b08      	ldr	r3, [sp, #32]
 800a072:	42bb      	cmp	r3, r7
 800a074:	d006      	beq.n	800a084 <PxMessagingTask+0x438>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a076:	0038      	movs	r0, r7
 800a078:	f003 ff22 	bl	800dec0 <GetUart>
 800a07c:	4643      	mov	r3, r8
 800a07e:	7819      	ldrb	r1, [r3, #0]
 800a080:	f003 ffb8 	bl	800dff4 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a084:	3701      	adds	r7, #1
 800a086:	b2ff      	uxtb	r7, r7
 800a088:	2301      	movs	r3, #1
 800a08a:	469c      	mov	ip, r3
 800a08c:	44e0      	add	r8, ip
 800a08e:	2f07      	cmp	r7, #7
 800a090:	d1ee      	bne.n	800a070 <PxMessagingTask+0x424>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a092:	9808      	ldr	r0, [sp, #32]
 800a094:	f003 ff14 	bl	800dec0 <GetUart>
 800a098:	4bb9      	ldr	r3, [pc, #740]	; (800a380 <PxMessagingTask+0x734>)
 800a09a:	199b      	adds	r3, r3, r6
 800a09c:	191c      	adds	r4, r3, r4
 800a09e:	7aa1      	ldrb	r1, [r4, #10]
 800a0a0:	f003 ffa8 	bl	800dff4 <SwapUartPins>
							break;
 800a0a4:	2700      	movs	r7, #0
 800a0a6:	e601      	b.n	8009cac <PxMessagingTask+0x60>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a0a8:	4bb5      	ldr	r3, [pc, #724]	; (800a380 <PxMessagingTask+0x734>)
 800a0aa:	199b      	adds	r3, r3, r6
 800a0ac:	5d1b      	ldrb	r3, [r3, r4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d109      	bne.n	800a0c6 <PxMessagingTask+0x47a>
								myID =cMessage[port - 1][1 + shift];
 800a0b2:	2238      	movs	r2, #56	; 0x38
 800a0b4:	436a      	muls	r2, r5
 800a0b6:	4bb2      	ldr	r3, [pc, #712]	; (800a380 <PxMessagingTask+0x734>)
 800a0b8:	189b      	adds	r3, r3, r2
 800a0ba:	191c      	adds	r4, r3, r4
 800a0bc:	7862      	ldrb	r2, [r4, #1]
 800a0be:	4bb3      	ldr	r3, [pc, #716]	; (800a38c <PxMessagingTask+0x740>)
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	2700      	movs	r7, #0
 800a0c4:	e5f2      	b.n	8009cac <PxMessagingTask+0x60>
 800a0c6:	2700      	movs	r7, #0
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d000      	beq.n	800a0ce <PxMessagingTask+0x482>
 800a0cc:	e5ee      	b.n	8009cac <PxMessagingTask+0x60>
								messageParams[0] =0; /* change own ID */
 800a0ce:	49b0      	ldr	r1, [pc, #704]	; (800a390 <PxMessagingTask+0x744>)
 800a0d0:	700f      	strb	r7, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a0d2:	2238      	movs	r2, #56	; 0x38
 800a0d4:	436a      	muls	r2, r5
 800a0d6:	4baa      	ldr	r3, [pc, #680]	; (800a380 <PxMessagingTask+0x734>)
 800a0d8:	189b      	adds	r3, r3, r2
 800a0da:	191b      	adds	r3, r3, r4
 800a0dc:	785a      	ldrb	r2, [r3, #1]
 800a0de:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a0e0:	7898      	ldrb	r0, [r3, #2]
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	330d      	adds	r3, #13
 800a0e8:	003a      	movs	r2, r7
 800a0ea:	0039      	movs	r1, r7
 800a0ec:	f7ff f8c2 	bl	8009274 <SendMessageFromPort>
 800a0f0:	e5dc      	b.n	8009cac <PxMessagingTask+0x60>
							if(longMessage){
 800a0f2:	4ba8      	ldr	r3, [pc, #672]	; (800a394 <PxMessagingTask+0x748>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d011      	beq.n	800a11e <PxMessagingTask+0x4d2>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a0fa:	4ba7      	ldr	r3, [pc, #668]	; (800a398 <PxMessagingTask+0x74c>)
 800a0fc:	4698      	mov	r8, r3
 800a0fe:	881f      	ldrh	r7, [r3, #0]
 800a100:	48a6      	ldr	r0, [pc, #664]	; (800a39c <PxMessagingTask+0x750>)
 800a102:	1838      	adds	r0, r7, r0
 800a104:	4454      	add	r4, sl
 800a106:	499e      	ldr	r1, [pc, #632]	; (800a380 <PxMessagingTask+0x734>)
 800a108:	1861      	adds	r1, r4, r1
 800a10a:	9c06      	ldr	r4, [sp, #24]
 800a10c:	0022      	movs	r2, r4
 800a10e:	f009 fe20 	bl	8013d52 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a112:	46a4      	mov	ip, r4
 800a114:	4467      	add	r7, ip
 800a116:	4643      	mov	r3, r8
 800a118:	801f      	strh	r7, [r3, #0]
 800a11a:	2700      	movs	r7, #0
 800a11c:	e5c6      	b.n	8009cac <PxMessagingTask+0x60>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a11e:	4b9e      	ldr	r3, [pc, #632]	; (800a398 <PxMessagingTask+0x74c>)
 800a120:	4699      	mov	r9, r3
 800a122:	881f      	ldrh	r7, [r3, #0]
 800a124:	4b9d      	ldr	r3, [pc, #628]	; (800a39c <PxMessagingTask+0x750>)
 800a126:	4698      	mov	r8, r3
 800a128:	18f8      	adds	r0, r7, r3
 800a12a:	4454      	add	r4, sl
 800a12c:	4994      	ldr	r1, [pc, #592]	; (800a380 <PxMessagingTask+0x734>)
 800a12e:	1861      	adds	r1, r4, r1
 800a130:	9c06      	ldr	r4, [sp, #24]
 800a132:	0022      	movs	r2, r4
 800a134:	f009 fe0d 	bl	8013d52 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a138:	193c      	adds	r4, r7, r4
 800a13a:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a13c:	2116      	movs	r1, #22
 800a13e:	0020      	movs	r0, r4
 800a140:	f7f6 f806 	bl	8000150 <__udivsi3>
 800a144:	4b96      	ldr	r3, [pc, #600]	; (800a3a0 <PxMessagingTask+0x754>)
 800a146:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a148:	0022      	movs	r2, r4
 800a14a:	4641      	mov	r1, r8
 800a14c:	4895      	ldr	r0, [pc, #596]	; (800a3a4 <PxMessagingTask+0x758>)
 800a14e:	f009 fe00 	bl	8013d52 <memcpy>
								longMessageLastPtr =0;
 800a152:	2700      	movs	r7, #0
 800a154:	464b      	mov	r3, r9
 800a156:	801f      	strh	r7, [r3, #0]
 800a158:	e5a8      	b.n	8009cac <PxMessagingTask+0x60>
							for(p =1; p <= NumOfPorts; p++){
 800a15a:	2401      	movs	r4, #1
							temp =0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	9305      	str	r3, [sp, #20]
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a160:	2780      	movs	r7, #128	; 0x80
 800a162:	023f      	lsls	r7, r7, #8
 800a164:	e003      	b.n	800a16e <PxMessagingTask+0x522>
							for(p =1; p <= NumOfPorts; p++){
 800a166:	3401      	adds	r4, #1
 800a168:	b2e4      	uxtb	r4, r4
 800a16a:	2c07      	cmp	r4, #7
 800a16c:	d00c      	beq.n	800a188 <PxMessagingTask+0x53c>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a16e:	0020      	movs	r0, r4
 800a170:	f003 fea6 	bl	800dec0 <GetUart>
 800a174:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a176:	42bb      	cmp	r3, r7
 800a178:	d1f5      	bne.n	800a166 <PxMessagingTask+0x51a>
									messageParams[temp++] =p;
 800a17a:	9a05      	ldr	r2, [sp, #20]
 800a17c:	1c53      	adds	r3, r2, #1
 800a17e:	4984      	ldr	r1, [pc, #528]	; (800a390 <PxMessagingTask+0x744>)
 800a180:	548c      	strb	r4, [r1, r2]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	9305      	str	r3, [sp, #20]
 800a186:	e7ee      	b.n	800a166 <PxMessagingTask+0x51a>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a188:	466b      	mov	r3, sp
 800a18a:	8a9a      	ldrh	r2, [r3, #20]
 800a18c:	2114      	movs	r1, #20
 800a18e:	9804      	ldr	r0, [sp, #16]
 800a190:	f7ff fa98 	bl	80096c4 <SendMessageToModule>
							break;
 800a194:	2700      	movs	r7, #0
 800a196:	e589      	b.n	8009cac <PxMessagingTask+0x60>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a198:	4b79      	ldr	r3, [pc, #484]	; (800a380 <PxMessagingTask+0x734>)
 800a19a:	199b      	adds	r3, r3, r6
 800a19c:	5d1a      	ldrb	r2, [r3, r4]
 800a19e:	0612      	lsls	r2, r2, #24
 800a1a0:	191b      	adds	r3, r3, r4
 800a1a2:	78d9      	ldrb	r1, [r3, #3]
 800a1a4:	1852      	adds	r2, r2, r1
 800a1a6:	7859      	ldrb	r1, [r3, #1]
 800a1a8:	0409      	lsls	r1, r1, #16
 800a1aa:	1852      	adds	r2, r2, r1
 800a1ac:	7899      	ldrb	r1, [r3, #2]
 800a1ae:	0209      	lsls	r1, r1, #8
 800a1b0:	1852      	adds	r2, r2, r1
 800a1b2:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a1b4:	791b      	ldrb	r3, [r3, #4]
 800a1b6:	2bff      	cmp	r3, #255	; 0xff
 800a1b8:	d01b      	beq.n	800a1f2 <PxMessagingTask+0x5a6>
								for(p =0; p < numOfParams; p++){
 800a1ba:	9b06      	ldr	r3, [sp, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d015      	beq.n	800a1ec <PxMessagingTask+0x5a0>
 800a1c0:	4653      	mov	r3, sl
 800a1c2:	1d1f      	adds	r7, r3, #4
 800a1c4:	193f      	adds	r7, r7, r4
 800a1c6:	4b6e      	ldr	r3, [pc, #440]	; (800a380 <PxMessagingTask+0x734>)
 800a1c8:	18ff      	adds	r7, r7, r3
 800a1ca:	3305      	adds	r3, #5
 800a1cc:	4453      	add	r3, sl
 800a1ce:	191c      	adds	r4, r3, r4
 800a1d0:	9b06      	ldr	r3, [sp, #24]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 800a1d8:	783b      	ldrb	r3, [r7, #0]
 800a1da:	9305      	str	r3, [sp, #20]
									if(temp > 0 && temp <= NumOfPorts){
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	2b05      	cmp	r3, #5
 800a1e0:	d914      	bls.n	800a20c <PxMessagingTask+0x5c0>
 800a1e2:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 800a1e4:	42a7      	cmp	r7, r4
 800a1e6:	d1f7      	bne.n	800a1d8 <PxMessagingTask+0x58c>
 800a1e8:	2700      	movs	r7, #0
 800a1ea:	e55f      	b.n	8009cac <PxMessagingTask+0x60>
							temp =temp32 =0;
 800a1ec:	9305      	str	r3, [sp, #20]
								for(p =0; p < numOfParams; p++){
 800a1ee:	2700      	movs	r7, #0
 800a1f0:	e55c      	b.n	8009cac <PxMessagingTask+0x60>
								for(p =1; p <= NumOfPorts; p++){
 800a1f2:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800a1f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1f6:	0020      	movs	r0, r4
 800a1f8:	f003 fef2 	bl	800dfe0 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a1fc:	3401      	adds	r4, #1
 800a1fe:	b2e4      	uxtb	r4, r4
 800a200:	2c07      	cmp	r4, #7
 800a202:	d1f7      	bne.n	800a1f4 <PxMessagingTask+0x5a8>
							temp =temp32 =0;
 800a204:	2300      	movs	r3, #0
 800a206:	9305      	str	r3, [sp, #20]
 800a208:	001f      	movs	r7, r3
 800a20a:	e54f      	b.n	8009cac <PxMessagingTask+0x60>
										UpdateBaudrate(temp,temp32);
 800a20c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a20e:	9805      	ldr	r0, [sp, #20]
 800a210:	f003 fee6 	bl	800dfe0 <UpdateBaudrate>
 800a214:	e7e5      	b.n	800a1e2 <PxMessagingTask+0x596>
							SaveToRO();
 800a216:	f001 f90f 	bl	800b438 <SaveToRO>
							SaveEEportsDir();
 800a21a:	f7f9 f8ed 	bl	80033f8 <SaveEEportsDir>
							indMode =IND_PING;
 800a21e:	4b62      	ldr	r3, [pc, #392]	; (800a3a8 <PxMessagingTask+0x75c>)
 800a220:	2201      	movs	r2, #1
 800a222:	701a      	strb	r2, [r3, #0]
							break;
 800a224:	2700      	movs	r7, #0
 800a226:	e541      	b.n	8009cac <PxMessagingTask+0x60>
							ClearEEportsDir();
 800a228:	f7f9 f9d0 	bl	80035cc <ClearEEportsDir>
							ClearROtopology();
 800a22c:	f001 fa0c 	bl	800b648 <ClearROtopology>
							osDelay(100);
 800a230:	2064      	movs	r0, #100	; 0x64
 800a232:	f003 ff94 	bl	800e15e <osDelay>
							indMode =IND_TOPOLOGY;
 800a236:	4b5c      	ldr	r3, [pc, #368]	; (800a3a8 <PxMessagingTask+0x75c>)
 800a238:	2202      	movs	r2, #2
 800a23a:	701a      	strb	r2, [r3, #0]
							break;
 800a23c:	2700      	movs	r7, #0
 800a23e:	e535      	b.n	8009cac <PxMessagingTask+0x60>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a240:	f004 f8a2 	bl	800e388 <FreeRTOS_CLIGetOutputBuffer>
 800a244:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 800a246:	464b      	mov	r3, r9
 800a248:	2bff      	cmp	r3, #255	; 0xff
 800a24a:	d026      	beq.n	800a29a <PxMessagingTask+0x64e>
							else if(dst == BOS_MULTICAST)
 800a24c:	2bfe      	cmp	r3, #254	; 0xfe
 800a24e:	d02d      	beq.n	800a2ac <PxMessagingTask+0x660>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a250:	4454      	add	r4, sl
 800a252:	494b      	ldr	r1, [pc, #300]	; (800a380 <PxMessagingTask+0x734>)
 800a254:	1861      	adds	r1, r4, r1
 800a256:	9a06      	ldr	r2, [sp, #24]
 800a258:	4854      	ldr	r0, [pc, #336]	; (800a3ac <PxMessagingTask+0x760>)
 800a25a:	f009 fd7a 	bl	8013d52 <memcpy>
								temp =PcPort;
 800a25e:	4c54      	ldr	r4, [pc, #336]	; (800a3b0 <PxMessagingTask+0x764>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a260:	4b52      	ldr	r3, [pc, #328]	; (800a3ac <PxMessagingTask+0x760>)
 800a262:	4699      	mov	r9, r3
								if(BOS.response == BOS_RESPONSE_ALL){
 800a264:	4b53      	ldr	r3, [pc, #332]	; (800a3b4 <PxMessagingTask+0x768>)
 800a266:	4698      	mov	r8, r3
								temp =PcPort;
 800a268:	7823      	ldrb	r3, [r4, #0]
 800a26a:	9305      	str	r3, [sp, #20]
								PcPort =port;
 800a26c:	9a08      	ldr	r2, [sp, #32]
 800a26e:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a270:	2299      	movs	r2, #153	; 0x99
 800a272:	0092      	lsls	r2, r2, #2
 800a274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a276:	4648      	mov	r0, r9
 800a278:	f004 f808 	bl	800e28c <FreeRTOS_CLIProcessCommand>
 800a27c:	0007      	movs	r7, r0
								PcPort =temp;
 800a27e:	9b05      	ldr	r3, [sp, #20]
 800a280:	7023      	strb	r3, [r4, #0]
								if(BOS.response == BOS_RESPONSE_ALL){
 800a282:	4643      	mov	r3, r8
 800a284:	799b      	ldrb	r3, [r3, #6]
 800a286:	2b60      	cmp	r3, #96	; 0x60
 800a288:	d01b      	beq.n	800a2c2 <PxMessagingTask+0x676>
							} while(xReturned != pdFALSE);
 800a28a:	2f00      	cmp	r7, #0
 800a28c:	d1ec      	bne.n	800a268 <PxMessagingTask+0x61c>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a28e:	2232      	movs	r2, #50	; 0x32
 800a290:	2100      	movs	r1, #0
 800a292:	4846      	ldr	r0, [pc, #280]	; (800a3ac <PxMessagingTask+0x760>)
 800a294:	f009 fd66 	bl	8013d64 <memset>
							break;
 800a298:	e508      	b.n	8009cac <PxMessagingTask+0x60>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a29a:	9a06      	ldr	r2, [sp, #24]
 800a29c:	3a01      	subs	r2, #1
 800a29e:	4454      	add	r4, sl
 800a2a0:	4937      	ldr	r1, [pc, #220]	; (800a380 <PxMessagingTask+0x734>)
 800a2a2:	1861      	adds	r1, r4, r1
 800a2a4:	4841      	ldr	r0, [pc, #260]	; (800a3ac <PxMessagingTask+0x760>)
 800a2a6:	f009 fd54 	bl	8013d52 <memcpy>
 800a2aa:	e7d8      	b.n	800a25e <PxMessagingTask+0x612>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a2ac:	9b06      	ldr	r3, [sp, #24]
 800a2ae:	9a05      	ldr	r2, [sp, #20]
 800a2b0:	1a9a      	subs	r2, r3, r2
 800a2b2:	3a02      	subs	r2, #2
 800a2b4:	4454      	add	r4, sl
 800a2b6:	4932      	ldr	r1, [pc, #200]	; (800a380 <PxMessagingTask+0x734>)
 800a2b8:	1861      	adds	r1, r4, r1
 800a2ba:	483c      	ldr	r0, [pc, #240]	; (800a3ac <PxMessagingTask+0x760>)
 800a2bc:	f009 fd49 	bl	8013d52 <memcpy>
 800a2c0:	e7cd      	b.n	800a25e <PxMessagingTask+0x612>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a2c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2c4:	f7f5 ff28 	bl	8000118 <strlen>
 800a2c8:	0002      	movs	r2, r0
 800a2ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2cc:	4830      	ldr	r0, [pc, #192]	; (800a390 <PxMessagingTask+0x744>)
 800a2ce:	f009 fd40 	bl	8013d52 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a2d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2d4:	f7f5 ff20 	bl	8000118 <strlen>
 800a2d8:	b282      	uxth	r2, r0
 800a2da:	2118      	movs	r1, #24
 800a2dc:	9804      	ldr	r0, [sp, #16]
 800a2de:	f7ff f9f1 	bl	80096c4 <SendMessageToModule>
									osDelay(10);
 800a2e2:	200a      	movs	r0, #10
 800a2e4:	f003 ff3b 	bl	800e15e <osDelay>
 800a2e8:	e7cf      	b.n	800a28a <PxMessagingTask+0x63e>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a2ea:	f004 f84d 	bl	800e388 <FreeRTOS_CLIGetOutputBuffer>
 800a2ee:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a2f0:	f7f5 ff12 	bl	8000118 <strlen>
 800a2f4:	0002      	movs	r2, r0
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	0038      	movs	r0, r7
 800a2fa:	f009 fd33 	bl	8013d64 <memset>
							if(longMessage){
 800a2fe:	4b25      	ldr	r3, [pc, #148]	; (800a394 <PxMessagingTask+0x748>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d012      	beq.n	800a32c <PxMessagingTask+0x6e0>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a306:	4b24      	ldr	r3, [pc, #144]	; (800a398 <PxMessagingTask+0x74c>)
 800a308:	4698      	mov	r8, r3
 800a30a:	8818      	ldrh	r0, [r3, #0]
 800a30c:	1838      	adds	r0, r7, r0
 800a30e:	4454      	add	r4, sl
 800a310:	491b      	ldr	r1, [pc, #108]	; (800a380 <PxMessagingTask+0x734>)
 800a312:	1861      	adds	r1, r4, r1
 800a314:	9c06      	ldr	r4, [sp, #24]
 800a316:	0022      	movs	r2, r4
 800a318:	f009 fd1b 	bl	8013d52 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a31c:	4643      	mov	r3, r8
 800a31e:	881a      	ldrh	r2, [r3, #0]
 800a320:	46a4      	mov	ip, r4
 800a322:	4462      	add	r2, ip
 800a324:	4643      	mov	r3, r8
 800a326:	801a      	strh	r2, [r3, #0]
 800a328:	2700      	movs	r7, #0
 800a32a:	e4bf      	b.n	8009cac <PxMessagingTask+0x60>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a32c:	4b1a      	ldr	r3, [pc, #104]	; (800a398 <PxMessagingTask+0x74c>)
 800a32e:	4698      	mov	r8, r3
 800a330:	8818      	ldrh	r0, [r3, #0]
 800a332:	1838      	adds	r0, r7, r0
 800a334:	4454      	add	r4, sl
 800a336:	4912      	ldr	r1, [pc, #72]	; (800a380 <PxMessagingTask+0x734>)
 800a338:	1861      	adds	r1, r4, r1
 800a33a:	9a06      	ldr	r2, [sp, #24]
 800a33c:	f009 fd09 	bl	8013d52 <memcpy>
								longMessageLastPtr =0;
 800a340:	2700      	movs	r7, #0
 800a342:	4643      	mov	r3, r8
 800a344:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 800a346:	4b10      	ldr	r3, [pc, #64]	; (800a388 <PxMessagingTask+0x73c>)
 800a348:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a34a:	003b      	movs	r3, r7
 800a34c:	003a      	movs	r2, r7
 800a34e:	0039      	movs	r1, r7
 800a350:	4819      	ldr	r0, [pc, #100]	; (800a3b8 <PxMessagingTask+0x76c>)
 800a352:	6800      	ldr	r0, [r0, #0]
 800a354:	f005 fc62 	bl	800fc1c <xTaskGenericNotify>
 800a358:	e4a8      	b.n	8009cac <PxMessagingTask+0x60>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a35a:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <PxMessagingTask+0x770>)
 800a35c:	4a18      	ldr	r2, [pc, #96]	; (800a3c0 <PxMessagingTask+0x774>)
 800a35e:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a360:	4b11      	ldr	r3, [pc, #68]	; (800a3a8 <PxMessagingTask+0x75c>)
 800a362:	2201      	movs	r2, #1
 800a364:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a366:	200a      	movs	r0, #10
 800a368:	f003 fef9 	bl	800e15e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	4b14      	ldr	r3, [pc, #80]	; (800a3c4 <PxMessagingTask+0x778>)
 800a372:	4a15      	ldr	r2, [pc, #84]	; (800a3c8 <PxMessagingTask+0x77c>)
 800a374:	60da      	str	r2, [r3, #12]
 800a376:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	e7fd      	b.n	800a37a <PxMessagingTask+0x72e>
 800a37e:	46c0      	nop			; (mov r8, r8)
 800a380:	20000d08 	.word	0x20000d08
 800a384:	20001090 	.word	0x20001090
 800a388:	20001110 	.word	0x20001110
 800a38c:	20001076 	.word	0x20001076
 800a390:	20000f38 	.word	0x20000f38
 800a394:	20000ef5 	.word	0x20000ef5
 800a398:	20000ef6 	.word	0x20000ef6
 800a39c:	20001628 	.word	0x20001628
 800a3a0:	2000001c 	.word	0x2000001c
 800a3a4:	20000a78 	.word	0x20000a78
 800a3a8:	20000ef4 	.word	0x20000ef4
 800a3ac:	200015f4 	.word	0x200015f4
 800a3b0:	20000a77 	.word	0x20000a77
 800a3b4:	20006aa0 	.word	0x20006aa0
 800a3b8:	20001504 	.word	0x20001504
 800a3bc:	20007ff0 	.word	0x20007ff0
 800a3c0:	deadbeef 	.word	0xdeadbeef
 800a3c4:	e000ed00 	.word	0xe000ed00
 800a3c8:	05fa0004 	.word	0x05fa0004
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a3cc:	4fef      	ldr	r7, [pc, #956]	; (800a78c <PxMessagingTask+0xb40>)
 800a3ce:	19bf      	adds	r7, r7, r6
 800a3d0:	5d38      	ldrb	r0, [r7, r4]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	3319      	adds	r3, #25
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2100      	movs	r1, #0
 800a3dc:	f7fe ff4a 	bl	8009274 <SendMessageFromPort>
							osDelay(100);
 800a3e0:	2064      	movs	r0, #100	; 0x64
 800a3e2:	f003 febc 	bl	800e15e <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a3e6:	5d3b      	ldrb	r3, [r7, r4]
 800a3e8:	4ae9      	ldr	r2, [pc, #932]	; (800a790 <PxMessagingTask+0xb44>)
 800a3ea:	7811      	ldrb	r1, [r2, #0]
 800a3ec:	9a08      	ldr	r2, [sp, #32]
 800a3ee:	9804      	ldr	r0, [sp, #16]
 800a3f0:	f7f9 fbac 	bl	8003b4c <remoteBootloaderUpdate>
							break;
 800a3f4:	2700      	movs	r7, #0
 800a3f6:	e459      	b.n	8009cac <PxMessagingTask+0x60>
							temp =cMessage[port - 1][11 + shift];
 800a3f8:	46a0      	mov	r8, r4
 800a3fa:	0027      	movs	r7, r4
 800a3fc:	370b      	adds	r7, #11
 800a3fe:	4be3      	ldr	r3, [pc, #908]	; (800a78c <PxMessagingTask+0xb40>)
 800a400:	199b      	adds	r3, r3, r6
 800a402:	5ddb      	ldrb	r3, [r3, r7]
 800a404:	4699      	mov	r9, r3
							if(numOfParams == 15)
 800a406:	9b06      	ldr	r3, [sp, #24]
 800a408:	2b0f      	cmp	r3, #15
 800a40a:	d100      	bne.n	800a40e <PxMessagingTask+0x7c2>
 800a40c:	e087      	b.n	800a51e <PxMessagingTask+0x8d2>
							if(numOfParams == 17)
 800a40e:	9b06      	ldr	r3, [sp, #24]
 800a410:	2b11      	cmp	r3, #17
 800a412:	d100      	bne.n	800a416 <PxMessagingTask+0x7ca>
 800a414:	e08b      	b.n	800a52e <PxMessagingTask+0x8e2>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a416:	4643      	mov	r3, r8
 800a418:	1c58      	adds	r0, r3, #1
 800a41a:	900c      	str	r0, [sp, #48]	; 0x30
 800a41c:	1c9c      	adds	r4, r3, #2
 800a41e:	940d      	str	r4, [sp, #52]	; 0x34
 800a420:	1cd9      	adds	r1, r3, #3
 800a422:	910e      	str	r1, [sp, #56]	; 0x38
 800a424:	4bd9      	ldr	r3, [pc, #868]	; (800a78c <PxMessagingTask+0xb40>)
 800a426:	199b      	adds	r3, r3, r6
 800a428:	4642      	mov	r2, r8
 800a42a:	5c9a      	ldrb	r2, [r3, r2]
 800a42c:	0612      	lsls	r2, r2, #24
 800a42e:	5c59      	ldrb	r1, [r3, r1]
 800a430:	1852      	adds	r2, r2, r1
 800a432:	5c19      	ldrb	r1, [r3, r0]
 800a434:	0409      	lsls	r1, r1, #16
 800a436:	1852      	adds	r2, r2, r1
 800a438:	5d19      	ldrb	r1, [r3, r4]
 800a43a:	0209      	lsls	r1, r1, #8
 800a43c:	1852      	adds	r2, r2, r1
 800a43e:	920b      	str	r2, [sp, #44]	; 0x2c
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a440:	4642      	mov	r2, r8
 800a442:	3204      	adds	r2, #4
 800a444:	920f      	str	r2, [sp, #60]	; 0x3c
 800a446:	4641      	mov	r1, r8
 800a448:	3105      	adds	r1, #5
 800a44a:	9110      	str	r1, [sp, #64]	; 0x40
 800a44c:	4640      	mov	r0, r8
 800a44e:	3006      	adds	r0, #6
 800a450:	9011      	str	r0, [sp, #68]	; 0x44
 800a452:	4644      	mov	r4, r8
 800a454:	3407      	adds	r4, #7
 800a456:	9405      	str	r4, [sp, #20]
 800a458:	5c9c      	ldrb	r4, [r3, r2]
 800a45a:	0624      	lsls	r4, r4, #24
 800a45c:	5c5a      	ldrb	r2, [r3, r1]
 800a45e:	0412      	lsls	r2, r2, #16
 800a460:	18a4      	adds	r4, r4, r2
 800a462:	9a05      	ldr	r2, [sp, #20]
 800a464:	5c9a      	ldrb	r2, [r3, r2]
 800a466:	18a4      	adds	r4, r4, r2
 800a468:	5c1b      	ldrb	r3, [r3, r0]
 800a46a:	021b      	lsls	r3, r3, #8
 800a46c:	18e4      	adds	r4, r4, r3
							if(temp == false){
 800a46e:	464b      	mov	r3, r9
 800a470:	2b00      	cmp	r3, #0
 800a472:	d164      	bne.n	800a53e <PxMessagingTask+0x8f2>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a474:	4bc5      	ldr	r3, [pc, #788]	; (800a78c <PxMessagingTask+0xb40>)
 800a476:	199b      	adds	r3, r3, r6
 800a478:	4443      	add	r3, r8
 800a47a:	7a5b      	ldrb	r3, [r3, #9]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d012      	beq.n	800a4a6 <PxMessagingTask+0x85a>
 800a480:	2138      	movs	r1, #56	; 0x38
 800a482:	4369      	muls	r1, r5
 800a484:	4ac1      	ldr	r2, [pc, #772]	; (800a78c <PxMessagingTask+0xb40>)
 800a486:	1852      	adds	r2, r2, r1
 800a488:	4442      	add	r2, r8
 800a48a:	7a91      	ldrb	r1, [r2, #10]
 800a48c:	2900      	cmp	r1, #0
 800a48e:	d00a      	beq.n	800a4a6 <PxMessagingTask+0x85a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a490:	2038      	movs	r0, #56	; 0x38
 800a492:	4368      	muls	r0, r5
 800a494:	4abd      	ldr	r2, [pc, #756]	; (800a78c <PxMessagingTask+0xb40>)
 800a496:	1812      	adds	r2, r2, r0
 800a498:	4442      	add	r2, r8
 800a49a:	7a10      	ldrb	r0, [r2, #8]
 800a49c:	9100      	str	r1, [sp, #0]
 800a49e:	0022      	movs	r2, r4
 800a4a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4a2:	f7fe fdc5 	bl	8009030 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a4a6:	4bb9      	ldr	r3, [pc, #740]	; (800a78c <PxMessagingTask+0xb40>)
 800a4a8:	199b      	adds	r3, r3, r6
 800a4aa:	5ddb      	ldrb	r3, [r3, r7]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d012      	beq.n	800a4d6 <PxMessagingTask+0x88a>
 800a4b0:	2138      	movs	r1, #56	; 0x38
 800a4b2:	4369      	muls	r1, r5
 800a4b4:	4ab5      	ldr	r2, [pc, #724]	; (800a78c <PxMessagingTask+0xb40>)
 800a4b6:	1852      	adds	r2, r2, r1
 800a4b8:	4442      	add	r2, r8
 800a4ba:	7b11      	ldrb	r1, [r2, #12]
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	d00a      	beq.n	800a4d6 <PxMessagingTask+0x88a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a4c0:	2038      	movs	r0, #56	; 0x38
 800a4c2:	4368      	muls	r0, r5
 800a4c4:	4ab1      	ldr	r2, [pc, #708]	; (800a78c <PxMessagingTask+0xb40>)
 800a4c6:	1812      	adds	r2, r2, r0
 800a4c8:	4442      	add	r2, r8
 800a4ca:	7a10      	ldrb	r0, [r2, #8]
 800a4cc:	9100      	str	r1, [sp, #0]
 800a4ce:	0022      	movs	r2, r4
 800a4d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4d2:	f7fe fdad 	bl	8009030 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a4d6:	4bad      	ldr	r3, [pc, #692]	; (800a78c <PxMessagingTask+0xb40>)
 800a4d8:	199b      	adds	r3, r3, r6
 800a4da:	4443      	add	r3, r8
 800a4dc:	7b5b      	ldrb	r3, [r3, #13]
 800a4de:	9305      	str	r3, [sp, #20]
 800a4e0:	2700      	movs	r7, #0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <PxMessagingTask+0x89e>
 800a4e6:	f7ff fbe1 	bl	8009cac <PxMessagingTask+0x60>
 800a4ea:	2238      	movs	r2, #56	; 0x38
 800a4ec:	436a      	muls	r2, r5
 800a4ee:	4ba7      	ldr	r3, [pc, #668]	; (800a78c <PxMessagingTask+0xb40>)
 800a4f0:	189b      	adds	r3, r3, r2
 800a4f2:	4443      	add	r3, r8
 800a4f4:	7b9a      	ldrb	r2, [r3, #14]
 800a4f6:	42ba      	cmp	r2, r7
 800a4f8:	d101      	bne.n	800a4fe <PxMessagingTask+0x8b2>
 800a4fa:	f000 fea0 	bl	800b23e <PxMessagingTask+0x15f2>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800a4fe:	2138      	movs	r1, #56	; 0x38
 800a500:	4369      	muls	r1, r5
 800a502:	4ba2      	ldr	r3, [pc, #648]	; (800a78c <PxMessagingTask+0xb40>)
 800a504:	185b      	adds	r3, r3, r1
 800a506:	4443      	add	r3, r8
 800a508:	7a18      	ldrb	r0, [r3, #8]
 800a50a:	9200      	str	r2, [sp, #0]
 800a50c:	9b05      	ldr	r3, [sp, #20]
 800a50e:	0022      	movs	r2, r4
 800a510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a512:	f7fe fd8d 	bl	8009030 <SetupDMAStreams>
 800a516:	464b      	mov	r3, r9
 800a518:	9305      	str	r3, [sp, #20]
 800a51a:	f7ff fbc7 	bl	8009cac <PxMessagingTask+0x60>
								temp =cMessage[port - 1][13 + shift];
 800a51e:	2238      	movs	r2, #56	; 0x38
 800a520:	436a      	muls	r2, r5
 800a522:	4b9a      	ldr	r3, [pc, #616]	; (800a78c <PxMessagingTask+0xb40>)
 800a524:	189b      	adds	r3, r3, r2
 800a526:	191c      	adds	r4, r3, r4
 800a528:	7b63      	ldrb	r3, [r4, #13]
 800a52a:	4699      	mov	r9, r3
 800a52c:	e773      	b.n	800a416 <PxMessagingTask+0x7ca>
								temp =cMessage[port - 1][15 + shift];
 800a52e:	2238      	movs	r2, #56	; 0x38
 800a530:	436a      	muls	r2, r5
 800a532:	4b96      	ldr	r3, [pc, #600]	; (800a78c <PxMessagingTask+0xb40>)
 800a534:	189b      	adds	r3, r3, r2
 800a536:	4443      	add	r3, r8
 800a538:	7bdb      	ldrb	r3, [r3, #15]
 800a53a:	4699      	mov	r9, r3
 800a53c:	e76b      	b.n	800a416 <PxMessagingTask+0x7ca>
 800a53e:	46c2      	mov	sl, r8
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800a540:	2338      	movs	r3, #56	; 0x38
 800a542:	436b      	muls	r3, r5
 800a544:	4c91      	ldr	r4, [pc, #580]	; (800a78c <PxMessagingTask+0xb40>)
 800a546:	18e4      	adds	r4, r4, r3
 800a548:	4653      	mov	r3, sl
 800a54a:	18e6      	adds	r6, r4, r3
 800a54c:	7a31      	ldrb	r1, [r6, #8]
 800a54e:	20e4      	movs	r0, #228	; 0xe4
 800a550:	f7fd f946 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800a554:	4653      	mov	r3, sl
 800a556:	5ce3      	ldrb	r3, [r4, r3]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a55c:	5ca1      	ldrb	r1, [r4, r2]
 800a55e:	18c9      	adds	r1, r1, r3
 800a560:	b289      	uxth	r1, r1
 800a562:	20e5      	movs	r0, #229	; 0xe5
 800a564:	f7fd f93c 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800a568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a56a:	5ce3      	ldrb	r3, [r4, r3]
 800a56c:	021b      	lsls	r3, r3, #8
 800a56e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a570:	5ca1      	ldrb	r1, [r4, r2]
 800a572:	18c9      	adds	r1, r1, r3
 800a574:	b289      	uxth	r1, r1
 800a576:	20e6      	movs	r0, #230	; 0xe6
 800a578:	f7fd f932 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800a57c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a57e:	5ce3      	ldrb	r3, [r4, r3]
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a584:	5ca1      	ldrb	r1, [r4, r2]
 800a586:	18c9      	adds	r1, r1, r3
 800a588:	b289      	uxth	r1, r1
 800a58a:	20e7      	movs	r0, #231	; 0xe7
 800a58c:	f7fd f928 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800a590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a592:	5ce3      	ldrb	r3, [r4, r3]
 800a594:	021b      	lsls	r3, r3, #8
 800a596:	9a05      	ldr	r2, [sp, #20]
 800a598:	5ca1      	ldrb	r1, [r4, r2]
 800a59a:	18c9      	adds	r1, r1, r3
 800a59c:	b289      	uxth	r1, r1
 800a59e:	20e8      	movs	r0, #232	; 0xe8
 800a5a0:	f7fd f91e 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800a5a4:	7a73      	ldrb	r3, [r6, #9]
 800a5a6:	021b      	lsls	r3, r3, #8
 800a5a8:	7ab1      	ldrb	r1, [r6, #10]
 800a5aa:	18c9      	adds	r1, r1, r3
 800a5ac:	b289      	uxth	r1, r1
 800a5ae:	20e9      	movs	r0, #233	; 0xe9
 800a5b0:	f7fd f916 	bl	80077e0 <EE_WriteVariable>
								if(numOfParams == 19)
 800a5b4:	9b06      	ldr	r3, [sp, #24]
 800a5b6:	2b13      	cmp	r3, #19
 800a5b8:	d115      	bne.n	800a5e6 <PxMessagingTask+0x99a>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800a5ba:	3325      	adds	r3, #37	; 0x25
 800a5bc:	436b      	muls	r3, r5
 800a5be:	4d73      	ldr	r5, [pc, #460]	; (800a78c <PxMessagingTask+0xb40>)
 800a5c0:	18ed      	adds	r5, r5, r3
 800a5c2:	5deb      	ldrb	r3, [r5, r7]
 800a5c4:	021b      	lsls	r3, r3, #8
 800a5c6:	4455      	add	r5, sl
 800a5c8:	7b29      	ldrb	r1, [r5, #12]
 800a5ca:	18c9      	adds	r1, r1, r3
 800a5cc:	b289      	uxth	r1, r1
 800a5ce:	20ea      	movs	r0, #234	; 0xea
 800a5d0:	f7fd f906 	bl	80077e0 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	4b6e      	ldr	r3, [pc, #440]	; (800a794 <PxMessagingTask+0xb48>)
 800a5da:	4a6f      	ldr	r2, [pc, #444]	; (800a798 <PxMessagingTask+0xb4c>)
 800a5dc:	60da      	str	r2, [r3, #12]
 800a5de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a5e2:	46c0      	nop			; (mov r8, r8)
 800a5e4:	e7fd      	b.n	800a5e2 <PxMessagingTask+0x996>
								if(numOfParams == 21)
 800a5e6:	9b06      	ldr	r3, [sp, #24]
 800a5e8:	2b15      	cmp	r3, #21
 800a5ea:	d1f3      	bne.n	800a5d4 <PxMessagingTask+0x988>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800a5ec:	3323      	adds	r3, #35	; 0x23
 800a5ee:	435d      	muls	r5, r3
 800a5f0:	4b66      	ldr	r3, [pc, #408]	; (800a78c <PxMessagingTask+0xb40>)
 800a5f2:	195b      	adds	r3, r3, r5
 800a5f4:	4453      	add	r3, sl
 800a5f6:	7b5a      	ldrb	r2, [r3, #13]
 800a5f8:	0212      	lsls	r2, r2, #8
 800a5fa:	7b99      	ldrb	r1, [r3, #14]
 800a5fc:	1889      	adds	r1, r1, r2
 800a5fe:	b289      	uxth	r1, r1
 800a600:	20eb      	movs	r0, #235	; 0xeb
 800a602:	f7fd f8ed 	bl	80077e0 <EE_WriteVariable>
 800a606:	e7e5      	b.n	800a5d4 <PxMessagingTask+0x988>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a608:	4f60      	ldr	r7, [pc, #384]	; (800a78c <PxMessagingTask+0xb40>)
 800a60a:	19bf      	adds	r7, r7, r6
 800a60c:	1939      	adds	r1, r7, r4
 800a60e:	7a8b      	ldrb	r3, [r1, #10]
 800a610:	9306      	str	r3, [sp, #24]
 800a612:	7aca      	ldrb	r2, [r1, #11]
 800a614:	485e      	ldr	r0, [pc, #376]	; (800a790 <PxMessagingTask+0xb44>)
 800a616:	7803      	ldrb	r3, [r0, #0]
 800a618:	4698      	mov	r8, r3
 800a61a:	7a4b      	ldrb	r3, [r1, #9]
 800a61c:	4699      	mov	r9, r3
 800a61e:	7b08      	ldrb	r0, [r1, #12]
 800a620:	0003      	movs	r3, r0
 800a622:	1e58      	subs	r0, r3, #1
 800a624:	4183      	sbcs	r3, r0
 800a626:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a628:	7908      	ldrb	r0, [r1, #4]
 800a62a:	0603      	lsls	r3, r0, #24
 800a62c:	469c      	mov	ip, r3
 800a62e:	7948      	ldrb	r0, [r1, #5]
 800a630:	0400      	lsls	r0, r0, #16
 800a632:	4460      	add	r0, ip
 800a634:	79cb      	ldrb	r3, [r1, #7]
 800a636:	469c      	mov	ip, r3
 800a638:	4460      	add	r0, ip
 800a63a:	798b      	ldrb	r3, [r1, #6]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	469c      	mov	ip, r3
 800a640:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a642:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a644:	5d38      	ldrb	r0, [r7, r4]
 800a646:	0600      	lsls	r0, r0, #24
 800a648:	78cc      	ldrb	r4, [r1, #3]
 800a64a:	1900      	adds	r0, r0, r4
 800a64c:	784c      	ldrb	r4, [r1, #1]
 800a64e:	0424      	lsls	r4, r4, #16
 800a650:	1900      	adds	r0, r0, r4
 800a652:	788c      	ldrb	r4, [r1, #2]
 800a654:	0224      	lsls	r4, r4, #8
 800a656:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a658:	9001      	str	r0, [sp, #4]
 800a65a:	7a09      	ldrb	r1, [r1, #8]
 800a65c:	9100      	str	r1, [sp, #0]
 800a65e:	9b06      	ldr	r3, [sp, #24]
 800a660:	4641      	mov	r1, r8
 800a662:	4648      	mov	r0, r9
 800a664:	f7ff f854 	bl	8009710 <StartScastDMAStream>
							break;
 800a668:	2700      	movs	r7, #0
 800a66a:	f7ff fb1f 	bl	8009cac <PxMessagingTask+0x60>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800a66e:	0023      	movs	r3, r4
 800a670:	4a46      	ldr	r2, [pc, #280]	; (800a78c <PxMessagingTask+0xb40>)
 800a672:	1992      	adds	r2, r2, r6
 800a674:	5d12      	ldrb	r2, [r2, r4]
 800a676:	2a00      	cmp	r2, #0
 800a678:	d000      	beq.n	800a67c <PxMessagingTask+0xa30>
 800a67a:	e093      	b.n	800a7a4 <PxMessagingTask+0xb58>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a67c:	3238      	adds	r2, #56	; 0x38
 800a67e:	436a      	muls	r2, r5
 800a680:	4b42      	ldr	r3, [pc, #264]	; (800a78c <PxMessagingTask+0xb40>)
 800a682:	189b      	adds	r3, r3, r2
 800a684:	191c      	adds	r4, r3, r4
 800a686:	78a3      	ldrb	r3, [r4, #2]
 800a688:	061b      	lsls	r3, r3, #24
 800a68a:	78e2      	ldrb	r2, [r4, #3]
 800a68c:	0412      	lsls	r2, r2, #16
 800a68e:	189b      	adds	r3, r3, r2
 800a690:	7962      	ldrb	r2, [r4, #5]
 800a692:	189b      	adds	r3, r3, r2
 800a694:	7922      	ldrb	r2, [r4, #4]
 800a696:	0212      	lsls	r2, r2, #8
 800a698:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800a69a:	7862      	ldrb	r2, [r4, #1]
 800a69c:	3a01      	subs	r2, #1
 800a69e:	b2d1      	uxtb	r1, r2
 800a6a0:	2907      	cmp	r1, #7
 800a6a2:	d901      	bls.n	800a6a8 <PxMessagingTask+0xa5c>
 800a6a4:	f000 fdb7 	bl	800b216 <PxMessagingTask+0x15ca>
 800a6a8:	b2d2      	uxtb	r2, r2
 800a6aa:	0092      	lsls	r2, r2, #2
 800a6ac:	493b      	ldr	r1, [pc, #236]	; (800a79c <PxMessagingTask+0xb50>)
 800a6ae:	588a      	ldr	r2, [r1, r2]
 800a6b0:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800a6b2:	781a      	ldrb	r2, [r3, #0]
 800a6b4:	4b3a      	ldr	r3, [pc, #232]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6b6:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	211f      	movs	r1, #31
 800a6bc:	9804      	ldr	r0, [sp, #16]
 800a6be:	f7ff f801 	bl	80096c4 <SendMessageToModule>
										break;
 800a6c2:	2700      	movs	r7, #0
 800a6c4:	f7ff faf2 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =*(__IO int8_t* )temp32;
 800a6c8:	781a      	ldrb	r2, [r3, #0]
 800a6ca:	4b35      	ldr	r3, [pc, #212]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6cc:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	211f      	movs	r1, #31
 800a6d2:	9804      	ldr	r0, [sp, #16]
 800a6d4:	f7fe fff6 	bl	80096c4 <SendMessageToModule>
										break;
 800a6d8:	2700      	movs	r7, #0
 800a6da:	f7ff fae7 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a6de:	8819      	ldrh	r1, [r3, #0]
 800a6e0:	4a2f      	ldr	r2, [pc, #188]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6e2:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	0a1b      	lsrs	r3, r3, #8
 800a6e8:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	211f      	movs	r1, #31
 800a6ee:	9804      	ldr	r0, [sp, #16]
 800a6f0:	f7fe ffe8 	bl	80096c4 <SendMessageToModule>
										break;
 800a6f4:	2700      	movs	r7, #0
 800a6f6:	f7ff fad9 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a6fa:	8819      	ldrh	r1, [r3, #0]
 800a6fc:	4a28      	ldr	r2, [pc, #160]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6fe:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	b21b      	sxth	r3, r3
 800a704:	121b      	asrs	r3, r3, #8
 800a706:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800a708:	2202      	movs	r2, #2
 800a70a:	211f      	movs	r1, #31
 800a70c:	9804      	ldr	r0, [sp, #16]
 800a70e:	f7fe ffd9 	bl	80096c4 <SendMessageToModule>
										break;
 800a712:	2700      	movs	r7, #0
 800a714:	f7ff faca 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a718:	6819      	ldr	r1, [r3, #0]
 800a71a:	4a21      	ldr	r2, [pc, #132]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a71c:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a71e:	6819      	ldr	r1, [r3, #0]
 800a720:	0a09      	lsrs	r1, r1, #8
 800a722:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a724:	6819      	ldr	r1, [r3, #0]
 800a726:	0c09      	lsrs	r1, r1, #16
 800a728:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	0e1b      	lsrs	r3, r3, #24
 800a72e:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a730:	2204      	movs	r2, #4
 800a732:	211f      	movs	r1, #31
 800a734:	9804      	ldr	r0, [sp, #16]
 800a736:	f7fe ffc5 	bl	80096c4 <SendMessageToModule>
										break;
 800a73a:	2700      	movs	r7, #0
 800a73c:	f7ff fab6 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a740:	6819      	ldr	r1, [r3, #0]
 800a742:	4a17      	ldr	r2, [pc, #92]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a744:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a746:	6819      	ldr	r1, [r3, #0]
 800a748:	1209      	asrs	r1, r1, #8
 800a74a:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a74c:	6819      	ldr	r1, [r3, #0]
 800a74e:	1409      	asrs	r1, r1, #16
 800a750:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	161b      	asrs	r3, r3, #24
 800a756:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a758:	2204      	movs	r2, #4
 800a75a:	211f      	movs	r1, #31
 800a75c:	9804      	ldr	r0, [sp, #16]
 800a75e:	f7fe ffb1 	bl	80096c4 <SendMessageToModule>
										break;
 800a762:	2700      	movs	r7, #0
 800a764:	f7ff faa2 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800a768:	7819      	ldrb	r1, [r3, #0]
 800a76a:	4a0d      	ldr	r2, [pc, #52]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a76c:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800a76e:	7859      	ldrb	r1, [r3, #1]
 800a770:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800a772:	7899      	ldrb	r1, [r3, #2]
 800a774:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800a776:	78db      	ldrb	r3, [r3, #3]
 800a778:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a77a:	2208      	movs	r2, #8
 800a77c:	211f      	movs	r1, #31
 800a77e:	9804      	ldr	r0, [sp, #16]
 800a780:	f7fe ffa0 	bl	80096c4 <SendMessageToModule>
										break; // You cannot bitwise floats
 800a784:	2700      	movs	r7, #0
 800a786:	f7ff fa91 	bl	8009cac <PxMessagingTask+0x60>
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	20000d08 	.word	0x20000d08
 800a790:	20001076 	.word	0x20001076
 800a794:	e000ed00 	.word	0xe000ed00
 800a798:	05fa0004 	.word	0x05fa0004
 800a79c:	0801b06c 	.word	0x0801b06c
 800a7a0:	20000f38 	.word	0x20000f38
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800a7a4:	2a02      	cmp	r2, #2
 800a7a6:	d000      	beq.n	800a7aa <PxMessagingTask+0xb5e>
 800a7a8:	e097      	b.n	800a8da <PxMessagingTask+0xc8e>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800a7aa:	48e6      	ldr	r0, [pc, #920]	; (800ab44 <PxMessagingTask+0xef8>)
 800a7ac:	3236      	adds	r2, #54	; 0x36
 800a7ae:	436a      	muls	r2, r5
 800a7b0:	1882      	adds	r2, r0, r2
 800a7b2:	1851      	adds	r1, r2, r1
 800a7b4:	3901      	subs	r1, #1
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	4453      	add	r3, sl
 800a7be:	1818      	adds	r0, r3, r0
 800a7c0:	f7f8 ffaa 	bl	8003718 <IsModuleParameter>
 800a7c4:	9005      	str	r0, [sp, #20]
								if(temp == 0){ // Parameter does not exist
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d107      	bne.n	800a7da <PxMessagingTask+0xb8e>
									SendMessageToModule(src,
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	211f      	movs	r1, #31
 800a7ce:	9804      	ldr	r0, [sp, #16]
 800a7d0:	f7fe ff78 	bl	80096c4 <SendMessageToModule>
 800a7d4:	2700      	movs	r7, #0
 800a7d6:	f7ff fa69 	bl	8009cac <PxMessagingTask+0x60>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800a7da:	3801      	subs	r0, #1
 800a7dc:	4ada      	ldr	r2, [pc, #872]	; (800ab48 <PxMessagingTask+0xefc>)
 800a7de:	210c      	movs	r1, #12
 800a7e0:	4341      	muls	r1, r0
 800a7e2:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800a7e4:	1852      	adds	r2, r2, r1
 800a7e6:	7912      	ldrb	r2, [r2, #4]
 800a7e8:	49d8      	ldr	r1, [pc, #864]	; (800ab4c <PxMessagingTask+0xf00>)
 800a7ea:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800a7ec:	3a01      	subs	r2, #1
 800a7ee:	b2d1      	uxtb	r1, r2
 800a7f0:	2907      	cmp	r1, #7
 800a7f2:	d901      	bls.n	800a7f8 <PxMessagingTask+0xbac>
 800a7f4:	f000 fd12 	bl	800b21c <PxMessagingTask+0x15d0>
 800a7f8:	b2d2      	uxtb	r2, r2
 800a7fa:	0092      	lsls	r2, r2, #2
 800a7fc:	49d4      	ldr	r1, [pc, #848]	; (800ab50 <PxMessagingTask+0xf04>)
 800a7fe:	588a      	ldr	r2, [r1, r2]
 800a800:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800a802:	781a      	ldrb	r2, [r3, #0]
 800a804:	4bd1      	ldr	r3, [pc, #836]	; (800ab4c <PxMessagingTask+0xf00>)
 800a806:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a808:	2202      	movs	r2, #2
 800a80a:	211f      	movs	r1, #31
 800a80c:	9804      	ldr	r0, [sp, #16]
 800a80e:	f7fe ff59 	bl	80096c4 <SendMessageToModule>
											break;
 800a812:	2700      	movs	r7, #0
 800a814:	f7ff fa4a 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO int8_t* )temp32;
 800a818:	781a      	ldrb	r2, [r3, #0]
 800a81a:	4bcc      	ldr	r3, [pc, #816]	; (800ab4c <PxMessagingTask+0xf00>)
 800a81c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a81e:	2202      	movs	r2, #2
 800a820:	211f      	movs	r1, #31
 800a822:	9804      	ldr	r0, [sp, #16]
 800a824:	f7fe ff4e 	bl	80096c4 <SendMessageToModule>
											break;
 800a828:	2700      	movs	r7, #0
 800a82a:	f7ff fa3f 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a82e:	8819      	ldrh	r1, [r3, #0]
 800a830:	4ac6      	ldr	r2, [pc, #792]	; (800ab4c <PxMessagingTask+0xf00>)
 800a832:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	0a1b      	lsrs	r3, r3, #8
 800a838:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a83a:	2203      	movs	r2, #3
 800a83c:	211f      	movs	r1, #31
 800a83e:	9804      	ldr	r0, [sp, #16]
 800a840:	f7fe ff40 	bl	80096c4 <SendMessageToModule>
											break;
 800a844:	2700      	movs	r7, #0
 800a846:	f7ff fa31 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a84a:	8819      	ldrh	r1, [r3, #0]
 800a84c:	4abf      	ldr	r2, [pc, #764]	; (800ab4c <PxMessagingTask+0xf00>)
 800a84e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	b21b      	sxth	r3, r3
 800a854:	121b      	asrs	r3, r3, #8
 800a856:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a858:	2203      	movs	r2, #3
 800a85a:	211f      	movs	r1, #31
 800a85c:	9804      	ldr	r0, [sp, #16]
 800a85e:	f7fe ff31 	bl	80096c4 <SendMessageToModule>
											break;
 800a862:	2700      	movs	r7, #0
 800a864:	f7ff fa22 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	4ab8      	ldr	r2, [pc, #736]	; (800ab4c <PxMessagingTask+0xf00>)
 800a86c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a86e:	6819      	ldr	r1, [r3, #0]
 800a870:	0a09      	lsrs	r1, r1, #8
 800a872:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a874:	6819      	ldr	r1, [r3, #0]
 800a876:	0c09      	lsrs	r1, r1, #16
 800a878:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	0e1b      	lsrs	r3, r3, #24
 800a87e:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a880:	2205      	movs	r2, #5
 800a882:	211f      	movs	r1, #31
 800a884:	9804      	ldr	r0, [sp, #16]
 800a886:	f7fe ff1d 	bl	80096c4 <SendMessageToModule>
											break;
 800a88a:	2700      	movs	r7, #0
 800a88c:	f7ff fa0e 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a890:	6819      	ldr	r1, [r3, #0]
 800a892:	4aae      	ldr	r2, [pc, #696]	; (800ab4c <PxMessagingTask+0xf00>)
 800a894:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a896:	6819      	ldr	r1, [r3, #0]
 800a898:	1209      	asrs	r1, r1, #8
 800a89a:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a89c:	6819      	ldr	r1, [r3, #0]
 800a89e:	1409      	asrs	r1, r1, #16
 800a8a0:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	161b      	asrs	r3, r3, #24
 800a8a6:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a8a8:	2205      	movs	r2, #5
 800a8aa:	211f      	movs	r1, #31
 800a8ac:	9804      	ldr	r0, [sp, #16]
 800a8ae:	f7fe ff09 	bl	80096c4 <SendMessageToModule>
											break;
 800a8b2:	2700      	movs	r7, #0
 800a8b4:	f7ff f9fa 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800a8b8:	7819      	ldrb	r1, [r3, #0]
 800a8ba:	4aa4      	ldr	r2, [pc, #656]	; (800ab4c <PxMessagingTask+0xf00>)
 800a8bc:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800a8be:	7859      	ldrb	r1, [r3, #1]
 800a8c0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800a8c2:	7899      	ldrb	r1, [r3, #2]
 800a8c4:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800a8c6:	78db      	ldrb	r3, [r3, #3]
 800a8c8:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a8ca:	2209      	movs	r2, #9
 800a8cc:	211f      	movs	r1, #31
 800a8ce:	9804      	ldr	r0, [sp, #16]
 800a8d0:	f7fe fef8 	bl	80096c4 <SendMessageToModule>
											break;
 800a8d4:	2700      	movs	r7, #0
 800a8d6:	f7ff f9e9 	bl	8009cac <PxMessagingTask+0x60>
								}
 800a8da:	2700      	movs	r7, #0
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800a8dc:	2a02      	cmp	r2, #2
 800a8de:	d801      	bhi.n	800a8e4 <PxMessagingTask+0xc98>
 800a8e0:	f7ff f9e4 	bl	8009cac <PxMessagingTask+0x60>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800a8e4:	3a04      	subs	r2, #4
 800a8e6:	0092      	lsls	r2, r2, #2
 800a8e8:	4b9a      	ldr	r3, [pc, #616]	; (800ab54 <PxMessagingTask+0xf08>)
 800a8ea:	58d1      	ldr	r1, [r2, r3]
 800a8ec:	220f      	movs	r2, #15
 800a8ee:	400a      	ands	r2, r1
 800a8f0:	4b96      	ldr	r3, [pc, #600]	; (800ab4c <PxMessagingTask+0xf00>)
 800a8f2:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800a8f4:	42ba      	cmp	r2, r7
 800a8f6:	d106      	bne.n	800a906 <PxMessagingTask+0xcba>
									SendMessageToModule(src,
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	211f      	movs	r1, #31
 800a8fc:	9804      	ldr	r0, [sp, #16]
 800a8fe:	f7fe fee1 	bl	80096c4 <SendMessageToModule>
 800a902:	f7ff f9d3 	bl	8009cac <PxMessagingTask+0x60>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800a906:	0c09      	lsrs	r1, r1, #16
 800a908:	2380      	movs	r3, #128	; 0x80
 800a90a:	059b      	lsls	r3, r3, #22
 800a90c:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800a90e:	3a01      	subs	r2, #1
 800a910:	b2d0      	uxtb	r0, r2
 800a912:	2807      	cmp	r0, #7
 800a914:	d901      	bls.n	800a91a <PxMessagingTask+0xcce>
 800a916:	f000 fc84 	bl	800b222 <PxMessagingTask+0x15d6>
 800a91a:	b2d2      	uxtb	r2, r2
 800a91c:	0092      	lsls	r2, r2, #2
 800a91e:	488e      	ldr	r0, [pc, #568]	; (800ab58 <PxMessagingTask+0xf0c>)
 800a920:	5882      	ldr	r2, [r0, r2]
 800a922:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800a924:	781a      	ldrb	r2, [r3, #0]
 800a926:	4b89      	ldr	r3, [pc, #548]	; (800ab4c <PxMessagingTask+0xf00>)
 800a928:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a92a:	2202      	movs	r2, #2
 800a92c:	211f      	movs	r1, #31
 800a92e:	9804      	ldr	r0, [sp, #16]
 800a930:	f7fe fec8 	bl	80096c4 <SendMessageToModule>
											break;
 800a934:	2700      	movs	r7, #0
 800a936:	f7ff f9b9 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO int8_t* )temp32;
 800a93a:	781a      	ldrb	r2, [r3, #0]
 800a93c:	4b83      	ldr	r3, [pc, #524]	; (800ab4c <PxMessagingTask+0xf00>)
 800a93e:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a940:	2202      	movs	r2, #2
 800a942:	211f      	movs	r1, #31
 800a944:	9804      	ldr	r0, [sp, #16]
 800a946:	f7fe febd 	bl	80096c4 <SendMessageToModule>
											break;
 800a94a:	2700      	movs	r7, #0
 800a94c:	f7ff f9ae 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a950:	8819      	ldrh	r1, [r3, #0]
 800a952:	4a7e      	ldr	r2, [pc, #504]	; (800ab4c <PxMessagingTask+0xf00>)
 800a954:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	0a1b      	lsrs	r3, r3, #8
 800a95a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a95c:	2203      	movs	r2, #3
 800a95e:	211f      	movs	r1, #31
 800a960:	9804      	ldr	r0, [sp, #16]
 800a962:	f7fe feaf 	bl	80096c4 <SendMessageToModule>
											break;
 800a966:	2700      	movs	r7, #0
 800a968:	f7ff f9a0 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a96c:	8819      	ldrh	r1, [r3, #0]
 800a96e:	4a77      	ldr	r2, [pc, #476]	; (800ab4c <PxMessagingTask+0xf00>)
 800a970:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	b21b      	sxth	r3, r3
 800a976:	121b      	asrs	r3, r3, #8
 800a978:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a97a:	2203      	movs	r2, #3
 800a97c:	211f      	movs	r1, #31
 800a97e:	9804      	ldr	r0, [sp, #16]
 800a980:	f7fe fea0 	bl	80096c4 <SendMessageToModule>
											break;
 800a984:	2700      	movs	r7, #0
 800a986:	f7ff f991 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a98a:	6819      	ldr	r1, [r3, #0]
 800a98c:	4a6f      	ldr	r2, [pc, #444]	; (800ab4c <PxMessagingTask+0xf00>)
 800a98e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a990:	6819      	ldr	r1, [r3, #0]
 800a992:	0a09      	lsrs	r1, r1, #8
 800a994:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a996:	6819      	ldr	r1, [r3, #0]
 800a998:	0c09      	lsrs	r1, r1, #16
 800a99a:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	0e1b      	lsrs	r3, r3, #24
 800a9a0:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a9a2:	2205      	movs	r2, #5
 800a9a4:	211f      	movs	r1, #31
 800a9a6:	9804      	ldr	r0, [sp, #16]
 800a9a8:	f7fe fe8c 	bl	80096c4 <SendMessageToModule>
											break;
 800a9ac:	2700      	movs	r7, #0
 800a9ae:	f7ff f97d 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a9b2:	6819      	ldr	r1, [r3, #0]
 800a9b4:	4a65      	ldr	r2, [pc, #404]	; (800ab4c <PxMessagingTask+0xf00>)
 800a9b6:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a9b8:	6819      	ldr	r1, [r3, #0]
 800a9ba:	1209      	asrs	r1, r1, #8
 800a9bc:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a9be:	6819      	ldr	r1, [r3, #0]
 800a9c0:	1409      	asrs	r1, r1, #16
 800a9c2:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	161b      	asrs	r3, r3, #24
 800a9c8:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a9ca:	2205      	movs	r2, #5
 800a9cc:	211f      	movs	r1, #31
 800a9ce:	9804      	ldr	r0, [sp, #16]
 800a9d0:	f7fe fe78 	bl	80096c4 <SendMessageToModule>
											break;
 800a9d4:	2700      	movs	r7, #0
 800a9d6:	f7ff f969 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800a9da:	781a      	ldrb	r2, [r3, #0]
 800a9dc:	4b5b      	ldr	r3, [pc, #364]	; (800ab4c <PxMessagingTask+0xf00>)
 800a9de:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800a9e0:	4a5e      	ldr	r2, [pc, #376]	; (800ab5c <PxMessagingTask+0xf10>)
 800a9e2:	188a      	adds	r2, r1, r2
 800a9e4:	7812      	ldrb	r2, [r2, #0]
 800a9e6:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800a9e8:	4a5d      	ldr	r2, [pc, #372]	; (800ab60 <PxMessagingTask+0xf14>)
 800a9ea:	188a      	adds	r2, r1, r2
 800a9ec:	7812      	ldrb	r2, [r2, #0]
 800a9ee:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800a9f0:	4a5c      	ldr	r2, [pc, #368]	; (800ab64 <PxMessagingTask+0xf18>)
 800a9f2:	4694      	mov	ip, r2
 800a9f4:	4461      	add	r1, ip
 800a9f6:	780a      	ldrb	r2, [r1, #0]
 800a9f8:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800a9fa:	2209      	movs	r2, #9
 800a9fc:	211f      	movs	r1, #31
 800a9fe:	9804      	ldr	r0, [sp, #16]
 800aa00:	f7fe fe60 	bl	80096c4 <SendMessageToModule>
											break;
 800aa04:	2700      	movs	r7, #0
 800aa06:	f7ff f951 	bl	8009cac <PxMessagingTask+0x60>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800aa0a:	4b57      	ldr	r3, [pc, #348]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	2002      	movs	r0, #2
 800aa12:	4240      	negs	r0, r0
 800aa14:	17c1      	asrs	r1, r0, #31
 800aa16:	1812      	adds	r2, r2, r0
 800aa18:	414b      	adcs	r3, r1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00b      	beq.n	800aa36 <PxMessagingTask+0xdea>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800aa1e:	4b53      	ldr	r3, [pc, #332]	; (800ab6c <PxMessagingTask+0xf20>)
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b10      	cmp	r3, #16
 800aa24:	d101      	bne.n	800aa2a <PxMessagingTask+0xdde>
 800aa26:	f000 fc0e 	bl	800b246 <PxMessagingTask+0x15fa>
								responseStatus =BOS_OK;
 800aa2a:	4b50      	ldr	r3, [pc, #320]	; (800ab6c <PxMessagingTask+0xf20>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	701a      	strb	r2, [r3, #0]
 800aa30:	2700      	movs	r7, #0
 800aa32:	f7ff f93b 	bl	8009cac <PxMessagingTask+0x60>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <PxMessagingTask+0xdf2>
 800aa3a:	2a01      	cmp	r2, #1
 800aa3c:	d8ef      	bhi.n	800aa1e <PxMessagingTask+0xdd2>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800aa3e:	2138      	movs	r1, #56	; 0x38
 800aa40:	4369      	muls	r1, r5
 800aa42:	4a40      	ldr	r2, [pc, #256]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa44:	1852      	adds	r2, r2, r1
 800aa46:	5d12      	ldrb	r2, [r2, r4]
 800aa48:	4949      	ldr	r1, [pc, #292]	; (800ab70 <PxMessagingTask+0xf24>)
 800aa4a:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800aa4c:	2a08      	cmp	r2, #8
 800aa4e:	d8e6      	bhi.n	800aa1e <PxMessagingTask+0xdd2>
 800aa50:	0092      	lsls	r2, r2, #2
 800aa52:	4948      	ldr	r1, [pc, #288]	; (800ab74 <PxMessagingTask+0xf28>)
 800aa54:	588a      	ldr	r2, [r1, r2]
 800aa56:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800aa58:	4b44      	ldr	r3, [pc, #272]	; (800ab6c <PxMessagingTask+0xf20>)
 800aa5a:	2210      	movs	r2, #16
 800aa5c:	701a      	strb	r2, [r3, #0]
 800aa5e:	2700      	movs	r7, #0
 800aa60:	f7ff f924 	bl	8009cac <PxMessagingTask+0x60>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800aa64:	4a40      	ldr	r2, [pc, #256]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa66:	2038      	movs	r0, #56	; 0x38
 800aa68:	4368      	muls	r0, r5
 800aa6a:	4936      	ldr	r1, [pc, #216]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa6c:	1809      	adds	r1, r1, r0
 800aa6e:	1909      	adds	r1, r1, r4
 800aa70:	784b      	ldrb	r3, [r1, #1]
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	6053      	str	r3, [r2, #4]
										break;
 800aa78:	e7d1      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800aa7a:	4a3b      	ldr	r2, [pc, #236]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa7c:	2038      	movs	r0, #56	; 0x38
 800aa7e:	4368      	muls	r0, r5
 800aa80:	4930      	ldr	r1, [pc, #192]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa82:	1809      	adds	r1, r1, r0
 800aa84:	1909      	adds	r1, r1, r4
 800aa86:	2301      	movs	r3, #1
 800aa88:	56cb      	ldrsb	r3, [r1, r3]
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	17db      	asrs	r3, r3, #31
 800aa8e:	6053      	str	r3, [r2, #4]
										break;
 800aa90:	e7c5      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800aa92:	4a35      	ldr	r2, [pc, #212]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa94:	2038      	movs	r0, #56	; 0x38
 800aa96:	4368      	muls	r0, r5
 800aa98:	492a      	ldr	r1, [pc, #168]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa9a:	1809      	adds	r1, r1, r0
 800aa9c:	1909      	adds	r1, r1, r4
 800aa9e:	788b      	ldrb	r3, [r1, #2]
 800aaa0:	021b      	lsls	r3, r3, #8
 800aaa2:	7849      	ldrb	r1, [r1, #1]
 800aaa4:	185b      	adds	r3, r3, r1
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	17db      	asrs	r3, r3, #31
 800aaaa:	6053      	str	r3, [r2, #4]
										break;
 800aaac:	e7b7      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800aaae:	4a2e      	ldr	r2, [pc, #184]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aab0:	2038      	movs	r0, #56	; 0x38
 800aab2:	4368      	muls	r0, r5
 800aab4:	4923      	ldr	r1, [pc, #140]	; (800ab44 <PxMessagingTask+0xef8>)
 800aab6:	1809      	adds	r1, r1, r0
 800aab8:	1909      	adds	r1, r1, r4
 800aaba:	788b      	ldrb	r3, [r1, #2]
 800aabc:	021b      	lsls	r3, r3, #8
 800aabe:	7849      	ldrb	r1, [r1, #1]
 800aac0:	185b      	adds	r3, r3, r1
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	17db      	asrs	r3, r3, #31
 800aac6:	6053      	str	r3, [r2, #4]
										break;
 800aac8:	e7a9      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800aaca:	4a27      	ldr	r2, [pc, #156]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aacc:	2038      	movs	r0, #56	; 0x38
 800aace:	4368      	muls	r0, r5
 800aad0:	491c      	ldr	r1, [pc, #112]	; (800ab44 <PxMessagingTask+0xef8>)
 800aad2:	1809      	adds	r1, r1, r0
 800aad4:	1909      	adds	r1, r1, r4
 800aad6:	788b      	ldrb	r3, [r1, #2]
 800aad8:	021b      	lsls	r3, r3, #8
 800aada:	78c8      	ldrb	r0, [r1, #3]
 800aadc:	0400      	lsls	r0, r0, #16
 800aade:	181b      	adds	r3, r3, r0
 800aae0:	7848      	ldrb	r0, [r1, #1]
 800aae2:	181b      	adds	r3, r3, r0
 800aae4:	7909      	ldrb	r1, [r1, #4]
 800aae6:	0609      	lsls	r1, r1, #24
 800aae8:	185b      	adds	r3, r3, r1
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	2300      	movs	r3, #0
 800aaee:	6053      	str	r3, [r2, #4]
										break;
 800aaf0:	e795      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800aaf2:	4a1d      	ldr	r2, [pc, #116]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aaf4:	2038      	movs	r0, #56	; 0x38
 800aaf6:	4368      	muls	r0, r5
 800aaf8:	4912      	ldr	r1, [pc, #72]	; (800ab44 <PxMessagingTask+0xef8>)
 800aafa:	1809      	adds	r1, r1, r0
 800aafc:	1909      	adds	r1, r1, r4
 800aafe:	788b      	ldrb	r3, [r1, #2]
 800ab00:	021b      	lsls	r3, r3, #8
 800ab02:	7848      	ldrb	r0, [r1, #1]
 800ab04:	181b      	adds	r3, r3, r0
 800ab06:	78c8      	ldrb	r0, [r1, #3]
 800ab08:	0400      	lsls	r0, r0, #16
 800ab0a:	181b      	adds	r3, r3, r0
 800ab0c:	7909      	ldrb	r1, [r1, #4]
 800ab0e:	0609      	lsls	r1, r1, #24
 800ab10:	185b      	adds	r3, r3, r1
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	17db      	asrs	r3, r3, #31
 800ab16:	6053      	str	r3, [r2, #4]
										break;
 800ab18:	e781      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ab1a:	4a13      	ldr	r2, [pc, #76]	; (800ab68 <PxMessagingTask+0xf1c>)
 800ab1c:	2038      	movs	r0, #56	; 0x38
 800ab1e:	4368      	muls	r0, r5
 800ab20:	4908      	ldr	r1, [pc, #32]	; (800ab44 <PxMessagingTask+0xef8>)
 800ab22:	1809      	adds	r1, r1, r0
 800ab24:	1909      	adds	r1, r1, r4
 800ab26:	788b      	ldrb	r3, [r1, #2]
 800ab28:	021b      	lsls	r3, r3, #8
 800ab2a:	78c8      	ldrb	r0, [r1, #3]
 800ab2c:	0400      	lsls	r0, r0, #16
 800ab2e:	181b      	adds	r3, r3, r0
 800ab30:	7848      	ldrb	r0, [r1, #1]
 800ab32:	181b      	adds	r3, r3, r0
 800ab34:	7909      	ldrb	r1, [r1, #4]
 800ab36:	0609      	lsls	r1, r1, #24
 800ab38:	185b      	adds	r3, r3, r1
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	6053      	str	r3, [r2, #4]
										break;
 800ab40:	e76d      	b.n	800aa1e <PxMessagingTask+0xdd2>
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	20000d08 	.word	0x20000d08
 800ab48:	20000084 	.word	0x20000084
 800ab4c:	20000f38 	.word	0x20000f38
 800ab50:	0801b08c 	.word	0x0801b08c
 800ab54:	20006a28 	.word	0x20006a28
 800ab58:	0801b0ac 	.word	0x0801b0ac
 800ab5c:	20000001 	.word	0x20000001
 800ab60:	20000002 	.word	0x20000002
 800ab64:	20000003 	.word	0x20000003
 800ab68:	20001108 	.word	0x20001108
 800ab6c:	20001110 	.word	0x20001110
 800ab70:	20000070 	.word	0x20000070
 800ab74:	0801b0cc 	.word	0x0801b0cc
							responseStatus =BOS_OK; // Initialize response
 800ab78:	4bcd      	ldr	r3, [pc, #820]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800ab7e:	0027      	movs	r7, r4
 800ab80:	4bcc      	ldr	r3, [pc, #816]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ab82:	199b      	adds	r3, r3, r6
 800ab84:	5d1b      	ldrb	r3, [r3, r4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d100      	bne.n	800ab8c <PxMessagingTask+0xf40>
 800ab8a:	e10b      	b.n	800ada4 <PxMessagingTask+0x1158>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800ab8c:	2b1e      	cmp	r3, #30
 800ab8e:	d900      	bls.n	800ab92 <PxMessagingTask+0xf46>
 800ab90:	e104      	b.n	800ad9c <PxMessagingTask+0x1150>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800ab92:	1e5c      	subs	r4, r3, #1
 800ab94:	00a2      	lsls	r2, r4, #2
 800ab96:	4bc8      	ldr	r3, [pc, #800]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ab98:	58d1      	ldr	r1, [r2, r3]
 800ab9a:	0c0b      	lsrs	r3, r1, #16
 800ab9c:	2280      	movs	r2, #128	; 0x80
 800ab9e:	0592      	lsls	r2, r2, #22
 800aba0:	4694      	mov	ip, r2
 800aba2:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800aba4:	1c7a      	adds	r2, r7, #1
 800aba6:	4690      	mov	r8, r2
 800aba8:	2038      	movs	r0, #56	; 0x38
 800abaa:	4368      	muls	r0, r5
 800abac:	4ac1      	ldr	r2, [pc, #772]	; (800aeb4 <PxMessagingTask+0x1268>)
 800abae:	1812      	adds	r2, r2, r0
 800abb0:	4640      	mov	r0, r8
 800abb2:	5c12      	ldrb	r2, [r2, r0]
 800abb4:	4691      	mov	r9, r2
 800abb6:	3a01      	subs	r2, #1
 800abb8:	b2d0      	uxtb	r0, r2
 800abba:	2807      	cmp	r0, #7
 800abbc:	d81b      	bhi.n	800abf6 <PxMessagingTask+0xfaa>
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	0092      	lsls	r2, r2, #2
 800abc2:	48be      	ldr	r0, [pc, #760]	; (800aebc <PxMessagingTask+0x1270>)
 800abc4:	5882      	ldr	r2, [r0, r2]
 800abc6:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800abc8:	070a      	lsls	r2, r1, #28
 800abca:	d109      	bne.n	800abe0 <PxMessagingTask+0xf94>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800abcc:	2001      	movs	r0, #1
 800abce:	f008 fe73 	bl	80138b8 <malloc>
 800abd2:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800abd4:	d00c      	beq.n	800abf0 <PxMessagingTask+0xfa4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800abd6:	00a4      	lsls	r4, r4, #2
 800abd8:	0400      	lsls	r0, r0, #16
 800abda:	4448      	add	r0, r9
 800abdc:	4ab6      	ldr	r2, [pc, #728]	; (800aeb8 <PxMessagingTask+0x126c>)
 800abde:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800abe0:	2138      	movs	r1, #56	; 0x38
 800abe2:	4369      	muls	r1, r5
 800abe4:	4ab3      	ldr	r2, [pc, #716]	; (800aeb4 <PxMessagingTask+0x1268>)
 800abe6:	1852      	adds	r2, r2, r1
 800abe8:	19d2      	adds	r2, r2, r7
 800abea:	7892      	ldrb	r2, [r2, #2]
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	e002      	b.n	800abf6 <PxMessagingTask+0xfaa>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800abf0:	4baf      	ldr	r3, [pc, #700]	; (800aeb0 <PxMessagingTask+0x1264>)
 800abf2:	2212      	movs	r2, #18
 800abf4:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800abf6:	2338      	movs	r3, #56	; 0x38
 800abf8:	436b      	muls	r3, r5
 800abfa:	4aae      	ldr	r2, [pc, #696]	; (800aeb4 <PxMessagingTask+0x1268>)
 800abfc:	18d2      	adds	r2, r2, r3
 800abfe:	5dd3      	ldrb	r3, [r2, r7]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	0098      	lsls	r0, r3, #2
 800ac04:	49ac      	ldr	r1, [pc, #688]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac06:	5841      	ldr	r1, [r0, r1]
 800ac08:	4640      	mov	r0, r8
 800ac0a:	5c12      	ldrb	r2, [r2, r0]
 800ac0c:	200f      	movs	r0, #15
 800ac0e:	4008      	ands	r0, r1
 800ac10:	4290      	cmp	r0, r2
 800ac12:	d009      	beq.n	800ac28 <PxMessagingTask+0xfdc>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	48aa      	ldr	r0, [pc, #680]	; (800aec0 <PxMessagingTask+0x1274>)
 800ac18:	4684      	mov	ip, r0
 800ac1a:	4462      	add	r2, ip
 800ac1c:	400a      	ands	r2, r1
 800ac1e:	49a6      	ldr	r1, [pc, #664]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac20:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800ac22:	4ba3      	ldr	r3, [pc, #652]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ac24:	2214      	movs	r2, #20
 800ac26:	701a      	strb	r2, [r3, #0]
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG){
 800ac28:	4ba6      	ldr	r3, [pc, #664]	; (800aec4 <PxMessagingTask+0x1278>)
 800ac2a:	799b      	ldrb	r3, [r3, #6]
 800ac2c:	2240      	movs	r2, #64	; 0x40
 800ac2e:	4393      	bics	r3, r2
 800ac30:	2700      	movs	r7, #0
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	d001      	beq.n	800ac3a <PxMessagingTask+0xfee>
 800ac36:	f7ff f839 	bl	8009cac <PxMessagingTask+0x60>
								messageParams[0] =responseStatus;
 800ac3a:	4b9d      	ldr	r3, [pc, #628]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ac3c:	781a      	ldrb	r2, [r3, #0]
 800ac3e:	4ba2      	ldr	r3, [pc, #648]	; (800aec8 <PxMessagingTask+0x127c>)
 800ac40:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ac42:	2201      	movs	r2, #1
 800ac44:	2121      	movs	r1, #33	; 0x21
 800ac46:	9804      	ldr	r0, [sp, #16]
 800ac48:	f7fe fd3c 	bl	80096c4 <SendMessageToModule>
 800ac4c:	f7ff f82e 	bl	8009cac <PxMessagingTask+0x60>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ac50:	070a      	lsls	r2, r1, #28
 800ac52:	d10a      	bne.n	800ac6a <PxMessagingTask+0x101e>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800ac54:	2001      	movs	r0, #1
 800ac56:	f008 fe2f 	bl	80138b8 <malloc>
 800ac5a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ac5c:	d100      	bne.n	800ac60 <PxMessagingTask+0x1014>
 800ac5e:	e369      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ac60:	00a4      	lsls	r4, r4, #2
 800ac62:	0400      	lsls	r0, r0, #16
 800ac64:	3002      	adds	r0, #2
 800ac66:	4a94      	ldr	r2, [pc, #592]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac68:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800ac6a:	2138      	movs	r1, #56	; 0x38
 800ac6c:	4369      	muls	r1, r5
 800ac6e:	4a91      	ldr	r2, [pc, #580]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ac70:	1852      	adds	r2, r2, r1
 800ac72:	19d2      	adds	r2, r2, r7
 800ac74:	7892      	ldrb	r2, [r2, #2]
 800ac76:	b252      	sxtb	r2, r2
 800ac78:	701a      	strb	r2, [r3, #0]
 800ac7a:	e7bc      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ac7c:	070a      	lsls	r2, r1, #28
 800ac7e:	d10a      	bne.n	800ac96 <PxMessagingTask+0x104a>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800ac80:	2002      	movs	r0, #2
 800ac82:	f008 fe19 	bl	80138b8 <malloc>
 800ac86:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ac88:	d100      	bne.n	800ac8c <PxMessagingTask+0x1040>
 800ac8a:	e353      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ac8c:	00a4      	lsls	r4, r4, #2
 800ac8e:	0400      	lsls	r0, r0, #16
 800ac90:	3003      	adds	r0, #3
 800ac92:	4a89      	ldr	r2, [pc, #548]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac94:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800ac96:	2138      	movs	r1, #56	; 0x38
 800ac98:	4369      	muls	r1, r5
 800ac9a:	4a86      	ldr	r2, [pc, #536]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ac9c:	1852      	adds	r2, r2, r1
 800ac9e:	19d2      	adds	r2, r2, r7
 800aca0:	78d1      	ldrb	r1, [r2, #3]
 800aca2:	0209      	lsls	r1, r1, #8
 800aca4:	7892      	ldrb	r2, [r2, #2]
 800aca6:	1852      	adds	r2, r2, r1
 800aca8:	b292      	uxth	r2, r2
 800acaa:	801a      	strh	r2, [r3, #0]
 800acac:	e7a3      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800acae:	070a      	lsls	r2, r1, #28
 800acb0:	d10a      	bne.n	800acc8 <PxMessagingTask+0x107c>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800acb2:	2002      	movs	r0, #2
 800acb4:	f008 fe00 	bl	80138b8 <malloc>
 800acb8:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800acba:	d100      	bne.n	800acbe <PxMessagingTask+0x1072>
 800acbc:	e33a      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800acbe:	00a4      	lsls	r4, r4, #2
 800acc0:	0400      	lsls	r0, r0, #16
 800acc2:	3004      	adds	r0, #4
 800acc4:	4a7c      	ldr	r2, [pc, #496]	; (800aeb8 <PxMessagingTask+0x126c>)
 800acc6:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800acc8:	2138      	movs	r1, #56	; 0x38
 800acca:	4369      	muls	r1, r5
 800accc:	4a79      	ldr	r2, [pc, #484]	; (800aeb4 <PxMessagingTask+0x1268>)
 800acce:	1852      	adds	r2, r2, r1
 800acd0:	19d2      	adds	r2, r2, r7
 800acd2:	78d1      	ldrb	r1, [r2, #3]
 800acd4:	0209      	lsls	r1, r1, #8
 800acd6:	7892      	ldrb	r2, [r2, #2]
 800acd8:	1852      	adds	r2, r2, r1
 800acda:	b212      	sxth	r2, r2
 800acdc:	801a      	strh	r2, [r3, #0]
 800acde:	e78a      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ace0:	070a      	lsls	r2, r1, #28
 800ace2:	d10a      	bne.n	800acfa <PxMessagingTask+0x10ae>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800ace4:	2004      	movs	r0, #4
 800ace6:	f008 fde7 	bl	80138b8 <malloc>
 800acea:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800acec:	d100      	bne.n	800acf0 <PxMessagingTask+0x10a4>
 800acee:	e321      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800acf0:	00a4      	lsls	r4, r4, #2
 800acf2:	0400      	lsls	r0, r0, #16
 800acf4:	3005      	adds	r0, #5
 800acf6:	4a70      	ldr	r2, [pc, #448]	; (800aeb8 <PxMessagingTask+0x126c>)
 800acf8:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800acfa:	2238      	movs	r2, #56	; 0x38
 800acfc:	436a      	muls	r2, r5
 800acfe:	496d      	ldr	r1, [pc, #436]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ad00:	1889      	adds	r1, r1, r2
 800ad02:	19c9      	adds	r1, r1, r7
 800ad04:	78ca      	ldrb	r2, [r1, #3]
 800ad06:	0212      	lsls	r2, r2, #8
 800ad08:	7908      	ldrb	r0, [r1, #4]
 800ad0a:	0400      	lsls	r0, r0, #16
 800ad0c:	1812      	adds	r2, r2, r0
 800ad0e:	7888      	ldrb	r0, [r1, #2]
 800ad10:	1812      	adds	r2, r2, r0
 800ad12:	7949      	ldrb	r1, [r1, #5]
 800ad14:	0609      	lsls	r1, r1, #24
 800ad16:	1852      	adds	r2, r2, r1
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	e76c      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad1c:	070a      	lsls	r2, r1, #28
 800ad1e:	d10a      	bne.n	800ad36 <PxMessagingTask+0x10ea>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800ad20:	2004      	movs	r0, #4
 800ad22:	f008 fdc9 	bl	80138b8 <malloc>
 800ad26:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ad28:	d100      	bne.n	800ad2c <PxMessagingTask+0x10e0>
 800ad2a:	e303      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad2c:	00a4      	lsls	r4, r4, #2
 800ad2e:	0400      	lsls	r0, r0, #16
 800ad30:	3006      	adds	r0, #6
 800ad32:	4a61      	ldr	r2, [pc, #388]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ad34:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800ad36:	2238      	movs	r2, #56	; 0x38
 800ad38:	436a      	muls	r2, r5
 800ad3a:	495e      	ldr	r1, [pc, #376]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ad3c:	1889      	adds	r1, r1, r2
 800ad3e:	19c9      	adds	r1, r1, r7
 800ad40:	78ca      	ldrb	r2, [r1, #3]
 800ad42:	0212      	lsls	r2, r2, #8
 800ad44:	7888      	ldrb	r0, [r1, #2]
 800ad46:	1812      	adds	r2, r2, r0
 800ad48:	7908      	ldrb	r0, [r1, #4]
 800ad4a:	0400      	lsls	r0, r0, #16
 800ad4c:	1812      	adds	r2, r2, r0
 800ad4e:	7949      	ldrb	r1, [r1, #5]
 800ad50:	0609      	lsls	r1, r1, #24
 800ad52:	1852      	adds	r2, r2, r1
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	e74e      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad58:	070a      	lsls	r2, r1, #28
 800ad5a:	d10a      	bne.n	800ad72 <PxMessagingTask+0x1126>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800ad5c:	2004      	movs	r0, #4
 800ad5e:	f008 fdab 	bl	80138b8 <malloc>
 800ad62:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ad64:	d100      	bne.n	800ad68 <PxMessagingTask+0x111c>
 800ad66:	e2e5      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad68:	00a4      	lsls	r4, r4, #2
 800ad6a:	0400      	lsls	r0, r0, #16
 800ad6c:	3007      	adds	r0, #7
 800ad6e:	4a52      	ldr	r2, [pc, #328]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ad70:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800ad72:	2238      	movs	r2, #56	; 0x38
 800ad74:	436a      	muls	r2, r5
 800ad76:	494f      	ldr	r1, [pc, #316]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ad78:	1889      	adds	r1, r1, r2
 800ad7a:	19c9      	adds	r1, r1, r7
 800ad7c:	78ca      	ldrb	r2, [r1, #3]
 800ad7e:	0212      	lsls	r2, r2, #8
 800ad80:	7908      	ldrb	r0, [r1, #4]
 800ad82:	0400      	lsls	r0, r0, #16
 800ad84:	1812      	adds	r2, r2, r0
 800ad86:	7888      	ldrb	r0, [r1, #2]
 800ad88:	1812      	adds	r2, r2, r0
 800ad8a:	7949      	ldrb	r1, [r1, #5]
 800ad8c:	0609      	lsls	r1, r1, #24
 800ad8e:	1852      	adds	r2, r2, r1
 800ad90:	494e      	ldr	r1, [pc, #312]	; (800aecc <PxMessagingTask+0x1280>)
 800ad92:	600a      	str	r2, [r1, #0]
 800ad94:	2000      	movs	r0, #0
 800ad96:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800ad98:	601a      	str	r2, [r3, #0]
 800ad9a:	e72c      	b.n	800abf6 <PxMessagingTask+0xfaa>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800ad9c:	4b44      	ldr	r3, [pc, #272]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ad9e:	2213      	movs	r2, #19
 800ada0:	701a      	strb	r2, [r3, #0]
 800ada2:	e741      	b.n	800ac28 <PxMessagingTask+0xfdc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ada4:	2238      	movs	r2, #56	; 0x38
 800ada6:	436a      	muls	r2, r5
 800ada8:	4b42      	ldr	r3, [pc, #264]	; (800aeb4 <PxMessagingTask+0x1268>)
 800adaa:	189b      	adds	r3, r3, r2
 800adac:	191b      	adds	r3, r3, r4
 800adae:	789c      	ldrb	r4, [r3, #2]
 800adb0:	0624      	lsls	r4, r4, #24
 800adb2:	78da      	ldrb	r2, [r3, #3]
 800adb4:	0412      	lsls	r2, r2, #16
 800adb6:	18a4      	adds	r4, r4, r2
 800adb8:	795a      	ldrb	r2, [r3, #5]
 800adba:	18a4      	adds	r4, r4, r2
 800adbc:	791b      	ldrb	r3, [r3, #4]
 800adbe:	021b      	lsls	r3, r3, #8
 800adc0:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800adc2:	23e0      	movs	r3, #224	; 0xe0
 800adc4:	061b      	lsls	r3, r3, #24
 800adc6:	18e2      	adds	r2, r4, r3
 800adc8:	4b41      	ldr	r3, [pc, #260]	; (800aed0 <PxMessagingTask+0x1284>)
 800adca:	429a      	cmp	r2, r3
 800adcc:	d900      	bls.n	800add0 <PxMessagingTask+0x1184>
 800adce:	e083      	b.n	800aed8 <PxMessagingTask+0x128c>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800add0:	2238      	movs	r2, #56	; 0x38
 800add2:	436a      	muls	r2, r5
 800add4:	4b37      	ldr	r3, [pc, #220]	; (800aeb4 <PxMessagingTask+0x1268>)
 800add6:	189b      	adds	r3, r3, r2
 800add8:	19db      	adds	r3, r3, r7
 800adda:	785b      	ldrb	r3, [r3, #1]
 800addc:	3b01      	subs	r3, #1
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	2a07      	cmp	r2, #7
 800ade2:	d900      	bls.n	800ade6 <PxMessagingTask+0x119a>
 800ade4:	e720      	b.n	800ac28 <PxMessagingTask+0xfdc>
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4a3a      	ldr	r2, [pc, #232]	; (800aed4 <PxMessagingTask+0x1288>)
 800adec:	58d3      	ldr	r3, [r2, r3]
 800adee:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800adf0:	2238      	movs	r2, #56	; 0x38
 800adf2:	436a      	muls	r2, r5
 800adf4:	4b2f      	ldr	r3, [pc, #188]	; (800aeb4 <PxMessagingTask+0x1268>)
 800adf6:	189b      	adds	r3, r3, r2
 800adf8:	19df      	adds	r7, r3, r7
 800adfa:	79bb      	ldrb	r3, [r7, #6]
 800adfc:	7023      	strb	r3, [r4, #0]
											break;
 800adfe:	e713      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800ae00:	2238      	movs	r2, #56	; 0x38
 800ae02:	436a      	muls	r2, r5
 800ae04:	4b2b      	ldr	r3, [pc, #172]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae06:	189b      	adds	r3, r3, r2
 800ae08:	19df      	adds	r7, r3, r7
 800ae0a:	2306      	movs	r3, #6
 800ae0c:	56fb      	ldrsb	r3, [r7, r3]
 800ae0e:	7023      	strb	r3, [r4, #0]
											break;
 800ae10:	e70a      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800ae12:	2238      	movs	r2, #56	; 0x38
 800ae14:	436a      	muls	r2, r5
 800ae16:	4b27      	ldr	r3, [pc, #156]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae18:	189b      	adds	r3, r3, r2
 800ae1a:	19df      	adds	r7, r3, r7
 800ae1c:	79fa      	ldrb	r2, [r7, #7]
 800ae1e:	0212      	lsls	r2, r2, #8
 800ae20:	79bb      	ldrb	r3, [r7, #6]
 800ae22:	189b      	adds	r3, r3, r2
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	8023      	strh	r3, [r4, #0]
											break;
 800ae28:	e6fe      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800ae2a:	2238      	movs	r2, #56	; 0x38
 800ae2c:	436a      	muls	r2, r5
 800ae2e:	4b21      	ldr	r3, [pc, #132]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae30:	189b      	adds	r3, r3, r2
 800ae32:	19df      	adds	r7, r3, r7
 800ae34:	79fa      	ldrb	r2, [r7, #7]
 800ae36:	0212      	lsls	r2, r2, #8
 800ae38:	79bb      	ldrb	r3, [r7, #6]
 800ae3a:	189b      	adds	r3, r3, r2
 800ae3c:	b21b      	sxth	r3, r3
 800ae3e:	8023      	strh	r3, [r4, #0]
											break;
 800ae40:	e6f2      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ae42:	2238      	movs	r2, #56	; 0x38
 800ae44:	436a      	muls	r2, r5
 800ae46:	4b1b      	ldr	r3, [pc, #108]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae48:	189b      	adds	r3, r3, r2
 800ae4a:	19df      	adds	r7, r3, r7
 800ae4c:	79fb      	ldrb	r3, [r7, #7]
 800ae4e:	021b      	lsls	r3, r3, #8
 800ae50:	7a3a      	ldrb	r2, [r7, #8]
 800ae52:	0412      	lsls	r2, r2, #16
 800ae54:	189b      	adds	r3, r3, r2
 800ae56:	79ba      	ldrb	r2, [r7, #6]
 800ae58:	189b      	adds	r3, r3, r2
 800ae5a:	7a7a      	ldrb	r2, [r7, #9]
 800ae5c:	0612      	lsls	r2, r2, #24
 800ae5e:	189b      	adds	r3, r3, r2
 800ae60:	6023      	str	r3, [r4, #0]
											break;
 800ae62:	e6e1      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800ae64:	2238      	movs	r2, #56	; 0x38
 800ae66:	436a      	muls	r2, r5
 800ae68:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae6a:	189b      	adds	r3, r3, r2
 800ae6c:	19df      	adds	r7, r3, r7
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	021b      	lsls	r3, r3, #8
 800ae72:	79ba      	ldrb	r2, [r7, #6]
 800ae74:	189b      	adds	r3, r3, r2
 800ae76:	7a3a      	ldrb	r2, [r7, #8]
 800ae78:	0412      	lsls	r2, r2, #16
 800ae7a:	189b      	adds	r3, r3, r2
 800ae7c:	7a7a      	ldrb	r2, [r7, #9]
 800ae7e:	0612      	lsls	r2, r2, #24
 800ae80:	189b      	adds	r3, r3, r2
 800ae82:	6023      	str	r3, [r4, #0]
											break;
 800ae84:	e6d0      	b.n	800ac28 <PxMessagingTask+0xfdc>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ae86:	2238      	movs	r2, #56	; 0x38
 800ae88:	436a      	muls	r2, r5
 800ae8a:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae8c:	189b      	adds	r3, r3, r2
 800ae8e:	19df      	adds	r7, r3, r7
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	021b      	lsls	r3, r3, #8
 800ae94:	7a3a      	ldrb	r2, [r7, #8]
 800ae96:	0412      	lsls	r2, r2, #16
 800ae98:	189b      	adds	r3, r3, r2
 800ae9a:	79ba      	ldrb	r2, [r7, #6]
 800ae9c:	189b      	adds	r3, r3, r2
 800ae9e:	7a7a      	ldrb	r2, [r7, #9]
 800aea0:	0612      	lsls	r2, r2, #24
 800aea2:	189b      	adds	r3, r3, r2
 800aea4:	4a09      	ldr	r2, [pc, #36]	; (800aecc <PxMessagingTask+0x1280>)
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	2100      	movs	r1, #0
 800aeaa:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800aeac:	6023      	str	r3, [r4, #0]
											break;
 800aeae:	e6bb      	b.n	800ac28 <PxMessagingTask+0xfdc>
 800aeb0:	20001110 	.word	0x20001110
 800aeb4:	20000d08 	.word	0x20000d08
 800aeb8:	20006a28 	.word	0x20006a28
 800aebc:	0801b0f0 	.word	0x0801b0f0
 800aec0:	0000fff0 	.word	0x0000fff0
 800aec4:	20006aa0 	.word	0x20006aa0
 800aec8:	20000f38 	.word	0x20000f38
 800aecc:	20001108 	.word	0x20001108
 800aed0:	00007fff 	.word	0x00007fff
 800aed4:	0801b110 	.word	0x0801b110
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800aed8:	4adc      	ldr	r2, [pc, #880]	; (800b24c <PxMessagingTask+0x1600>)
 800aeda:	23f8      	movs	r3, #248	; 0xf8
 800aedc:	061b      	lsls	r3, r3, #24
 800aede:	18e3      	adds	r3, r4, r3
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d900      	bls.n	800aee6 <PxMessagingTask+0x129a>
 800aee4:	e0a7      	b.n	800b036 <PxMessagingTask+0x13ea>
									HAL_FLASH_Unlock();
 800aee6:	f006 fc67 	bl	80117b8 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800aeea:	4643      	mov	r3, r8
 800aeec:	2b22      	cmp	r3, #34	; 0x22
 800aeee:	d111      	bne.n	800af14 <PxMessagingTask+0x12c8>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800aef0:	2300      	movs	r3, #0
 800aef2:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress =temp32;
 800aef4:	9414      	str	r4, [sp, #80]	; 0x50
										erase.NbPages =1;
 800aef6:	3301      	adds	r3, #1
 800aef8:	9315      	str	r3, [sp, #84]	; 0x54
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800aefa:	a912      	add	r1, sp, #72	; 0x48
 800aefc:	a813      	add	r0, sp, #76	; 0x4c
 800aefe:	f006 fd2f 	bl	8011960 <HAL_FLASHEx_Erase>
 800af02:	900a      	str	r0, [sp, #40]	; 0x28
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800af04:	2800      	cmp	r0, #0
 800af06:	d102      	bne.n	800af0e <PxMessagingTask+0x12c2>
 800af08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af0a:	3301      	adds	r3, #1
 800af0c:	d002      	beq.n	800af14 <PxMessagingTask+0x12c8>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af0e:	4bd0      	ldr	r3, [pc, #832]	; (800b250 <PxMessagingTask+0x1604>)
 800af10:	2216      	movs	r2, #22
 800af12:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800af14:	4bce      	ldr	r3, [pc, #824]	; (800b250 <PxMessagingTask+0x1604>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d116      	bne.n	800af4a <PxMessagingTask+0x12fe>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800af1c:	2238      	movs	r2, #56	; 0x38
 800af1e:	436a      	muls	r2, r5
 800af20:	4bcc      	ldr	r3, [pc, #816]	; (800b254 <PxMessagingTask+0x1608>)
 800af22:	189b      	adds	r3, r3, r2
 800af24:	19db      	adds	r3, r3, r7
 800af26:	785b      	ldrb	r3, [r3, #1]
 800af28:	3b01      	subs	r3, #1
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	2a07      	cmp	r2, #7
 800af2e:	d80c      	bhi.n	800af4a <PxMessagingTask+0x12fe>
 800af30:	b2db      	uxtb	r3, r3
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4ac8      	ldr	r2, [pc, #800]	; (800b258 <PxMessagingTask+0x160c>)
 800af36:	58d3      	ldr	r3, [r2, r3]
 800af38:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800af3a:	8823      	ldrh	r3, [r4, #0]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	4ac7      	ldr	r2, [pc, #796]	; (800b25c <PxMessagingTask+0x1610>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d00c      	beq.n	800af5e <PxMessagingTask+0x1312>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af44:	4bc2      	ldr	r3, [pc, #776]	; (800b250 <PxMessagingTask+0x1604>)
 800af46:	2216      	movs	r2, #22
 800af48:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800af4a:	f006 fc47 	bl	80117dc <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800af4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af50:	2b00      	cmp	r3, #0
 800af52:	d100      	bne.n	800af56 <PxMessagingTask+0x130a>
 800af54:	e668      	b.n	800ac28 <PxMessagingTask+0xfdc>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af56:	4bbe      	ldr	r3, [pc, #760]	; (800b250 <PxMessagingTask+0x1604>)
 800af58:	2216      	movs	r2, #22
 800af5a:	701a      	strb	r2, [r3, #0]
 800af5c:	e664      	b.n	800ac28 <PxMessagingTask+0xfdc>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800af5e:	2238      	movs	r2, #56	; 0x38
 800af60:	436a      	muls	r2, r5
 800af62:	4bbc      	ldr	r3, [pc, #752]	; (800b254 <PxMessagingTask+0x1608>)
 800af64:	189b      	adds	r3, r3, r2
 800af66:	19df      	adds	r7, r3, r7
 800af68:	79ba      	ldrb	r2, [r7, #6]
 800af6a:	2300      	movs	r3, #0
 800af6c:	49bc      	ldr	r1, [pc, #752]	; (800b260 <PxMessagingTask+0x1614>)
 800af6e:	600a      	str	r2, [r1, #0]
 800af70:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800af72:	0021      	movs	r1, r4
 800af74:	2001      	movs	r0, #1
 800af76:	f006 fc69 	bl	801184c <HAL_FLASH_Program>
 800af7a:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800af7c:	e7e5      	b.n	800af4a <PxMessagingTask+0x12fe>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800af7e:	8823      	ldrh	r3, [r4, #0]
 800af80:	b29b      	uxth	r3, r3
 800af82:	4ab6      	ldr	r2, [pc, #728]	; (800b25c <PxMessagingTask+0x1610>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d003      	beq.n	800af90 <PxMessagingTask+0x1344>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af88:	4bb1      	ldr	r3, [pc, #708]	; (800b250 <PxMessagingTask+0x1604>)
 800af8a:	2216      	movs	r2, #22
 800af8c:	701a      	strb	r2, [r3, #0]
													break;
 800af8e:	e7dc      	b.n	800af4a <PxMessagingTask+0x12fe>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800af90:	2238      	movs	r2, #56	; 0x38
 800af92:	436a      	muls	r2, r5
 800af94:	4baf      	ldr	r3, [pc, #700]	; (800b254 <PxMessagingTask+0x1608>)
 800af96:	189b      	adds	r3, r3, r2
 800af98:	19df      	adds	r7, r3, r7
 800af9a:	79fa      	ldrb	r2, [r7, #7]
 800af9c:	0212      	lsls	r2, r2, #8
 800af9e:	79bb      	ldrb	r3, [r7, #6]
 800afa0:	18d2      	adds	r2, r2, r3
 800afa2:	17d3      	asrs	r3, r2, #31
 800afa4:	49ae      	ldr	r1, [pc, #696]	; (800b260 <PxMessagingTask+0x1614>)
 800afa6:	600a      	str	r2, [r1, #0]
 800afa8:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800afaa:	0021      	movs	r1, r4
 800afac:	2001      	movs	r0, #1
 800afae:	f006 fc4d 	bl	801184c <HAL_FLASH_Program>
 800afb2:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800afb4:	e7c9      	b.n	800af4a <PxMessagingTask+0x12fe>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	d003      	beq.n	800afc4 <PxMessagingTask+0x1378>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800afbc:	4ba4      	ldr	r3, [pc, #656]	; (800b250 <PxMessagingTask+0x1604>)
 800afbe:	2216      	movs	r2, #22
 800afc0:	701a      	strb	r2, [r3, #0]
													break;
 800afc2:	e7c2      	b.n	800af4a <PxMessagingTask+0x12fe>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800afc4:	2238      	movs	r2, #56	; 0x38
 800afc6:	436a      	muls	r2, r5
 800afc8:	4ba2      	ldr	r3, [pc, #648]	; (800b254 <PxMessagingTask+0x1608>)
 800afca:	189b      	adds	r3, r3, r2
 800afcc:	19df      	adds	r7, r3, r7
 800afce:	79fa      	ldrb	r2, [r7, #7]
 800afd0:	0212      	lsls	r2, r2, #8
 800afd2:	7a3b      	ldrb	r3, [r7, #8]
 800afd4:	041b      	lsls	r3, r3, #16
 800afd6:	18d2      	adds	r2, r2, r3
 800afd8:	79bb      	ldrb	r3, [r7, #6]
 800afda:	18d2      	adds	r2, r2, r3
 800afdc:	7a7b      	ldrb	r3, [r7, #9]
 800afde:	061b      	lsls	r3, r3, #24
 800afe0:	18d2      	adds	r2, r2, r3
 800afe2:	2300      	movs	r3, #0
 800afe4:	499e      	ldr	r1, [pc, #632]	; (800b260 <PxMessagingTask+0x1614>)
 800afe6:	600a      	str	r2, [r1, #0]
 800afe8:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800afea:	0021      	movs	r1, r4
 800afec:	2002      	movs	r0, #2
 800afee:	f006 fc2d 	bl	801184c <HAL_FLASH_Program>
 800aff2:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800aff4:	e7a9      	b.n	800af4a <PxMessagingTask+0x12fe>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	3301      	adds	r3, #1
 800affa:	d003      	beq.n	800b004 <PxMessagingTask+0x13b8>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800affc:	4b94      	ldr	r3, [pc, #592]	; (800b250 <PxMessagingTask+0x1604>)
 800affe:	2216      	movs	r2, #22
 800b000:	701a      	strb	r2, [r3, #0]
													break;
 800b002:	e7a2      	b.n	800af4a <PxMessagingTask+0x12fe>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b004:	2238      	movs	r2, #56	; 0x38
 800b006:	436a      	muls	r2, r5
 800b008:	4b92      	ldr	r3, [pc, #584]	; (800b254 <PxMessagingTask+0x1608>)
 800b00a:	189b      	adds	r3, r3, r2
 800b00c:	19df      	adds	r7, r3, r7
 800b00e:	79fa      	ldrb	r2, [r7, #7]
 800b010:	0212      	lsls	r2, r2, #8
 800b012:	7a3b      	ldrb	r3, [r7, #8]
 800b014:	041b      	lsls	r3, r3, #16
 800b016:	18d2      	adds	r2, r2, r3
 800b018:	79bb      	ldrb	r3, [r7, #6]
 800b01a:	18d2      	adds	r2, r2, r3
 800b01c:	7a7b      	ldrb	r3, [r7, #9]
 800b01e:	061b      	lsls	r3, r3, #24
 800b020:	18d2      	adds	r2, r2, r3
 800b022:	2300      	movs	r3, #0
 800b024:	498e      	ldr	r1, [pc, #568]	; (800b260 <PxMessagingTask+0x1614>)
 800b026:	600a      	str	r2, [r1, #0]
 800b028:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b02a:	0021      	movs	r1, r4
 800b02c:	2003      	movs	r0, #3
 800b02e:	f006 fc0d 	bl	801184c <HAL_FLASH_Program>
 800b032:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b034:	e789      	b.n	800af4a <PxMessagingTask+0x12fe>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b036:	4b86      	ldr	r3, [pc, #536]	; (800b250 <PxMessagingTask+0x1604>)
 800b038:	2215      	movs	r2, #21
 800b03a:	701a      	strb	r2, [r3, #0]
 800b03c:	e5f4      	b.n	800ac28 <PxMessagingTask+0xfdc>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b03e:	4b85      	ldr	r3, [pc, #532]	; (800b254 <PxMessagingTask+0x1608>)
 800b040:	199b      	adds	r3, r3, r6
 800b042:	5d1a      	ldrb	r2, [r3, r4]
 800b044:	4b82      	ldr	r3, [pc, #520]	; (800b250 <PxMessagingTask+0x1604>)
 800b046:	701a      	strb	r2, [r3, #0]
							break;
 800b048:	2700      	movs	r7, #0
 800b04a:	f7fe fe2f 	bl	8009cac <PxMessagingTask+0x60>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b04e:	9a06      	ldr	r2, [sp, #24]
 800b050:	3a01      	subs	r2, #1
 800b052:	b292      	uxth	r2, r2
 800b054:	1c61      	adds	r1, r4, #1
 800b056:	4451      	add	r1, sl
 800b058:	4b7e      	ldr	r3, [pc, #504]	; (800b254 <PxMessagingTask+0x1608>)
 800b05a:	18c9      	adds	r1, r1, r3
 800b05c:	199b      	adds	r3, r3, r6
 800b05e:	5d18      	ldrb	r0, [r3, r4]
 800b060:	230a      	movs	r3, #10
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	f002 ff4e 	bl	800df04 <writePxMutex>
							break;
 800b068:	2700      	movs	r7, #0
 800b06a:	f7fe fe1f 	bl	8009cac <PxMessagingTask+0x60>
							switch(cMessage[port - 1][0 + shift]){
 800b06e:	9406      	str	r4, [sp, #24]
 800b070:	4b78      	ldr	r3, [pc, #480]	; (800b254 <PxMessagingTask+0x1608>)
 800b072:	199b      	adds	r3, r3, r6
 800b074:	5d18      	ldrb	r0, [r3, r4]
 800b076:	282b      	cmp	r0, #43	; 0x2b
 800b078:	d900      	bls.n	800b07c <PxMessagingTask+0x1430>
 800b07a:	e0a9      	b.n	800b1d0 <PxMessagingTask+0x1584>
 800b07c:	0083      	lsls	r3, r0, #2
 800b07e:	4a79      	ldr	r2, [pc, #484]	; (800b264 <PxMessagingTask+0x1618>)
 800b080:	58d3      	ldr	r3, [r2, r3]
 800b082:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b084:	2338      	movs	r3, #56	; 0x38
 800b086:	436b      	muls	r3, r5
 800b088:	4f72      	ldr	r7, [pc, #456]	; (800b254 <PxMessagingTask+0x1608>)
 800b08a:	18ff      	adds	r7, r7, r3
 800b08c:	9b06      	ldr	r3, [sp, #24]
 800b08e:	469c      	mov	ip, r3
 800b090:	4467      	add	r7, ip
 800b092:	78bb      	ldrb	r3, [r7, #2]
 800b094:	021b      	lsls	r3, r3, #8
 800b096:	78fa      	ldrb	r2, [r7, #3]
 800b098:	0412      	lsls	r2, r2, #16
 800b09a:	189b      	adds	r3, r3, r2
 800b09c:	787a      	ldrb	r2, [r7, #1]
 800b09e:	189b      	adds	r3, r3, r2
 800b0a0:	793a      	ldrb	r2, [r7, #4]
 800b0a2:	0612      	lsls	r2, r2, #24
 800b0a4:	189b      	adds	r3, r3, r2
 800b0a6:	4a70      	ldr	r2, [pc, #448]	; (800b268 <PxMessagingTask+0x161c>)
 800b0a8:	6013      	str	r3, [r2, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b0aa:	79bb      	ldrb	r3, [r7, #6]
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	79f9      	ldrb	r1, [r7, #7]
 800b0b0:	0409      	lsls	r1, r1, #16
 800b0b2:	185b      	adds	r3, r3, r1
 800b0b4:	7979      	ldrb	r1, [r7, #5]
 800b0b6:	185b      	adds	r3, r3, r1
 800b0b8:	7a39      	ldrb	r1, [r7, #8]
 800b0ba:	0609      	lsls	r1, r1, #24
 800b0bc:	185b      	adds	r3, r3, r1
 800b0be:	6053      	str	r3, [r2, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b0c0:	7abb      	ldrb	r3, [r7, #10]
 800b0c2:	021b      	lsls	r3, r3, #8
 800b0c4:	7af9      	ldrb	r1, [r7, #11]
 800b0c6:	0409      	lsls	r1, r1, #16
 800b0c8:	185b      	adds	r3, r3, r1
 800b0ca:	7a79      	ldrb	r1, [r7, #9]
 800b0cc:	185b      	adds	r3, r3, r1
 800b0ce:	7b39      	ldrb	r1, [r7, #12]
 800b0d0:	0609      	lsls	r1, r1, #24
 800b0d2:	185b      	adds	r3, r3, r1
 800b0d4:	6093      	str	r3, [r2, #8]
									break;
 800b0d6:	e07b      	b.n	800b1d0 <PxMessagingTask+0x1584>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b0d8:	2338      	movs	r3, #56	; 0x38
 800b0da:	436b      	muls	r3, r5
 800b0dc:	4f5d      	ldr	r7, [pc, #372]	; (800b254 <PxMessagingTask+0x1608>)
 800b0de:	18ff      	adds	r7, r7, r3
 800b0e0:	9b06      	ldr	r3, [sp, #24]
 800b0e2:	469c      	mov	ip, r3
 800b0e4:	4467      	add	r7, ip
 800b0e6:	78bb      	ldrb	r3, [r7, #2]
 800b0e8:	021b      	lsls	r3, r3, #8
 800b0ea:	78fa      	ldrb	r2, [r7, #3]
 800b0ec:	0412      	lsls	r2, r2, #16
 800b0ee:	189b      	adds	r3, r3, r2
 800b0f0:	787a      	ldrb	r2, [r7, #1]
 800b0f2:	189b      	adds	r3, r3, r2
 800b0f4:	793a      	ldrb	r2, [r7, #4]
 800b0f6:	0612      	lsls	r2, r2, #24
 800b0f8:	189b      	adds	r3, r3, r2
 800b0fa:	4a5b      	ldr	r2, [pc, #364]	; (800b268 <PxMessagingTask+0x161c>)
 800b0fc:	60d3      	str	r3, [r2, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b0fe:	79bb      	ldrb	r3, [r7, #6]
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	79f9      	ldrb	r1, [r7, #7]
 800b104:	0409      	lsls	r1, r1, #16
 800b106:	185b      	adds	r3, r3, r1
 800b108:	7979      	ldrb	r1, [r7, #5]
 800b10a:	185b      	adds	r3, r3, r1
 800b10c:	7a39      	ldrb	r1, [r7, #8]
 800b10e:	0609      	lsls	r1, r1, #24
 800b110:	185b      	adds	r3, r3, r1
 800b112:	6113      	str	r3, [r2, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b114:	7abb      	ldrb	r3, [r7, #10]
 800b116:	021b      	lsls	r3, r3, #8
 800b118:	7af9      	ldrb	r1, [r7, #11]
 800b11a:	0409      	lsls	r1, r1, #16
 800b11c:	185b      	adds	r3, r3, r1
 800b11e:	7a79      	ldrb	r1, [r7, #9]
 800b120:	185b      	adds	r3, r3, r1
 800b122:	7b39      	ldrb	r1, [r7, #12]
 800b124:	0609      	lsls	r1, r1, #24
 800b126:	185b      	adds	r3, r3, r1
 800b128:	6153      	str	r3, [r2, #20]
									break;
 800b12a:	e051      	b.n	800b1d0 <PxMessagingTask+0x1584>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b12c:	2338      	movs	r3, #56	; 0x38
 800b12e:	436b      	muls	r3, r5
 800b130:	4a48      	ldr	r2, [pc, #288]	; (800b254 <PxMessagingTask+0x1608>)
 800b132:	18d2      	adds	r2, r2, r3
 800b134:	9b06      	ldr	r3, [sp, #24]
 800b136:	469c      	mov	ip, r3
 800b138:	4462      	add	r2, ip
 800b13a:	7893      	ldrb	r3, [r2, #2]
 800b13c:	021b      	lsls	r3, r3, #8
 800b13e:	78d1      	ldrb	r1, [r2, #3]
 800b140:	0409      	lsls	r1, r1, #16
 800b142:	185b      	adds	r3, r3, r1
 800b144:	7851      	ldrb	r1, [r2, #1]
 800b146:	185b      	adds	r3, r3, r1
 800b148:	7912      	ldrb	r2, [r2, #4]
 800b14a:	0612      	lsls	r2, r2, #24
 800b14c:	189b      	adds	r3, r3, r2
 800b14e:	4a46      	ldr	r2, [pc, #280]	; (800b268 <PxMessagingTask+0x161c>)
 800b150:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b152:	4b46      	ldr	r3, [pc, #280]	; (800b26c <PxMessagingTask+0x1620>)
 800b154:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b156:	2238      	movs	r2, #56	; 0x38
 800b158:	436a      	muls	r2, r5
 800b15a:	4b3e      	ldr	r3, [pc, #248]	; (800b254 <PxMessagingTask+0x1608>)
 800b15c:	189b      	adds	r3, r3, r2
 800b15e:	9a06      	ldr	r2, [sp, #24]
 800b160:	4694      	mov	ip, r2
 800b162:	4463      	add	r3, ip
 800b164:	785b      	ldrb	r3, [r3, #1]
 800b166:	4a42      	ldr	r2, [pc, #264]	; (800b270 <PxMessagingTask+0x1624>)
 800b168:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d146      	bne.n	800b1fc <PxMessagingTask+0x15b0>
										ADCSelectChannel(ADCPort,"top");
 800b16e:	4f41      	ldr	r7, [pc, #260]	; (800b274 <PxMessagingTask+0x1628>)
 800b170:	0039      	movs	r1, r7
 800b172:	f7fd fc9b 	bl	8008aac <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b176:	4b3d      	ldr	r3, [pc, #244]	; (800b26c <PxMessagingTask+0x1620>)
 800b178:	7818      	ldrb	r0, [r3, #0]
 800b17a:	4a3f      	ldr	r2, [pc, #252]	; (800b278 <PxMessagingTask+0x162c>)
 800b17c:	0039      	movs	r1, r7
 800b17e:	f7fd fcc3 	bl	8008b08 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b182:	493e      	ldr	r1, [pc, #248]	; (800b27c <PxMessagingTask+0x1630>)
 800b184:	483e      	ldr	r0, [pc, #248]	; (800b280 <PxMessagingTask+0x1634>)
 800b186:	f7fd fb09 	bl	800879c <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b18a:	4f32      	ldr	r7, [pc, #200]	; (800b254 <PxMessagingTask+0x1608>)
 800b18c:	19bf      	adds	r7, r7, r6
 800b18e:	9b06      	ldr	r3, [sp, #24]
 800b190:	5cf8      	ldrb	r0, [r7, r3]
 800b192:	4b36      	ldr	r3, [pc, #216]	; (800b26c <PxMessagingTask+0x1620>)
 800b194:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b196:	493b      	ldr	r1, [pc, #236]	; (800b284 <PxMessagingTask+0x1638>)
 800b198:	f7fd fbbe 	bl	8008918 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b19c:	9b06      	ldr	r3, [sp, #24]
 800b19e:	469c      	mov	ip, r3
 800b1a0:	4467      	add	r7, ip
 800b1a2:	79bb      	ldrb	r3, [r7, #6]
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	79fa      	ldrb	r2, [r7, #7]
 800b1a8:	0412      	lsls	r2, r2, #16
 800b1aa:	189b      	adds	r3, r3, r2
 800b1ac:	797a      	ldrb	r2, [r7, #5]
 800b1ae:	189b      	adds	r3, r3, r2
 800b1b0:	7a3a      	ldrb	r2, [r7, #8]
 800b1b2:	0612      	lsls	r2, r2, #24
 800b1b4:	189b      	adds	r3, r3, r2
 800b1b6:	4a2c      	ldr	r2, [pc, #176]	; (800b268 <PxMessagingTask+0x161c>)
 800b1b8:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b1ba:	7abb      	ldrb	r3, [r7, #10]
 800b1bc:	021b      	lsls	r3, r3, #8
 800b1be:	7af9      	ldrb	r1, [r7, #11]
 800b1c0:	0409      	lsls	r1, r1, #16
 800b1c2:	185b      	adds	r3, r3, r1
 800b1c4:	7a79      	ldrb	r1, [r7, #9]
 800b1c6:	185b      	adds	r3, r3, r1
 800b1c8:	7b39      	ldrb	r1, [r7, #12]
 800b1ca:	0609      	lsls	r1, r1, #24
 800b1cc:	185b      	adds	r3, r3, r1
 800b1ce:	6213      	str	r3, [r2, #32]
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b1d0:	9400      	str	r4, [sp, #0]
 800b1d2:	464b      	mov	r3, r9
 800b1d4:	9a04      	ldr	r2, [sp, #16]
 800b1d6:	9908      	ldr	r1, [sp, #32]
 800b1d8:	4640      	mov	r0, r8
 800b1da:	f7fe fd35 	bl	8009c48 <User_MessagingParser>
 800b1de:	0007      	movs	r7, r0
							if(result == BOS_ERR_UnknownMessage){
 800b1e0:	2801      	cmp	r0, #1
 800b1e2:	d001      	beq.n	800b1e8 <PxMessagingTask+0x159c>
 800b1e4:	f7fe fd62 	bl	8009cac <PxMessagingTask+0x60>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b1e8:	9400      	str	r4, [sp, #0]
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	9a04      	ldr	r2, [sp, #16]
 800b1ee:	9908      	ldr	r1, [sp, #32]
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	f000 ff21 	bl	800c038 <Module_MessagingTask>
 800b1f6:	0007      	movs	r7, r0
 800b1f8:	f7fe fd54 	bl	8009ca4 <PxMessagingTask+0x58>
									else if(1 == ADCSide){
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d1c0      	bne.n	800b182 <PxMessagingTask+0x1536>
										ADCSelectChannel(ADCPort,"bottom");
 800b200:	4f21      	ldr	r7, [pc, #132]	; (800b288 <PxMessagingTask+0x163c>)
 800b202:	0039      	movs	r1, r7
 800b204:	f7fd fc52 	bl	8008aac <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b208:	4b18      	ldr	r3, [pc, #96]	; (800b26c <PxMessagingTask+0x1620>)
 800b20a:	7818      	ldrb	r0, [r3, #0]
 800b20c:	4a1a      	ldr	r2, [pc, #104]	; (800b278 <PxMessagingTask+0x162c>)
 800b20e:	0039      	movs	r1, r7
 800b210:	f7fd fc7a 	bl	8008b08 <ReadADCChannel>
 800b214:	e7b5      	b.n	800b182 <PxMessagingTask+0x1536>
								switch(cMessage[port - 1][1 + shift]) // requested format
 800b216:	2700      	movs	r7, #0
 800b218:	f7fe fd44 	bl	8009ca4 <PxMessagingTask+0x58>
									switch(messageParams[0]) // requested format
 800b21c:	2700      	movs	r7, #0
 800b21e:	f7fe fd41 	bl	8009ca4 <PxMessagingTask+0x58>
									switch(messageParams[0]) // requested format
 800b222:	2700      	movs	r7, #0
 800b224:	f7fe fd3e 	bl	8009ca4 <PxMessagingTask+0x58>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b228:	2200      	movs	r2, #0
 800b22a:	2100      	movs	r1, #0
 800b22c:	9804      	ldr	r0, [sp, #16]
 800b22e:	f7fe fa49 	bl	80096c4 <SendMessageToModule>
			result =BOS_OK;
 800b232:	2700      	movs	r7, #0
 800b234:	f7fe fd3a 	bl	8009cac <PxMessagingTask+0x60>
					switch(code){
 800b238:	2700      	movs	r7, #0
 800b23a:	f7fe fd37 	bl	8009cac <PxMessagingTask+0x60>
 800b23e:	9205      	str	r2, [sp, #20]
 800b240:	2700      	movs	r7, #0
 800b242:	f7fe fd33 	bl	8009cac <PxMessagingTask+0x60>
 800b246:	2700      	movs	r7, #0
 800b248:	f7fe fd30 	bl	8009cac <PxMessagingTask+0x60>
 800b24c:	0001ffff 	.word	0x0001ffff
 800b250:	20001110 	.word	0x20001110
 800b254:	20000d08 	.word	0x20000d08
 800b258:	0801b130 	.word	0x0801b130
 800b25c:	0000ffff 	.word	0x0000ffff
 800b260:	20001108 	.word	0x20001108
 800b264:	0801b150 	.word	0x0801b150
 800b268:	200015cc 	.word	0x200015cc
 800b26c:	200015bc 	.word	0x200015bc
 800b270:	200015be 	.word	0x200015be
 800b274:	08019104 	.word	0x08019104
 800b278:	200015c0 	.word	0x200015c0
 800b27c:	200015c8 	.word	0x200015c8
 800b280:	200015c4 	.word	0x200015c4
 800b284:	200015b8 	.word	0x200015b8
 800b288:	08019108 	.word	0x08019108
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800b28c:	454b      	cmp	r3, r9
 800b28e:	d004      	beq.n	800b29a <PxMessagingTask+0x164e>
 800b290:	4643      	mov	r3, r8
 800b292:	2b10      	cmp	r3, #16
 800b294:	d001      	beq.n	800b29a <PxMessagingTask+0x164e>
 800b296:	f7fe fd5c 	bl	8009d52 <PxMessagingTask+0x106>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b29a:	464b      	mov	r3, r9
 800b29c:	2bff      	cmp	r3, #255	; 0xff
 800b29e:	d101      	bne.n	800b2a4 <PxMessagingTask+0x1658>
 800b2a0:	f7fe fd79 	bl	8009d96 <PxMessagingTask+0x14a>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b2a4:	2bfe      	cmp	r3, #254	; 0xfe
 800b2a6:	d001      	beq.n	800b2ac <PxMessagingTask+0x1660>
 800b2a8:	f7fe fd7f 	bl	8009daa <PxMessagingTask+0x15e>
 800b2ac:	4b29      	ldr	r3, [pc, #164]	; (800b354 <PxMessagingTask+0x1708>)
 800b2ae:	199b      	adds	r3, r3, r6
 800b2b0:	1859      	adds	r1, r3, r1
 800b2b2:	3901      	subs	r1, #1
 800b2b4:	780b      	ldrb	r3, [r1, #0]
 800b2b6:	4a28      	ldr	r2, [pc, #160]	; (800b358 <PxMessagingTask+0x170c>)
 800b2b8:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800b2ba:	2703      	movs	r7, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d101      	bne.n	800b2c4 <PxMessagingTask+0x1678>
 800b2c0:	f7fe fcf0 	bl	8009ca4 <PxMessagingTask+0x58>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800b2c4:	4a24      	ldr	r2, [pc, #144]	; (800b358 <PxMessagingTask+0x170c>)
 800b2c6:	7013      	strb	r3, [r2, #0]
 800b2c8:	4a24      	ldr	r2, [pc, #144]	; (800b35c <PxMessagingTask+0x1710>)
 800b2ca:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800b2cc:	9908      	ldr	r1, [sp, #32]
 800b2ce:	20fe      	movs	r0, #254	; 0xfe
 800b2d0:	f7fe f9b0 	bl	8009634 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800b2d4:	4b22      	ldr	r3, [pc, #136]	; (800b360 <PxMessagingTask+0x1714>)
 800b2d6:	5d59      	ldrb	r1, [r3, r5]
 800b2d8:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <PxMessagingTask+0x1708>)
 800b2da:	199b      	adds	r3, r3, r6
 800b2dc:	185a      	adds	r2, r3, r1
 800b2de:	3a01      	subs	r2, #1
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800b2e4:	1e8a      	subs	r2, r1, #2
 800b2e6:	5c9c      	ldrb	r4, [r3, r2]
 800b2e8:	9405      	str	r4, [sp, #20]
					for(i =0; i < temp; i++){
 800b2ea:	2c00      	cmp	r4, #0
 800b2ec:	d02e      	beq.n	800b34c <PxMessagingTask+0x1700>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b2ee:	1b13      	subs	r3, r2, r4
 800b2f0:	469c      	mov	ip, r3
 800b2f2:	4b1c      	ldr	r3, [pc, #112]	; (800b364 <PxMessagingTask+0x1718>)
 800b2f4:	7818      	ldrb	r0, [r3, #0]
 800b2f6:	4b17      	ldr	r3, [pc, #92]	; (800b354 <PxMessagingTask+0x1708>)
 800b2f8:	199b      	adds	r3, r3, r6
 800b2fa:	4662      	mov	r2, ip
 800b2fc:	5c9b      	ldrb	r3, [r3, r2]
 800b2fe:	4283      	cmp	r3, r0
 800b300:	d011      	beq.n	800b326 <PxMessagingTask+0x16da>
 800b302:	4653      	mov	r3, sl
 800b304:	3301      	adds	r3, #1
 800b306:	4463      	add	r3, ip
 800b308:	4a12      	ldr	r2, [pc, #72]	; (800b354 <PxMessagingTask+0x1708>)
 800b30a:	189b      	adds	r3, r3, r2
 800b30c:	3201      	adds	r2, #1
 800b30e:	4452      	add	r2, sl
 800b310:	1e67      	subs	r7, r4, #1
 800b312:	b2ff      	uxtb	r7, r7
 800b314:	19d2      	adds	r2, r2, r7
 800b316:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 800b318:	4293      	cmp	r3, r2
 800b31a:	d017      	beq.n	800b34c <PxMessagingTask+0x1700>
 800b31c:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b31e:	1e5c      	subs	r4, r3, #1
 800b320:	7824      	ldrb	r4, [r4, #0]
 800b322:	4284      	cmp	r4, r0
 800b324:	d1f8      	bne.n	800b318 <PxMessagingTask+0x16cc>
				shift +=4;
 800b326:	9c06      	ldr	r4, [sp, #24]
 800b328:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800b32a:	1b0a      	subs	r2, r1, r4
 800b32c:	b2d3      	uxtb	r3, r2
 800b32e:	9306      	str	r3, [sp, #24]
 800b330:	f7fe fd45 	bl	8009dbe <PxMessagingTask+0x172>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b334:	2338      	movs	r3, #56	; 0x38
 800b336:	436b      	muls	r3, r5
 800b338:	4a06      	ldr	r2, [pc, #24]	; (800b354 <PxMessagingTask+0x1708>)
 800b33a:	18d2      	adds	r2, r2, r3
 800b33c:	5dd3      	ldrb	r3, [r2, r7]
 800b33e:	3b01      	subs	r3, #1
 800b340:	0098      	lsls	r0, r3, #2
 800b342:	4909      	ldr	r1, [pc, #36]	; (800b368 <PxMessagingTask+0x171c>)
 800b344:	5841      	ldr	r1, [r0, r1]
 800b346:	4640      	mov	r0, r8
 800b348:	5c12      	ldrb	r2, [r2, r0]
 800b34a:	e463      	b.n	800ac14 <PxMessagingTask+0xfc8>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b34c:	2766      	movs	r7, #102	; 0x66
 800b34e:	f7fe fcad 	bl	8009cac <PxMessagingTask+0x60>
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	20000d08 	.word	0x20000d08
 800b358:	200015f2 	.word	0x200015f2
 800b35c:	20000cb4 	.word	0x20000cb4
 800b360:	20000f30 	.word	0x20000f30
 800b364:	20001076 	.word	0x20001076
 800b368:	20006a28 	.word	0x20006a28

0800b36c <btGetInfoCommand>:
/* -----------------------------------------------------------------------
	|															Commands																 	|
   -----------------------------------------------------------------------
*/
static portBASE_TYPE btGetInfoCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b36c:	b510      	push	{r4, lr}
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800b36e:	2800      	cmp	r0, #0
 800b370:	d101      	bne.n	800b376 <btGetInfoCommand+0xa>
 800b372:	b672      	cpsid	i
 800b374:	e7fe      	b.n	800b374 <btGetInfoCommand+0x8>

	/* Get information from the BT900 */

	sprintf( ( char * ) pcWriteBuffer, "Get BT900 module information \r\n");
 800b376:	2220      	movs	r2, #32
 800b378:	4902      	ldr	r1, [pc, #8]	; (800b384 <btGetInfoCommand+0x18>)
 800b37a:	f008 fcea 	bl	8013d52 <memcpy>


	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800b37e:	2000      	movs	r0, #0
 800b380:	bd10      	pop	{r4, pc}
 800b382:	46c0      	nop			; (mov r8, r8)
 800b384:	0801b494 	.word	0x0801b494

0800b388 <SystemClock_Config>:
{
 800b388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b38a:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b38c:	2401      	movs	r4, #1
 800b38e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b390:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b392:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b394:	2310      	movs	r3, #16
 800b396:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b398:	2702      	movs	r7, #2
 800b39a:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b39c:	2680      	movs	r6, #128	; 0x80
 800b39e:	0276      	lsls	r6, r6, #9
 800b3a0:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b3a2:	2380      	movs	r3, #128	; 0x80
 800b3a4:	035b      	lsls	r3, r3, #13
 800b3a6:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b3a8:	2500      	movs	r5, #0
 800b3aa:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b3ac:	a80d      	add	r0, sp, #52	; 0x34
 800b3ae:	f006 fcc1 	bl	8011d34 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b3b2:	2307      	movs	r3, #7
 800b3b4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b3b6:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b3b8:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b3ba:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b3bc:	2101      	movs	r1, #1
 800b3be:	a809      	add	r0, sp, #36	; 0x24
 800b3c0:	f006 ff7a 	bl	80122b8 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b3c4:	4b1a      	ldr	r3, [pc, #104]	; (800b430 <SystemClock_Config+0xa8>)
 800b3c6:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b3c8:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b3ca:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b3cc:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b3ce:	a802      	add	r0, sp, #8
 800b3d0:	f007 f920 	bl	8012614 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b3d4:	4d17      	ldr	r5, [pc, #92]	; (800b434 <SystemClock_Config+0xac>)
 800b3d6:	69ea      	ldr	r2, [r5, #28]
 800b3d8:	2180      	movs	r1, #128	; 0x80
 800b3da:	0549      	lsls	r1, r1, #21
 800b3dc:	430a      	orrs	r2, r1
 800b3de:	61ea      	str	r2, [r5, #28]
 800b3e0:	69eb      	ldr	r3, [r5, #28]
 800b3e2:	400b      	ands	r3, r1
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b3e8:	f006 fc9a 	bl	8011d20 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b3ec:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b3ee:	23c0      	movs	r3, #192	; 0xc0
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b3f4:	a802      	add	r0, sp, #8
 800b3f6:	f007 f90d 	bl	8012614 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b3fa:	f007 f8e7 	bl	80125cc <HAL_RCC_GetHCLKFreq>
 800b3fe:	21fa      	movs	r1, #250	; 0xfa
 800b400:	0089      	lsls	r1, r1, #2
 800b402:	f7f4 fea5 	bl	8000150 <__udivsi3>
 800b406:	f005 fb89 	bl	8010b1c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b40a:	2004      	movs	r0, #4
 800b40c:	f005 fba2 	bl	8010b54 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800b410:	69ab      	ldr	r3, [r5, #24]
 800b412:	4323      	orrs	r3, r4
 800b414:	61ab      	str	r3, [r5, #24]
 800b416:	69ab      	ldr	r3, [r5, #24]
 800b418:	401c      	ands	r4, r3
 800b41a:	9401      	str	r4, [sp, #4]
 800b41c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b41e:	2001      	movs	r0, #1
 800b420:	2200      	movs	r2, #0
 800b422:	2100      	movs	r1, #0
 800b424:	4240      	negs	r0, r0
 800b426:	f005 fb31 	bl	8010a8c <HAL_NVIC_SetPriority>
}
 800b42a:	b01b      	add	sp, #108	; 0x6c
 800b42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b42e:	46c0      	nop			; (mov r8, r8)
 800b430:	00040003 	.word	0x00040003
 800b434:	40021000 	.word	0x40021000

0800b438 <SaveToRO>:
{
 800b438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b43a:	46de      	mov	lr, fp
 800b43c:	4657      	mov	r7, sl
 800b43e:	464e      	mov	r6, r9
 800b440:	4645      	mov	r5, r8
 800b442:	b5e0      	push	{r5, r6, r7, lr}
 800b444:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b446:	2215      	movs	r2, #21
 800b448:	2100      	movs	r1, #0
 800b44a:	a802      	add	r0, sp, #8
 800b44c:	f008 fc8a 	bl	8013d64 <memset>
	HAL_FLASH_Unlock();
 800b450:	f006 f9b2 	bl	80117b8 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b454:	4872      	ldr	r0, [pc, #456]	; (800b620 <SaveToRO+0x1e8>)
 800b456:	f006 fa71 	bl	801193c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b45a:	4872      	ldr	r0, [pc, #456]	; (800b624 <SaveToRO+0x1ec>)
 800b45c:	f006 f9c8 	bl	80117f0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800b460:	2800      	cmp	r0, #0
 800b462:	d112      	bne.n	800b48a <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b464:	4a70      	ldr	r2, [pc, #448]	; (800b628 <SaveToRO+0x1f0>)
 800b466:	6913      	ldr	r3, [r2, #16]
 800b468:	2102      	movs	r1, #2
 800b46a:	438b      	bics	r3, r1
 800b46c:	6113      	str	r3, [r2, #16]
	if (myID)
 800b46e:	4b6f      	ldr	r3, [pc, #444]	; (800b62c <SaveToRO+0x1f4>)
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d113      	bne.n	800b49e <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b476:	4b6e      	ldr	r3, [pc, #440]	; (800b630 <SaveToRO+0x1f8>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d100      	bne.n	800b480 <SaveToRO+0x48>
 800b47e:	e0ca      	b.n	800b616 <SaveToRO+0x1de>
 800b480:	2500      	movs	r5, #0
 800b482:	4c6c      	ldr	r4, [pc, #432]	; (800b634 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) 
 800b484:	4b6c      	ldr	r3, [pc, #432]	; (800b638 <SaveToRO+0x200>)
 800b486:	4698      	mov	r8, r3
 800b488:	e06e      	b.n	800b568 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800b48a:	4b6c      	ldr	r3, [pc, #432]	; (800b63c <SaveToRO+0x204>)
 800b48c:	69d8      	ldr	r0, [r3, #28]
 800b48e:	b2c0      	uxtb	r0, r0
}
 800b490:	b009      	add	sp, #36	; 0x24
 800b492:	bc3c      	pop	{r2, r3, r4, r5}
 800b494:	4690      	mov	r8, r2
 800b496:	4699      	mov	r9, r3
 800b498:	46a2      	mov	sl, r4
 800b49a:	46ab      	mov	fp, r5
 800b49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b49e:	4a68      	ldr	r2, [pc, #416]	; (800b640 <SaveToRO+0x208>)
 800b4a0:	7812      	ldrb	r2, [r2, #0]
 800b4a2:	0212      	lsls	r2, r2, #8
 800b4a4:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b4a6:	b292      	uxth	r2, r2
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	495d      	ldr	r1, [pc, #372]	; (800b620 <SaveToRO+0x1e8>)
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	f006 f9cd 	bl	801184c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b4b2:	485c      	ldr	r0, [pc, #368]	; (800b624 <SaveToRO+0x1ec>)
 800b4b4:	f006 f99c 	bl	80117f0 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d111      	bne.n	800b4e0 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b4bc:	4a5a      	ldr	r2, [pc, #360]	; (800b628 <SaveToRO+0x1f0>)
 800b4be:	6913      	ldr	r3, [r2, #16]
 800b4c0:	2101      	movs	r1, #1
 800b4c2:	438b      	bics	r3, r1
 800b4c4:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b4c6:	4b5e      	ldr	r3, [pc, #376]	; (800b640 <SaveToRO+0x208>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800b4ce:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d0d0      	beq.n	800b476 <SaveToRO+0x3e>
 800b4d4:	2316      	movs	r3, #22
 800b4d6:	469b      	mov	fp, r3
 800b4d8:	4b5a      	ldr	r3, [pc, #360]	; (800b644 <SaveToRO+0x20c>)
 800b4da:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800b4dc:	4698      	mov	r8, r3
 800b4de:	e02a      	b.n	800b536 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800b4e0:	4b56      	ldr	r3, [pc, #344]	; (800b63c <SaveToRO+0x204>)
 800b4e2:	69d8      	ldr	r0, [r3, #28]
 800b4e4:	b2c0      	uxtb	r0, r0
 800b4e6:	e7d3      	b.n	800b490 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800b4e8:	4b54      	ldr	r3, [pc, #336]	; (800b63c <SaveToRO+0x204>)
 800b4ea:	69d8      	ldr	r0, [r3, #28]
 800b4ec:	b2c0      	uxtb	r0, r0
 800b4ee:	e7cf      	b.n	800b490 <SaveToRO+0x58>
 800b4f0:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b4f2:	42b4      	cmp	r4, r6
 800b4f4:	d017      	beq.n	800b526 <SaveToRO+0xee>
				if (array[i-1][0]) {
 800b4f6:	4643      	mov	r3, r8
 800b4f8:	5afb      	ldrh	r3, [r7, r3]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d0f8      	beq.n	800b4f0 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b4fe:	8822      	ldrh	r2, [r4, #0]
 800b500:	4b47      	ldr	r3, [pc, #284]	; (800b620 <SaveToRO+0x1e8>)
 800b502:	18e9      	adds	r1, r5, r3
 800b504:	2300      	movs	r3, #0
 800b506:	2001      	movs	r0, #1
 800b508:	f006 f9a0 	bl	801184c <HAL_FLASH_Program>
					add += 2;
 800b50c:	3502      	adds	r5, #2
 800b50e:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b510:	4844      	ldr	r0, [pc, #272]	; (800b624 <SaveToRO+0x1ec>)
 800b512:	f006 f96d 	bl	80117f0 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b516:	2800      	cmp	r0, #0
 800b518:	d1e6      	bne.n	800b4e8 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b51a:	4a43      	ldr	r2, [pc, #268]	; (800b628 <SaveToRO+0x1f0>)
 800b51c:	6913      	ldr	r3, [r2, #16]
 800b51e:	2101      	movs	r1, #1
 800b520:	438b      	bics	r3, r1
 800b522:	6113      	str	r3, [r2, #16]
 800b524:	e7e4      	b.n	800b4f0 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800b526:	464b      	mov	r3, r9
 800b528:	3301      	adds	r3, #1
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	4699      	mov	r9, r3
 800b52e:	4b44      	ldr	r3, [pc, #272]	; (800b640 <SaveToRO+0x208>)
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	454b      	cmp	r3, r9
 800b534:	d39f      	bcc.n	800b476 <SaveToRO+0x3e>
 800b536:	465e      	mov	r6, fp
 800b538:	464b      	mov	r3, r9
 800b53a:	435e      	muls	r6, r3
 800b53c:	0034      	movs	r4, r6
 800b53e:	3c16      	subs	r4, #22
 800b540:	4454      	add	r4, sl
 800b542:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800b544:	1e5f      	subs	r7, r3, #1
 800b546:	465b      	mov	r3, fp
 800b548:	435f      	muls	r7, r3
 800b54a:	e7d4      	b.n	800b4f6 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800b54c:	4b3b      	ldr	r3, [pc, #236]	; (800b63c <SaveToRO+0x204>)
 800b54e:	69d8      	ldr	r0, [r3, #28]
 800b550:	b2c0      	uxtb	r0, r0
 800b552:	e79d      	b.n	800b490 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b554:	4b39      	ldr	r3, [pc, #228]	; (800b63c <SaveToRO+0x204>)
 800b556:	69d8      	ldr	r0, [r3, #28]
 800b558:	b2c0      	uxtb	r0, r0
 800b55a:	e799      	b.n	800b490 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b55c:	3501      	adds	r5, #1
 800b55e:	b2ed      	uxtb	r5, r5
 800b560:	4b33      	ldr	r3, [pc, #204]	; (800b630 <SaveToRO+0x1f8>)
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	42ab      	cmp	r3, r5
 800b566:	d956      	bls.n	800b616 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) 
 800b568:	9501      	str	r5, [sp, #4]
 800b56a:	00ab      	lsls	r3, r5, #2
 800b56c:	195b      	adds	r3, r3, r5
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4642      	mov	r2, r8
 800b572:	5c9b      	ldrb	r3, [r3, r2]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0f1      	beq.n	800b55c <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b578:	23fe      	movs	r3, #254	; 0xfe
 800b57a:	aa02      	add	r2, sp, #8
 800b57c:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b57e:	00a9      	lsls	r1, r5, #2
 800b580:	1949      	adds	r1, r1, r5
 800b582:	0089      	lsls	r1, r1, #2
 800b584:	4b2c      	ldr	r3, [pc, #176]	; (800b638 <SaveToRO+0x200>)
 800b586:	469c      	mov	ip, r3
 800b588:	4461      	add	r1, ip
 800b58a:	2214      	movs	r2, #20
 800b58c:	ab02      	add	r3, sp, #8
 800b58e:	1c58      	adds	r0, r3, #1
 800b590:	f008 fbdf 	bl	8013d52 <memcpy>
 800b594:	2314      	movs	r3, #20
 800b596:	469b      	mov	fp, r3
 800b598:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b59a:	ae02      	add	r6, sp, #8
 800b59c:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b59e:	4f22      	ldr	r7, [pc, #136]	; (800b628 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b5a0:	5b32      	ldrh	r2, [r6, r4]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	0021      	movs	r1, r4
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	f006 f950 	bl	801184c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b5ac:	481d      	ldr	r0, [pc, #116]	; (800b624 <SaveToRO+0x1ec>)
 800b5ae:	f006 f91f 	bl	80117f0 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d1ca      	bne.n	800b54c <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	4393      	bics	r3, r2
 800b5bc:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b5be:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b5c0:	455c      	cmp	r4, fp
 800b5c2:	d1ed      	bne.n	800b5a0 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5c4:	2700      	movs	r7, #0
 800b5c6:	9a01      	ldr	r2, [sp, #4]
 800b5c8:	0093      	lsls	r3, r2, #2
 800b5ca:	189e      	adds	r6, r3, r2
 800b5cc:	00b6      	lsls	r6, r6, #2
 800b5ce:	4b1a      	ldr	r3, [pc, #104]	; (800b638 <SaveToRO+0x200>)
 800b5d0:	469a      	mov	sl, r3
 800b5d2:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5d4:	4b14      	ldr	r3, [pc, #80]	; (800b628 <SaveToRO+0x1f0>)
 800b5d6:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5d8:	4653      	mov	r3, sl
 800b5da:	68de      	ldr	r6, [r3, #12]
 800b5dc:	0030      	movs	r0, r6
 800b5de:	f7f4 fd9b 	bl	8000118 <strlen>
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	0840      	lsrs	r0, r0, #1
 800b5e6:	4287      	cmp	r7, r0
 800b5e8:	d2b8      	bcs.n	800b55c <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b5ea:	007b      	lsls	r3, r7, #1
 800b5ec:	5af2      	ldrh	r2, [r6, r3]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	0021      	movs	r1, r4
 800b5f2:	2001      	movs	r0, #1
 800b5f4:	f006 f92a 	bl	801184c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b5f8:	480a      	ldr	r0, [pc, #40]	; (800b624 <SaveToRO+0x1ec>)
 800b5fa:	f006 f8f9 	bl	80117f0 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d1a8      	bne.n	800b554 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b602:	465b      	mov	r3, fp
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	2201      	movs	r2, #1
 800b608:	4393      	bics	r3, r2
 800b60a:	465a      	mov	r2, fp
 800b60c:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b60e:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b610:	3701      	adds	r7, #1
 800b612:	b2ff      	uxtb	r7, r7
 800b614:	e7e0      	b.n	800b5d8 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800b616:	f006 f8e1 	bl	80117dc <HAL_FLASH_Lock>
	return result;
 800b61a:	2000      	movs	r0, #0
 800b61c:	e738      	b.n	800b490 <SaveToRO+0x58>
 800b61e:	46c0      	nop			; (mov r8, r8)
 800b620:	0801d800 	.word	0x0801d800
 800b624:	0000c350 	.word	0x0000c350
 800b628:	40022000 	.word	0x40022000
 800b62c:	20001076 	.word	0x20001076
 800b630:	2000121f 	.word	0x2000121f
 800b634:	0801dc00 	.word	0x0801dc00
 800b638:	20006abc 	.word	0x20006abc
 800b63c:	20006f90 	.word	0x20006f90
 800b640:	2000001c 	.word	0x2000001c
 800b644:	20000a78 	.word	0x20000a78

0800b648 <ClearROtopology>:
{
 800b648:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b64a:	228f      	movs	r2, #143	; 0x8f
 800b64c:	0092      	lsls	r2, r2, #2
 800b64e:	2100      	movs	r1, #0
 800b650:	4805      	ldr	r0, [pc, #20]	; (800b668 <ClearROtopology+0x20>)
 800b652:	f008 fb87 	bl	8013d64 <memset>
	N = 1; myID = 0;
 800b656:	4b05      	ldr	r3, [pc, #20]	; (800b66c <ClearROtopology+0x24>)
 800b658:	2201      	movs	r2, #1
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	4b04      	ldr	r3, [pc, #16]	; (800b670 <ClearROtopology+0x28>)
 800b65e:	2200      	movs	r2, #0
 800b660:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800b662:	f7ff fee9 	bl	800b438 <SaveToRO>
}
 800b666:	bd10      	pop	{r4, pc}
 800b668:	20000a78 	.word	0x20000a78
 800b66c:	2000001c 	.word	0x2000001c
 800b670:	20001076 	.word	0x20001076

0800b674 <cleanListBtcDevices>:
{
 800b674:	b570      	push	{r4, r5, r6, lr}
 800b676:	4c07      	ldr	r4, [pc, #28]	; (800b694 <cleanListBtcDevices+0x20>)
 800b678:	0025      	movs	r5, r4
 800b67a:	35c8      	adds	r5, #200	; 0xc8
    memset(listBtcDevices[i], 0, MAX_SSID_SIZE);
 800b67c:	2214      	movs	r2, #20
 800b67e:	2100      	movs	r1, #0
 800b680:	0020      	movs	r0, r4
 800b682:	f008 fb6f 	bl	8013d64 <memset>
 800b686:	3414      	adds	r4, #20
  for (i = 0; i < MAX_SCAN_NUMBER_DEVICES; i++)
 800b688:	42ac      	cmp	r4, r5
 800b68a:	d1f7      	bne.n	800b67c <cleanListBtcDevices+0x8>
  indexBtcDevice = 0;
 800b68c:	4b02      	ldr	r3, [pc, #8]	; (800b698 <cleanListBtcDevices+0x24>)
 800b68e:	2200      	movs	r2, #0
 800b690:	701a      	strb	r2, [r3, #0]
}
 800b692:	bd70      	pop	{r4, r5, r6, pc}
 800b694:	200017ac 	.word	0x200017ac
 800b698:	200017a8 	.word	0x200017a8

0800b69c <copyDataToListBtcDevice>:
{
 800b69c:	b570      	push	{r4, r5, r6, lr}
 800b69e:	0005      	movs	r5, r0
 800b6a0:	000a      	movs	r2, r1
	memcpy(listBtcDevices[indexBtcDevice], (char *)pStr, (size_t)(lenStr));
 800b6a2:	4e06      	ldr	r6, [pc, #24]	; (800b6bc <copyDataToListBtcDevice+0x20>)
 800b6a4:	7834      	ldrb	r4, [r6, #0]
 800b6a6:	00a3      	lsls	r3, r4, #2
 800b6a8:	191b      	adds	r3, r3, r4
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4804      	ldr	r0, [pc, #16]	; (800b6c0 <copyDataToListBtcDevice+0x24>)
 800b6ae:	1818      	adds	r0, r3, r0
 800b6b0:	0029      	movs	r1, r5
 800b6b2:	f008 fb4e 	bl	8013d52 <memcpy>
  indexBtcDevice++;
 800b6b6:	3401      	adds	r4, #1
 800b6b8:	7034      	strb	r4, [r6, #0]
}
 800b6ba:	bd70      	pop	{r4, r5, r6, pc}
 800b6bc:	200017a8 	.word	0x200017a8
 800b6c0:	200017ac 	.word	0x200017ac

0800b6c4 <RegisterModuleCLICommands>:
{
 800b6c4:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &btGetInfoCommandDefinition);
 800b6c6:	480c      	ldr	r0, [pc, #48]	; (800b6f8 <RegisterModuleCLICommands+0x34>)
 800b6c8:	f002 fdc4 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btResetCommandDefinition);
 800b6cc:	480b      	ldr	r0, [pc, #44]	; (800b6fc <RegisterModuleCLICommands+0x38>)
 800b6ce:	f002 fdc1 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btDownloadScriptCommandDefinition);
 800b6d2:	480b      	ldr	r0, [pc, #44]	; (800b700 <RegisterModuleCLICommands+0x3c>)
 800b6d4:	f002 fdbe 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btRunScriptCommandDefinition);
 800b6d8:	480a      	ldr	r0, [pc, #40]	; (800b704 <RegisterModuleCLICommands+0x40>)
 800b6da:	f002 fdbb 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btVspModeCommandDefinition);
 800b6de:	480a      	ldr	r0, [pc, #40]	; (800b708 <RegisterModuleCLICommands+0x44>)
 800b6e0:	f002 fdb8 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btDeleteScriptCommandDefinition);
 800b6e4:	4809      	ldr	r0, [pc, #36]	; (800b70c <RegisterModuleCLICommands+0x48>)
 800b6e6:	f002 fdb5 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btScanCommandDefinition);
 800b6ea:	4809      	ldr	r0, [pc, #36]	; (800b710 <RegisterModuleCLICommands+0x4c>)
 800b6ec:	f002 fdb2 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &btConnectCommandDefinition);
 800b6f0:	4808      	ldr	r0, [pc, #32]	; (800b714 <RegisterModuleCLICommands+0x50>)
 800b6f2:	f002 fdaf 	bl	800e254 <FreeRTOS_CLIRegisterCommand>
}
 800b6f6:	bd10      	pop	{r4, pc}
 800b6f8:	0801b4b4 	.word	0x0801b4b4
 800b6fc:	0801b4dc 	.word	0x0801b4dc
 800b700:	0801b484 	.word	0x0801b484
 800b704:	0801b514 	.word	0x0801b514
 800b708:	0801b5b8 	.word	0x0801b5b8
 800b70c:	0801b390 	.word	0x0801b390
 800b710:	0801b560 	.word	0x0801b560
 800b714:	0801b348 	.word	0x0801b348

0800b718 <btEnableHandshakeUart>:
{
 800b718:	b510      	push	{r4, lr}
	__HAL_UART_HWCONTROL_CTS_ENABLE(GetUart(PORT_BTC_CONN));
 800b71a:	2006      	movs	r0, #6
 800b71c:	f002 fbd0 	bl	800dec0 <GetUart>
 800b720:	6802      	ldr	r2, [r0, #0]
 800b722:	6893      	ldr	r3, [r2, #8]
 800b724:	2480      	movs	r4, #128	; 0x80
 800b726:	00a4      	lsls	r4, r4, #2
 800b728:	4323      	orrs	r3, r4
 800b72a:	6093      	str	r3, [r2, #8]
 800b72c:	2006      	movs	r0, #6
 800b72e:	f002 fbc7 	bl	800dec0 <GetUart>
 800b732:	6983      	ldr	r3, [r0, #24]
 800b734:	431c      	orrs	r4, r3
 800b736:	6184      	str	r4, [r0, #24]
	__HAL_UART_HWCONTROL_RTS_ENABLE(GetUart(PORT_BTC_CONN));
 800b738:	2006      	movs	r0, #6
 800b73a:	f002 fbc1 	bl	800dec0 <GetUart>
 800b73e:	6802      	ldr	r2, [r0, #0]
 800b740:	6893      	ldr	r3, [r2, #8]
 800b742:	2480      	movs	r4, #128	; 0x80
 800b744:	0064      	lsls	r4, r4, #1
 800b746:	4323      	orrs	r3, r4
 800b748:	6093      	str	r3, [r2, #8]
 800b74a:	2006      	movs	r0, #6
 800b74c:	f002 fbb8 	bl	800dec0 <GetUart>
 800b750:	6983      	ldr	r3, [r0, #24]
 800b752:	431c      	orrs	r4, r3
 800b754:	6184      	str	r4, [r0, #24]
}
 800b756:	bd10      	pop	{r4, pc}

0800b758 <btDisableHandshakeUart>:
{
 800b758:	b510      	push	{r4, lr}
	__HAL_UART_HWCONTROL_CTS_DISABLE(GetUart(PORT_BTC_CONN));
 800b75a:	2006      	movs	r0, #6
 800b75c:	f002 fbb0 	bl	800dec0 <GetUart>
 800b760:	6802      	ldr	r2, [r0, #0]
 800b762:	6893      	ldr	r3, [r2, #8]
 800b764:	4c0b      	ldr	r4, [pc, #44]	; (800b794 <btDisableHandshakeUart+0x3c>)
 800b766:	4023      	ands	r3, r4
 800b768:	6093      	str	r3, [r2, #8]
 800b76a:	2006      	movs	r0, #6
 800b76c:	f002 fba8 	bl	800dec0 <GetUart>
 800b770:	6983      	ldr	r3, [r0, #24]
 800b772:	401c      	ands	r4, r3
 800b774:	6184      	str	r4, [r0, #24]
	__HAL_UART_HWCONTROL_RTS_DISABLE(GetUart(PORT_BTC_CONN));
 800b776:	2006      	movs	r0, #6
 800b778:	f002 fba2 	bl	800dec0 <GetUart>
 800b77c:	6802      	ldr	r2, [r0, #0]
 800b77e:	6893      	ldr	r3, [r2, #8]
 800b780:	4c05      	ldr	r4, [pc, #20]	; (800b798 <btDisableHandshakeUart+0x40>)
 800b782:	4023      	ands	r3, r4
 800b784:	6093      	str	r3, [r2, #8]
 800b786:	2006      	movs	r0, #6
 800b788:	f002 fb9a 	bl	800dec0 <GetUart>
 800b78c:	6983      	ldr	r3, [r0, #24]
 800b78e:	401c      	ands	r4, r3
 800b790:	6184      	str	r4, [r0, #24]
}
 800b792:	bd10      	pop	{r4, pc}
 800b794:	fffffdff 	.word	0xfffffdff
 800b798:	fffffeff 	.word	0xfffffeff

0800b79c <btWaitEventFinishTransmission>:
{
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	b082      	sub	sp, #8
		tEvBits = xEventGroupWaitBits(handleUartTerminal, EVENT_CLOSE_CONNECTION_BIT, pdTRUE, pdFALSE, 10000);
 800b7a0:	4e08      	ldr	r6, [pc, #32]	; (800b7c4 <btWaitEventFinishTransmission+0x28>)
 800b7a2:	4d09      	ldr	r5, [pc, #36]	; (800b7c8 <btWaitEventFinishTransmission+0x2c>)
	} while(H23R0_BTC_CLOSE_CONNECTION != stateTransmitBtToMcu);
 800b7a4:	4c09      	ldr	r4, [pc, #36]	; (800b7cc <btWaitEventFinishTransmission+0x30>)
		tEvBits = xEventGroupWaitBits(handleUartTerminal, EVENT_CLOSE_CONNECTION_BIT, pdTRUE, pdFALSE, 10000);
 800b7a6:	6830      	ldr	r0, [r6, #0]
 800b7a8:	9500      	str	r5, [sp, #0]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	f002 feb4 	bl	800e51c <xEventGroupWaitBits>
	} while(H23R0_BTC_CLOSE_CONNECTION != stateTransmitBtToMcu);
 800b7b4:	7823      	ldrb	r3, [r4, #0]
 800b7b6:	2bff      	cmp	r3, #255	; 0xff
 800b7b8:	d1f5      	bne.n	800b7a6 <btWaitEventFinishTransmission+0xa>
	stateTransmitBtToMcu = 0;
 800b7ba:	4b04      	ldr	r3, [pc, #16]	; (800b7cc <btWaitEventFinishTransmission+0x30>)
 800b7bc:	2200      	movs	r2, #0
 800b7be:	701a      	strb	r2, [r3, #0]
}
 800b7c0:	b002      	add	sp, #8
 800b7c2:	bd70      	pop	{r4, r5, r6, pc}
 800b7c4:	200017a4 	.word	0x200017a4
 800b7c8:	00002710 	.word	0x00002710
 800b7cc:	20001876 	.word	0x20001876

0800b7d0 <btScanCommand>:
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE btScanCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b7d0:	b570      	push	{r4, r5, r6, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800b7d6:	d101      	bne.n	800b7dc <btScanCommand+0xc>
 800b7d8:	b672      	cpsid	i
 800b7da:	e7fe      	b.n	800b7da <btScanCommand+0xa>

	/* Scan */
  stateScanDevices = 0;
 800b7dc:	2600      	movs	r6, #0
 800b7de:	4b19      	ldr	r3, [pc, #100]	; (800b844 <btScanCommand+0x74>)
 800b7e0:	701e      	strb	r6, [r3, #0]
  cleanListBtcDevices();
 800b7e2:	f7ff ff47 	bl	800b674 <cleanListBtcDevices>
	sprintf( (char *)pcWriteBuffer, "Scanning nearby bluetooth devices..\r\n\nIndex\tRSSI\tName\r\n\r\n");
 800b7e6:	223a      	movs	r2, #58	; 0x3a
 800b7e8:	4917      	ldr	r1, [pc, #92]	; (800b848 <btScanCommand+0x78>)
 800b7ea:	0020      	movs	r0, r4
 800b7ec:	f008 fab1 	bl	8013d52 <memcpy>
  writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800b7f0:	0020      	movs	r0, r4
 800b7f2:	f7f4 fc91 	bl	8000118 <strlen>
 800b7f6:	b282      	uxth	r2, r0
 800b7f8:	4b14      	ldr	r3, [pc, #80]	; (800b84c <btScanCommand+0x7c>)
 800b7fa:	7818      	ldrb	r0, [r3, #0]
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	425b      	negs	r3, r3
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	3333      	adds	r3, #51	; 0x33
 800b804:	0021      	movs	r1, r4
 800b806:	f002 fb7d 	bl	800df04 <writePxMutex>
  /* clean terminal output */
  memset((char *)pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800b80a:	2599      	movs	r5, #153	; 0x99
 800b80c:	00ad      	lsls	r5, r5, #2
 800b80e:	002a      	movs	r2, r5
 800b810:	2100      	movs	r1, #0
 800b812:	0020      	movs	r0, r4
 800b814:	f008 faa6 	bl	8013d64 <memset>
	/* Send a control message to BT900 to run inquiry new bluetooth devices */
	SendMessageFromPort(PORT_BTC_CONN, 0, 0, CODE_H23Rx_SCAN_INQUIRE, 0);
 800b818:	9600      	str	r6, [sp, #0]
 800b81a:	4b0d      	ldr	r3, [pc, #52]	; (800b850 <btScanCommand+0x80>)
 800b81c:	2200      	movs	r2, #0
 800b81e:	2100      	movs	r1, #0
 800b820:	2006      	movs	r0, #6
 800b822:	f7fd fd27 	bl	8009274 <SendMessageFromPort>
  /* waiting event finish transmission */
	btWaitEventFinishTransmission();
 800b826:	f7ff ffb9 	bl	800b79c <btWaitEventFinishTransmission>
  /* clean terminal output */
  memset((char *)pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800b82a:	002a      	movs	r2, r5
 800b82c:	2100      	movs	r1, #0
 800b82e:	0020      	movs	r0, r4
 800b830:	f008 fa98 	bl	8013d64 <memset>
	sprintf( ( char * ) pcWriteBuffer, "\r\n");
 800b834:	2203      	movs	r2, #3
 800b836:	4907      	ldr	r1, [pc, #28]	; (800b854 <btScanCommand+0x84>)
 800b838:	0020      	movs	r0, r4
 800b83a:	f008 fa8a 	bl	8013d52 <memcpy>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800b83e:	2000      	movs	r0, #0
 800b840:	b002      	add	sp, #8
 800b842:	bd70      	pop	{r4, r5, r6, pc}
 800b844:	20001875 	.word	0x20001875
 800b848:	0801b524 	.word	0x0801b524
 800b84c:	20000a77 	.word	0x20000a77
 800b850:	000006b6 	.word	0x000006b6
 800b854:	0801a6e4 	.word	0x0801a6e4

0800b858 <btConnectCommand>:

static portBASE_TYPE btConnectCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	0004      	movs	r4, r0
 800b85e:	0010      	movs	r0, r2
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800b860:	2300      	movs	r3, #0
 800b862:	9303      	str	r3, [sp, #12]
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800b864:	2c00      	cmp	r4, #0
 800b866:	d04c      	beq.n	800b902 <btConnectCommand+0xaa>

	if (1 == stateScanDevices)
 800b868:	4b2e      	ldr	r3, [pc, #184]	; (800b924 <btConnectCommand+0xcc>)
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d150      	bne.n	800b912 <btConnectCommand+0xba>
	{
		/* Obtain the 1st parameter string define VSP mode on BT900 */
		pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800b870:	aa03      	add	r2, sp, #12
 800b872:	2101      	movs	r1, #1
 800b874:	f002 fd8c 	bl	800e390 <FreeRTOS_CLIGetParameter>
 800b878:	0006      	movs	r6, r0
		sprintf((char *)pcWriteBuffer, "Connecting to bluetooth device %s:\r\n", pcParameterString1);
 800b87a:	0002      	movs	r2, r0
 800b87c:	492a      	ldr	r1, [pc, #168]	; (800b928 <btConnectCommand+0xd0>)
 800b87e:	0020      	movs	r0, r4
 800b880:	f008 fc6a 	bl	8014158 <sprintf>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800b884:	0020      	movs	r0, r4
 800b886:	f7f4 fc47 	bl	8000118 <strlen>
 800b88a:	b282      	uxth	r2, r0
 800b88c:	4b27      	ldr	r3, [pc, #156]	; (800b92c <btConnectCommand+0xd4>)
 800b88e:	7818      	ldrb	r0, [r3, #0]
 800b890:	2301      	movs	r3, #1
 800b892:	425b      	negs	r3, r3
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	3333      	adds	r3, #51	; 0x33
 800b898:	0021      	movs	r1, r4
 800b89a:	f002 fb33 	bl	800df04 <writePxMutex>
	  /* clean terminal output */
	  memset((char *)pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800b89e:	2299      	movs	r2, #153	; 0x99
 800b8a0:	0092      	lsls	r2, r2, #2
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	0020      	movs	r0, r4
 800b8a6:	f008 fa5d 	bl	8013d64 <memset>

		lenPar = strlen((char *)pcParameterString1);
 800b8aa:	0030      	movs	r0, r6
 800b8ac:	f7f4 fc34 	bl	8000118 <strlen>
 800b8b0:	0005      	movs	r5, r0
		if ( ('[' == pcParameterString1[0]) && (']' == pcParameterString1[lenPar - 1]) )
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	56f3      	ldrsb	r3, [r6, r3]
 800b8b6:	2b5b      	cmp	r3, #91	; 0x5b
 800b8b8:	d125      	bne.n	800b906 <btConnectCommand+0xae>
 800b8ba:	b2c2      	uxtb	r2, r0
 800b8bc:	18b3      	adds	r3, r6, r2
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	b25b      	sxtb	r3, r3
 800b8c4:	2b5d      	cmp	r3, #93	; 0x5d
 800b8c6:	d11e      	bne.n	800b906 <btConnectCommand+0xae>
		{
			/* Send a control message to BT900 to run inquiry new bluetooth devices */
			memcpy(&messageParams[0], &pcParameterString1[1], lenPar - 2);
 800b8c8:	3a02      	subs	r2, #2
 800b8ca:	1c71      	adds	r1, r6, #1
 800b8cc:	4818      	ldr	r0, [pc, #96]	; (800b930 <btConnectCommand+0xd8>)
 800b8ce:	f008 fa40 	bl	8013d52 <memcpy>
			SendMessageFromPort(PORT_BTC_CONN, 0, 0, CODE_H23Rx_CONNECT_INQUIRE, lenPar - 2);
 800b8d2:	b2eb      	uxtb	r3, r5
 800b8d4:	3b02      	subs	r3, #2
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	4b16      	ldr	r3, [pc, #88]	; (800b934 <btConnectCommand+0xdc>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	0011      	movs	r1, r2
 800b8e0:	2006      	movs	r0, #6
 800b8e2:	f7fd fcc7 	bl	8009274 <SendMessageFromPort>
			/* waiting event finish transmission */
			btWaitEventFinishTransmission();
 800b8e6:	f7ff ff59 	bl	800b79c <btWaitEventFinishTransmission>
      /* clean terminal output */
      memset((char *)pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800b8ea:	2299      	movs	r2, #153	; 0x99
 800b8ec:	0092      	lsls	r2, r2, #2
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	0020      	movs	r0, r4
 800b8f2:	f008 fa37 	bl	8013d64 <memset>
			sprintf((char *)pcWriteBuffer, "\r\n");
 800b8f6:	2203      	movs	r2, #3
 800b8f8:	490f      	ldr	r1, [pc, #60]	; (800b938 <btConnectCommand+0xe0>)
 800b8fa:	0020      	movs	r0, r4
 800b8fc:	f008 fa29 	bl	8013d52 <memcpy>
 800b900:	e00c      	b.n	800b91c <btConnectCommand+0xc4>
	configASSERT( pcWriteBuffer );
 800b902:	b672      	cpsid	i
 800b904:	e7fe      	b.n	800b904 <btConnectCommand+0xac>
		}
		else
		{
			sprintf((char *)pcWriteBuffer, "Wrong input parameter\r\n");
 800b906:	2218      	movs	r2, #24
 800b908:	490c      	ldr	r1, [pc, #48]	; (800b93c <btConnectCommand+0xe4>)
 800b90a:	0020      	movs	r0, r4
 800b90c:	f008 fa21 	bl	8013d52 <memcpy>
 800b910:	e004      	b.n	800b91c <btConnectCommand+0xc4>
		}
	}
	else
	{
		sprintf((char *)pcWriteBuffer, "Must call \"scan\" command first\r\n");
 800b912:	2221      	movs	r2, #33	; 0x21
 800b914:	490a      	ldr	r1, [pc, #40]	; (800b940 <btConnectCommand+0xe8>)
 800b916:	0020      	movs	r0, r4
 800b918:	f008 fa1b 	bl	8013d52 <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800b91c:	2000      	movs	r0, #0
 800b91e:	b004      	add	sp, #16
 800b920:	bd70      	pop	{r4, r5, r6, pc}
 800b922:	46c0      	nop			; (mov r8, r8)
 800b924:	20001875 	.word	0x20001875
 800b928:	0801b2e4 	.word	0x0801b2e4
 800b92c:	20000a77 	.word	0x20000a77
 800b930:	20000f38 	.word	0x20000f38
 800b934:	000006b9 	.word	0x000006b9
 800b938:	0801a6e4 	.word	0x0801a6e4
 800b93c:	0801b30c 	.word	0x0801b30c
 800b940:	0801b324 	.word	0x0801b324

0800b944 <btSendMsgToTerminal>:
{
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	0005      	movs	r5, r0
 800b94a:	000e      	movs	r6, r1
	tOutput = FreeRTOS_CLIGetOutputBuffer();
 800b94c:	f002 fd1c 	bl	800e388 <FreeRTOS_CLIGetOutputBuffer>
 800b950:	0004      	movs	r4, r0
	memcpy(tOutput, (char *)pStr, (size_t)(lenStr));
 800b952:	0032      	movs	r2, r6
 800b954:	0029      	movs	r1, r5
 800b956:	f008 f9fc 	bl	8013d52 <memcpy>
  writePxMutex(PcPort, (char *)tOutput, strlen((char *)tOutput), cmd50ms, HAL_MAX_DELAY);
 800b95a:	0020      	movs	r0, r4
 800b95c:	f7f4 fbdc 	bl	8000118 <strlen>
 800b960:	b282      	uxth	r2, r0
 800b962:	4b08      	ldr	r3, [pc, #32]	; (800b984 <btSendMsgToTerminal+0x40>)
 800b964:	7818      	ldrb	r0, [r3, #0]
 800b966:	2301      	movs	r3, #1
 800b968:	425b      	negs	r3, r3
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	3333      	adds	r3, #51	; 0x33
 800b96e:	0021      	movs	r1, r4
 800b970:	f002 fac8 	bl	800df04 <writePxMutex>
  memset((char *)tOutput, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800b974:	2299      	movs	r2, #153	; 0x99
 800b976:	0092      	lsls	r2, r2, #2
 800b978:	2100      	movs	r1, #0
 800b97a:	0020      	movs	r0, r4
 800b97c:	f008 f9f2 	bl	8013d64 <memset>
}
 800b980:	b002      	add	sp, #8
 800b982:	bd70      	pop	{r4, r5, r6, pc}
 800b984:	20000a77 	.word	0x20000a77

0800b988 <btSendMsgToModule>:
{
 800b988:	b570      	push	{r4, r5, r6, lr}
 800b98a:	0005      	movs	r5, r0
 800b98c:	0014      	movs	r4, r2
	if (dst) {
 800b98e:	2800      	cmp	r0, #0
 800b990:	d100      	bne.n	800b994 <btSendMsgToModule+0xc>
}
 800b992:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(messageParams, (char *)pStr, (size_t)lenStr);
 800b994:	4804      	ldr	r0, [pc, #16]	; (800b9a8 <btSendMsgToModule+0x20>)
 800b996:	f008 f9dc 	bl	8013d52 <memcpy>
		SendMessageToModule(dst, CODE_CLI_RESPONSE, (size_t)lenStr);
 800b99a:	b2a2      	uxth	r2, r4
 800b99c:	2118      	movs	r1, #24
 800b99e:	0028      	movs	r0, r5
 800b9a0:	f7fd fe90 	bl	80096c4 <SendMessageToModule>
}
 800b9a4:	e7f5      	b.n	800b992 <btSendMsgToModule+0xa>
 800b9a6:	46c0      	nop			; (mov r8, r8)
 800b9a8:	20000f38 	.word	0x20000f38

0800b9ac <sendListBtcDevices>:
{
 800b9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	0007      	movs	r7, r0
 800b9b2:	9101      	str	r1, [sp, #4]
  for(i = 0; i < indexBtcDevice; i++)
 800b9b4:	4b16      	ldr	r3, [pc, #88]	; (800ba10 <sendListBtcDevices+0x64>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d027      	beq.n	800ba0c <sendListBtcDevices+0x60>
 800b9bc:	2400      	movs	r4, #0
 800b9be:	4e14      	ldr	r6, [pc, #80]	; (800ba10 <sendListBtcDevices+0x64>)
 800b9c0:	e011      	b.n	800b9e6 <sendListBtcDevices+0x3a>
      btSendMsgToTerminal(listBtcDevices[i], strlen((char *)listBtcDevices[i]));
 800b9c2:	00a5      	lsls	r5, r4, #2
 800b9c4:	192d      	adds	r5, r5, r4
 800b9c6:	00ad      	lsls	r5, r5, #2
 800b9c8:	4b12      	ldr	r3, [pc, #72]	; (800ba14 <sendListBtcDevices+0x68>)
 800b9ca:	469c      	mov	ip, r3
 800b9cc:	4465      	add	r5, ip
 800b9ce:	0028      	movs	r0, r5
 800b9d0:	f7f4 fba2 	bl	8000118 <strlen>
 800b9d4:	b2c1      	uxtb	r1, r0
 800b9d6:	0028      	movs	r0, r5
 800b9d8:	f7ff ffb4 	bl	800b944 <btSendMsgToTerminal>
  for(i = 0; i < indexBtcDevice; i++)
 800b9dc:	3401      	adds	r4, #1
 800b9de:	b2e4      	uxtb	r4, r4
 800b9e0:	7833      	ldrb	r3, [r6, #0]
 800b9e2:	42a3      	cmp	r3, r4
 800b9e4:	d912      	bls.n	800ba0c <sendListBtcDevices+0x60>
    if (H23Rx_SEND_TO_TERMINAL_APP == type)
 800b9e6:	2f00      	cmp	r7, #0
 800b9e8:	d0eb      	beq.n	800b9c2 <sendListBtcDevices+0x16>
    else if (H23Rx_SEND_TO_OTHER_DEVICES == type)
 800b9ea:	2f01      	cmp	r7, #1
 800b9ec:	d1f6      	bne.n	800b9dc <sendListBtcDevices+0x30>
      btSendMsgToModule(dst, listBtcDevices[i], strlen((char *)listBtcDevices[i]));
 800b9ee:	00a5      	lsls	r5, r4, #2
 800b9f0:	192d      	adds	r5, r5, r4
 800b9f2:	00ad      	lsls	r5, r5, #2
 800b9f4:	4b07      	ldr	r3, [pc, #28]	; (800ba14 <sendListBtcDevices+0x68>)
 800b9f6:	469c      	mov	ip, r3
 800b9f8:	4465      	add	r5, ip
 800b9fa:	0028      	movs	r0, r5
 800b9fc:	f7f4 fb8c 	bl	8000118 <strlen>
 800ba00:	b2c2      	uxtb	r2, r0
 800ba02:	0029      	movs	r1, r5
 800ba04:	9801      	ldr	r0, [sp, #4]
 800ba06:	f7ff ffbf 	bl	800b988 <btSendMsgToModule>
 800ba0a:	e7e7      	b.n	800b9dc <sendListBtcDevices+0x30>
}
 800ba0c:	b003      	add	sp, #12
 800ba0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba10:	200017a8 	.word	0x200017a8
 800ba14:	200017ac 	.word	0x200017ac

0800ba18 <ControlBluetoothTask>:
{
 800ba18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba1a:	b08f      	sub	sp, #60	; 0x3c
  uint8_t tMessage[MAX_MESSAGE_SIZE] = {0};
 800ba1c:	2238      	movs	r2, #56	; 0x38
 800ba1e:	2100      	movs	r1, #0
 800ba20:	4668      	mov	r0, sp
 800ba22:	f008 f99f 	bl	8013d64 <memset>
    code_field += (cMessage[PORT_BTC_CONN-1][3] - 0x30) * 10;
 800ba26:	4c69      	ldr	r4, [pc, #420]	; (800bbcc <ControlBluetoothTask+0x1b4>)
    switch(code_field)
 800ba28:	4d69      	ldr	r5, [pc, #420]	; (800bbd0 <ControlBluetoothTask+0x1b8>)
        if (CLI == portStatus[PcPort])
 800ba2a:	4e6a      	ldr	r6, [pc, #424]	; (800bbd4 <ControlBluetoothTask+0x1bc>)
 800ba2c:	e01b      	b.n	800ba66 <ControlBluetoothTask+0x4e>
        IND_ON();
 800ba2e:	2180      	movs	r1, #128	; 0x80
 800ba30:	2090      	movs	r0, #144	; 0x90
 800ba32:	2201      	movs	r2, #1
 800ba34:	0109      	lsls	r1, r1, #4
 800ba36:	05c0      	lsls	r0, r0, #23
 800ba38:	f006 f966 	bl	8011d08 <HAL_GPIO_WritePin>
		memset(tMessage, 0, (size_t) MAX_MESSAGE_SIZE);
 800ba3c:	2238      	movs	r2, #56	; 0x38
 800ba3e:	2100      	movs	r1, #0
 800ba40:	4668      	mov	r0, sp
 800ba42:	f008 f98f 	bl	8013d64 <memset>
		memset(cMessage[PORT_BTC_CONN-1], 0, (size_t) MAX_MESSAGE_SIZE);
 800ba46:	2238      	movs	r2, #56	; 0x38
 800ba48:	2100      	movs	r1, #0
 800ba4a:	4863      	ldr	r0, [pc, #396]	; (800bbd8 <ControlBluetoothTask+0x1c0>)
 800ba4c:	f008 f98a 	bl	8013d64 <memset>
		messageLength[PORT_BTC_CONN-1] = 0;
 800ba50:	4b62      	ldr	r3, [pc, #392]	; (800bbdc <ControlBluetoothTask+0x1c4>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	715a      	strb	r2, [r3, #5]
    if ((portStatus[PORT_BTC_CONN] != STREAM) &&
 800ba56:	4b5f      	ldr	r3, [pc, #380]	; (800bbd4 <ControlBluetoothTask+0x1bc>)
        (portStatus[PORT_BTC_CONN] != CLI) &&
 800ba58:	799b      	ldrb	r3, [r3, #6]
    if ((portStatus[PORT_BTC_CONN] != STREAM) &&
 800ba5a:	3b02      	subs	r3, #2
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d900      	bls.n	800ba62 <ControlBluetoothTask+0x4a>
 800ba60:	e0a9      	b.n	800bbb6 <ControlBluetoothTask+0x19e>
    taskYIELD();
 800ba62:	f004 fb69 	bl	8010138 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800ba66:	2101      	movs	r1, #1
 800ba68:	4249      	negs	r1, r1
 800ba6a:	2001      	movs	r0, #1
 800ba6c:	f004 f88a 	bl	800fb84 <ulTaskNotifyTake>
    code_field += (cMessage[PORT_BTC_CONN-1][3] - 0x30) * 10;
 800ba70:	231c      	movs	r3, #28
 800ba72:	33ff      	adds	r3, #255	; 0xff
 800ba74:	5ce3      	ldrb	r3, [r4, r3]
 800ba76:	3b30      	subs	r3, #48	; 0x30
 800ba78:	009a      	lsls	r2, r3, #2
 800ba7a:	189b      	adds	r3, r3, r2
 800ba7c:	005b      	lsls	r3, r3, #1
    code_field = cMessage[PORT_BTC_CONN-1][4] - 0x30;
 800ba7e:	228e      	movs	r2, #142	; 0x8e
 800ba80:	0052      	lsls	r2, r2, #1
 800ba82:	5ca2      	ldrb	r2, [r4, r2]
 800ba84:	3a30      	subs	r2, #48	; 0x30
    code_field += (cMessage[PORT_BTC_CONN-1][3] - 0x30) * 10;
 800ba86:	189b      	adds	r3, r3, r2
    code_field += (cMessage[PORT_BTC_CONN-1][2] - 0x30) * 100;
 800ba88:	228d      	movs	r2, #141	; 0x8d
 800ba8a:	0052      	lsls	r2, r2, #1
 800ba8c:	5ca2      	ldrb	r2, [r4, r2]
 800ba8e:	3a30      	subs	r2, #48	; 0x30
 800ba90:	2164      	movs	r1, #100	; 0x64
 800ba92:	434a      	muls	r2, r1
 800ba94:	189b      	adds	r3, r3, r2
    code_field += (cMessage[PORT_BTC_CONN-1][1] - 0x30) * 1000;
 800ba96:	221a      	movs	r2, #26
 800ba98:	32ff      	adds	r2, #255	; 0xff
 800ba9a:	5ca1      	ldrb	r1, [r4, r2]
 800ba9c:	3930      	subs	r1, #48	; 0x30
 800ba9e:	22fa      	movs	r2, #250	; 0xfa
 800baa0:	0092      	lsls	r2, r2, #2
 800baa2:	434a      	muls	r2, r1
 800baa4:	189b      	adds	r3, r3, r2
    switch(code_field)
 800baa6:	4a4e      	ldr	r2, [pc, #312]	; (800bbe0 <ControlBluetoothTask+0x1c8>)
 800baa8:	4694      	mov	ip, r2
 800baaa:	4463      	add	r3, ip
 800baac:	b29a      	uxth	r2, r3
 800baae:	2a10      	cmp	r2, #16
 800bab0:	d8c4      	bhi.n	800ba3c <ControlBluetoothTask+0x24>
 800bab2:	0093      	lsls	r3, r2, #2
 800bab4:	58eb      	ldr	r3, [r5, r3]
 800bab6:	469f      	mov	pc, r3
        IND_OFF();
 800bab8:	2180      	movs	r1, #128	; 0x80
 800baba:	2090      	movs	r0, #144	; 0x90
 800babc:	2200      	movs	r2, #0
 800babe:	0109      	lsls	r1, r1, #4
 800bac0:	05c0      	lsls	r0, r0, #23
 800bac2:	f006 f921 	bl	8011d08 <HAL_GPIO_WritePin>
        break;
 800bac6:	e7b9      	b.n	800ba3c <ControlBluetoothTask+0x24>
      	stateTransmitBtToMcu = 0;
 800bac8:	4b46      	ldr	r3, [pc, #280]	; (800bbe4 <ControlBluetoothTask+0x1cc>)
 800baca:	2200      	movs	r2, #0
 800bacc:	701a      	strb	r2, [r3, #0]
      	btSendMsgToTerminal(&cMessage[PORT_BTC_CONN-1][5], messageLength[PORT_BTC_CONN-1]-4);
 800bace:	4b43      	ldr	r3, [pc, #268]	; (800bbdc <ControlBluetoothTask+0x1c4>)
 800bad0:	7959      	ldrb	r1, [r3, #5]
 800bad2:	3904      	subs	r1, #4
 800bad4:	b2c9      	uxtb	r1, r1
 800bad6:	4844      	ldr	r0, [pc, #272]	; (800bbe8 <ControlBluetoothTask+0x1d0>)
 800bad8:	f7ff ff34 	bl	800b944 <btSendMsgToTerminal>
      	break;
 800badc:	e7ae      	b.n	800ba3c <ControlBluetoothTask+0x24>
        stateScanDevices = 1;
 800bade:	4b43      	ldr	r3, [pc, #268]	; (800bbec <ControlBluetoothTask+0x1d4>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	701a      	strb	r2, [r3, #0]
      	stateTransmitBtToMcu = 0;
 800bae4:	4b3f      	ldr	r3, [pc, #252]	; (800bbe4 <ControlBluetoothTask+0x1cc>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	701a      	strb	r2, [r3, #0]
      	copyDataToListBtcDevice(&cMessage[PORT_BTC_CONN-1][5], messageLength[PORT_BTC_CONN-1]-4);
 800baea:	4b3c      	ldr	r3, [pc, #240]	; (800bbdc <ControlBluetoothTask+0x1c4>)
 800baec:	7959      	ldrb	r1, [r3, #5]
 800baee:	3904      	subs	r1, #4
 800baf0:	b2c9      	uxtb	r1, r1
 800baf2:	483d      	ldr	r0, [pc, #244]	; (800bbe8 <ControlBluetoothTask+0x1d0>)
 800baf4:	f7ff fdd2 	bl	800b69c <copyDataToListBtcDevice>
        break;
 800baf8:	e7a0      	b.n	800ba3c <ControlBluetoothTask+0x24>
        stateScanDevices = 0;
 800bafa:	2300      	movs	r3, #0
 800bafc:	4a3b      	ldr	r2, [pc, #236]	; (800bbec <ControlBluetoothTask+0x1d4>)
 800bafe:	7013      	strb	r3, [r2, #0]
      	stateTransmitBtToMcu = 0;
 800bb00:	4a38      	ldr	r2, [pc, #224]	; (800bbe4 <ControlBluetoothTask+0x1cc>)
 800bb02:	7013      	strb	r3, [r2, #0]
      	btSendMsgToTerminal(&cMessage[PORT_BTC_CONN-1][5], messageLength[PORT_BTC_CONN-1]-4);
 800bb04:	4b35      	ldr	r3, [pc, #212]	; (800bbdc <ControlBluetoothTask+0x1c4>)
 800bb06:	7959      	ldrb	r1, [r3, #5]
 800bb08:	3904      	subs	r1, #4
 800bb0a:	b2c9      	uxtb	r1, r1
 800bb0c:	4836      	ldr	r0, [pc, #216]	; (800bbe8 <ControlBluetoothTask+0x1d0>)
 800bb0e:	f7ff ff19 	bl	800b944 <btSendMsgToTerminal>
        break;
 800bb12:	e793      	b.n	800ba3c <ControlBluetoothTask+0x24>
      	stateTransmitBtToMcu = 0;
 800bb14:	4b33      	ldr	r3, [pc, #204]	; (800bbe4 <ControlBluetoothTask+0x1cc>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	701a      	strb	r2, [r3, #0]
      	if ('0' == cMessage[PORT_BTC_CONN-1][5])
 800bb1a:	4a2c      	ldr	r2, [pc, #176]	; (800bbcc <ControlBluetoothTask+0x1b4>)
 800bb1c:	231e      	movs	r3, #30
 800bb1e:	33ff      	adds	r3, #255	; 0xff
 800bb20:	5cd3      	ldrb	r3, [r2, r3]
 800bb22:	2b30      	cmp	r3, #48	; 0x30
 800bb24:	d013      	beq.n	800bb4e <ControlBluetoothTask+0x136>
					sprintf((char *)&tMessage[0], "Connection failed ...\r\n");
 800bb26:	4669      	mov	r1, sp
 800bb28:	4b31      	ldr	r3, [pc, #196]	; (800bbf0 <ControlBluetoothTask+0x1d8>)
 800bb2a:	000a      	movs	r2, r1
 800bb2c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800bb2e:	c283      	stmia	r2!, {r0, r1, r7}
 800bb30:	cb83      	ldmia	r3!, {r0, r1, r7}
 800bb32:	c283      	stmia	r2!, {r0, r1, r7}
        if (CLI == portStatus[PcPort])
 800bb34:	4b2f      	ldr	r3, [pc, #188]	; (800bbf4 <ControlBluetoothTask+0x1dc>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	4a26      	ldr	r2, [pc, #152]	; (800bbd4 <ControlBluetoothTask+0x1bc>)
 800bb3a:	5cd3      	ldrb	r3, [r2, r3]
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d012      	beq.n	800bb66 <ControlBluetoothTask+0x14e>
          btSendMsgToModule(dstModule, &cMessage[PORT_BTC_CONN-1][5], 1);
 800bb40:	4b2d      	ldr	r3, [pc, #180]	; (800bbf8 <ControlBluetoothTask+0x1e0>)
 800bb42:	7818      	ldrb	r0, [r3, #0]
 800bb44:	2201      	movs	r2, #1
 800bb46:	4928      	ldr	r1, [pc, #160]	; (800bbe8 <ControlBluetoothTask+0x1d0>)
 800bb48:	f7ff ff1e 	bl	800b988 <btSendMsgToModule>
 800bb4c:	e776      	b.n	800ba3c <ControlBluetoothTask+0x24>
					sprintf((char *)&tMessage[0], "Connection succeeded ...\r\n");
 800bb4e:	4669      	mov	r1, sp
 800bb50:	4b2a      	ldr	r3, [pc, #168]	; (800bbfc <ControlBluetoothTask+0x1e4>)
 800bb52:	000a      	movs	r2, r1
 800bb54:	cb83      	ldmia	r3!, {r0, r1, r7}
 800bb56:	c283      	stmia	r2!, {r0, r1, r7}
 800bb58:	cb83      	ldmia	r3!, {r0, r1, r7}
 800bb5a:	c283      	stmia	r2!, {r0, r1, r7}
 800bb5c:	8819      	ldrh	r1, [r3, #0]
 800bb5e:	8011      	strh	r1, [r2, #0]
 800bb60:	789b      	ldrb	r3, [r3, #2]
 800bb62:	7093      	strb	r3, [r2, #2]
 800bb64:	e7e6      	b.n	800bb34 <ControlBluetoothTask+0x11c>
          btSendMsgToTerminal(tMessage, strlen((char *)tMessage));
 800bb66:	4668      	mov	r0, sp
 800bb68:	f7f4 fad6 	bl	8000118 <strlen>
 800bb6c:	b2c1      	uxtb	r1, r0
 800bb6e:	4668      	mov	r0, sp
 800bb70:	f7ff fee8 	bl	800b944 <btSendMsgToTerminal>
          stateTransmitBtToMcu = H23R0_BTC_CLOSE_CONNECTION;
 800bb74:	4b1b      	ldr	r3, [pc, #108]	; (800bbe4 <ControlBluetoothTask+0x1cc>)
 800bb76:	22ff      	movs	r2, #255	; 0xff
 800bb78:	701a      	strb	r2, [r3, #0]
          xEventGroupSetBits(handleUartTerminal, EVENT_CLOSE_CONNECTION_BIT);
 800bb7a:	4b21      	ldr	r3, [pc, #132]	; (800bc00 <ControlBluetoothTask+0x1e8>)
 800bb7c:	6818      	ldr	r0, [r3, #0]
 800bb7e:	2101      	movs	r1, #1
 800bb80:	f002 fd3e 	bl	800e600 <xEventGroupSetBits>
 800bb84:	e75a      	b.n	800ba3c <ControlBluetoothTask+0x24>
        if (CLI == portStatus[PcPort])
 800bb86:	4b1b      	ldr	r3, [pc, #108]	; (800bbf4 <ControlBluetoothTask+0x1dc>)
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	5cf3      	ldrb	r3, [r6, r3]
 800bb8c:	2b03      	cmp	r3, #3
 800bb8e:	d005      	beq.n	800bb9c <ControlBluetoothTask+0x184>
          sendListBtcDevices(H23Rx_SEND_TO_OTHER_DEVICES, dstModule);
 800bb90:	4b19      	ldr	r3, [pc, #100]	; (800bbf8 <ControlBluetoothTask+0x1e0>)
 800bb92:	7819      	ldrb	r1, [r3, #0]
 800bb94:	2001      	movs	r0, #1
 800bb96:	f7ff ff09 	bl	800b9ac <sendListBtcDevices>
 800bb9a:	e74f      	b.n	800ba3c <ControlBluetoothTask+0x24>
          sendListBtcDevices(H23Rx_SEND_TO_TERMINAL_APP, 0);
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	2000      	movs	r0, #0
 800bba0:	f7ff ff04 	bl	800b9ac <sendListBtcDevices>
          stateTransmitBtToMcu = H23R0_BTC_CLOSE_CONNECTION;
 800bba4:	4b0f      	ldr	r3, [pc, #60]	; (800bbe4 <ControlBluetoothTask+0x1cc>)
 800bba6:	22ff      	movs	r2, #255	; 0xff
 800bba8:	701a      	strb	r2, [r3, #0]
          xEventGroupSetBits(handleUartTerminal, EVENT_CLOSE_CONNECTION_BIT);
 800bbaa:	4b15      	ldr	r3, [pc, #84]	; (800bc00 <ControlBluetoothTask+0x1e8>)
 800bbac:	6818      	ldr	r0, [r3, #0]
 800bbae:	2101      	movs	r1, #1
 800bbb0:	f002 fd26 	bl	800e600 <xEventGroupSetBits>
 800bbb4:	e742      	b.n	800ba3c <ControlBluetoothTask+0x24>
      portStatus[PORT_BTC_CONN] = FREE;
 800bbb6:	4b07      	ldr	r3, [pc, #28]	; (800bbd4 <ControlBluetoothTask+0x1bc>)
 800bbb8:	719a      	strb	r2, [r3, #6]
      HAL_UART_Receive_IT(GetUart(PORT_BTC_CONN), (uint8_t *)&cRxedChar, 1);
 800bbba:	2006      	movs	r0, #6
 800bbbc:	f002 f980 	bl	800dec0 <GetUart>
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	4910      	ldr	r1, [pc, #64]	; (800bc04 <ControlBluetoothTask+0x1ec>)
 800bbc4:	f007 f8d6 	bl	8012d74 <HAL_UART_Receive_IT>
 800bbc8:	e74b      	b.n	800ba62 <ControlBluetoothTask+0x4a>
 800bbca:	46c0      	nop			; (mov r8, r8)
 800bbcc:	20000d08 	.word	0x20000d08
 800bbd0:	0801b200 	.word	0x0801b200
 800bbd4:	200010f8 	.word	0x200010f8
 800bbd8:	20000e20 	.word	0x20000e20
 800bbdc:	20000f30 	.word	0x20000f30
 800bbe0:	fffff955 	.word	0xfffff955
 800bbe4:	20001876 	.word	0x20001876
 800bbe8:	20000e25 	.word	0x20000e25
 800bbec:	20001875 	.word	0x20001875
 800bbf0:	0801b2b8 	.word	0x0801b2b8
 800bbf4:	20000a77 	.word	0x20000a77
 800bbf8:	200017a0 	.word	0x200017a0
 800bbfc:	0801b29c 	.word	0x0801b29c
 800bc00:	200017a4 	.word	0x200017a4
 800bc04:	20000e58 	.word	0x20000e58

0800bc08 <btSendCommandToBtc>:
{
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	0004      	movs	r4, r0
	result = writePxMutex(PORT_BTC_CONN, (char *) command, strlen((char *)command), cmd50ms, HAL_MAX_DELAY);
 800bc0e:	f7f4 fa83 	bl	8000118 <strlen>
 800bc12:	b282      	uxth	r2, r0
 800bc14:	2301      	movs	r3, #1
 800bc16:	425b      	negs	r3, r3
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	3333      	adds	r3, #51	; 0x33
 800bc1c:	0021      	movs	r1, r4
 800bc1e:	2006      	movs	r0, #6
 800bc20:	f002 f970 	bl	800df04 <writePxMutex>
}
 800bc24:	b002      	add	sp, #8
 800bc26:	bd10      	pop	{r4, pc}

0800bc28 <btDeleteScriptCommand>:
{
 800bc28:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d101      	bne.n	800bc32 <btDeleteScriptCommand+0xa>
 800bc2e:	b672      	cpsid	i
 800bc30:	e7fe      	b.n	800bc30 <btDeleteScriptCommand+0x8>
	sprintf( ( char * ) pcWriteBuffer, "Current smartBASIC script deleted successfuly\r\n");
 800bc32:	2230      	movs	r2, #48	; 0x30
 800bc34:	4907      	ldr	r1, [pc, #28]	; (800bc54 <btDeleteScriptCommand+0x2c>)
 800bc36:	f008 f88c 	bl	8013d52 <memcpy>
	EE_WriteVariable(_EE_H23xVSP, H23Rx_RUN_VspCommandMode);
 800bc3a:	20fa      	movs	r0, #250	; 0xfa
 800bc3c:	2103      	movs	r1, #3
 800bc3e:	0040      	lsls	r0, r0, #1
 800bc40:	f7fb fdce 	bl	80077e0 <EE_WriteVariable>
	Delay_ms(100);
 800bc44:	2064      	movs	r0, #100	; 0x64
 800bc46:	f004 fbf5 	bl	8010434 <HAL_Delay>
		btSendCommandToBtc(pcMsgDelFirmware);
 800bc4a:	4803      	ldr	r0, [pc, #12]	; (800bc58 <btDeleteScriptCommand+0x30>)
 800bc4c:	f7ff ffdc 	bl	800bc08 <btSendCommandToBtc>
}
 800bc50:	2000      	movs	r0, #0
 800bc52:	bd10      	pop	{r4, pc}
 800bc54:	0801b358 	.word	0x0801b358
 800bc58:	0801b388 	.word	0x0801b388

0800bc5c <btResetBt900Module>:
{
 800bc5c:	b570      	push	{r4, r5, r6, lr}
  BT_CLEAR_RST_PIN();
 800bc5e:	2580      	movs	r5, #128	; 0x80
 800bc60:	022d      	lsls	r5, r5, #8
 800bc62:	4c09      	ldr	r4, [pc, #36]	; (800bc88 <btResetBt900Module+0x2c>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	0029      	movs	r1, r5
 800bc68:	0020      	movs	r0, r4
 800bc6a:	f006 f84d 	bl	8011d08 <HAL_GPIO_WritePin>
  Delay_ms_no_rtos(10);
 800bc6e:	200a      	movs	r0, #10
 800bc70:	f001 ff4c 	bl	800db0c <StartMilliDelay>
  BT_SET_RST_PIN();
 800bc74:	2201      	movs	r2, #1
 800bc76:	0029      	movs	r1, r5
 800bc78:	0020      	movs	r0, r4
 800bc7a:	f006 f845 	bl	8011d08 <HAL_GPIO_WritePin>
  Delay_ms_no_rtos(2900); /* The BT900 module start-up time is ~1.6 seconds + ~1.3 s for radio initialisation */
 800bc7e:	4803      	ldr	r0, [pc, #12]	; (800bc8c <btResetBt900Module+0x30>)
 800bc80:	f001 ff44 	bl	800db0c <StartMilliDelay>
}
 800bc84:	bd70      	pop	{r4, r5, r6, pc}
 800bc86:	46c0      	nop			; (mov r8, r8)
 800bc88:	48000400 	.word	0x48000400
 800bc8c:	00000b54 	.word	0x00000b54

0800bc90 <btResetCommand>:
{
 800bc90:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d101      	bne.n	800bc9a <btResetCommand+0xa>
 800bc96:	b672      	cpsid	i
 800bc98:	e7fe      	b.n	800bc98 <btResetCommand+0x8>
	sprintf( ( char * ) pcWriteBuffer, "Reset BT900 module\r\n");
 800bc9a:	2215      	movs	r2, #21
 800bc9c:	4903      	ldr	r1, [pc, #12]	; (800bcac <btResetCommand+0x1c>)
 800bc9e:	f008 f858 	bl	8013d52 <memcpy>
	btResetBt900Module();
 800bca2:	f7ff ffdb 	bl	800bc5c <btResetBt900Module>
}
 800bca6:	2000      	movs	r0, #0
 800bca8:	bd10      	pop	{r4, pc}
 800bcaa:	46c0      	nop			; (mov r8, r8)
 800bcac:	0801b4c4 	.word	0x0801b4c4

0800bcb0 <btVspMode>:
{
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	0004      	movs	r4, r0
	btEnableHandshakeUart();
 800bcb4:	f7ff fd30 	bl	800b718 <btEnableHandshakeUart>
	if (H23Rx_RUN_VspCommandMode == inputVspMode)
 800bcb8:	2c03      	cmp	r4, #3
 800bcba:	d003      	beq.n	800bcc4 <btVspMode+0x14>
		result = H23Rx_ERR_WrongParams;
 800bcbc:	2002      	movs	r0, #2
	else if (H23Rx_RUN_VspBridgeToUartMode == inputVspMode)
 800bcbe:	2c04      	cmp	r4, #4
 800bcc0:	d010      	beq.n	800bce4 <btVspMode+0x34>
}
 800bcc2:	bd10      	pop	{r4, pc}
		BT_CLEAR_VSP_PIN();
 800bcc4:	2180      	movs	r1, #128	; 0x80
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	01c9      	lsls	r1, r1, #7
 800bcca:	480e      	ldr	r0, [pc, #56]	; (800bd04 <btVspMode+0x54>)
 800bccc:	f006 f81c 	bl	8011d08 <HAL_GPIO_WritePin>
		BT_CLEAR_MODE_PIN();
 800bcd0:	2090      	movs	r0, #144	; 0x90
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2180      	movs	r1, #128	; 0x80
 800bcd6:	05c0      	lsls	r0, r0, #23
 800bcd8:	f006 f816 	bl	8011d08 <HAL_GPIO_WritePin>
		btResetBt900Module();
 800bcdc:	f7ff ffbe 	bl	800bc5c <btResetBt900Module>
	Module_Status result = H23Rx_OK;
 800bce0:	2000      	movs	r0, #0
 800bce2:	e7ee      	b.n	800bcc2 <btVspMode+0x12>
		BT_CLEAR_VSP_PIN();
 800bce4:	2180      	movs	r1, #128	; 0x80
 800bce6:	2200      	movs	r2, #0
 800bce8:	01c9      	lsls	r1, r1, #7
 800bcea:	4806      	ldr	r0, [pc, #24]	; (800bd04 <btVspMode+0x54>)
 800bcec:	f006 f80c 	bl	8011d08 <HAL_GPIO_WritePin>
		BT_SET_MODE_PIN();
 800bcf0:	2090      	movs	r0, #144	; 0x90
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	2180      	movs	r1, #128	; 0x80
 800bcf6:	05c0      	lsls	r0, r0, #23
 800bcf8:	f006 f806 	bl	8011d08 <HAL_GPIO_WritePin>
		btResetBt900Module();
 800bcfc:	f7ff ffae 	bl	800bc5c <btResetBt900Module>
	Module_Status result = H23Rx_OK;
 800bd00:	2000      	movs	r0, #0
 800bd02:	e7de      	b.n	800bcc2 <btVspMode+0x12>
 800bd04:	48000400 	.word	0x48000400

0800bd08 <btVspModeCommand>:
{
 800bd08:	b530      	push	{r4, r5, lr}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	0005      	movs	r5, r0
 800bd0e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800bd14:	2d00      	cmp	r5, #0
 800bd16:	d101      	bne.n	800bd1c <btVspModeCommand+0x14>
 800bd18:	b672      	cpsid	i
 800bd1a:	e7fe      	b.n	800bd1a <btVspModeCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800bd1c:	aa01      	add	r2, sp, #4
 800bd1e:	2101      	movs	r1, #1
 800bd20:	f002 fb36 	bl	800e390 <FreeRTOS_CLIGetParameter>
 800bd24:	0004      	movs	r4, r0
	if (!strncmp((const char *)pcParameterString1, "command", 7))
 800bd26:	2207      	movs	r2, #7
 800bd28:	4919      	ldr	r1, [pc, #100]	; (800bd90 <btVspModeCommand+0x88>)
 800bd2a:	f008 fa59 	bl	80141e0 <strncmp>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d00c      	beq.n	800bd4c <btVspModeCommand+0x44>
	else if (!strncmp((const char *)pcParameterString1, "bridge", 6))
 800bd32:	2206      	movs	r2, #6
 800bd34:	4917      	ldr	r1, [pc, #92]	; (800bd94 <btVspModeCommand+0x8c>)
 800bd36:	0020      	movs	r0, r4
 800bd38:	f008 fa52 	bl	80141e0 <strncmp>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d018      	beq.n	800bd72 <btVspModeCommand+0x6a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800bd40:	2213      	movs	r2, #19
 800bd42:	4915      	ldr	r1, [pc, #84]	; (800bd98 <btVspModeCommand+0x90>)
 800bd44:	0028      	movs	r0, r5
 800bd46:	f008 f804 	bl	8013d52 <memcpy>
 800bd4a:	e00f      	b.n	800bd6c <btVspModeCommand+0x64>
		result = btVspMode(H23Rx_RUN_VspCommandMode);
 800bd4c:	3003      	adds	r0, #3
 800bd4e:	f7ff ffaf 	bl	800bcb0 <btVspMode>
 800bd52:	0004      	movs	r4, r0
		EE_WriteVariable(_EE_H23xVSP, H23Rx_RUN_VspCommandMode);
 800bd54:	20fa      	movs	r0, #250	; 0xfa
 800bd56:	2103      	movs	r1, #3
 800bd58:	0040      	lsls	r0, r0, #1
 800bd5a:	f7fb fd41 	bl	80077e0 <EE_WriteVariable>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "VSP command mode\r\n");
 800bd5e:	4a0f      	ldr	r2, [pc, #60]	; (800bd9c <btVspModeCommand+0x94>)
 800bd60:	490f      	ldr	r1, [pc, #60]	; (800bda0 <btVspModeCommand+0x98>)
 800bd62:	0028      	movs	r0, r5
 800bd64:	f008 f9f8 	bl	8014158 <sprintf>
	if (H23Rx_ERR_WrongParams == result)
 800bd68:	2c02      	cmp	r4, #2
 800bd6a:	d0e9      	beq.n	800bd40 <btVspModeCommand+0x38>
}
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	b003      	add	sp, #12
 800bd70:	bd30      	pop	{r4, r5, pc}
		result = btVspMode(H23Rx_RUN_VspBridgeToUartMode);
 800bd72:	3004      	adds	r0, #4
 800bd74:	f7ff ff9c 	bl	800bcb0 <btVspMode>
 800bd78:	0004      	movs	r4, r0
		EE_WriteVariable(_EE_H23xVSP, H23Rx_RUN_VspBridgeToUartMode);
 800bd7a:	20fa      	movs	r0, #250	; 0xfa
 800bd7c:	2104      	movs	r1, #4
 800bd7e:	0040      	lsls	r0, r0, #1
 800bd80:	f7fb fd2e 	bl	80077e0 <EE_WriteVariable>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "VSP Bridge-to-UART mode\r\n");
 800bd84:	4a07      	ldr	r2, [pc, #28]	; (800bda4 <btVspModeCommand+0x9c>)
 800bd86:	4906      	ldr	r1, [pc, #24]	; (800bda0 <btVspModeCommand+0x98>)
 800bd88:	0028      	movs	r0, r5
 800bd8a:	f008 f9e5 	bl	8014158 <sprintf>
 800bd8e:	e7eb      	b.n	800bd68 <btVspModeCommand+0x60>
 800bd90:	0801b570 	.word	0x0801b570
 800bd94:	0801a0c8 	.word	0x0801a0c8
 800bd98:	08019ab0 	.word	0x08019ab0
 800bd9c:	0801b578 	.word	0x0801b578
 800bda0:	0801b58c 	.word	0x0801b58c
 800bda4:	0801b59c 	.word	0x0801b59c

0800bda8 <btDownloadScript>:
{
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	0004      	movs	r4, r0
 800bdae:	000d      	movs	r5, r1
    btEnableHandshakeUart();
 800bdb0:	f7ff fcb2 	bl	800b718 <btEnableHandshakeUart>
	if (H23Rx_RUN_DownloadScriptViaOta == method)
 800bdb4:	2c05      	cmp	r4, #5
 800bdb6:	d004      	beq.n	800bdc2 <btDownloadScript+0x1a>
		result = H23Rx_ERR_WrongParams;
 800bdb8:	2002      	movs	r0, #2
	else if (H23Rx_RUN_DownloadScriptViaUart == method)
 800bdba:	2c06      	cmp	r4, #6
 800bdbc:	d006      	beq.n	800bdcc <btDownloadScript+0x24>
}
 800bdbe:	b004      	add	sp, #16
 800bdc0:	bd70      	pop	{r4, r5, r6, pc}
		btVspMode(H23Rx_RUN_VspBridgeToUartMode);
 800bdc2:	2004      	movs	r0, #4
 800bdc4:	f7ff ff74 	bl	800bcb0 <btVspMode>
	Module_Status result = H23Rx_OK;
 800bdc8:	2000      	movs	r0, #0
 800bdca:	e7f8      	b.n	800bdbe <btDownloadScript+0x16>
		scriptPort = port;
 800bdcc:	4e11      	ldr	r6, [pc, #68]	; (800be14 <btDownloadScript+0x6c>)
 800bdce:	7035      	strb	r5, [r6, #0]
		stateTransmitBtToMcu = 0;
 800bdd0:	2400      	movs	r4, #0
 800bdd2:	4b11      	ldr	r3, [pc, #68]	; (800be18 <btDownloadScript+0x70>)
 800bdd4:	701c      	strb	r4, [r3, #0]
		btVspMode(H23Rx_RUN_VspBridgeToUartMode);
 800bdd6:	3002      	adds	r0, #2
 800bdd8:	f7ff ff6a 	bl	800bcb0 <btVspMode>
		EE_WriteVariable(_EE_H23xVSP, H23Rx_RUN_VspBridgeToUartMode);
 800bddc:	20fa      	movs	r0, #250	; 0xfa
 800bdde:	2104      	movs	r1, #4
 800bde0:	0040      	lsls	r0, r0, #1
 800bde2:	f7fb fcfd 	bl	80077e0 <EE_WriteVariable>
		UpdateBaudrate(PcPort, 115200);
 800bde6:	21e1      	movs	r1, #225	; 0xe1
 800bde8:	4b0c      	ldr	r3, [pc, #48]	; (800be1c <btDownloadScript+0x74>)
 800bdea:	7818      	ldrb	r0, [r3, #0]
 800bdec:	0249      	lsls	r1, r1, #9
 800bdee:	f002 f8f7 	bl	800dfe0 <UpdateBaudrate>
		StartScastDMAStream(PORT_BTC_CONN, myID, scriptPort, myID, BIDIRECTIONAL, H23Rx_MAX_NUMBER_OF_DATA_DMA, 0xFFFFFFFF, false);
 800bdf2:	4b0b      	ldr	r3, [pc, #44]	; (800be20 <btDownloadScript+0x78>)
 800bdf4:	7819      	ldrb	r1, [r3, #0]
 800bdf6:	7832      	ldrb	r2, [r6, #0]
 800bdf8:	9403      	str	r4, [sp, #12]
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	425b      	negs	r3, r3
 800bdfe:	9302      	str	r3, [sp, #8]
 800be00:	4b08      	ldr	r3, [pc, #32]	; (800be24 <btDownloadScript+0x7c>)
 800be02:	9301      	str	r3, [sp, #4]
 800be04:	2302      	movs	r3, #2
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	000b      	movs	r3, r1
 800be0a:	2006      	movs	r0, #6
 800be0c:	f7fd fc80 	bl	8009710 <StartScastDMAStream>
	Module_Status result = H23Rx_OK;
 800be10:	2000      	movs	r0, #0
 800be12:	e7d4      	b.n	800bdbe <btDownloadScript+0x16>
 800be14:	20001874 	.word	0x20001874
 800be18:	20001876 	.word	0x20001876
 800be1c:	20000a77 	.word	0x20000a77
 800be20:	20001076 	.word	0x20001076
 800be24:	00009c40 	.word	0x00009c40

0800be28 <btDownloadScriptCommand>:
{
 800be28:	b530      	push	{r4, r5, lr}
 800be2a:	b085      	sub	sp, #20
 800be2c:	0004      	movs	r4, r0
 800be2e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800be30:	2300      	movs	r3, #0
 800be32:	9303      	str	r3, [sp, #12]
	configASSERT( pcWriteBuffer );
 800be34:	2c00      	cmp	r4, #0
 800be36:	d101      	bne.n	800be3c <btDownloadScriptCommand+0x14>
 800be38:	b672      	cpsid	i
 800be3a:	e7fe      	b.n	800be3a <btDownloadScriptCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800be3c:	aa03      	add	r2, sp, #12
 800be3e:	2101      	movs	r1, #1
 800be40:	f002 faa6 	bl	800e390 <FreeRTOS_CLIGetParameter>
 800be44:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "ota", 3))
 800be46:	2203      	movs	r2, #3
 800be48:	4938      	ldr	r1, [pc, #224]	; (800bf2c <btDownloadScriptCommand+0x104>)
 800be4a:	f008 f9c9 	bl	80141e0 <strncmp>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d019      	beq.n	800be86 <btDownloadScriptCommand+0x5e>
	else if (!strncmp((const char *)pcParameterString1, "uart", 4))
 800be52:	2204      	movs	r2, #4
 800be54:	4936      	ldr	r1, [pc, #216]	; (800bf30 <btDownloadScriptCommand+0x108>)
 800be56:	0028      	movs	r0, r5
 800be58:	f008 f9c2 	bl	80141e0 <strncmp>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d04b      	beq.n	800bef8 <btDownloadScriptCommand+0xd0>
		sprintf( ( char * ) pcWriteBuffer, "Wrong input parameter\r\n");
 800be60:	2218      	movs	r2, #24
 800be62:	4934      	ldr	r1, [pc, #208]	; (800bf34 <btDownloadScriptCommand+0x10c>)
 800be64:	0020      	movs	r0, r4
 800be66:	f007 ff74 	bl	8013d52 <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800be6a:	0020      	movs	r0, r4
 800be6c:	f7f4 f954 	bl	8000118 <strlen>
 800be70:	b282      	uxth	r2, r0
 800be72:	4b31      	ldr	r3, [pc, #196]	; (800bf38 <btDownloadScriptCommand+0x110>)
 800be74:	7818      	ldrb	r0, [r3, #0]
 800be76:	2301      	movs	r3, #1
 800be78:	425b      	negs	r3, r3
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	3333      	adds	r3, #51	; 0x33
 800be7e:	0021      	movs	r1, r4
 800be80:	f002 f840 	bl	800df04 <writePxMutex>
 800be84:	e018      	b.n	800beb8 <btDownloadScriptCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, "Downloading new smartBASIC program to BT900 via OTA ...\r\n");
 800be86:	223a      	movs	r2, #58	; 0x3a
 800be88:	492c      	ldr	r1, [pc, #176]	; (800bf3c <btDownloadScriptCommand+0x114>)
 800be8a:	0020      	movs	r0, r4
 800be8c:	f007 ff61 	bl	8013d52 <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800be90:	0020      	movs	r0, r4
 800be92:	f7f4 f941 	bl	8000118 <strlen>
 800be96:	b282      	uxth	r2, r0
 800be98:	4d27      	ldr	r5, [pc, #156]	; (800bf38 <btDownloadScriptCommand+0x110>)
 800be9a:	7828      	ldrb	r0, [r5, #0]
 800be9c:	2301      	movs	r3, #1
 800be9e:	425b      	negs	r3, r3
 800bea0:	9300      	str	r3, [sp, #0]
 800bea2:	3333      	adds	r3, #51	; 0x33
 800bea4:	0021      	movs	r1, r4
 800bea6:	f002 f82d 	bl	800df04 <writePxMutex>
		result = btDownloadScript(H23Rx_RUN_DownloadScriptViaOta, PcPort);
 800beaa:	7829      	ldrb	r1, [r5, #0]
 800beac:	2005      	movs	r0, #5
 800beae:	f7ff ff7b 	bl	800bda8 <btDownloadScript>
 800beb2:	0005      	movs	r5, r0
	if (H23Rx_ERR_WrongParams == result)
 800beb4:	2d02      	cmp	r5, #2
 800beb6:	d0d3      	beq.n	800be60 <btDownloadScriptCommand+0x38>
	sprintf( ( char * ) pcWriteBuffer, "\r\nDone\r\n");
 800beb8:	2209      	movs	r2, #9
 800beba:	4921      	ldr	r1, [pc, #132]	; (800bf40 <btDownloadScriptCommand+0x118>)
 800bebc:	0020      	movs	r0, r4
 800bebe:	f007 ff48 	bl	8013d52 <memcpy>
	writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bec2:	0020      	movs	r0, r4
 800bec4:	f7f4 f928 	bl	8000118 <strlen>
 800bec8:	b282      	uxth	r2, r0
 800beca:	4b1b      	ldr	r3, [pc, #108]	; (800bf38 <btDownloadScriptCommand+0x110>)
 800becc:	7818      	ldrb	r0, [r3, #0]
 800bece:	2301      	movs	r3, #1
 800bed0:	425b      	negs	r3, r3
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	3333      	adds	r3, #51	; 0x33
 800bed6:	0021      	movs	r1, r4
 800bed8:	f002 f814 	bl	800df04 <writePxMutex>
	memset((char *)pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800bedc:	2299      	movs	r2, #153	; 0x99
 800bede:	0092      	lsls	r2, r2, #2
 800bee0:	2100      	movs	r1, #0
 800bee2:	0020      	movs	r0, r4
 800bee4:	f007 ff3e 	bl	8013d64 <memset>
	sprintf((char *)pcWriteBuffer, "\r\n");
 800bee8:	2203      	movs	r2, #3
 800beea:	4916      	ldr	r1, [pc, #88]	; (800bf44 <btDownloadScriptCommand+0x11c>)
 800beec:	0020      	movs	r0, r4
 800beee:	f007 ff30 	bl	8013d52 <memcpy>
}
 800bef2:	2000      	movs	r0, #0
 800bef4:	b005      	add	sp, #20
 800bef6:	bd30      	pop	{r4, r5, pc}
		sprintf( ( char * ) pcWriteBuffer, "Downloading new smartBASIC program to BT900 via UART. Please set baudrate to 115200 then open this port again and load the smartBASIC file\r\n");
 800bef8:	228d      	movs	r2, #141	; 0x8d
 800befa:	4913      	ldr	r1, [pc, #76]	; (800bf48 <btDownloadScriptCommand+0x120>)
 800befc:	0020      	movs	r0, r4
 800befe:	f007 ff28 	bl	8013d52 <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bf02:	0020      	movs	r0, r4
 800bf04:	f7f4 f908 	bl	8000118 <strlen>
 800bf08:	b282      	uxth	r2, r0
 800bf0a:	4d0b      	ldr	r5, [pc, #44]	; (800bf38 <btDownloadScriptCommand+0x110>)
 800bf0c:	7828      	ldrb	r0, [r5, #0]
 800bf0e:	2301      	movs	r3, #1
 800bf10:	425b      	negs	r3, r3
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	3333      	adds	r3, #51	; 0x33
 800bf16:	0021      	movs	r1, r4
 800bf18:	f001 fff4 	bl	800df04 <writePxMutex>
		result = btDownloadScript(H23Rx_RUN_DownloadScriptViaUart, PcPort);
 800bf1c:	7829      	ldrb	r1, [r5, #0]
 800bf1e:	2006      	movs	r0, #6
 800bf20:	f7ff ff42 	bl	800bda8 <btDownloadScript>
 800bf24:	0005      	movs	r5, r0
		btWaitEventFinishTransmission();
 800bf26:	f7ff fc39 	bl	800b79c <btWaitEventFinishTransmission>
 800bf2a:	e7c3      	b.n	800beb4 <btDownloadScriptCommand+0x8c>
 800bf2c:	0801b3a0 	.word	0x0801b3a0
 800bf30:	0801b3e0 	.word	0x0801b3e0
 800bf34:	0801b30c 	.word	0x0801b30c
 800bf38:	20000a77 	.word	0x20000a77
 800bf3c:	0801b3a4 	.word	0x0801b3a4
 800bf40:	0801b478 	.word	0x0801b478
 800bf44:	0801a6e4 	.word	0x0801a6e4
 800bf48:	0801b3e8 	.word	0x0801b3e8

0800bf4c <btRunScript>:
{
 800bf4c:	b510      	push	{r4, lr}
	btDisableHandshakeUart();
 800bf4e:	f7ff fc03 	bl	800b758 <btDisableHandshakeUart>
	BT_SET_VSP_PIN();
 800bf52:	2180      	movs	r1, #128	; 0x80
 800bf54:	2201      	movs	r2, #1
 800bf56:	01c9      	lsls	r1, r1, #7
 800bf58:	4805      	ldr	r0, [pc, #20]	; (800bf70 <btRunScript+0x24>)
 800bf5a:	f005 fed5 	bl	8011d08 <HAL_GPIO_WritePin>
	BT_CLEAR_MODE_PIN();
 800bf5e:	2090      	movs	r0, #144	; 0x90
 800bf60:	2200      	movs	r2, #0
 800bf62:	2180      	movs	r1, #128	; 0x80
 800bf64:	05c0      	lsls	r0, r0, #23
 800bf66:	f005 fecf 	bl	8011d08 <HAL_GPIO_WritePin>
	btResetBt900Module();
 800bf6a:	f7ff fe77 	bl	800bc5c <btResetBt900Module>
}
 800bf6e:	bd10      	pop	{r4, pc}
 800bf70:	48000400 	.word	0x48000400

0800bf74 <btRunScriptCommand>:
{
 800bf74:	b510      	push	{r4, lr}
 800bf76:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800bf78:	d101      	bne.n	800bf7e <btRunScriptCommand+0xa>
 800bf7a:	b672      	cpsid	i
 800bf7c:	e7fe      	b.n	800bf7c <btRunScriptCommand+0x8>
	btRunScript();
 800bf7e:	f7ff ffe5 	bl	800bf4c <btRunScript>
	sprintf( ( char * ) pcWriteBuffer, "Run $autorun$ script in the BT900 board");
 800bf82:	2228      	movs	r2, #40	; 0x28
 800bf84:	4902      	ldr	r1, [pc, #8]	; (800bf90 <btRunScriptCommand+0x1c>)
 800bf86:	0020      	movs	r0, r4
 800bf88:	f007 fee3 	bl	8013d52 <memcpy>
}
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	bd10      	pop	{r4, pc}
 800bf90:	0801b4ec 	.word	0x0801b4ec

0800bf94 <Module_Peripheral_Init>:
{
 800bf94:	b510      	push	{r4, lr}
 800bf96:	b086      	sub	sp, #24
	memset(cMessage[PORT_BTC_CONN-1], 0, MAX_MESSAGE_SIZE);
 800bf98:	2238      	movs	r2, #56	; 0x38
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	481d      	ldr	r0, [pc, #116]	; (800c014 <Module_Peripheral_Init+0x80>)
 800bf9e:	f007 fee1 	bl	8013d64 <memset>
	messageLength[PORT_BTC_CONN-1] = 0;
 800bfa2:	2400      	movs	r4, #0
 800bfa4:	4b1c      	ldr	r3, [pc, #112]	; (800c018 <Module_Peripheral_Init+0x84>)
 800bfa6:	715c      	strb	r4, [r3, #5]
  MX_USART1_UART_Init();
 800bfa8:	f001 fdc2 	bl	800db30 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800bfac:	f001 fdd8 	bl	800db60 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 800bfb0:	f001 fe06 	bl	800dbc0 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800bfb4:	f001 fe1c 	bl	800dbf0 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800bfb8:	f001 fe32 	bl	800dc20 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 800bfbc:	f001 fde8 	bl	800db90 <MX_USART3_UART_Init>
	EE_ReadVariable(_EE_H23xVSP, &vsp_mode);
 800bfc0:	20fa      	movs	r0, #250	; 0xfa
 800bfc2:	2116      	movs	r1, #22
 800bfc4:	4469      	add	r1, sp
 800bfc6:	0040      	lsls	r0, r0, #1
 800bfc8:	f7fb fbda 	bl	8007780 <EE_ReadVariable>
	BT_RST_GPIO_Init();
 800bfcc:	f001 f9e6 	bl	800d39c <BT_RST_GPIO_Init>
  cleanListBtcDevices();
 800bfd0:	f7ff fb50 	bl	800b674 <cleanListBtcDevices>
  UpdateBaudrate(PORT_BTC_CONN, 115200); /* Normal baudrate for BT900 */
 800bfd4:	21e1      	movs	r1, #225	; 0xe1
 800bfd6:	0249      	lsls	r1, r1, #9
 800bfd8:	2006      	movs	r0, #6
 800bfda:	f002 f801 	bl	800dfe0 <UpdateBaudrate>
  stateTransmitBtToMcu = 0;
 800bfde:	4b0f      	ldr	r3, [pc, #60]	; (800c01c <Module_Peripheral_Init+0x88>)
 800bfe0:	701c      	strb	r4, [r3, #0]
  stateScanDevices = 0;
 800bfe2:	4b0f      	ldr	r3, [pc, #60]	; (800c020 <Module_Peripheral_Init+0x8c>)
 800bfe4:	701c      	strb	r4, [r3, #0]
  dstModule = 0;
 800bfe6:	4b0f      	ldr	r3, [pc, #60]	; (800c024 <Module_Peripheral_Init+0x90>)
 800bfe8:	701c      	strb	r4, [r3, #0]
  handleUartTerminal = xEventGroupCreate();
 800bfea:	f002 fa8b 	bl	800e504 <xEventGroupCreate>
 800bfee:	4b0e      	ldr	r3, [pc, #56]	; (800c028 <Module_Peripheral_Init+0x94>)
 800bff0:	6018      	str	r0, [r3, #0]
	xTaskCreate(ControlBluetoothTask, (const char *) "ControlBluetooth", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &ControlBluetoothTaskHandle);
 800bff2:	22a0      	movs	r2, #160	; 0xa0
 800bff4:	9403      	str	r4, [sp, #12]
 800bff6:	9402      	str	r4, [sp, #8]
 800bff8:	4b0c      	ldr	r3, [pc, #48]	; (800c02c <Module_Peripheral_Init+0x98>)
 800bffa:	9301      	str	r3, [sp, #4]
 800bffc:	2303      	movs	r3, #3
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	2300      	movs	r3, #0
 800c002:	0052      	lsls	r2, r2, #1
 800c004:	490a      	ldr	r1, [pc, #40]	; (800c030 <Module_Peripheral_Init+0x9c>)
 800c006:	480b      	ldr	r0, [pc, #44]	; (800c034 <Module_Peripheral_Init+0xa0>)
 800c008:	f002 ff6c 	bl	800eee4 <xTaskGenericCreate>
	btRunScript();
 800c00c:	f7ff ff9e 	bl	800bf4c <btRunScript>
}
 800c010:	b006      	add	sp, #24
 800c012:	bd10      	pop	{r4, pc}
 800c014:	20000e20 	.word	0x20000e20
 800c018:	20000f30 	.word	0x20000f30
 800c01c:	20001876 	.word	0x20001876
 800c020:	20001875 	.word	0x20001875
 800c024:	200017a0 	.word	0x200017a0
 800c028:	200017a4 	.word	0x200017a4
 800c02c:	2000179c 	.word	0x2000179c
 800c030:	0801b2d0 	.word	0x0801b2d0
 800c034:	0800ba19 	.word	0x0800ba19

0800c038 <Module_MessagingTask>:
{
 800c038:	b570      	push	{r4, r5, r6, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	0014      	movs	r4, r2
 800c03e:	ab06      	add	r3, sp, #24
 800c040:	781a      	ldrb	r2, [r3, #0]
	switch (code)
 800c042:	4b48      	ldr	r3, [pc, #288]	; (800c164 <Module_MessagingTask+0x12c>)
 800c044:	469c      	mov	ip, r3
 800c046:	4460      	add	r0, ip
 800c048:	b283      	uxth	r3, r0
 800c04a:	2b15      	cmp	r3, #21
 800c04c:	d803      	bhi.n	800c056 <Module_MessagingTask+0x1e>
 800c04e:	0098      	lsls	r0, r3, #2
 800c050:	4b45      	ldr	r3, [pc, #276]	; (800c168 <Module_MessagingTask+0x130>)
 800c052:	581b      	ldr	r3, [r3, r0]
 800c054:	469f      	mov	pc, r3
			result = H23Rx_ERR_UnknownMessage;
 800c056:	2001      	movs	r0, #1
 800c058:	e082      	b.n	800c160 <Module_MessagingTask+0x128>
			btDownloadScript(H23Rx_RUN_DownloadScriptViaOta, src);
 800c05a:	0021      	movs	r1, r4
 800c05c:	2005      	movs	r0, #5
 800c05e:	f7ff fea3 	bl	800bda8 <btDownloadScript>
	Module_Status result = H23Rx_OK;
 800c062:	2000      	movs	r0, #0
			break;
 800c064:	e07c      	b.n	800c160 <Module_MessagingTask+0x128>
			btDownloadScript(H23Rx_RUN_DownloadScriptViaUart, src);
 800c066:	0021      	movs	r1, r4
 800c068:	2006      	movs	r0, #6
 800c06a:	f7ff fe9d 	bl	800bda8 <btDownloadScript>
	Module_Status result = H23Rx_OK;
 800c06e:	2000      	movs	r0, #0
			break;
 800c070:	e076      	b.n	800c160 <Module_MessagingTask+0x128>
			btRunScript();
 800c072:	f7ff ff6b 	bl	800bf4c <btRunScript>
	Module_Status result = H23Rx_OK;
 800c076:	2000      	movs	r0, #0
			break;
 800c078:	e072      	b.n	800c160 <Module_MessagingTask+0x128>
			btVspMode(H23Rx_RUN_VspCommandMode);
 800c07a:	2003      	movs	r0, #3
 800c07c:	f7ff fe18 	bl	800bcb0 <btVspMode>
	Module_Status result = H23Rx_OK;
 800c080:	2000      	movs	r0, #0
			break;
 800c082:	e06d      	b.n	800c160 <Module_MessagingTask+0x128>
			btVspMode(H23Rx_RUN_VspBridgeToUartMode);
 800c084:	2004      	movs	r0, #4
 800c086:	f7ff fe13 	bl	800bcb0 <btVspMode>
	Module_Status result = H23Rx_OK;
 800c08a:	2000      	movs	r0, #0
			break;
 800c08c:	e068      	b.n	800c160 <Module_MessagingTask+0x128>
			IND_ON();
 800c08e:	2180      	movs	r1, #128	; 0x80
 800c090:	2090      	movs	r0, #144	; 0x90
 800c092:	2201      	movs	r2, #1
 800c094:	0109      	lsls	r1, r1, #4
 800c096:	05c0      	lsls	r0, r0, #23
 800c098:	f005 fe36 	bl	8011d08 <HAL_GPIO_WritePin>
	Module_Status result = H23Rx_OK;
 800c09c:	2000      	movs	r0, #0
			break;
 800c09e:	e05f      	b.n	800c160 <Module_MessagingTask+0x128>
			IND_OFF();
 800c0a0:	2180      	movs	r1, #128	; 0x80
 800c0a2:	2090      	movs	r0, #144	; 0x90
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	0109      	lsls	r1, r1, #4
 800c0a8:	05c0      	lsls	r0, r0, #23
 800c0aa:	f005 fe2d 	bl	8011d08 <HAL_GPIO_WritePin>
	Module_Status result = H23Rx_OK;
 800c0ae:	2000      	movs	r0, #0
      break;
 800c0b0:	e056      	b.n	800c160 <Module_MessagingTask+0x128>
      stateScanDevices = 0;
 800c0b2:	2500      	movs	r5, #0
 800c0b4:	4b2d      	ldr	r3, [pc, #180]	; (800c16c <Module_MessagingTask+0x134>)
 800c0b6:	701d      	strb	r5, [r3, #0]
      cleanListBtcDevices();
 800c0b8:	f7ff fadc 	bl	800b674 <cleanListBtcDevices>
			SendMessageFromPort(PORT_BTC_CONN, 0, 0, CODE_H23Rx_SCAN_INQUIRE, 0);
 800c0bc:	9500      	str	r5, [sp, #0]
 800c0be:	4b2c      	ldr	r3, [pc, #176]	; (800c170 <Module_MessagingTask+0x138>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	2006      	movs	r0, #6
 800c0c6:	f7fd f8d5 	bl	8009274 <SendMessageFromPort>
      dstModule = src;
 800c0ca:	4b2a      	ldr	r3, [pc, #168]	; (800c174 <Module_MessagingTask+0x13c>)
 800c0cc:	701c      	strb	r4, [r3, #0]
	Module_Status result = H23Rx_OK;
 800c0ce:	2000      	movs	r0, #0
      break;
 800c0d0:	e046      	b.n	800c160 <Module_MessagingTask+0x128>
      if (1 == stateScanDevices)
 800c0d2:	4b26      	ldr	r3, [pc, #152]	; (800c16c <Module_MessagingTask+0x134>)
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d133      	bne.n	800c142 <Module_MessagingTask+0x10a>
        lenPar = messageLength[port-1] - shift;
 800c0da:	3901      	subs	r1, #1
        if ( ('[' == cMessage[port-1][1+shift]) && (']' == cMessage[port-1][messageLength[port-1] - 2]) )
 800c0dc:	1c55      	adds	r5, r2, #1
 800c0de:	00cb      	lsls	r3, r1, #3
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	00db      	lsls	r3, r3, #3
 800c0e4:	4824      	ldr	r0, [pc, #144]	; (800c178 <Module_MessagingTask+0x140>)
 800c0e6:	18c3      	adds	r3, r0, r3
 800c0e8:	5d5b      	ldrb	r3, [r3, r5]
 800c0ea:	2b5b      	cmp	r3, #91	; 0x5b
 800c0ec:	d10b      	bne.n	800c106 <Module_MessagingTask+0xce>
        lenPar = messageLength[port-1] - shift;
 800c0ee:	4b23      	ldr	r3, [pc, #140]	; (800c17c <Module_MessagingTask+0x144>)
 800c0f0:	5c5e      	ldrb	r6, [r3, r1]
        if ( ('[' == cMessage[port-1][1+shift]) && (']' == cMessage[port-1][messageLength[port-1] - 2]) )
 800c0f2:	00c8      	lsls	r0, r1, #3
 800c0f4:	1a40      	subs	r0, r0, r1
 800c0f6:	00c0      	lsls	r0, r0, #3
 800c0f8:	4b1f      	ldr	r3, [pc, #124]	; (800c178 <Module_MessagingTask+0x140>)
 800c0fa:	181b      	adds	r3, r3, r0
 800c0fc:	199b      	adds	r3, r3, r6
 800c0fe:	3b02      	subs	r3, #2
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	2b5d      	cmp	r3, #93	; 0x5d
 800c104:	d00a      	beq.n	800c11c <Module_MessagingTask+0xe4>
          memcpy((char *)&messageParams[0], (char *)pcMessageWrongParam, strlen((char *)pcMessageWrongParam));
 800c106:	2212      	movs	r2, #18
 800c108:	491d      	ldr	r1, [pc, #116]	; (800c180 <Module_MessagingTask+0x148>)
 800c10a:	481e      	ldr	r0, [pc, #120]	; (800c184 <Module_MessagingTask+0x14c>)
 800c10c:	f007 fe21 	bl	8013d52 <memcpy>
          SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char *)pcMessageWrongParam));
 800c110:	2212      	movs	r2, #18
 800c112:	2118      	movs	r1, #24
 800c114:	0020      	movs	r0, r4
 800c116:	f7fd fad5 	bl	80096c4 <SendMessageToModule>
 800c11a:	e01c      	b.n	800c156 <Module_MessagingTask+0x11e>
        lenPar = messageLength[port-1] - shift;
 800c11c:	1ab6      	subs	r6, r6, r2
 800c11e:	b2f6      	uxtb	r6, r6
          memcpy((char *)&messageParams[0], (char *)&cMessage[port-1][1 + shift], lenPar - 2);
 800c120:	1eb2      	subs	r2, r6, #2
 800c122:	1941      	adds	r1, r0, r5
 800c124:	4d14      	ldr	r5, [pc, #80]	; (800c178 <Module_MessagingTask+0x140>)
 800c126:	1949      	adds	r1, r1, r5
 800c128:	4816      	ldr	r0, [pc, #88]	; (800c184 <Module_MessagingTask+0x14c>)
 800c12a:	f007 fe12 	bl	8013d52 <memcpy>
          SendMessageFromPort(PORT_BTC_CONN, 0, 0, CODE_H23Rx_CONNECT_INQUIRE, lenPar - 2);
 800c12e:	3e02      	subs	r6, #2
 800c130:	b2b6      	uxth	r6, r6
 800c132:	9600      	str	r6, [sp, #0]
 800c134:	4b14      	ldr	r3, [pc, #80]	; (800c188 <Module_MessagingTask+0x150>)
 800c136:	2200      	movs	r2, #0
 800c138:	2100      	movs	r1, #0
 800c13a:	2006      	movs	r0, #6
 800c13c:	f7fd f89a 	bl	8009274 <SendMessageFromPort>
 800c140:	e009      	b.n	800c156 <Module_MessagingTask+0x11e>
        memcpy((char *)&messageParams[0], (char *)pcMessageMustScan, strlen((char *)pcMessageMustScan));
 800c142:	2220      	movs	r2, #32
 800c144:	4911      	ldr	r1, [pc, #68]	; (800c18c <Module_MessagingTask+0x154>)
 800c146:	480f      	ldr	r0, [pc, #60]	; (800c184 <Module_MessagingTask+0x14c>)
 800c148:	f007 fe03 	bl	8013d52 <memcpy>
        SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char *)pcMessageMustScan));
 800c14c:	2220      	movs	r2, #32
 800c14e:	2118      	movs	r1, #24
 800c150:	0020      	movs	r0, r4
 800c152:	f7fd fab7 	bl	80096c4 <SendMessageToModule>
      dstModule = src;
 800c156:	4b07      	ldr	r3, [pc, #28]	; (800c174 <Module_MessagingTask+0x13c>)
 800c158:	701c      	strb	r4, [r3, #0]
	Module_Status result = H23Rx_OK;
 800c15a:	2000      	movs	r0, #0
      break;
 800c15c:	e000      	b.n	800c160 <Module_MessagingTask+0x128>
	Module_Status result = H23Rx_OK;
 800c15e:	2000      	movs	r0, #0
}
 800c160:	b002      	add	sp, #8
 800c162:	bd70      	pop	{r4, r5, r6, pc}
 800c164:	fffff95c 	.word	0xfffff95c
 800c168:	0801b244 	.word	0x0801b244
 800c16c:	20001875 	.word	0x20001875
 800c170:	000006b6 	.word	0x000006b6
 800c174:	200017a0 	.word	0x200017a0
 800c178:	20000d08 	.word	0x20000d08
 800c17c:	20000f30 	.word	0x20000f30
 800c180:	08019ab0 	.word	0x08019ab0
 800c184:	20000f38 	.word	0x20000f38
 800c188:	000006b9 	.word	0x000006b9
 800c18c:	0801b324 	.word	0x0801b324

0800c190 <GetPort>:
	if (huart->Instance == USART4)
 800c190:	6800      	ldr	r0, [r0, #0]
 800c192:	4b11      	ldr	r3, [pc, #68]	; (800c1d8 <GetPort+0x48>)
 800c194:	4298      	cmp	r0, r3
 800c196:	d014      	beq.n	800c1c2 <GetPort+0x32>
	else if (huart->Instance == USART2)
 800c198:	4b10      	ldr	r3, [pc, #64]	; (800c1dc <GetPort+0x4c>)
 800c19a:	4298      	cmp	r0, r3
 800c19c:	d013      	beq.n	800c1c6 <GetPort+0x36>
	else if (huart->Instance == USART6)
 800c19e:	4b10      	ldr	r3, [pc, #64]	; (800c1e0 <GetPort+0x50>)
 800c1a0:	4298      	cmp	r0, r3
 800c1a2:	d012      	beq.n	800c1ca <GetPort+0x3a>
	else if (huart->Instance == USART1)
 800c1a4:	4b0f      	ldr	r3, [pc, #60]	; (800c1e4 <GetPort+0x54>)
 800c1a6:	4298      	cmp	r0, r3
 800c1a8:	d011      	beq.n	800c1ce <GetPort+0x3e>
	else if (huart->Instance == USART5)
 800c1aa:	4b0f      	ldr	r3, [pc, #60]	; (800c1e8 <GetPort+0x58>)
 800c1ac:	4298      	cmp	r0, r3
 800c1ae:	d010      	beq.n	800c1d2 <GetPort+0x42>
	return 0;
 800c1b0:	4b0e      	ldr	r3, [pc, #56]	; (800c1ec <GetPort+0x5c>)
 800c1b2:	469c      	mov	ip, r3
 800c1b4:	4460      	add	r0, ip
 800c1b6:	4243      	negs	r3, r0
 800c1b8:	4158      	adcs	r0, r3
 800c1ba:	4240      	negs	r0, r0
 800c1bc:	2306      	movs	r3, #6
 800c1be:	4018      	ands	r0, r3
}
 800c1c0:	4770      	bx	lr
			return P1;
 800c1c2:	2001      	movs	r0, #1
 800c1c4:	e7fc      	b.n	800c1c0 <GetPort+0x30>
			return P2;
 800c1c6:	2002      	movs	r0, #2
 800c1c8:	e7fa      	b.n	800c1c0 <GetPort+0x30>
			return P3;
 800c1ca:	2003      	movs	r0, #3
 800c1cc:	e7f8      	b.n	800c1c0 <GetPort+0x30>
			return P4;
 800c1ce:	2004      	movs	r0, #4
 800c1d0:	e7f6      	b.n	800c1c0 <GetPort+0x30>
			return P5;
 800c1d2:	2005      	movs	r0, #5
 800c1d4:	e7f4      	b.n	800c1c0 <GetPort+0x30>
 800c1d6:	46c0      	nop			; (mov r8, r8)
 800c1d8:	40004c00 	.word	0x40004c00
 800c1dc:	40004400 	.word	0x40004400
 800c1e0:	40011400 	.word	0x40011400
 800c1e4:	40013800 	.word	0x40013800
 800c1e8:	40005000 	.word	0x40005000
 800c1ec:	bfffb800 	.word	0xbfffb800

0800c1f0 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c1f0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c1f2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c1f8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c1fa:	2280      	movs	r2, #128	; 0x80
 800c1fc:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c1fe:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c200:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c202:	3320      	adds	r3, #32
 800c204:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c206:	2380      	movs	r3, #128	; 0x80
 800c208:	019b      	lsls	r3, r3, #6
 800c20a:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c20c:	f004 fddc 	bl	8010dc8 <HAL_DMA_Init>
}
 800c210:	bd10      	pop	{r4, pc}

0800c212 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c212:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c214:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c216:	2310      	movs	r3, #16
 800c218:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c21a:	2300      	movs	r3, #0
 800c21c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c21e:	2280      	movs	r2, #128	; 0x80
 800c220:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c222:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c224:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c226:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c228:	2380      	movs	r3, #128	; 0x80
 800c22a:	019b      	lsls	r3, r3, #6
 800c22c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c22e:	f004 fdcb 	bl	8010dc8 <HAL_DMA_Init>
}
 800c232:	bd10      	pop	{r4, pc}

0800c234 <DMA_Init>:
{
 800c234:	b510      	push	{r4, lr}
 800c236:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800c238:	4b20      	ldr	r3, [pc, #128]	; (800c2bc <DMA_Init+0x88>)
 800c23a:	6959      	ldr	r1, [r3, #20]
 800c23c:	2201      	movs	r2, #1
 800c23e:	4311      	orrs	r1, r2
 800c240:	6159      	str	r1, [r3, #20]
 800c242:	6959      	ldr	r1, [r3, #20]
 800c244:	400a      	ands	r2, r1
 800c246:	9200      	str	r2, [sp, #0]
 800c248:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800c24a:	6959      	ldr	r1, [r3, #20]
 800c24c:	2202      	movs	r2, #2
 800c24e:	4311      	orrs	r1, r2
 800c250:	6159      	str	r1, [r3, #20]
 800c252:	695b      	ldr	r3, [r3, #20]
 800c254:	401a      	ands	r2, r3
 800c256:	9201      	str	r2, [sp, #4]
 800c258:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800c25a:	4c19      	ldr	r4, [pc, #100]	; (800c2c0 <DMA_Init+0x8c>)
 800c25c:	4919      	ldr	r1, [pc, #100]	; (800c2c4 <DMA_Init+0x90>)
 800c25e:	0020      	movs	r0, r4
 800c260:	f7ff ffc6 	bl	800c1f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800c264:	0020      	movs	r0, r4
 800c266:	3038      	adds	r0, #56	; 0x38
 800c268:	4917      	ldr	r1, [pc, #92]	; (800c2c8 <DMA_Init+0x94>)
 800c26a:	f7ff ffc1 	bl	800c1f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800c26e:	0020      	movs	r0, r4
 800c270:	3070      	adds	r0, #112	; 0x70
 800c272:	4916      	ldr	r1, [pc, #88]	; (800c2cc <DMA_Init+0x98>)
 800c274:	f7ff ffbc 	bl	800c1f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800c278:	0020      	movs	r0, r4
 800c27a:	30a8      	adds	r0, #168	; 0xa8
 800c27c:	4914      	ldr	r1, [pc, #80]	; (800c2d0 <DMA_Init+0x9c>)
 800c27e:	f7ff ffb7 	bl	800c1f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800c282:	0020      	movs	r0, r4
 800c284:	30e0      	adds	r0, #224	; 0xe0
 800c286:	4913      	ldr	r1, [pc, #76]	; (800c2d4 <DMA_Init+0xa0>)
 800c288:	f7ff ffb2 	bl	800c1f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800c28c:	0020      	movs	r0, r4
 800c28e:	3019      	adds	r0, #25
 800c290:	30ff      	adds	r0, #255	; 0xff
 800c292:	4911      	ldr	r1, [pc, #68]	; (800c2d8 <DMA_Init+0xa4>)
 800c294:	f7ff ffac 	bl	800c1f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800c298:	4c10      	ldr	r4, [pc, #64]	; (800c2dc <DMA_Init+0xa8>)
 800c29a:	4911      	ldr	r1, [pc, #68]	; (800c2e0 <DMA_Init+0xac>)
 800c29c:	0020      	movs	r0, r4
 800c29e:	f7ff ffb8 	bl	800c212 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800c2a2:	0020      	movs	r0, r4
 800c2a4:	3038      	adds	r0, #56	; 0x38
 800c2a6:	490f      	ldr	r1, [pc, #60]	; (800c2e4 <DMA_Init+0xb0>)
 800c2a8:	f7ff ffb3 	bl	800c212 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800c2ac:	0020      	movs	r0, r4
 800c2ae:	3070      	adds	r0, #112	; 0x70
 800c2b0:	490d      	ldr	r1, [pc, #52]	; (800c2e8 <DMA_Init+0xb4>)
 800c2b2:	f7ff ffae 	bl	800c212 <DMA_MSG_TX_CH_Init>
}
 800c2b6:	b002      	add	sp, #8
 800c2b8:	bd10      	pop	{r4, pc}
 800c2ba:	46c0      	nop			; (mov r8, r8)
 800c2bc:	40021000 	.word	0x40021000
 800c2c0:	20001878 	.word	0x20001878
 800c2c4:	40020008 	.word	0x40020008
 800c2c8:	40020030 	.word	0x40020030
 800c2cc:	40020058 	.word	0x40020058
 800c2d0:	4002006c 	.word	0x4002006c
 800c2d4:	4002041c 	.word	0x4002041c
 800c2d8:	40020430 	.word	0x40020430
 800c2dc:	200019c8 	.word	0x200019c8
 800c2e0:	4002001c 	.word	0x4002001c
 800c2e4:	40020044 	.word	0x40020044
 800c2e8:	40020080 	.word	0x40020080

0800c2ec <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c2ec:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c2ee:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c2f4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800c2f6:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c2f8:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c2fa:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c2fc:	3320      	adds	r3, #32
 800c2fe:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800c300:	2380      	movs	r3, #128	; 0x80
 800c302:	015b      	lsls	r3, r3, #5
 800c304:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c306:	f004 fd5f 	bl	8010dc8 <HAL_DMA_Init>
}
 800c30a:	bd10      	pop	{r4, pc}

0800c30c <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800c30c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c30e:	6803      	ldr	r3, [r0, #0]
 800c310:	4a20      	ldr	r2, [pc, #128]	; (800c394 <SetupDMAInterrupts+0x88>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d020      	beq.n	800c358 <SetupDMAInterrupts+0x4c>
 800c316:	d827      	bhi.n	800c368 <SetupDMAInterrupts+0x5c>
 800c318:	4a1f      	ldr	r2, [pc, #124]	; (800c398 <SetupDMAInterrupts+0x8c>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d00e      	beq.n	800c33c <SetupDMAInterrupts+0x30>
 800c31e:	d815      	bhi.n	800c34c <SetupDMAInterrupts+0x40>
 800c320:	4a1e      	ldr	r2, [pc, #120]	; (800c39c <SetupDMAInterrupts+0x90>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d107      	bne.n	800c336 <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800c326:	2200      	movs	r2, #0
 800c328:	2009      	movs	r0, #9
 800c32a:	f004 fbaf 	bl	8010a8c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800c32e:	2009      	movs	r0, #9
 800c330:	f004 fbe0 	bl	8010af4 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c334:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c336:	4a1a      	ldr	r2, [pc, #104]	; (800c3a0 <SetupDMAInterrupts+0x94>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d1fb      	bne.n	800c334 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800c33c:	2200      	movs	r2, #0
 800c33e:	200a      	movs	r0, #10
 800c340:	f004 fba4 	bl	8010a8c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c344:	200a      	movs	r0, #10
 800c346:	f004 fbd5 	bl	8010af4 <HAL_NVIC_EnableIRQ>
			break;
 800c34a:	e7f3      	b.n	800c334 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800c34c:	4a15      	ldr	r2, [pc, #84]	; (800c3a4 <SetupDMAInterrupts+0x98>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d002      	beq.n	800c358 <SetupDMAInterrupts+0x4c>
 800c352:	4a15      	ldr	r2, [pc, #84]	; (800c3a8 <SetupDMAInterrupts+0x9c>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d1ed      	bne.n	800c334 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800c358:	2200      	movs	r2, #0
 800c35a:	200b      	movs	r0, #11
 800c35c:	f004 fb96 	bl	8010a8c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c360:	200b      	movs	r0, #11
 800c362:	f004 fbc7 	bl	8010af4 <HAL_NVIC_EnableIRQ>
}
 800c366:	e7e5      	b.n	800c334 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800c368:	4a10      	ldr	r2, [pc, #64]	; (800c3ac <SetupDMAInterrupts+0xa0>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d0e6      	beq.n	800c33c <SetupDMAInterrupts+0x30>
 800c36e:	d909      	bls.n	800c384 <SetupDMAInterrupts+0x78>
 800c370:	4a0f      	ldr	r2, [pc, #60]	; (800c3b0 <SetupDMAInterrupts+0xa4>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d0f0      	beq.n	800c358 <SetupDMAInterrupts+0x4c>
 800c376:	4a0f      	ldr	r2, [pc, #60]	; (800c3b4 <SetupDMAInterrupts+0xa8>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d0ed      	beq.n	800c358 <SetupDMAInterrupts+0x4c>
 800c37c:	4a0e      	ldr	r2, [pc, #56]	; (800c3b8 <SetupDMAInterrupts+0xac>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d1d8      	bne.n	800c334 <SetupDMAInterrupts+0x28>
 800c382:	e7e9      	b.n	800c358 <SetupDMAInterrupts+0x4c>
 800c384:	4a0d      	ldr	r2, [pc, #52]	; (800c3bc <SetupDMAInterrupts+0xb0>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d0e6      	beq.n	800c358 <SetupDMAInterrupts+0x4c>
 800c38a:	4a0d      	ldr	r2, [pc, #52]	; (800c3c0 <SetupDMAInterrupts+0xb4>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d0d5      	beq.n	800c33c <SetupDMAInterrupts+0x30>
 800c390:	e7d0      	b.n	800c334 <SetupDMAInterrupts+0x28>
 800c392:	46c0      	nop			; (mov r8, r8)
 800c394:	4002006c 	.word	0x4002006c
 800c398:	40020030 	.word	0x40020030
 800c39c:	40020008 	.word	0x40020008
 800c3a0:	4002001c 	.word	0x4002001c
 800c3a4:	40020044 	.word	0x40020044
 800c3a8:	40020058 	.word	0x40020058
 800c3ac:	4002041c 	.word	0x4002041c
 800c3b0:	40020444 	.word	0x40020444
 800c3b4:	40020458 	.word	0x40020458
 800c3b8:	40020430 	.word	0x40020430
 800c3bc:	40020080 	.word	0x40020080
 800c3c0:	40020408 	.word	0x40020408

0800c3c4 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800c3c4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c3c6:	6803      	ldr	r3, [r0, #0]
 800c3c8:	4a1a      	ldr	r2, [pc, #104]	; (800c434 <UnSetupDMAInterrupts+0x70>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d018      	beq.n	800c400 <UnSetupDMAInterrupts+0x3c>
 800c3ce:	d81b      	bhi.n	800c408 <UnSetupDMAInterrupts+0x44>
 800c3d0:	4a19      	ldr	r2, [pc, #100]	; (800c438 <UnSetupDMAInterrupts+0x74>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d00a      	beq.n	800c3ec <UnSetupDMAInterrupts+0x28>
 800c3d6:	d80d      	bhi.n	800c3f4 <UnSetupDMAInterrupts+0x30>
 800c3d8:	4a18      	ldr	r2, [pc, #96]	; (800c43c <UnSetupDMAInterrupts+0x78>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d103      	bne.n	800c3e6 <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800c3de:	2009      	movs	r0, #9
 800c3e0:	f004 fb92 	bl	8010b08 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c3e4:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c3e6:	4a16      	ldr	r2, [pc, #88]	; (800c440 <UnSetupDMAInterrupts+0x7c>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d1fb      	bne.n	800c3e4 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c3ec:	200a      	movs	r0, #10
 800c3ee:	f004 fb8b 	bl	8010b08 <HAL_NVIC_DisableIRQ>
			break;
 800c3f2:	e7f7      	b.n	800c3e4 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800c3f4:	4a13      	ldr	r2, [pc, #76]	; (800c444 <UnSetupDMAInterrupts+0x80>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d002      	beq.n	800c400 <UnSetupDMAInterrupts+0x3c>
 800c3fa:	4a13      	ldr	r2, [pc, #76]	; (800c448 <UnSetupDMAInterrupts+0x84>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d1f1      	bne.n	800c3e4 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c400:	200b      	movs	r0, #11
 800c402:	f004 fb81 	bl	8010b08 <HAL_NVIC_DisableIRQ>
}
 800c406:	e7ed      	b.n	800c3e4 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800c408:	4a10      	ldr	r2, [pc, #64]	; (800c44c <UnSetupDMAInterrupts+0x88>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d0ee      	beq.n	800c3ec <UnSetupDMAInterrupts+0x28>
 800c40e:	d909      	bls.n	800c424 <UnSetupDMAInterrupts+0x60>
 800c410:	4a0f      	ldr	r2, [pc, #60]	; (800c450 <UnSetupDMAInterrupts+0x8c>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d0f4      	beq.n	800c400 <UnSetupDMAInterrupts+0x3c>
 800c416:	4a0f      	ldr	r2, [pc, #60]	; (800c454 <UnSetupDMAInterrupts+0x90>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d0f1      	beq.n	800c400 <UnSetupDMAInterrupts+0x3c>
 800c41c:	4a0e      	ldr	r2, [pc, #56]	; (800c458 <UnSetupDMAInterrupts+0x94>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d1e0      	bne.n	800c3e4 <UnSetupDMAInterrupts+0x20>
 800c422:	e7ed      	b.n	800c400 <UnSetupDMAInterrupts+0x3c>
 800c424:	4a0d      	ldr	r2, [pc, #52]	; (800c45c <UnSetupDMAInterrupts+0x98>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d0ea      	beq.n	800c400 <UnSetupDMAInterrupts+0x3c>
 800c42a:	4a0d      	ldr	r2, [pc, #52]	; (800c460 <UnSetupDMAInterrupts+0x9c>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d0dd      	beq.n	800c3ec <UnSetupDMAInterrupts+0x28>
 800c430:	e7d8      	b.n	800c3e4 <UnSetupDMAInterrupts+0x20>
 800c432:	46c0      	nop			; (mov r8, r8)
 800c434:	4002006c 	.word	0x4002006c
 800c438:	40020030 	.word	0x40020030
 800c43c:	40020008 	.word	0x40020008
 800c440:	4002001c 	.word	0x4002001c
 800c444:	40020044 	.word	0x40020044
 800c448:	40020058 	.word	0x40020058
 800c44c:	4002041c 	.word	0x4002041c
 800c450:	40020444 	.word	0x40020444
 800c454:	40020458 	.word	0x40020458
 800c458:	40020430 	.word	0x40020430
 800c45c:	40020080 	.word	0x40020080
 800c460:	40020408 	.word	0x40020408

0800c464 <DMA_MSG_TX_UnSetup>:
{	
 800c464:	b510      	push	{r4, lr}
 800c466:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800c468:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c46a:	f7ff ffab 	bl	800c3c4 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800c46e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c470:	2300      	movs	r3, #0
 800c472:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800c474:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c476:	bd10      	pop	{r4, pc}

0800c478 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c478:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c47a:	6803      	ldr	r3, [r0, #0]
 800c47c:	4abd      	ldr	r2, [pc, #756]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d02f      	beq.n	800c4e2 <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c482:	4abd      	ldr	r2, [pc, #756]	; (800c778 <RemapAndLinkDMAtoUARTRx+0x300>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d100      	bne.n	800c48a <RemapAndLinkDMAtoUARTRx+0x12>
 800c488:	e087      	b.n	800c59a <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c48a:	4abc      	ldr	r2, [pc, #752]	; (800c77c <RemapAndLinkDMAtoUARTRx+0x304>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d100      	bne.n	800c492 <RemapAndLinkDMAtoUARTRx+0x1a>
 800c490:	e0dc      	b.n	800c64c <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c492:	4abb      	ldr	r2, [pc, #748]	; (800c780 <RemapAndLinkDMAtoUARTRx+0x308>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d000      	beq.n	800c49a <RemapAndLinkDMAtoUARTRx+0x22>
 800c498:	e18a      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x338>
 800c49a:	680b      	ldr	r3, [r1, #0]
 800c49c:	4ab9      	ldr	r2, [pc, #740]	; (800c784 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d100      	bne.n	800c4a4 <RemapAndLinkDMAtoUARTRx+0x2c>
 800c4a2:	e12d      	b.n	800c700 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c4a4:	4ab8      	ldr	r2, [pc, #736]	; (800c788 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d100      	bne.n	800c4ac <RemapAndLinkDMAtoUARTRx+0x34>
 800c4aa:	e134      	b.n	800c716 <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c4ac:	4ab7      	ldr	r2, [pc, #732]	; (800c78c <RemapAndLinkDMAtoUARTRx+0x314>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d100      	bne.n	800c4b4 <RemapAndLinkDMAtoUARTRx+0x3c>
 800c4b2:	e13c      	b.n	800c72e <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c4b4:	4ab6      	ldr	r2, [pc, #728]	; (800c790 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d100      	bne.n	800c4bc <RemapAndLinkDMAtoUARTRx+0x44>
 800c4ba:	e144      	b.n	800c746 <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c4bc:	4ab5      	ldr	r2, [pc, #724]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d100      	bne.n	800c4c4 <RemapAndLinkDMAtoUARTRx+0x4c>
 800c4c2:	e14c      	b.n	800c75e <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c4c4:	4ab4      	ldr	r2, [pc, #720]	; (800c798 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d11e      	bne.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c4ca:	4ab4      	ldr	r2, [pc, #720]	; (800c79c <RemapAndLinkDMAtoUARTRx+0x324>)
 800c4cc:	23a8      	movs	r3, #168	; 0xa8
 800c4ce:	58d4      	ldr	r4, [r2, r3]
 800c4d0:	4db3      	ldr	r5, [pc, #716]	; (800c7a0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c4d2:	402c      	ands	r4, r5
 800c4d4:	50d4      	str	r4, [r2, r3]
 800c4d6:	58d5      	ldr	r5, [r2, r3]
 800c4d8:	24b0      	movs	r4, #176	; 0xb0
 800c4da:	0124      	lsls	r4, r4, #4
 800c4dc:	432c      	orrs	r4, r5
 800c4de:	50d4      	str	r4, [r2, r3]
 800c4e0:	e012      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c4e2:	680b      	ldr	r3, [r1, #0]
 800c4e4:	4aa7      	ldr	r2, [pc, #668]	; (800c784 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d011      	beq.n	800c50e <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c4ea:	4aa7      	ldr	r2, [pc, #668]	; (800c788 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d019      	beq.n	800c524 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c4f0:	4aa6      	ldr	r2, [pc, #664]	; (800c78c <RemapAndLinkDMAtoUARTRx+0x314>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d022      	beq.n	800c53c <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c4f6:	4aa6      	ldr	r2, [pc, #664]	; (800c790 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d02b      	beq.n	800c554 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c4fc:	4aa5      	ldr	r2, [pc, #660]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d034      	beq.n	800c56c <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c502:	4aa5      	ldr	r2, [pc, #660]	; (800c798 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d03c      	beq.n	800c582 <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c508:	6641      	str	r1, [r0, #100]	; 0x64
 800c50a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c50c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c50e:	4aa5      	ldr	r2, [pc, #660]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c510:	23a8      	movs	r3, #168	; 0xa8
 800c512:	58d4      	ldr	r4, [r2, r3]
 800c514:	250f      	movs	r5, #15
 800c516:	43ac      	bics	r4, r5
 800c518:	50d4      	str	r4, [r2, r3]
 800c51a:	58d4      	ldr	r4, [r2, r3]
 800c51c:	3d07      	subs	r5, #7
 800c51e:	432c      	orrs	r4, r5
 800c520:	50d4      	str	r4, [r2, r3]
 800c522:	e7f1      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c524:	4a9f      	ldr	r2, [pc, #636]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c526:	23a8      	movs	r3, #168	; 0xa8
 800c528:	58d4      	ldr	r4, [r2, r3]
 800c52a:	4d9d      	ldr	r5, [pc, #628]	; (800c7a0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c52c:	402c      	ands	r4, r5
 800c52e:	50d4      	str	r4, [r2, r3]
 800c530:	58d5      	ldr	r5, [r2, r3]
 800c532:	2480      	movs	r4, #128	; 0x80
 800c534:	0124      	lsls	r4, r4, #4
 800c536:	432c      	orrs	r4, r5
 800c538:	50d4      	str	r4, [r2, r3]
 800c53a:	e7e5      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c53c:	4a99      	ldr	r2, [pc, #612]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c53e:	23a8      	movs	r3, #168	; 0xa8
 800c540:	58d4      	ldr	r4, [r2, r3]
 800c542:	4d99      	ldr	r5, [pc, #612]	; (800c7a8 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c544:	402c      	ands	r4, r5
 800c546:	50d4      	str	r4, [r2, r3]
 800c548:	58d5      	ldr	r5, [r2, r3]
 800c54a:	2480      	movs	r4, #128	; 0x80
 800c54c:	0324      	lsls	r4, r4, #12
 800c54e:	432c      	orrs	r4, r5
 800c550:	50d4      	str	r4, [r2, r3]
 800c552:	e7d9      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c554:	4a93      	ldr	r2, [pc, #588]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c556:	23a8      	movs	r3, #168	; 0xa8
 800c558:	58d4      	ldr	r4, [r2, r3]
 800c55a:	4d94      	ldr	r5, [pc, #592]	; (800c7ac <RemapAndLinkDMAtoUARTRx+0x334>)
 800c55c:	402c      	ands	r4, r5
 800c55e:	50d4      	str	r4, [r2, r3]
 800c560:	58d5      	ldr	r5, [r2, r3]
 800c562:	2480      	movs	r4, #128	; 0x80
 800c564:	0424      	lsls	r4, r4, #16
 800c566:	432c      	orrs	r4, r5
 800c568:	50d4      	str	r4, [r2, r3]
 800c56a:	e7cd      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c56c:	4a8b      	ldr	r2, [pc, #556]	; (800c79c <RemapAndLinkDMAtoUARTRx+0x324>)
 800c56e:	23a8      	movs	r3, #168	; 0xa8
 800c570:	58d4      	ldr	r4, [r2, r3]
 800c572:	25f0      	movs	r5, #240	; 0xf0
 800c574:	43ac      	bics	r4, r5
 800c576:	50d4      	str	r4, [r2, r3]
 800c578:	58d4      	ldr	r4, [r2, r3]
 800c57a:	3d70      	subs	r5, #112	; 0x70
 800c57c:	432c      	orrs	r4, r5
 800c57e:	50d4      	str	r4, [r2, r3]
 800c580:	e7c2      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c582:	4a86      	ldr	r2, [pc, #536]	; (800c79c <RemapAndLinkDMAtoUARTRx+0x324>)
 800c584:	23a8      	movs	r3, #168	; 0xa8
 800c586:	58d4      	ldr	r4, [r2, r3]
 800c588:	4d85      	ldr	r5, [pc, #532]	; (800c7a0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c58a:	402c      	ands	r4, r5
 800c58c:	50d4      	str	r4, [r2, r3]
 800c58e:	58d5      	ldr	r5, [r2, r3]
 800c590:	2480      	movs	r4, #128	; 0x80
 800c592:	0124      	lsls	r4, r4, #4
 800c594:	432c      	orrs	r4, r5
 800c596:	50d4      	str	r4, [r2, r3]
 800c598:	e7b6      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c59a:	680b      	ldr	r3, [r1, #0]
 800c59c:	4a79      	ldr	r2, [pc, #484]	; (800c784 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d01a      	beq.n	800c5d8 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c5a2:	4a79      	ldr	r2, [pc, #484]	; (800c788 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d022      	beq.n	800c5ee <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c5a8:	4a78      	ldr	r2, [pc, #480]	; (800c78c <RemapAndLinkDMAtoUARTRx+0x314>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d02b      	beq.n	800c606 <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c5ae:	4a78      	ldr	r2, [pc, #480]	; (800c790 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d034      	beq.n	800c61e <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c5b4:	4a77      	ldr	r2, [pc, #476]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d03d      	beq.n	800c636 <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c5ba:	4a77      	ldr	r2, [pc, #476]	; (800c798 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d1a3      	bne.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c5c0:	4a76      	ldr	r2, [pc, #472]	; (800c79c <RemapAndLinkDMAtoUARTRx+0x324>)
 800c5c2:	23a8      	movs	r3, #168	; 0xa8
 800c5c4:	58d4      	ldr	r4, [r2, r3]
 800c5c6:	4d76      	ldr	r5, [pc, #472]	; (800c7a0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c5c8:	402c      	ands	r4, r5
 800c5ca:	50d4      	str	r4, [r2, r3]
 800c5cc:	58d5      	ldr	r5, [r2, r3]
 800c5ce:	2490      	movs	r4, #144	; 0x90
 800c5d0:	0124      	lsls	r4, r4, #4
 800c5d2:	432c      	orrs	r4, r5
 800c5d4:	50d4      	str	r4, [r2, r3]
 800c5d6:	e797      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800c5d8:	4a72      	ldr	r2, [pc, #456]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c5da:	23a8      	movs	r3, #168	; 0xa8
 800c5dc:	58d4      	ldr	r4, [r2, r3]
 800c5de:	250f      	movs	r5, #15
 800c5e0:	43ac      	bics	r4, r5
 800c5e2:	50d4      	str	r4, [r2, r3]
 800c5e4:	58d4      	ldr	r4, [r2, r3]
 800c5e6:	3d06      	subs	r5, #6
 800c5e8:	432c      	orrs	r4, r5
 800c5ea:	50d4      	str	r4, [r2, r3]
 800c5ec:	e78c      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800c5ee:	4a6d      	ldr	r2, [pc, #436]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c5f0:	23a8      	movs	r3, #168	; 0xa8
 800c5f2:	58d4      	ldr	r4, [r2, r3]
 800c5f4:	4d6a      	ldr	r5, [pc, #424]	; (800c7a0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c5f6:	402c      	ands	r4, r5
 800c5f8:	50d4      	str	r4, [r2, r3]
 800c5fa:	58d5      	ldr	r5, [r2, r3]
 800c5fc:	2490      	movs	r4, #144	; 0x90
 800c5fe:	0124      	lsls	r4, r4, #4
 800c600:	432c      	orrs	r4, r5
 800c602:	50d4      	str	r4, [r2, r3]
 800c604:	e780      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800c606:	4a67      	ldr	r2, [pc, #412]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c608:	23a8      	movs	r3, #168	; 0xa8
 800c60a:	58d4      	ldr	r4, [r2, r3]
 800c60c:	4d66      	ldr	r5, [pc, #408]	; (800c7a8 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c60e:	402c      	ands	r4, r5
 800c610:	50d4      	str	r4, [r2, r3]
 800c612:	58d5      	ldr	r5, [r2, r3]
 800c614:	2490      	movs	r4, #144	; 0x90
 800c616:	0324      	lsls	r4, r4, #12
 800c618:	432c      	orrs	r4, r5
 800c61a:	50d4      	str	r4, [r2, r3]
 800c61c:	e774      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800c61e:	4a61      	ldr	r2, [pc, #388]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c620:	23a8      	movs	r3, #168	; 0xa8
 800c622:	58d4      	ldr	r4, [r2, r3]
 800c624:	4d61      	ldr	r5, [pc, #388]	; (800c7ac <RemapAndLinkDMAtoUARTRx+0x334>)
 800c626:	402c      	ands	r4, r5
 800c628:	50d4      	str	r4, [r2, r3]
 800c62a:	58d5      	ldr	r5, [r2, r3]
 800c62c:	2490      	movs	r4, #144	; 0x90
 800c62e:	0424      	lsls	r4, r4, #16
 800c630:	432c      	orrs	r4, r5
 800c632:	50d4      	str	r4, [r2, r3]
 800c634:	e768      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800c636:	4a59      	ldr	r2, [pc, #356]	; (800c79c <RemapAndLinkDMAtoUARTRx+0x324>)
 800c638:	23a8      	movs	r3, #168	; 0xa8
 800c63a:	58d4      	ldr	r4, [r2, r3]
 800c63c:	25f0      	movs	r5, #240	; 0xf0
 800c63e:	43ac      	bics	r4, r5
 800c640:	50d4      	str	r4, [r2, r3]
 800c642:	58d4      	ldr	r4, [r2, r3]
 800c644:	3d60      	subs	r5, #96	; 0x60
 800c646:	432c      	orrs	r4, r5
 800c648:	50d4      	str	r4, [r2, r3]
 800c64a:	e75d      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c64c:	680b      	ldr	r3, [r1, #0]
 800c64e:	4a4d      	ldr	r2, [pc, #308]	; (800c784 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d01b      	beq.n	800c68c <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c654:	4a4c      	ldr	r2, [pc, #304]	; (800c788 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d023      	beq.n	800c6a2 <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c65a:	4a4c      	ldr	r2, [pc, #304]	; (800c78c <RemapAndLinkDMAtoUARTRx+0x314>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d02c      	beq.n	800c6ba <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c660:	4a4b      	ldr	r2, [pc, #300]	; (800c790 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d035      	beq.n	800c6d2 <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c666:	4a4b      	ldr	r2, [pc, #300]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d03e      	beq.n	800c6ea <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c66c:	4a4a      	ldr	r2, [pc, #296]	; (800c798 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d000      	beq.n	800c674 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800c672:	e749      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c674:	4a49      	ldr	r2, [pc, #292]	; (800c79c <RemapAndLinkDMAtoUARTRx+0x324>)
 800c676:	23a8      	movs	r3, #168	; 0xa8
 800c678:	58d4      	ldr	r4, [r2, r3]
 800c67a:	4d49      	ldr	r5, [pc, #292]	; (800c7a0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c67c:	402c      	ands	r4, r5
 800c67e:	50d4      	str	r4, [r2, r3]
 800c680:	58d5      	ldr	r5, [r2, r3]
 800c682:	24a0      	movs	r4, #160	; 0xa0
 800c684:	0124      	lsls	r4, r4, #4
 800c686:	432c      	orrs	r4, r5
 800c688:	50d4      	str	r4, [r2, r3]
 800c68a:	e73d      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800c68c:	4a45      	ldr	r2, [pc, #276]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c68e:	23a8      	movs	r3, #168	; 0xa8
 800c690:	58d4      	ldr	r4, [r2, r3]
 800c692:	250f      	movs	r5, #15
 800c694:	43ac      	bics	r4, r5
 800c696:	50d4      	str	r4, [r2, r3]
 800c698:	58d4      	ldr	r4, [r2, r3]
 800c69a:	3d05      	subs	r5, #5
 800c69c:	432c      	orrs	r4, r5
 800c69e:	50d4      	str	r4, [r2, r3]
 800c6a0:	e732      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c6a2:	4a40      	ldr	r2, [pc, #256]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c6a4:	23a8      	movs	r3, #168	; 0xa8
 800c6a6:	58d4      	ldr	r4, [r2, r3]
 800c6a8:	4d3d      	ldr	r5, [pc, #244]	; (800c7a0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c6aa:	402c      	ands	r4, r5
 800c6ac:	50d4      	str	r4, [r2, r3]
 800c6ae:	58d5      	ldr	r5, [r2, r3]
 800c6b0:	24a0      	movs	r4, #160	; 0xa0
 800c6b2:	0124      	lsls	r4, r4, #4
 800c6b4:	432c      	orrs	r4, r5
 800c6b6:	50d4      	str	r4, [r2, r3]
 800c6b8:	e726      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c6ba:	4a3a      	ldr	r2, [pc, #232]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c6bc:	23a8      	movs	r3, #168	; 0xa8
 800c6be:	58d4      	ldr	r4, [r2, r3]
 800c6c0:	4d39      	ldr	r5, [pc, #228]	; (800c7a8 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c6c2:	402c      	ands	r4, r5
 800c6c4:	50d4      	str	r4, [r2, r3]
 800c6c6:	58d5      	ldr	r5, [r2, r3]
 800c6c8:	24a0      	movs	r4, #160	; 0xa0
 800c6ca:	0324      	lsls	r4, r4, #12
 800c6cc:	432c      	orrs	r4, r5
 800c6ce:	50d4      	str	r4, [r2, r3]
 800c6d0:	e71a      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c6d2:	4a34      	ldr	r2, [pc, #208]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c6d4:	23a8      	movs	r3, #168	; 0xa8
 800c6d6:	58d4      	ldr	r4, [r2, r3]
 800c6d8:	4d34      	ldr	r5, [pc, #208]	; (800c7ac <RemapAndLinkDMAtoUARTRx+0x334>)
 800c6da:	402c      	ands	r4, r5
 800c6dc:	50d4      	str	r4, [r2, r3]
 800c6de:	58d5      	ldr	r5, [r2, r3]
 800c6e0:	24a0      	movs	r4, #160	; 0xa0
 800c6e2:	0424      	lsls	r4, r4, #16
 800c6e4:	432c      	orrs	r4, r5
 800c6e6:	50d4      	str	r4, [r2, r3]
 800c6e8:	e70e      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c6ea:	4a2c      	ldr	r2, [pc, #176]	; (800c79c <RemapAndLinkDMAtoUARTRx+0x324>)
 800c6ec:	23a8      	movs	r3, #168	; 0xa8
 800c6ee:	58d4      	ldr	r4, [r2, r3]
 800c6f0:	25f0      	movs	r5, #240	; 0xf0
 800c6f2:	43ac      	bics	r4, r5
 800c6f4:	50d4      	str	r4, [r2, r3]
 800c6f6:	58d4      	ldr	r4, [r2, r3]
 800c6f8:	3d50      	subs	r5, #80	; 0x50
 800c6fa:	432c      	orrs	r4, r5
 800c6fc:	50d4      	str	r4, [r2, r3]
 800c6fe:	e703      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c700:	4a28      	ldr	r2, [pc, #160]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c702:	23a8      	movs	r3, #168	; 0xa8
 800c704:	58d4      	ldr	r4, [r2, r3]
 800c706:	250f      	movs	r5, #15
 800c708:	43ac      	bics	r4, r5
 800c70a:	50d4      	str	r4, [r2, r3]
 800c70c:	58d4      	ldr	r4, [r2, r3]
 800c70e:	3d04      	subs	r5, #4
 800c710:	432c      	orrs	r4, r5
 800c712:	50d4      	str	r4, [r2, r3]
 800c714:	e6f8      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c716:	4a23      	ldr	r2, [pc, #140]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c718:	23a8      	movs	r3, #168	; 0xa8
 800c71a:	58d4      	ldr	r4, [r2, r3]
 800c71c:	4d20      	ldr	r5, [pc, #128]	; (800c7a0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c71e:	402c      	ands	r4, r5
 800c720:	50d4      	str	r4, [r2, r3]
 800c722:	58d5      	ldr	r5, [r2, r3]
 800c724:	24b0      	movs	r4, #176	; 0xb0
 800c726:	0124      	lsls	r4, r4, #4
 800c728:	432c      	orrs	r4, r5
 800c72a:	50d4      	str	r4, [r2, r3]
 800c72c:	e6ec      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c72e:	4a1d      	ldr	r2, [pc, #116]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c730:	23a8      	movs	r3, #168	; 0xa8
 800c732:	58d4      	ldr	r4, [r2, r3]
 800c734:	4d1c      	ldr	r5, [pc, #112]	; (800c7a8 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c736:	402c      	ands	r4, r5
 800c738:	50d4      	str	r4, [r2, r3]
 800c73a:	58d5      	ldr	r5, [r2, r3]
 800c73c:	24b0      	movs	r4, #176	; 0xb0
 800c73e:	0324      	lsls	r4, r4, #12
 800c740:	432c      	orrs	r4, r5
 800c742:	50d4      	str	r4, [r2, r3]
 800c744:	e6e0      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c746:	4a17      	ldr	r2, [pc, #92]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c748:	23a8      	movs	r3, #168	; 0xa8
 800c74a:	58d4      	ldr	r4, [r2, r3]
 800c74c:	4d17      	ldr	r5, [pc, #92]	; (800c7ac <RemapAndLinkDMAtoUARTRx+0x334>)
 800c74e:	402c      	ands	r4, r5
 800c750:	50d4      	str	r4, [r2, r3]
 800c752:	58d5      	ldr	r5, [r2, r3]
 800c754:	24b0      	movs	r4, #176	; 0xb0
 800c756:	0424      	lsls	r4, r4, #16
 800c758:	432c      	orrs	r4, r5
 800c75a:	50d4      	str	r4, [r2, r3]
 800c75c:	e6d4      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800c75e:	4a0f      	ldr	r2, [pc, #60]	; (800c79c <RemapAndLinkDMAtoUARTRx+0x324>)
 800c760:	23a8      	movs	r3, #168	; 0xa8
 800c762:	58d4      	ldr	r4, [r2, r3]
 800c764:	25f0      	movs	r5, #240	; 0xf0
 800c766:	43ac      	bics	r4, r5
 800c768:	50d4      	str	r4, [r2, r3]
 800c76a:	58d4      	ldr	r4, [r2, r3]
 800c76c:	3d40      	subs	r5, #64	; 0x40
 800c76e:	432c      	orrs	r4, r5
 800c770:	50d4      	str	r4, [r2, r3]
 800c772:	e6c9      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
 800c774:	40013800 	.word	0x40013800
 800c778:	40004400 	.word	0x40004400
 800c77c:	40004800 	.word	0x40004800
 800c780:	40004c00 	.word	0x40004c00
 800c784:	40020008 	.word	0x40020008
 800c788:	40020030 	.word	0x40020030
 800c78c:	40020058 	.word	0x40020058
 800c790:	4002006c 	.word	0x4002006c
 800c794:	4002041c 	.word	0x4002041c
 800c798:	40020430 	.word	0x40020430
 800c79c:	40020400 	.word	0x40020400
 800c7a0:	fffff0ff 	.word	0xfffff0ff
 800c7a4:	40020000 	.word	0x40020000
 800c7a8:	fff0ffff 	.word	0xfff0ffff
 800c7ac:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c7b0:	4ab9      	ldr	r2, [pc, #740]	; (800ca98 <RemapAndLinkDMAtoUARTRx+0x620>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d159      	bne.n	800c86a <RemapAndLinkDMAtoUARTRx+0x3f2>
 800c7b6:	680b      	ldr	r3, [r1, #0]
 800c7b8:	4ab8      	ldr	r2, [pc, #736]	; (800ca9c <RemapAndLinkDMAtoUARTRx+0x624>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d01b      	beq.n	800c7f6 <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c7be:	4ab8      	ldr	r2, [pc, #736]	; (800caa0 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d023      	beq.n	800c80c <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c7c4:	4ab7      	ldr	r2, [pc, #732]	; (800caa4 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d02c      	beq.n	800c824 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c7ca:	4ab7      	ldr	r2, [pc, #732]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d035      	beq.n	800c83c <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c7d0:	4ab6      	ldr	r2, [pc, #728]	; (800caac <RemapAndLinkDMAtoUARTRx+0x634>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d03e      	beq.n	800c854 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c7d6:	4ab6      	ldr	r2, [pc, #728]	; (800cab0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d000      	beq.n	800c7de <RemapAndLinkDMAtoUARTRx+0x366>
 800c7dc:	e694      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800c7de:	4ab5      	ldr	r2, [pc, #724]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c7e0:	23a8      	movs	r3, #168	; 0xa8
 800c7e2:	58d4      	ldr	r4, [r2, r3]
 800c7e4:	4db4      	ldr	r5, [pc, #720]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c7e6:	402c      	ands	r4, r5
 800c7e8:	50d4      	str	r4, [r2, r3]
 800c7ea:	58d5      	ldr	r5, [r2, r3]
 800c7ec:	24c0      	movs	r4, #192	; 0xc0
 800c7ee:	0124      	lsls	r4, r4, #4
 800c7f0:	432c      	orrs	r4, r5
 800c7f2:	50d4      	str	r4, [r2, r3]
 800c7f4:	e688      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800c7f6:	4ab1      	ldr	r2, [pc, #708]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c7f8:	23a8      	movs	r3, #168	; 0xa8
 800c7fa:	58d4      	ldr	r4, [r2, r3]
 800c7fc:	250f      	movs	r5, #15
 800c7fe:	43ac      	bics	r4, r5
 800c800:	50d4      	str	r4, [r2, r3]
 800c802:	58d4      	ldr	r4, [r2, r3]
 800c804:	3d03      	subs	r5, #3
 800c806:	432c      	orrs	r4, r5
 800c808:	50d4      	str	r4, [r2, r3]
 800c80a:	e67d      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800c80c:	4aab      	ldr	r2, [pc, #684]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c80e:	23a8      	movs	r3, #168	; 0xa8
 800c810:	58d4      	ldr	r4, [r2, r3]
 800c812:	4da9      	ldr	r5, [pc, #676]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c814:	402c      	ands	r4, r5
 800c816:	50d4      	str	r4, [r2, r3]
 800c818:	58d5      	ldr	r5, [r2, r3]
 800c81a:	24c0      	movs	r4, #192	; 0xc0
 800c81c:	0124      	lsls	r4, r4, #4
 800c81e:	432c      	orrs	r4, r5
 800c820:	50d4      	str	r4, [r2, r3]
 800c822:	e671      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800c824:	4aa5      	ldr	r2, [pc, #660]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c826:	23a8      	movs	r3, #168	; 0xa8
 800c828:	58d4      	ldr	r4, [r2, r3]
 800c82a:	4da5      	ldr	r5, [pc, #660]	; (800cac0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c82c:	402c      	ands	r4, r5
 800c82e:	50d4      	str	r4, [r2, r3]
 800c830:	58d5      	ldr	r5, [r2, r3]
 800c832:	24c0      	movs	r4, #192	; 0xc0
 800c834:	0324      	lsls	r4, r4, #12
 800c836:	432c      	orrs	r4, r5
 800c838:	50d4      	str	r4, [r2, r3]
 800c83a:	e665      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800c83c:	4a9f      	ldr	r2, [pc, #636]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c83e:	23a8      	movs	r3, #168	; 0xa8
 800c840:	58d4      	ldr	r4, [r2, r3]
 800c842:	4da0      	ldr	r5, [pc, #640]	; (800cac4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c844:	402c      	ands	r4, r5
 800c846:	50d4      	str	r4, [r2, r3]
 800c848:	58d5      	ldr	r5, [r2, r3]
 800c84a:	24c0      	movs	r4, #192	; 0xc0
 800c84c:	0424      	lsls	r4, r4, #16
 800c84e:	432c      	orrs	r4, r5
 800c850:	50d4      	str	r4, [r2, r3]
 800c852:	e659      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800c854:	4a97      	ldr	r2, [pc, #604]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c856:	23a8      	movs	r3, #168	; 0xa8
 800c858:	58d4      	ldr	r4, [r2, r3]
 800c85a:	25f0      	movs	r5, #240	; 0xf0
 800c85c:	43ac      	bics	r4, r5
 800c85e:	50d4      	str	r4, [r2, r3]
 800c860:	58d4      	ldr	r4, [r2, r3]
 800c862:	3d30      	subs	r5, #48	; 0x30
 800c864:	432c      	orrs	r4, r5
 800c866:	50d4      	str	r4, [r2, r3]
 800c868:	e64e      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c86a:	4a97      	ldr	r2, [pc, #604]	; (800cac8 <RemapAndLinkDMAtoUARTRx+0x650>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d159      	bne.n	800c924 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800c870:	680b      	ldr	r3, [r1, #0]
 800c872:	4a8a      	ldr	r2, [pc, #552]	; (800ca9c <RemapAndLinkDMAtoUARTRx+0x624>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d01b      	beq.n	800c8b0 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c878:	4a89      	ldr	r2, [pc, #548]	; (800caa0 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d023      	beq.n	800c8c6 <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c87e:	4a89      	ldr	r2, [pc, #548]	; (800caa4 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d02c      	beq.n	800c8de <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c884:	4a88      	ldr	r2, [pc, #544]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d035      	beq.n	800c8f6 <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c88a:	4a88      	ldr	r2, [pc, #544]	; (800caac <RemapAndLinkDMAtoUARTRx+0x634>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d03e      	beq.n	800c90e <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c890:	4a87      	ldr	r2, [pc, #540]	; (800cab0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d000      	beq.n	800c898 <RemapAndLinkDMAtoUARTRx+0x420>
 800c896:	e637      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800c898:	4a86      	ldr	r2, [pc, #536]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c89a:	23a8      	movs	r3, #168	; 0xa8
 800c89c:	58d4      	ldr	r4, [r2, r3]
 800c89e:	4d86      	ldr	r5, [pc, #536]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c8a0:	402c      	ands	r4, r5
 800c8a2:	50d4      	str	r4, [r2, r3]
 800c8a4:	58d5      	ldr	r5, [r2, r3]
 800c8a6:	24d0      	movs	r4, #208	; 0xd0
 800c8a8:	0124      	lsls	r4, r4, #4
 800c8aa:	432c      	orrs	r4, r5
 800c8ac:	50d4      	str	r4, [r2, r3]
 800c8ae:	e62b      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800c8b0:	4a82      	ldr	r2, [pc, #520]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c8b2:	23a8      	movs	r3, #168	; 0xa8
 800c8b4:	58d4      	ldr	r4, [r2, r3]
 800c8b6:	250f      	movs	r5, #15
 800c8b8:	43ac      	bics	r4, r5
 800c8ba:	50d4      	str	r4, [r2, r3]
 800c8bc:	58d4      	ldr	r4, [r2, r3]
 800c8be:	3d02      	subs	r5, #2
 800c8c0:	432c      	orrs	r4, r5
 800c8c2:	50d4      	str	r4, [r2, r3]
 800c8c4:	e620      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800c8c6:	4a7d      	ldr	r2, [pc, #500]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c8c8:	23a8      	movs	r3, #168	; 0xa8
 800c8ca:	58d4      	ldr	r4, [r2, r3]
 800c8cc:	4d7a      	ldr	r5, [pc, #488]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c8ce:	402c      	ands	r4, r5
 800c8d0:	50d4      	str	r4, [r2, r3]
 800c8d2:	58d5      	ldr	r5, [r2, r3]
 800c8d4:	24d0      	movs	r4, #208	; 0xd0
 800c8d6:	0124      	lsls	r4, r4, #4
 800c8d8:	432c      	orrs	r4, r5
 800c8da:	50d4      	str	r4, [r2, r3]
 800c8dc:	e614      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800c8de:	4a77      	ldr	r2, [pc, #476]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c8e0:	23a8      	movs	r3, #168	; 0xa8
 800c8e2:	58d4      	ldr	r4, [r2, r3]
 800c8e4:	4d76      	ldr	r5, [pc, #472]	; (800cac0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c8e6:	402c      	ands	r4, r5
 800c8e8:	50d4      	str	r4, [r2, r3]
 800c8ea:	58d5      	ldr	r5, [r2, r3]
 800c8ec:	24d0      	movs	r4, #208	; 0xd0
 800c8ee:	0324      	lsls	r4, r4, #12
 800c8f0:	432c      	orrs	r4, r5
 800c8f2:	50d4      	str	r4, [r2, r3]
 800c8f4:	e608      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c8f6:	4a71      	ldr	r2, [pc, #452]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c8f8:	23a8      	movs	r3, #168	; 0xa8
 800c8fa:	58d4      	ldr	r4, [r2, r3]
 800c8fc:	4d71      	ldr	r5, [pc, #452]	; (800cac4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c8fe:	402c      	ands	r4, r5
 800c900:	50d4      	str	r4, [r2, r3]
 800c902:	58d5      	ldr	r5, [r2, r3]
 800c904:	24d0      	movs	r4, #208	; 0xd0
 800c906:	0424      	lsls	r4, r4, #16
 800c908:	432c      	orrs	r4, r5
 800c90a:	50d4      	str	r4, [r2, r3]
 800c90c:	e5fc      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c90e:	4a69      	ldr	r2, [pc, #420]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c910:	23a8      	movs	r3, #168	; 0xa8
 800c912:	58d4      	ldr	r4, [r2, r3]
 800c914:	25f0      	movs	r5, #240	; 0xf0
 800c916:	43ac      	bics	r4, r5
 800c918:	50d4      	str	r4, [r2, r3]
 800c91a:	58d4      	ldr	r4, [r2, r3]
 800c91c:	3d20      	subs	r5, #32
 800c91e:	432c      	orrs	r4, r5
 800c920:	50d4      	str	r4, [r2, r3]
 800c922:	e5f1      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c924:	4a69      	ldr	r2, [pc, #420]	; (800cacc <RemapAndLinkDMAtoUARTRx+0x654>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d159      	bne.n	800c9de <RemapAndLinkDMAtoUARTRx+0x566>
 800c92a:	680b      	ldr	r3, [r1, #0]
 800c92c:	4a5b      	ldr	r2, [pc, #364]	; (800ca9c <RemapAndLinkDMAtoUARTRx+0x624>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d01b      	beq.n	800c96a <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c932:	4a5b      	ldr	r2, [pc, #364]	; (800caa0 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d023      	beq.n	800c980 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c938:	4a5a      	ldr	r2, [pc, #360]	; (800caa4 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d02c      	beq.n	800c998 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c93e:	4a5a      	ldr	r2, [pc, #360]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d035      	beq.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c944:	4a59      	ldr	r2, [pc, #356]	; (800caac <RemapAndLinkDMAtoUARTRx+0x634>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d03e      	beq.n	800c9c8 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c94a:	4a59      	ldr	r2, [pc, #356]	; (800cab0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d000      	beq.n	800c952 <RemapAndLinkDMAtoUARTRx+0x4da>
 800c950:	e5da      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800c952:	4a58      	ldr	r2, [pc, #352]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c954:	23a8      	movs	r3, #168	; 0xa8
 800c956:	58d4      	ldr	r4, [r2, r3]
 800c958:	4d57      	ldr	r5, [pc, #348]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c95a:	402c      	ands	r4, r5
 800c95c:	50d4      	str	r4, [r2, r3]
 800c95e:	58d5      	ldr	r5, [r2, r3]
 800c960:	24e0      	movs	r4, #224	; 0xe0
 800c962:	0124      	lsls	r4, r4, #4
 800c964:	432c      	orrs	r4, r5
 800c966:	50d4      	str	r4, [r2, r3]
 800c968:	e5ce      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c96a:	4a54      	ldr	r2, [pc, #336]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c96c:	23a8      	movs	r3, #168	; 0xa8
 800c96e:	58d4      	ldr	r4, [r2, r3]
 800c970:	250f      	movs	r5, #15
 800c972:	43ac      	bics	r4, r5
 800c974:	50d4      	str	r4, [r2, r3]
 800c976:	58d4      	ldr	r4, [r2, r3]
 800c978:	3d01      	subs	r5, #1
 800c97a:	432c      	orrs	r4, r5
 800c97c:	50d4      	str	r4, [r2, r3]
 800c97e:	e5c3      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800c980:	4a4e      	ldr	r2, [pc, #312]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c982:	23a8      	movs	r3, #168	; 0xa8
 800c984:	58d4      	ldr	r4, [r2, r3]
 800c986:	4d4c      	ldr	r5, [pc, #304]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c988:	402c      	ands	r4, r5
 800c98a:	50d4      	str	r4, [r2, r3]
 800c98c:	58d5      	ldr	r5, [r2, r3]
 800c98e:	24e0      	movs	r4, #224	; 0xe0
 800c990:	0124      	lsls	r4, r4, #4
 800c992:	432c      	orrs	r4, r5
 800c994:	50d4      	str	r4, [r2, r3]
 800c996:	e5b7      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800c998:	4a48      	ldr	r2, [pc, #288]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c99a:	23a8      	movs	r3, #168	; 0xa8
 800c99c:	58d4      	ldr	r4, [r2, r3]
 800c99e:	4d48      	ldr	r5, [pc, #288]	; (800cac0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c9a0:	402c      	ands	r4, r5
 800c9a2:	50d4      	str	r4, [r2, r3]
 800c9a4:	58d5      	ldr	r5, [r2, r3]
 800c9a6:	24e0      	movs	r4, #224	; 0xe0
 800c9a8:	0324      	lsls	r4, r4, #12
 800c9aa:	432c      	orrs	r4, r5
 800c9ac:	50d4      	str	r4, [r2, r3]
 800c9ae:	e5ab      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800c9b0:	4a42      	ldr	r2, [pc, #264]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800c9b2:	23a8      	movs	r3, #168	; 0xa8
 800c9b4:	58d4      	ldr	r4, [r2, r3]
 800c9b6:	4d43      	ldr	r5, [pc, #268]	; (800cac4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c9b8:	402c      	ands	r4, r5
 800c9ba:	50d4      	str	r4, [r2, r3]
 800c9bc:	58d5      	ldr	r5, [r2, r3]
 800c9be:	24e0      	movs	r4, #224	; 0xe0
 800c9c0:	0424      	lsls	r4, r4, #16
 800c9c2:	432c      	orrs	r4, r5
 800c9c4:	50d4      	str	r4, [r2, r3]
 800c9c6:	e59f      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800c9c8:	4a3a      	ldr	r2, [pc, #232]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c9ca:	23a8      	movs	r3, #168	; 0xa8
 800c9cc:	58d4      	ldr	r4, [r2, r3]
 800c9ce:	25f0      	movs	r5, #240	; 0xf0
 800c9d0:	43ac      	bics	r4, r5
 800c9d2:	50d4      	str	r4, [r2, r3]
 800c9d4:	58d4      	ldr	r4, [r2, r3]
 800c9d6:	3d10      	subs	r5, #16
 800c9d8:	432c      	orrs	r4, r5
 800c9da:	50d4      	str	r4, [r2, r3]
 800c9dc:	e594      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c9de:	4a3c      	ldr	r2, [pc, #240]	; (800cad0 <RemapAndLinkDMAtoUARTRx+0x658>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d000      	beq.n	800c9e6 <RemapAndLinkDMAtoUARTRx+0x56e>
 800c9e4:	e590      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
 800c9e6:	680b      	ldr	r3, [r1, #0]
 800c9e8:	4a2c      	ldr	r2, [pc, #176]	; (800ca9c <RemapAndLinkDMAtoUARTRx+0x624>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d01b      	beq.n	800ca26 <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c9ee:	4a2c      	ldr	r2, [pc, #176]	; (800caa0 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d022      	beq.n	800ca3a <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c9f4:	4a2b      	ldr	r2, [pc, #172]	; (800caa4 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d02b      	beq.n	800ca52 <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c9fa:	4a2b      	ldr	r2, [pc, #172]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d034      	beq.n	800ca6a <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800ca00:	4a2a      	ldr	r2, [pc, #168]	; (800caac <RemapAndLinkDMAtoUARTRx+0x634>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d03d      	beq.n	800ca82 <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800ca06:	4a2a      	ldr	r2, [pc, #168]	; (800cab0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d000      	beq.n	800ca0e <RemapAndLinkDMAtoUARTRx+0x596>
 800ca0c:	e57c      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800ca0e:	4a29      	ldr	r2, [pc, #164]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ca10:	23a8      	movs	r3, #168	; 0xa8
 800ca12:	58d4      	ldr	r4, [r2, r3]
 800ca14:	4d28      	ldr	r5, [pc, #160]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ca16:	402c      	ands	r4, r5
 800ca18:	50d4      	str	r4, [r2, r3]
 800ca1a:	58d5      	ldr	r5, [r2, r3]
 800ca1c:	24f0      	movs	r4, #240	; 0xf0
 800ca1e:	0124      	lsls	r4, r4, #4
 800ca20:	432c      	orrs	r4, r5
 800ca22:	50d4      	str	r4, [r2, r3]
 800ca24:	e570      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800ca26:	4a25      	ldr	r2, [pc, #148]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800ca28:	23a8      	movs	r3, #168	; 0xa8
 800ca2a:	58d5      	ldr	r5, [r2, r3]
 800ca2c:	260f      	movs	r6, #15
 800ca2e:	43b5      	bics	r5, r6
 800ca30:	50d5      	str	r5, [r2, r3]
 800ca32:	58d4      	ldr	r4, [r2, r3]
 800ca34:	4334      	orrs	r4, r6
 800ca36:	50d4      	str	r4, [r2, r3]
 800ca38:	e566      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800ca3a:	4a20      	ldr	r2, [pc, #128]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800ca3c:	23a8      	movs	r3, #168	; 0xa8
 800ca3e:	58d4      	ldr	r4, [r2, r3]
 800ca40:	4d1d      	ldr	r5, [pc, #116]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ca42:	402c      	ands	r4, r5
 800ca44:	50d4      	str	r4, [r2, r3]
 800ca46:	58d5      	ldr	r5, [r2, r3]
 800ca48:	24f0      	movs	r4, #240	; 0xf0
 800ca4a:	0124      	lsls	r4, r4, #4
 800ca4c:	432c      	orrs	r4, r5
 800ca4e:	50d4      	str	r4, [r2, r3]
 800ca50:	e55a      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800ca52:	4a1a      	ldr	r2, [pc, #104]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800ca54:	23a8      	movs	r3, #168	; 0xa8
 800ca56:	58d4      	ldr	r4, [r2, r3]
 800ca58:	4d19      	ldr	r5, [pc, #100]	; (800cac0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800ca5a:	402c      	ands	r4, r5
 800ca5c:	50d4      	str	r4, [r2, r3]
 800ca5e:	58d5      	ldr	r5, [r2, r3]
 800ca60:	24f0      	movs	r4, #240	; 0xf0
 800ca62:	0324      	lsls	r4, r4, #12
 800ca64:	432c      	orrs	r4, r5
 800ca66:	50d4      	str	r4, [r2, r3]
 800ca68:	e54e      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800ca6a:	4a14      	ldr	r2, [pc, #80]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x644>)
 800ca6c:	23a8      	movs	r3, #168	; 0xa8
 800ca6e:	58d4      	ldr	r4, [r2, r3]
 800ca70:	4d14      	ldr	r5, [pc, #80]	; (800cac4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800ca72:	402c      	ands	r4, r5
 800ca74:	50d4      	str	r4, [r2, r3]
 800ca76:	58d5      	ldr	r5, [r2, r3]
 800ca78:	24f0      	movs	r4, #240	; 0xf0
 800ca7a:	0424      	lsls	r4, r4, #16
 800ca7c:	432c      	orrs	r4, r5
 800ca7e:	50d4      	str	r4, [r2, r3]
 800ca80:	e542      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800ca82:	4a0c      	ldr	r2, [pc, #48]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ca84:	23a8      	movs	r3, #168	; 0xa8
 800ca86:	58d5      	ldr	r5, [r2, r3]
 800ca88:	26f0      	movs	r6, #240	; 0xf0
 800ca8a:	43b5      	bics	r5, r6
 800ca8c:	50d5      	str	r5, [r2, r3]
 800ca8e:	58d4      	ldr	r4, [r2, r3]
 800ca90:	4334      	orrs	r4, r6
 800ca92:	50d4      	str	r4, [r2, r3]
 800ca94:	e538      	b.n	800c508 <RemapAndLinkDMAtoUARTRx+0x90>
 800ca96:	46c0      	nop			; (mov r8, r8)
 800ca98:	40005000 	.word	0x40005000
 800ca9c:	40020008 	.word	0x40020008
 800caa0:	40020030 	.word	0x40020030
 800caa4:	40020058 	.word	0x40020058
 800caa8:	4002006c 	.word	0x4002006c
 800caac:	4002041c 	.word	0x4002041c
 800cab0:	40020430 	.word	0x40020430
 800cab4:	40020400 	.word	0x40020400
 800cab8:	fffff0ff 	.word	0xfffff0ff
 800cabc:	40020000 	.word	0x40020000
 800cac0:	fff0ffff 	.word	0xfff0ffff
 800cac4:	ff0fffff 	.word	0xff0fffff
 800cac8:	40011400 	.word	0x40011400
 800cacc:	40011800 	.word	0x40011800
 800cad0:	40011c00 	.word	0x40011c00

0800cad4 <DMA_MSG_RX_Setup>:
{	
 800cad4:	b570      	push	{r4, r5, r6, lr}
 800cad6:	0004      	movs	r4, r0
 800cad8:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800cada:	f7ff fccd 	bl	800c478 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cade:	2100      	movs	r1, #0
 800cae0:	0028      	movs	r0, r5
 800cae2:	f7ff fc13 	bl	800c30c <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800cae6:	0020      	movs	r0, r4
 800cae8:	f7ff fb52 	bl	800c190 <GetPort>
 800caec:	1e41      	subs	r1, r0, #1
 800caee:	0189      	lsls	r1, r1, #6
 800caf0:	4803      	ldr	r0, [pc, #12]	; (800cb00 <DMA_MSG_RX_Setup+0x2c>)
 800caf2:	1809      	adds	r1, r1, r0
 800caf4:	2240      	movs	r2, #64	; 0x40
 800caf6:	0020      	movs	r0, r4
 800caf8:	f006 f9fc 	bl	8012ef4 <HAL_UART_Receive_DMA>
}
 800cafc:	bd70      	pop	{r4, r5, r6, pc}
 800cafe:	46c0      	nop			; (mov r8, r8)
 800cb00:	200012d0 	.word	0x200012d0

0800cb04 <SetupMessagingRxDMAs>:
{	
 800cb04:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800cb06:	4b1b      	ldr	r3, [pc, #108]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb08:	785b      	ldrb	r3, [r3, #1]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d014      	beq.n	800cb38 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800cb0e:	4b19      	ldr	r3, [pc, #100]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb10:	789b      	ldrb	r3, [r3, #2]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d015      	beq.n	800cb42 <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800cb16:	4b17      	ldr	r3, [pc, #92]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb18:	78db      	ldrb	r3, [r3, #3]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d016      	beq.n	800cb4c <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800cb1e:	4b15      	ldr	r3, [pc, #84]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb20:	791b      	ldrb	r3, [r3, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d017      	beq.n	800cb56 <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800cb26:	4b13      	ldr	r3, [pc, #76]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb28:	795b      	ldrb	r3, [r3, #5]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d018      	beq.n	800cb60 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800cb2e:	4b11      	ldr	r3, [pc, #68]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb30:	799b      	ldrb	r3, [r3, #6]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d019      	beq.n	800cb6a <SetupMessagingRxDMAs+0x66>
}
 800cb36:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800cb38:	490f      	ldr	r1, [pc, #60]	; (800cb78 <SetupMessagingRxDMAs+0x74>)
 800cb3a:	4810      	ldr	r0, [pc, #64]	; (800cb7c <SetupMessagingRxDMAs+0x78>)
 800cb3c:	f7ff ffca 	bl	800cad4 <DMA_MSG_RX_Setup>
 800cb40:	e7e5      	b.n	800cb0e <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800cb42:	490f      	ldr	r1, [pc, #60]	; (800cb80 <SetupMessagingRxDMAs+0x7c>)
 800cb44:	480f      	ldr	r0, [pc, #60]	; (800cb84 <SetupMessagingRxDMAs+0x80>)
 800cb46:	f7ff ffc5 	bl	800cad4 <DMA_MSG_RX_Setup>
 800cb4a:	e7e4      	b.n	800cb16 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800cb4c:	490e      	ldr	r1, [pc, #56]	; (800cb88 <SetupMessagingRxDMAs+0x84>)
 800cb4e:	480f      	ldr	r0, [pc, #60]	; (800cb8c <SetupMessagingRxDMAs+0x88>)
 800cb50:	f7ff ffc0 	bl	800cad4 <DMA_MSG_RX_Setup>
 800cb54:	e7e3      	b.n	800cb1e <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800cb56:	490e      	ldr	r1, [pc, #56]	; (800cb90 <SetupMessagingRxDMAs+0x8c>)
 800cb58:	480e      	ldr	r0, [pc, #56]	; (800cb94 <SetupMessagingRxDMAs+0x90>)
 800cb5a:	f7ff ffbb 	bl	800cad4 <DMA_MSG_RX_Setup>
 800cb5e:	e7e2      	b.n	800cb26 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800cb60:	490d      	ldr	r1, [pc, #52]	; (800cb98 <SetupMessagingRxDMAs+0x94>)
 800cb62:	480e      	ldr	r0, [pc, #56]	; (800cb9c <SetupMessagingRxDMAs+0x98>)
 800cb64:	f7ff ffb6 	bl	800cad4 <DMA_MSG_RX_Setup>
 800cb68:	e7e1      	b.n	800cb2e <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800cb6a:	490d      	ldr	r1, [pc, #52]	; (800cba0 <SetupMessagingRxDMAs+0x9c>)
 800cb6c:	480d      	ldr	r0, [pc, #52]	; (800cba4 <SetupMessagingRxDMAs+0xa0>)
 800cb6e:	f7ff ffb1 	bl	800cad4 <DMA_MSG_RX_Setup>
}
 800cb72:	e7e0      	b.n	800cb36 <SetupMessagingRxDMAs+0x32>
 800cb74:	200010f8 	.word	0x200010f8
 800cb78:	20001878 	.word	0x20001878
 800cb7c:	20006d80 	.word	0x20006d80
 800cb80:	200018b0 	.word	0x200018b0
 800cb84:	20006df0 	.word	0x20006df0
 800cb88:	200018e8 	.word	0x200018e8
 800cb8c:	20006d10 	.word	0x20006d10
 800cb90:	20001920 	.word	0x20001920
 800cb94:	20006ca0 	.word	0x20006ca0
 800cb98:	20001958 	.word	0x20001958
 800cb9c:	20006c30 	.word	0x20006c30
 800cba0:	20001990 	.word	0x20001990
 800cba4:	20006bc0 	.word	0x20006bc0

0800cba8 <DMA_STREAM_Setup>:
{	
 800cba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbaa:	0005      	movs	r5, r0
 800cbac:	000f      	movs	r7, r1
 800cbae:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800cbb0:	f7ff faee 	bl	800c190 <GetPort>
	hDMA = &streamDMA[port-1];
 800cbb4:	3801      	subs	r0, #1
 800cbb6:	00c4      	lsls	r4, r0, #3
 800cbb8:	1a24      	subs	r4, r4, r0
 800cbba:	00e4      	lsls	r4, r4, #3
 800cbbc:	4809      	ldr	r0, [pc, #36]	; (800cbe4 <DMA_STREAM_Setup+0x3c>)
 800cbbe:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800cbc0:	0021      	movs	r1, r4
 800cbc2:	0028      	movs	r0, r5
 800cbc4:	f7ff fc58 	bl	800c478 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800cbc8:	2101      	movs	r1, #1
 800cbca:	0020      	movs	r0, r4
 800cbcc:	f7ff fb9e 	bl	800c30c <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800cbd0:	2369      	movs	r3, #105	; 0x69
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	3128      	adds	r1, #40	; 0x28
 800cbda:	0032      	movs	r2, r6
 800cbdc:	0028      	movs	r0, r5
 800cbde:	f006 f989 	bl	8012ef4 <HAL_UART_Receive_DMA>
}
 800cbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe4:	20001a70 	.word	0x20001a70

0800cbe8 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800cbe8:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800cbea:	6803      	ldr	r3, [r0, #0]
 800cbec:	4abd      	ldr	r2, [pc, #756]	; (800cee4 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d02f      	beq.n	800cc52 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800cbf2:	4abd      	ldr	r2, [pc, #756]	; (800cee8 <RemapAndLinkDMAtoUARTTx+0x300>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d100      	bne.n	800cbfa <RemapAndLinkDMAtoUARTTx+0x12>
 800cbf8:	e087      	b.n	800cd0a <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800cbfa:	4abc      	ldr	r2, [pc, #752]	; (800ceec <RemapAndLinkDMAtoUARTTx+0x304>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d100      	bne.n	800cc02 <RemapAndLinkDMAtoUARTTx+0x1a>
 800cc00:	e0dc      	b.n	800cdbc <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800cc02:	4abb      	ldr	r2, [pc, #748]	; (800cef0 <RemapAndLinkDMAtoUARTTx+0x308>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d000      	beq.n	800cc0a <RemapAndLinkDMAtoUARTTx+0x22>
 800cc08:	e18a      	b.n	800cf20 <RemapAndLinkDMAtoUARTTx+0x338>
 800cc0a:	680b      	ldr	r3, [r1, #0]
 800cc0c:	4ab9      	ldr	r2, [pc, #740]	; (800cef4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d100      	bne.n	800cc14 <RemapAndLinkDMAtoUARTTx+0x2c>
 800cc12:	e12d      	b.n	800ce70 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800cc14:	4ab8      	ldr	r2, [pc, #736]	; (800cef8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d100      	bne.n	800cc1c <RemapAndLinkDMAtoUARTTx+0x34>
 800cc1a:	e134      	b.n	800ce86 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800cc1c:	4ab7      	ldr	r2, [pc, #732]	; (800cefc <RemapAndLinkDMAtoUARTTx+0x314>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d100      	bne.n	800cc24 <RemapAndLinkDMAtoUARTTx+0x3c>
 800cc22:	e13c      	b.n	800ce9e <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800cc24:	4ab6      	ldr	r2, [pc, #728]	; (800cf00 <RemapAndLinkDMAtoUARTTx+0x318>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d100      	bne.n	800cc2c <RemapAndLinkDMAtoUARTTx+0x44>
 800cc2a:	e144      	b.n	800ceb6 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800cc2c:	4ab5      	ldr	r2, [pc, #724]	; (800cf04 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d100      	bne.n	800cc34 <RemapAndLinkDMAtoUARTTx+0x4c>
 800cc32:	e14b      	b.n	800cecc <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800cc34:	4ab4      	ldr	r2, [pc, #720]	; (800cf08 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d11e      	bne.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800cc3a:	4ab4      	ldr	r2, [pc, #720]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cc3c:	23a8      	movs	r3, #168	; 0xa8
 800cc3e:	58d4      	ldr	r4, [r2, r3]
 800cc40:	4db3      	ldr	r5, [pc, #716]	; (800cf10 <RemapAndLinkDMAtoUARTTx+0x328>)
 800cc42:	402c      	ands	r4, r5
 800cc44:	50d4      	str	r4, [r2, r3]
 800cc46:	58d5      	ldr	r5, [r2, r3]
 800cc48:	24b0      	movs	r4, #176	; 0xb0
 800cc4a:	0324      	lsls	r4, r4, #12
 800cc4c:	432c      	orrs	r4, r5
 800cc4e:	50d4      	str	r4, [r2, r3]
 800cc50:	e012      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800cc52:	680b      	ldr	r3, [r1, #0]
 800cc54:	4aa7      	ldr	r2, [pc, #668]	; (800cef4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d011      	beq.n	800cc7e <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800cc5a:	4aa7      	ldr	r2, [pc, #668]	; (800cef8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d019      	beq.n	800cc94 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800cc60:	4aa6      	ldr	r2, [pc, #664]	; (800cefc <RemapAndLinkDMAtoUARTTx+0x314>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d022      	beq.n	800ccac <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800cc66:	4aa6      	ldr	r2, [pc, #664]	; (800cf00 <RemapAndLinkDMAtoUARTTx+0x318>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d02b      	beq.n	800ccc4 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800cc6c:	4aa5      	ldr	r2, [pc, #660]	; (800cf04 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d033      	beq.n	800ccda <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800cc72:	4aa5      	ldr	r2, [pc, #660]	; (800cf08 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d03c      	beq.n	800ccf2 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800cc78:	6601      	str	r1, [r0, #96]	; 0x60
 800cc7a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cc7c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800cc7e:	4aa5      	ldr	r2, [pc, #660]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cc80:	23a8      	movs	r3, #168	; 0xa8
 800cc82:	58d4      	ldr	r4, [r2, r3]
 800cc84:	25f0      	movs	r5, #240	; 0xf0
 800cc86:	43ac      	bics	r4, r5
 800cc88:	50d4      	str	r4, [r2, r3]
 800cc8a:	58d4      	ldr	r4, [r2, r3]
 800cc8c:	3d70      	subs	r5, #112	; 0x70
 800cc8e:	432c      	orrs	r4, r5
 800cc90:	50d4      	str	r4, [r2, r3]
 800cc92:	e7f1      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800cc94:	4a9f      	ldr	r2, [pc, #636]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cc96:	23a8      	movs	r3, #168	; 0xa8
 800cc98:	58d4      	ldr	r4, [r2, r3]
 800cc9a:	4d9f      	ldr	r5, [pc, #636]	; (800cf18 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cc9c:	402c      	ands	r4, r5
 800cc9e:	50d4      	str	r4, [r2, r3]
 800cca0:	58d5      	ldr	r5, [r2, r3]
 800cca2:	2480      	movs	r4, #128	; 0x80
 800cca4:	0224      	lsls	r4, r4, #8
 800cca6:	432c      	orrs	r4, r5
 800cca8:	50d4      	str	r4, [r2, r3]
 800ccaa:	e7e5      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800ccac:	4a99      	ldr	r2, [pc, #612]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ccae:	23a8      	movs	r3, #168	; 0xa8
 800ccb0:	58d4      	ldr	r4, [r2, r3]
 800ccb2:	4d9a      	ldr	r5, [pc, #616]	; (800cf1c <RemapAndLinkDMAtoUARTTx+0x334>)
 800ccb4:	402c      	ands	r4, r5
 800ccb6:	50d4      	str	r4, [r2, r3]
 800ccb8:	58d5      	ldr	r5, [r2, r3]
 800ccba:	2480      	movs	r4, #128	; 0x80
 800ccbc:	0524      	lsls	r4, r4, #20
 800ccbe:	432c      	orrs	r4, r5
 800ccc0:	50d4      	str	r4, [r2, r3]
 800ccc2:	e7d9      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800ccc4:	4a91      	ldr	r2, [pc, #580]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800ccc6:	23a8      	movs	r3, #168	; 0xa8
 800ccc8:	58d4      	ldr	r4, [r2, r3]
 800ccca:	250f      	movs	r5, #15
 800cccc:	43ac      	bics	r4, r5
 800ccce:	50d4      	str	r4, [r2, r3]
 800ccd0:	58d4      	ldr	r4, [r2, r3]
 800ccd2:	3d07      	subs	r5, #7
 800ccd4:	432c      	orrs	r4, r5
 800ccd6:	50d4      	str	r4, [r2, r3]
 800ccd8:	e7ce      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800ccda:	4a8c      	ldr	r2, [pc, #560]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800ccdc:	23a8      	movs	r3, #168	; 0xa8
 800ccde:	58d4      	ldr	r4, [r2, r3]
 800cce0:	4d8d      	ldr	r5, [pc, #564]	; (800cf18 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cce2:	402c      	ands	r4, r5
 800cce4:	50d4      	str	r4, [r2, r3]
 800cce6:	58d5      	ldr	r5, [r2, r3]
 800cce8:	2480      	movs	r4, #128	; 0x80
 800ccea:	0224      	lsls	r4, r4, #8
 800ccec:	432c      	orrs	r4, r5
 800ccee:	50d4      	str	r4, [r2, r3]
 800ccf0:	e7c2      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800ccf2:	4a86      	ldr	r2, [pc, #536]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800ccf4:	23a8      	movs	r3, #168	; 0xa8
 800ccf6:	58d4      	ldr	r4, [r2, r3]
 800ccf8:	4d85      	ldr	r5, [pc, #532]	; (800cf10 <RemapAndLinkDMAtoUARTTx+0x328>)
 800ccfa:	402c      	ands	r4, r5
 800ccfc:	50d4      	str	r4, [r2, r3]
 800ccfe:	58d5      	ldr	r5, [r2, r3]
 800cd00:	2480      	movs	r4, #128	; 0x80
 800cd02:	0324      	lsls	r4, r4, #12
 800cd04:	432c      	orrs	r4, r5
 800cd06:	50d4      	str	r4, [r2, r3]
 800cd08:	e7b6      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800cd0a:	680b      	ldr	r3, [r1, #0]
 800cd0c:	4a79      	ldr	r2, [pc, #484]	; (800cef4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d01a      	beq.n	800cd48 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800cd12:	4a79      	ldr	r2, [pc, #484]	; (800cef8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d022      	beq.n	800cd5e <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800cd18:	4a78      	ldr	r2, [pc, #480]	; (800cefc <RemapAndLinkDMAtoUARTTx+0x314>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d02b      	beq.n	800cd76 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800cd1e:	4a78      	ldr	r2, [pc, #480]	; (800cf00 <RemapAndLinkDMAtoUARTTx+0x318>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d034      	beq.n	800cd8e <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800cd24:	4a77      	ldr	r2, [pc, #476]	; (800cf04 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d03c      	beq.n	800cda4 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800cd2a:	4a77      	ldr	r2, [pc, #476]	; (800cf08 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d1a3      	bne.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800cd30:	4a76      	ldr	r2, [pc, #472]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cd32:	23a8      	movs	r3, #168	; 0xa8
 800cd34:	58d4      	ldr	r4, [r2, r3]
 800cd36:	4d76      	ldr	r5, [pc, #472]	; (800cf10 <RemapAndLinkDMAtoUARTTx+0x328>)
 800cd38:	402c      	ands	r4, r5
 800cd3a:	50d4      	str	r4, [r2, r3]
 800cd3c:	58d5      	ldr	r5, [r2, r3]
 800cd3e:	2490      	movs	r4, #144	; 0x90
 800cd40:	0324      	lsls	r4, r4, #12
 800cd42:	432c      	orrs	r4, r5
 800cd44:	50d4      	str	r4, [r2, r3]
 800cd46:	e797      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800cd48:	4a72      	ldr	r2, [pc, #456]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cd4a:	23a8      	movs	r3, #168	; 0xa8
 800cd4c:	58d4      	ldr	r4, [r2, r3]
 800cd4e:	25f0      	movs	r5, #240	; 0xf0
 800cd50:	43ac      	bics	r4, r5
 800cd52:	50d4      	str	r4, [r2, r3]
 800cd54:	58d4      	ldr	r4, [r2, r3]
 800cd56:	3d60      	subs	r5, #96	; 0x60
 800cd58:	432c      	orrs	r4, r5
 800cd5a:	50d4      	str	r4, [r2, r3]
 800cd5c:	e78c      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800cd5e:	4a6d      	ldr	r2, [pc, #436]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cd60:	23a8      	movs	r3, #168	; 0xa8
 800cd62:	58d4      	ldr	r4, [r2, r3]
 800cd64:	4d6c      	ldr	r5, [pc, #432]	; (800cf18 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cd66:	402c      	ands	r4, r5
 800cd68:	50d4      	str	r4, [r2, r3]
 800cd6a:	58d5      	ldr	r5, [r2, r3]
 800cd6c:	2490      	movs	r4, #144	; 0x90
 800cd6e:	0224      	lsls	r4, r4, #8
 800cd70:	432c      	orrs	r4, r5
 800cd72:	50d4      	str	r4, [r2, r3]
 800cd74:	e780      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800cd76:	4a67      	ldr	r2, [pc, #412]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cd78:	23a8      	movs	r3, #168	; 0xa8
 800cd7a:	58d4      	ldr	r4, [r2, r3]
 800cd7c:	4d67      	ldr	r5, [pc, #412]	; (800cf1c <RemapAndLinkDMAtoUARTTx+0x334>)
 800cd7e:	402c      	ands	r4, r5
 800cd80:	50d4      	str	r4, [r2, r3]
 800cd82:	58d5      	ldr	r5, [r2, r3]
 800cd84:	2490      	movs	r4, #144	; 0x90
 800cd86:	0524      	lsls	r4, r4, #20
 800cd88:	432c      	orrs	r4, r5
 800cd8a:	50d4      	str	r4, [r2, r3]
 800cd8c:	e774      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800cd8e:	4a5f      	ldr	r2, [pc, #380]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cd90:	23a8      	movs	r3, #168	; 0xa8
 800cd92:	58d4      	ldr	r4, [r2, r3]
 800cd94:	250f      	movs	r5, #15
 800cd96:	43ac      	bics	r4, r5
 800cd98:	50d4      	str	r4, [r2, r3]
 800cd9a:	58d4      	ldr	r4, [r2, r3]
 800cd9c:	3d06      	subs	r5, #6
 800cd9e:	432c      	orrs	r4, r5
 800cda0:	50d4      	str	r4, [r2, r3]
 800cda2:	e769      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800cda4:	4a59      	ldr	r2, [pc, #356]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cda6:	23a8      	movs	r3, #168	; 0xa8
 800cda8:	58d4      	ldr	r4, [r2, r3]
 800cdaa:	4d5b      	ldr	r5, [pc, #364]	; (800cf18 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cdac:	402c      	ands	r4, r5
 800cdae:	50d4      	str	r4, [r2, r3]
 800cdb0:	58d5      	ldr	r5, [r2, r3]
 800cdb2:	2490      	movs	r4, #144	; 0x90
 800cdb4:	0224      	lsls	r4, r4, #8
 800cdb6:	432c      	orrs	r4, r5
 800cdb8:	50d4      	str	r4, [r2, r3]
 800cdba:	e75d      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800cdbc:	680b      	ldr	r3, [r1, #0]
 800cdbe:	4a4d      	ldr	r2, [pc, #308]	; (800cef4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d01b      	beq.n	800cdfc <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800cdc4:	4a4c      	ldr	r2, [pc, #304]	; (800cef8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d023      	beq.n	800ce12 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800cdca:	4a4c      	ldr	r2, [pc, #304]	; (800cefc <RemapAndLinkDMAtoUARTTx+0x314>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d02c      	beq.n	800ce2a <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800cdd0:	4a4b      	ldr	r2, [pc, #300]	; (800cf00 <RemapAndLinkDMAtoUARTTx+0x318>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d035      	beq.n	800ce42 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800cdd6:	4a4b      	ldr	r2, [pc, #300]	; (800cf04 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d03d      	beq.n	800ce58 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800cddc:	4a4a      	ldr	r2, [pc, #296]	; (800cf08 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d000      	beq.n	800cde4 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800cde2:	e749      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800cde4:	4a49      	ldr	r2, [pc, #292]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cde6:	23a8      	movs	r3, #168	; 0xa8
 800cde8:	58d4      	ldr	r4, [r2, r3]
 800cdea:	4d49      	ldr	r5, [pc, #292]	; (800cf10 <RemapAndLinkDMAtoUARTTx+0x328>)
 800cdec:	402c      	ands	r4, r5
 800cdee:	50d4      	str	r4, [r2, r3]
 800cdf0:	58d5      	ldr	r5, [r2, r3]
 800cdf2:	24a0      	movs	r4, #160	; 0xa0
 800cdf4:	0324      	lsls	r4, r4, #12
 800cdf6:	432c      	orrs	r4, r5
 800cdf8:	50d4      	str	r4, [r2, r3]
 800cdfa:	e73d      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800cdfc:	4a45      	ldr	r2, [pc, #276]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cdfe:	23a8      	movs	r3, #168	; 0xa8
 800ce00:	58d4      	ldr	r4, [r2, r3]
 800ce02:	25f0      	movs	r5, #240	; 0xf0
 800ce04:	43ac      	bics	r4, r5
 800ce06:	50d4      	str	r4, [r2, r3]
 800ce08:	58d4      	ldr	r4, [r2, r3]
 800ce0a:	3d50      	subs	r5, #80	; 0x50
 800ce0c:	432c      	orrs	r4, r5
 800ce0e:	50d4      	str	r4, [r2, r3]
 800ce10:	e732      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800ce12:	4a40      	ldr	r2, [pc, #256]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ce14:	23a8      	movs	r3, #168	; 0xa8
 800ce16:	58d4      	ldr	r4, [r2, r3]
 800ce18:	4d3f      	ldr	r5, [pc, #252]	; (800cf18 <RemapAndLinkDMAtoUARTTx+0x330>)
 800ce1a:	402c      	ands	r4, r5
 800ce1c:	50d4      	str	r4, [r2, r3]
 800ce1e:	58d5      	ldr	r5, [r2, r3]
 800ce20:	24a0      	movs	r4, #160	; 0xa0
 800ce22:	0224      	lsls	r4, r4, #8
 800ce24:	432c      	orrs	r4, r5
 800ce26:	50d4      	str	r4, [r2, r3]
 800ce28:	e726      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800ce2a:	4a3a      	ldr	r2, [pc, #232]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ce2c:	23a8      	movs	r3, #168	; 0xa8
 800ce2e:	58d4      	ldr	r4, [r2, r3]
 800ce30:	4d3a      	ldr	r5, [pc, #232]	; (800cf1c <RemapAndLinkDMAtoUARTTx+0x334>)
 800ce32:	402c      	ands	r4, r5
 800ce34:	50d4      	str	r4, [r2, r3]
 800ce36:	58d5      	ldr	r5, [r2, r3]
 800ce38:	24a0      	movs	r4, #160	; 0xa0
 800ce3a:	0524      	lsls	r4, r4, #20
 800ce3c:	432c      	orrs	r4, r5
 800ce3e:	50d4      	str	r4, [r2, r3]
 800ce40:	e71a      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800ce42:	4a32      	ldr	r2, [pc, #200]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800ce44:	23a8      	movs	r3, #168	; 0xa8
 800ce46:	58d4      	ldr	r4, [r2, r3]
 800ce48:	250f      	movs	r5, #15
 800ce4a:	43ac      	bics	r4, r5
 800ce4c:	50d4      	str	r4, [r2, r3]
 800ce4e:	58d4      	ldr	r4, [r2, r3]
 800ce50:	3d05      	subs	r5, #5
 800ce52:	432c      	orrs	r4, r5
 800ce54:	50d4      	str	r4, [r2, r3]
 800ce56:	e70f      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800ce58:	4a2c      	ldr	r2, [pc, #176]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800ce5a:	23a8      	movs	r3, #168	; 0xa8
 800ce5c:	58d4      	ldr	r4, [r2, r3]
 800ce5e:	4d2e      	ldr	r5, [pc, #184]	; (800cf18 <RemapAndLinkDMAtoUARTTx+0x330>)
 800ce60:	402c      	ands	r4, r5
 800ce62:	50d4      	str	r4, [r2, r3]
 800ce64:	58d5      	ldr	r5, [r2, r3]
 800ce66:	24a0      	movs	r4, #160	; 0xa0
 800ce68:	0224      	lsls	r4, r4, #8
 800ce6a:	432c      	orrs	r4, r5
 800ce6c:	50d4      	str	r4, [r2, r3]
 800ce6e:	e703      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800ce70:	4a28      	ldr	r2, [pc, #160]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ce72:	23a8      	movs	r3, #168	; 0xa8
 800ce74:	58d4      	ldr	r4, [r2, r3]
 800ce76:	25f0      	movs	r5, #240	; 0xf0
 800ce78:	43ac      	bics	r4, r5
 800ce7a:	50d4      	str	r4, [r2, r3]
 800ce7c:	58d4      	ldr	r4, [r2, r3]
 800ce7e:	3d40      	subs	r5, #64	; 0x40
 800ce80:	432c      	orrs	r4, r5
 800ce82:	50d4      	str	r4, [r2, r3]
 800ce84:	e6f8      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800ce86:	4a23      	ldr	r2, [pc, #140]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ce88:	23a8      	movs	r3, #168	; 0xa8
 800ce8a:	58d4      	ldr	r4, [r2, r3]
 800ce8c:	4d22      	ldr	r5, [pc, #136]	; (800cf18 <RemapAndLinkDMAtoUARTTx+0x330>)
 800ce8e:	402c      	ands	r4, r5
 800ce90:	50d4      	str	r4, [r2, r3]
 800ce92:	58d5      	ldr	r5, [r2, r3]
 800ce94:	24b0      	movs	r4, #176	; 0xb0
 800ce96:	0224      	lsls	r4, r4, #8
 800ce98:	432c      	orrs	r4, r5
 800ce9a:	50d4      	str	r4, [r2, r3]
 800ce9c:	e6ec      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800ce9e:	4a1d      	ldr	r2, [pc, #116]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cea0:	23a8      	movs	r3, #168	; 0xa8
 800cea2:	58d4      	ldr	r4, [r2, r3]
 800cea4:	4d1d      	ldr	r5, [pc, #116]	; (800cf1c <RemapAndLinkDMAtoUARTTx+0x334>)
 800cea6:	402c      	ands	r4, r5
 800cea8:	50d4      	str	r4, [r2, r3]
 800ceaa:	58d5      	ldr	r5, [r2, r3]
 800ceac:	24b0      	movs	r4, #176	; 0xb0
 800ceae:	0524      	lsls	r4, r4, #20
 800ceb0:	432c      	orrs	r4, r5
 800ceb2:	50d4      	str	r4, [r2, r3]
 800ceb4:	e6e0      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800ceb6:	4a15      	ldr	r2, [pc, #84]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800ceb8:	23a8      	movs	r3, #168	; 0xa8
 800ceba:	58d4      	ldr	r4, [r2, r3]
 800cebc:	250f      	movs	r5, #15
 800cebe:	43ac      	bics	r4, r5
 800cec0:	50d4      	str	r4, [r2, r3]
 800cec2:	58d4      	ldr	r4, [r2, r3]
 800cec4:	3d04      	subs	r5, #4
 800cec6:	432c      	orrs	r4, r5
 800cec8:	50d4      	str	r4, [r2, r3]
 800ceca:	e6d5      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800cecc:	4a0f      	ldr	r2, [pc, #60]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cece:	23a8      	movs	r3, #168	; 0xa8
 800ced0:	58d4      	ldr	r4, [r2, r3]
 800ced2:	4d11      	ldr	r5, [pc, #68]	; (800cf18 <RemapAndLinkDMAtoUARTTx+0x330>)
 800ced4:	402c      	ands	r4, r5
 800ced6:	50d4      	str	r4, [r2, r3]
 800ced8:	58d5      	ldr	r5, [r2, r3]
 800ceda:	24b0      	movs	r4, #176	; 0xb0
 800cedc:	0224      	lsls	r4, r4, #8
 800cede:	432c      	orrs	r4, r5
 800cee0:	50d4      	str	r4, [r2, r3]
 800cee2:	e6c9      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
 800cee4:	40013800 	.word	0x40013800
 800cee8:	40004400 	.word	0x40004400
 800ceec:	40004800 	.word	0x40004800
 800cef0:	40004c00 	.word	0x40004c00
 800cef4:	4002001c 	.word	0x4002001c
 800cef8:	40020044 	.word	0x40020044
 800cefc:	40020080 	.word	0x40020080
 800cf00:	40020408 	.word	0x40020408
 800cf04:	40020444 	.word	0x40020444
 800cf08:	40020458 	.word	0x40020458
 800cf0c:	40020400 	.word	0x40020400
 800cf10:	fff0ffff 	.word	0xfff0ffff
 800cf14:	40020000 	.word	0x40020000
 800cf18:	ffff0fff 	.word	0xffff0fff
 800cf1c:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800cf20:	4ab9      	ldr	r2, [pc, #740]	; (800d208 <RemapAndLinkDMAtoUARTTx+0x620>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d159      	bne.n	800cfda <RemapAndLinkDMAtoUARTTx+0x3f2>
 800cf26:	680b      	ldr	r3, [r1, #0]
 800cf28:	4ab8      	ldr	r2, [pc, #736]	; (800d20c <RemapAndLinkDMAtoUARTTx+0x624>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d01b      	beq.n	800cf66 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800cf2e:	4ab8      	ldr	r2, [pc, #736]	; (800d210 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d023      	beq.n	800cf7c <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800cf34:	4ab7      	ldr	r2, [pc, #732]	; (800d214 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d02c      	beq.n	800cf94 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800cf3a:	4ab7      	ldr	r2, [pc, #732]	; (800d218 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d035      	beq.n	800cfac <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800cf40:	4ab6      	ldr	r2, [pc, #728]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d03d      	beq.n	800cfc2 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800cf46:	4ab6      	ldr	r2, [pc, #728]	; (800d220 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d000      	beq.n	800cf4e <RemapAndLinkDMAtoUARTTx+0x366>
 800cf4c:	e694      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800cf4e:	4ab5      	ldr	r2, [pc, #724]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cf50:	23a8      	movs	r3, #168	; 0xa8
 800cf52:	58d4      	ldr	r4, [r2, r3]
 800cf54:	4db4      	ldr	r5, [pc, #720]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cf56:	402c      	ands	r4, r5
 800cf58:	50d4      	str	r4, [r2, r3]
 800cf5a:	58d5      	ldr	r5, [r2, r3]
 800cf5c:	24c0      	movs	r4, #192	; 0xc0
 800cf5e:	0324      	lsls	r4, r4, #12
 800cf60:	432c      	orrs	r4, r5
 800cf62:	50d4      	str	r4, [r2, r3]
 800cf64:	e688      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800cf66:	4ab1      	ldr	r2, [pc, #708]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800cf68:	23a8      	movs	r3, #168	; 0xa8
 800cf6a:	58d4      	ldr	r4, [r2, r3]
 800cf6c:	25f0      	movs	r5, #240	; 0xf0
 800cf6e:	43ac      	bics	r4, r5
 800cf70:	50d4      	str	r4, [r2, r3]
 800cf72:	58d4      	ldr	r4, [r2, r3]
 800cf74:	3d30      	subs	r5, #48	; 0x30
 800cf76:	432c      	orrs	r4, r5
 800cf78:	50d4      	str	r4, [r2, r3]
 800cf7a:	e67d      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800cf7c:	4aab      	ldr	r2, [pc, #684]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800cf7e:	23a8      	movs	r3, #168	; 0xa8
 800cf80:	58d4      	ldr	r4, [r2, r3]
 800cf82:	4dab      	ldr	r5, [pc, #684]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cf84:	402c      	ands	r4, r5
 800cf86:	50d4      	str	r4, [r2, r3]
 800cf88:	58d5      	ldr	r5, [r2, r3]
 800cf8a:	24c0      	movs	r4, #192	; 0xc0
 800cf8c:	0224      	lsls	r4, r4, #8
 800cf8e:	432c      	orrs	r4, r5
 800cf90:	50d4      	str	r4, [r2, r3]
 800cf92:	e671      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800cf94:	4aa5      	ldr	r2, [pc, #660]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800cf96:	23a8      	movs	r3, #168	; 0xa8
 800cf98:	58d4      	ldr	r4, [r2, r3]
 800cf9a:	4da6      	ldr	r5, [pc, #664]	; (800d234 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cf9c:	402c      	ands	r4, r5
 800cf9e:	50d4      	str	r4, [r2, r3]
 800cfa0:	58d5      	ldr	r5, [r2, r3]
 800cfa2:	24c0      	movs	r4, #192	; 0xc0
 800cfa4:	0524      	lsls	r4, r4, #20
 800cfa6:	432c      	orrs	r4, r5
 800cfa8:	50d4      	str	r4, [r2, r3]
 800cfaa:	e665      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800cfac:	4a9d      	ldr	r2, [pc, #628]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cfae:	23a8      	movs	r3, #168	; 0xa8
 800cfb0:	58d4      	ldr	r4, [r2, r3]
 800cfb2:	250f      	movs	r5, #15
 800cfb4:	43ac      	bics	r4, r5
 800cfb6:	50d4      	str	r4, [r2, r3]
 800cfb8:	58d4      	ldr	r4, [r2, r3]
 800cfba:	3d03      	subs	r5, #3
 800cfbc:	432c      	orrs	r4, r5
 800cfbe:	50d4      	str	r4, [r2, r3]
 800cfc0:	e65a      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800cfc2:	4a98      	ldr	r2, [pc, #608]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cfc4:	23a8      	movs	r3, #168	; 0xa8
 800cfc6:	58d4      	ldr	r4, [r2, r3]
 800cfc8:	4d99      	ldr	r5, [pc, #612]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cfca:	402c      	ands	r4, r5
 800cfcc:	50d4      	str	r4, [r2, r3]
 800cfce:	58d5      	ldr	r5, [r2, r3]
 800cfd0:	24c0      	movs	r4, #192	; 0xc0
 800cfd2:	0224      	lsls	r4, r4, #8
 800cfd4:	432c      	orrs	r4, r5
 800cfd6:	50d4      	str	r4, [r2, r3]
 800cfd8:	e64e      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800cfda:	4a97      	ldr	r2, [pc, #604]	; (800d238 <RemapAndLinkDMAtoUARTTx+0x650>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d159      	bne.n	800d094 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800cfe0:	680b      	ldr	r3, [r1, #0]
 800cfe2:	4a8a      	ldr	r2, [pc, #552]	; (800d20c <RemapAndLinkDMAtoUARTTx+0x624>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d01b      	beq.n	800d020 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800cfe8:	4a89      	ldr	r2, [pc, #548]	; (800d210 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d023      	beq.n	800d036 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800cfee:	4a89      	ldr	r2, [pc, #548]	; (800d214 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d02c      	beq.n	800d04e <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800cff4:	4a88      	ldr	r2, [pc, #544]	; (800d218 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d035      	beq.n	800d066 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800cffa:	4a88      	ldr	r2, [pc, #544]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d03d      	beq.n	800d07c <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d000:	4a87      	ldr	r2, [pc, #540]	; (800d220 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d000      	beq.n	800d008 <RemapAndLinkDMAtoUARTTx+0x420>
 800d006:	e637      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d008:	4a86      	ldr	r2, [pc, #536]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d00a:	23a8      	movs	r3, #168	; 0xa8
 800d00c:	58d4      	ldr	r4, [r2, r3]
 800d00e:	4d86      	ldr	r5, [pc, #536]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d010:	402c      	ands	r4, r5
 800d012:	50d4      	str	r4, [r2, r3]
 800d014:	58d5      	ldr	r5, [r2, r3]
 800d016:	24d0      	movs	r4, #208	; 0xd0
 800d018:	0324      	lsls	r4, r4, #12
 800d01a:	432c      	orrs	r4, r5
 800d01c:	50d4      	str	r4, [r2, r3]
 800d01e:	e62b      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d020:	4a82      	ldr	r2, [pc, #520]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d022:	23a8      	movs	r3, #168	; 0xa8
 800d024:	58d4      	ldr	r4, [r2, r3]
 800d026:	25f0      	movs	r5, #240	; 0xf0
 800d028:	43ac      	bics	r4, r5
 800d02a:	50d4      	str	r4, [r2, r3]
 800d02c:	58d4      	ldr	r4, [r2, r3]
 800d02e:	3d20      	subs	r5, #32
 800d030:	432c      	orrs	r4, r5
 800d032:	50d4      	str	r4, [r2, r3]
 800d034:	e620      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d036:	4a7d      	ldr	r2, [pc, #500]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d038:	23a8      	movs	r3, #168	; 0xa8
 800d03a:	58d4      	ldr	r4, [r2, r3]
 800d03c:	4d7c      	ldr	r5, [pc, #496]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d03e:	402c      	ands	r4, r5
 800d040:	50d4      	str	r4, [r2, r3]
 800d042:	58d5      	ldr	r5, [r2, r3]
 800d044:	24d0      	movs	r4, #208	; 0xd0
 800d046:	0224      	lsls	r4, r4, #8
 800d048:	432c      	orrs	r4, r5
 800d04a:	50d4      	str	r4, [r2, r3]
 800d04c:	e614      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d04e:	4a77      	ldr	r2, [pc, #476]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d050:	23a8      	movs	r3, #168	; 0xa8
 800d052:	58d4      	ldr	r4, [r2, r3]
 800d054:	4d77      	ldr	r5, [pc, #476]	; (800d234 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d056:	402c      	ands	r4, r5
 800d058:	50d4      	str	r4, [r2, r3]
 800d05a:	58d5      	ldr	r5, [r2, r3]
 800d05c:	24d0      	movs	r4, #208	; 0xd0
 800d05e:	0524      	lsls	r4, r4, #20
 800d060:	432c      	orrs	r4, r5
 800d062:	50d4      	str	r4, [r2, r3]
 800d064:	e608      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d066:	4a6f      	ldr	r2, [pc, #444]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d068:	23a8      	movs	r3, #168	; 0xa8
 800d06a:	58d4      	ldr	r4, [r2, r3]
 800d06c:	250f      	movs	r5, #15
 800d06e:	43ac      	bics	r4, r5
 800d070:	50d4      	str	r4, [r2, r3]
 800d072:	58d4      	ldr	r4, [r2, r3]
 800d074:	3d02      	subs	r5, #2
 800d076:	432c      	orrs	r4, r5
 800d078:	50d4      	str	r4, [r2, r3]
 800d07a:	e5fd      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d07c:	4a69      	ldr	r2, [pc, #420]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d07e:	23a8      	movs	r3, #168	; 0xa8
 800d080:	58d4      	ldr	r4, [r2, r3]
 800d082:	4d6b      	ldr	r5, [pc, #428]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d084:	402c      	ands	r4, r5
 800d086:	50d4      	str	r4, [r2, r3]
 800d088:	58d5      	ldr	r5, [r2, r3]
 800d08a:	24d0      	movs	r4, #208	; 0xd0
 800d08c:	0224      	lsls	r4, r4, #8
 800d08e:	432c      	orrs	r4, r5
 800d090:	50d4      	str	r4, [r2, r3]
 800d092:	e5f1      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d094:	4a69      	ldr	r2, [pc, #420]	; (800d23c <RemapAndLinkDMAtoUARTTx+0x654>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d159      	bne.n	800d14e <RemapAndLinkDMAtoUARTTx+0x566>
 800d09a:	680b      	ldr	r3, [r1, #0]
 800d09c:	4a5b      	ldr	r2, [pc, #364]	; (800d20c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d01b      	beq.n	800d0da <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d0a2:	4a5b      	ldr	r2, [pc, #364]	; (800d210 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d023      	beq.n	800d0f0 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d0a8:	4a5a      	ldr	r2, [pc, #360]	; (800d214 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d02c      	beq.n	800d108 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d0ae:	4a5a      	ldr	r2, [pc, #360]	; (800d218 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d035      	beq.n	800d120 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d0b4:	4a59      	ldr	r2, [pc, #356]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d03d      	beq.n	800d136 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d0ba:	4a59      	ldr	r2, [pc, #356]	; (800d220 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d000      	beq.n	800d0c2 <RemapAndLinkDMAtoUARTTx+0x4da>
 800d0c0:	e5da      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d0c2:	4a58      	ldr	r2, [pc, #352]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d0c4:	23a8      	movs	r3, #168	; 0xa8
 800d0c6:	58d4      	ldr	r4, [r2, r3]
 800d0c8:	4d57      	ldr	r5, [pc, #348]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d0ca:	402c      	ands	r4, r5
 800d0cc:	50d4      	str	r4, [r2, r3]
 800d0ce:	58d5      	ldr	r5, [r2, r3]
 800d0d0:	24e0      	movs	r4, #224	; 0xe0
 800d0d2:	0324      	lsls	r4, r4, #12
 800d0d4:	432c      	orrs	r4, r5
 800d0d6:	50d4      	str	r4, [r2, r3]
 800d0d8:	e5ce      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d0da:	4a54      	ldr	r2, [pc, #336]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d0dc:	23a8      	movs	r3, #168	; 0xa8
 800d0de:	58d4      	ldr	r4, [r2, r3]
 800d0e0:	25f0      	movs	r5, #240	; 0xf0
 800d0e2:	43ac      	bics	r4, r5
 800d0e4:	50d4      	str	r4, [r2, r3]
 800d0e6:	58d4      	ldr	r4, [r2, r3]
 800d0e8:	3d10      	subs	r5, #16
 800d0ea:	432c      	orrs	r4, r5
 800d0ec:	50d4      	str	r4, [r2, r3]
 800d0ee:	e5c3      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d0f0:	4a4e      	ldr	r2, [pc, #312]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d0f2:	23a8      	movs	r3, #168	; 0xa8
 800d0f4:	58d4      	ldr	r4, [r2, r3]
 800d0f6:	4d4e      	ldr	r5, [pc, #312]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d0f8:	402c      	ands	r4, r5
 800d0fa:	50d4      	str	r4, [r2, r3]
 800d0fc:	58d5      	ldr	r5, [r2, r3]
 800d0fe:	24e0      	movs	r4, #224	; 0xe0
 800d100:	0224      	lsls	r4, r4, #8
 800d102:	432c      	orrs	r4, r5
 800d104:	50d4      	str	r4, [r2, r3]
 800d106:	e5b7      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d108:	4a48      	ldr	r2, [pc, #288]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d10a:	23a8      	movs	r3, #168	; 0xa8
 800d10c:	58d4      	ldr	r4, [r2, r3]
 800d10e:	4d49      	ldr	r5, [pc, #292]	; (800d234 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d110:	402c      	ands	r4, r5
 800d112:	50d4      	str	r4, [r2, r3]
 800d114:	58d5      	ldr	r5, [r2, r3]
 800d116:	24e0      	movs	r4, #224	; 0xe0
 800d118:	0524      	lsls	r4, r4, #20
 800d11a:	432c      	orrs	r4, r5
 800d11c:	50d4      	str	r4, [r2, r3]
 800d11e:	e5ab      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d120:	4a40      	ldr	r2, [pc, #256]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d122:	23a8      	movs	r3, #168	; 0xa8
 800d124:	58d4      	ldr	r4, [r2, r3]
 800d126:	250f      	movs	r5, #15
 800d128:	43ac      	bics	r4, r5
 800d12a:	50d4      	str	r4, [r2, r3]
 800d12c:	58d4      	ldr	r4, [r2, r3]
 800d12e:	3d01      	subs	r5, #1
 800d130:	432c      	orrs	r4, r5
 800d132:	50d4      	str	r4, [r2, r3]
 800d134:	e5a0      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d136:	4a3b      	ldr	r2, [pc, #236]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d138:	23a8      	movs	r3, #168	; 0xa8
 800d13a:	58d4      	ldr	r4, [r2, r3]
 800d13c:	4d3c      	ldr	r5, [pc, #240]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d13e:	402c      	ands	r4, r5
 800d140:	50d4      	str	r4, [r2, r3]
 800d142:	58d5      	ldr	r5, [r2, r3]
 800d144:	24e0      	movs	r4, #224	; 0xe0
 800d146:	0224      	lsls	r4, r4, #8
 800d148:	432c      	orrs	r4, r5
 800d14a:	50d4      	str	r4, [r2, r3]
 800d14c:	e594      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d14e:	4a3c      	ldr	r2, [pc, #240]	; (800d240 <RemapAndLinkDMAtoUARTTx+0x658>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d000      	beq.n	800d156 <RemapAndLinkDMAtoUARTTx+0x56e>
 800d154:	e590      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
 800d156:	680b      	ldr	r3, [r1, #0]
 800d158:	4a2c      	ldr	r2, [pc, #176]	; (800d20c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d01b      	beq.n	800d196 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d15e:	4a2c      	ldr	r2, [pc, #176]	; (800d210 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d022      	beq.n	800d1aa <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d164:	4a2b      	ldr	r2, [pc, #172]	; (800d214 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d02b      	beq.n	800d1c2 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d16a:	4a2b      	ldr	r2, [pc, #172]	; (800d218 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d034      	beq.n	800d1da <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d170:	4a2a      	ldr	r2, [pc, #168]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d03b      	beq.n	800d1ee <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800d176:	4a2a      	ldr	r2, [pc, #168]	; (800d220 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d000      	beq.n	800d17e <RemapAndLinkDMAtoUARTTx+0x596>
 800d17c:	e57c      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800d17e:	4a29      	ldr	r2, [pc, #164]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d180:	23a8      	movs	r3, #168	; 0xa8
 800d182:	58d4      	ldr	r4, [r2, r3]
 800d184:	4d28      	ldr	r5, [pc, #160]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d186:	402c      	ands	r4, r5
 800d188:	50d4      	str	r4, [r2, r3]
 800d18a:	58d5      	ldr	r5, [r2, r3]
 800d18c:	24f0      	movs	r4, #240	; 0xf0
 800d18e:	0324      	lsls	r4, r4, #12
 800d190:	432c      	orrs	r4, r5
 800d192:	50d4      	str	r4, [r2, r3]
 800d194:	e570      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d196:	4a25      	ldr	r2, [pc, #148]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d198:	23a8      	movs	r3, #168	; 0xa8
 800d19a:	58d5      	ldr	r5, [r2, r3]
 800d19c:	26f0      	movs	r6, #240	; 0xf0
 800d19e:	43b5      	bics	r5, r6
 800d1a0:	50d5      	str	r5, [r2, r3]
 800d1a2:	58d4      	ldr	r4, [r2, r3]
 800d1a4:	4334      	orrs	r4, r6
 800d1a6:	50d4      	str	r4, [r2, r3]
 800d1a8:	e566      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d1aa:	4a20      	ldr	r2, [pc, #128]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d1ac:	23a8      	movs	r3, #168	; 0xa8
 800d1ae:	58d4      	ldr	r4, [r2, r3]
 800d1b0:	4d1f      	ldr	r5, [pc, #124]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d1b2:	402c      	ands	r4, r5
 800d1b4:	50d4      	str	r4, [r2, r3]
 800d1b6:	58d5      	ldr	r5, [r2, r3]
 800d1b8:	24f0      	movs	r4, #240	; 0xf0
 800d1ba:	0224      	lsls	r4, r4, #8
 800d1bc:	432c      	orrs	r4, r5
 800d1be:	50d4      	str	r4, [r2, r3]
 800d1c0:	e55a      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d1c2:	4a1a      	ldr	r2, [pc, #104]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d1c4:	23a8      	movs	r3, #168	; 0xa8
 800d1c6:	58d4      	ldr	r4, [r2, r3]
 800d1c8:	4d1a      	ldr	r5, [pc, #104]	; (800d234 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d1ca:	402c      	ands	r4, r5
 800d1cc:	50d4      	str	r4, [r2, r3]
 800d1ce:	58d5      	ldr	r5, [r2, r3]
 800d1d0:	24f0      	movs	r4, #240	; 0xf0
 800d1d2:	0524      	lsls	r4, r4, #20
 800d1d4:	432c      	orrs	r4, r5
 800d1d6:	50d4      	str	r4, [r2, r3]
 800d1d8:	e54e      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d1da:	4a12      	ldr	r2, [pc, #72]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d1dc:	23a8      	movs	r3, #168	; 0xa8
 800d1de:	58d5      	ldr	r5, [r2, r3]
 800d1e0:	260f      	movs	r6, #15
 800d1e2:	43b5      	bics	r5, r6
 800d1e4:	50d5      	str	r5, [r2, r3]
 800d1e6:	58d4      	ldr	r4, [r2, r3]
 800d1e8:	4334      	orrs	r4, r6
 800d1ea:	50d4      	str	r4, [r2, r3]
 800d1ec:	e544      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d1ee:	4a0d      	ldr	r2, [pc, #52]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d1f0:	23a8      	movs	r3, #168	; 0xa8
 800d1f2:	58d4      	ldr	r4, [r2, r3]
 800d1f4:	4d0e      	ldr	r5, [pc, #56]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d1f6:	402c      	ands	r4, r5
 800d1f8:	50d4      	str	r4, [r2, r3]
 800d1fa:	58d5      	ldr	r5, [r2, r3]
 800d1fc:	24f0      	movs	r4, #240	; 0xf0
 800d1fe:	0224      	lsls	r4, r4, #8
 800d200:	432c      	orrs	r4, r5
 800d202:	50d4      	str	r4, [r2, r3]
 800d204:	e538      	b.n	800cc78 <RemapAndLinkDMAtoUARTTx+0x90>
 800d206:	46c0      	nop			; (mov r8, r8)
 800d208:	40005000 	.word	0x40005000
 800d20c:	4002001c 	.word	0x4002001c
 800d210:	40020044 	.word	0x40020044
 800d214:	40020080 	.word	0x40020080
 800d218:	40020408 	.word	0x40020408
 800d21c:	40020444 	.word	0x40020444
 800d220:	40020458 	.word	0x40020458
 800d224:	40020400 	.word	0x40020400
 800d228:	fff0ffff 	.word	0xfff0ffff
 800d22c:	40020000 	.word	0x40020000
 800d230:	ffff0fff 	.word	0xffff0fff
 800d234:	f0ffffff 	.word	0xf0ffffff
 800d238:	40011400 	.word	0x40011400
 800d23c:	40011800 	.word	0x40011800
 800d240:	40011c00 	.word	0x40011c00

0800d244 <DMA_MSG_TX_Setup>:
{	
 800d244:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d246:	4b0d      	ldr	r3, [pc, #52]	; (800d27c <DMA_MSG_TX_Setup+0x38>)
 800d248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d012      	beq.n	800d274 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800d24e:	4b0b      	ldr	r3, [pc, #44]	; (800d27c <DMA_MSG_TX_Setup+0x38>)
 800d250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d252:	2b00      	cmp	r3, #0
 800d254:	d010      	beq.n	800d278 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800d256:	4a09      	ldr	r2, [pc, #36]	; (800d27c <DMA_MSG_TX_Setup+0x38>)
 800d258:	2394      	movs	r3, #148	; 0x94
 800d25a:	58d3      	ldr	r3, [r2, r3]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d007      	beq.n	800d270 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d260:	0021      	movs	r1, r4
 800d262:	f7ff fcc1 	bl	800cbe8 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d266:	2100      	movs	r1, #0
 800d268:	0020      	movs	r0, r4
 800d26a:	f7ff f84f 	bl	800c30c <SetupDMAInterrupts>
}
 800d26e:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800d270:	4c03      	ldr	r4, [pc, #12]	; (800d280 <DMA_MSG_TX_Setup+0x3c>)
 800d272:	e7f5      	b.n	800d260 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800d274:	4c01      	ldr	r4, [pc, #4]	; (800d27c <DMA_MSG_TX_Setup+0x38>)
 800d276:	e7f3      	b.n	800d260 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800d278:	4c02      	ldr	r4, [pc, #8]	; (800d284 <DMA_MSG_TX_Setup+0x40>)
 800d27a:	e7f1      	b.n	800d260 <DMA_MSG_TX_Setup+0x1c>
 800d27c:	200019c8 	.word	0x200019c8
 800d280:	20001a38 	.word	0x20001a38
 800d284:	20001a00 	.word	0x20001a00

0800d288 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800d288:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800d28a:	4807      	ldr	r0, [pc, #28]	; (800d2a8 <CRC_Init+0x20>)
 800d28c:	4b07      	ldr	r3, [pc, #28]	; (800d2ac <CRC_Init+0x24>)
 800d28e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d290:	2310      	movs	r3, #16
 800d292:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800d294:	2300      	movs	r3, #0
 800d296:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d298:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800d29a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800d29c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d29e:	3303      	adds	r3, #3
 800d2a0:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d2a2:	f003 fcbd 	bl	8010c20 <HAL_CRC_Init>
}
 800d2a6:	bd10      	pop	{r4, pc}
 800d2a8:	20006e60 	.word	0x20006e60
 800d2ac:	40023000 	.word	0x40023000

0800d2b0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d2b0:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d2b2:	4a05      	ldr	r2, [pc, #20]	; (800d2c8 <HAL_CRC_MspInit+0x18>)
 800d2b4:	6951      	ldr	r1, [r2, #20]
 800d2b6:	2340      	movs	r3, #64	; 0x40
 800d2b8:	4319      	orrs	r1, r3
 800d2ba:	6151      	str	r1, [r2, #20]
 800d2bc:	6952      	ldr	r2, [r2, #20]
 800d2be:	4013      	ands	r3, r2
 800d2c0:	9301      	str	r3, [sp, #4]
 800d2c2:	9b01      	ldr	r3, [sp, #4]
}
 800d2c4:	b002      	add	sp, #8
 800d2c6:	4770      	bx	lr
 800d2c8:	40021000 	.word	0x40021000

0800d2cc <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800d2cc:	b570      	push	{r4, r5, r6, lr}
 800d2ce:	0004      	movs	r4, r0
 800d2d0:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d015      	beq.n	800d302 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800d2d6:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800d2d8:	2900      	cmp	r1, #0
 800d2da:	d100      	bne.n	800d2de <CalculateCRC8+0x12>
}
 800d2dc:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d2de:	088e      	lsrs	r6, r1, #2
 800d2e0:	0032      	movs	r2, r6
 800d2e2:	0021      	movs	r1, r4
 800d2e4:	4808      	ldr	r0, [pc, #32]	; (800d308 <CalculateCRC8+0x3c>)
 800d2e6:	f003 fcf8 	bl	8010cda <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800d2ea:	07ab      	lsls	r3, r5, #30
 800d2ec:	d101      	bne.n	800d2f2 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d2ee:	b2c0      	uxtb	r0, r0
 800d2f0:	e7f4      	b.n	800d2dc <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800d2f2:	0131      	lsls	r1, r6, #4
 800d2f4:	1861      	adds	r1, r4, r1
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	4803      	ldr	r0, [pc, #12]	; (800d308 <CalculateCRC8+0x3c>)
 800d2fa:	f003 fcc2 	bl	8010c82 <HAL_CRC_Accumulate>
 800d2fe:	b2c0      	uxtb	r0, r0
 800d300:	e7ec      	b.n	800d2dc <CalculateCRC8+0x10>
	return 0;
 800d302:	2000      	movs	r0, #0
 800d304:	e7ea      	b.n	800d2dc <CalculateCRC8+0x10>
 800d306:	46c0      	nop			; (mov r8, r8)
 800d308:	20006e60 	.word	0x20006e60

0800d30c <IND_LED_Init>:
}

/* --- Configure indicator LED ---
*/
void IND_LED_Init(void)
{
 800d30c:	b500      	push	{lr}
 800d30e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800d310:	2380      	movs	r3, #128	; 0x80
 800d312:	011b      	lsls	r3, r3, #4
 800d314:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d316:	2301      	movs	r3, #1
 800d318:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d31a:	2300      	movs	r3, #0
 800d31c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d31e:	3303      	adds	r3, #3
 800d320:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d322:	2090      	movs	r0, #144	; 0x90
 800d324:	a901      	add	r1, sp, #4
 800d326:	05c0      	lsls	r0, r0, #23
 800d328:	f004 fb7a 	bl	8011a20 <HAL_GPIO_Init>
}
 800d32c:	b007      	add	sp, #28
 800d32e:	bd00      	pop	{pc}

0800d330 <GPIO_Init>:
{
 800d330:	b500      	push	{lr}
 800d332:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d334:	4b18      	ldr	r3, [pc, #96]	; (800d398 <GPIO_Init+0x68>)
 800d336:	6959      	ldr	r1, [r3, #20]
 800d338:	2080      	movs	r0, #128	; 0x80
 800d33a:	0300      	lsls	r0, r0, #12
 800d33c:	4301      	orrs	r1, r0
 800d33e:	6159      	str	r1, [r3, #20]
 800d340:	695a      	ldr	r2, [r3, #20]
 800d342:	4002      	ands	r2, r0
 800d344:	9201      	str	r2, [sp, #4]
 800d346:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d348:	6959      	ldr	r1, [r3, #20]
 800d34a:	2080      	movs	r0, #128	; 0x80
 800d34c:	0280      	lsls	r0, r0, #10
 800d34e:	4301      	orrs	r1, r0
 800d350:	6159      	str	r1, [r3, #20]
 800d352:	695a      	ldr	r2, [r3, #20]
 800d354:	4002      	ands	r2, r0
 800d356:	9202      	str	r2, [sp, #8]
 800d358:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d35a:	6959      	ldr	r1, [r3, #20]
 800d35c:	2080      	movs	r0, #128	; 0x80
 800d35e:	0340      	lsls	r0, r0, #13
 800d360:	4301      	orrs	r1, r0
 800d362:	6159      	str	r1, [r3, #20]
 800d364:	695a      	ldr	r2, [r3, #20]
 800d366:	4002      	ands	r2, r0
 800d368:	9203      	str	r2, [sp, #12]
 800d36a:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d36c:	6959      	ldr	r1, [r3, #20]
 800d36e:	2080      	movs	r0, #128	; 0x80
 800d370:	02c0      	lsls	r0, r0, #11
 800d372:	4301      	orrs	r1, r0
 800d374:	6159      	str	r1, [r3, #20]
 800d376:	695a      	ldr	r2, [r3, #20]
 800d378:	4002      	ands	r2, r0
 800d37a:	9204      	str	r2, [sp, #16]
 800d37c:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d37e:	695a      	ldr	r2, [r3, #20]
 800d380:	2180      	movs	r1, #128	; 0x80
 800d382:	03c9      	lsls	r1, r1, #15
 800d384:	430a      	orrs	r2, r1
 800d386:	615a      	str	r2, [r3, #20]
 800d388:	695b      	ldr	r3, [r3, #20]
 800d38a:	400b      	ands	r3, r1
 800d38c:	9305      	str	r3, [sp, #20]
 800d38e:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800d390:	f7ff ffbc 	bl	800d30c <IND_LED_Init>
}
 800d394:	b007      	add	sp, #28
 800d396:	bd00      	pop	{pc}
 800d398:	40021000 	.word	0x40021000

0800d39c <BT_RST_GPIO_Init>:


/* --- Configure BT800 EN_RST / BT900 RST GPO ---
*/
void BT_RST_GPIO_Init(void)
{
 800d39c:	b500      	push	{lr}
 800d39e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = _BT_RST_PIN;
 800d3a0:	2380      	movs	r3, #128	; 0x80
 800d3a2:	021b      	lsls	r3, r3, #8
 800d3a4:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3ae:	3303      	adds	r3, #3
 800d3b0:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_BT_RST_PORT, &GPIO_InitStruct);
 800d3b2:	a901      	add	r1, sp, #4
 800d3b4:	4802      	ldr	r0, [pc, #8]	; (800d3c0 <BT_RST_GPIO_Init+0x24>)
 800d3b6:	f004 fb33 	bl	8011a20 <HAL_GPIO_Init>
}
 800d3ba:	b007      	add	sp, #28
 800d3bc:	bd00      	pop	{pc}
 800d3be:	46c0      	nop			; (mov r8, r8)
 800d3c0:	48000400 	.word	0x48000400

0800d3c4 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	000e      	movs	r6, r1
 800d3c8:	0015      	movs	r5, r2
 800d3ca:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800d3cc:	f000 fd78 	bl	800dec0 <GetUart>
	
	if (huart == &huart1) 
 800d3d0:	4b2b      	ldr	r3, [pc, #172]	; (800d480 <GetPortGPIOs+0xbc>)
 800d3d2:	4298      	cmp	r0, r3
 800d3d4:	d01a      	beq.n	800d40c <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800d3d6:	4b2b      	ldr	r3, [pc, #172]	; (800d484 <GetPortGPIOs+0xc0>)
 800d3d8:	4298      	cmp	r0, r3
 800d3da:	d025      	beq.n	800d428 <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800d3dc:	4b2a      	ldr	r3, [pc, #168]	; (800d488 <GetPortGPIOs+0xc4>)
 800d3de:	4298      	cmp	r0, r3
 800d3e0:	d02d      	beq.n	800d43e <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800d3e2:	4b2a      	ldr	r3, [pc, #168]	; (800d48c <GetPortGPIOs+0xc8>)
 800d3e4:	4298      	cmp	r0, r3
 800d3e6:	d036      	beq.n	800d456 <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800d3e8:	4b29      	ldr	r3, [pc, #164]	; (800d490 <GetPortGPIOs+0xcc>)
 800d3ea:	4298      	cmp	r0, r3
 800d3ec:	d03e      	beq.n	800d46c <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800d3ee:	4a29      	ldr	r2, [pc, #164]	; (800d494 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800d3f0:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800d3f2:	4290      	cmp	r0, r2
 800d3f4:	d116      	bne.n	800d424 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800d3f6:	2390      	movs	r3, #144	; 0x90
 800d3f8:	05db      	lsls	r3, r3, #23
 800d3fa:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800d3fc:	2210      	movs	r2, #16
 800d3fe:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800d400:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800d402:	2320      	movs	r3, #32
 800d404:	9a04      	ldr	r2, [sp, #16]
 800d406:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	e00b      	b.n	800d424 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800d40c:	2390      	movs	r3, #144	; 0x90
 800d40e:	05db      	lsls	r3, r3, #23
 800d410:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800d412:	2280      	movs	r2, #128	; 0x80
 800d414:	0092      	lsls	r2, r2, #2
 800d416:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800d418:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800d41a:	2380      	movs	r3, #128	; 0x80
 800d41c:	00db      	lsls	r3, r3, #3
 800d41e:	9a04      	ldr	r2, [sp, #16]
 800d420:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d422:	2300      	movs	r3, #0
	
	return result;	
}
 800d424:	0018      	movs	r0, r3
 800d426:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800d428:	2390      	movs	r3, #144	; 0x90
 800d42a:	05db      	lsls	r3, r3, #23
 800d42c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800d42e:	2204      	movs	r2, #4
 800d430:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800d432:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800d434:	2308      	movs	r3, #8
 800d436:	9a04      	ldr	r2, [sp, #16]
 800d438:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	e7f2      	b.n	800d424 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800d43e:	4b16      	ldr	r3, [pc, #88]	; (800d498 <GetPortGPIOs+0xd4>)
 800d440:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800d442:	2280      	movs	r2, #128	; 0x80
 800d444:	00d2      	lsls	r2, r2, #3
 800d446:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800d448:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800d44a:	2380      	movs	r3, #128	; 0x80
 800d44c:	011b      	lsls	r3, r3, #4
 800d44e:	9a04      	ldr	r2, [sp, #16]
 800d450:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d452:	2300      	movs	r3, #0
 800d454:	e7e6      	b.n	800d424 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800d456:	2390      	movs	r3, #144	; 0x90
 800d458:	05db      	lsls	r3, r3, #23
 800d45a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800d45c:	2201      	movs	r2, #1
 800d45e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800d460:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800d462:	2302      	movs	r3, #2
 800d464:	9a04      	ldr	r2, [sp, #16]
 800d466:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d468:	2300      	movs	r3, #0
 800d46a:	e7db      	b.n	800d424 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800d46c:	4b0a      	ldr	r3, [pc, #40]	; (800d498 <GetPortGPIOs+0xd4>)
 800d46e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800d470:	2208      	movs	r2, #8
 800d472:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800d474:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800d476:	2310      	movs	r3, #16
 800d478:	9a04      	ldr	r2, [sp, #16]
 800d47a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	e7d1      	b.n	800d424 <GetPortGPIOs+0x60>
 800d480:	20006ca0 	.word	0x20006ca0
 800d484:	20006df0 	.word	0x20006df0
 800d488:	20006bc0 	.word	0x20006bc0
 800d48c:	20006d80 	.word	0x20006d80
 800d490:	20006c30 	.word	0x20006c30
 800d494:	20006d10 	.word	0x20006d10
 800d498:	48000400 	.word	0x48000400

0800d49c <IsFactoryReset>:
{
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800d4a0:	4b39      	ldr	r3, [pc, #228]	; (800d588 <IsFactoryReset+0xec>)
 800d4a2:	6959      	ldr	r1, [r3, #20]
 800d4a4:	2080      	movs	r0, #128	; 0x80
 800d4a6:	0280      	lsls	r0, r0, #10
 800d4a8:	4301      	orrs	r1, r0
 800d4aa:	6159      	str	r1, [r3, #20]
 800d4ac:	695a      	ldr	r2, [r3, #20]
 800d4ae:	4002      	ands	r2, r0
 800d4b0:	9203      	str	r2, [sp, #12]
 800d4b2:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d4b4:	6959      	ldr	r1, [r3, #20]
 800d4b6:	2080      	movs	r0, #128	; 0x80
 800d4b8:	02c0      	lsls	r0, r0, #11
 800d4ba:	4301      	orrs	r1, r0
 800d4bc:	6159      	str	r1, [r3, #20]
 800d4be:	695a      	ldr	r2, [r3, #20]
 800d4c0:	4002      	ands	r2, r0
 800d4c2:	9204      	str	r2, [sp, #16]
 800d4c4:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800d4c6:	6959      	ldr	r1, [r3, #20]
 800d4c8:	2080      	movs	r0, #128	; 0x80
 800d4ca:	0300      	lsls	r0, r0, #12
 800d4cc:	4301      	orrs	r1, r0
 800d4ce:	6159      	str	r1, [r3, #20]
 800d4d0:	695a      	ldr	r2, [r3, #20]
 800d4d2:	4002      	ands	r2, r0
 800d4d4:	9205      	str	r2, [sp, #20]
 800d4d6:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800d4d8:	695a      	ldr	r2, [r3, #20]
 800d4da:	2180      	movs	r1, #128	; 0x80
 800d4dc:	0349      	lsls	r1, r1, #13
 800d4de:	430a      	orrs	r2, r1
 800d4e0:	615a      	str	r2, [r3, #20]
 800d4e2:	695b      	ldr	r3, [r3, #20]
 800d4e4:	400b      	ands	r3, r1
 800d4e6:	9306      	str	r3, [sp, #24]
 800d4e8:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d4ea:	2522      	movs	r5, #34	; 0x22
 800d4ec:	446d      	add	r5, sp
 800d4ee:	ab08      	add	r3, sp, #32
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	ab0b      	add	r3, sp, #44	; 0x2c
 800d4f4:	002a      	movs	r2, r5
 800d4f6:	a90c      	add	r1, sp, #48	; 0x30
 800d4f8:	2001      	movs	r0, #1
 800d4fa:	f7ff ff63 	bl	800d3c4 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d4fe:	ac07      	add	r4, sp, #28
 800d500:	9400      	str	r4, [sp, #0]
 800d502:	ab09      	add	r3, sp, #36	; 0x24
 800d504:	221e      	movs	r2, #30
 800d506:	446a      	add	r2, sp
 800d508:	a90a      	add	r1, sp, #40	; 0x28
 800d50a:	2006      	movs	r0, #6
 800d50c:	f7ff ff5a 	bl	800d3c4 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d510:	2301      	movs	r3, #1
 800d512:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d514:	2600      	movs	r6, #0
 800d516:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d518:	882b      	ldrh	r3, [r5, #0]
 800d51a:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d51c:	a90d      	add	r1, sp, #52	; 0x34
 800d51e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d520:	f004 fa7e 	bl	8011a20 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d524:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800d526:	2302      	movs	r3, #2
 800d528:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d52a:	8823      	ldrh	r3, [r4, #0]
 800d52c:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d52e:	a90d      	add	r1, sp, #52	; 0x34
 800d530:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d532:	f004 fa75 	bl	8011a20 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800d536:	8829      	ldrh	r1, [r5, #0]
 800d538:	2200      	movs	r2, #0
 800d53a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d53c:	f004 fbe4 	bl	8011d08 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800d540:	2005      	movs	r0, #5
 800d542:	f000 fae3 	bl	800db0c <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800d546:	8821      	ldrh	r1, [r4, #0]
 800d548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d54a:	f004 fbd7 	bl	8011cfc <HAL_GPIO_ReadPin>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d006      	beq.n	800d560 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d552:	4b0e      	ldr	r3, [pc, #56]	; (800d58c <IsFactoryReset+0xf0>)
 800d554:	2201      	movs	r2, #1
 800d556:	4252      	negs	r2, r2
 800d558:	601a      	str	r2, [r3, #0]
	return 0;
 800d55a:	2000      	movs	r0, #0
}
 800d55c:	b012      	add	sp, #72	; 0x48
 800d55e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800d560:	2322      	movs	r3, #34	; 0x22
 800d562:	446b      	add	r3, sp
 800d564:	8819      	ldrh	r1, [r3, #0]
 800d566:	2201      	movs	r2, #1
 800d568:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d56a:	f004 fbcd 	bl	8011d08 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800d56e:	2005      	movs	r0, #5
 800d570:	f000 facc 	bl	800db0c <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800d574:	ab07      	add	r3, sp, #28
 800d576:	8819      	ldrh	r1, [r3, #0]
 800d578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d57a:	f004 fbbf 	bl	8011cfc <HAL_GPIO_ReadPin>
 800d57e:	2801      	cmp	r0, #1
 800d580:	d1e7      	bne.n	800d552 <IsFactoryReset+0xb6>
			return 1;
 800d582:	2001      	movs	r0, #1
 800d584:	e7ea      	b.n	800d55c <IsFactoryReset+0xc0>
 800d586:	46c0      	nop			; (mov r8, r8)
 800d588:	40021000 	.word	0x40021000
 800d58c:	20007ff0 	.word	0x20007ff0

0800d590 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d590:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d592:	f002 ff41 	bl	8010418 <HAL_IncTick>
  osSystickHandler();  
 800d596:	f000 fe55 	bl	800e244 <osSystickHandler>

}
 800d59a:	bd10      	pop	{r4, pc}

0800d59c <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d59c:	e7fe      	b.n	800d59c <HardFault_Handler>
	...

0800d5a0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d5a0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d5a2:	4802      	ldr	r0, [pc, #8]	; (800d5ac <USART1_IRQHandler+0xc>)
 800d5a4:	f006 f8bd 	bl	8013722 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d5a8:	bd10      	pop	{r4, pc}
 800d5aa:	46c0      	nop			; (mov r8, r8)
 800d5ac:	20006ca0 	.word	0x20006ca0

0800d5b0 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d5b0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d5b2:	4802      	ldr	r0, [pc, #8]	; (800d5bc <USART2_IRQHandler+0xc>)
 800d5b4:	f006 f8b5 	bl	8013722 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d5b8:	bd10      	pop	{r4, pc}
 800d5ba:	46c0      	nop			; (mov r8, r8)
 800d5bc:	20006df0 	.word	0x20006df0

0800d5c0 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d5c0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d5c2:	4806      	ldr	r0, [pc, #24]	; (800d5dc <USART3_8_IRQHandler+0x1c>)
 800d5c4:	f006 f8ad 	bl	8013722 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d5c8:	4805      	ldr	r0, [pc, #20]	; (800d5e0 <USART3_8_IRQHandler+0x20>)
 800d5ca:	f006 f8aa 	bl	8013722 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d5ce:	4805      	ldr	r0, [pc, #20]	; (800d5e4 <USART3_8_IRQHandler+0x24>)
 800d5d0:	f006 f8a7 	bl	8013722 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d5d4:	4804      	ldr	r0, [pc, #16]	; (800d5e8 <USART3_8_IRQHandler+0x28>)
 800d5d6:	f006 f8a4 	bl	8013722 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d5da:	bd10      	pop	{r4, pc}
 800d5dc:	20006bc0 	.word	0x20006bc0
 800d5e0:	20006d80 	.word	0x20006d80
 800d5e4:	20006c30 	.word	0x20006c30
 800d5e8:	20006d10 	.word	0x20006d10

0800d5ec <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800d5ec:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800d5ee:	2001      	movs	r0, #1
 800d5f0:	f7fa f80c 	bl	800760c <DMA_IRQHandler>
	
}
 800d5f4:	bd10      	pop	{r4, pc}
	...

0800d5f8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d5f8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d5fa:	4b0c      	ldr	r3, [pc, #48]	; (800d62c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	06db      	lsls	r3, r3, #27
 800d600:	d408      	bmi.n	800d614 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d602:	4b0b      	ldr	r3, [pc, #44]	; (800d630 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	05db      	lsls	r3, r3, #23
 800d608:	d408      	bmi.n	800d61c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d60a:	4b09      	ldr	r3, [pc, #36]	; (800d630 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	06db      	lsls	r3, r3, #27
 800d610:	d408      	bmi.n	800d624 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800d612:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800d614:	2005      	movs	r0, #5
 800d616:	f7f9 fff9 	bl	800760c <DMA_IRQHandler>
 800d61a:	e7fa      	b.n	800d612 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800d61c:	2002      	movs	r0, #2
 800d61e:	f7f9 fff5 	bl	800760c <DMA_IRQHandler>
 800d622:	e7f6      	b.n	800d612 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d624:	4803      	ldr	r0, [pc, #12]	; (800d634 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d626:	f003 fc57 	bl	8010ed8 <HAL_DMA_IRQHandler>
}
 800d62a:	e7f2      	b.n	800d612 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800d62c:	40020400 	.word	0x40020400
 800d630:	40020000 	.word	0x40020000
 800d634:	200019c8 	.word	0x200019c8

0800d638 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d638:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d63a:	4b14      	ldr	r3, [pc, #80]	; (800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	03db      	lsls	r3, r3, #15
 800d640:	d413      	bmi.n	800d66a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d642:	4b12      	ldr	r3, [pc, #72]	; (800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	02db      	lsls	r3, r3, #11
 800d648:	d413      	bmi.n	800d672 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d64a:	4b11      	ldr	r3, [pc, #68]	; (800d690 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	05db      	lsls	r3, r3, #23
 800d650:	d413      	bmi.n	800d67a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d652:	4b0e      	ldr	r3, [pc, #56]	; (800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	04db      	lsls	r3, r3, #19
 800d658:	d413      	bmi.n	800d682 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d65a:	4b0c      	ldr	r3, [pc, #48]	; (800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	01db      	lsls	r3, r3, #7
 800d660:	d506      	bpl.n	800d670 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d662:	480c      	ldr	r0, [pc, #48]	; (800d694 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800d664:	f003 fc38 	bl	8010ed8 <HAL_DMA_IRQHandler>
	}
}
 800d668:	e002      	b.n	800d670 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800d66a:	2003      	movs	r0, #3
 800d66c:	f7f9 ffce 	bl	800760c <DMA_IRQHandler>
}
 800d670:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d672:	2004      	movs	r0, #4
 800d674:	f7f9 ffca 	bl	800760c <DMA_IRQHandler>
 800d678:	e7fa      	b.n	800d670 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800d67a:	2006      	movs	r0, #6
 800d67c:	f7f9 ffc6 	bl	800760c <DMA_IRQHandler>
 800d680:	e7f6      	b.n	800d670 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d682:	4805      	ldr	r0, [pc, #20]	; (800d698 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800d684:	f003 fc28 	bl	8010ed8 <HAL_DMA_IRQHandler>
 800d688:	e7f2      	b.n	800d670 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800d68a:	46c0      	nop			; (mov r8, r8)
 800d68c:	40020000 	.word	0x40020000
 800d690:	40020400 	.word	0x40020400
 800d694:	20001a38 	.word	0x20001a38
 800d698:	20001a00 	.word	0x20001a00

0800d69c <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d69c:	b510      	push	{r4, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d6a6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d001      	beq.n	800d6b0 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d6ac:	f7fe feda 	bl	800c464 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d6b0:	0020      	movs	r0, r4
 800d6b2:	f7fe fd6d 	bl	800c190 <GetPort>
 800d6b6:	0080      	lsls	r0, r0, #2
 800d6b8:	4b03      	ldr	r3, [pc, #12]	; (800d6c8 <HAL_UART_TxCpltCallback+0x2c>)
 800d6ba:	58c0      	ldr	r0, [r0, r3]
 800d6bc:	a901      	add	r1, sp, #4
 800d6be:	f001 fa0d 	bl	800eadc <xQueueGiveFromISR>
}
 800d6c2:	b002      	add	sp, #8
 800d6c4:	bd10      	pop	{r4, pc}
 800d6c6:	46c0      	nop			; (mov r8, r8)
 800d6c8:	20006b20 	.word	0x20006b20

0800d6cc <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d6cc:	b510      	push	{r4, lr}
 800d6ce:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d6d0:	2369      	movs	r3, #105	; 0x69
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d6d6:	f7fe fd5b 	bl	800c190 <GetPort>
	if (portStatus[port] == STREAM) {
 800d6da:	4b0c      	ldr	r3, [pc, #48]	; (800d70c <HAL_UART_ErrorCallback+0x40>)
 800d6dc:	5c1b      	ldrb	r3, [r3, r0]
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d005      	beq.n	800d6ee <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d6e2:	4b0b      	ldr	r3, [pc, #44]	; (800d710 <HAL_UART_ErrorCallback+0x44>)
 800d6e4:	1818      	adds	r0, r3, r0
 800d6e6:	3801      	subs	r0, #1
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	7003      	strb	r3, [r0, #0]
	}	
}
 800d6ec:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d6ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	685a      	ldr	r2, [r3, #4]
 800d6f4:	b292      	uxth	r2, r2
 800d6f6:	3801      	subs	r0, #1
 800d6f8:	0080      	lsls	r0, r0, #2
 800d6fa:	4b06      	ldr	r3, [pc, #24]	; (800d714 <HAL_UART_ErrorCallback+0x48>)
 800d6fc:	58c3      	ldr	r3, [r0, r3]
 800d6fe:	6819      	ldr	r1, [r3, #0]
 800d700:	3128      	adds	r1, #40	; 0x28
 800d702:	0020      	movs	r0, r4
 800d704:	f005 fbf6 	bl	8012ef4 <HAL_UART_Receive_DMA>
 800d708:	e7f0      	b.n	800d6ec <HAL_UART_ErrorCallback+0x20>
 800d70a:	46c0      	nop			; (mov r8, r8)
 800d70c:	200010f8 	.word	0x200010f8
 800d710:	200012c8 	.word	0x200012c8
 800d714:	200014a8 	.word	0x200014a8

0800d718 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d718:	b510      	push	{r4, lr}
 800d71a:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800d71c:	f7fe fd38 	bl	800c190 <GetPort>
 800d720:	4b13      	ldr	r3, [pc, #76]	; (800d770 <HAL_UART_RxCpltCallback+0x58>)
 800d722:	5c1b      	ldrb	r3, [r3, r0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d006      	beq.n	800d736 <HAL_UART_RxCpltCallback+0x1e>
 800d728:	0020      	movs	r0, r4
 800d72a:	f7fe fd31 	bl	800c190 <GetPort>
 800d72e:	4b10      	ldr	r3, [pc, #64]	; (800d770 <HAL_UART_RxCpltCallback+0x58>)
 800d730:	5c1b      	ldrb	r3, [r3, r0]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d11a      	bne.n	800d76c <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800d736:	0020      	movs	r0, r4
 800d738:	f7fe fd2a 	bl	800c190 <GetPort>
 800d73c:	4b0d      	ldr	r3, [pc, #52]	; (800d774 <HAL_UART_RxCpltCallback+0x5c>)
 800d73e:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800d740:	0020      	movs	r0, r4
 800d742:	f7fe fd25 	bl	800c190 <GetPort>
 800d746:	4b0a      	ldr	r3, [pc, #40]	; (800d770 <HAL_UART_RxCpltCallback+0x58>)
 800d748:	2205      	movs	r2, #5
 800d74a:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800d74c:	0020      	movs	r0, r4
 800d74e:	f7fe fd1f 	bl	800c190 <GetPort>
 800d752:	4b09      	ldr	r3, [pc, #36]	; (800d778 <HAL_UART_RxCpltCallback+0x60>)
 800d754:	1818      	adds	r0, r3, r0
 800d756:	3801      	subs	r0, #1
 800d758:	2300      	movs	r3, #0
 800d75a:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800d75c:	0020      	movs	r0, r4
 800d75e:	f7fe fd17 	bl	800c190 <GetPort>
 800d762:	4b06      	ldr	r3, [pc, #24]	; (800d77c <HAL_UART_RxCpltCallback+0x64>)
 800d764:	1818      	adds	r0, r3, r0
 800d766:	3801      	subs	r0, #1
 800d768:	2301      	movs	r3, #1
 800d76a:	7003      	strb	r3, [r0, #0]
	}
}
 800d76c:	bd10      	pop	{r4, pc}
 800d76e:	46c0      	nop			; (mov r8, r8)
 800d770:	200010f8 	.word	0x200010f8
 800d774:	20006aa0 	.word	0x20006aa0
 800d778:	20001450 	.word	0x20001450
 800d77c:	200012c8 	.word	0x200012c8

0800d780 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800d780:	b672      	cpsid	i
 800d782:	e7fe      	b.n	800d782 <vApplicationStackOverflowHook+0x2>

0800d784 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800d784:	b672      	cpsid	i
 800d786:	e7fe      	b.n	800d786 <vApplicationMallocFailedHook+0x2>

0800d788 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d78a:	46ce      	mov	lr, r9
 800d78c:	b500      	push	{lr}
 800d78e:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d790:	ac05      	add	r4, sp, #20
 800d792:	4b34      	ldr	r3, [pc, #208]	; (800d864 <RTC_CalendarConfig+0xdc>)
 800d794:	0022      	movs	r2, r4
 800d796:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d798:	c243      	stmia	r2!, {r0, r1, r6}
 800d79a:	aa02      	add	r2, sp, #8
 800d79c:	4b32      	ldr	r3, [pc, #200]	; (800d868 <RTC_CalendarConfig+0xe0>)
 800d79e:	cb03      	ldmia	r3!, {r0, r1}
 800d7a0:	c203      	stmia	r2!, {r0, r1}
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d7a6:	2015      	movs	r0, #21
 800d7a8:	ab02      	add	r3, sp, #8
 800d7aa:	469c      	mov	ip, r3
 800d7ac:	4460      	add	r0, ip
 800d7ae:	f006 f840 	bl	8013832 <atoi>
 800d7b2:	b2c3      	uxtb	r3, r0
 800d7b4:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800d7b6:	2600      	movs	r6, #0
 800d7b8:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800d7ba:	a806      	add	r0, sp, #24
 800d7bc:	f006 f839 	bl	8013832 <atoi>
 800d7c0:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800d7c2:	70e6      	strb	r6, [r4, #3]
 800d7c4:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d7c6:	4e29      	ldr	r6, [pc, #164]	; (800d86c <RTC_CalendarConfig+0xe4>)
 800d7c8:	e002      	b.n	800d7d0 <RTC_CalendarConfig+0x48>
 800d7ca:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800d7cc:	2c0d      	cmp	r4, #13
 800d7ce:	d009      	beq.n	800d7e4 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d7d0:	00a3      	lsls	r3, r4, #2
 800d7d2:	3b04      	subs	r3, #4
 800d7d4:	58f1      	ldr	r1, [r6, r3]
 800d7d6:	a805      	add	r0, sp, #20
 800d7d8:	f7f2 fc94 	bl	8000104 <strcmp>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d1f4      	bne.n	800d7ca <RTC_CalendarConfig+0x42>
			month = i + 1;
 800d7e0:	b2e5      	uxtb	r5, r4
 800d7e2:	e7f2      	b.n	800d7ca <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d7e4:	ab02      	add	r3, sp, #8
 800d7e6:	1d98      	adds	r0, r3, #6
 800d7e8:	f006 f823 	bl	8013832 <atoi>
 800d7ec:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800d7ee:	ac05      	add	r4, sp, #20
 800d7f0:	2600      	movs	r6, #0
 800d7f2:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800d7f4:	ab02      	add	r3, sp, #8
 800d7f6:	1cd8      	adds	r0, r3, #3
 800d7f8:	f006 f81b 	bl	8013832 <atoi>
 800d7fc:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800d7fe:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800d800:	a802      	add	r0, sp, #8
 800d802:	f006 f816 	bl	8013832 <atoi>
 800d806:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d808:	a90d      	add	r1, sp, #52	; 0x34
 800d80a:	464b      	mov	r3, r9
 800d80c:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800d80e:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d810:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d812:	2301      	movs	r3, #1
 800d814:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d816:	2200      	movs	r2, #0
 800d818:	4815      	ldr	r0, [pc, #84]	; (800d870 <RTC_CalendarConfig+0xe8>)
 800d81a:	f005 f8b7 	bl	801298c <HAL_RTC_SetDate>
		return BOS_ERROR;
 800d81e:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d820:	2800      	cmp	r0, #0
 800d822:	d119      	bne.n	800d858 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800d824:	a908      	add	r1, sp, #32
 800d826:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800d828:	9b01      	ldr	r3, [sp, #4]
 800d82a:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800d82c:	9b00      	ldr	r3, [sp, #0]
 800d82e:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d830:	2300      	movs	r3, #0
 800d832:	720b      	strb	r3, [r1, #8]
 800d834:	4a0f      	ldr	r2, [pc, #60]	; (800d874 <RTC_CalendarConfig+0xec>)
 800d836:	3018      	adds	r0, #24
 800d838:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d83a:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d83c:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d83e:	2200      	movs	r2, #0
 800d840:	480b      	ldr	r0, [pc, #44]	; (800d870 <RTC_CalendarConfig+0xe8>)
 800d842:	f005 f81d 	bl	8012880 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800d846:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d848:	2800      	cmp	r0, #0
 800d84a:	d105      	bne.n	800d858 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d84c:	4a0a      	ldr	r2, [pc, #40]	; (800d878 <RTC_CalendarConfig+0xf0>)
 800d84e:	2101      	movs	r1, #1
 800d850:	4807      	ldr	r0, [pc, #28]	; (800d870 <RTC_CalendarConfig+0xe8>)
 800d852:	f005 f95f 	bl	8012b14 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	0018      	movs	r0, r3
 800d85a:	b00e      	add	sp, #56	; 0x38
 800d85c:	bc04      	pop	{r2}
 800d85e:	4691      	mov	r9, r2
 800d860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d862:	46c0      	nop			; (mov r8, r8)
 800d864:	080186c8 	.word	0x080186c8
 800d868:	0801b898 	.word	0x0801b898
 800d86c:	20000020 	.word	0x20000020
 800d870:	20006e84 	.word	0x20006e84
 800d874:	20006aa0 	.word	0x20006aa0
 800d878:	000032f2 	.word	0x000032f2

0800d87c <RTC_Init>:
{
 800d87c:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d87e:	4a1c      	ldr	r2, [pc, #112]	; (800d8f0 <RTC_Init+0x74>)
 800d880:	6a11      	ldr	r1, [r2, #32]
 800d882:	2380      	movs	r3, #128	; 0x80
 800d884:	021b      	lsls	r3, r3, #8
 800d886:	430b      	orrs	r3, r1
 800d888:	6213      	str	r3, [r2, #32]
  RtcHandle.Instance = RTC;
 800d88a:	481a      	ldr	r0, [pc, #104]	; (800d8f4 <RTC_Init+0x78>)
 800d88c:	4b1a      	ldr	r3, [pc, #104]	; (800d8f8 <RTC_Init+0x7c>)
 800d88e:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d890:	2300      	movs	r3, #0
 800d892:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d894:	227c      	movs	r2, #124	; 0x7c
 800d896:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d898:	4a18      	ldr	r2, [pc, #96]	; (800d8fc <RTC_Init+0x80>)
 800d89a:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d89c:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d89e:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d8a0:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d8a2:	f004 ff8f 	bl	80127c4 <HAL_RTC_Init>
 800d8a6:	23ff      	movs	r3, #255	; 0xff
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d11e      	bne.n	800d8ea <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	4811      	ldr	r0, [pc, #68]	; (800d8f4 <RTC_Init+0x78>)
 800d8b0:	f005 f936 	bl	8012b20 <HAL_RTCEx_BKUPRead>
 800d8b4:	4b12      	ldr	r3, [pc, #72]	; (800d900 <RTC_Init+0x84>)
 800d8b6:	4298      	cmp	r0, r3
 800d8b8:	d10e      	bne.n	800d8d8 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d8ba:	4b0d      	ldr	r3, [pc, #52]	; (800d8f0 <RTC_Init+0x74>)
 800d8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8be:	011b      	lsls	r3, r3, #4
 800d8c0:	d502      	bpl.n	800d8c8 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800d8c2:	4b10      	ldr	r3, [pc, #64]	; (800d904 <RTC_Init+0x88>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d8c8:	4b09      	ldr	r3, [pc, #36]	; (800d8f0 <RTC_Init+0x74>)
 800d8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8cc:	015b      	lsls	r3, r3, #5
 800d8ce:	d505      	bpl.n	800d8dc <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800d8d0:	4b0c      	ldr	r3, [pc, #48]	; (800d904 <RTC_Init+0x88>)
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	701a      	strb	r2, [r3, #0]
 800d8d6:	e001      	b.n	800d8dc <RTC_Init+0x60>
    RTC_CalendarConfig();
 800d8d8:	f7ff ff56 	bl	800d788 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d8dc:	4a04      	ldr	r2, [pc, #16]	; (800d8f0 <RTC_Init+0x74>)
 800d8de:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d8e0:	2380      	movs	r3, #128	; 0x80
 800d8e2:	045b      	lsls	r3, r3, #17
 800d8e4:	430b      	orrs	r3, r1
 800d8e6:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	0018      	movs	r0, r3
 800d8ec:	bd10      	pop	{r4, pc}
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	40021000 	.word	0x40021000
 800d8f4:	20006e84 	.word	0x20006e84
 800d8f8:	40002800 	.word	0x40002800
 800d8fc:	000007cf 	.word	0x000007cf
 800d900:	000032f2 	.word	0x000032f2
 800d904:	20001bc0 	.word	0x20001bc0

0800d908 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d90a:	46c6      	mov	lr, r8
 800d90c:	b500      	push	{lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	ac0c      	add	r4, sp, #48	; 0x30
 800d912:	7827      	ldrb	r7, [r4, #0]
 800d914:	ac0d      	add	r4, sp, #52	; 0x34
 800d916:	7824      	ldrb	r4, [r4, #0]
 800d918:	46a0      	mov	r8, r4
 800d91a:	ac0e      	add	r4, sp, #56	; 0x38
 800d91c:	7825      	ldrb	r5, [r4, #0]
 800d91e:	ac0f      	add	r4, sp, #60	; 0x3c
 800d920:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d922:	ac05      	add	r4, sp, #20
 800d924:	3230      	adds	r2, #48	; 0x30
 800d926:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d928:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d92a:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d92c:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d92e:	2200      	movs	r2, #0
 800d930:	0021      	movs	r1, r4
 800d932:	481f      	ldr	r0, [pc, #124]	; (800d9b0 <BOS_CalendarConfig+0xa8>)
 800d934:	f005 f82a 	bl	801298c <HAL_RTC_SetDate>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d136      	bne.n	800d9aa <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d93c:	466b      	mov	r3, sp
 800d93e:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d940:	4642      	mov	r2, r8
 800d942:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d944:	709f      	strb	r7, [r3, #2]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d946:	2300      	movs	r3, #0
 800d948:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800d94a:	2e01      	cmp	r6, #1
 800d94c:	d020      	beq.n	800d990 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d94e:	2e02      	cmp	r6, #2
 800d950:	d024      	beq.n	800d99c <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d952:	4b18      	ldr	r3, [pc, #96]	; (800d9b4 <BOS_CalendarConfig+0xac>)
 800d954:	2218      	movs	r2, #24
 800d956:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d958:	2200      	movs	r2, #0
 800d95a:	4669      	mov	r1, sp
 800d95c:	4814      	ldr	r0, [pc, #80]	; (800d9b0 <BOS_CalendarConfig+0xa8>)
 800d95e:	f004 ff8f 	bl	8012880 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800d962:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d964:	2800      	cmp	r0, #0
 800d966:	d10e      	bne.n	800d986 <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d968:	4a12      	ldr	r2, [pc, #72]	; (800d9b4 <BOS_CalendarConfig+0xac>)
 800d96a:	7b53      	ldrb	r3, [r2, #13]
 800d96c:	021b      	lsls	r3, r3, #8
 800d96e:	7911      	ldrb	r1, [r2, #4]
 800d970:	4319      	orrs	r1, r3
 800d972:	308d      	adds	r0, #141	; 0x8d
 800d974:	0040      	lsls	r0, r0, #1
 800d976:	f7f9 ff33 	bl	80077e0 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d97a:	4a0f      	ldr	r2, [pc, #60]	; (800d9b8 <BOS_CalendarConfig+0xb0>)
 800d97c:	2101      	movs	r1, #1
 800d97e:	480c      	ldr	r0, [pc, #48]	; (800d9b0 <BOS_CalendarConfig+0xa8>)
 800d980:	f005 f8c8 	bl	8012b14 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d984:	2300      	movs	r3, #0
}
 800d986:	0018      	movs	r0, r3
 800d988:	b006      	add	sp, #24
 800d98a:	bc04      	pop	{r2}
 800d98c:	4690      	mov	r8, r2
 800d98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d990:	466a      	mov	r2, sp
 800d992:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d994:	4b07      	ldr	r3, [pc, #28]	; (800d9b4 <BOS_CalendarConfig+0xac>)
 800d996:	220c      	movs	r2, #12
 800d998:	735a      	strb	r2, [r3, #13]
 800d99a:	e7dd      	b.n	800d958 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d99c:	2340      	movs	r3, #64	; 0x40
 800d99e:	466a      	mov	r2, sp
 800d9a0:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d9a2:	4b04      	ldr	r3, [pc, #16]	; (800d9b4 <BOS_CalendarConfig+0xac>)
 800d9a4:	220c      	movs	r2, #12
 800d9a6:	735a      	strb	r2, [r3, #13]
 800d9a8:	e7d6      	b.n	800d958 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800d9aa:	23ff      	movs	r3, #255	; 0xff
 800d9ac:	e7eb      	b.n	800d986 <BOS_CalendarConfig+0x7e>
 800d9ae:	46c0      	nop			; (mov r8, r8)
 800d9b0:	20006e84 	.word	0x20006e84
 800d9b4:	20006aa0 	.word	0x20006aa0
 800d9b8:	000032f2 	.word	0x000032f2

0800d9bc <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d9bc:	b530      	push	{r4, r5, lr}
 800d9be:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d9c0:	4d16      	ldr	r5, [pc, #88]	; (800da1c <GetTimeDate+0x60>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	a902      	add	r1, sp, #8
 800d9c6:	0028      	movs	r0, r5
 800d9c8:	f005 f85c 	bl	8012a84 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d9cc:	ac07      	add	r4, sp, #28
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	0021      	movs	r1, r4
 800d9d2:	0028      	movs	r0, r5
 800d9d4:	f005 f87c 	bl	8012ad0 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d9d8:	4b11      	ldr	r3, [pc, #68]	; (800da20 <GetTimeDate+0x64>)
 800d9da:	aa02      	add	r2, sp, #8
 800d9dc:	7a12      	ldrb	r2, [r2, #8]
 800d9de:	09d2      	lsrs	r2, r2, #7
 800d9e0:	3201      	adds	r2, #1
 800d9e2:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d9e4:	9a03      	ldr	r2, [sp, #12]
 800d9e6:	9201      	str	r2, [sp, #4]
 800d9e8:	0852      	lsrs	r2, r2, #1
 800d9ea:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d9ec:	aa02      	add	r2, sp, #8
 800d9ee:	7892      	ldrb	r2, [r2, #2]
 800d9f0:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d9f2:	aa02      	add	r2, sp, #8
 800d9f4:	7852      	ldrb	r2, [r2, #1]
 800d9f6:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d9f8:	aa02      	add	r2, sp, #8
 800d9fa:	7812      	ldrb	r2, [r2, #0]
 800d9fc:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d9fe:	78a2      	ldrb	r2, [r4, #2]
 800da00:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800da02:	7862      	ldrb	r2, [r4, #1]
 800da04:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800da06:	7822      	ldrb	r2, [r4, #0]
 800da08:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800da0a:	78e2      	ldrb	r2, [r4, #3]
 800da0c:	21fa      	movs	r1, #250	; 0xfa
 800da0e:	00c9      	lsls	r1, r1, #3
 800da10:	468c      	mov	ip, r1
 800da12:	4462      	add	r2, ip
 800da14:	831a      	strh	r2, [r3, #24]
}
 800da16:	b009      	add	sp, #36	; 0x24
 800da18:	bd30      	pop	{r4, r5, pc}
 800da1a:	46c0      	nop			; (mov r8, r8)
 800da1c:	20006e84 	.word	0x20006e84
 800da20:	20006aa0 	.word	0x20006aa0

0800da24 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800da24:	b530      	push	{r4, r5, lr}
 800da26:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800da28:	4a12      	ldr	r2, [pc, #72]	; (800da74 <TIM_USEC_Init+0x50>)
 800da2a:	69d1      	ldr	r1, [r2, #28]
 800da2c:	2080      	movs	r0, #128	; 0x80
 800da2e:	0040      	lsls	r0, r0, #1
 800da30:	4301      	orrs	r1, r0
 800da32:	61d1      	str	r1, [r2, #28]
 800da34:	69d3      	ldr	r3, [r2, #28]
 800da36:	4003      	ands	r3, r0
 800da38:	9301      	str	r3, [sp, #4]
 800da3a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800da3c:	4c0e      	ldr	r4, [pc, #56]	; (800da78 <TIM_USEC_Init+0x54>)
 800da3e:	4b0f      	ldr	r3, [pc, #60]	; (800da7c <TIM_USEC_Init+0x58>)
 800da40:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800da42:	f004 fdd7 	bl	80125f4 <HAL_RCC_GetPCLK1Freq>
 800da46:	490e      	ldr	r1, [pc, #56]	; (800da80 <TIM_USEC_Init+0x5c>)
 800da48:	f7f2 fb82 	bl	8000150 <__udivsi3>
 800da4c:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800da4e:	2500      	movs	r5, #0
 800da50:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800da52:	4b0c      	ldr	r3, [pc, #48]	; (800da84 <TIM_USEC_Init+0x60>)
 800da54:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800da56:	0020      	movs	r0, r4
 800da58:	f005 f8f2 	bl	8012c40 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800da5c:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800da5e:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800da60:	a902      	add	r1, sp, #8
 800da62:	0020      	movs	r0, r4
 800da64:	f005 f906 	bl	8012c74 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800da68:	0020      	movs	r0, r4
 800da6a:	f005 f860 	bl	8012b2e <HAL_TIM_Base_Start>
}
 800da6e:	b005      	add	sp, #20
 800da70:	bd30      	pop	{r4, r5, pc}
 800da72:	46c0      	nop			; (mov r8, r8)
 800da74:	40021000 	.word	0x40021000
 800da78:	20006ee0 	.word	0x20006ee0
 800da7c:	40002000 	.word	0x40002000
 800da80:	000f4240 	.word	0x000f4240
 800da84:	0000ffff 	.word	0x0000ffff

0800da88 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800da88:	b530      	push	{r4, r5, lr}
 800da8a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800da8c:	4a12      	ldr	r2, [pc, #72]	; (800dad8 <TIM_MSEC_Init+0x50>)
 800da8e:	6991      	ldr	r1, [r2, #24]
 800da90:	2080      	movs	r0, #128	; 0x80
 800da92:	0240      	lsls	r0, r0, #9
 800da94:	4301      	orrs	r1, r0
 800da96:	6191      	str	r1, [r2, #24]
 800da98:	6993      	ldr	r3, [r2, #24]
 800da9a:	4003      	ands	r3, r0
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800daa0:	4c0e      	ldr	r4, [pc, #56]	; (800dadc <TIM_MSEC_Init+0x54>)
 800daa2:	4b0f      	ldr	r3, [pc, #60]	; (800dae0 <TIM_MSEC_Init+0x58>)
 800daa4:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800daa6:	f004 fda5 	bl	80125f4 <HAL_RCC_GetPCLK1Freq>
 800daaa:	21fa      	movs	r1, #250	; 0xfa
 800daac:	0089      	lsls	r1, r1, #2
 800daae:	f7f2 fb4f 	bl	8000150 <__udivsi3>
 800dab2:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dab4:	2500      	movs	r5, #0
 800dab6:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800dab8:	4b0a      	ldr	r3, [pc, #40]	; (800dae4 <TIM_MSEC_Init+0x5c>)
 800daba:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800dabc:	0020      	movs	r0, r4
 800dabe:	f005 f8bf 	bl	8012c40 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dac2:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dac4:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800dac6:	a902      	add	r1, sp, #8
 800dac8:	0020      	movs	r0, r4
 800daca:	f005 f8d3 	bl	8012c74 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800dace:	0020      	movs	r0, r4
 800dad0:	f005 f82d 	bl	8012b2e <HAL_TIM_Base_Start>
}
 800dad4:	b005      	add	sp, #20
 800dad6:	bd30      	pop	{r4, r5, pc}
 800dad8:	40021000 	.word	0x40021000
 800dadc:	20006ea4 	.word	0x20006ea4
 800dae0:	40014000 	.word	0x40014000
 800dae4:	0000ffff 	.word	0x0000ffff

0800dae8 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800dae8:	b510      	push	{r4, lr}
 800daea:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800daec:	f002 fb30 	bl	8010150 <vPortEnterCritical>
	
	if (Delay)
 800daf0:	2c00      	cmp	r4, #0
 800daf2:	d006      	beq.n	800db02 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800daf4:	4b04      	ldr	r3, [pc, #16]	; (800db08 <StartMicroDelay+0x20>)
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800dafa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dafc:	1a5b      	subs	r3, r3, r1
 800dafe:	42a3      	cmp	r3, r4
 800db00:	d9fb      	bls.n	800dafa <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800db02:	f002 fb31 	bl	8010168 <vPortExitCritical>
}
 800db06:	bd10      	pop	{r4, pc}
 800db08:	20006ee0 	.word	0x20006ee0

0800db0c <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800db0c:	b510      	push	{r4, lr}
 800db0e:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800db10:	f002 fb1e 	bl	8010150 <vPortEnterCritical>
	
	if (Delay)
 800db14:	2c00      	cmp	r4, #0
 800db16:	d006      	beq.n	800db26 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800db18:	4b04      	ldr	r3, [pc, #16]	; (800db2c <StartMilliDelay+0x20>)
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800db1e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800db20:	1a5b      	subs	r3, r3, r1
 800db22:	42a3      	cmp	r3, r4
 800db24:	d9fb      	bls.n	800db1e <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800db26:	f002 fb1f 	bl	8010168 <vPortExitCritical>
}
 800db2a:	bd10      	pop	{r4, pc}
 800db2c:	20006ea4 	.word	0x20006ea4

0800db30 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800db30:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800db32:	4809      	ldr	r0, [pc, #36]	; (800db58 <MX_USART1_UART_Init+0x28>)
 800db34:	4b09      	ldr	r3, [pc, #36]	; (800db5c <MX_USART1_UART_Init+0x2c>)
 800db36:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db38:	23e1      	movs	r3, #225	; 0xe1
 800db3a:	031b      	lsls	r3, r3, #12
 800db3c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800db3e:	2300      	movs	r3, #0
 800db40:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800db42:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800db44:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800db46:	220c      	movs	r2, #12
 800db48:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db4a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800db4c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800db4e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db50:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800db52:	f005 fd0f 	bl	8013574 <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif
}
 800db56:	bd10      	pop	{r4, pc}
 800db58:	20006ca0 	.word	0x20006ca0
 800db5c:	40013800 	.word	0x40013800

0800db60 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800db60:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800db62:	4809      	ldr	r0, [pc, #36]	; (800db88 <MX_USART2_UART_Init+0x28>)
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <MX_USART2_UART_Init+0x2c>)
 800db66:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db68:	23e1      	movs	r3, #225	; 0xe1
 800db6a:	031b      	lsls	r3, r3, #12
 800db6c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800db6e:	2300      	movs	r3, #0
 800db70:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800db72:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800db74:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800db76:	220c      	movs	r2, #12
 800db78:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db7a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800db7c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800db7e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db80:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800db82:	f005 fcf7 	bl	8013574 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif
}
 800db86:	bd10      	pop	{r4, pc}
 800db88:	20006df0 	.word	0x20006df0
 800db8c:	40004400 	.word	0x40004400

0800db90 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800db90:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800db92:	4809      	ldr	r0, [pc, #36]	; (800dbb8 <MX_USART3_UART_Init+0x28>)
 800db94:	4b09      	ldr	r3, [pc, #36]	; (800dbbc <MX_USART3_UART_Init+0x2c>)
 800db96:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db98:	23e1      	movs	r3, #225	; 0xe1
 800db9a:	031b      	lsls	r3, r3, #12
 800db9c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800db9e:	2300      	movs	r3, #0
 800dba0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800dba2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800dba4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800dba6:	220c      	movs	r2, #12
 800dba8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dbaa:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dbac:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dbae:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dbb0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dbb2:	f005 fcdf 	bl	8013574 <HAL_UART_Init>
	#if _P6pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif
}
 800dbb6:	bd10      	pop	{r4, pc}
 800dbb8:	20006bc0 	.word	0x20006bc0
 800dbbc:	40004800 	.word	0x40004800

0800dbc0 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800dbc0:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800dbc2:	4809      	ldr	r0, [pc, #36]	; (800dbe8 <MX_USART4_UART_Init+0x28>)
 800dbc4:	4b09      	ldr	r3, [pc, #36]	; (800dbec <MX_USART4_UART_Init+0x2c>)
 800dbc6:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dbc8:	23e1      	movs	r3, #225	; 0xe1
 800dbca:	031b      	lsls	r3, r3, #12
 800dbcc:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dbd2:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dbd4:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800dbd6:	220c      	movs	r2, #12
 800dbd8:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dbda:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dbdc:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dbde:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dbe0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800dbe2:	f005 fcc7 	bl	8013574 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif
}
 800dbe6:	bd10      	pop	{r4, pc}
 800dbe8:	20006d80 	.word	0x20006d80
 800dbec:	40004c00 	.word	0x40004c00

0800dbf0 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800dbf0:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800dbf2:	4809      	ldr	r0, [pc, #36]	; (800dc18 <MX_USART5_UART_Init+0x28>)
 800dbf4:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <MX_USART5_UART_Init+0x2c>)
 800dbf6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dbf8:	23e1      	movs	r3, #225	; 0xe1
 800dbfa:	031b      	lsls	r3, r3, #12
 800dbfc:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800dc02:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800dc04:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800dc06:	220c      	movs	r2, #12
 800dc08:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc0a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc0c:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc0e:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc10:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800dc12:	f005 fcaf 	bl	8013574 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif
}
 800dc16:	bd10      	pop	{r4, pc}
 800dc18:	20006c30 	.word	0x20006c30
 800dc1c:	40005000 	.word	0x40005000

0800dc20 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800dc20:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800dc22:	4809      	ldr	r0, [pc, #36]	; (800dc48 <MX_USART6_UART_Init+0x28>)
 800dc24:	4b09      	ldr	r3, [pc, #36]	; (800dc4c <MX_USART6_UART_Init+0x2c>)
 800dc26:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dc28:	23e1      	movs	r3, #225	; 0xe1
 800dc2a:	031b      	lsls	r3, r3, #12
 800dc2c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800dc32:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800dc34:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800dc36:	220c      	movs	r2, #12
 800dc38:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc3a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc3c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc3e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc40:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800dc42:	f005 fc97 	bl	8013574 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif
}
 800dc46:	bd10      	pop	{r4, pc}
 800dc48:	20006d10 	.word	0x20006d10
 800dc4c:	40011400 	.word	0x40011400

0800dc50 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc52:	46ce      	mov	lr, r9
 800dc54:	b500      	push	{lr}
 800dc56:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800dc58:	6803      	ldr	r3, [r0, #0]
 800dc5a:	4a91      	ldr	r2, [pc, #580]	; (800dea0 <HAL_UART_MspInit+0x250>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d015      	beq.n	800dc8c <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800dc60:	4a90      	ldr	r2, [pc, #576]	; (800dea4 <HAL_UART_MspInit+0x254>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d040      	beq.n	800dce8 <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800dc66:	4a90      	ldr	r2, [pc, #576]	; (800dea8 <HAL_UART_MspInit+0x258>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d069      	beq.n	800dd40 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800dc6c:	4a8f      	ldr	r2, [pc, #572]	; (800deac <HAL_UART_MspInit+0x25c>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d100      	bne.n	800dc74 <HAL_UART_MspInit+0x24>
 800dc72:	e092      	b.n	800dd9a <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800dc74:	4a8e      	ldr	r2, [pc, #568]	; (800deb0 <HAL_UART_MspInit+0x260>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d100      	bne.n	800dc7c <HAL_UART_MspInit+0x2c>
 800dc7a:	e0b9      	b.n	800ddf0 <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800dc7c:	4a8d      	ldr	r2, [pc, #564]	; (800deb4 <HAL_UART_MspInit+0x264>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d100      	bne.n	800dc84 <HAL_UART_MspInit+0x34>
 800dc82:	e0e0      	b.n	800de46 <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800dc84:	b00c      	add	sp, #48	; 0x30
 800dc86:	bc04      	pop	{r2}
 800dc88:	4691      	mov	r9, r2
 800dc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800dc8c:	4a8a      	ldr	r2, [pc, #552]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800dc8e:	6991      	ldr	r1, [r2, #24]
 800dc90:	2080      	movs	r0, #128	; 0x80
 800dc92:	01c0      	lsls	r0, r0, #7
 800dc94:	4301      	orrs	r1, r0
 800dc96:	6191      	str	r1, [r2, #24]
 800dc98:	6993      	ldr	r3, [r2, #24]
 800dc9a:	4003      	ands	r3, r0
 800dc9c:	9301      	str	r3, [sp, #4]
 800dc9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN;
 800dca0:	2380      	movs	r3, #128	; 0x80
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dca6:	2702      	movs	r7, #2
 800dca8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dcaa:	2401      	movs	r4, #1
 800dcac:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dcae:	2603      	movs	r6, #3
 800dcb0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800dcb2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800dcb4:	2590      	movs	r5, #144	; 0x90
 800dcb6:	05ed      	lsls	r5, r5, #23
 800dcb8:	a907      	add	r1, sp, #28
 800dcba:	0028      	movs	r0, r5
 800dcbc:	f003 feb0 	bl	8011a20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;
 800dcc0:	2380      	movs	r3, #128	; 0x80
 800dcc2:	00db      	lsls	r3, r3, #3
 800dcc4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcc6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dcc8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dcca:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800dccc:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800dcce:	a907      	add	r1, sp, #28
 800dcd0:	0028      	movs	r0, r5
 800dcd2:	f003 fea5 	bl	8011a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	2101      	movs	r1, #1
 800dcda:	201b      	movs	r0, #27
 800dcdc:	f002 fed6 	bl	8010a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800dce0:	201b      	movs	r0, #27
 800dce2:	f002 ff07 	bl	8010af4 <HAL_NVIC_EnableIRQ>
 800dce6:	e7cd      	b.n	800dc84 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800dce8:	4a73      	ldr	r2, [pc, #460]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800dcea:	69d1      	ldr	r1, [r2, #28]
 800dcec:	2080      	movs	r0, #128	; 0x80
 800dcee:	0280      	lsls	r0, r0, #10
 800dcf0:	4301      	orrs	r1, r0
 800dcf2:	61d1      	str	r1, [r2, #28]
 800dcf4:	69d3      	ldr	r3, [r2, #28]
 800dcf6:	4003      	ands	r3, r0
 800dcf8:	9302      	str	r3, [sp, #8]
 800dcfa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN;
 800dcfc:	2304      	movs	r3, #4
 800dcfe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd00:	2702      	movs	r7, #2
 800dd02:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd04:	2401      	movs	r4, #1
 800dd06:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd08:	2603      	movs	r6, #3
 800dd0a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800dd0c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800dd0e:	2590      	movs	r5, #144	; 0x90
 800dd10:	05ed      	lsls	r5, r5, #23
 800dd12:	a907      	add	r1, sp, #28
 800dd14:	0028      	movs	r0, r5
 800dd16:	f003 fe83 	bl	8011a20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;
 800dd1a:	2308      	movs	r3, #8
 800dd1c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd1e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd20:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd22:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800dd24:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800dd26:	a907      	add	r1, sp, #28
 800dd28:	0028      	movs	r0, r5
 800dd2a:	f003 fe79 	bl	8011a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800dd2e:	2200      	movs	r2, #0
 800dd30:	2101      	movs	r1, #1
 800dd32:	201c      	movs	r0, #28
 800dd34:	f002 feaa 	bl	8010a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800dd38:	201c      	movs	r0, #28
 800dd3a:	f002 fedb 	bl	8010af4 <HAL_NVIC_EnableIRQ>
 800dd3e:	e7a1      	b.n	800dc84 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800dd40:	4a5d      	ldr	r2, [pc, #372]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800dd42:	69d1      	ldr	r1, [r2, #28]
 800dd44:	2080      	movs	r0, #128	; 0x80
 800dd46:	02c0      	lsls	r0, r0, #11
 800dd48:	4301      	orrs	r1, r0
 800dd4a:	61d1      	str	r1, [r2, #28]
 800dd4c:	69d3      	ldr	r3, [r2, #28]
 800dd4e:	4003      	ands	r3, r0
 800dd50:	9303      	str	r3, [sp, #12]
 800dd52:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN;
 800dd54:	2380      	movs	r3, #128	; 0x80
 800dd56:	00db      	lsls	r3, r3, #3
 800dd58:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd5a:	2402      	movs	r4, #2
 800dd5c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd5e:	2701      	movs	r7, #1
 800dd60:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd62:	2603      	movs	r6, #3
 800dd64:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800dd66:	2504      	movs	r5, #4
 800dd68:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800dd6a:	a907      	add	r1, sp, #28
 800dd6c:	4853      	ldr	r0, [pc, #332]	; (800debc <HAL_UART_MspInit+0x26c>)
 800dd6e:	f003 fe57 	bl	8011a20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;
 800dd72:	2380      	movs	r3, #128	; 0x80
 800dd74:	011b      	lsls	r3, r3, #4
 800dd76:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd78:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd7a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd7c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800dd7e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800dd80:	a907      	add	r1, sp, #28
 800dd82:	484e      	ldr	r0, [pc, #312]	; (800debc <HAL_UART_MspInit+0x26c>)
 800dd84:	f003 fe4c 	bl	8011a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dd88:	2200      	movs	r2, #0
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	201d      	movs	r0, #29
 800dd8e:	f002 fe7d 	bl	8010a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dd92:	201d      	movs	r0, #29
 800dd94:	f002 feae 	bl	8010af4 <HAL_NVIC_EnableIRQ>
 800dd98:	e774      	b.n	800dc84 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800dd9a:	4a47      	ldr	r2, [pc, #284]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800dd9c:	69d1      	ldr	r1, [r2, #28]
 800dd9e:	2080      	movs	r0, #128	; 0x80
 800dda0:	0300      	lsls	r0, r0, #12
 800dda2:	4301      	orrs	r1, r0
 800dda4:	61d1      	str	r1, [r2, #28]
 800dda6:	69d3      	ldr	r3, [r2, #28]
 800dda8:	4003      	ands	r3, r0
 800ddaa:	9304      	str	r3, [sp, #16]
 800ddac:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN;
 800ddae:	2401      	movs	r4, #1
 800ddb0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddb2:	2502      	movs	r5, #2
 800ddb4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddb6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ddb8:	2603      	movs	r6, #3
 800ddba:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800ddbc:	2704      	movs	r7, #4
 800ddbe:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800ddc0:	a907      	add	r1, sp, #28
 800ddc2:	2090      	movs	r0, #144	; 0x90
 800ddc4:	05c0      	lsls	r0, r0, #23
 800ddc6:	f003 fe2b 	bl	8011a20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;
 800ddca:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddcc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddce:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ddd0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800ddd2:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800ddd4:	a907      	add	r1, sp, #28
 800ddd6:	2090      	movs	r0, #144	; 0x90
 800ddd8:	05c0      	lsls	r0, r0, #23
 800ddda:	f003 fe21 	bl	8011a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800ddde:	2200      	movs	r2, #0
 800dde0:	2101      	movs	r1, #1
 800dde2:	201d      	movs	r0, #29
 800dde4:	f002 fe52 	bl	8010a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dde8:	201d      	movs	r0, #29
 800ddea:	f002 fe83 	bl	8010af4 <HAL_NVIC_EnableIRQ>
 800ddee:	e749      	b.n	800dc84 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800ddf0:	4a31      	ldr	r2, [pc, #196]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800ddf2:	69d1      	ldr	r1, [r2, #28]
 800ddf4:	2080      	movs	r0, #128	; 0x80
 800ddf6:	0340      	lsls	r0, r0, #13
 800ddf8:	4301      	orrs	r1, r0
 800ddfa:	61d1      	str	r1, [r2, #28]
 800ddfc:	69d3      	ldr	r3, [r2, #28]
 800ddfe:	4003      	ands	r3, r0
 800de00:	9305      	str	r3, [sp, #20]
 800de02:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN;
 800de04:	2308      	movs	r3, #8
 800de06:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de08:	2402      	movs	r4, #2
 800de0a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de0c:	2701      	movs	r7, #1
 800de0e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de10:	2603      	movs	r6, #3
 800de12:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800de14:	2504      	movs	r5, #4
 800de16:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800de18:	a907      	add	r1, sp, #28
 800de1a:	4828      	ldr	r0, [pc, #160]	; (800debc <HAL_UART_MspInit+0x26c>)
 800de1c:	f003 fe00 	bl	8011a20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;
 800de20:	2310      	movs	r3, #16
 800de22:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de24:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de26:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de28:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800de2a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800de2c:	a907      	add	r1, sp, #28
 800de2e:	4823      	ldr	r0, [pc, #140]	; (800debc <HAL_UART_MspInit+0x26c>)
 800de30:	f003 fdf6 	bl	8011a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800de34:	2200      	movs	r2, #0
 800de36:	2101      	movs	r1, #1
 800de38:	201d      	movs	r0, #29
 800de3a:	f002 fe27 	bl	8010a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800de3e:	201d      	movs	r0, #29
 800de40:	f002 fe58 	bl	8010af4 <HAL_NVIC_EnableIRQ>
 800de44:	e71e      	b.n	800dc84 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800de46:	4b1c      	ldr	r3, [pc, #112]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800de48:	699a      	ldr	r2, [r3, #24]
 800de4a:	2420      	movs	r4, #32
 800de4c:	4322      	orrs	r2, r4
 800de4e:	619a      	str	r2, [r3, #24]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	4023      	ands	r3, r4
 800de54:	9306      	str	r3, [sp, #24]
 800de56:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN;
 800de58:	2310      	movs	r3, #16
 800de5a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de5c:	3b0e      	subs	r3, #14
 800de5e:	4699      	mov	r9, r3
 800de60:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de62:	2501      	movs	r5, #1
 800de64:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de66:	2703      	movs	r7, #3
 800de68:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800de6a:	2605      	movs	r6, #5
 800de6c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800de6e:	a907      	add	r1, sp, #28
 800de70:	2090      	movs	r0, #144	; 0x90
 800de72:	05c0      	lsls	r0, r0, #23
 800de74:	f003 fdd4 	bl	8011a20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;
 800de78:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de7a:	464b      	mov	r3, r9
 800de7c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de7e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de80:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800de82:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800de84:	a907      	add	r1, sp, #28
 800de86:	2090      	movs	r0, #144	; 0x90
 800de88:	05c0      	lsls	r0, r0, #23
 800de8a:	f003 fdc9 	bl	8011a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800de8e:	2200      	movs	r2, #0
 800de90:	2101      	movs	r1, #1
 800de92:	201d      	movs	r0, #29
 800de94:	f002 fdfa 	bl	8010a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800de98:	201d      	movs	r0, #29
 800de9a:	f002 fe2b 	bl	8010af4 <HAL_NVIC_EnableIRQ>
}
 800de9e:	e6f1      	b.n	800dc84 <HAL_UART_MspInit+0x34>
 800dea0:	40013800 	.word	0x40013800
 800dea4:	40004400 	.word	0x40004400
 800dea8:	40004800 	.word	0x40004800
 800deac:	40004c00 	.word	0x40004c00
 800deb0:	40005000 	.word	0x40005000
 800deb4:	40011400 	.word	0x40011400
 800deb8:	40021000 	.word	0x40021000
 800debc:	48000400 	.word	0x48000400

0800dec0 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800dec0:	2806      	cmp	r0, #6
 800dec2:	d80d      	bhi.n	800dee0 <GetUart+0x20>
 800dec4:	0080      	lsls	r0, r0, #2
 800dec6:	4b08      	ldr	r3, [pc, #32]	; (800dee8 <GetUart+0x28>)
 800dec8:	581b      	ldr	r3, [r3, r0]
 800deca:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800decc:	4807      	ldr	r0, [pc, #28]	; (800deec <GetUart+0x2c>)
 800dece:	e00a      	b.n	800dee6 <GetUart+0x26>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800ded0:	4807      	ldr	r0, [pc, #28]	; (800def0 <GetUart+0x30>)
 800ded2:	e008      	b.n	800dee6 <GetUart+0x26>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800ded4:	4807      	ldr	r0, [pc, #28]	; (800def4 <GetUart+0x34>)
 800ded6:	e006      	b.n	800dee6 <GetUart+0x26>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800ded8:	4807      	ldr	r0, [pc, #28]	; (800def8 <GetUart+0x38>)
 800deda:	e004      	b.n	800dee6 <GetUart+0x26>
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800dedc:	4807      	ldr	r0, [pc, #28]	; (800defc <GetUart+0x3c>)
 800dede:	e002      	b.n	800dee6 <GetUart+0x26>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800dee0:	2000      	movs	r0, #0
 800dee2:	e000      	b.n	800dee6 <GetUart+0x26>
			return P1uart;	
 800dee4:	4806      	ldr	r0, [pc, #24]	; (800df00 <GetUart+0x40>)
	}		
}
 800dee6:	4770      	bx	lr
 800dee8:	0801b8a4 	.word	0x0801b8a4
 800deec:	20006df0 	.word	0x20006df0
 800def0:	20006d10 	.word	0x20006d10
 800def4:	20006ca0 	.word	0x20006ca0
 800def8:	20006c30 	.word	0x20006c30
 800defc:	20006bc0 	.word	0x20006bc0
 800df00:	20006d80 	.word	0x20006d80

0800df04 <writePxMutex>:
{
 800df04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df06:	b083      	sub	sp, #12
 800df08:	0005      	movs	r5, r0
 800df0a:	9100      	str	r1, [sp, #0]
 800df0c:	0017      	movs	r7, r2
 800df0e:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800df10:	f7ff ffd6 	bl	800dec0 <GetUart>
 800df14:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800df16:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800df18:	2800      	cmp	r0, #0
 800df1a:	d016      	beq.n	800df4a <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df1c:	00ab      	lsls	r3, r5, #2
 800df1e:	4a0c      	ldr	r2, [pc, #48]	; (800df50 <writePxMutex+0x4c>)
 800df20:	5898      	ldr	r0, [r3, r2]
 800df22:	9901      	ldr	r1, [sp, #4]
 800df24:	f000 f93a 	bl	800e19c <osSemaphoreWait>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d10e      	bne.n	800df4a <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800df2c:	9b08      	ldr	r3, [sp, #32]
 800df2e:	003a      	movs	r2, r7
 800df30:	9900      	ldr	r1, [sp, #0]
 800df32:	0020      	movs	r0, r4
 800df34:	f005 fa78 	bl	8013428 <HAL_UART_Transmit>
 800df38:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800df3a:	d001      	beq.n	800df40 <writePxMutex+0x3c>
 800df3c:	2803      	cmp	r0, #3
 800df3e:	d1f5      	bne.n	800df2c <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800df40:	00ad      	lsls	r5, r5, #2
 800df42:	4b03      	ldr	r3, [pc, #12]	; (800df50 <writePxMutex+0x4c>)
 800df44:	58e8      	ldr	r0, [r5, r3]
 800df46:	f000 f955 	bl	800e1f4 <osSemaphoreRelease>
}
 800df4a:	0030      	movs	r0, r6
 800df4c:	b003      	add	sp, #12
 800df4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df50:	20006b20 	.word	0x20006b20

0800df54 <writePxITMutex>:
{
 800df54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df56:	b083      	sub	sp, #12
 800df58:	0004      	movs	r4, r0
 800df5a:	9101      	str	r1, [sp, #4]
 800df5c:	0017      	movs	r7, r2
 800df5e:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {
 800df60:	f7ff ffae 	bl	800dec0 <GetUart>
 800df64:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800df66:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {
 800df68:	2800      	cmp	r0, #0
 800df6a:	d008      	beq.n	800df7e <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df6c:	00a4      	lsls	r4, r4, #2
 800df6e:	4b09      	ldr	r3, [pc, #36]	; (800df94 <writePxITMutex+0x40>)
 800df70:	58e0      	ldr	r0, [r4, r3]
 800df72:	0029      	movs	r1, r5
 800df74:	f000 f912 	bl	800e19c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR;
 800df78:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df7a:	2800      	cmp	r0, #0
 800df7c:	d002      	beq.n	800df84 <writePxITMutex+0x30>
}
 800df7e:	0018      	movs	r0, r3
 800df80:	b003      	add	sp, #12
 800df82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800df84:	003a      	movs	r2, r7
 800df86:	9901      	ldr	r1, [sp, #4]
 800df88:	0030      	movs	r0, r6
 800df8a:	f004 feb7 	bl	8012cfc <HAL_UART_Transmit_IT>
 800df8e:	0003      	movs	r3, r0
 800df90:	e7f5      	b.n	800df7e <writePxITMutex+0x2a>
 800df92:	46c0      	nop			; (mov r8, r8)
 800df94:	20006b20 	.word	0x20006b20

0800df98 <writePxDMAMutex>:
{
 800df98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df9a:	b083      	sub	sp, #12
 800df9c:	0004      	movs	r4, r0
 800df9e:	000f      	movs	r7, r1
 800dfa0:	9201      	str	r2, [sp, #4]
 800dfa2:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800dfa4:	f7ff ff8c 	bl	800dec0 <GetUart>
 800dfa8:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dfaa:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d008      	beq.n	800dfc2 <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dfb0:	00a4      	lsls	r4, r4, #2
 800dfb2:	4b0a      	ldr	r3, [pc, #40]	; (800dfdc <writePxDMAMutex+0x44>)
 800dfb4:	58e0      	ldr	r0, [r4, r3]
 800dfb6:	0031      	movs	r1, r6
 800dfb8:	f000 f8f0 	bl	800e19c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dfbc:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d002      	beq.n	800dfc8 <writePxDMAMutex+0x30>
}
 800dfc2:	0018      	movs	r0, r3
 800dfc4:	b003      	add	sp, #12
 800dfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800dfc8:	0028      	movs	r0, r5
 800dfca:	f7ff f93b 	bl	800d244 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800dfce:	9a01      	ldr	r2, [sp, #4]
 800dfd0:	0039      	movs	r1, r7
 800dfd2:	0028      	movs	r0, r5
 800dfd4:	f004 ff3e 	bl	8012e54 <HAL_UART_Transmit_DMA>
 800dfd8:	0003      	movs	r3, r0
 800dfda:	e7f2      	b.n	800dfc2 <writePxDMAMutex+0x2a>
 800dfdc:	20006b20 	.word	0x20006b20

0800dfe0 <UpdateBaudrate>:
{
 800dfe0:	b510      	push	{r4, lr}
 800dfe2:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800dfe4:	f7ff ff6c 	bl	800dec0 <GetUart>
	huart->Init.BaudRate = baudrate;
 800dfe8:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800dfea:	f005 fac3 	bl	8013574 <HAL_UART_Init>
}
 800dfee:	2000      	movs	r0, #0
 800dff0:	bd10      	pop	{r4, pc}
	...

0800dff4 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800dff4:	b570      	push	{r4, r5, r6, lr}
 800dff6:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800dff8:	d003      	beq.n	800e002 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800dffa:	2901      	cmp	r1, #1
 800dffc:	d002      	beq.n	800e004 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800dffe:	2900      	cmp	r1, #0
 800e000:	d016      	beq.n	800e030 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e002:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e004:	f7fe f8c4 	bl	800c190 <GetPort>
 800e008:	4b14      	ldr	r3, [pc, #80]	; (800e05c <SwapUartPins+0x68>)
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	4d14      	ldr	r5, [pc, #80]	; (800e060 <SwapUartPins+0x6c>)
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	3801      	subs	r0, #1
 800e014:	2180      	movs	r1, #128	; 0x80
 800e016:	0209      	lsls	r1, r1, #8
 800e018:	000a      	movs	r2, r1
 800e01a:	4102      	asrs	r2, r0
 800e01c:	5b58      	ldrh	r0, [r3, r5]
 800e01e:	4302      	orrs	r2, r0
 800e020:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e022:	2308      	movs	r3, #8
 800e024:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e026:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e028:	0020      	movs	r0, r4
 800e02a:	f005 faa3 	bl	8013574 <HAL_UART_Init>
 800e02e:	e7e8      	b.n	800e002 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e030:	f7fe f8ae 	bl	800c190 <GetPort>
 800e034:	4b09      	ldr	r3, [pc, #36]	; (800e05c <SwapUartPins+0x68>)
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	3b01      	subs	r3, #1
 800e03a:	4d09      	ldr	r5, [pc, #36]	; (800e060 <SwapUartPins+0x6c>)
 800e03c:	005b      	lsls	r3, r3, #1
 800e03e:	3801      	subs	r0, #1
 800e040:	2180      	movs	r1, #128	; 0x80
 800e042:	0209      	lsls	r1, r1, #8
 800e044:	4101      	asrs	r1, r0
 800e046:	5b5a      	ldrh	r2, [r3, r5]
 800e048:	438a      	bics	r2, r1
 800e04a:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e04c:	2308      	movs	r3, #8
 800e04e:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e050:	2300      	movs	r3, #0
 800e052:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e054:	0020      	movs	r0, r4
 800e056:	f005 fa8d 	bl	8013574 <HAL_UART_Init>
}
 800e05a:	e7d2      	b.n	800e002 <SwapUartPins+0xe>
 800e05c:	20001076 	.word	0x20001076
 800e060:	20006f1c 	.word	0x20006f1c

0800e064 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e064:	4816      	ldr	r0, [pc, #88]	; (800e0c0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e066:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e068:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e06a:	e003      	b.n	800e074 <LoopCopyDataInit>

0800e06c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e06c:	4b15      	ldr	r3, [pc, #84]	; (800e0c4 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e06e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e070:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e072:	3104      	adds	r1, #4

0800e074 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e074:	4814      	ldr	r0, [pc, #80]	; (800e0c8 <LoopForever+0xc>)
  ldr r3, =_edata
 800e076:	4b15      	ldr	r3, [pc, #84]	; (800e0cc <LoopForever+0x10>)
  adds r2, r0, r1
 800e078:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e07a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e07c:	d3f6      	bcc.n	800e06c <CopyDataInit>
  ldr r2, =_sbss
 800e07e:	4a14      	ldr	r2, [pc, #80]	; (800e0d0 <LoopForever+0x14>)
  b LoopFillZerobss
 800e080:	e002      	b.n	800e088 <LoopFillZerobss>

0800e082 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e082:	2300      	movs	r3, #0
  str  r3, [r2]
 800e084:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e086:	3204      	adds	r2, #4

0800e088 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e088:	4b12      	ldr	r3, [pc, #72]	; (800e0d4 <LoopForever+0x18>)
  cmp r2, r3
 800e08a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e08c:	d3f9      	bcc.n	800e082 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e08e:	4812      	ldr	r0, [pc, #72]	; (800e0d8 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e090:	4912      	ldr	r1, [pc, #72]	; (800e0dc <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e092:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e094:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e096:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e098:	d005      	beq.n	800e0a6 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e09a:	f000 f82b 	bl	800e0f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e09e:	f005 fbd5 	bl	801384c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e0a2:	f005 fbbc 	bl	801381e <main>

0800e0a6 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e0a6:	480e      	ldr	r0, [pc, #56]	; (800e0e0 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e0a8:	490e      	ldr	r1, [pc, #56]	; (800e0e4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e0aa:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e0ac:	480e      	ldr	r0, [pc, #56]	; (800e0e8 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e0ae:	490d      	ldr	r1, [pc, #52]	; (800e0e4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e0b0:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e0b2:	480e      	ldr	r0, [pc, #56]	; (800e0ec <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e0b4:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e0b6:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e0b8:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e0ba:	4700      	bx	r0

0800e0bc <LoopForever>:


LoopForever:
    b LoopForever
 800e0bc:	e7fe      	b.n	800e0bc <LoopForever>
 800e0be:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e0c0:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e0c4:	0801bd60 	.word	0x0801bd60
  ldr r0, =_sdata
 800e0c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e0cc:	20000a58 	.word	0x20000a58
  ldr r2, =_sbss
 800e0d0:	20000a58 	.word	0x20000a58
  ldr r3, = _ebss
 800e0d4:	20006fc0 	.word	0x20006fc0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e0d8:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e0dc:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e0e0:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e0e4:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e0e8:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e0ec:	1fffd800 	.word	0x1fffd800

0800e0f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e0f0:	e7fe      	b.n	800e0f0 <ADC1_COMP_IRQHandler>
	...

0800e0f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e0f4:	4b11      	ldr	r3, [pc, #68]	; (800e13c <SystemInit+0x48>)
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	2101      	movs	r1, #1
 800e0fa:	430a      	orrs	r2, r1
 800e0fc:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	480f      	ldr	r0, [pc, #60]	; (800e140 <SystemInit+0x4c>)
 800e102:	4002      	ands	r2, r0
 800e104:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	480e      	ldr	r0, [pc, #56]	; (800e144 <SystemInit+0x50>)
 800e10a:	4002      	ands	r2, r0
 800e10c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	480d      	ldr	r0, [pc, #52]	; (800e148 <SystemInit+0x54>)
 800e112:	4002      	ands	r2, r0
 800e114:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e116:	685a      	ldr	r2, [r3, #4]
 800e118:	480c      	ldr	r0, [pc, #48]	; (800e14c <SystemInit+0x58>)
 800e11a:	4002      	ands	r2, r0
 800e11c:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e120:	200f      	movs	r0, #15
 800e122:	4382      	bics	r2, r0
 800e124:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e128:	4809      	ldr	r0, [pc, #36]	; (800e150 <SystemInit+0x5c>)
 800e12a:	4002      	ands	r2, r0
 800e12c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e12e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e130:	438a      	bics	r2, r1
 800e132:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e134:	2200      	movs	r2, #0
 800e136:	609a      	str	r2, [r3, #8]

}
 800e138:	4770      	bx	lr
 800e13a:	46c0      	nop			; (mov r8, r8)
 800e13c:	40021000 	.word	0x40021000
 800e140:	08ffb80c 	.word	0x08ffb80c
 800e144:	fef6ffff 	.word	0xfef6ffff
 800e148:	fffbffff 	.word	0xfffbffff
 800e14c:	ffc0ffff 	.word	0xffc0ffff
 800e150:	fff0feac 	.word	0xfff0feac

0800e154 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e154:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e156:	f001 f81d 	bl	800f194 <vTaskStartScheduler>
  
  return osOK;
}
 800e15a:	2000      	movs	r0, #0
 800e15c:	bd10      	pop	{r4, pc}

0800e15e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e15e:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e160:	2800      	cmp	r0, #0
 800e162:	d100      	bne.n	800e166 <osDelay+0x8>
 800e164:	3001      	adds	r0, #1
 800e166:	f001 f951 	bl	800f40c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e16a:	2000      	movs	r0, #0
 800e16c:	bd10      	pop	{r4, pc}

0800e16e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e16e:	b510      	push	{r4, lr}
 800e170:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e172:	2901      	cmp	r1, #1
 800e174:	d005      	beq.n	800e182 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e176:	2100      	movs	r1, #0
 800e178:	f000 fbbe 	bl	800e8f8 <xQueueCreateCountingSemaphore>
 800e17c:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e17e:	0020      	movs	r0, r4
 800e180:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e182:	2203      	movs	r2, #3
 800e184:	2100      	movs	r1, #0
 800e186:	f000 fb90 	bl	800e8aa <xQueueGenericCreate>
 800e18a:	1e04      	subs	r4, r0, #0
 800e18c:	d0f7      	beq.n	800e17e <osSemaphoreCreate+0x10>
 800e18e:	2300      	movs	r3, #0
 800e190:	2200      	movs	r2, #0
 800e192:	2100      	movs	r1, #0
 800e194:	f000 fbc4 	bl	800e920 <xQueueGenericSend>
 800e198:	e7f1      	b.n	800e17e <osSemaphoreCreate+0x10>
	...

0800e19c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e19c:	b500      	push	{lr}
 800e19e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d021      	beq.n	800e1ec <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1a8:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d010      	beq.n	800e1d2 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e1b0:	aa01      	add	r2, sp, #4
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	f000 fd76 	bl	800eca4 <xQueueReceiveFromISR>
 800e1b8:	0003      	movs	r3, r0
      return osErrorOS;
 800e1ba:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d113      	bne.n	800e1e8 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e1c0:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800e1c2:	9b01      	ldr	r3, [sp, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00f      	beq.n	800e1e8 <osSemaphoreWait+0x4c>
 800e1c8:	4b09      	ldr	r3, [pc, #36]	; (800e1f0 <osSemaphoreWait+0x54>)
 800e1ca:	2280      	movs	r2, #128	; 0x80
 800e1cc:	0552      	lsls	r2, r2, #21
 800e1ce:	601a      	str	r2, [r3, #0]
 800e1d0:	e00a      	b.n	800e1e8 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	000a      	movs	r2, r1
 800e1d6:	2100      	movs	r1, #0
 800e1d8:	f000 fcbb 	bl	800eb52 <xQueueGenericReceive>
  return osOK;
 800e1dc:	3801      	subs	r0, #1
 800e1de:	1e43      	subs	r3, r0, #1
 800e1e0:	4198      	sbcs	r0, r3
 800e1e2:	4240      	negs	r0, r0
 800e1e4:	23ff      	movs	r3, #255	; 0xff
 800e1e6:	4018      	ands	r0, r3
}
 800e1e8:	b003      	add	sp, #12
 800e1ea:	bd00      	pop	{pc}
    return osErrorParameter;
 800e1ec:	2080      	movs	r0, #128	; 0x80
 800e1ee:	e7fb      	b.n	800e1e8 <osSemaphoreWait+0x4c>
 800e1f0:	e000ed04 	.word	0xe000ed04

0800e1f4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e1f4:	b500      	push	{lr}
 800e1f6:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	9301      	str	r3, [sp, #4]
 800e1fc:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800e200:	2b00      	cmp	r3, #0
 800e202:	d00f      	beq.n	800e224 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e204:	a901      	add	r1, sp, #4
 800e206:	f000 fc69 	bl	800eadc <xQueueGiveFromISR>
 800e20a:	0003      	movs	r3, r0
      return osErrorOS;
 800e20c:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d114      	bne.n	800e23c <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800e212:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e214:	9b01      	ldr	r3, [sp, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d010      	beq.n	800e23c <osSemaphoreRelease+0x48>
 800e21a:	4b09      	ldr	r3, [pc, #36]	; (800e240 <osSemaphoreRelease+0x4c>)
 800e21c:	2280      	movs	r2, #128	; 0x80
 800e21e:	0552      	lsls	r2, r2, #21
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	e00b      	b.n	800e23c <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e224:	2300      	movs	r3, #0
 800e226:	2200      	movs	r2, #0
 800e228:	2100      	movs	r1, #0
 800e22a:	f000 fb79 	bl	800e920 <xQueueGenericSend>
      result = osErrorOS;
 800e22e:	3801      	subs	r0, #1
 800e230:	4243      	negs	r3, r0
 800e232:	4158      	adcs	r0, r3
 800e234:	4240      	negs	r0, r0
 800e236:	23fe      	movs	r3, #254	; 0xfe
 800e238:	4398      	bics	r0, r3
 800e23a:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e23c:	b003      	add	sp, #12
 800e23e:	bd00      	pop	{pc}
 800e240:	e000ed04 	.word	0xe000ed04

0800e244 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e244:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e246:	f001 fb43 	bl	800f8d0 <xTaskGetSchedulerState>
 800e24a:	2801      	cmp	r0, #1
 800e24c:	d001      	beq.n	800e252 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800e24e:	f001 ffc5 	bl	80101dc <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e252:	bd10      	pop	{r4, pc}

0800e254 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800e258:	d101      	bne.n	800e25e <FreeRTOS_CLIRegisterCommand+0xa>
 800e25a:	b672      	cpsid	i
 800e25c:	e7fe      	b.n	800e25c <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e25e:	2008      	movs	r0, #8
 800e260:	f001 fff8 	bl	8010254 <pvPortMalloc>
 800e264:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800e266:	d101      	bne.n	800e26c <FreeRTOS_CLIRegisterCommand+0x18>
 800e268:	b672      	cpsid	i
 800e26a:	e7fe      	b.n	800e26a <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800e26c:	f001 ff70 	bl	8010150 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e270:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e272:	2300      	movs	r3, #0
 800e274:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e276:	4b04      	ldr	r3, [pc, #16]	; (800e288 <FreeRTOS_CLIRegisterCommand+0x34>)
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e27c:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e27e:	f001 ff73 	bl	8010168 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800e282:	2001      	movs	r0, #1
 800e284:	bd70      	pop	{r4, r5, r6, pc}
 800e286:	46c0      	nop			; (mov r8, r8)
 800e288:	20000094 	.word	0x20000094

0800e28c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e28e:	46d6      	mov	lr, sl
 800e290:	b500      	push	{lr}
 800e292:	b084      	sub	sp, #16
 800e294:	9001      	str	r0, [sp, #4]
 800e296:	9102      	str	r1, [sp, #8]
 800e298:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e29a:	4b37      	ldr	r3, [pc, #220]	; (800e378 <FreeRTOS_CLIProcessCommand+0xec>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d00e      	beq.n	800e2c0 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	9a01      	ldr	r2, [sp, #4]
 800e2a8:	9903      	ldr	r1, [sp, #12]
 800e2aa:	9802      	ldr	r0, [sp, #8]
 800e2ac:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d102      	bne.n	800e2b8 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800e2b2:	4b31      	ldr	r3, [pc, #196]	; (800e378 <FreeRTOS_CLIProcessCommand+0xec>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e2b8:	b004      	add	sp, #16
 800e2ba:	bc04      	pop	{r2}
 800e2bc:	4692      	mov	sl, r2
 800e2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e2c0:	4d2e      	ldr	r5, [pc, #184]	; (800e37c <FreeRTOS_CLIProcessCommand+0xf0>)
 800e2c2:	4a2d      	ldr	r2, [pc, #180]	; (800e378 <FreeRTOS_CLIProcessCommand+0xec>)
 800e2c4:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e2c6:	3320      	adds	r3, #32
 800e2c8:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e2ca:	0017      	movs	r7, r2
 800e2cc:	e00a      	b.n	800e2e4 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e2ce:	0002      	movs	r2, r0
 800e2d0:	0021      	movs	r1, r4
 800e2d2:	9801      	ldr	r0, [sp, #4]
 800e2d4:	f005 ff84 	bl	80141e0 <strncmp>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d00e      	beq.n	800e2fa <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e2dc:	686d      	ldr	r5, [r5, #4]
 800e2de:	603d      	str	r5, [r7, #0]
 800e2e0:	2d00      	cmp	r5, #0
 800e2e2:	d012      	beq.n	800e30a <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e2e4:	682e      	ldr	r6, [r5, #0]
 800e2e6:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e2e8:	0020      	movs	r0, r4
 800e2ea:	f7f1 ff15 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e2ee:	9b01      	ldr	r3, [sp, #4]
 800e2f0:	5c1b      	ldrb	r3, [r3, r0]
 800e2f2:	4652      	mov	r2, sl
 800e2f4:	4393      	bics	r3, r2
 800e2f6:	d1f1      	bne.n	800e2dc <FreeRTOS_CLIProcessCommand+0x50>
 800e2f8:	e7e9      	b.n	800e2ce <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e2fa:	200c      	movs	r0, #12
 800e2fc:	5630      	ldrsb	r0, [r6, r0]
 800e2fe:	2800      	cmp	r0, #0
 800e300:	da0a      	bge.n	800e318 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e302:	4b1d      	ldr	r3, [pc, #116]	; (800e378 <FreeRTOS_CLIProcessCommand+0xec>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1cb      	bne.n	800e2a2 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e30a:	9a03      	ldr	r2, [sp, #12]
 800e30c:	491c      	ldr	r1, [pc, #112]	; (800e380 <FreeRTOS_CLIProcessCommand+0xf4>)
 800e30e:	9802      	ldr	r0, [sp, #8]
 800e310:	f005 ff77 	bl	8014202 <strncpy>
		xReturn = pdFALSE;
 800e314:	2000      	movs	r0, #0
	return xReturn;
 800e316:	e7cf      	b.n	800e2b8 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e318:	9a01      	ldr	r2, [sp, #4]
 800e31a:	2300      	movs	r3, #0
 800e31c:	56d3      	ldrsb	r3, [r2, r3]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d027      	beq.n	800e372 <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800e322:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e324:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e326:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800e328:	2501      	movs	r5, #1
 800e32a:	e009      	b.n	800e340 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800e32c:	2901      	cmp	r1, #1
 800e32e:	d002      	beq.n	800e336 <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800e330:	3401      	adds	r4, #1
 800e332:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800e334:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800e336:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800e338:	2300      	movs	r3, #0
 800e33a:	56d3      	ldrsb	r3, [r2, r3]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d003      	beq.n	800e348 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800e340:	2b20      	cmp	r3, #32
 800e342:	d0f3      	beq.n	800e32c <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800e344:	0031      	movs	r1, r6
 800e346:	e7f6      	b.n	800e336 <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e348:	2901      	cmp	r1, #1
 800e34a:	d00f      	beq.n	800e36c <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e34c:	4b0a      	ldr	r3, [pc, #40]	; (800e378 <FreeRTOS_CLIProcessCommand+0xec>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d0da      	beq.n	800e30a <FreeRTOS_CLIProcessCommand+0x7e>
 800e354:	42a0      	cmp	r0, r4
 800e356:	d0a4      	beq.n	800e2a2 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e358:	9a03      	ldr	r2, [sp, #12]
 800e35a:	490a      	ldr	r1, [pc, #40]	; (800e384 <FreeRTOS_CLIProcessCommand+0xf8>)
 800e35c:	9802      	ldr	r0, [sp, #8]
 800e35e:	f005 ff50 	bl	8014202 <strncpy>
		pxCommand = NULL;
 800e362:	4b05      	ldr	r3, [pc, #20]	; (800e378 <FreeRTOS_CLIProcessCommand+0xec>)
 800e364:	2200      	movs	r2, #0
 800e366:	601a      	str	r2, [r3, #0]
 800e368:	2000      	movs	r0, #0
 800e36a:	e7a5      	b.n	800e2b8 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800e36c:	3c01      	subs	r4, #1
 800e36e:	b264      	sxtb	r4, r4
 800e370:	e7ec      	b.n	800e34c <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800e372:	2400      	movs	r4, #0
 800e374:	e7ea      	b.n	800e34c <FreeRTOS_CLIProcessCommand+0xc0>
 800e376:	46c0      	nop			; (mov r8, r8)
 800e378:	20001e2c 	.word	0x20001e2c
 800e37c:	20000098 	.word	0x20000098
 800e380:	0801b918 	.word	0x0801b918
 800e384:	0801b8c0 	.word	0x0801b8c0

0800e388 <FreeRTOS_CLIGetOutputBuffer>:
}
 800e388:	4800      	ldr	r0, [pc, #0]	; (800e38c <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e38a:	4770      	bx	lr
 800e38c:	20001bc4 	.word	0x20001bc4

0800e390 <FreeRTOS_CLIGetParameter>:
{
 800e390:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e396:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e398:	2900      	cmp	r1, #0
 800e39a:	d10b      	bne.n	800e3b4 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800e39c:	2000      	movs	r0, #0
 800e39e:	e02a      	b.n	800e3f6 <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800e3a0:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	56c3      	ldrsb	r3, [r0, r3]
 800e3a6:	2b20      	cmp	r3, #32
 800e3a8:	d0fa      	beq.n	800e3a0 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d022      	beq.n	800e3f4 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800e3ae:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e3b0:	42a1      	cmp	r1, r4
 800e3b2:	d00d      	beq.n	800e3d0 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	56c3      	ldrsb	r3, [r0, r3]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d01f      	beq.n	800e3fc <FreeRTOS_CLIGetParameter+0x6c>
 800e3bc:	2b20      	cmp	r3, #32
 800e3be:	d0ef      	beq.n	800e3a0 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800e3c0:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	56c3      	ldrsb	r3, [r0, r3]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d018      	beq.n	800e3fc <FreeRTOS_CLIGetParameter+0x6c>
 800e3ca:	2b20      	cmp	r3, #32
 800e3cc:	d1f8      	bne.n	800e3c0 <FreeRTOS_CLIGetParameter+0x30>
 800e3ce:	e7e7      	b.n	800e3a0 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e3d0:	7803      	ldrb	r3, [r0, #0]
 800e3d2:	2120      	movs	r1, #32
 800e3d4:	438b      	bics	r3, r1
 800e3d6:	d00f      	beq.n	800e3f8 <FreeRTOS_CLIGetParameter+0x68>
 800e3d8:	0004      	movs	r4, r0
 800e3da:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800e3dc:	6813      	ldr	r3, [r2, #0]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e3e2:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e3e4:	7821      	ldrb	r1, [r4, #0]
 800e3e6:	43a9      	bics	r1, r5
 800e3e8:	d1f8      	bne.n	800e3dc <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800e3ea:	1e5a      	subs	r2, r3, #1
 800e3ec:	4193      	sbcs	r3, r2
 800e3ee:	425b      	negs	r3, r3
 800e3f0:	4018      	ands	r0, r3
 800e3f2:	e000      	b.n	800e3f6 <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800e3f4:	2000      	movs	r0, #0
}
 800e3f6:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	e7fc      	b.n	800e3f6 <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	56c3      	ldrsb	r3, [r0, r3]
 800e400:	e7d3      	b.n	800e3aa <FreeRTOS_CLIGetParameter+0x1a>
	...

0800e404 <prvHelpCommand>:
{
 800e404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e406:	b083      	sub	sp, #12
 800e408:	0004      	movs	r4, r0
 800e40a:	000d      	movs	r5, r1
 800e40c:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e412:	aa01      	add	r2, sp, #4
 800e414:	2101      	movs	r1, #1
 800e416:	f7ff ffbb 	bl	800e390 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e41a:	2800      	cmp	r0, #0
 800e41c:	d027      	beq.n	800e46e <prvHelpCommand+0x6a>
 800e41e:	2206      	movs	r2, #6
 800e420:	4930      	ldr	r1, [pc, #192]	; (800e4e4 <prvHelpCommand+0xe0>)
 800e422:	f005 fedd 	bl	80141e0 <strncmp>
 800e426:	2800      	cmp	r0, #0
 800e428:	d149      	bne.n	800e4be <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800e42a:	4b2f      	ldr	r3, [pc, #188]	; (800e4e8 <prvHelpCommand+0xe4>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	2b07      	cmp	r3, #7
 800e430:	d012      	beq.n	800e458 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e432:	1c5f      	adds	r7, r3, #1
 800e434:	b2ff      	uxtb	r7, r7
 800e436:	4a2c      	ldr	r2, [pc, #176]	; (800e4e8 <prvHelpCommand+0xe4>)
 800e438:	7017      	strb	r7, [r2, #0]
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4a2b      	ldr	r2, [pc, #172]	; (800e4ec <prvHelpCommand+0xe8>)
 800e43e:	5899      	ldr	r1, [r3, r2]
 800e440:	002a      	movs	r2, r5
 800e442:	0020      	movs	r0, r4
 800e444:	f005 fedd 	bl	8014202 <strncpy>
			xReturn = pdTRUE;
 800e448:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800e44a:	2f07      	cmp	r7, #7
 800e44c:	d137      	bne.n	800e4be <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800e44e:	4b26      	ldr	r3, [pc, #152]	; (800e4e8 <prvHelpCommand+0xe4>)
 800e450:	2200      	movs	r2, #0
 800e452:	701a      	strb	r2, [r3, #0]
 800e454:	2600      	movs	r6, #0
 800e456:	e032      	b.n	800e4be <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e458:	4b23      	ldr	r3, [pc, #140]	; (800e4e8 <prvHelpCommand+0xe4>)
 800e45a:	2201      	movs	r2, #1
 800e45c:	701a      	strb	r2, [r3, #0]
 800e45e:	4b23      	ldr	r3, [pc, #140]	; (800e4ec <prvHelpCommand+0xe8>)
 800e460:	6819      	ldr	r1, [r3, #0]
 800e462:	002a      	movs	r2, r5
 800e464:	0020      	movs	r0, r4
 800e466:	f005 fecc 	bl	8014202 <strncpy>
			xReturn = pdTRUE;
 800e46a:	2601      	movs	r6, #1
 800e46c:	e027      	b.n	800e4be <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800e46e:	4b20      	ldr	r3, [pc, #128]	; (800e4f0 <prvHelpCommand+0xec>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d026      	beq.n	800e4c4 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800e476:	4b1f      	ldr	r3, [pc, #124]	; (800e4f4 <prvHelpCommand+0xf0>)
 800e478:	781a      	ldrb	r2, [r3, #0]
 800e47a:	4b1f      	ldr	r3, [pc, #124]	; (800e4f8 <prvHelpCommand+0xf4>)
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d927      	bls.n	800e4d2 <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e482:	002a      	movs	r2, r5
 800e484:	3a08      	subs	r2, #8
 800e486:	4b1a      	ldr	r3, [pc, #104]	; (800e4f0 <prvHelpCommand+0xec>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	6859      	ldr	r1, [r3, #4]
 800e48e:	0020      	movs	r0, r4
 800e490:	3008      	adds	r0, #8
 800e492:	f005 feb6 	bl	8014202 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e496:	1c60      	adds	r0, r4, #1
 800e498:	4918      	ldr	r1, [pc, #96]	; (800e4fc <prvHelpCommand+0xf8>)
 800e49a:	f005 fe99 	bl	80141d0 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e49e:	2328      	movs	r3, #40	; 0x28
 800e4a0:	7023      	strb	r3, [r4, #0]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	71a3      	strb	r3, [r4, #6]
 800e4a6:	3b09      	subs	r3, #9
 800e4a8:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800e4aa:	4b11      	ldr	r3, [pc, #68]	; (800e4f0 <prvHelpCommand+0xec>)
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	6856      	ldr	r6, [r2, #4]
 800e4b0:	601e      	str	r6, [r3, #0]
		counter++;
 800e4b2:	4a10      	ldr	r2, [pc, #64]	; (800e4f4 <prvHelpCommand+0xf0>)
 800e4b4:	7813      	ldrb	r3, [r2, #0]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800e4ba:	1e73      	subs	r3, r6, #1
 800e4bc:	419e      	sbcs	r6, r3
}
 800e4be:	0030      	movs	r0, r6
 800e4c0:	b003      	add	sp, #12
 800e4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800e4c4:	4b0a      	ldr	r3, [pc, #40]	; (800e4f0 <prvHelpCommand+0xec>)
 800e4c6:	4a0e      	ldr	r2, [pc, #56]	; (800e500 <prvHelpCommand+0xfc>)
 800e4c8:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e4ca:	4b0a      	ldr	r3, [pc, #40]	; (800e4f4 <prvHelpCommand+0xf0>)
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	701a      	strb	r2, [r3, #0]
 800e4d0:	e7d1      	b.n	800e476 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e4d2:	4b07      	ldr	r3, [pc, #28]	; (800e4f0 <prvHelpCommand+0xec>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6859      	ldr	r1, [r3, #4]
 800e4da:	002a      	movs	r2, r5
 800e4dc:	0020      	movs	r0, r4
 800e4de:	f005 fe90 	bl	8014202 <strncpy>
 800e4e2:	e7e2      	b.n	800e4aa <prvHelpCommand+0xa6>
 800e4e4:	08019368 	.word	0x08019368
 800e4e8:	20001e34 	.word	0x20001e34
 800e4ec:	20000054 	.word	0x20000054
 800e4f0:	20001e30 	.word	0x20001e30
 800e4f4:	20001e28 	.word	0x20001e28
 800e4f8:	20006a24 	.word	0x20006a24
 800e4fc:	080188f6 	.word	0x080188f6
 800e500:	20000098 	.word	0x20000098

0800e504 <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
 800e504:	b510      	push	{r4, lr}
EventGroup_t *pxEventBits;

	pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800e506:	201c      	movs	r0, #28
 800e508:	f001 fea4 	bl	8010254 <pvPortMalloc>
 800e50c:	1e04      	subs	r4, r0, #0
	if( pxEventBits != NULL )
 800e50e:	d003      	beq.n	800e518 <xEventGroupCreate+0x14>
	{
		pxEventBits->uxEventBits = 0;
 800e510:	2300      	movs	r3, #0
 800e512:	c008      	stmia	r0!, {r3}
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e514:	f000 f8be 	bl	800e694 <vListInitialise>
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
}
 800e518:	0020      	movs	r0, r4
 800e51a:	bd10      	pop	{r4, pc}

0800e51c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800e51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e51e:	46ce      	mov	lr, r9
 800e520:	b500      	push	{lr}
 800e522:	0006      	movs	r6, r0
 800e524:	000d      	movs	r5, r1
 800e526:	0017      	movs	r7, r2
 800e528:	4699      	mov	r9, r3
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d003      	beq.n	800e536 <xEventGroupWaitBits+0x1a>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e52e:	0e0b      	lsrs	r3, r1, #24
 800e530:	d003      	beq.n	800e53a <xEventGroupWaitBits+0x1e>
 800e532:	b672      	cpsid	i
 800e534:	e7fe      	b.n	800e534 <xEventGroupWaitBits+0x18>
	configASSERT( xEventGroup );
 800e536:	b672      	cpsid	i
 800e538:	e7fe      	b.n	800e538 <xEventGroupWaitBits+0x1c>
	configASSERT( uxBitsToWaitFor != 0 );
 800e53a:	2900      	cmp	r1, #0
 800e53c:	d101      	bne.n	800e542 <xEventGroupWaitBits+0x26>
 800e53e:	b672      	cpsid	i
 800e540:	e7fe      	b.n	800e540 <xEventGroupWaitBits+0x24>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e542:	f001 f9c5 	bl	800f8d0 <xTaskGetSchedulerState>
 800e546:	2800      	cmp	r0, #0
 800e548:	d104      	bne.n	800e554 <xEventGroupWaitBits+0x38>
 800e54a:	9b06      	ldr	r3, [sp, #24]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d001      	beq.n	800e554 <xEventGroupWaitBits+0x38>
 800e550:	b672      	cpsid	i
 800e552:	e7fe      	b.n	800e552 <xEventGroupWaitBits+0x36>
	}
	#endif

	vTaskSuspendAll();
 800e554:	f000 fe4a 	bl	800f1ec <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e558:	6834      	ldr	r4, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 800e55a:	464b      	mov	r3, r9
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d10d      	bne.n	800e57c <xEventGroupWaitBits+0x60>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e560:	0023      	movs	r3, r4
 800e562:	402b      	ands	r3, r5
BaseType_t xWaitConditionMet = pdFALSE;
 800e564:	1e5a      	subs	r2, r3, #1
 800e566:	4193      	sbcs	r3, r2
		if( xWaitConditionMet != pdFALSE )
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00d      	beq.n	800e588 <xEventGroupWaitBits+0x6c>
			if( xClearOnExit != pdFALSE )
 800e56c:	2f00      	cmp	r7, #0
 800e56e:	d002      	beq.n	800e576 <xEventGroupWaitBits+0x5a>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e570:	0023      	movs	r3, r4
 800e572:	43ab      	bics	r3, r5
 800e574:	6033      	str	r3, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
 800e576:	f000 fed9 	bl	800f32c <xTaskResumeAll>
 800e57a:	e037      	b.n	800e5ec <xEventGroupWaitBits+0xd0>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e57c:	0023      	movs	r3, r4
 800e57e:	402b      	ands	r3, r5
 800e580:	1b5b      	subs	r3, r3, r5
BaseType_t xWaitConditionMet = pdFALSE;
 800e582:	425a      	negs	r2, r3
 800e584:	4153      	adcs	r3, r2
 800e586:	e7ef      	b.n	800e568 <xEventGroupWaitBits+0x4c>
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e588:	9b06      	ldr	r3, [sp, #24]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d0f3      	beq.n	800e576 <xEventGroupWaitBits+0x5a>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e58e:	0039      	movs	r1, r7
 800e590:	1e4b      	subs	r3, r1, #1
 800e592:	4199      	sbcs	r1, r3
 800e594:	0609      	lsls	r1, r1, #24
			if( xWaitForAllBits != pdFALSE )
 800e596:	464b      	mov	r3, r9
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <xEventGroupWaitBits+0x86>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e59c:	2380      	movs	r3, #128	; 0x80
 800e59e:	04db      	lsls	r3, r3, #19
 800e5a0:	4319      	orrs	r1, r3
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e5a2:	4329      	orrs	r1, r5
 800e5a4:	1d30      	adds	r0, r6, #4
 800e5a6:	9a06      	ldr	r2, [sp, #24]
 800e5a8:	f001 f884 	bl	800f6b4 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 800e5ac:	f000 febe 	bl	800f32c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d101      	bne.n	800e5b8 <xEventGroupWaitBits+0x9c>
			portYIELD_WITHIN_API();
 800e5b4:	f001 fdc0 	bl	8010138 <vPortYield>
		uxReturn = uxTaskResetEventItemValue();
 800e5b8:	f001 faca 	bl	800fb50 <uxTaskResetEventItemValue>
 800e5bc:	0004      	movs	r4, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e5be:	0183      	lsls	r3, r0, #6
 800e5c0:	d412      	bmi.n	800e5e8 <xEventGroupWaitBits+0xcc>
			taskENTER_CRITICAL();
 800e5c2:	f001 fdc5 	bl	8010150 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 800e5c6:	6834      	ldr	r4, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 800e5c8:	464b      	mov	r3, r9
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d112      	bne.n	800e5f4 <xEventGroupWaitBits+0xd8>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e5ce:	0023      	movs	r3, r4
 800e5d0:	402b      	ands	r3, r5
BaseType_t xWaitConditionMet = pdFALSE;
 800e5d2:	1e5a      	subs	r2, r3, #1
 800e5d4:	4193      	sbcs	r3, r2
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d004      	beq.n	800e5e4 <xEventGroupWaitBits+0xc8>
					if( xClearOnExit != pdFALSE )
 800e5da:	2f00      	cmp	r7, #0
 800e5dc:	d002      	beq.n	800e5e4 <xEventGroupWaitBits+0xc8>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e5de:	0023      	movs	r3, r4
 800e5e0:	43ab      	bics	r3, r5
 800e5e2:	6033      	str	r3, [r6, #0]
			taskEXIT_CRITICAL();
 800e5e4:	f001 fdc0 	bl	8010168 <vPortExitCritical>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e5e8:	0224      	lsls	r4, r4, #8
 800e5ea:	0a24      	lsrs	r4, r4, #8
}
 800e5ec:	0020      	movs	r0, r4
 800e5ee:	bc04      	pop	{r2}
 800e5f0:	4691      	mov	r9, r2
 800e5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e5f4:	0023      	movs	r3, r4
 800e5f6:	402b      	ands	r3, r5
 800e5f8:	1b5b      	subs	r3, r3, r5
BaseType_t xWaitConditionMet = pdFALSE;
 800e5fa:	425a      	negs	r2, r3
 800e5fc:	4153      	adcs	r3, r2
 800e5fe:	e7ea      	b.n	800e5d6 <xEventGroupWaitBits+0xba>

0800e600 <xEventGroupSetBits>:
{
 800e600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e602:	46d6      	mov	lr, sl
 800e604:	464f      	mov	r7, r9
 800e606:	4646      	mov	r6, r8
 800e608:	b5c0      	push	{r6, r7, lr}
 800e60a:	0004      	movs	r4, r0
 800e60c:	000d      	movs	r5, r1
	configASSERT( xEventGroup );
 800e60e:	2800      	cmp	r0, #0
 800e610:	d101      	bne.n	800e616 <xEventGroupSetBits+0x16>
 800e612:	b672      	cpsid	i
 800e614:	e7fe      	b.n	800e614 <xEventGroupSetBits+0x14>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e616:	0e0b      	lsrs	r3, r1, #24
 800e618:	d001      	beq.n	800e61e <xEventGroupSetBits+0x1e>
 800e61a:	b672      	cpsid	i
 800e61c:	e7fe      	b.n	800e61c <xEventGroupSetBits+0x1c>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e61e:	0006      	movs	r6, r0
 800e620:	360c      	adds	r6, #12
	vTaskSuspendAll();
 800e622:	f000 fde3 	bl	800f1ec <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 800e626:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 800e628:	6823      	ldr	r3, [r4, #0]
 800e62a:	431d      	orrs	r5, r3
 800e62c:	6025      	str	r5, [r4, #0]
		while( pxListItem != pxListEnd )
 800e62e:	4286      	cmp	r6, r0
 800e630:	d024      	beq.n	800e67c <xEventGroupSetBits+0x7c>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e632:	2500      	movs	r5, #0
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e634:	2380      	movs	r3, #128	; 0x80
 800e636:	04db      	lsls	r3, r3, #19
 800e638:	4699      	mov	r9, r3
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e63a:	2380      	movs	r3, #128	; 0x80
 800e63c:	045b      	lsls	r3, r3, #17
 800e63e:	4698      	mov	r8, r3
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e640:	2780      	movs	r7, #128	; 0x80
 800e642:	04bf      	lsls	r7, r7, #18
 800e644:	e006      	b.n	800e654 <xEventGroupSetBits+0x54>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800e646:	6821      	ldr	r1, [r4, #0]
 800e648:	4019      	ands	r1, r3
 800e64a:	4299      	cmp	r1, r3
 800e64c:	d00d      	beq.n	800e66a <xEventGroupSetBits+0x6a>
 800e64e:	4650      	mov	r0, sl
		while( pxListItem != pxListEnd )
 800e650:	4556      	cmp	r6, sl
 800e652:	d014      	beq.n	800e67e <xEventGroupSetBits+0x7e>
			pxNext = listGET_NEXT( pxListItem );
 800e654:	6843      	ldr	r3, [r0, #4]
 800e656:	469a      	mov	sl, r3
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800e658:	6802      	ldr	r2, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e65a:	0213      	lsls	r3, r2, #8
 800e65c:	0a1b      	lsrs	r3, r3, #8
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e65e:	4649      	mov	r1, r9
 800e660:	420a      	tst	r2, r1
 800e662:	d1f0      	bne.n	800e646 <xEventGroupSetBits+0x46>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800e664:	6821      	ldr	r1, [r4, #0]
 800e666:	4219      	tst	r1, r3
 800e668:	d0f1      	beq.n	800e64e <xEventGroupSetBits+0x4e>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e66a:	4641      	mov	r1, r8
 800e66c:	420a      	tst	r2, r1
 800e66e:	d000      	beq.n	800e672 <xEventGroupSetBits+0x72>
					uxBitsToClear |= uxBitsWaitedFor;
 800e670:	431d      	orrs	r5, r3
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e672:	6821      	ldr	r1, [r4, #0]
 800e674:	4339      	orrs	r1, r7
 800e676:	f001 f8a9 	bl	800f7cc <xTaskRemoveFromUnorderedEventList>
 800e67a:	e7e8      	b.n	800e64e <xEventGroupSetBits+0x4e>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e67c:	2500      	movs	r5, #0
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e67e:	6823      	ldr	r3, [r4, #0]
 800e680:	43ab      	bics	r3, r5
 800e682:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800e684:	f000 fe52 	bl	800f32c <xTaskResumeAll>
	return pxEventBits->uxEventBits;
 800e688:	6820      	ldr	r0, [r4, #0]
}
 800e68a:	bc1c      	pop	{r2, r3, r4}
 800e68c:	4690      	mov	r8, r2
 800e68e:	4699      	mov	r9, r3
 800e690:	46a2      	mov	sl, r4
 800e692:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e694 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e694:	0003      	movs	r3, r0
 800e696:	3308      	adds	r3, #8
 800e698:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e69a:	2201      	movs	r2, #1
 800e69c:	4252      	negs	r2, r2
 800e69e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6a0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6a2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e6a8:	4770      	bx	lr

0800e6aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e6ae:	4770      	bx	lr

0800e6b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e6b0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e6b2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e6b4:	689a      	ldr	r2, [r3, #8]
 800e6b6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e6b8:	689a      	ldr	r2, [r3, #8]
 800e6ba:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e6bc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e6be:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e6c0:	6803      	ldr	r3, [r0, #0]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	6003      	str	r3, [r0, #0]
}
 800e6c6:	4770      	bx	lr

0800e6c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6c8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e6ca:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6cc:	0002      	movs	r2, r0
 800e6ce:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e6d0:	1c63      	adds	r3, r4, #1
 800e6d2:	d102      	bne.n	800e6da <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800e6d4:	6902      	ldr	r2, [r0, #16]
 800e6d6:	e004      	b.n	800e6e2 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6d8:	001a      	movs	r2, r3
 800e6da:	6853      	ldr	r3, [r2, #4]
 800e6dc:	681d      	ldr	r5, [r3, #0]
 800e6de:	42a5      	cmp	r5, r4
 800e6e0:	d9fa      	bls.n	800e6d8 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e6e2:	6853      	ldr	r3, [r2, #4]
 800e6e4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e6e6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e6e8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e6ea:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e6ec:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e6ee:	6803      	ldr	r3, [r0, #0]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	6003      	str	r3, [r0, #0]
}
 800e6f4:	bd30      	pop	{r4, r5, pc}

0800e6f6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e6f6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e6f8:	6842      	ldr	r2, [r0, #4]
 800e6fa:	6881      	ldr	r1, [r0, #8]
 800e6fc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e6fe:	6882      	ldr	r2, [r0, #8]
 800e700:	6841      	ldr	r1, [r0, #4]
 800e702:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e704:	685a      	ldr	r2, [r3, #4]
 800e706:	4282      	cmp	r2, r0
 800e708:	d005      	beq.n	800e716 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e70a:	2200      	movs	r2, #0
 800e70c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	1e50      	subs	r0, r2, #1
 800e712:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e714:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e716:	6882      	ldr	r2, [r0, #8]
 800e718:	605a      	str	r2, [r3, #4]
 800e71a:	e7f6      	b.n	800e70a <uxListRemove+0x14>

0800e71c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e71c:	b570      	push	{r4, r5, r6, lr}
 800e71e:	0004      	movs	r4, r0
 800e720:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e722:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e724:	2a00      	cmp	r2, #0
 800e726:	d10d      	bne.n	800e744 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800e728:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e72a:	6823      	ldr	r3, [r4, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d003      	beq.n	800e738 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800e730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e732:	3301      	adds	r3, #1
 800e734:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800e736:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e738:	6860      	ldr	r0, [r4, #4]
 800e73a:	f001 f917 	bl	800f96c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e73e:	2300      	movs	r3, #0
 800e740:	6063      	str	r3, [r4, #4]
 800e742:	e7f5      	b.n	800e730 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e744:	2d00      	cmp	r5, #0
 800e746:	d10e      	bne.n	800e766 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e748:	6880      	ldr	r0, [r0, #8]
 800e74a:	f005 fb02 	bl	8013d52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e74e:	68a3      	ldr	r3, [r4, #8]
 800e750:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e752:	4694      	mov	ip, r2
 800e754:	4463      	add	r3, ip
 800e756:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e758:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e75a:	6862      	ldr	r2, [r4, #4]
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d3e7      	bcc.n	800e730 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	60a3      	str	r3, [r4, #8]
 800e764:	e7e4      	b.n	800e730 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e766:	68c0      	ldr	r0, [r0, #12]
 800e768:	f005 faf3 	bl	8013d52 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e76c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e76e:	425a      	negs	r2, r3
 800e770:	68e3      	ldr	r3, [r4, #12]
 800e772:	189b      	adds	r3, r3, r2
 800e774:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e776:	6821      	ldr	r1, [r4, #0]
 800e778:	428b      	cmp	r3, r1
 800e77a:	d203      	bcs.n	800e784 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e77c:	6863      	ldr	r3, [r4, #4]
 800e77e:	469c      	mov	ip, r3
 800e780:	4462      	add	r2, ip
 800e782:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800e784:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800e786:	2d02      	cmp	r5, #2
 800e788:	d1d2      	bne.n	800e730 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e78a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d0cf      	beq.n	800e730 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800e790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e792:	3b01      	subs	r3, #1
 800e794:	63a3      	str	r3, [r4, #56]	; 0x38
 800e796:	e7cb      	b.n	800e730 <prvCopyDataToQueue+0x14>

0800e798 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e798:	b510      	push	{r4, lr}
 800e79a:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e79c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e79e:	2a00      	cmp	r2, #0
 800e7a0:	d00b      	beq.n	800e7ba <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e7a2:	68c3      	ldr	r3, [r0, #12]
 800e7a4:	189b      	adds	r3, r3, r2
 800e7a6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e7a8:	6841      	ldr	r1, [r0, #4]
 800e7aa:	428b      	cmp	r3, r1
 800e7ac:	d301      	bcc.n	800e7b2 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e7ae:	6803      	ldr	r3, [r0, #0]
 800e7b0:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e7b2:	68c1      	ldr	r1, [r0, #12]
 800e7b4:	0020      	movs	r0, r4
 800e7b6:	f005 facc 	bl	8013d52 <memcpy>
	}
}
 800e7ba:	bd10      	pop	{r4, pc}

0800e7bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e7c0:	f001 fcc6 	bl	8010150 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e7c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	dd04      	ble.n	800e7d4 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7ca:	0025      	movs	r5, r4
 800e7cc:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d11f      	bne.n	800e814 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	425b      	negs	r3, r3
 800e7d8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800e7da:	f001 fcc5 	bl	8010168 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e7de:	f001 fcb7 	bl	8010150 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e7e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	dd04      	ble.n	800e7f2 <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7e8:	0025      	movs	r5, r4
 800e7ea:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7ec:	6923      	ldr	r3, [r4, #16]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d121      	bne.n	800e836 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	425b      	negs	r3, r3
 800e7f6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e7f8:	f001 fcb6 	bl	8010168 <vPortExitCritical>
}
 800e7fc:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800e7fe:	f001 f861 	bl	800f8c4 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800e802:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e804:	3b01      	subs	r3, #1
 800e806:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e808:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	dde2      	ble.n	800e7d4 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e80e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e810:	2b00      	cmp	r3, #0
 800e812:	d0df      	beq.n	800e7d4 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e814:	0028      	movs	r0, r5
 800e816:	f000 ff99 	bl	800f74c <xTaskRemoveFromEventList>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d0f1      	beq.n	800e802 <prvUnlockQueue+0x46>
 800e81e:	e7ee      	b.n	800e7fe <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800e820:	f001 f850 	bl	800f8c4 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e824:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e826:	3b01      	subs	r3, #1
 800e828:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e82a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	dde0      	ble.n	800e7f2 <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e830:	6923      	ldr	r3, [r4, #16]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d0dd      	beq.n	800e7f2 <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e836:	0028      	movs	r0, r5
 800e838:	f000 ff88 	bl	800f74c <xTaskRemoveFromEventList>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	d0f1      	beq.n	800e824 <prvUnlockQueue+0x68>
 800e840:	e7ee      	b.n	800e820 <prvUnlockQueue+0x64>

0800e842 <xQueueGenericReset>:
{
 800e842:	b570      	push	{r4, r5, r6, lr}
 800e844:	0004      	movs	r4, r0
 800e846:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800e848:	2800      	cmp	r0, #0
 800e84a:	d101      	bne.n	800e850 <xQueueGenericReset+0xe>
 800e84c:	b672      	cpsid	i
 800e84e:	e7fe      	b.n	800e84e <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800e850:	f001 fc7e 	bl	8010150 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e854:	6822      	ldr	r2, [r4, #0]
 800e856:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e858:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e85a:	434b      	muls	r3, r1
 800e85c:	18d0      	adds	r0, r2, r3
 800e85e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e860:	2000      	movs	r0, #0
 800e862:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e864:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e866:	1a5b      	subs	r3, r3, r1
 800e868:	18d3      	adds	r3, r2, r3
 800e86a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e86c:	2301      	movs	r3, #1
 800e86e:	425b      	negs	r3, r3
 800e870:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e872:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e874:	2d00      	cmp	r5, #0
 800e876:	d10f      	bne.n	800e898 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e878:	6923      	ldr	r3, [r4, #16]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d103      	bne.n	800e886 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800e87e:	f001 fc73 	bl	8010168 <vPortExitCritical>
}
 800e882:	2001      	movs	r0, #1
 800e884:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e886:	0020      	movs	r0, r4
 800e888:	3010      	adds	r0, #16
 800e88a:	f000 ff5f 	bl	800f74c <xTaskRemoveFromEventList>
 800e88e:	2801      	cmp	r0, #1
 800e890:	d1f5      	bne.n	800e87e <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800e892:	f001 fc51 	bl	8010138 <vPortYield>
 800e896:	e7f2      	b.n	800e87e <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e898:	0020      	movs	r0, r4
 800e89a:	3010      	adds	r0, #16
 800e89c:	f7ff fefa 	bl	800e694 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e8a0:	0020      	movs	r0, r4
 800e8a2:	3024      	adds	r0, #36	; 0x24
 800e8a4:	f7ff fef6 	bl	800e694 <vListInitialise>
 800e8a8:	e7e9      	b.n	800e87e <xQueueGenericReset+0x3c>

0800e8aa <xQueueGenericCreate>:
{
 800e8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ac:	0005      	movs	r5, r0
 800e8ae:	000e      	movs	r6, r1
 800e8b0:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d101      	bne.n	800e8ba <xQueueGenericCreate+0x10>
 800e8b6:	b672      	cpsid	i
 800e8b8:	e7fe      	b.n	800e8b8 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e8ba:	2900      	cmp	r1, #0
 800e8bc:	d00c      	beq.n	800e8d8 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8be:	0008      	movs	r0, r1
 800e8c0:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e8c2:	3055      	adds	r0, #85	; 0x55
 800e8c4:	f001 fcc6 	bl	8010254 <pvPortMalloc>
 800e8c8:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e8ca:	d101      	bne.n	800e8d0 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800e8cc:	b672      	cpsid	i
 800e8ce:	e7fe      	b.n	800e8ce <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e8d0:	0003      	movs	r3, r0
 800e8d2:	3354      	adds	r3, #84	; 0x54
 800e8d4:	6003      	str	r3, [r0, #0]
 800e8d6:	e005      	b.n	800e8e4 <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e8d8:	2054      	movs	r0, #84	; 0x54
 800e8da:	f001 fcbb 	bl	8010254 <pvPortMalloc>
 800e8de:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e8e0:	d0f4      	beq.n	800e8cc <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e8e2:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e8e4:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e8e6:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e8e8:	2101      	movs	r1, #1
 800e8ea:	0020      	movs	r0, r4
 800e8ec:	f7ff ffa9 	bl	800e842 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e8f0:	2350      	movs	r3, #80	; 0x50
 800e8f2:	54e7      	strb	r7, [r4, r3]
}
 800e8f4:	0020      	movs	r0, r4
 800e8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e8f8 <xQueueCreateCountingSemaphore>:
	{
 800e8f8:	b510      	push	{r4, lr}
 800e8fa:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d101      	bne.n	800e904 <xQueueCreateCountingSemaphore+0xc>
 800e900:	b672      	cpsid	i
 800e902:	e7fe      	b.n	800e902 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e904:	4288      	cmp	r0, r1
 800e906:	d201      	bcs.n	800e90c <xQueueCreateCountingSemaphore+0x14>
 800e908:	b672      	cpsid	i
 800e90a:	e7fe      	b.n	800e90a <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e90c:	2202      	movs	r2, #2
 800e90e:	2100      	movs	r1, #0
 800e910:	f7ff ffcb 	bl	800e8aa <xQueueGenericCreate>
		if( xHandle != NULL )
 800e914:	2800      	cmp	r0, #0
 800e916:	d001      	beq.n	800e91c <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e918:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e91a:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800e91c:	b672      	cpsid	i
 800e91e:	e7fe      	b.n	800e91e <xQueueCreateCountingSemaphore+0x26>

0800e920 <xQueueGenericSend>:
{
 800e920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e922:	46ce      	mov	lr, r9
 800e924:	b500      	push	{lr}
 800e926:	b084      	sub	sp, #16
 800e928:	0004      	movs	r4, r0
 800e92a:	9100      	str	r1, [sp, #0]
 800e92c:	9201      	str	r2, [sp, #4]
 800e92e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800e930:	2800      	cmp	r0, #0
 800e932:	d007      	beq.n	800e944 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e934:	9b00      	ldr	r3, [sp, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d106      	bne.n	800e948 <xQueueGenericSend+0x28>
 800e93a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d003      	beq.n	800e948 <xQueueGenericSend+0x28>
 800e940:	b672      	cpsid	i
 800e942:	e7fe      	b.n	800e942 <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800e944:	b672      	cpsid	i
 800e946:	e7fe      	b.n	800e946 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e948:	2d02      	cmp	r5, #2
 800e94a:	d104      	bne.n	800e956 <xQueueGenericSend+0x36>
 800e94c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d001      	beq.n	800e956 <xQueueGenericSend+0x36>
 800e952:	b672      	cpsid	i
 800e954:	e7fe      	b.n	800e954 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e956:	f000 ffbb 	bl	800f8d0 <xTaskGetSchedulerState>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d104      	bne.n	800e968 <xQueueGenericSend+0x48>
 800e95e:	9b01      	ldr	r3, [sp, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d004      	beq.n	800e96e <xQueueGenericSend+0x4e>
 800e964:	b672      	cpsid	i
 800e966:	e7fe      	b.n	800e966 <xQueueGenericSend+0x46>
 800e968:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800e96a:	2700      	movs	r7, #0
 800e96c:	e02f      	b.n	800e9ce <xQueueGenericSend+0xae>
 800e96e:	2600      	movs	r6, #0
 800e970:	e7fb      	b.n	800e96a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e972:	002a      	movs	r2, r5
 800e974:	9900      	ldr	r1, [sp, #0]
 800e976:	0020      	movs	r0, r4
 800e978:	f7ff fed0 	bl	800e71c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e97c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d104      	bne.n	800e98c <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800e982:	2800      	cmp	r0, #0
 800e984:	d00a      	beq.n	800e99c <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800e986:	f001 fbd7 	bl	8010138 <vPortYield>
 800e98a:	e007      	b.n	800e99c <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e98c:	0020      	movs	r0, r4
 800e98e:	3024      	adds	r0, #36	; 0x24
 800e990:	f000 fedc 	bl	800f74c <xTaskRemoveFromEventList>
 800e994:	2801      	cmp	r0, #1
 800e996:	d101      	bne.n	800e99c <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800e998:	f001 fbce 	bl	8010138 <vPortYield>
				taskEXIT_CRITICAL();
 800e99c:	f001 fbe4 	bl	8010168 <vPortExitCritical>
				return pdPASS;
 800e9a0:	2001      	movs	r0, #1
}
 800e9a2:	b004      	add	sp, #16
 800e9a4:	bc04      	pop	{r2}
 800e9a6:	4691      	mov	r9, r2
 800e9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800e9aa:	f001 fbdd 	bl	8010168 <vPortExitCritical>
					return errQUEUE_FULL;
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	e7f7      	b.n	800e9a2 <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800e9b2:	a802      	add	r0, sp, #8
 800e9b4:	f000 ff44 	bl	800f840 <vTaskSetTimeOutState>
 800e9b8:	e016      	b.n	800e9e8 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800e9ba:	6467      	str	r7, [r4, #68]	; 0x44
 800e9bc:	e01d      	b.n	800e9fa <xQueueGenericSend+0xda>
 800e9be:	64a7      	str	r7, [r4, #72]	; 0x48
 800e9c0:	e01e      	b.n	800ea00 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800e9c2:	0020      	movs	r0, r4
 800e9c4:	f7ff fefa 	bl	800e7bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9c8:	f000 fcb0 	bl	800f32c <xTaskResumeAll>
 800e9cc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e9ce:	f001 fbbf 	bl	8010150 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d3cb      	bcc.n	800e972 <xQueueGenericSend+0x52>
 800e9da:	2d02      	cmp	r5, #2
 800e9dc:	d0c9      	beq.n	800e972 <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e9de:	9b01      	ldr	r3, [sp, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d0e2      	beq.n	800e9aa <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800e9e4:	2e00      	cmp	r6, #0
 800e9e6:	d0e4      	beq.n	800e9b2 <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800e9e8:	f001 fbbe 	bl	8010168 <vPortExitCritical>
		vTaskSuspendAll();
 800e9ec:	f000 fbfe 	bl	800f1ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9f0:	f001 fbae 	bl	8010150 <vPortEnterCritical>
 800e9f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	d0df      	beq.n	800e9ba <xQueueGenericSend+0x9a>
 800e9fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	d0de      	beq.n	800e9be <xQueueGenericSend+0x9e>
 800ea00:	f001 fbb2 	bl	8010168 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea04:	a901      	add	r1, sp, #4
 800ea06:	a802      	add	r0, sp, #8
 800ea08:	f000 ff2a 	bl	800f860 <xTaskCheckForTimeOut>
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	d117      	bne.n	800ea40 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea10:	f001 fb9e 	bl	8010150 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea16:	4699      	mov	r9, r3
 800ea18:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ea1a:	f001 fba5 	bl	8010168 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ea1e:	45b1      	cmp	r9, r6
 800ea20:	d1cf      	bne.n	800e9c2 <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ea22:	0020      	movs	r0, r4
 800ea24:	3010      	adds	r0, #16
 800ea26:	9901      	ldr	r1, [sp, #4]
 800ea28:	f000 fe20 	bl	800f66c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea2c:	0020      	movs	r0, r4
 800ea2e:	f7ff fec5 	bl	800e7bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea32:	f000 fc7b 	bl	800f32c <xTaskResumeAll>
 800ea36:	2800      	cmp	r0, #0
 800ea38:	d1c8      	bne.n	800e9cc <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800ea3a:	f001 fb7d 	bl	8010138 <vPortYield>
 800ea3e:	e7c5      	b.n	800e9cc <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800ea40:	0020      	movs	r0, r4
 800ea42:	f7ff febb 	bl	800e7bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea46:	f000 fc71 	bl	800f32c <xTaskResumeAll>
			return errQUEUE_FULL;
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	e7a9      	b.n	800e9a2 <xQueueGenericSend+0x82>

0800ea4e <xQueueGenericSendFromISR>:
{
 800ea4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea50:	b083      	sub	sp, #12
 800ea52:	0004      	movs	r4, r0
 800ea54:	000d      	movs	r5, r1
 800ea56:	0016      	movs	r6, r2
 800ea58:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d006      	beq.n	800ea6c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea5e:	2900      	cmp	r1, #0
 800ea60:	d106      	bne.n	800ea70 <xQueueGenericSendFromISR+0x22>
 800ea62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d003      	beq.n	800ea70 <xQueueGenericSendFromISR+0x22>
 800ea68:	b672      	cpsid	i
 800ea6a:	e7fe      	b.n	800ea6a <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800ea6c:	b672      	cpsid	i
 800ea6e:	e7fe      	b.n	800ea6e <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea70:	2f02      	cmp	r7, #2
 800ea72:	d12a      	bne.n	800eaca <xQueueGenericSendFromISR+0x7c>
 800ea74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d011      	beq.n	800ea9e <xQueueGenericSendFromISR+0x50>
 800ea7a:	b672      	cpsid	i
 800ea7c:	e7fe      	b.n	800ea7c <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800ea7e:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d01b      	beq.n	800eabe <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea86:	0020      	movs	r0, r4
 800ea88:	3024      	adds	r0, #36	; 0x24
 800ea8a:	f000 fe5f 	bl	800f74c <xTaskRemoveFromEventList>
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	d015      	beq.n	800eabe <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800ea92:	2e00      	cmp	r6, #0
 800ea94:	d001      	beq.n	800ea9a <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea96:	6035      	str	r5, [r6, #0]
 800ea98:	e011      	b.n	800eabe <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800ea9a:	2501      	movs	r5, #1
 800ea9c:	e00f      	b.n	800eabe <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea9e:	f001 fb73 	bl	8010188 <ulSetInterruptMaskFromISR>
 800eaa2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eaa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eaa6:	003a      	movs	r2, r7
 800eaa8:	0029      	movs	r1, r5
 800eaaa:	0020      	movs	r0, r4
 800eaac:	f7ff fe36 	bl	800e71c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800eab0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eab2:	3301      	adds	r3, #1
 800eab4:	d0e3      	beq.n	800ea7e <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800eab6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eab8:	3301      	adds	r3, #1
 800eaba:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800eabc:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800eabe:	9801      	ldr	r0, [sp, #4]
 800eac0:	f001 fb67 	bl	8010192 <vClearInterruptMaskFromISR>
}
 800eac4:	0028      	movs	r0, r5
 800eac6:	b003      	add	sp, #12
 800eac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eaca:	f001 fb5d 	bl	8010188 <ulSetInterruptMaskFromISR>
 800eace:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ead0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ead2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d3e6      	bcc.n	800eaa6 <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800ead8:	2500      	movs	r5, #0
 800eada:	e7f0      	b.n	800eabe <xQueueGenericSendFromISR+0x70>

0800eadc <xQueueGiveFromISR>:
{
 800eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eade:	0004      	movs	r4, r0
 800eae0:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800eae2:	2800      	cmp	r0, #0
 800eae4:	d004      	beq.n	800eaf0 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800eae6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d003      	beq.n	800eaf4 <xQueueGiveFromISR+0x18>
 800eaec:	b672      	cpsid	i
 800eaee:	e7fe      	b.n	800eaee <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800eaf0:	b672      	cpsid	i
 800eaf2:	e7fe      	b.n	800eaf2 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800eaf4:	6803      	ldr	r3, [r0, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d01f      	beq.n	800eb3a <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eafa:	f001 fb45 	bl	8010188 <ulSetInterruptMaskFromISR>
 800eafe:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800eb00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800eb02:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800eb04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d212      	bcs.n	800eb30 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800eb0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800eb10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eb12:	3301      	adds	r3, #1
 800eb14:	d116      	bne.n	800eb44 <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800eb16:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d008      	beq.n	800eb30 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb1e:	0020      	movs	r0, r4
 800eb20:	3024      	adds	r0, #36	; 0x24
 800eb22:	f000 fe13 	bl	800f74c <xTaskRemoveFromEventList>
 800eb26:	2800      	cmp	r0, #0
 800eb28:	d002      	beq.n	800eb30 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800eb2a:	2f00      	cmp	r7, #0
 800eb2c:	d00f      	beq.n	800eb4e <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eb2e:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800eb30:	0030      	movs	r0, r6
 800eb32:	f001 fb2e 	bl	8010192 <vClearInterruptMaskFromISR>
}
 800eb36:	0028      	movs	r0, r5
 800eb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800eb3a:	6843      	ldr	r3, [r0, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d0dc      	beq.n	800eafa <xQueueGiveFromISR+0x1e>
 800eb40:	b672      	cpsid	i
 800eb42:	e7fe      	b.n	800eb42 <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800eb44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eb46:	3301      	adds	r3, #1
 800eb48:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800eb4a:	2501      	movs	r5, #1
 800eb4c:	e7f0      	b.n	800eb30 <xQueueGiveFromISR+0x54>
 800eb4e:	2501      	movs	r5, #1
 800eb50:	e7ee      	b.n	800eb30 <xQueueGiveFromISR+0x54>

0800eb52 <xQueueGenericReceive>:
{
 800eb52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb54:	46c6      	mov	lr, r8
 800eb56:	b500      	push	{lr}
 800eb58:	b084      	sub	sp, #16
 800eb5a:	0004      	movs	r4, r0
 800eb5c:	000e      	movs	r6, r1
 800eb5e:	9201      	str	r2, [sp, #4]
 800eb60:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d006      	beq.n	800eb74 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb66:	2900      	cmp	r1, #0
 800eb68:	d106      	bne.n	800eb78 <xQueueGenericReceive+0x26>
 800eb6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d003      	beq.n	800eb78 <xQueueGenericReceive+0x26>
 800eb70:	b672      	cpsid	i
 800eb72:	e7fe      	b.n	800eb72 <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800eb74:	b672      	cpsid	i
 800eb76:	e7fe      	b.n	800eb76 <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb78:	f000 feaa 	bl	800f8d0 <xTaskGetSchedulerState>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d104      	bne.n	800eb8a <xQueueGenericReceive+0x38>
 800eb80:	9b01      	ldr	r3, [sp, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d004      	beq.n	800eb90 <xQueueGenericReceive+0x3e>
 800eb86:	b672      	cpsid	i
 800eb88:	e7fe      	b.n	800eb88 <xQueueGenericReceive+0x36>
 800eb8a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800eb8c:	2700      	movs	r7, #0
 800eb8e:	e04b      	b.n	800ec28 <xQueueGenericReceive+0xd6>
 800eb90:	2500      	movs	r5, #0
 800eb92:	e7fb      	b.n	800eb8c <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800eb94:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb96:	0031      	movs	r1, r6
 800eb98:	0020      	movs	r0, r4
 800eb9a:	f7ff fdfd 	bl	800e798 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800eb9e:	4643      	mov	r3, r8
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d11a      	bne.n	800ebda <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800eba4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eba6:	3b01      	subs	r3, #1
 800eba8:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebaa:	6823      	ldr	r3, [r4, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d102      	bne.n	800ebb6 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ebb0:	f000 ffda 	bl	800fb68 <pvTaskIncrementMutexHeldCount>
 800ebb4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebb6:	6923      	ldr	r3, [r4, #16]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d007      	beq.n	800ebcc <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ebbc:	0020      	movs	r0, r4
 800ebbe:	3010      	adds	r0, #16
 800ebc0:	f000 fdc4 	bl	800f74c <xTaskRemoveFromEventList>
 800ebc4:	2801      	cmp	r0, #1
 800ebc6:	d101      	bne.n	800ebcc <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800ebc8:	f001 fab6 	bl	8010138 <vPortYield>
				taskEXIT_CRITICAL();
 800ebcc:	f001 facc 	bl	8010168 <vPortExitCritical>
				return pdPASS;
 800ebd0:	2001      	movs	r0, #1
}
 800ebd2:	b004      	add	sp, #16
 800ebd4:	bc04      	pop	{r2}
 800ebd6:	4690      	mov	r8, r2
 800ebd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800ebda:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d0f4      	beq.n	800ebcc <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebe2:	0020      	movs	r0, r4
 800ebe4:	3024      	adds	r0, #36	; 0x24
 800ebe6:	f000 fdb1 	bl	800f74c <xTaskRemoveFromEventList>
 800ebea:	2800      	cmp	r0, #0
 800ebec:	d0ee      	beq.n	800ebcc <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800ebee:	f001 faa3 	bl	8010138 <vPortYield>
 800ebf2:	e7eb      	b.n	800ebcc <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800ebf4:	f001 fab8 	bl	8010168 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	e7ea      	b.n	800ebd2 <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800ebfc:	a802      	add	r0, sp, #8
 800ebfe:	f000 fe1f 	bl	800f840 <vTaskSetTimeOutState>
 800ec02:	e01b      	b.n	800ec3c <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800ec04:	6467      	str	r7, [r4, #68]	; 0x44
 800ec06:	e022      	b.n	800ec4e <xQueueGenericReceive+0xfc>
 800ec08:	64a7      	str	r7, [r4, #72]	; 0x48
 800ec0a:	e023      	b.n	800ec54 <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800ec0c:	f001 faa0 	bl	8010150 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ec10:	6860      	ldr	r0, [r4, #4]
 800ec12:	f000 fe6d 	bl	800f8f0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800ec16:	f001 faa7 	bl	8010168 <vPortExitCritical>
 800ec1a:	e02d      	b.n	800ec78 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800ec1c:	0020      	movs	r0, r4
 800ec1e:	f7ff fdcd 	bl	800e7bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec22:	f000 fb83 	bl	800f32c <xTaskResumeAll>
 800ec26:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800ec28:	f001 fa92 	bl	8010150 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d1b0      	bne.n	800eb94 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec32:	9b01      	ldr	r3, [sp, #4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d0dd      	beq.n	800ebf4 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800ec38:	2d00      	cmp	r5, #0
 800ec3a:	d0df      	beq.n	800ebfc <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800ec3c:	f001 fa94 	bl	8010168 <vPortExitCritical>
		vTaskSuspendAll();
 800ec40:	f000 fad4 	bl	800f1ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec44:	f001 fa84 	bl	8010150 <vPortEnterCritical>
 800ec48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	d0da      	beq.n	800ec04 <xQueueGenericReceive+0xb2>
 800ec4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec50:	3301      	adds	r3, #1
 800ec52:	d0d9      	beq.n	800ec08 <xQueueGenericReceive+0xb6>
 800ec54:	f001 fa88 	bl	8010168 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec58:	a901      	add	r1, sp, #4
 800ec5a:	a802      	add	r0, sp, #8
 800ec5c:	f000 fe00 	bl	800f860 <xTaskCheckForTimeOut>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	d118      	bne.n	800ec96 <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800ec64:	f001 fa74 	bl	8010150 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ec68:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800ec6a:	f001 fa7d 	bl	8010168 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec6e:	2d00      	cmp	r5, #0
 800ec70:	d1d4      	bne.n	800ec1c <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec72:	6823      	ldr	r3, [r4, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d0c9      	beq.n	800ec0c <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec78:	0020      	movs	r0, r4
 800ec7a:	3024      	adds	r0, #36	; 0x24
 800ec7c:	9901      	ldr	r1, [sp, #4]
 800ec7e:	f000 fcf5 	bl	800f66c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec82:	0020      	movs	r0, r4
 800ec84:	f7ff fd9a 	bl	800e7bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec88:	f000 fb50 	bl	800f32c <xTaskResumeAll>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d1ca      	bne.n	800ec26 <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800ec90:	f001 fa52 	bl	8010138 <vPortYield>
 800ec94:	e7c7      	b.n	800ec26 <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800ec96:	0020      	movs	r0, r4
 800ec98:	f7ff fd90 	bl	800e7bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec9c:	f000 fb46 	bl	800f32c <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800eca0:	2000      	movs	r0, #0
 800eca2:	e796      	b.n	800ebd2 <xQueueGenericReceive+0x80>

0800eca4 <xQueueReceiveFromISR>:
{
 800eca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eca6:	b083      	sub	sp, #12
 800eca8:	0004      	movs	r4, r0
 800ecaa:	000f      	movs	r7, r1
 800ecac:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	d006      	beq.n	800ecc0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecb2:	2900      	cmp	r1, #0
 800ecb4:	d106      	bne.n	800ecc4 <xQueueReceiveFromISR+0x20>
 800ecb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d003      	beq.n	800ecc4 <xQueueReceiveFromISR+0x20>
 800ecbc:	b672      	cpsid	i
 800ecbe:	e7fe      	b.n	800ecbe <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800ecc0:	b672      	cpsid	i
 800ecc2:	e7fe      	b.n	800ecc2 <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ecc4:	f001 fa60 	bl	8010188 <ulSetInterruptMaskFromISR>
 800ecc8:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800eccc:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d01b      	beq.n	800ed0a <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ecd2:	0039      	movs	r1, r7
 800ecd4:	0020      	movs	r0, r4
 800ecd6:	f7ff fd5f 	bl	800e798 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800ecda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800ece0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ece2:	3301      	adds	r3, #1
 800ece4:	d004      	beq.n	800ecf0 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800ece6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ece8:	3301      	adds	r3, #1
 800ecea:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800ecec:	2501      	movs	r5, #1
 800ecee:	e00c      	b.n	800ed0a <xQueueReceiveFromISR+0x66>
 800ecf0:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecf2:	6923      	ldr	r3, [r4, #16]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d008      	beq.n	800ed0a <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecf8:	0020      	movs	r0, r4
 800ecfa:	3010      	adds	r0, #16
 800ecfc:	f000 fd26 	bl	800f74c <xTaskRemoveFromEventList>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d002      	beq.n	800ed0a <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800ed04:	2e00      	cmp	r6, #0
 800ed06:	d006      	beq.n	800ed16 <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed08:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ed0a:	9801      	ldr	r0, [sp, #4]
 800ed0c:	f001 fa41 	bl	8010192 <vClearInterruptMaskFromISR>
}
 800ed10:	0028      	movs	r0, r5
 800ed12:	b003      	add	sp, #12
 800ed14:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800ed16:	2501      	movs	r5, #1
 800ed18:	e7f7      	b.n	800ed0a <xQueueReceiveFromISR+0x66>
	...

0800ed1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ed1c:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ed1e:	4b0a      	ldr	r3, [pc, #40]	; (800ed48 <vQueueAddToRegistry+0x2c>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d009      	beq.n	800ed3a <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed26:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ed28:	4c07      	ldr	r4, [pc, #28]	; (800ed48 <vQueueAddToRegistry+0x2c>)
 800ed2a:	00da      	lsls	r2, r3, #3
 800ed2c:	58a2      	ldr	r2, [r4, r2]
 800ed2e:	2a00      	cmp	r2, #0
 800ed30:	d004      	beq.n	800ed3c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed32:	3301      	adds	r3, #1
 800ed34:	2b08      	cmp	r3, #8
 800ed36:	d1f8      	bne.n	800ed2a <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed38:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed3a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ed3c:	4a02      	ldr	r2, [pc, #8]	; (800ed48 <vQueueAddToRegistry+0x2c>)
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ed42:	18d3      	adds	r3, r2, r3
 800ed44:	6058      	str	r0, [r3, #4]
				break;
 800ed46:	e7f7      	b.n	800ed38 <vQueueAddToRegistry+0x1c>
 800ed48:	20006f50 	.word	0x20006f50

0800ed4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800ed4c:	b570      	push	{r4, r5, r6, lr}
 800ed4e:	0004      	movs	r4, r0
 800ed50:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ed52:	f001 f9fd 	bl	8010150 <vPortEnterCritical>
 800ed56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed58:	3301      	adds	r3, #1
 800ed5a:	d00b      	beq.n	800ed74 <vQueueWaitForMessageRestricted+0x28>
 800ed5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed5e:	3301      	adds	r3, #1
 800ed60:	d00b      	beq.n	800ed7a <vQueueWaitForMessageRestricted+0x2e>
 800ed62:	f001 fa01 	bl	8010168 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ed66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d009      	beq.n	800ed80 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ed6c:	0020      	movs	r0, r4
 800ed6e:	f7ff fd25 	bl	800e7bc <prvUnlockQueue>
	}
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800ed74:	2300      	movs	r3, #0
 800ed76:	6463      	str	r3, [r4, #68]	; 0x44
 800ed78:	e7f0      	b.n	800ed5c <vQueueWaitForMessageRestricted+0x10>
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed7e:	e7f0      	b.n	800ed62 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed80:	0020      	movs	r0, r4
 800ed82:	3024      	adds	r0, #36	; 0x24
 800ed84:	0029      	movs	r1, r5
 800ed86:	f000 fcc7 	bl	800f718 <vTaskPlaceOnEventListRestricted>
 800ed8a:	e7ef      	b.n	800ed6c <vQueueWaitForMessageRestricted+0x20>

0800ed8c <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800ed8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed8e:	46d6      	mov	lr, sl
 800ed90:	464f      	mov	r7, r9
 800ed92:	4646      	mov	r6, r8
 800ed94:	b5c0      	push	{r6, r7, lr}
 800ed96:	0006      	movs	r6, r0
 800ed98:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ed9a:	6808      	ldr	r0, [r1, #0]
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	d044      	beq.n	800ee2a <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800eda0:	684b      	ldr	r3, [r1, #4]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	604b      	str	r3, [r1, #4]
 800eda6:	2208      	movs	r2, #8
 800eda8:	4690      	mov	r8, r2
 800edaa:	4488      	add	r8, r1
 800edac:	4543      	cmp	r3, r8
 800edae:	d006      	beq.n	800edbe <prvListTaskWithinSingleList+0x32>
 800edb0:	684b      	ldr	r3, [r1, #4]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800edb6:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800edb8:	2302      	movs	r3, #2
 800edba:	469a      	mov	sl, r3
 800edbc:	e018      	b.n	800edf0 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800edbe:	68cb      	ldr	r3, [r1, #12]
 800edc0:	604b      	str	r3, [r1, #4]
 800edc2:	e7f5      	b.n	800edb0 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800edc4:	68cb      	ldr	r3, [r1, #12]
 800edc6:	604b      	str	r3, [r1, #4]
 800edc8:	e017      	b.n	800edfa <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800edca:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800edcc:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800edce:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800edd0:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800edd2:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800edd4:	783b      	ldrb	r3, [r7, #0]
 800edd6:	2ba5      	cmp	r3, #165	; 0xa5
 800edd8:	d125      	bne.n	800ee26 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800edda:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800eddc:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800edde:	5cfc      	ldrb	r4, [r7, r3]
 800ede0:	2ca5      	cmp	r4, #165	; 0xa5
 800ede2:	d0fb      	beq.n	800eddc <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ede4:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800ede6:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800ede8:	3001      	adds	r0, #1
 800edea:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800edec:	45a9      	cmp	r9, r5
 800edee:	d01c      	beq.n	800ee2a <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800edf0:	684b      	ldr	r3, [r1, #4]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	604b      	str	r3, [r1, #4]
 800edf6:	4598      	cmp	r8, r3
 800edf8:	d0e4      	beq.n	800edc4 <prvListTaskWithinSingleList+0x38>
 800edfa:	684b      	ldr	r3, [r1, #4]
 800edfc:	68dd      	ldr	r5, [r3, #12]
 800edfe:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800ee00:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800ee02:	002b      	movs	r3, r5
 800ee04:	3334      	adds	r3, #52	; 0x34
 800ee06:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800ee08:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ee0a:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800ee0c:	4663      	mov	r3, ip
 800ee0e:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800ee10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ee12:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800ee14:	4663      	mov	r3, ip
 800ee16:	2b03      	cmp	r3, #3
 800ee18:	d1d7      	bne.n	800edca <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800ee1a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d0d4      	beq.n	800edca <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ee20:	4653      	mov	r3, sl
 800ee22:	7333      	strb	r3, [r6, #12]
 800ee24:	e7d1      	b.n	800edca <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800ee26:	2300      	movs	r3, #0
 800ee28:	e7dc      	b.n	800ede4 <prvListTaskWithinSingleList+0x58>
	}
 800ee2a:	bc1c      	pop	{r2, r3, r4}
 800ee2c:	4690      	mov	r8, r2
 800ee2e:	4699      	mov	r9, r3
 800ee30:	46a2      	mov	sl, r4
 800ee32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee34 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee34:	4b08      	ldr	r3, [pc, #32]	; (800ee58 <prvResetNextTaskUnblockTime+0x24>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d007      	beq.n	800ee4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ee3e:	4b06      	ldr	r3, [pc, #24]	; (800ee58 <prvResetNextTaskUnblockTime+0x24>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	685a      	ldr	r2, [r3, #4]
 800ee48:	4b04      	ldr	r3, [pc, #16]	; (800ee5c <prvResetNextTaskUnblockTime+0x28>)
 800ee4a:	601a      	str	r2, [r3, #0]
	}
}
 800ee4c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee4e:	4b03      	ldr	r3, [pc, #12]	; (800ee5c <prvResetNextTaskUnblockTime+0x28>)
 800ee50:	2201      	movs	r2, #1
 800ee52:	4252      	negs	r2, r2
 800ee54:	601a      	str	r2, [r3, #0]
 800ee56:	e7f9      	b.n	800ee4c <prvResetNextTaskUnblockTime+0x18>
 800ee58:	20001e3c 	.word	0x20001e3c
 800ee5c:	200000a0 	.word	0x200000a0

0800ee60 <prvAddCurrentTaskToDelayedList>:
{
 800ee60:	b510      	push	{r4, lr}
 800ee62:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800ee64:	4b0e      	ldr	r3, [pc, #56]	; (800eea0 <prvAddCurrentTaskToDelayedList+0x40>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800ee6a:	4b0e      	ldr	r3, [pc, #56]	; (800eea4 <prvAddCurrentTaskToDelayedList+0x44>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4283      	cmp	r3, r0
 800ee70:	d80d      	bhi.n	800ee8e <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ee72:	4b0d      	ldr	r3, [pc, #52]	; (800eea8 <prvAddCurrentTaskToDelayedList+0x48>)
 800ee74:	6818      	ldr	r0, [r3, #0]
 800ee76:	4b0a      	ldr	r3, [pc, #40]	; (800eea0 <prvAddCurrentTaskToDelayedList+0x40>)
 800ee78:	6819      	ldr	r1, [r3, #0]
 800ee7a:	3104      	adds	r1, #4
 800ee7c:	f7ff fc24 	bl	800e6c8 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800ee80:	4b0a      	ldr	r3, [pc, #40]	; (800eeac <prvAddCurrentTaskToDelayedList+0x4c>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	42a3      	cmp	r3, r4
 800ee86:	d909      	bls.n	800ee9c <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800ee88:	4b08      	ldr	r3, [pc, #32]	; (800eeac <prvAddCurrentTaskToDelayedList+0x4c>)
 800ee8a:	601c      	str	r4, [r3, #0]
}
 800ee8c:	e006      	b.n	800ee9c <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ee8e:	4b08      	ldr	r3, [pc, #32]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0x50>)
 800ee90:	6818      	ldr	r0, [r3, #0]
 800ee92:	4b03      	ldr	r3, [pc, #12]	; (800eea0 <prvAddCurrentTaskToDelayedList+0x40>)
 800ee94:	6819      	ldr	r1, [r3, #0]
 800ee96:	3104      	adds	r1, #4
 800ee98:	f7ff fc16 	bl	800e6c8 <vListInsert>
}
 800ee9c:	bd10      	pop	{r4, pc}
 800ee9e:	46c0      	nop			; (mov r8, r8)
 800eea0:	20001e38 	.word	0x20001e38
 800eea4:	20001f58 	.word	0x20001f58
 800eea8:	20001e3c 	.word	0x20001e3c
 800eeac:	200000a0 	.word	0x200000a0
 800eeb0:	20001e40 	.word	0x20001e40

0800eeb4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800eeb4:	b510      	push	{r4, lr}
 800eeb6:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800eeb8:	f005 f98a 	bl	80141d0 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800eebc:	0020      	movs	r0, r4
 800eebe:	f7f1 f92b 	bl	8000118 <strlen>
 800eec2:	0003      	movs	r3, r0
 800eec4:	280b      	cmp	r0, #11
 800eec6:	dc08      	bgt.n	800eeda <prvWriteNameToBuffer+0x26>
 800eec8:	1820      	adds	r0, r4, r0
 800eeca:	0022      	movs	r2, r4
 800eecc:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800eece:	2320      	movs	r3, #32
 800eed0:	7003      	strb	r3, [r0, #0]
 800eed2:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800eed4:	4290      	cmp	r0, r2
 800eed6:	d1fb      	bne.n	800eed0 <prvWriteNameToBuffer+0x1c>
 800eed8:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800eeda:	18e0      	adds	r0, r4, r3
 800eedc:	2300      	movs	r3, #0
 800eede:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800eee0:	bd10      	pop	{r4, pc}
	...

0800eee4 <xTaskGenericCreate>:
{
 800eee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eee6:	46d6      	mov	lr, sl
 800eee8:	4647      	mov	r7, r8
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b085      	sub	sp, #20
 800eeee:	9002      	str	r0, [sp, #8]
 800eef0:	000d      	movs	r5, r1
 800eef2:	0016      	movs	r6, r2
 800eef4:	9303      	str	r3, [sp, #12]
 800eef6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d101      	bne.n	800ef00 <xTaskGenericCreate+0x1c>
 800eefc:	b672      	cpsid	i
 800eefe:	e7fe      	b.n	800eefe <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800ef00:	2f06      	cmp	r7, #6
 800ef02:	d901      	bls.n	800ef08 <xTaskGenericCreate+0x24>
 800ef04:	b672      	cpsid	i
 800ef06:	e7fe      	b.n	800ef06 <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d106      	bne.n	800ef1c <xTaskGenericCreate+0x38>
 800ef0e:	0090      	lsls	r0, r2, #2
 800ef10:	f001 f9a0 	bl	8010254 <pvPortMalloc>
 800ef14:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d100      	bne.n	800ef1c <xTaskGenericCreate+0x38>
 800ef1a:	e0b7      	b.n	800f08c <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800ef1c:	2060      	movs	r0, #96	; 0x60
 800ef1e:	f001 f999 	bl	8010254 <pvPortMalloc>
 800ef22:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800ef24:	d100      	bne.n	800ef28 <xTaskGenericCreate+0x44>
 800ef26:	e08b      	b.n	800f040 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800ef28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef2a:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800ef2c:	00b2      	lsls	r2, r6, #2
 800ef2e:	21a5      	movs	r1, #165	; 0xa5
 800ef30:	0018      	movs	r0, r3
 800ef32:	f004 ff17 	bl	8013d64 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800ef36:	4b57      	ldr	r3, [pc, #348]	; (800f094 <xTaskGenericCreate+0x1b0>)
 800ef38:	18f3      	adds	r3, r6, r3
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ef3e:	4694      	mov	ip, r2
 800ef40:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ef42:	2207      	movs	r2, #7
 800ef44:	4393      	bics	r3, r2
 800ef46:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800ef48:	782a      	ldrb	r2, [r5, #0]
 800ef4a:	2334      	movs	r3, #52	; 0x34
 800ef4c:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800ef4e:	782b      	ldrb	r3, [r5, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d000      	beq.n	800ef56 <xTaskGenericCreate+0x72>
 800ef54:	e07e      	b.n	800f054 <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ef56:	2500      	movs	r5, #0
 800ef58:	2340      	movs	r3, #64	; 0x40
 800ef5a:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800ef5c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800ef5e:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800ef60:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800ef62:	1d23      	adds	r3, r4, #4
 800ef64:	9301      	str	r3, [sp, #4]
 800ef66:	0018      	movs	r0, r3
 800ef68:	f7ff fb9f 	bl	800e6aa <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800ef6c:	0020      	movs	r0, r4
 800ef6e:	3018      	adds	r0, #24
 800ef70:	f7ff fb9b 	bl	800e6aa <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800ef74:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef76:	2307      	movs	r3, #7
 800ef78:	1bdb      	subs	r3, r3, r7
 800ef7a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800ef7c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800ef7e:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800ef80:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800ef82:	235c      	movs	r3, #92	; 0x5c
 800ef84:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef86:	9a03      	ldr	r2, [sp, #12]
 800ef88:	9902      	ldr	r1, [sp, #8]
 800ef8a:	4650      	mov	r0, sl
 800ef8c:	f001 f898 	bl	80100c0 <pxPortInitialiseStack>
 800ef90:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800ef92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef94:	42ab      	cmp	r3, r5
 800ef96:	d000      	beq.n	800ef9a <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef98:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800ef9a:	f001 f8d9 	bl	8010150 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800ef9e:	4a3e      	ldr	r2, [pc, #248]	; (800f098 <xTaskGenericCreate+0x1b4>)
 800efa0:	6813      	ldr	r3, [r2, #0]
 800efa2:	3301      	adds	r3, #1
 800efa4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800efa6:	4b3d      	ldr	r3, [pc, #244]	; (800f09c <xTaskGenericCreate+0x1b8>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d162      	bne.n	800f074 <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800efae:	4b3b      	ldr	r3, [pc, #236]	; (800f09c <xTaskGenericCreate+0x1b8>)
 800efb0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800efb2:	6813      	ldr	r3, [r2, #0]
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d120      	bne.n	800effa <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800efb8:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800efba:	3313      	adds	r3, #19
 800efbc:	4698      	mov	r8, r3
 800efbe:	4e38      	ldr	r6, [pc, #224]	; (800f0a0 <xTaskGenericCreate+0x1bc>)
 800efc0:	4640      	mov	r0, r8
 800efc2:	4368      	muls	r0, r5
 800efc4:	1980      	adds	r0, r0, r6
 800efc6:	f7ff fb65 	bl	800e694 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800efca:	3501      	adds	r5, #1
 800efcc:	2d07      	cmp	r5, #7
 800efce:	d1f7      	bne.n	800efc0 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800efd0:	4e34      	ldr	r6, [pc, #208]	; (800f0a4 <xTaskGenericCreate+0x1c0>)
 800efd2:	0030      	movs	r0, r6
 800efd4:	f7ff fb5e 	bl	800e694 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800efd8:	4d33      	ldr	r5, [pc, #204]	; (800f0a8 <xTaskGenericCreate+0x1c4>)
 800efda:	0028      	movs	r0, r5
 800efdc:	f7ff fb5a 	bl	800e694 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800efe0:	4832      	ldr	r0, [pc, #200]	; (800f0ac <xTaskGenericCreate+0x1c8>)
 800efe2:	f7ff fb57 	bl	800e694 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800efe6:	4832      	ldr	r0, [pc, #200]	; (800f0b0 <xTaskGenericCreate+0x1cc>)
 800efe8:	f7ff fb54 	bl	800e694 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800efec:	4831      	ldr	r0, [pc, #196]	; (800f0b4 <xTaskGenericCreate+0x1d0>)
 800efee:	f7ff fb51 	bl	800e694 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800eff2:	4b31      	ldr	r3, [pc, #196]	; (800f0b8 <xTaskGenericCreate+0x1d4>)
 800eff4:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eff6:	4b31      	ldr	r3, [pc, #196]	; (800f0bc <xTaskGenericCreate+0x1d8>)
 800eff8:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800effa:	4a31      	ldr	r2, [pc, #196]	; (800f0c0 <xTaskGenericCreate+0x1dc>)
 800effc:	6813      	ldr	r3, [r2, #0]
 800effe:	3301      	adds	r3, #1
 800f000:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f002:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f004:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f006:	4a2f      	ldr	r2, [pc, #188]	; (800f0c4 <xTaskGenericCreate+0x1e0>)
 800f008:	6812      	ldr	r2, [r2, #0]
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d901      	bls.n	800f012 <xTaskGenericCreate+0x12e>
 800f00e:	4a2d      	ldr	r2, [pc, #180]	; (800f0c4 <xTaskGenericCreate+0x1e0>)
 800f010:	6013      	str	r3, [r2, #0]
 800f012:	2014      	movs	r0, #20
 800f014:	4358      	muls	r0, r3
 800f016:	4b22      	ldr	r3, [pc, #136]	; (800f0a0 <xTaskGenericCreate+0x1bc>)
 800f018:	18c0      	adds	r0, r0, r3
 800f01a:	9901      	ldr	r1, [sp, #4]
 800f01c:	f7ff fb48 	bl	800e6b0 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f020:	f001 f8a2 	bl	8010168 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f024:	4b28      	ldr	r3, [pc, #160]	; (800f0c8 <xTaskGenericCreate+0x1e4>)
 800f026:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f028:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00d      	beq.n	800f04a <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f02e:	4b1b      	ldr	r3, [pc, #108]	; (800f09c <xTaskGenericCreate+0x1b8>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f034:	42bb      	cmp	r3, r7
 800f036:	d208      	bcs.n	800f04a <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800f038:	f001 f87e 	bl	8010138 <vPortYield>
			xReturn = pdPASS;
 800f03c:	2001      	movs	r0, #1
 800f03e:	e004      	b.n	800f04a <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800f040:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f042:	f001 f99d 	bl	8010380 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f046:	2001      	movs	r0, #1
 800f048:	4240      	negs	r0, r0
}
 800f04a:	b005      	add	sp, #20
 800f04c:	bc0c      	pop	{r2, r3}
 800f04e:	4690      	mov	r8, r2
 800f050:	469a      	mov	sl, r3
 800f052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f054:	1c6b      	adds	r3, r5, #1
 800f056:	0022      	movs	r2, r4
 800f058:	3235      	adds	r2, #53	; 0x35
 800f05a:	0021      	movs	r1, r4
 800f05c:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f05e:	7818      	ldrb	r0, [r3, #0]
 800f060:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800f062:	7818      	ldrb	r0, [r3, #0]
 800f064:	2800      	cmp	r0, #0
 800f066:	d100      	bne.n	800f06a <xTaskGenericCreate+0x186>
 800f068:	e775      	b.n	800ef56 <xTaskGenericCreate+0x72>
 800f06a:	3301      	adds	r3, #1
 800f06c:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f06e:	4291      	cmp	r1, r2
 800f070:	d1f5      	bne.n	800f05e <xTaskGenericCreate+0x17a>
 800f072:	e770      	b.n	800ef56 <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800f074:	4b14      	ldr	r3, [pc, #80]	; (800f0c8 <xTaskGenericCreate+0x1e4>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1be      	bne.n	800effa <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f07c:	4b07      	ldr	r3, [pc, #28]	; (800f09c <xTaskGenericCreate+0x1b8>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f082:	42bb      	cmp	r3, r7
 800f084:	d8b9      	bhi.n	800effa <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800f086:	4b05      	ldr	r3, [pc, #20]	; (800f09c <xTaskGenericCreate+0x1b8>)
 800f088:	601c      	str	r4, [r3, #0]
 800f08a:	e7b6      	b.n	800effa <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f08c:	2001      	movs	r0, #1
 800f08e:	4240      	negs	r0, r0
 800f090:	e7db      	b.n	800f04a <xTaskGenericCreate+0x166>
 800f092:	46c0      	nop			; (mov r8, r8)
 800f094:	3fffffff 	.word	0x3fffffff
 800f098:	20001ed4 	.word	0x20001ed4
 800f09c:	20001e38 	.word	0x20001e38
 800f0a0:	20001e44 	.word	0x20001e44
 800f0a4:	20001eec 	.word	0x20001eec
 800f0a8:	20001f00 	.word	0x20001f00
 800f0ac:	20001f18 	.word	0x20001f18
 800f0b0:	20001f44 	.word	0x20001f44
 800f0b4:	20001f30 	.word	0x20001f30
 800f0b8:	20001e3c 	.word	0x20001e3c
 800f0bc:	20001e40 	.word	0x20001e40
 800f0c0:	20001ee0 	.word	0x20001ee0
 800f0c4:	20001ee8 	.word	0x20001ee8
 800f0c8:	20001f2c 	.word	0x20001f2c

0800f0cc <uxTaskPriorityGet>:
	{
 800f0cc:	b510      	push	{r4, lr}
 800f0ce:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f0d0:	f001 f83e 	bl	8010150 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f0d4:	2c00      	cmp	r4, #0
 800f0d6:	d004      	beq.n	800f0e2 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f0d8:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f0da:	f001 f845 	bl	8010168 <vPortExitCritical>
	}
 800f0de:	0020      	movs	r0, r4
 800f0e0:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f0e2:	4b01      	ldr	r3, [pc, #4]	; (800f0e8 <uxTaskPriorityGet+0x1c>)
 800f0e4:	681c      	ldr	r4, [r3, #0]
 800f0e6:	e7f7      	b.n	800f0d8 <uxTaskPriorityGet+0xc>
 800f0e8:	20001e38 	.word	0x20001e38

0800f0ec <vTaskPrioritySet>:
	{
 800f0ec:	b570      	push	{r4, r5, r6, lr}
 800f0ee:	0004      	movs	r4, r0
 800f0f0:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f0f2:	2906      	cmp	r1, #6
 800f0f4:	d901      	bls.n	800f0fa <vTaskPrioritySet+0xe>
 800f0f6:	b672      	cpsid	i
 800f0f8:	e7fe      	b.n	800f0f8 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f0fa:	f001 f829 	bl	8010150 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f0fe:	2c00      	cmp	r4, #0
 800f100:	d101      	bne.n	800f106 <vTaskPrioritySet+0x1a>
 800f102:	4b21      	ldr	r3, [pc, #132]	; (800f188 <vTaskPrioritySet+0x9c>)
 800f104:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f106:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f108:	4295      	cmp	r5, r2
 800f10a:	d032      	beq.n	800f172 <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800f10c:	d934      	bls.n	800f178 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800f10e:	4b1e      	ldr	r3, [pc, #120]	; (800f188 <vTaskPrioritySet+0x9c>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	42a3      	cmp	r3, r4
 800f114:	d036      	beq.n	800f184 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f116:	4b1c      	ldr	r3, [pc, #112]	; (800f188 <vTaskPrioritySet+0x9c>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f11c:	2600      	movs	r6, #0
 800f11e:	429d      	cmp	r5, r3
 800f120:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f122:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f124:	428a      	cmp	r2, r1
 800f126:	d100      	bne.n	800f12a <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800f128:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800f12a:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f12c:	69a3      	ldr	r3, [r4, #24]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	db02      	blt.n	800f138 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f132:	2207      	movs	r2, #7
 800f134:	1b55      	subs	r5, r2, r5
 800f136:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f138:	2314      	movs	r3, #20
 800f13a:	434b      	muls	r3, r1
 800f13c:	4a13      	ldr	r2, [pc, #76]	; (800f18c <vTaskPrioritySet+0xa0>)
 800f13e:	189b      	adds	r3, r3, r2
 800f140:	6962      	ldr	r2, [r4, #20]
 800f142:	429a      	cmp	r2, r3
 800f144:	d111      	bne.n	800f16a <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f146:	1d25      	adds	r5, r4, #4
 800f148:	0028      	movs	r0, r5
 800f14a:	f7ff fad4 	bl	800e6f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f14e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f150:	4a0f      	ldr	r2, [pc, #60]	; (800f190 <vTaskPrioritySet+0xa4>)
 800f152:	6812      	ldr	r2, [r2, #0]
 800f154:	4293      	cmp	r3, r2
 800f156:	d901      	bls.n	800f15c <vTaskPrioritySet+0x70>
 800f158:	4a0d      	ldr	r2, [pc, #52]	; (800f190 <vTaskPrioritySet+0xa4>)
 800f15a:	6013      	str	r3, [r2, #0]
 800f15c:	2014      	movs	r0, #20
 800f15e:	4358      	muls	r0, r3
 800f160:	4b0a      	ldr	r3, [pc, #40]	; (800f18c <vTaskPrioritySet+0xa0>)
 800f162:	18c0      	adds	r0, r0, r3
 800f164:	0029      	movs	r1, r5
 800f166:	f7ff faa3 	bl	800e6b0 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800f16a:	2e01      	cmp	r6, #1
 800f16c:	d101      	bne.n	800f172 <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800f16e:	f000 ffe3 	bl	8010138 <vPortYield>
		taskEXIT_CRITICAL();
 800f172:	f000 fff9 	bl	8010168 <vPortExitCritical>
	}
 800f176:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800f178:	4b03      	ldr	r3, [pc, #12]	; (800f188 <vTaskPrioritySet+0x9c>)
 800f17a:	681e      	ldr	r6, [r3, #0]
 800f17c:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f17e:	4273      	negs	r3, r6
 800f180:	415e      	adcs	r6, r3
 800f182:	e7ce      	b.n	800f122 <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800f184:	2600      	movs	r6, #0
 800f186:	e7cc      	b.n	800f122 <vTaskPrioritySet+0x36>
 800f188:	20001e38 	.word	0x20001e38
 800f18c:	20001e44 	.word	0x20001e44
 800f190:	20001ee8 	.word	0x20001ee8

0800f194 <vTaskStartScheduler>:
{
 800f194:	b500      	push	{lr}
 800f196:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f198:	2300      	movs	r3, #0
 800f19a:	9303      	str	r3, [sp, #12]
 800f19c:	9302      	str	r3, [sp, #8]
 800f19e:	9301      	str	r3, [sp, #4]
 800f1a0:	9300      	str	r3, [sp, #0]
 800f1a2:	22a0      	movs	r2, #160	; 0xa0
 800f1a4:	490d      	ldr	r1, [pc, #52]	; (800f1dc <vTaskStartScheduler+0x48>)
 800f1a6:	480e      	ldr	r0, [pc, #56]	; (800f1e0 <vTaskStartScheduler+0x4c>)
 800f1a8:	f7ff fe9c 	bl	800eee4 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f1ac:	2801      	cmp	r0, #1
 800f1ae:	d003      	beq.n	800f1b8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	d110      	bne.n	800f1d6 <vTaskStartScheduler+0x42>
 800f1b4:	b672      	cpsid	i
 800f1b6:	e7fe      	b.n	800f1b6 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800f1b8:	f000 fde0 	bl	800fd7c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f1bc:	2801      	cmp	r0, #1
 800f1be:	d1f7      	bne.n	800f1b0 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f1c0:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f1c2:	4b08      	ldr	r3, [pc, #32]	; (800f1e4 <vTaskStartScheduler+0x50>)
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f1c8:	4b07      	ldr	r3, [pc, #28]	; (800f1e8 <vTaskStartScheduler+0x54>)
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f1ce:	f7f8 ff37 	bl	8008040 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f1d2:	f000 ff87 	bl	80100e4 <xPortStartScheduler>
}
 800f1d6:	b005      	add	sp, #20
 800f1d8:	bd00      	pop	{pc}
 800f1da:	46c0      	nop			; (mov r8, r8)
 800f1dc:	0801ba38 	.word	0x0801ba38
 800f1e0:	0800f455 	.word	0x0800f455
 800f1e4:	20001f2c 	.word	0x20001f2c
 800f1e8:	20001f58 	.word	0x20001f58

0800f1ec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f1ec:	4a02      	ldr	r2, [pc, #8]	; (800f1f8 <vTaskSuspendAll+0xc>)
 800f1ee:	6813      	ldr	r3, [r2, #0]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	6013      	str	r3, [r2, #0]
}
 800f1f4:	4770      	bx	lr
 800f1f6:	46c0      	nop			; (mov r8, r8)
 800f1f8:	20001edc 	.word	0x20001edc

0800f1fc <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f1fc:	4b01      	ldr	r3, [pc, #4]	; (800f204 <xTaskGetTickCount+0x8>)
 800f1fe:	6818      	ldr	r0, [r3, #0]
}
 800f200:	4770      	bx	lr
 800f202:	46c0      	nop			; (mov r8, r8)
 800f204:	20001f58 	.word	0x20001f58

0800f208 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f208:	4b01      	ldr	r3, [pc, #4]	; (800f210 <xTaskGetTickCountFromISR+0x8>)
 800f20a:	6818      	ldr	r0, [r3, #0]
}
 800f20c:	4770      	bx	lr
 800f20e:	46c0      	nop			; (mov r8, r8)
 800f210:	20001f58 	.word	0x20001f58

0800f214 <xTaskIncrementTick>:
{
 800f214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f216:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f218:	4b39      	ldr	r3, [pc, #228]	; (800f300 <xTaskIncrementTick+0xec>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d161      	bne.n	800f2e4 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800f220:	4b38      	ldr	r3, [pc, #224]	; (800f304 <xTaskIncrementTick+0xf0>)
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	3201      	adds	r2, #1
 800f226:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f228:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f22a:	2e00      	cmp	r6, #0
 800f22c:	d112      	bne.n	800f254 <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800f22e:	4b36      	ldr	r3, [pc, #216]	; (800f308 <xTaskIncrementTick+0xf4>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d001      	beq.n	800f23c <xTaskIncrementTick+0x28>
 800f238:	b672      	cpsid	i
 800f23a:	e7fe      	b.n	800f23a <xTaskIncrementTick+0x26>
 800f23c:	4a32      	ldr	r2, [pc, #200]	; (800f308 <xTaskIncrementTick+0xf4>)
 800f23e:	6811      	ldr	r1, [r2, #0]
 800f240:	4b32      	ldr	r3, [pc, #200]	; (800f30c <xTaskIncrementTick+0xf8>)
 800f242:	6818      	ldr	r0, [r3, #0]
 800f244:	6010      	str	r0, [r2, #0]
 800f246:	6019      	str	r1, [r3, #0]
 800f248:	4a31      	ldr	r2, [pc, #196]	; (800f310 <xTaskIncrementTick+0xfc>)
 800f24a:	6813      	ldr	r3, [r2, #0]
 800f24c:	3301      	adds	r3, #1
 800f24e:	6013      	str	r3, [r2, #0]
 800f250:	f7ff fdf0 	bl	800ee34 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f254:	4b2f      	ldr	r3, [pc, #188]	; (800f314 <xTaskIncrementTick+0x100>)
 800f256:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f258:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f25a:	42b3      	cmp	r3, r6
 800f25c:	d833      	bhi.n	800f2c6 <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800f25e:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f260:	4d29      	ldr	r5, [pc, #164]	; (800f308 <xTaskIncrementTick+0xf4>)
 800f262:	682b      	ldr	r3, [r5, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d029      	beq.n	800f2be <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f26a:	4b27      	ldr	r3, [pc, #156]	; (800f308 <xTaskIncrementTick+0xf4>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f272:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f274:	429e      	cmp	r6, r3
 800f276:	d332      	bcc.n	800f2de <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f278:	1d23      	adds	r3, r4, #4
 800f27a:	9301      	str	r3, [sp, #4]
 800f27c:	0018      	movs	r0, r3
 800f27e:	f7ff fa3a 	bl	800e6f6 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f284:	2b00      	cmp	r3, #0
 800f286:	d003      	beq.n	800f290 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f288:	0020      	movs	r0, r4
 800f28a:	3018      	adds	r0, #24
 800f28c:	f7ff fa33 	bl	800e6f6 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f292:	4a21      	ldr	r2, [pc, #132]	; (800f318 <xTaskIncrementTick+0x104>)
 800f294:	6812      	ldr	r2, [r2, #0]
 800f296:	4293      	cmp	r3, r2
 800f298:	d901      	bls.n	800f29e <xTaskIncrementTick+0x8a>
 800f29a:	4a1f      	ldr	r2, [pc, #124]	; (800f318 <xTaskIncrementTick+0x104>)
 800f29c:	6013      	str	r3, [r2, #0]
 800f29e:	0098      	lsls	r0, r3, #2
 800f2a0:	18c0      	adds	r0, r0, r3
 800f2a2:	0080      	lsls	r0, r0, #2
 800f2a4:	4b1d      	ldr	r3, [pc, #116]	; (800f31c <xTaskIncrementTick+0x108>)
 800f2a6:	18c0      	adds	r0, r0, r3
 800f2a8:	9901      	ldr	r1, [sp, #4]
 800f2aa:	f7ff fa01 	bl	800e6b0 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f2ae:	4b1c      	ldr	r3, [pc, #112]	; (800f320 <xTaskIncrementTick+0x10c>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d3d3      	bcc.n	800f262 <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800f2ba:	2701      	movs	r7, #1
 800f2bc:	e7d1      	b.n	800f262 <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f2be:	4b15      	ldr	r3, [pc, #84]	; (800f314 <xTaskIncrementTick+0x100>)
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	4252      	negs	r2, r2
 800f2c4:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f2c6:	4b16      	ldr	r3, [pc, #88]	; (800f320 <xTaskIncrementTick+0x10c>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2cc:	0093      	lsls	r3, r2, #2
 800f2ce:	189b      	adds	r3, r3, r2
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	4a12      	ldr	r2, [pc, #72]	; (800f31c <xTaskIncrementTick+0x108>)
 800f2d4:	589b      	ldr	r3, [r3, r2]
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d909      	bls.n	800f2ee <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800f2da:	2701      	movs	r7, #1
 800f2dc:	e007      	b.n	800f2ee <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800f2de:	4a0d      	ldr	r2, [pc, #52]	; (800f314 <xTaskIncrementTick+0x100>)
 800f2e0:	6013      	str	r3, [r2, #0]
							break;
 800f2e2:	e7f0      	b.n	800f2c6 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800f2e4:	4a0f      	ldr	r2, [pc, #60]	; (800f324 <xTaskIncrementTick+0x110>)
 800f2e6:	6813      	ldr	r3, [r2, #0]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f2ec:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800f2ee:	4b0e      	ldr	r3, [pc, #56]	; (800f328 <xTaskIncrementTick+0x114>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d000      	beq.n	800f2f8 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800f2f6:	2701      	movs	r7, #1
}
 800f2f8:	0038      	movs	r0, r7
 800f2fa:	b003      	add	sp, #12
 800f2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2fe:	46c0      	nop			; (mov r8, r8)
 800f300:	20001edc 	.word	0x20001edc
 800f304:	20001f58 	.word	0x20001f58
 800f308:	20001e3c 	.word	0x20001e3c
 800f30c:	20001e40 	.word	0x20001e40
 800f310:	20001f14 	.word	0x20001f14
 800f314:	200000a0 	.word	0x200000a0
 800f318:	20001ee8 	.word	0x20001ee8
 800f31c:	20001e44 	.word	0x20001e44
 800f320:	20001e38 	.word	0x20001e38
 800f324:	20001ed8 	.word	0x20001ed8
 800f328:	20001f5c 	.word	0x20001f5c

0800f32c <xTaskResumeAll>:
{
 800f32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800f32e:	4b2f      	ldr	r3, [pc, #188]	; (800f3ec <xTaskResumeAll+0xc0>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d101      	bne.n	800f33a <xTaskResumeAll+0xe>
 800f336:	b672      	cpsid	i
 800f338:	e7fe      	b.n	800f338 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800f33a:	f000 ff09 	bl	8010150 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f33e:	4b2b      	ldr	r3, [pc, #172]	; (800f3ec <xTaskResumeAll+0xc0>)
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	3a01      	subs	r2, #1
 800f344:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f346:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f348:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f34a:	42a3      	cmp	r3, r4
 800f34c:	d105      	bne.n	800f35a <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f34e:	4b28      	ldr	r3, [pc, #160]	; (800f3f0 <xTaskResumeAll+0xc4>)
 800f350:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f352:	4d28      	ldr	r5, [pc, #160]	; (800f3f4 <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f354:	42a3      	cmp	r3, r4
 800f356:	d12a      	bne.n	800f3ae <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800f358:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f35a:	f000 ff05 	bl	8010168 <vPortExitCritical>
}
 800f35e:	0020      	movs	r0, r4
 800f360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800f362:	0098      	lsls	r0, r3, #2
 800f364:	18c0      	adds	r0, r0, r3
 800f366:	0080      	lsls	r0, r0, #2
 800f368:	4b23      	ldr	r3, [pc, #140]	; (800f3f8 <xTaskResumeAll+0xcc>)
 800f36a:	18c0      	adds	r0, r0, r3
 800f36c:	0021      	movs	r1, r4
 800f36e:	f7ff f99f 	bl	800e6b0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f372:	4b22      	ldr	r3, [pc, #136]	; (800f3fc <xTaskResumeAll+0xd0>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d214      	bcs.n	800f3a8 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f37e:	6833      	ldr	r3, [r6, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d016      	beq.n	800f3b2 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f384:	68eb      	ldr	r3, [r5, #12]
 800f386:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f388:	0038      	movs	r0, r7
 800f38a:	3018      	adds	r0, #24
 800f38c:	f7ff f9b3 	bl	800e6f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f390:	1d3c      	adds	r4, r7, #4
 800f392:	0020      	movs	r0, r4
 800f394:	f7ff f9af 	bl	800e6f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	4a19      	ldr	r2, [pc, #100]	; (800f400 <xTaskResumeAll+0xd4>)
 800f39c:	6812      	ldr	r2, [r2, #0]
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d9df      	bls.n	800f362 <xTaskResumeAll+0x36>
 800f3a2:	4a17      	ldr	r2, [pc, #92]	; (800f400 <xTaskResumeAll+0xd4>)
 800f3a4:	6013      	str	r3, [r2, #0]
 800f3a6:	e7dc      	b.n	800f362 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800f3a8:	4b16      	ldr	r3, [pc, #88]	; (800f404 <xTaskResumeAll+0xd8>)
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f3ae:	4e11      	ldr	r6, [pc, #68]	; (800f3f4 <xTaskResumeAll+0xc8>)
 800f3b0:	e7e5      	b.n	800f37e <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f3b2:	4b15      	ldr	r3, [pc, #84]	; (800f408 <xTaskResumeAll+0xdc>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d005      	beq.n	800f3c6 <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f3ba:	4e13      	ldr	r6, [pc, #76]	; (800f408 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800f3bc:	4c11      	ldr	r4, [pc, #68]	; (800f404 <xTaskResumeAll+0xd8>)
 800f3be:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f3c0:	6833      	ldr	r3, [r6, #0]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d108      	bne.n	800f3d8 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800f3c6:	4b0f      	ldr	r3, [pc, #60]	; (800f404 <xTaskResumeAll+0xd8>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f3ca:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d1c4      	bne.n	800f35a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800f3d0:	f000 feb2 	bl	8010138 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800f3d4:	3401      	adds	r4, #1
 800f3d6:	e7c0      	b.n	800f35a <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800f3d8:	f7ff ff1c 	bl	800f214 <xTaskIncrementTick>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	d000      	beq.n	800f3e2 <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800f3e0:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800f3e2:	4a09      	ldr	r2, [pc, #36]	; (800f408 <xTaskResumeAll+0xdc>)
 800f3e4:	6813      	ldr	r3, [r2, #0]
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	6013      	str	r3, [r2, #0]
 800f3ea:	e7e9      	b.n	800f3c0 <xTaskResumeAll+0x94>
 800f3ec:	20001edc 	.word	0x20001edc
 800f3f0:	20001ed4 	.word	0x20001ed4
 800f3f4:	20001f18 	.word	0x20001f18
 800f3f8:	20001e44 	.word	0x20001e44
 800f3fc:	20001e38 	.word	0x20001e38
 800f400:	20001ee8 	.word	0x20001ee8
 800f404:	20001f5c 	.word	0x20001f5c
 800f408:	20001ed8 	.word	0x20001ed8

0800f40c <vTaskDelay>:
	{
 800f40c:	b570      	push	{r4, r5, r6, lr}
 800f40e:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f410:	d016      	beq.n	800f440 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800f412:	4b0d      	ldr	r3, [pc, #52]	; (800f448 <vTaskDelay+0x3c>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <vTaskDelay+0x12>
 800f41a:	b672      	cpsid	i
 800f41c:	e7fe      	b.n	800f41c <vTaskDelay+0x10>
			vTaskSuspendAll();
 800f41e:	f7ff fee5 	bl	800f1ec <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f422:	4b0a      	ldr	r3, [pc, #40]	; (800f44c <vTaskDelay+0x40>)
 800f424:	681c      	ldr	r4, [r3, #0]
 800f426:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f428:	4b09      	ldr	r3, [pc, #36]	; (800f450 <vTaskDelay+0x44>)
 800f42a:	6818      	ldr	r0, [r3, #0]
 800f42c:	3004      	adds	r0, #4
 800f42e:	f7ff f962 	bl	800e6f6 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f432:	0020      	movs	r0, r4
 800f434:	f7ff fd14 	bl	800ee60 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f438:	f7ff ff78 	bl	800f32c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f43c:	2800      	cmp	r0, #0
 800f43e:	d101      	bne.n	800f444 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800f440:	f000 fe7a 	bl	8010138 <vPortYield>
	}
 800f444:	bd70      	pop	{r4, r5, r6, pc}
 800f446:	46c0      	nop			; (mov r8, r8)
 800f448:	20001edc 	.word	0x20001edc
 800f44c:	20001f58 	.word	0x20001f58
 800f450:	20001e38 	.word	0x20001e38

0800f454 <prvIdleTask>:
{
 800f454:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f456:	4d16      	ldr	r5, [pc, #88]	; (800f4b0 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f458:	4e16      	ldr	r6, [pc, #88]	; (800f4b4 <prvIdleTask+0x60>)
 800f45a:	e003      	b.n	800f464 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f45c:	4b16      	ldr	r3, [pc, #88]	; (800f4b8 <prvIdleTask+0x64>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d822      	bhi.n	800f4aa <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f464:	682b      	ldr	r3, [r5, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d0f8      	beq.n	800f45c <prvIdleTask+0x8>
			vTaskSuspendAll();
 800f46a:	f7ff febf 	bl	800f1ec <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f46e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800f470:	f7ff ff5c 	bl	800f32c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f474:	2c00      	cmp	r4, #0
 800f476:	d0f5      	beq.n	800f464 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800f478:	f000 fe6a 	bl	8010150 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f47c:	4b0d      	ldr	r3, [pc, #52]	; (800f4b4 <prvIdleTask+0x60>)
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f482:	1d20      	adds	r0, r4, #4
 800f484:	f7ff f937 	bl	800e6f6 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f488:	4a0c      	ldr	r2, [pc, #48]	; (800f4bc <prvIdleTask+0x68>)
 800f48a:	6813      	ldr	r3, [r2, #0]
 800f48c:	3b01      	subs	r3, #1
 800f48e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f490:	4a07      	ldr	r2, [pc, #28]	; (800f4b0 <prvIdleTask+0x5c>)
 800f492:	6813      	ldr	r3, [r2, #0]
 800f494:	3b01      	subs	r3, #1
 800f496:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f498:	f000 fe66 	bl	8010168 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800f49c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f49e:	f000 ff6f 	bl	8010380 <vPortFree>
		vPortFree( pxTCB );
 800f4a2:	0020      	movs	r0, r4
 800f4a4:	f000 ff6c 	bl	8010380 <vPortFree>
 800f4a8:	e7dc      	b.n	800f464 <prvIdleTask+0x10>
				taskYIELD();
 800f4aa:	f000 fe45 	bl	8010138 <vPortYield>
 800f4ae:	e7d9      	b.n	800f464 <prvIdleTask+0x10>
 800f4b0:	20001ee4 	.word	0x20001ee4
 800f4b4:	20001f44 	.word	0x20001f44
 800f4b8:	20001e44 	.word	0x20001e44
 800f4bc:	20001ed4 	.word	0x20001ed4

0800f4c0 <uxTaskGetSystemState>:
	{
 800f4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4c2:	46c6      	mov	lr, r8
 800f4c4:	b500      	push	{lr}
 800f4c6:	0006      	movs	r6, r0
 800f4c8:	000d      	movs	r5, r1
 800f4ca:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800f4cc:	f7ff fe8e 	bl	800f1ec <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f4d0:	4b1e      	ldr	r3, [pc, #120]	; (800f54c <uxTaskGetSystemState+0x8c>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f4d4:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f4d6:	42ab      	cmp	r3, r5
 800f4d8:	d831      	bhi.n	800f53e <uxTaskGetSystemState+0x7e>
 800f4da:	4d1d      	ldr	r5, [pc, #116]	; (800f550 <uxTaskGetSystemState+0x90>)
 800f4dc:	002f      	movs	r7, r5
 800f4de:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f4e0:	0160      	lsls	r0, r4, #5
 800f4e2:	1830      	adds	r0, r6, r0
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	0029      	movs	r1, r5
 800f4e8:	f7ff fc50 	bl	800ed8c <prvListTaskWithinSingleList>
 800f4ec:	1824      	adds	r4, r4, r0
 800f4ee:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4f0:	42bd      	cmp	r5, r7
 800f4f2:	d1f5      	bne.n	800f4e0 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f4f4:	4b17      	ldr	r3, [pc, #92]	; (800f554 <uxTaskGetSystemState+0x94>)
 800f4f6:	6819      	ldr	r1, [r3, #0]
 800f4f8:	0160      	lsls	r0, r4, #5
 800f4fa:	1830      	adds	r0, r6, r0
 800f4fc:	2202      	movs	r2, #2
 800f4fe:	f7ff fc45 	bl	800ed8c <prvListTaskWithinSingleList>
 800f502:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f504:	4b14      	ldr	r3, [pc, #80]	; (800f558 <uxTaskGetSystemState+0x98>)
 800f506:	6819      	ldr	r1, [r3, #0]
 800f508:	0160      	lsls	r0, r4, #5
 800f50a:	1830      	adds	r0, r6, r0
 800f50c:	2202      	movs	r2, #2
 800f50e:	f7ff fc3d 	bl	800ed8c <prvListTaskWithinSingleList>
 800f512:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f514:	0160      	lsls	r0, r4, #5
 800f516:	1830      	adds	r0, r6, r0
 800f518:	2204      	movs	r2, #4
 800f51a:	4910      	ldr	r1, [pc, #64]	; (800f55c <uxTaskGetSystemState+0x9c>)
 800f51c:	f7ff fc36 	bl	800ed8c <prvListTaskWithinSingleList>
 800f520:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f522:	0160      	lsls	r0, r4, #5
 800f524:	1830      	adds	r0, r6, r0
 800f526:	2203      	movs	r2, #3
 800f528:	490d      	ldr	r1, [pc, #52]	; (800f560 <uxTaskGetSystemState+0xa0>)
 800f52a:	f7ff fc2f 	bl	800ed8c <prvListTaskWithinSingleList>
 800f52e:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f530:	4643      	mov	r3, r8
 800f532:	2b00      	cmp	r3, #0
 800f534:	d003      	beq.n	800f53e <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f536:	f7f8 fd93 	bl	8008060 <ulMainGetRunTimeCounterValue>
 800f53a:	4643      	mov	r3, r8
 800f53c:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800f53e:	f7ff fef5 	bl	800f32c <xTaskResumeAll>
	}
 800f542:	0020      	movs	r0, r4
 800f544:	bc04      	pop	{r2}
 800f546:	4690      	mov	r8, r2
 800f548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f54a:	46c0      	nop			; (mov r8, r8)
 800f54c:	20001ed4 	.word	0x20001ed4
 800f550:	20001ebc 	.word	0x20001ebc
 800f554:	20001e3c 	.word	0x20001e3c
 800f558:	20001e40 	.word	0x20001e40
 800f55c:	20001f44 	.word	0x20001f44
 800f560:	20001f30 	.word	0x20001f30

0800f564 <vTaskSwitchContext>:
{
 800f564:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f566:	4b3a      	ldr	r3, [pc, #232]	; (800f650 <vTaskSwitchContext+0xec>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d003      	beq.n	800f576 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f56e:	4b39      	ldr	r3, [pc, #228]	; (800f654 <vTaskSwitchContext+0xf0>)
 800f570:	2201      	movs	r2, #1
 800f572:	601a      	str	r2, [r3, #0]
}
 800f574:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800f576:	4b37      	ldr	r3, [pc, #220]	; (800f654 <vTaskSwitchContext+0xf0>)
 800f578:	2200      	movs	r2, #0
 800f57a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f57c:	f7f8 fd70 	bl	8008060 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f580:	4b35      	ldr	r3, [pc, #212]	; (800f658 <vTaskSwitchContext+0xf4>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4298      	cmp	r0, r3
 800f586:	d905      	bls.n	800f594 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f588:	4a34      	ldr	r2, [pc, #208]	; (800f65c <vTaskSwitchContext+0xf8>)
 800f58a:	6812      	ldr	r2, [r2, #0]
 800f58c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f58e:	1acb      	subs	r3, r1, r3
 800f590:	181b      	adds	r3, r3, r0
 800f592:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f594:	4b30      	ldr	r3, [pc, #192]	; (800f658 <vTaskSwitchContext+0xf4>)
 800f596:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f598:	4b30      	ldr	r3, [pc, #192]	; (800f65c <vTaskSwitchContext+0xf8>)
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	6812      	ldr	r2, [r2, #0]
 800f5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d805      	bhi.n	800f5b2 <vTaskSwitchContext+0x4e>
 800f5a6:	4b2d      	ldr	r3, [pc, #180]	; (800f65c <vTaskSwitchContext+0xf8>)
 800f5a8:	6818      	ldr	r0, [r3, #0]
 800f5aa:	6819      	ldr	r1, [r3, #0]
 800f5ac:	3134      	adds	r1, #52	; 0x34
 800f5ae:	f7fe f8e7 	bl	800d780 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f5b2:	4b2a      	ldr	r3, [pc, #168]	; (800f65c <vTaskSwitchContext+0xf8>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f5b8:	2214      	movs	r2, #20
 800f5ba:	4929      	ldr	r1, [pc, #164]	; (800f660 <vTaskSwitchContext+0xfc>)
 800f5bc:	f004 fbba 	bl	8013d34 <memcmp>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d005      	beq.n	800f5d0 <vTaskSwitchContext+0x6c>
 800f5c4:	4b25      	ldr	r3, [pc, #148]	; (800f65c <vTaskSwitchContext+0xf8>)
 800f5c6:	6818      	ldr	r0, [r3, #0]
 800f5c8:	6819      	ldr	r1, [r3, #0]
 800f5ca:	3134      	adds	r1, #52	; 0x34
 800f5cc:	f7fe f8d8 	bl	800d780 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f5d0:	4b24      	ldr	r3, [pc, #144]	; (800f664 <vTaskSwitchContext+0x100>)
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	0093      	lsls	r3, r2, #2
 800f5d6:	189b      	adds	r3, r3, r2
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	4a23      	ldr	r2, [pc, #140]	; (800f668 <vTaskSwitchContext+0x104>)
 800f5dc:	589b      	ldr	r3, [r3, r2]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d115      	bne.n	800f60e <vTaskSwitchContext+0xaa>
 800f5e2:	4b20      	ldr	r3, [pc, #128]	; (800f664 <vTaskSwitchContext+0x100>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00f      	beq.n	800f60a <vTaskSwitchContext+0xa6>
 800f5ea:	4a1e      	ldr	r2, [pc, #120]	; (800f664 <vTaskSwitchContext+0x100>)
 800f5ec:	4c1e      	ldr	r4, [pc, #120]	; (800f668 <vTaskSwitchContext+0x104>)
 800f5ee:	0010      	movs	r0, r2
 800f5f0:	6813      	ldr	r3, [r2, #0]
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	6013      	str	r3, [r2, #0]
 800f5f6:	6811      	ldr	r1, [r2, #0]
 800f5f8:	008b      	lsls	r3, r1, #2
 800f5fa:	185b      	adds	r3, r3, r1
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	591b      	ldr	r3, [r3, r4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d104      	bne.n	800f60e <vTaskSwitchContext+0xaa>
 800f604:	6803      	ldr	r3, [r0, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d1f2      	bne.n	800f5f0 <vTaskSwitchContext+0x8c>
 800f60a:	b672      	cpsid	i
 800f60c:	e7fe      	b.n	800f60c <vTaskSwitchContext+0xa8>
 800f60e:	4b15      	ldr	r3, [pc, #84]	; (800f664 <vTaskSwitchContext+0x100>)
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	4c15      	ldr	r4, [pc, #84]	; (800f668 <vTaskSwitchContext+0x104>)
 800f614:	0093      	lsls	r3, r2, #2
 800f616:	1899      	adds	r1, r3, r2
 800f618:	0089      	lsls	r1, r1, #2
 800f61a:	1861      	adds	r1, r4, r1
 800f61c:	6848      	ldr	r0, [r1, #4]
 800f61e:	6840      	ldr	r0, [r0, #4]
 800f620:	6048      	str	r0, [r1, #4]
 800f622:	189b      	adds	r3, r3, r2
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	3308      	adds	r3, #8
 800f628:	191b      	adds	r3, r3, r4
 800f62a:	4298      	cmp	r0, r3
 800f62c:	d009      	beq.n	800f642 <vTaskSwitchContext+0xde>
 800f62e:	0093      	lsls	r3, r2, #2
 800f630:	189a      	adds	r2, r3, r2
 800f632:	0092      	lsls	r2, r2, #2
 800f634:	4b0c      	ldr	r3, [pc, #48]	; (800f668 <vTaskSwitchContext+0x104>)
 800f636:	189a      	adds	r2, r3, r2
 800f638:	6853      	ldr	r3, [r2, #4]
 800f63a:	68da      	ldr	r2, [r3, #12]
 800f63c:	4b07      	ldr	r3, [pc, #28]	; (800f65c <vTaskSwitchContext+0xf8>)
 800f63e:	601a      	str	r2, [r3, #0]
}
 800f640:	e798      	b.n	800f574 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f642:	6840      	ldr	r0, [r0, #4]
 800f644:	2114      	movs	r1, #20
 800f646:	4351      	muls	r1, r2
 800f648:	1863      	adds	r3, r4, r1
 800f64a:	6058      	str	r0, [r3, #4]
 800f64c:	e7ef      	b.n	800f62e <vTaskSwitchContext+0xca>
 800f64e:	46c0      	nop			; (mov r8, r8)
 800f650:	20001edc 	.word	0x20001edc
 800f654:	20001f5c 	.word	0x20001f5c
 800f658:	20001ed0 	.word	0x20001ed0
 800f65c:	20001e38 	.word	0x20001e38
 800f660:	0801b9fc 	.word	0x0801b9fc
 800f664:	20001ee8 	.word	0x20001ee8
 800f668:	20001e44 	.word	0x20001e44

0800f66c <vTaskPlaceOnEventList>:
{
 800f66c:	b570      	push	{r4, r5, r6, lr}
 800f66e:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800f670:	2800      	cmp	r0, #0
 800f672:	d101      	bne.n	800f678 <vTaskPlaceOnEventList+0xc>
 800f674:	b672      	cpsid	i
 800f676:	e7fe      	b.n	800f676 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f678:	4d0b      	ldr	r5, [pc, #44]	; (800f6a8 <vTaskPlaceOnEventList+0x3c>)
 800f67a:	6829      	ldr	r1, [r5, #0]
 800f67c:	3118      	adds	r1, #24
 800f67e:	f7ff f823 	bl	800e6c8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f682:	6828      	ldr	r0, [r5, #0]
 800f684:	3004      	adds	r0, #4
 800f686:	f7ff f836 	bl	800e6f6 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f68a:	1c63      	adds	r3, r4, #1
 800f68c:	d005      	beq.n	800f69a <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800f68e:	4b07      	ldr	r3, [pc, #28]	; (800f6ac <vTaskPlaceOnEventList+0x40>)
 800f690:	6818      	ldr	r0, [r3, #0]
 800f692:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f694:	f7ff fbe4 	bl	800ee60 <prvAddCurrentTaskToDelayedList>
}
 800f698:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f69a:	4b03      	ldr	r3, [pc, #12]	; (800f6a8 <vTaskPlaceOnEventList+0x3c>)
 800f69c:	6819      	ldr	r1, [r3, #0]
 800f69e:	3104      	adds	r1, #4
 800f6a0:	4803      	ldr	r0, [pc, #12]	; (800f6b0 <vTaskPlaceOnEventList+0x44>)
 800f6a2:	f7ff f805 	bl	800e6b0 <vListInsertEnd>
 800f6a6:	e7f7      	b.n	800f698 <vTaskPlaceOnEventList+0x2c>
 800f6a8:	20001e38 	.word	0x20001e38
 800f6ac:	20001f58 	.word	0x20001f58
 800f6b0:	20001f30 	.word	0x20001f30

0800f6b4 <vTaskPlaceOnUnorderedEventList>:
{
 800f6b4:	b570      	push	{r4, r5, r6, lr}
 800f6b6:	0015      	movs	r5, r2
	configASSERT( pxEventList );
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	d101      	bne.n	800f6c0 <vTaskPlaceOnUnorderedEventList+0xc>
 800f6bc:	b672      	cpsid	i
 800f6be:	e7fe      	b.n	800f6be <vTaskPlaceOnUnorderedEventList+0xa>
	configASSERT( uxSchedulerSuspended != 0 );
 800f6c0:	4b11      	ldr	r3, [pc, #68]	; (800f708 <vTaskPlaceOnUnorderedEventList+0x54>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d101      	bne.n	800f6cc <vTaskPlaceOnUnorderedEventList+0x18>
 800f6c8:	b672      	cpsid	i
 800f6ca:	e7fe      	b.n	800f6ca <vTaskPlaceOnUnorderedEventList+0x16>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f6cc:	4c0f      	ldr	r4, [pc, #60]	; (800f70c <vTaskPlaceOnUnorderedEventList+0x58>)
 800f6ce:	6822      	ldr	r2, [r4, #0]
 800f6d0:	2380      	movs	r3, #128	; 0x80
 800f6d2:	061b      	lsls	r3, r3, #24
 800f6d4:	4319      	orrs	r1, r3
 800f6d6:	6191      	str	r1, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f6d8:	6821      	ldr	r1, [r4, #0]
 800f6da:	3118      	adds	r1, #24
 800f6dc:	f7fe ffe8 	bl	800e6b0 <vListInsertEnd>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f6e0:	6820      	ldr	r0, [r4, #0]
 800f6e2:	3004      	adds	r0, #4
 800f6e4:	f7ff f807 	bl	800e6f6 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f6e8:	1c6b      	adds	r3, r5, #1
 800f6ea:	d106      	bne.n	800f6fa <vTaskPlaceOnUnorderedEventList+0x46>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f6ec:	4b07      	ldr	r3, [pc, #28]	; (800f70c <vTaskPlaceOnUnorderedEventList+0x58>)
 800f6ee:	6819      	ldr	r1, [r3, #0]
 800f6f0:	3104      	adds	r1, #4
 800f6f2:	4807      	ldr	r0, [pc, #28]	; (800f710 <vTaskPlaceOnUnorderedEventList+0x5c>)
 800f6f4:	f7fe ffdc 	bl	800e6b0 <vListInsertEnd>
}
 800f6f8:	bd70      	pop	{r4, r5, r6, pc}
			xTimeToWake = xTickCount + xTicksToWait;
 800f6fa:	4b06      	ldr	r3, [pc, #24]	; (800f714 <vTaskPlaceOnUnorderedEventList+0x60>)
 800f6fc:	6818      	ldr	r0, [r3, #0]
 800f6fe:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f700:	f7ff fbae 	bl	800ee60 <prvAddCurrentTaskToDelayedList>
}
 800f704:	e7f8      	b.n	800f6f8 <vTaskPlaceOnUnorderedEventList+0x44>
 800f706:	46c0      	nop			; (mov r8, r8)
 800f708:	20001edc 	.word	0x20001edc
 800f70c:	20001e38 	.word	0x20001e38
 800f710:	20001f30 	.word	0x20001f30
 800f714:	20001f58 	.word	0x20001f58

0800f718 <vTaskPlaceOnEventListRestricted>:
	{
 800f718:	b570      	push	{r4, r5, r6, lr}
 800f71a:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800f71c:	2800      	cmp	r0, #0
 800f71e:	d101      	bne.n	800f724 <vTaskPlaceOnEventListRestricted+0xc>
 800f720:	b672      	cpsid	i
 800f722:	e7fe      	b.n	800f722 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f724:	4c07      	ldr	r4, [pc, #28]	; (800f744 <vTaskPlaceOnEventListRestricted+0x2c>)
 800f726:	6821      	ldr	r1, [r4, #0]
 800f728:	3118      	adds	r1, #24
 800f72a:	f7fe ffc1 	bl	800e6b0 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f72e:	6820      	ldr	r0, [r4, #0]
 800f730:	3004      	adds	r0, #4
 800f732:	f7fe ffe0 	bl	800e6f6 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f736:	4b04      	ldr	r3, [pc, #16]	; (800f748 <vTaskPlaceOnEventListRestricted+0x30>)
 800f738:	6818      	ldr	r0, [r3, #0]
 800f73a:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f73c:	f7ff fb90 	bl	800ee60 <prvAddCurrentTaskToDelayedList>
	}
 800f740:	bd70      	pop	{r4, r5, r6, pc}
 800f742:	46c0      	nop			; (mov r8, r8)
 800f744:	20001e38 	.word	0x20001e38
 800f748:	20001f58 	.word	0x20001f58

0800f74c <xTaskRemoveFromEventList>:
{
 800f74c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f74e:	68c3      	ldr	r3, [r0, #12]
 800f750:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f752:	2d00      	cmp	r5, #0
 800f754:	d101      	bne.n	800f75a <xTaskRemoveFromEventList+0xe>
 800f756:	b672      	cpsid	i
 800f758:	e7fe      	b.n	800f758 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f75a:	002c      	movs	r4, r5
 800f75c:	3418      	adds	r4, #24
 800f75e:	0020      	movs	r0, r4
 800f760:	f7fe ffc9 	bl	800e6f6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f764:	4b13      	ldr	r3, [pc, #76]	; (800f7b4 <xTaskRemoveFromEventList+0x68>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d11e      	bne.n	800f7aa <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f76c:	1d2c      	adds	r4, r5, #4
 800f76e:	0020      	movs	r0, r4
 800f770:	f7fe ffc1 	bl	800e6f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f774:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f776:	4a10      	ldr	r2, [pc, #64]	; (800f7b8 <xTaskRemoveFromEventList+0x6c>)
 800f778:	6812      	ldr	r2, [r2, #0]
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d901      	bls.n	800f782 <xTaskRemoveFromEventList+0x36>
 800f77e:	4a0e      	ldr	r2, [pc, #56]	; (800f7b8 <xTaskRemoveFromEventList+0x6c>)
 800f780:	6013      	str	r3, [r2, #0]
 800f782:	0098      	lsls	r0, r3, #2
 800f784:	18c0      	adds	r0, r0, r3
 800f786:	0080      	lsls	r0, r0, #2
 800f788:	4b0c      	ldr	r3, [pc, #48]	; (800f7bc <xTaskRemoveFromEventList+0x70>)
 800f78a:	18c0      	adds	r0, r0, r3
 800f78c:	0021      	movs	r1, r4
 800f78e:	f7fe ff8f 	bl	800e6b0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f792:	4b0b      	ldr	r3, [pc, #44]	; (800f7c0 <xTaskRemoveFromEventList+0x74>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800f79a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d903      	bls.n	800f7a8 <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800f7a0:	4b08      	ldr	r3, [pc, #32]	; (800f7c4 <xTaskRemoveFromEventList+0x78>)
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800f7a6:	3001      	adds	r0, #1
}
 800f7a8:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f7aa:	0021      	movs	r1, r4
 800f7ac:	4806      	ldr	r0, [pc, #24]	; (800f7c8 <xTaskRemoveFromEventList+0x7c>)
 800f7ae:	f7fe ff7f 	bl	800e6b0 <vListInsertEnd>
 800f7b2:	e7ee      	b.n	800f792 <xTaskRemoveFromEventList+0x46>
 800f7b4:	20001edc 	.word	0x20001edc
 800f7b8:	20001ee8 	.word	0x20001ee8
 800f7bc:	20001e44 	.word	0x20001e44
 800f7c0:	20001e38 	.word	0x20001e38
 800f7c4:	20001f5c 	.word	0x20001f5c
 800f7c8:	20001f18 	.word	0x20001f18

0800f7cc <xTaskRemoveFromUnorderedEventList>:
{
 800f7cc:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f7ce:	4b17      	ldr	r3, [pc, #92]	; (800f82c <xTaskRemoveFromUnorderedEventList+0x60>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d101      	bne.n	800f7da <xTaskRemoveFromUnorderedEventList+0xe>
 800f7d6:	b672      	cpsid	i
 800f7d8:	e7fe      	b.n	800f7d8 <xTaskRemoveFromUnorderedEventList+0xc>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f7da:	2380      	movs	r3, #128	; 0x80
 800f7dc:	061b      	lsls	r3, r3, #24
 800f7de:	4319      	orrs	r1, r3
 800f7e0:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800f7e2:	68c5      	ldr	r5, [r0, #12]
	configASSERT( pxUnblockedTCB );
 800f7e4:	2d00      	cmp	r5, #0
 800f7e6:	d01f      	beq.n	800f828 <xTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 800f7e8:	f7fe ff85 	bl	800e6f6 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f7ec:	1d2c      	adds	r4, r5, #4
 800f7ee:	0020      	movs	r0, r4
 800f7f0:	f7fe ff81 	bl	800e6f6 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f7f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f7f6:	4a0e      	ldr	r2, [pc, #56]	; (800f830 <xTaskRemoveFromUnorderedEventList+0x64>)
 800f7f8:	6812      	ldr	r2, [r2, #0]
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d901      	bls.n	800f802 <xTaskRemoveFromUnorderedEventList+0x36>
 800f7fe:	4a0c      	ldr	r2, [pc, #48]	; (800f830 <xTaskRemoveFromUnorderedEventList+0x64>)
 800f800:	6013      	str	r3, [r2, #0]
 800f802:	0098      	lsls	r0, r3, #2
 800f804:	18c0      	adds	r0, r0, r3
 800f806:	0080      	lsls	r0, r0, #2
 800f808:	4b0a      	ldr	r3, [pc, #40]	; (800f834 <xTaskRemoveFromUnorderedEventList+0x68>)
 800f80a:	18c0      	adds	r0, r0, r3
 800f80c:	0021      	movs	r1, r4
 800f80e:	f7fe ff4f 	bl	800e6b0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f812:	4b09      	ldr	r3, [pc, #36]	; (800f838 <xTaskRemoveFromUnorderedEventList+0x6c>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800f81a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d902      	bls.n	800f826 <xTaskRemoveFromUnorderedEventList+0x5a>
		xYieldPending = pdTRUE;
 800f820:	3001      	adds	r0, #1
 800f822:	4b06      	ldr	r3, [pc, #24]	; (800f83c <xTaskRemoveFromUnorderedEventList+0x70>)
 800f824:	6018      	str	r0, [r3, #0]
}
 800f826:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800f828:	b672      	cpsid	i
 800f82a:	e7fe      	b.n	800f82a <xTaskRemoveFromUnorderedEventList+0x5e>
 800f82c:	20001edc 	.word	0x20001edc
 800f830:	20001ee8 	.word	0x20001ee8
 800f834:	20001e44 	.word	0x20001e44
 800f838:	20001e38 	.word	0x20001e38
 800f83c:	20001f5c 	.word	0x20001f5c

0800f840 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800f840:	2800      	cmp	r0, #0
 800f842:	d006      	beq.n	800f852 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f844:	4b04      	ldr	r3, [pc, #16]	; (800f858 <vTaskSetTimeOutState+0x18>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f84a:	4b04      	ldr	r3, [pc, #16]	; (800f85c <vTaskSetTimeOutState+0x1c>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6043      	str	r3, [r0, #4]
}
 800f850:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800f852:	b672      	cpsid	i
 800f854:	e7fe      	b.n	800f854 <vTaskSetTimeOutState+0x14>
 800f856:	46c0      	nop			; (mov r8, r8)
 800f858:	20001f14 	.word	0x20001f14
 800f85c:	20001f58 	.word	0x20001f58

0800f860 <xTaskCheckForTimeOut>:
{
 800f860:	b570      	push	{r4, r5, r6, lr}
 800f862:	0004      	movs	r4, r0
 800f864:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800f866:	2800      	cmp	r0, #0
 800f868:	d003      	beq.n	800f872 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800f86a:	2900      	cmp	r1, #0
 800f86c:	d103      	bne.n	800f876 <xTaskCheckForTimeOut+0x16>
 800f86e:	b672      	cpsid	i
 800f870:	e7fe      	b.n	800f870 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800f872:	b672      	cpsid	i
 800f874:	e7fe      	b.n	800f874 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800f876:	f000 fc6b 	bl	8010150 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f87a:	4b10      	ldr	r3, [pc, #64]	; (800f8bc <xTaskCheckForTimeOut+0x5c>)
 800f87c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f87e:	6833      	ldr	r3, [r6, #0]
 800f880:	1c59      	adds	r1, r3, #1
 800f882:	d019      	beq.n	800f8b8 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f884:	490e      	ldr	r1, [pc, #56]	; (800f8c0 <xTaskCheckForTimeOut+0x60>)
 800f886:	6809      	ldr	r1, [r1, #0]
 800f888:	6820      	ldr	r0, [r4, #0]
 800f88a:	4288      	cmp	r0, r1
 800f88c:	d003      	beq.n	800f896 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800f88e:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f890:	6861      	ldr	r1, [r4, #4]
 800f892:	4291      	cmp	r1, r2
 800f894:	d904      	bls.n	800f8a0 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f896:	6861      	ldr	r1, [r4, #4]
 800f898:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800f89a:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f89c:	4283      	cmp	r3, r0
 800f89e:	d803      	bhi.n	800f8a8 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800f8a0:	f000 fc62 	bl	8010168 <vPortExitCritical>
}
 800f8a4:	0028      	movs	r0, r5
 800f8a6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f8a8:	1a9b      	subs	r3, r3, r2
 800f8aa:	185b      	adds	r3, r3, r1
 800f8ac:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f8ae:	0020      	movs	r0, r4
 800f8b0:	f7ff ffc6 	bl	800f840 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f8b4:	2500      	movs	r5, #0
 800f8b6:	e7f3      	b.n	800f8a0 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800f8b8:	2500      	movs	r5, #0
 800f8ba:	e7f1      	b.n	800f8a0 <xTaskCheckForTimeOut+0x40>
 800f8bc:	20001f58 	.word	0x20001f58
 800f8c0:	20001f14 	.word	0x20001f14

0800f8c4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f8c4:	4b01      	ldr	r3, [pc, #4]	; (800f8cc <vTaskMissedYield+0x8>)
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	601a      	str	r2, [r3, #0]
}
 800f8ca:	4770      	bx	lr
 800f8cc:	20001f5c 	.word	0x20001f5c

0800f8d0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f8d0:	4b05      	ldr	r3, [pc, #20]	; (800f8e8 <xTaskGetSchedulerState+0x18>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f8d4:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d004      	beq.n	800f8e4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8da:	4b04      	ldr	r3, [pc, #16]	; (800f8ec <xTaskGetSchedulerState+0x1c>)
 800f8dc:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800f8de:	4243      	negs	r3, r0
 800f8e0:	4158      	adcs	r0, r3
 800f8e2:	0040      	lsls	r0, r0, #1
	}
 800f8e4:	4770      	bx	lr
 800f8e6:	46c0      	nop			; (mov r8, r8)
 800f8e8:	20001f2c 	.word	0x20001f2c
 800f8ec:	20001edc 	.word	0x20001edc

0800f8f0 <vTaskPriorityInherit>:
	{
 800f8f0:	b570      	push	{r4, r5, r6, lr}
 800f8f2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f8f4:	d01a      	beq.n	800f92c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f8f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f8f8:	4b19      	ldr	r3, [pc, #100]	; (800f960 <vTaskPriorityInherit+0x70>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d214      	bcs.n	800f92c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f902:	6983      	ldr	r3, [r0, #24]
 800f904:	2b00      	cmp	r3, #0
 800f906:	db05      	blt.n	800f914 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f908:	4b15      	ldr	r3, [pc, #84]	; (800f960 <vTaskPriorityInherit+0x70>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f90e:	2307      	movs	r3, #7
 800f910:	1a5b      	subs	r3, r3, r1
 800f912:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f914:	0093      	lsls	r3, r2, #2
 800f916:	189b      	adds	r3, r3, r2
 800f918:	009b      	lsls	r3, r3, #2
 800f91a:	4a12      	ldr	r2, [pc, #72]	; (800f964 <vTaskPriorityInherit+0x74>)
 800f91c:	189b      	adds	r3, r3, r2
 800f91e:	6962      	ldr	r2, [r4, #20]
 800f920:	429a      	cmp	r2, r3
 800f922:	d004      	beq.n	800f92e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f924:	4b0e      	ldr	r3, [pc, #56]	; (800f960 <vTaskPriorityInherit+0x70>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f92c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f92e:	1d25      	adds	r5, r4, #4
 800f930:	0028      	movs	r0, r5
 800f932:	f7fe fee0 	bl	800e6f6 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f936:	4b0a      	ldr	r3, [pc, #40]	; (800f960 <vTaskPriorityInherit+0x70>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f93c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f93e:	4a0a      	ldr	r2, [pc, #40]	; (800f968 <vTaskPriorityInherit+0x78>)
 800f940:	6812      	ldr	r2, [r2, #0]
 800f942:	4293      	cmp	r3, r2
 800f944:	d808      	bhi.n	800f958 <vTaskPriorityInherit+0x68>
 800f946:	0098      	lsls	r0, r3, #2
 800f948:	18c0      	adds	r0, r0, r3
 800f94a:	0080      	lsls	r0, r0, #2
 800f94c:	4b05      	ldr	r3, [pc, #20]	; (800f964 <vTaskPriorityInherit+0x74>)
 800f94e:	18c0      	adds	r0, r0, r3
 800f950:	0029      	movs	r1, r5
 800f952:	f7fe fead 	bl	800e6b0 <vListInsertEnd>
	}
 800f956:	e7e9      	b.n	800f92c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f958:	4a03      	ldr	r2, [pc, #12]	; (800f968 <vTaskPriorityInherit+0x78>)
 800f95a:	6013      	str	r3, [r2, #0]
 800f95c:	e7f3      	b.n	800f946 <vTaskPriorityInherit+0x56>
 800f95e:	46c0      	nop			; (mov r8, r8)
 800f960:	20001e38 	.word	0x20001e38
 800f964:	20001e44 	.word	0x20001e44
 800f968:	20001ee8 	.word	0x20001ee8

0800f96c <xTaskPriorityDisinherit>:
	{
 800f96c:	b570      	push	{r4, r5, r6, lr}
 800f96e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f970:	d02b      	beq.n	800f9ca <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800f972:	4b18      	ldr	r3, [pc, #96]	; (800f9d4 <xTaskPriorityDisinherit+0x68>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4283      	cmp	r3, r0
 800f978:	d001      	beq.n	800f97e <xTaskPriorityDisinherit+0x12>
 800f97a:	b672      	cpsid	i
 800f97c:	e7fe      	b.n	800f97c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800f97e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f980:	2b00      	cmp	r3, #0
 800f982:	d101      	bne.n	800f988 <xTaskPriorityDisinherit+0x1c>
 800f984:	b672      	cpsid	i
 800f986:	e7fe      	b.n	800f986 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800f988:	3b01      	subs	r3, #1
 800f98a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f98c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f98e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f990:	428a      	cmp	r2, r1
 800f992:	d01c      	beq.n	800f9ce <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800f994:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f996:	4283      	cmp	r3, r0
 800f998:	d118      	bne.n	800f9cc <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f99a:	1d25      	adds	r5, r4, #4
 800f99c:	0028      	movs	r0, r5
 800f99e:	f7fe feaa 	bl	800e6f6 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f9a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f9a4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9a6:	2207      	movs	r2, #7
 800f9a8:	1ad2      	subs	r2, r2, r3
 800f9aa:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f9ac:	4a0a      	ldr	r2, [pc, #40]	; (800f9d8 <xTaskPriorityDisinherit+0x6c>)
 800f9ae:	6812      	ldr	r2, [r2, #0]
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d901      	bls.n	800f9b8 <xTaskPriorityDisinherit+0x4c>
 800f9b4:	4a08      	ldr	r2, [pc, #32]	; (800f9d8 <xTaskPriorityDisinherit+0x6c>)
 800f9b6:	6013      	str	r3, [r2, #0]
 800f9b8:	2014      	movs	r0, #20
 800f9ba:	4358      	muls	r0, r3
 800f9bc:	4b07      	ldr	r3, [pc, #28]	; (800f9dc <xTaskPriorityDisinherit+0x70>)
 800f9be:	18c0      	adds	r0, r0, r3
 800f9c0:	0029      	movs	r1, r5
 800f9c2:	f7fe fe75 	bl	800e6b0 <vListInsertEnd>
					xReturn = pdTRUE;
 800f9c6:	2001      	movs	r0, #1
 800f9c8:	e000      	b.n	800f9cc <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800f9ca:	2000      	movs	r0, #0
	}
 800f9cc:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800f9ce:	2000      	movs	r0, #0
 800f9d0:	e7fc      	b.n	800f9cc <xTaskPriorityDisinherit+0x60>
 800f9d2:	46c0      	nop			; (mov r8, r8)
 800f9d4:	20001e38 	.word	0x20001e38
 800f9d8:	20001ee8 	.word	0x20001ee8
 800f9dc:	20001e44 	.word	0x20001e44

0800f9e0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9e2:	b085      	sub	sp, #20
 800f9e4:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f9ea:	4b2b      	ldr	r3, [pc, #172]	; (800fa98 <vTaskList+0xb8>)
 800f9ec:	681a      	ldr	r2, [r3, #0]
 800f9ee:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f9f0:	6818      	ldr	r0, [r3, #0]
 800f9f2:	0140      	lsls	r0, r0, #5
 800f9f4:	f000 fc2e 	bl	8010254 <pvPortMalloc>
 800f9f8:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800f9fa:	d04a      	beq.n	800fa92 <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f9fc:	9903      	ldr	r1, [sp, #12]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f7ff fd5e 	bl	800f4c0 <uxTaskGetSystemState>
 800fa04:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800fa06:	2300      	movs	r3, #0
 800fa08:	9302      	str	r3, [sp, #8]
 800fa0a:	9a02      	ldr	r2, [sp, #8]
 800fa0c:	9b03      	ldr	r3, [sp, #12]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d23c      	bcs.n	800fa8c <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800fa12:	4e22      	ldr	r6, [pc, #136]	; (800fa9c <vTaskList+0xbc>)
 800fa14:	e027      	b.n	800fa66 <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800fa16:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d133      	bne.n	800fa84 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fa1c:	9b02      	ldr	r3, [sp, #8]
 800fa1e:	015b      	lsls	r3, r3, #5
 800fa20:	18fb      	adds	r3, r7, r3
 800fa22:	6859      	ldr	r1, [r3, #4]
 800fa24:	0020      	movs	r0, r4
 800fa26:	f7ff fa45 	bl	800eeb4 <prvWriteNameToBuffer>
 800fa2a:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800fa2c:	9b02      	ldr	r3, [sp, #8]
 800fa2e:	9a02      	ldr	r2, [sp, #8]
 800fa30:	9902      	ldr	r1, [sp, #8]
 800fa32:	015b      	lsls	r3, r3, #5
 800fa34:	18fb      	adds	r3, r7, r3
 800fa36:	691b      	ldr	r3, [r3, #16]
 800fa38:	0149      	lsls	r1, r1, #5
 800fa3a:	1879      	adds	r1, r7, r1
 800fa3c:	6889      	ldr	r1, [r1, #8]
 800fa3e:	9101      	str	r1, [sp, #4]
 800fa40:	0152      	lsls	r2, r2, #5
 800fa42:	18ba      	adds	r2, r7, r2
 800fa44:	8b92      	ldrh	r2, [r2, #28]
 800fa46:	9200      	str	r2, [sp, #0]
 800fa48:	002a      	movs	r2, r5
 800fa4a:	0031      	movs	r1, r6
 800fa4c:	f004 fb84 	bl	8014158 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800fa50:	0020      	movs	r0, r4
 800fa52:	f7f0 fb61 	bl	8000118 <strlen>
 800fa56:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800fa58:	9b02      	ldr	r3, [sp, #8]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	9302      	str	r3, [sp, #8]
 800fa5e:	9a02      	ldr	r2, [sp, #8]
 800fa60:	9b03      	ldr	r3, [sp, #12]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d212      	bcs.n	800fa8c <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fa66:	9b02      	ldr	r3, [sp, #8]
 800fa68:	015b      	lsls	r3, r3, #5
 800fa6a:	18fb      	adds	r3, r7, r3
 800fa6c:	7b1b      	ldrb	r3, [r3, #12]
 800fa6e:	2b02      	cmp	r3, #2
 800fa70:	d00a      	beq.n	800fa88 <vTaskList+0xa8>
 800fa72:	b2da      	uxtb	r2, r3
 800fa74:	2a02      	cmp	r2, #2
 800fa76:	d9ce      	bls.n	800fa16 <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800fa78:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fa7a:	2b03      	cmp	r3, #3
 800fa7c:	d0ce      	beq.n	800fa1c <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800fa7e:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fa80:	2b04      	cmp	r3, #4
 800fa82:	d0cb      	beq.n	800fa1c <vTaskList+0x3c>
										cStatus = 0x00;
 800fa84:	2500      	movs	r5, #0
										break;
 800fa86:	e7c9      	b.n	800fa1c <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800fa88:	2542      	movs	r5, #66	; 0x42
 800fa8a:	e7c7      	b.n	800fa1c <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fa8c:	0038      	movs	r0, r7
 800fa8e:	f000 fc77 	bl	8010380 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa92:	b005      	add	sp, #20
 800fa94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa96:	46c0      	nop			; (mov r8, r8)
 800fa98:	20001ed4 	.word	0x20001ed4
 800fa9c:	0801ba28 	.word	0x0801ba28

0800faa0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800faa0:	b570      	push	{r4, r5, r6, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800faa6:	2300      	movs	r3, #0
 800faa8:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800faaa:	4b26      	ldr	r3, [pc, #152]	; (800fb44 <vTaskGetRunTimeStats+0xa4>)
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fab0:	6818      	ldr	r0, [r3, #0]
 800fab2:	0140      	lsls	r0, r0, #5
 800fab4:	f000 fbce 	bl	8010254 <pvPortMalloc>
 800fab8:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800faba:	d014      	beq.n	800fae6 <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800fabc:	9903      	ldr	r1, [sp, #12]
 800fabe:	aa01      	add	r2, sp, #4
 800fac0:	f7ff fcfe 	bl	800f4c0 <uxTaskGetSystemState>
 800fac4:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800fac6:	2164      	movs	r1, #100	; 0x64
 800fac8:	9801      	ldr	r0, [sp, #4]
 800faca:	f7f0 fb41 	bl	8000150 <__udivsi3>
 800face:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d005      	beq.n	800fae0 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800fad4:	2300      	movs	r3, #0
 800fad6:	9302      	str	r3, [sp, #8]
 800fad8:	9a02      	ldr	r2, [sp, #8]
 800fada:	9b03      	ldr	r3, [sp, #12]
 800fadc:	429a      	cmp	r2, r3
 800fade:	d316      	bcc.n	800fb0e <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fae0:	0030      	movs	r0, r6
 800fae2:	f000 fc4d 	bl	8010380 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fae6:	b004      	add	sp, #16
 800fae8:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800faea:	9b02      	ldr	r3, [sp, #8]
 800faec:	015b      	lsls	r3, r3, #5
 800faee:	18f3      	adds	r3, r6, r3
 800faf0:	699a      	ldr	r2, [r3, #24]
 800faf2:	4915      	ldr	r1, [pc, #84]	; (800fb48 <vTaskGetRunTimeStats+0xa8>)
 800faf4:	f004 fb30 	bl	8014158 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800faf8:	0020      	movs	r0, r4
 800fafa:	f7f0 fb0d 	bl	8000118 <strlen>
 800fafe:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800fb00:	9b02      	ldr	r3, [sp, #8]
 800fb02:	3301      	adds	r3, #1
 800fb04:	9302      	str	r3, [sp, #8]
 800fb06:	9a02      	ldr	r2, [sp, #8]
 800fb08:	9b03      	ldr	r3, [sp, #12]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d2e8      	bcs.n	800fae0 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800fb0e:	9b02      	ldr	r3, [sp, #8]
 800fb10:	015b      	lsls	r3, r3, #5
 800fb12:	18f3      	adds	r3, r6, r3
 800fb14:	9901      	ldr	r1, [sp, #4]
 800fb16:	6998      	ldr	r0, [r3, #24]
 800fb18:	f7f0 fb1a 	bl	8000150 <__udivsi3>
 800fb1c:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fb1e:	9b02      	ldr	r3, [sp, #8]
 800fb20:	015b      	lsls	r3, r3, #5
 800fb22:	18f3      	adds	r3, r6, r3
 800fb24:	6859      	ldr	r1, [r3, #4]
 800fb26:	0020      	movs	r0, r4
 800fb28:	f7ff f9c4 	bl	800eeb4 <prvWriteNameToBuffer>
 800fb2c:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800fb2e:	2d00      	cmp	r5, #0
 800fb30:	d0db      	beq.n	800faea <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800fb32:	9b02      	ldr	r3, [sp, #8]
 800fb34:	015b      	lsls	r3, r3, #5
 800fb36:	18f3      	adds	r3, r6, r3
 800fb38:	699a      	ldr	r2, [r3, #24]
 800fb3a:	002b      	movs	r3, r5
 800fb3c:	4903      	ldr	r1, [pc, #12]	; (800fb4c <vTaskGetRunTimeStats+0xac>)
 800fb3e:	f004 fb0b 	bl	8014158 <sprintf>
 800fb42:	e7d9      	b.n	800faf8 <vTaskGetRunTimeStats+0x58>
 800fb44:	20001ed4 	.word	0x20001ed4
 800fb48:	0801ba1c 	.word	0x0801ba1c
 800fb4c:	0801ba10 	.word	0x0801ba10

0800fb50 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800fb50:	4b04      	ldr	r3, [pc, #16]	; (800fb64 <uxTaskResetEventItemValue+0x14>)
 800fb52:	681a      	ldr	r2, [r3, #0]
 800fb54:	6990      	ldr	r0, [r2, #24]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb56:	6819      	ldr	r1, [r3, #0]
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800fb5c:	2307      	movs	r3, #7
 800fb5e:	1a5b      	subs	r3, r3, r1
 800fb60:	6193      	str	r3, [r2, #24]

	return uxReturn;
}
 800fb62:	4770      	bx	lr
 800fb64:	20001e38 	.word	0x20001e38

0800fb68 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fb68:	4b05      	ldr	r3, [pc, #20]	; (800fb80 <pvTaskIncrementMutexHeldCount+0x18>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d004      	beq.n	800fb7a <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fb70:	4b03      	ldr	r3, [pc, #12]	; (800fb80 <pvTaskIncrementMutexHeldCount+0x18>)
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800fb76:	3301      	adds	r3, #1
 800fb78:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fb7a:	4b01      	ldr	r3, [pc, #4]	; (800fb80 <pvTaskIncrementMutexHeldCount+0x18>)
 800fb7c:	6818      	ldr	r0, [r3, #0]
	}
 800fb7e:	4770      	bx	lr
 800fb80:	20001e38 	.word	0x20001e38

0800fb84 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fb84:	b570      	push	{r4, r5, r6, lr}
 800fb86:	0005      	movs	r5, r0
 800fb88:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800fb8a:	f000 fae1 	bl	8010150 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800fb8e:	4b20      	ldr	r3, [pc, #128]	; (800fc10 <ulTaskNotifyTake+0x8c>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d106      	bne.n	800fba6 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800fb98:	4b1d      	ldr	r3, [pc, #116]	; (800fc10 <ulTaskNotifyTake+0x8c>)
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	235c      	movs	r3, #92	; 0x5c
 800fb9e:	2101      	movs	r1, #1
 800fba0:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800fba2:	2c00      	cmp	r4, #0
 800fba4:	d118      	bne.n	800fbd8 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fba6:	f000 fadf 	bl	8010168 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fbaa:	f000 fad1 	bl	8010150 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fbae:	4b18      	ldr	r3, [pc, #96]	; (800fc10 <ulTaskNotifyTake+0x8c>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800fbb4:	2c00      	cmp	r4, #0
 800fbb6:	d006      	beq.n	800fbc6 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800fbb8:	2d00      	cmp	r5, #0
 800fbba:	d123      	bne.n	800fc04 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800fbbc:	4b14      	ldr	r3, [pc, #80]	; (800fc10 <ulTaskNotifyTake+0x8c>)
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800fbc6:	4b12      	ldr	r3, [pc, #72]	; (800fc10 <ulTaskNotifyTake+0x8c>)
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	235c      	movs	r3, #92	; 0x5c
 800fbcc:	2100      	movs	r1, #0
 800fbce:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800fbd0:	f000 faca 	bl	8010168 <vPortExitCritical>

		return ulReturn;
	}
 800fbd4:	0020      	movs	r0, r4
 800fbd6:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fbd8:	4b0d      	ldr	r3, [pc, #52]	; (800fc10 <ulTaskNotifyTake+0x8c>)
 800fbda:	6818      	ldr	r0, [r3, #0]
 800fbdc:	3004      	adds	r0, #4
 800fbde:	f7fe fd8a 	bl	800e6f6 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800fbe2:	1c63      	adds	r3, r4, #1
 800fbe4:	d007      	beq.n	800fbf6 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800fbe6:	4b0b      	ldr	r3, [pc, #44]	; (800fc14 <ulTaskNotifyTake+0x90>)
 800fbe8:	6818      	ldr	r0, [r3, #0]
 800fbea:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fbec:	f7ff f938 	bl	800ee60 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800fbf0:	f000 faa2 	bl	8010138 <vPortYield>
 800fbf4:	e7d7      	b.n	800fba6 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fbf6:	4b06      	ldr	r3, [pc, #24]	; (800fc10 <ulTaskNotifyTake+0x8c>)
 800fbf8:	6819      	ldr	r1, [r3, #0]
 800fbfa:	3104      	adds	r1, #4
 800fbfc:	4806      	ldr	r0, [pc, #24]	; (800fc18 <ulTaskNotifyTake+0x94>)
 800fbfe:	f7fe fd57 	bl	800e6b0 <vListInsertEnd>
 800fc02:	e7f5      	b.n	800fbf0 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fc04:	4b02      	ldr	r3, [pc, #8]	; (800fc10 <ulTaskNotifyTake+0x8c>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	659a      	str	r2, [r3, #88]	; 0x58
 800fc0c:	e7db      	b.n	800fbc6 <ulTaskNotifyTake+0x42>
 800fc0e:	46c0      	nop			; (mov r8, r8)
 800fc10:	20001e38 	.word	0x20001e38
 800fc14:	20001f58 	.word	0x20001f58
 800fc18:	20001f30 	.word	0x20001f30

0800fc1c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1e:	0004      	movs	r4, r0
 800fc20:	000e      	movs	r6, r1
 800fc22:	0015      	movs	r5, r2
 800fc24:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800fc26:	2800      	cmp	r0, #0
 800fc28:	d101      	bne.n	800fc2e <xTaskGenericNotify+0x12>
 800fc2a:	b672      	cpsid	i
 800fc2c:	e7fe      	b.n	800fc2c <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800fc2e:	f000 fa8f 	bl	8010150 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fc32:	2f00      	cmp	r7, #0
 800fc34:	d001      	beq.n	800fc3a <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fc36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fc38:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800fc3a:	225c      	movs	r2, #92	; 0x5c
 800fc3c:	5ca3      	ldrb	r3, [r4, r2]
 800fc3e:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800fc40:	2102      	movs	r1, #2
 800fc42:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800fc44:	2d02      	cmp	r5, #2
 800fc46:	d015      	beq.n	800fc74 <xTaskGenericNotify+0x58>
 800fc48:	d907      	bls.n	800fc5a <xTaskGenericNotify+0x3e>
 800fc4a:	2d03      	cmp	r5, #3
 800fc4c:	d016      	beq.n	800fc7c <xTaskGenericNotify+0x60>
 800fc4e:	2d04      	cmp	r5, #4
 800fc50:	d105      	bne.n	800fc5e <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d035      	beq.n	800fcc2 <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fc56:	65a6      	str	r6, [r4, #88]	; 0x58
 800fc58:	e001      	b.n	800fc5e <xTaskGenericNotify+0x42>
			switch( eAction )
 800fc5a:	2d01      	cmp	r5, #1
 800fc5c:	d006      	beq.n	800fc6c <xTaskGenericNotify+0x50>
 800fc5e:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d00d      	beq.n	800fc80 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fc64:	f000 fa80 	bl	8010168 <vPortExitCritical>

		return xReturn;
	}
 800fc68:	0028      	movs	r0, r5
 800fc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800fc6c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fc6e:	4316      	orrs	r6, r2
 800fc70:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800fc72:	e7f4      	b.n	800fc5e <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800fc74:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fc76:	3201      	adds	r2, #1
 800fc78:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800fc7a:	e7f0      	b.n	800fc5e <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800fc7c:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800fc7e:	e7ee      	b.n	800fc5e <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fc80:	1d25      	adds	r5, r4, #4
 800fc82:	0028      	movs	r0, r5
 800fc84:	f7fe fd37 	bl	800e6f6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fc88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fc8a:	4a0f      	ldr	r2, [pc, #60]	; (800fcc8 <xTaskGenericNotify+0xac>)
 800fc8c:	6812      	ldr	r2, [r2, #0]
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d901      	bls.n	800fc96 <xTaskGenericNotify+0x7a>
 800fc92:	4a0d      	ldr	r2, [pc, #52]	; (800fcc8 <xTaskGenericNotify+0xac>)
 800fc94:	6013      	str	r3, [r2, #0]
 800fc96:	2014      	movs	r0, #20
 800fc98:	4358      	muls	r0, r3
 800fc9a:	4b0c      	ldr	r3, [pc, #48]	; (800fccc <xTaskGenericNotify+0xb0>)
 800fc9c:	18c0      	adds	r0, r0, r3
 800fc9e:	0029      	movs	r1, r5
 800fca0:	f7fe fd06 	bl	800e6b0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fca4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d001      	beq.n	800fcae <xTaskGenericNotify+0x92>
 800fcaa:	b672      	cpsid	i
 800fcac:	e7fe      	b.n	800fcac <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fcae:	4b08      	ldr	r3, [pc, #32]	; (800fcd0 <xTaskGenericNotify+0xb4>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb6:	2501      	movs	r5, #1
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d9d3      	bls.n	800fc64 <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800fcbc:	f000 fa3c 	bl	8010138 <vPortYield>
 800fcc0:	e7d0      	b.n	800fc64 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800fcc2:	2500      	movs	r5, #0
 800fcc4:	e7ce      	b.n	800fc64 <xTaskGenericNotify+0x48>
 800fcc6:	46c0      	nop			; (mov r8, r8)
 800fcc8:	20001ee8 	.word	0x20001ee8
 800fccc:	20001e44 	.word	0x20001e44
 800fcd0:	20001e38 	.word	0x20001e38

0800fcd4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fcd4:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fcd6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fcd8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fcda:	4291      	cmp	r1, r2
 800fcdc:	d80b      	bhi.n	800fcf6 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fcde:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fce0:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fce2:	6983      	ldr	r3, [r0, #24]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d211      	bcs.n	800fd0c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fce8:	1d01      	adds	r1, r0, #4
 800fcea:	4b09      	ldr	r3, [pc, #36]	; (800fd10 <prvInsertTimerInActiveList+0x3c>)
 800fcec:	6818      	ldr	r0, [r3, #0]
 800fcee:	f7fe fceb 	bl	800e6c8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fcf2:	2400      	movs	r4, #0
 800fcf4:	e00a      	b.n	800fd0c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d202      	bcs.n	800fd00 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fcfa:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fcfc:	4299      	cmp	r1, r3
 800fcfe:	d205      	bcs.n	800fd0c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd00:	1d01      	adds	r1, r0, #4
 800fd02:	4b04      	ldr	r3, [pc, #16]	; (800fd14 <prvInsertTimerInActiveList+0x40>)
 800fd04:	6818      	ldr	r0, [r3, #0]
 800fd06:	f7fe fcdf 	bl	800e6c8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fd0a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800fd0c:	0020      	movs	r0, r4
 800fd0e:	bd10      	pop	{r4, pc}
 800fd10:	20001f64 	.word	0x20001f64
 800fd14:	20001f60 	.word	0x20001f60

0800fd18 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fd18:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fd1a:	f000 fa19 	bl	8010150 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fd1e:	4b11      	ldr	r3, [pc, #68]	; (800fd64 <prvCheckForValidListAndQueue+0x4c>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d002      	beq.n	800fd2c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fd26:	f000 fa1f 	bl	8010168 <vPortExitCritical>
}
 800fd2a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800fd2c:	4d0e      	ldr	r5, [pc, #56]	; (800fd68 <prvCheckForValidListAndQueue+0x50>)
 800fd2e:	0028      	movs	r0, r5
 800fd30:	f7fe fcb0 	bl	800e694 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fd34:	4c0d      	ldr	r4, [pc, #52]	; (800fd6c <prvCheckForValidListAndQueue+0x54>)
 800fd36:	0020      	movs	r0, r4
 800fd38:	f7fe fcac 	bl	800e694 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fd3c:	4b0c      	ldr	r3, [pc, #48]	; (800fd70 <prvCheckForValidListAndQueue+0x58>)
 800fd3e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fd40:	4b0c      	ldr	r3, [pc, #48]	; (800fd74 <prvCheckForValidListAndQueue+0x5c>)
 800fd42:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800fd44:	2200      	movs	r2, #0
 800fd46:	2110      	movs	r1, #16
 800fd48:	2004      	movs	r0, #4
 800fd4a:	f7fe fdae 	bl	800e8aa <xQueueGenericCreate>
 800fd4e:	4b05      	ldr	r3, [pc, #20]	; (800fd64 <prvCheckForValidListAndQueue+0x4c>)
 800fd50:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d101      	bne.n	800fd5a <prvCheckForValidListAndQueue+0x42>
 800fd56:	b672      	cpsid	i
 800fd58:	e7fe      	b.n	800fd58 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fd5a:	4907      	ldr	r1, [pc, #28]	; (800fd78 <prvCheckForValidListAndQueue+0x60>)
 800fd5c:	f7fe ffde 	bl	800ed1c <vQueueAddToRegistry>
 800fd60:	e7e1      	b.n	800fd26 <prvCheckForValidListAndQueue+0xe>
 800fd62:	46c0      	nop			; (mov r8, r8)
 800fd64:	20001f94 	.word	0x20001f94
 800fd68:	20001f68 	.word	0x20001f68
 800fd6c:	20001f7c 	.word	0x20001f7c
 800fd70:	20001f60 	.word	0x20001f60
 800fd74:	20001f64 	.word	0x20001f64
 800fd78:	0801ba68 	.word	0x0801ba68

0800fd7c <xTimerCreateTimerTask>:
{
 800fd7c:	b500      	push	{lr}
 800fd7e:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800fd80:	f7ff ffca 	bl	800fd18 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800fd84:	4b0a      	ldr	r3, [pc, #40]	; (800fdb0 <xTimerCreateTimerTask+0x34>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d00d      	beq.n	800fda8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	9303      	str	r3, [sp, #12]
 800fd90:	9302      	str	r3, [sp, #8]
 800fd92:	9301      	str	r3, [sp, #4]
 800fd94:	3303      	adds	r3, #3
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	2300      	movs	r3, #0
 800fd9a:	22a0      	movs	r2, #160	; 0xa0
 800fd9c:	4905      	ldr	r1, [pc, #20]	; (800fdb4 <xTimerCreateTimerTask+0x38>)
 800fd9e:	4806      	ldr	r0, [pc, #24]	; (800fdb8 <xTimerCreateTimerTask+0x3c>)
 800fda0:	f7ff f8a0 	bl	800eee4 <xTaskGenericCreate>
	configASSERT( xReturn );
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d101      	bne.n	800fdac <xTimerCreateTimerTask+0x30>
 800fda8:	b672      	cpsid	i
 800fdaa:	e7fe      	b.n	800fdaa <xTimerCreateTimerTask+0x2e>
}
 800fdac:	b005      	add	sp, #20
 800fdae:	bd00      	pop	{pc}
 800fdb0:	20001f94 	.word	0x20001f94
 800fdb4:	0801ba70 	.word	0x0801ba70
 800fdb8:	0800ff05 	.word	0x0800ff05

0800fdbc <xTimerCreate>:
{
 800fdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdbe:	46c6      	mov	lr, r8
 800fdc0:	b500      	push	{lr}
 800fdc2:	4680      	mov	r8, r0
 800fdc4:	000d      	movs	r5, r1
 800fdc6:	0017      	movs	r7, r2
 800fdc8:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800fdca:	2900      	cmp	r1, #0
 800fdcc:	d014      	beq.n	800fdf8 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800fdce:	202c      	movs	r0, #44	; 0x2c
 800fdd0:	f000 fa40 	bl	8010254 <pvPortMalloc>
 800fdd4:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800fdd6:	d00b      	beq.n	800fdf0 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800fdd8:	f7ff ff9e 	bl	800fd18 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800fddc:	4643      	mov	r3, r8
 800fdde:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fde0:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800fde2:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800fde4:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fde6:	9b06      	ldr	r3, [sp, #24]
 800fde8:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fdea:	1d20      	adds	r0, r4, #4
 800fdec:	f7fe fc5d 	bl	800e6aa <vListInitialiseItem>
}
 800fdf0:	0020      	movs	r0, r4
 800fdf2:	bc04      	pop	{r2}
 800fdf4:	4690      	mov	r8, r2
 800fdf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800fdf8:	b672      	cpsid	i
 800fdfa:	e7fe      	b.n	800fdfa <xTimerCreate+0x3e>

0800fdfc <xTimerGenericCommand>:
{
 800fdfc:	b530      	push	{r4, r5, lr}
 800fdfe:	b085      	sub	sp, #20
 800fe00:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800fe02:	4b13      	ldr	r3, [pc, #76]	; (800fe50 <xTimerGenericCommand+0x54>)
 800fe04:	681c      	ldr	r4, [r3, #0]
 800fe06:	2c00      	cmp	r4, #0
 800fe08:	d020      	beq.n	800fe4c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800fe0a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fe0c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fe0e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fe10:	2905      	cmp	r1, #5
 800fe12:	dc13      	bgt.n	800fe3c <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fe14:	f7ff fd5c 	bl	800f8d0 <xTaskGetSchedulerState>
 800fe18:	2802      	cmp	r0, #2
 800fe1a:	d007      	beq.n	800fe2c <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fe1c:	4b0c      	ldr	r3, [pc, #48]	; (800fe50 <xTimerGenericCommand+0x54>)
 800fe1e:	6818      	ldr	r0, [r3, #0]
 800fe20:	2300      	movs	r3, #0
 800fe22:	2200      	movs	r2, #0
 800fe24:	4669      	mov	r1, sp
 800fe26:	f7fe fd7b 	bl	800e920 <xQueueGenericSend>
 800fe2a:	e00d      	b.n	800fe48 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fe2c:	4b08      	ldr	r3, [pc, #32]	; (800fe50 <xTimerGenericCommand+0x54>)
 800fe2e:	6818      	ldr	r0, [r3, #0]
 800fe30:	2300      	movs	r3, #0
 800fe32:	9a08      	ldr	r2, [sp, #32]
 800fe34:	4669      	mov	r1, sp
 800fe36:	f7fe fd73 	bl	800e920 <xQueueGenericSend>
 800fe3a:	e005      	b.n	800fe48 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	002a      	movs	r2, r5
 800fe40:	4669      	mov	r1, sp
 800fe42:	0020      	movs	r0, r4
 800fe44:	f7fe fe03 	bl	800ea4e <xQueueGenericSendFromISR>
}
 800fe48:	b005      	add	sp, #20
 800fe4a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800fe4c:	2000      	movs	r0, #0
	return xReturn;
 800fe4e:	e7fb      	b.n	800fe48 <xTimerGenericCommand+0x4c>
 800fe50:	20001f94 	.word	0x20001f94

0800fe54 <prvSampleTimeNow>:
{
 800fe54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe56:	46d6      	mov	lr, sl
 800fe58:	464f      	mov	r7, r9
 800fe5a:	4646      	mov	r6, r8
 800fe5c:	b5c0      	push	{r6, r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800fe62:	f7ff f9cb 	bl	800f1fc <xTaskGetTickCount>
 800fe66:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800fe68:	4b23      	ldr	r3, [pc, #140]	; (800fef8 <prvSampleTimeNow+0xa4>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	4283      	cmp	r3, r0
 800fe6e:	d80b      	bhi.n	800fe88 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800fe70:	2300      	movs	r3, #0
 800fe72:	4642      	mov	r2, r8
 800fe74:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800fe76:	4b20      	ldr	r3, [pc, #128]	; (800fef8 <prvSampleTimeNow+0xa4>)
 800fe78:	601f      	str	r7, [r3, #0]
}
 800fe7a:	0038      	movs	r0, r7
 800fe7c:	b004      	add	sp, #16
 800fe7e:	bc1c      	pop	{r2, r3, r4}
 800fe80:	4690      	mov	r8, r2
 800fe82:	4699      	mov	r9, r3
 800fe84:	46a2      	mov	sl, r4
 800fe86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe88:	4e1c      	ldr	r6, [pc, #112]	; (800fefc <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe8e:	6833      	ldr	r3, [r6, #0]
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	2a00      	cmp	r2, #0
 800fe94:	d026      	beq.n	800fee4 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe9c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe9e:	1d25      	adds	r5, r4, #4
 800fea0:	0028      	movs	r0, r5
 800fea2:	f7fe fc28 	bl	800e6f6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fea6:	0020      	movs	r0, r4
 800fea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800feaa:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800feac:	69e3      	ldr	r3, [r4, #28]
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d1ed      	bne.n	800fe8e <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800feb2:	69a3      	ldr	r3, [r4, #24]
 800feb4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800feb6:	459a      	cmp	sl, r3
 800feb8:	d209      	bcs.n	800fece <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800feba:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800febc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800febe:	4b0f      	ldr	r3, [pc, #60]	; (800fefc <prvSampleTimeNow+0xa8>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	9303      	str	r3, [sp, #12]
 800fec4:	0029      	movs	r1, r5
 800fec6:	0018      	movs	r0, r3
 800fec8:	f7fe fbfe 	bl	800e6c8 <vListInsert>
 800fecc:	e7df      	b.n	800fe8e <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fece:	464b      	mov	r3, r9
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	4652      	mov	r2, sl
 800fed4:	4649      	mov	r1, r9
 800fed6:	0020      	movs	r0, r4
 800fed8:	f7ff ff90 	bl	800fdfc <xTimerGenericCommand>
				configASSERT( xResult );
 800fedc:	2800      	cmp	r0, #0
 800fede:	d1d6      	bne.n	800fe8e <prvSampleTimeNow+0x3a>
 800fee0:	b672      	cpsid	i
 800fee2:	e7fe      	b.n	800fee2 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800fee4:	4a06      	ldr	r2, [pc, #24]	; (800ff00 <prvSampleTimeNow+0xac>)
 800fee6:	4905      	ldr	r1, [pc, #20]	; (800fefc <prvSampleTimeNow+0xa8>)
 800fee8:	6810      	ldr	r0, [r2, #0]
 800feea:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800feec:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800feee:	2301      	movs	r3, #1
 800fef0:	4642      	mov	r2, r8
 800fef2:	6013      	str	r3, [r2, #0]
 800fef4:	e7bf      	b.n	800fe76 <prvSampleTimeNow+0x22>
 800fef6:	46c0      	nop			; (mov r8, r8)
 800fef8:	20001f90 	.word	0x20001f90
 800fefc:	20001f60 	.word	0x20001f60
 800ff00:	20001f64 	.word	0x20001f64

0800ff04 <prvTimerTask>:
{
 800ff04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff06:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 800ff08:	4e57      	ldr	r6, [pc, #348]	; (8010068 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ff0a:	4b58      	ldr	r3, [pc, #352]	; (801006c <prvTimerTask+0x168>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	2a00      	cmp	r2, #0
 800ff12:	d100      	bne.n	800ff16 <prvTimerTask+0x12>
 800ff14:	e09c      	b.n	8010050 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff16:	68db      	ldr	r3, [r3, #12]
 800ff18:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800ff1a:	f7ff f967 	bl	800f1ec <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff1e:	a808      	add	r0, sp, #32
 800ff20:	f7ff ff98 	bl	800fe54 <prvSampleTimeNow>
 800ff24:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800ff26:	9b08      	ldr	r3, [sp, #32]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d000      	beq.n	800ff2e <prvTimerTask+0x2a>
 800ff2c:	e099      	b.n	8010062 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ff2e:	42a0      	cmp	r0, r4
 800ff30:	d233      	bcs.n	800ff9a <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800ff32:	1b61      	subs	r1, r4, r5
 800ff34:	4b4e      	ldr	r3, [pc, #312]	; (8010070 <prvTimerTask+0x16c>)
 800ff36:	6818      	ldr	r0, [r3, #0]
 800ff38:	f7fe ff08 	bl	800ed4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ff3c:	f7ff f9f6 	bl	800f32c <xTaskResumeAll>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d050      	beq.n	800ffe6 <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff44:	4c4a      	ldr	r4, [pc, #296]	; (8010070 <prvTimerTask+0x16c>)
 800ff46:	2300      	movs	r3, #0
 800ff48:	2200      	movs	r2, #0
 800ff4a:	a908      	add	r1, sp, #32
 800ff4c:	6820      	ldr	r0, [r4, #0]
 800ff4e:	f7fe fe00 	bl	800eb52 <xQueueGenericReceive>
 800ff52:	2800      	cmp	r0, #0
 800ff54:	d0d9      	beq.n	800ff0a <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ff56:	9b08      	ldr	r3, [sp, #32]
 800ff58:	9303      	str	r3, [sp, #12]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	da0c      	bge.n	800ff78 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ff5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff60:	9303      	str	r3, [sp, #12]
 800ff62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff64:	9304      	str	r3, [sp, #16]
 800ff66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff68:	9305      	str	r3, [sp, #20]
 800ff6a:	9903      	ldr	r1, [sp, #12]
 800ff6c:	9804      	ldr	r0, [sp, #16]
 800ff6e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ff70:	9b08      	ldr	r3, [sp, #32]
 800ff72:	9303      	str	r3, [sp, #12]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	dbe6      	blt.n	800ff46 <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ff78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800ff7a:	696b      	ldr	r3, [r5, #20]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d002      	beq.n	800ff86 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff80:	1d28      	adds	r0, r5, #4
 800ff82:	f7fe fbb8 	bl	800e6f6 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff86:	a807      	add	r0, sp, #28
 800ff88:	f7ff ff64 	bl	800fe54 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800ff8c:	9b08      	ldr	r3, [sp, #32]
 800ff8e:	9303      	str	r3, [sp, #12]
 800ff90:	2b09      	cmp	r3, #9
 800ff92:	d8d8      	bhi.n	800ff46 <prvTimerTask+0x42>
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	58f3      	ldr	r3, [r6, r3]
 800ff98:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800ff9a:	f7ff f9c7 	bl	800f32c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff9e:	4b33      	ldr	r3, [pc, #204]	; (801006c <prvTimerTask+0x168>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ffa6:	1d38      	adds	r0, r7, #4
 800ffa8:	f7fe fba5 	bl	800e6f6 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d003      	beq.n	800ffba <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb4:	0038      	movs	r0, r7
 800ffb6:	4798      	blx	r3
 800ffb8:	e7c4      	b.n	800ff44 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800ffba:	69bb      	ldr	r3, [r7, #24]
 800ffbc:	18e1      	adds	r1, r4, r3
 800ffbe:	0023      	movs	r3, r4
 800ffc0:	002a      	movs	r2, r5
 800ffc2:	0038      	movs	r0, r7
 800ffc4:	f7ff fe86 	bl	800fcd4 <prvInsertTimerInActiveList>
 800ffc8:	2801      	cmp	r0, #1
 800ffca:	d1f2      	bne.n	800ffb2 <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ffcc:	2100      	movs	r1, #0
 800ffce:	9100      	str	r1, [sp, #0]
 800ffd0:	000b      	movs	r3, r1
 800ffd2:	0022      	movs	r2, r4
 800ffd4:	0038      	movs	r0, r7
 800ffd6:	f7ff ff11 	bl	800fdfc <xTimerGenericCommand>
			configASSERT( xResult );
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	d1e9      	bne.n	800ffb2 <prvTimerTask+0xae>
 800ffde:	b672      	cpsid	i
 800ffe0:	e7fe      	b.n	800ffe0 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 800ffe2:	2400      	movs	r4, #0
 800ffe4:	e7a5      	b.n	800ff32 <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 800ffe6:	f000 f8a7 	bl	8010138 <vPortYield>
 800ffea:	e7ab      	b.n	800ff44 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800ffec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffee:	69aa      	ldr	r2, [r5, #24]
 800fff0:	4694      	mov	ip, r2
 800fff2:	4463      	add	r3, ip
 800fff4:	0019      	movs	r1, r3
 800fff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fff8:	0002      	movs	r2, r0
 800fffa:	0028      	movs	r0, r5
 800fffc:	f7ff fe6a 	bl	800fcd4 <prvInsertTimerInActiveList>
 8010000:	2801      	cmp	r0, #1
 8010002:	d1a0      	bne.n	800ff46 <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010004:	0028      	movs	r0, r5
 8010006:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010008:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801000a:	69eb      	ldr	r3, [r5, #28]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d19a      	bne.n	800ff46 <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010012:	69a9      	ldr	r1, [r5, #24]
 8010014:	468c      	mov	ip, r1
 8010016:	4463      	add	r3, ip
 8010018:	001a      	movs	r2, r3
 801001a:	2300      	movs	r3, #0
 801001c:	9300      	str	r3, [sp, #0]
 801001e:	2100      	movs	r1, #0
 8010020:	0028      	movs	r0, r5
 8010022:	f7ff feeb 	bl	800fdfc <xTimerGenericCommand>
							configASSERT( xResult );
 8010026:	2800      	cmp	r0, #0
 8010028:	d18d      	bne.n	800ff46 <prvTimerTask+0x42>
 801002a:	b672      	cpsid	i
 801002c:	e7fe      	b.n	801002c <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801002e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010030:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010032:	2900      	cmp	r1, #0
 8010034:	d006      	beq.n	8010044 <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010036:	1841      	adds	r1, r0, r1
 8010038:	0003      	movs	r3, r0
 801003a:	0002      	movs	r2, r0
 801003c:	0028      	movs	r0, r5
 801003e:	f7ff fe49 	bl	800fcd4 <prvInsertTimerInActiveList>
 8010042:	e780      	b.n	800ff46 <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010044:	b672      	cpsid	i
 8010046:	e7fe      	b.n	8010046 <prvTimerTask+0x142>
					vPortFree( pxTimer );
 8010048:	0028      	movs	r0, r5
 801004a:	f000 f999 	bl	8010380 <vPortFree>
 801004e:	e77a      	b.n	800ff46 <prvTimerTask+0x42>
	vTaskSuspendAll();
 8010050:	f7ff f8cc 	bl	800f1ec <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010054:	a808      	add	r0, sp, #32
 8010056:	f7ff fefd 	bl	800fe54 <prvSampleTimeNow>
 801005a:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 801005c:	9b08      	ldr	r3, [sp, #32]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d0bf      	beq.n	800ffe2 <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 8010062:	f7ff f963 	bl	800f32c <xTaskResumeAll>
 8010066:	e76d      	b.n	800ff44 <prvTimerTask+0x40>
 8010068:	0801ba40 	.word	0x0801ba40
 801006c:	20001f60 	.word	0x20001f60
 8010070:	20001f94 	.word	0x20001f94

08010074 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010074:	b510      	push	{r4, lr}
 8010076:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8010078:	d101      	bne.n	801007e <pvTimerGetTimerID+0xa>
 801007a:	b672      	cpsid	i
 801007c:	e7fe      	b.n	801007c <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 801007e:	f000 f867 	bl	8010150 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010082:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8010084:	f000 f870 	bl	8010168 <vPortExitCritical>

	return pvReturn;
}
 8010088:	0020      	movs	r0, r4
 801008a:	bd10      	pop	{r4, pc}

0801008c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801008c:	4b03      	ldr	r3, [pc, #12]	; (801009c <prvTaskExitError+0x10>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	3301      	adds	r3, #1
 8010092:	d001      	beq.n	8010098 <prvTaskExitError+0xc>
 8010094:	b672      	cpsid	i
 8010096:	e7fe      	b.n	8010096 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8010098:	b672      	cpsid	i
 801009a:	e7fe      	b.n	801009a <prvTaskExitError+0xe>
 801009c:	200000a4 	.word	0x200000a4

080100a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80100a0:	4a06      	ldr	r2, [pc, #24]	; (80100bc <pxCurrentTCBConst2>)
 80100a2:	6813      	ldr	r3, [r2, #0]
 80100a4:	6818      	ldr	r0, [r3, #0]
 80100a6:	3020      	adds	r0, #32
 80100a8:	f380 8809 	msr	PSP, r0
 80100ac:	2002      	movs	r0, #2
 80100ae:	f380 8814 	msr	CONTROL, r0
 80100b2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80100b4:	46ae      	mov	lr, r5
 80100b6:	b662      	cpsie	i
 80100b8:	bd00      	pop	{pc}
 80100ba:	46c0      	nop			; (mov r8, r8)

080100bc <pxCurrentTCBConst2>:
 80100bc:	20001e38 	.word	0x20001e38

080100c0 <pxPortInitialiseStack>:
{
 80100c0:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80100c2:	1f03      	subs	r3, r0, #4
 80100c4:	2480      	movs	r4, #128	; 0x80
 80100c6:	0464      	lsls	r4, r4, #17
 80100c8:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80100ca:	3b04      	subs	r3, #4
 80100cc:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80100ce:	3b04      	subs	r3, #4
 80100d0:	4902      	ldr	r1, [pc, #8]	; (80100dc <pxPortInitialiseStack+0x1c>)
 80100d2:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80100d4:	3b14      	subs	r3, #20
 80100d6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80100d8:	3840      	subs	r0, #64	; 0x40
}
 80100da:	bd10      	pop	{r4, pc}
 80100dc:	0801008d 	.word	0x0801008d

080100e0 <SVC_Handler>:
}
 80100e0:	4770      	bx	lr
	...

080100e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80100e4:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80100e6:	4b0f      	ldr	r3, [pc, #60]	; (8010124 <xPortStartScheduler+0x40>)
 80100e8:	6819      	ldr	r1, [r3, #0]
 80100ea:	22ff      	movs	r2, #255	; 0xff
 80100ec:	0412      	lsls	r2, r2, #16
 80100ee:	430a      	orrs	r2, r1
 80100f0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80100f2:	6819      	ldr	r1, [r3, #0]
 80100f4:	22ff      	movs	r2, #255	; 0xff
 80100f6:	0612      	lsls	r2, r2, #24
 80100f8:	430a      	orrs	r2, r1
 80100fa:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80100fc:	4b0a      	ldr	r3, [pc, #40]	; (8010128 <xPortStartScheduler+0x44>)
 80100fe:	6818      	ldr	r0, [r3, #0]
 8010100:	21fa      	movs	r1, #250	; 0xfa
 8010102:	0089      	lsls	r1, r1, #2
 8010104:	f7f0 f824 	bl	8000150 <__udivsi3>
 8010108:	3801      	subs	r0, #1
 801010a:	4b08      	ldr	r3, [pc, #32]	; (801012c <xPortStartScheduler+0x48>)
 801010c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801010e:	4b08      	ldr	r3, [pc, #32]	; (8010130 <xPortStartScheduler+0x4c>)
 8010110:	2207      	movs	r2, #7
 8010112:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8010114:	4b07      	ldr	r3, [pc, #28]	; (8010134 <xPortStartScheduler+0x50>)
 8010116:	2200      	movs	r2, #0
 8010118:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 801011a:	f7ff ffc1 	bl	80100a0 <vPortStartFirstTask>
	prvTaskExitError();
 801011e:	f7ff ffb5 	bl	801008c <prvTaskExitError>
 8010122:	46c0      	nop			; (mov r8, r8)
 8010124:	e000ed20 	.word	0xe000ed20
 8010128:	20000090 	.word	0x20000090
 801012c:	e000e014 	.word	0xe000e014
 8010130:	e000e010 	.word	0xe000e010
 8010134:	200000a4 	.word	0x200000a4

08010138 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010138:	4b04      	ldr	r3, [pc, #16]	; (801014c <vPortYield+0x14>)
 801013a:	2280      	movs	r2, #128	; 0x80
 801013c:	0552      	lsls	r2, r2, #21
 801013e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010140:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010144:	f3bf 8f6f 	isb	sy
}
 8010148:	4770      	bx	lr
 801014a:	46c0      	nop			; (mov r8, r8)
 801014c:	e000ed04 	.word	0xe000ed04

08010150 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010150:	b672      	cpsid	i
    uxCriticalNesting++;
 8010152:	4a04      	ldr	r2, [pc, #16]	; (8010164 <vPortEnterCritical+0x14>)
 8010154:	6813      	ldr	r3, [r2, #0]
 8010156:	3301      	adds	r3, #1
 8010158:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 801015a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801015e:	f3bf 8f6f 	isb	sy
}
 8010162:	4770      	bx	lr
 8010164:	200000a4 	.word	0x200000a4

08010168 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010168:	4b06      	ldr	r3, [pc, #24]	; (8010184 <vPortExitCritical+0x1c>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d101      	bne.n	8010174 <vPortExitCritical+0xc>
 8010170:	b672      	cpsid	i
 8010172:	e7fe      	b.n	8010172 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8010174:	3b01      	subs	r3, #1
 8010176:	4a03      	ldr	r2, [pc, #12]	; (8010184 <vPortExitCritical+0x1c>)
 8010178:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 801017a:	2b00      	cmp	r3, #0
 801017c:	d100      	bne.n	8010180 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 801017e:	b662      	cpsie	i
}
 8010180:	4770      	bx	lr
 8010182:	46c0      	nop			; (mov r8, r8)
 8010184:	200000a4 	.word	0x200000a4

08010188 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8010188:	f3ef 8010 	mrs	r0, PRIMASK
 801018c:	b672      	cpsid	i
 801018e:	4770      	bx	lr
}
 8010190:	2000      	movs	r0, #0

08010192 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8010192:	f380 8810 	msr	PRIMASK, r0
 8010196:	4770      	bx	lr

08010198 <PendSV_Handler>:
	__asm volatile
 8010198:	f3ef 8009 	mrs	r0, PSP
 801019c:	4b0e      	ldr	r3, [pc, #56]	; (80101d8 <pxCurrentTCBConst>)
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	3820      	subs	r0, #32
 80101a2:	6010      	str	r0, [r2, #0]
 80101a4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80101a6:	4644      	mov	r4, r8
 80101a8:	464d      	mov	r5, r9
 80101aa:	4656      	mov	r6, sl
 80101ac:	465f      	mov	r7, fp
 80101ae:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80101b0:	b508      	push	{r3, lr}
 80101b2:	b672      	cpsid	i
 80101b4:	f7ff f9d6 	bl	800f564 <vTaskSwitchContext>
 80101b8:	b662      	cpsie	i
 80101ba:	bc0c      	pop	{r2, r3}
 80101bc:	6811      	ldr	r1, [r2, #0]
 80101be:	6808      	ldr	r0, [r1, #0]
 80101c0:	3010      	adds	r0, #16
 80101c2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80101c4:	46a0      	mov	r8, r4
 80101c6:	46a9      	mov	r9, r5
 80101c8:	46b2      	mov	sl, r6
 80101ca:	46bb      	mov	fp, r7
 80101cc:	f380 8809 	msr	PSP, r0
 80101d0:	3820      	subs	r0, #32
 80101d2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80101d4:	4718      	bx	r3
 80101d6:	46c0      	nop			; (mov r8, r8)

080101d8 <pxCurrentTCBConst>:
 80101d8:	20001e38 	.word	0x20001e38

080101dc <xPortSysTickHandler>:
{
 80101dc:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80101de:	f7ff ffd3 	bl	8010188 <ulSetInterruptMaskFromISR>
 80101e2:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 80101e4:	f7ff f816 	bl	800f214 <xTaskIncrementTick>
 80101e8:	2800      	cmp	r0, #0
 80101ea:	d003      	beq.n	80101f4 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80101ec:	4b03      	ldr	r3, [pc, #12]	; (80101fc <xPortSysTickHandler+0x20>)
 80101ee:	2280      	movs	r2, #128	; 0x80
 80101f0:	0552      	lsls	r2, r2, #21
 80101f2:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80101f4:	0020      	movs	r0, r4
 80101f6:	f7ff ffcc 	bl	8010192 <vClearInterruptMaskFromISR>
}
 80101fa:	bd10      	pop	{r4, pc}
 80101fc:	e000ed04 	.word	0xe000ed04

08010200 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010200:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010202:	4b12      	ldr	r3, [pc, #72]	; (801024c <prvInsertBlockIntoFreeList+0x4c>)
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	4282      	cmp	r2, r0
 8010208:	d319      	bcc.n	801023e <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801020a:	685c      	ldr	r4, [r3, #4]
 801020c:	1919      	adds	r1, r3, r4
 801020e:	4288      	cmp	r0, r1
 8010210:	d103      	bne.n	801021a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010212:	6841      	ldr	r1, [r0, #4]
 8010214:	1909      	adds	r1, r1, r4
 8010216:	6059      	str	r1, [r3, #4]
 8010218:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801021a:	6841      	ldr	r1, [r0, #4]
 801021c:	1844      	adds	r4, r0, r1
 801021e:	42a2      	cmp	r2, r4
 8010220:	d111      	bne.n	8010246 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010222:	4c0b      	ldr	r4, [pc, #44]	; (8010250 <prvInsertBlockIntoFreeList+0x50>)
 8010224:	6824      	ldr	r4, [r4, #0]
 8010226:	42a2      	cmp	r2, r4
 8010228:	d00b      	beq.n	8010242 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801022a:	6852      	ldr	r2, [r2, #4]
 801022c:	1852      	adds	r2, r2, r1
 801022e:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	6812      	ldr	r2, [r2, #0]
 8010234:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010236:	4298      	cmp	r0, r3
 8010238:	d000      	beq.n	801023c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801023a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801023c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801023e:	0013      	movs	r3, r2
 8010240:	e7e0      	b.n	8010204 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010242:	6002      	str	r2, [r0, #0]
 8010244:	e7f7      	b.n	8010236 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010246:	6002      	str	r2, [r0, #0]
 8010248:	e7f5      	b.n	8010236 <prvInsertBlockIntoFreeList+0x36>
 801024a:	46c0      	nop			; (mov r8, r8)
 801024c:	200069e0 	.word	0x200069e0
 8010250:	20001f98 	.word	0x20001f98

08010254 <pvPortMalloc>:
{
 8010254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010256:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010258:	f7fe ffc8 	bl	800f1ec <vTaskSuspendAll>
		if( pxEnd == NULL )
 801025c:	4b41      	ldr	r3, [pc, #260]	; (8010364 <pvPortMalloc+0x110>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d00a      	beq.n	801027a <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010264:	4b40      	ldr	r3, [pc, #256]	; (8010368 <pvPortMalloc+0x114>)
 8010266:	681f      	ldr	r7, [r3, #0]
 8010268:	423c      	tst	r4, r7
 801026a:	d02a      	beq.n	80102c2 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 801026c:	f7ff f85e 	bl	800f32c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8010270:	f7fd fa88 	bl	800d784 <vApplicationMallocFailedHook>
 8010274:	2500      	movs	r5, #0
}
 8010276:	0028      	movs	r0, r5
 8010278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 801027a:	4a3c      	ldr	r2, [pc, #240]	; (801036c <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801027c:	0753      	lsls	r3, r2, #29
 801027e:	d01e      	beq.n	80102be <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8010280:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010282:	2307      	movs	r3, #7
 8010284:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8010286:	4b3a      	ldr	r3, [pc, #232]	; (8010370 <pvPortMalloc+0x11c>)
 8010288:	18d3      	adds	r3, r2, r3
 801028a:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 801028c:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801028e:	4839      	ldr	r0, [pc, #228]	; (8010374 <pvPortMalloc+0x120>)
 8010290:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010292:	2100      	movs	r1, #0
 8010294:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010296:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 8010298:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 801029a:	2007      	movs	r0, #7
 801029c:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 801029e:	4831      	ldr	r0, [pc, #196]	; (8010364 <pvPortMalloc+0x110>)
 80102a0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80102a2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80102a4:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80102a6:	1a99      	subs	r1, r3, r2
 80102a8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80102aa:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102ac:	4b32      	ldr	r3, [pc, #200]	; (8010378 <pvPortMalloc+0x124>)
 80102ae:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102b0:	4b32      	ldr	r3, [pc, #200]	; (801037c <pvPortMalloc+0x128>)
 80102b2:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80102b4:	4b2c      	ldr	r3, [pc, #176]	; (8010368 <pvPortMalloc+0x114>)
 80102b6:	2280      	movs	r2, #128	; 0x80
 80102b8:	0612      	lsls	r2, r2, #24
 80102ba:	601a      	str	r2, [r3, #0]
 80102bc:	e7d2      	b.n	8010264 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80102be:	4b2c      	ldr	r3, [pc, #176]	; (8010370 <pvPortMalloc+0x11c>)
 80102c0:	e7e5      	b.n	801028e <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 80102c2:	2c00      	cmp	r4, #0
 80102c4:	d008      	beq.n	80102d8 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 80102c6:	0023      	movs	r3, r4
 80102c8:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80102ca:	075a      	lsls	r2, r3, #29
 80102cc:	d002      	beq.n	80102d4 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80102ce:	2207      	movs	r2, #7
 80102d0:	4393      	bics	r3, r2
 80102d2:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d102      	bne.n	80102de <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 80102d8:	f7ff f828 	bl	800f32c <xTaskResumeAll>
 80102dc:	e7c8      	b.n	8010270 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80102de:	4a27      	ldr	r2, [pc, #156]	; (801037c <pvPortMalloc+0x128>)
 80102e0:	6816      	ldr	r6, [r2, #0]
 80102e2:	429e      	cmp	r6, r3
 80102e4:	d302      	bcc.n	80102ec <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 80102e6:	4a23      	ldr	r2, [pc, #140]	; (8010374 <pvPortMalloc+0x120>)
 80102e8:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102ea:	e004      	b.n	80102f6 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 80102ec:	f7ff f81e 	bl	800f32c <xTaskResumeAll>
 80102f0:	e7be      	b.n	8010270 <pvPortMalloc+0x1c>
 80102f2:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80102f4:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102f6:	6861      	ldr	r1, [r4, #4]
 80102f8:	4299      	cmp	r1, r3
 80102fa:	d202      	bcs.n	8010302 <pvPortMalloc+0xae>
 80102fc:	6821      	ldr	r1, [r4, #0]
 80102fe:	2900      	cmp	r1, #0
 8010300:	d1f7      	bne.n	80102f2 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 8010302:	4918      	ldr	r1, [pc, #96]	; (8010364 <pvPortMalloc+0x110>)
 8010304:	6809      	ldr	r1, [r1, #0]
 8010306:	42a1      	cmp	r1, r4
 8010308:	d00b      	beq.n	8010322 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801030a:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801030c:	6821      	ldr	r1, [r4, #0]
 801030e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010310:	6862      	ldr	r2, [r4, #4]
 8010312:	1ad2      	subs	r2, r2, r3
 8010314:	2a10      	cmp	r2, #16
 8010316:	d90b      	bls.n	8010330 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010318:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801031a:	0741      	lsls	r1, r0, #29
 801031c:	d004      	beq.n	8010328 <pvPortMalloc+0xd4>
 801031e:	b672      	cpsid	i
 8010320:	e7fe      	b.n	8010320 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 8010322:	f7ff f803 	bl	800f32c <xTaskResumeAll>
 8010326:	e7a3      	b.n	8010270 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010328:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801032a:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 801032c:	f7ff ff68 	bl	8010200 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010330:	6862      	ldr	r2, [r4, #4]
 8010332:	1ab6      	subs	r6, r6, r2
 8010334:	4911      	ldr	r1, [pc, #68]	; (801037c <pvPortMalloc+0x128>)
 8010336:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010338:	490f      	ldr	r1, [pc, #60]	; (8010378 <pvPortMalloc+0x124>)
 801033a:	6809      	ldr	r1, [r1, #0]
 801033c:	428e      	cmp	r6, r1
 801033e:	d201      	bcs.n	8010344 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010340:	490d      	ldr	r1, [pc, #52]	; (8010378 <pvPortMalloc+0x124>)
 8010342:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010344:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010346:	4317      	orrs	r7, r2
 8010348:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801034a:	2300      	movs	r3, #0
 801034c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 801034e:	f7fe ffed 	bl	800f32c <xTaskResumeAll>
		if( pvReturn == NULL )
 8010352:	2d00      	cmp	r5, #0
 8010354:	d100      	bne.n	8010358 <pvPortMalloc+0x104>
 8010356:	e78b      	b.n	8010270 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010358:	076b      	lsls	r3, r5, #29
 801035a:	d100      	bne.n	801035e <pvPortMalloc+0x10a>
 801035c:	e78b      	b.n	8010276 <pvPortMalloc+0x22>
 801035e:	b672      	cpsid	i
 8010360:	e7fe      	b.n	8010360 <pvPortMalloc+0x10c>
 8010362:	46c0      	nop			; (mov r8, r8)
 8010364:	20001f98 	.word	0x20001f98
 8010368:	200069d4 	.word	0x200069d4
 801036c:	20001f9c 	.word	0x20001f9c
 8010370:	00004a38 	.word	0x00004a38
 8010374:	200069e0 	.word	0x200069e0
 8010378:	200069dc 	.word	0x200069dc
 801037c:	200069d8 	.word	0x200069d8

08010380 <vPortFree>:
{
 8010380:	b510      	push	{r4, lr}
	if( pv != NULL )
 8010382:	2800      	cmp	r0, #0
 8010384:	d020      	beq.n	80103c8 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010386:	0003      	movs	r3, r0
 8010388:	3b08      	subs	r3, #8
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	4a0f      	ldr	r2, [pc, #60]	; (80103cc <vPortFree+0x4c>)
 801038e:	6812      	ldr	r2, [r2, #0]
 8010390:	421a      	tst	r2, r3
 8010392:	d101      	bne.n	8010398 <vPortFree+0x18>
 8010394:	b672      	cpsid	i
 8010396:	e7fe      	b.n	8010396 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010398:	0001      	movs	r1, r0
 801039a:	3908      	subs	r1, #8
 801039c:	6809      	ldr	r1, [r1, #0]
 801039e:	2900      	cmp	r1, #0
 80103a0:	d001      	beq.n	80103a6 <vPortFree+0x26>
 80103a2:	b672      	cpsid	i
 80103a4:	e7fe      	b.n	80103a4 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80103a6:	3808      	subs	r0, #8
 80103a8:	0004      	movs	r4, r0
 80103aa:	4393      	bics	r3, r2
 80103ac:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80103ae:	f7fe ff1d 	bl	800f1ec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80103b2:	4a07      	ldr	r2, [pc, #28]	; (80103d0 <vPortFree+0x50>)
 80103b4:	6863      	ldr	r3, [r4, #4]
 80103b6:	6811      	ldr	r1, [r2, #0]
 80103b8:	468c      	mov	ip, r1
 80103ba:	4463      	add	r3, ip
 80103bc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80103be:	0020      	movs	r0, r4
 80103c0:	f7ff ff1e 	bl	8010200 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80103c4:	f7fe ffb2 	bl	800f32c <xTaskResumeAll>
}
 80103c8:	bd10      	pop	{r4, pc}
 80103ca:	46c0      	nop			; (mov r8, r8)
 80103cc:	200069d4 	.word	0x200069d4
 80103d0:	200069d8 	.word	0x200069d8

080103d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80103d4:	b510      	push	{r4, lr}
 80103d6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80103d8:	f002 f8f8 	bl	80125cc <HAL_RCC_GetHCLKFreq>
 80103dc:	21fa      	movs	r1, #250	; 0xfa
 80103de:	0089      	lsls	r1, r1, #2
 80103e0:	f7ef feb6 	bl	8000150 <__udivsi3>
 80103e4:	f000 fb9a 	bl	8010b1c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80103e8:	2001      	movs	r0, #1
 80103ea:	2200      	movs	r2, #0
 80103ec:	0021      	movs	r1, r4
 80103ee:	4240      	negs	r0, r0
 80103f0:	f000 fb4c 	bl	8010a8c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80103f4:	2000      	movs	r0, #0
 80103f6:	bd10      	pop	{r4, pc}

080103f8 <HAL_Init>:
{
 80103f8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80103fa:	4a06      	ldr	r2, [pc, #24]	; (8010414 <HAL_Init+0x1c>)
 80103fc:	6813      	ldr	r3, [r2, #0]
 80103fe:	2110      	movs	r1, #16
 8010400:	430b      	orrs	r3, r1
 8010402:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010404:	2000      	movs	r0, #0
 8010406:	f7ff ffe5 	bl	80103d4 <HAL_InitTick>
  HAL_MspInit();
 801040a:	f001 fc87 	bl	8011d1c <HAL_MspInit>
}
 801040e:	2000      	movs	r0, #0
 8010410:	bd10      	pop	{r4, pc}
 8010412:	46c0      	nop			; (mov r8, r8)
 8010414:	40022000 	.word	0x40022000

08010418 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010418:	4a02      	ldr	r2, [pc, #8]	; (8010424 <HAL_IncTick+0xc>)
 801041a:	6813      	ldr	r3, [r2, #0]
 801041c:	3301      	adds	r3, #1
 801041e:	6013      	str	r3, [r2, #0]
}
 8010420:	4770      	bx	lr
 8010422:	46c0      	nop			; (mov r8, r8)
 8010424:	200069e8 	.word	0x200069e8

08010428 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010428:	4b01      	ldr	r3, [pc, #4]	; (8010430 <HAL_GetTick+0x8>)
 801042a:	6818      	ldr	r0, [r3, #0]
}
 801042c:	4770      	bx	lr
 801042e:	46c0      	nop			; (mov r8, r8)
 8010430:	200069e8 	.word	0x200069e8

08010434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010434:	b510      	push	{r4, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 801043a:	f7ff fff5 	bl	8010428 <HAL_GetTick>
 801043e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010440:	f7ff fff2 	bl	8010428 <HAL_GetTick>
 8010444:	9b01      	ldr	r3, [sp, #4]
 8010446:	1b00      	subs	r0, r0, r4
 8010448:	4298      	cmp	r0, r3
 801044a:	d3f9      	bcc.n	8010440 <HAL_Delay+0xc>
  {
  }
}
 801044c:	b002      	add	sp, #8
 801044e:	bd10      	pop	{r4, pc}

08010450 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010450:	4b01      	ldr	r3, [pc, #4]	; (8010458 <HAL_GetREVID+0x8>)
 8010452:	6818      	ldr	r0, [r3, #0]
 8010454:	0c00      	lsrs	r0, r0, #16
}
 8010456:	4770      	bx	lr
 8010458:	40015800 	.word	0x40015800

0801045c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 801045c:	4b02      	ldr	r3, [pc, #8]	; (8010468 <HAL_GetDEVID+0xc>)
 801045e:	6818      	ldr	r0, [r3, #0]
 8010460:	0500      	lsls	r0, r0, #20
 8010462:	0d00      	lsrs	r0, r0, #20
}
 8010464:	4770      	bx	lr
 8010466:	46c0      	nop			; (mov r8, r8)
 8010468:	40015800 	.word	0x40015800

0801046c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010470:	6803      	ldr	r3, [r0, #0]
 8010472:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8010474:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010476:	0752      	lsls	r2, r2, #29
 8010478:	d521      	bpl.n	80104be <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 801047a:	689a      	ldr	r2, [r3, #8]
 801047c:	0752      	lsls	r2, r2, #29
 801047e:	d506      	bpl.n	801048e <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010480:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010482:	0792      	lsls	r2, r2, #30
 8010484:	d403      	bmi.n	801048e <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8010486:	689a      	ldr	r2, [r3, #8]
 8010488:	2110      	movs	r1, #16
 801048a:	430a      	orrs	r2, r1
 801048c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 801048e:	f7ff ffcb 	bl	8010428 <HAL_GetTick>
 8010492:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010494:	2504      	movs	r5, #4
 8010496:	6823      	ldr	r3, [r4, #0]
 8010498:	689b      	ldr	r3, [r3, #8]
 801049a:	421d      	tst	r5, r3
 801049c:	d00e      	beq.n	80104bc <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801049e:	f7ff ffc3 	bl	8010428 <HAL_GetTick>
 80104a2:	1b80      	subs	r0, r0, r6
 80104a4:	2802      	cmp	r0, #2
 80104a6:	d9f6      	bls.n	8010496 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80104a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104aa:	2210      	movs	r2, #16
 80104ac:	4313      	orrs	r3, r2
 80104ae:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80104b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80104b2:	3a0f      	subs	r2, #15
 80104b4:	4313      	orrs	r3, r2
 80104b6:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80104b8:	2001      	movs	r0, #1
 80104ba:	e000      	b.n	80104be <ADC_ConversionStop+0x52>
  return HAL_OK;
 80104bc:	2000      	movs	r0, #0
}
 80104be:	bd70      	pop	{r4, r5, r6, pc}

080104c0 <ADC_Disable>:
{
 80104c0:	b570      	push	{r4, r5, r6, lr}
 80104c2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80104c4:	6802      	ldr	r2, [r0, #0]
 80104c6:	6891      	ldr	r1, [r2, #8]
 80104c8:	2303      	movs	r3, #3
 80104ca:	400b      	ands	r3, r1
  return HAL_OK;
 80104cc:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d000      	beq.n	80104d4 <ADC_Disable+0x14>
}
 80104d2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80104d4:	6813      	ldr	r3, [r2, #0]
 80104d6:	07db      	lsls	r3, r3, #31
 80104d8:	d402      	bmi.n	80104e0 <ADC_Disable+0x20>
 80104da:	68d3      	ldr	r3, [r2, #12]
 80104dc:	041b      	lsls	r3, r3, #16
 80104de:	d5f8      	bpl.n	80104d2 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80104e0:	6891      	ldr	r1, [r2, #8]
 80104e2:	2305      	movs	r3, #5
 80104e4:	400b      	ands	r3, r1
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d009      	beq.n	80104fe <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80104ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104ec:	2210      	movs	r2, #16
 80104ee:	4313      	orrs	r3, r2
 80104f0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80104f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80104f4:	3a0f      	subs	r2, #15
 80104f6:	4313      	orrs	r3, r2
 80104f8:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80104fa:	2001      	movs	r0, #1
 80104fc:	e7e9      	b.n	80104d2 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 80104fe:	6893      	ldr	r3, [r2, #8]
 8010500:	2102      	movs	r1, #2
 8010502:	430b      	orrs	r3, r1
 8010504:	6093      	str	r3, [r2, #8]
 8010506:	6823      	ldr	r3, [r4, #0]
 8010508:	2203      	movs	r2, #3
 801050a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 801050c:	f7ff ff8c 	bl	8010428 <HAL_GetTick>
 8010510:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8010512:	2501      	movs	r5, #1
 8010514:	6823      	ldr	r3, [r4, #0]
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	421d      	tst	r5, r3
 801051a:	d00e      	beq.n	801053a <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801051c:	f7ff ff84 	bl	8010428 <HAL_GetTick>
 8010520:	1b80      	subs	r0, r0, r6
 8010522:	2802      	cmp	r0, #2
 8010524:	d9f6      	bls.n	8010514 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010526:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010528:	2210      	movs	r2, #16
 801052a:	4313      	orrs	r3, r2
 801052c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801052e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010530:	3a0f      	subs	r2, #15
 8010532:	4313      	orrs	r3, r2
 8010534:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010536:	2001      	movs	r0, #1
 8010538:	e7cb      	b.n	80104d2 <ADC_Disable+0x12>
  return HAL_OK;
 801053a:	2000      	movs	r0, #0
 801053c:	e7c9      	b.n	80104d2 <ADC_Disable+0x12>
	...

08010540 <ADC_Enable>:
{
 8010540:	b570      	push	{r4, r5, r6, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010546:	2300      	movs	r3, #0
 8010548:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 801054a:	6803      	ldr	r3, [r0, #0]
 801054c:	6899      	ldr	r1, [r3, #8]
 801054e:	2203      	movs	r2, #3
 8010550:	400a      	ands	r2, r1
 8010552:	2a01      	cmp	r2, #1
 8010554:	d02d      	beq.n	80105b2 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8010556:	6899      	ldr	r1, [r3, #8]
 8010558:	4a20      	ldr	r2, [pc, #128]	; (80105dc <ADC_Enable+0x9c>)
 801055a:	4211      	tst	r1, r2
 801055c:	d131      	bne.n	80105c2 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 801055e:	689a      	ldr	r2, [r3, #8]
 8010560:	2101      	movs	r1, #1
 8010562:	430a      	orrs	r2, r1
 8010564:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8010566:	4b1e      	ldr	r3, [pc, #120]	; (80105e0 <ADC_Enable+0xa0>)
 8010568:	6818      	ldr	r0, [r3, #0]
 801056a:	491e      	ldr	r1, [pc, #120]	; (80105e4 <ADC_Enable+0xa4>)
 801056c:	f7ef fdf0 	bl	8000150 <__udivsi3>
 8010570:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010572:	9b01      	ldr	r3, [sp, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d005      	beq.n	8010584 <ADC_Enable+0x44>
      wait_loop_index--;
 8010578:	9b01      	ldr	r3, [sp, #4]
 801057a:	3b01      	subs	r3, #1
 801057c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 801057e:	9b01      	ldr	r3, [sp, #4]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d1f9      	bne.n	8010578 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8010584:	f7ff ff50 	bl	8010428 <HAL_GetTick>
 8010588:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801058a:	2501      	movs	r5, #1
 801058c:	6823      	ldr	r3, [r4, #0]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	421d      	tst	r5, r3
 8010592:	d121      	bne.n	80105d8 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010594:	f7ff ff48 	bl	8010428 <HAL_GetTick>
 8010598:	1b80      	subs	r0, r0, r6
 801059a:	2802      	cmp	r0, #2
 801059c:	d9f6      	bls.n	801058c <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801059e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80105a0:	2210      	movs	r2, #16
 80105a2:	4313      	orrs	r3, r2
 80105a4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80105a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80105a8:	3a0f      	subs	r2, #15
 80105aa:	4313      	orrs	r3, r2
 80105ac:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80105ae:	2001      	movs	r0, #1
 80105b0:	e010      	b.n	80105d4 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80105b2:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80105b4:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80105b6:	07d2      	lsls	r2, r2, #31
 80105b8:	d40c      	bmi.n	80105d4 <ADC_Enable+0x94>
 80105ba:	68da      	ldr	r2, [r3, #12]
 80105bc:	0412      	lsls	r2, r2, #16
 80105be:	d5ca      	bpl.n	8010556 <ADC_Enable+0x16>
 80105c0:	e008      	b.n	80105d4 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80105c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80105c4:	2210      	movs	r2, #16
 80105c6:	4313      	orrs	r3, r2
 80105c8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80105ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80105cc:	3a0f      	subs	r2, #15
 80105ce:	4313      	orrs	r3, r2
 80105d0:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80105d2:	2001      	movs	r0, #1
}
 80105d4:	b002      	add	sp, #8
 80105d6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80105d8:	2000      	movs	r0, #0
 80105da:	e7fb      	b.n	80105d4 <ADC_Enable+0x94>
 80105dc:	80000017 	.word	0x80000017
 80105e0:	20000090 	.word	0x20000090
 80105e4:	000f4240 	.word	0x000f4240

080105e8 <HAL_ADC_Init>:
{
 80105e8:	b570      	push	{r4, r5, r6, lr}
 80105ea:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80105ec:	d100      	bne.n	80105f0 <HAL_ADC_Init+0x8>
 80105ee:	e09b      	b.n	8010728 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80105f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d073      	beq.n	80106de <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80105f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80105f8:	06db      	lsls	r3, r3, #27
 80105fa:	d500      	bpl.n	80105fe <HAL_ADC_Init+0x16>
 80105fc:	e08e      	b.n	801071c <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80105fe:	6822      	ldr	r2, [r4, #0]
 8010600:	6893      	ldr	r3, [r2, #8]
 8010602:	2104      	movs	r1, #4
 8010604:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 8010606:	d000      	beq.n	801060a <HAL_ADC_Init+0x22>
 8010608:	e088      	b.n	801071c <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 801060a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801060c:	4847      	ldr	r0, [pc, #284]	; (801072c <HAL_ADC_Init+0x144>)
 801060e:	4003      	ands	r3, r0
 8010610:	3006      	adds	r0, #6
 8010612:	30ff      	adds	r0, #255	; 0xff
 8010614:	4303      	orrs	r3, r0
 8010616:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010618:	6890      	ldr	r0, [r2, #8]
 801061a:	2303      	movs	r3, #3
 801061c:	4003      	ands	r3, r0
 801061e:	2b01      	cmp	r3, #1
 8010620:	d063      	beq.n	80106ea <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 8010622:	68d3      	ldr	r3, [r2, #12]
 8010624:	2018      	movs	r0, #24
 8010626:	4383      	bics	r3, r0
 8010628:	68a0      	ldr	r0, [r4, #8]
 801062a:	4303      	orrs	r3, r0
 801062c:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 801062e:	6822      	ldr	r2, [r4, #0]
 8010630:	6913      	ldr	r3, [r2, #16]
 8010632:	009b      	lsls	r3, r3, #2
 8010634:	089b      	lsrs	r3, r3, #2
 8010636:	6860      	ldr	r0, [r4, #4]
 8010638:	4303      	orrs	r3, r0
 801063a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 801063c:	6822      	ldr	r2, [r4, #0]
 801063e:	68d3      	ldr	r3, [r2, #12]
 8010640:	483b      	ldr	r0, [pc, #236]	; (8010730 <HAL_ADC_Init+0x148>)
 8010642:	4003      	ands	r3, r0
 8010644:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010646:	69a3      	ldr	r3, [r4, #24]
 8010648:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 801064a:	69e3      	ldr	r3, [r4, #28]
 801064c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 801064e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010650:	6a20      	ldr	r0, [r4, #32]
 8010652:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010654:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010656:	000e      	movs	r6, r1
 8010658:	2b01      	cmp	r3, #1
 801065a:	d001      	beq.n	8010660 <HAL_ADC_Init+0x78>
 801065c:	2680      	movs	r6, #128	; 0x80
 801065e:	0176      	lsls	r6, r6, #5
 8010660:	68e3      	ldr	r3, [r4, #12]
 8010662:	431a      	orrs	r2, r3
 8010664:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010666:	6923      	ldr	r3, [r4, #16]
 8010668:	2b02      	cmp	r3, #2
 801066a:	d045      	beq.n	80106f8 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 801066c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801066e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010670:	4313      	orrs	r3, r2
 8010672:	4333      	orrs	r3, r6
 8010674:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010676:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010678:	2a01      	cmp	r2, #1
 801067a:	d03f      	beq.n	80106fc <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801067c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801067e:	21c2      	movs	r1, #194	; 0xc2
 8010680:	31ff      	adds	r1, #255	; 0xff
 8010682:	428a      	cmp	r2, r1
 8010684:	d002      	beq.n	801068c <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8010686:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010688:	430a      	orrs	r2, r1
 801068a:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 801068c:	6821      	ldr	r1, [r4, #0]
 801068e:	68ca      	ldr	r2, [r1, #12]
 8010690:	431a      	orrs	r2, r3
 8010692:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010694:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010696:	2180      	movs	r1, #128	; 0x80
 8010698:	0549      	lsls	r1, r1, #21
 801069a:	428a      	cmp	r2, r1
 801069c:	d002      	beq.n	80106a4 <HAL_ADC_Init+0xbc>
 801069e:	3a01      	subs	r2, #1
 80106a0:	2a06      	cmp	r2, #6
 80106a2:	d80a      	bhi.n	80106ba <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80106a4:	6820      	ldr	r0, [r4, #0]
 80106a6:	6941      	ldr	r1, [r0, #20]
 80106a8:	2207      	movs	r2, #7
 80106aa:	4391      	bics	r1, r2
 80106ac:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80106ae:	6821      	ldr	r1, [r4, #0]
 80106b0:	6948      	ldr	r0, [r1, #20]
 80106b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80106b4:	402a      	ands	r2, r5
 80106b6:	4302      	orrs	r2, r0
 80106b8:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80106ba:	6822      	ldr	r2, [r4, #0]
 80106bc:	68d2      	ldr	r2, [r2, #12]
 80106be:	491d      	ldr	r1, [pc, #116]	; (8010734 <HAL_ADC_Init+0x14c>)
 80106c0:	400a      	ands	r2, r1
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d020      	beq.n	8010708 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 80106c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80106c8:	2212      	movs	r2, #18
 80106ca:	4393      	bics	r3, r2
 80106cc:	3a02      	subs	r2, #2
 80106ce:	4313      	orrs	r3, r2
 80106d0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80106d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80106d4:	3a0f      	subs	r2, #15
 80106d6:	4313      	orrs	r3, r2
 80106d8:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80106da:	2001      	movs	r0, #1
 80106dc:	e023      	b.n	8010726 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 80106de:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80106e0:	2240      	movs	r2, #64	; 0x40
 80106e2:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80106e4:	f7f7 ffd6 	bl	8008694 <HAL_ADC_MspInit>
 80106e8:	e785      	b.n	80105f6 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80106ea:	6813      	ldr	r3, [r2, #0]
 80106ec:	07db      	lsls	r3, r3, #31
 80106ee:	d4a5      	bmi.n	801063c <HAL_ADC_Init+0x54>
 80106f0:	68d3      	ldr	r3, [r2, #12]
 80106f2:	041b      	lsls	r3, r3, #16
 80106f4:	d4a2      	bmi.n	801063c <HAL_ADC_Init+0x54>
 80106f6:	e794      	b.n	8010622 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80106f8:	2104      	movs	r1, #4
 80106fa:	e7b7      	b.n	801066c <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d1bd      	bne.n	801067c <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010700:	2280      	movs	r2, #128	; 0x80
 8010702:	0252      	lsls	r2, r2, #9
 8010704:	4313      	orrs	r3, r2
 8010706:	e7b9      	b.n	801067c <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 8010708:	2300      	movs	r3, #0
 801070a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 801070c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801070e:	2203      	movs	r2, #3
 8010710:	4393      	bics	r3, r2
 8010712:	3a02      	subs	r2, #2
 8010714:	4313      	orrs	r3, r2
 8010716:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010718:	2000      	movs	r0, #0
 801071a:	e004      	b.n	8010726 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801071e:	2210      	movs	r2, #16
 8010720:	4313      	orrs	r3, r2
 8010722:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010724:	2001      	movs	r0, #1
}
 8010726:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010728:	2001      	movs	r0, #1
 801072a:	e7fc      	b.n	8010726 <HAL_ADC_Init+0x13e>
 801072c:	fffffefd 	.word	0xfffffefd
 8010730:	fffe0219 	.word	0xfffe0219
 8010734:	833fffe7 	.word	0x833fffe7

08010738 <HAL_ADC_Start>:
{
 8010738:	b510      	push	{r4, lr}
 801073a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801073c:	6803      	ldr	r3, [r0, #0]
 801073e:	689b      	ldr	r3, [r3, #8]
 8010740:	075b      	lsls	r3, r3, #29
 8010742:	d423      	bmi.n	801078c <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010744:	2340      	movs	r3, #64	; 0x40
 8010746:	5cc3      	ldrb	r3, [r0, r3]
 8010748:	2b01      	cmp	r3, #1
 801074a:	d021      	beq.n	8010790 <HAL_ADC_Start+0x58>
 801074c:	2340      	movs	r3, #64	; 0x40
 801074e:	2201      	movs	r2, #1
 8010750:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010752:	69c3      	ldr	r3, [r0, #28]
 8010754:	2b01      	cmp	r3, #1
 8010756:	d114      	bne.n	8010782 <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8010758:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801075a:	4a0e      	ldr	r2, [pc, #56]	; (8010794 <HAL_ADC_Start+0x5c>)
 801075c:	401a      	ands	r2, r3
 801075e:	2380      	movs	r3, #128	; 0x80
 8010760:	005b      	lsls	r3, r3, #1
 8010762:	4313      	orrs	r3, r2
 8010764:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010766:	2300      	movs	r3, #0
 8010768:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 801076a:	2240      	movs	r2, #64	; 0x40
 801076c:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801076e:	6823      	ldr	r3, [r4, #0]
 8010770:	3a24      	subs	r2, #36	; 0x24
 8010772:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010774:	6822      	ldr	r2, [r4, #0]
 8010776:	6893      	ldr	r3, [r2, #8]
 8010778:	2104      	movs	r1, #4
 801077a:	430b      	orrs	r3, r1
 801077c:	6093      	str	r3, [r2, #8]
 801077e:	2000      	movs	r0, #0
}
 8010780:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010782:	f7ff fedd 	bl	8010540 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010786:	2800      	cmp	r0, #0
 8010788:	d0e6      	beq.n	8010758 <HAL_ADC_Start+0x20>
 801078a:	e7f9      	b.n	8010780 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 801078c:	2002      	movs	r0, #2
 801078e:	e7f7      	b.n	8010780 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010790:	2002      	movs	r0, #2
 8010792:	e7f5      	b.n	8010780 <HAL_ADC_Start+0x48>
 8010794:	fffff0fe 	.word	0xfffff0fe

08010798 <HAL_ADC_Stop>:
{ 
 8010798:	b510      	push	{r4, lr}
 801079a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 801079c:	2340      	movs	r3, #64	; 0x40
 801079e:	5cc3      	ldrb	r3, [r0, r3]
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d017      	beq.n	80107d4 <HAL_ADC_Stop+0x3c>
 80107a4:	2340      	movs	r3, #64	; 0x40
 80107a6:	2201      	movs	r2, #1
 80107a8:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80107aa:	f7ff fe5f 	bl	801046c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80107ae:	2800      	cmp	r0, #0
 80107b0:	d003      	beq.n	80107ba <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 80107b2:	2340      	movs	r3, #64	; 0x40
 80107b4:	2200      	movs	r2, #0
 80107b6:	54e2      	strb	r2, [r4, r3]
}
 80107b8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80107ba:	0020      	movs	r0, r4
 80107bc:	f7ff fe80 	bl	80104c0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80107c0:	2800      	cmp	r0, #0
 80107c2:	d1f6      	bne.n	80107b2 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80107c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80107c6:	4a04      	ldr	r2, [pc, #16]	; (80107d8 <HAL_ADC_Stop+0x40>)
 80107c8:	4013      	ands	r3, r2
 80107ca:	3204      	adds	r2, #4
 80107cc:	32ff      	adds	r2, #255	; 0xff
 80107ce:	4313      	orrs	r3, r2
 80107d0:	6463      	str	r3, [r4, #68]	; 0x44
 80107d2:	e7ee      	b.n	80107b2 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80107d4:	2002      	movs	r0, #2
 80107d6:	e7ef      	b.n	80107b8 <HAL_ADC_Stop+0x20>
 80107d8:	fffffefe 	.word	0xfffffefe

080107dc <HAL_ADC_PollForConversion>:
{
 80107dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107de:	0006      	movs	r6, r0
 80107e0:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80107e2:	6943      	ldr	r3, [r0, #20]
 80107e4:	2b08      	cmp	r3, #8
 80107e6:	d026      	beq.n	8010836 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80107e8:	6803      	ldr	r3, [r0, #0]
 80107ea:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80107ec:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80107ee:	07db      	lsls	r3, r3, #31
 80107f0:	d418      	bmi.n	8010824 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 80107f2:	f7ff fe19 	bl	8010428 <HAL_GetTick>
 80107f6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80107f8:	6832      	ldr	r2, [r6, #0]
 80107fa:	6813      	ldr	r3, [r2, #0]
 80107fc:	421d      	tst	r5, r3
 80107fe:	d11c      	bne.n	801083a <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8010800:	1c63      	adds	r3, r4, #1
 8010802:	d0fa      	beq.n	80107fa <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010804:	2c00      	cmp	r4, #0
 8010806:	d004      	beq.n	8010812 <HAL_ADC_PollForConversion+0x36>
 8010808:	f7ff fe0e 	bl	8010428 <HAL_GetTick>
 801080c:	1bc0      	subs	r0, r0, r7
 801080e:	42a0      	cmp	r0, r4
 8010810:	d9f2      	bls.n	80107f8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010812:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010814:	2204      	movs	r2, #4
 8010816:	4313      	orrs	r3, r2
 8010818:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 801081a:	2340      	movs	r3, #64	; 0x40
 801081c:	2200      	movs	r2, #0
 801081e:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010820:	2003      	movs	r0, #3
 8010822:	e007      	b.n	8010834 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010824:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010826:	2220      	movs	r2, #32
 8010828:	4313      	orrs	r3, r2
 801082a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 801082c:	2340      	movs	r3, #64	; 0x40
 801082e:	2200      	movs	r2, #0
 8010830:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010832:	2001      	movs	r0, #1
}
 8010834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8010836:	2508      	movs	r5, #8
 8010838:	e7db      	b.n	80107f2 <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801083a:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801083c:	2380      	movs	r3, #128	; 0x80
 801083e:	009b      	lsls	r3, r3, #2
 8010840:	430b      	orrs	r3, r1
 8010842:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010844:	68d1      	ldr	r1, [r2, #12]
 8010846:	23c0      	movs	r3, #192	; 0xc0
 8010848:	011b      	lsls	r3, r3, #4
 801084a:	4219      	tst	r1, r3
 801084c:	d113      	bne.n	8010876 <HAL_ADC_PollForConversion+0x9a>
 801084e:	6a33      	ldr	r3, [r6, #32]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d110      	bne.n	8010876 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010854:	6813      	ldr	r3, [r2, #0]
 8010856:	071b      	lsls	r3, r3, #28
 8010858:	d50d      	bpl.n	8010876 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801085a:	6893      	ldr	r3, [r2, #8]
 801085c:	075b      	lsls	r3, r3, #29
 801085e:	d412      	bmi.n	8010886 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010860:	6853      	ldr	r3, [r2, #4]
 8010862:	210c      	movs	r1, #12
 8010864:	438b      	bics	r3, r1
 8010866:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010868:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801086a:	4a0b      	ldr	r2, [pc, #44]	; (8010898 <HAL_ADC_PollForConversion+0xbc>)
 801086c:	4013      	ands	r3, r2
 801086e:	3204      	adds	r2, #4
 8010870:	32ff      	adds	r2, #255	; 0xff
 8010872:	4313      	orrs	r3, r2
 8010874:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8010876:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010878:	69b3      	ldr	r3, [r6, #24]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d1da      	bne.n	8010834 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801087e:	6833      	ldr	r3, [r6, #0]
 8010880:	220c      	movs	r2, #12
 8010882:	601a      	str	r2, [r3, #0]
 8010884:	e7d6      	b.n	8010834 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010886:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010888:	2220      	movs	r2, #32
 801088a:	4313      	orrs	r3, r2
 801088c:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801088e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010890:	3a1f      	subs	r2, #31
 8010892:	4313      	orrs	r3, r2
 8010894:	64b3      	str	r3, [r6, #72]	; 0x48
 8010896:	e7ee      	b.n	8010876 <HAL_ADC_PollForConversion+0x9a>
 8010898:	fffffefe 	.word	0xfffffefe

0801089c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801089c:	6803      	ldr	r3, [r0, #0]
 801089e:	2208      	movs	r2, #8
 80108a0:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 80108a2:	6803      	ldr	r3, [r0, #0]
 80108a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80108a6:	4770      	bx	lr

080108a8 <HAL_ADC_ConfigChannel>:
{
 80108a8:	b530      	push	{r4, r5, lr}
 80108aa:	b083      	sub	sp, #12
 80108ac:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 80108ae:	2300      	movs	r3, #0
 80108b0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80108b2:	3340      	adds	r3, #64	; 0x40
 80108b4:	5cc3      	ldrb	r3, [r0, r3]
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d100      	bne.n	80108bc <HAL_ADC_ConfigChannel+0x14>
 80108ba:	e088      	b.n	80109ce <HAL_ADC_ConfigChannel+0x126>
 80108bc:	2340      	movs	r3, #64	; 0x40
 80108be:	2201      	movs	r2, #1
 80108c0:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80108c2:	6803      	ldr	r3, [r0, #0]
 80108c4:	689a      	ldr	r2, [r3, #8]
 80108c6:	0752      	lsls	r2, r2, #29
 80108c8:	d475      	bmi.n	80109b6 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 80108ca:	4a42      	ldr	r2, [pc, #264]	; (80109d4 <HAL_ADC_ConfigChannel+0x12c>)
 80108cc:	6848      	ldr	r0, [r1, #4]
 80108ce:	4290      	cmp	r0, r2
 80108d0:	d050      	beq.n	8010974 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80108d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80108d4:	2201      	movs	r2, #1
 80108d6:	680d      	ldr	r5, [r1, #0]
 80108d8:	40aa      	lsls	r2, r5
 80108da:	4302      	orrs	r2, r0
 80108dc:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80108de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80108e0:	2280      	movs	r2, #128	; 0x80
 80108e2:	0552      	lsls	r2, r2, #21
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d013      	beq.n	8010910 <HAL_ADC_ConfigChannel+0x68>
 80108e8:	3b01      	subs	r3, #1
 80108ea:	2b06      	cmp	r3, #6
 80108ec:	d910      	bls.n	8010910 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80108ee:	6822      	ldr	r2, [r4, #0]
 80108f0:	6950      	ldr	r0, [r2, #20]
 80108f2:	2307      	movs	r3, #7
 80108f4:	4003      	ands	r3, r0
 80108f6:	6888      	ldr	r0, [r1, #8]
 80108f8:	4298      	cmp	r0, r3
 80108fa:	d009      	beq.n	8010910 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80108fc:	6950      	ldr	r0, [r2, #20]
 80108fe:	2307      	movs	r3, #7
 8010900:	4398      	bics	r0, r3
 8010902:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8010904:	6822      	ldr	r2, [r4, #0]
 8010906:	6950      	ldr	r0, [r2, #20]
 8010908:	688d      	ldr	r5, [r1, #8]
 801090a:	402b      	ands	r3, r5
 801090c:	4303      	orrs	r3, r0
 801090e:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010910:	680b      	ldr	r3, [r1, #0]
 8010912:	001a      	movs	r2, r3
 8010914:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010916:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010918:	2a02      	cmp	r2, #2
 801091a:	d851      	bhi.n	80109c0 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801091c:	4a2e      	ldr	r2, [pc, #184]	; (80109d8 <HAL_ADC_ConfigChannel+0x130>)
 801091e:	6810      	ldr	r0, [r2, #0]
 8010920:	2b10      	cmp	r3, #16
 8010922:	d024      	beq.n	801096e <HAL_ADC_ConfigChannel+0xc6>
 8010924:	3b11      	subs	r3, #17
 8010926:	425a      	negs	r2, r3
 8010928:	415a      	adcs	r2, r3
 801092a:	4253      	negs	r3, r2
 801092c:	4a2b      	ldr	r2, [pc, #172]	; (80109dc <HAL_ADC_ConfigChannel+0x134>)
 801092e:	4013      	ands	r3, r2
 8010930:	2280      	movs	r2, #128	; 0x80
 8010932:	0452      	lsls	r2, r2, #17
 8010934:	4694      	mov	ip, r2
 8010936:	4463      	add	r3, ip
 8010938:	4303      	orrs	r3, r0
 801093a:	4a27      	ldr	r2, [pc, #156]	; (80109d8 <HAL_ADC_ConfigChannel+0x130>)
 801093c:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801093e:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010940:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010942:	2b10      	cmp	r3, #16
 8010944:	d13c      	bne.n	80109c0 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010946:	4b26      	ldr	r3, [pc, #152]	; (80109e0 <HAL_ADC_ConfigChannel+0x138>)
 8010948:	6818      	ldr	r0, [r3, #0]
 801094a:	4926      	ldr	r1, [pc, #152]	; (80109e4 <HAL_ADC_ConfigChannel+0x13c>)
 801094c:	f7ef fc00 	bl	8000150 <__udivsi3>
 8010950:	0083      	lsls	r3, r0, #2
 8010952:	1818      	adds	r0, r3, r0
 8010954:	0040      	lsls	r0, r0, #1
 8010956:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 8010958:	9b01      	ldr	r3, [sp, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d035      	beq.n	80109ca <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 801095e:	9b01      	ldr	r3, [sp, #4]
 8010960:	3b01      	subs	r3, #1
 8010962:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010964:	9b01      	ldr	r3, [sp, #4]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d1f9      	bne.n	801095e <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801096a:	2000      	movs	r0, #0
 801096c:	e028      	b.n	80109c0 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801096e:	2380      	movs	r3, #128	; 0x80
 8010970:	041b      	lsls	r3, r3, #16
 8010972:	e7e1      	b.n	8010938 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010976:	2001      	movs	r0, #1
 8010978:	680d      	ldr	r5, [r1, #0]
 801097a:	40a8      	lsls	r0, r5
 801097c:	4382      	bics	r2, r0
 801097e:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010980:	680b      	ldr	r3, [r1, #0]
 8010982:	001a      	movs	r2, r3
 8010984:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010986:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010988:	2a02      	cmp	r2, #2
 801098a:	d819      	bhi.n	80109c0 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801098c:	4a12      	ldr	r2, [pc, #72]	; (80109d8 <HAL_ADC_ConfigChannel+0x130>)
 801098e:	6811      	ldr	r1, [r2, #0]
 8010990:	2b10      	cmp	r3, #16
 8010992:	d00e      	beq.n	80109b2 <HAL_ADC_ConfigChannel+0x10a>
 8010994:	3b11      	subs	r3, #17
 8010996:	425a      	negs	r2, r3
 8010998:	415a      	adcs	r2, r3
 801099a:	4252      	negs	r2, r2
 801099c:	23c0      	movs	r3, #192	; 0xc0
 801099e:	041b      	lsls	r3, r3, #16
 80109a0:	4013      	ands	r3, r2
 80109a2:	4a11      	ldr	r2, [pc, #68]	; (80109e8 <HAL_ADC_ConfigChannel+0x140>)
 80109a4:	4694      	mov	ip, r2
 80109a6:	4463      	add	r3, ip
 80109a8:	400b      	ands	r3, r1
 80109aa:	4a0b      	ldr	r2, [pc, #44]	; (80109d8 <HAL_ADC_ConfigChannel+0x130>)
 80109ac:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80109ae:	2000      	movs	r0, #0
 80109b0:	e006      	b.n	80109c0 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80109b2:	4b0e      	ldr	r3, [pc, #56]	; (80109ec <HAL_ADC_ConfigChannel+0x144>)
 80109b4:	e7f8      	b.n	80109a8 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80109b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80109b8:	2220      	movs	r2, #32
 80109ba:	4313      	orrs	r3, r2
 80109bc:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80109be:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80109c0:	2340      	movs	r3, #64	; 0x40
 80109c2:	2200      	movs	r2, #0
 80109c4:	54e2      	strb	r2, [r4, r3]
}
 80109c6:	b003      	add	sp, #12
 80109c8:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80109ca:	2000      	movs	r0, #0
 80109cc:	e7f8      	b.n	80109c0 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 80109ce:	2002      	movs	r0, #2
 80109d0:	e7f9      	b.n	80109c6 <HAL_ADC_ConfigChannel+0x11e>
 80109d2:	46c0      	nop			; (mov r8, r8)
 80109d4:	00001001 	.word	0x00001001
 80109d8:	40012708 	.word	0x40012708
 80109dc:	ff400000 	.word	0xff400000
 80109e0:	20000090 	.word	0x20000090
 80109e4:	000f4240 	.word	0x000f4240
 80109e8:	feffffff 	.word	0xfeffffff
 80109ec:	ff7fffff 	.word	0xff7fffff

080109f0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80109f0:	b570      	push	{r4, r5, r6, lr}
 80109f2:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80109f4:	2340      	movs	r3, #64	; 0x40
 80109f6:	5cc3      	ldrb	r3, [r0, r3]
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d042      	beq.n	8010a82 <HAL_ADCEx_Calibration_Start+0x92>
 80109fc:	2340      	movs	r3, #64	; 0x40
 80109fe:	2201      	movs	r2, #1
 8010a00:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010a02:	6802      	ldr	r2, [r0, #0]
 8010a04:	6891      	ldr	r1, [r2, #8]
 8010a06:	3b3d      	subs	r3, #61	; 0x3d
 8010a08:	400b      	ands	r3, r1
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	d105      	bne.n	8010a1a <HAL_ADCEx_Calibration_Start+0x2a>
 8010a0e:	6813      	ldr	r3, [r2, #0]
 8010a10:	07db      	lsls	r3, r3, #31
 8010a12:	d42d      	bmi.n	8010a70 <HAL_ADCEx_Calibration_Start+0x80>
 8010a14:	68d3      	ldr	r3, [r2, #12]
 8010a16:	041b      	lsls	r3, r3, #16
 8010a18:	d42a      	bmi.n	8010a70 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8010a1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a1c:	491a      	ldr	r1, [pc, #104]	; (8010a88 <HAL_ADCEx_Calibration_Start+0x98>)
 8010a1e:	400b      	ands	r3, r1
 8010a20:	3106      	adds	r1, #6
 8010a22:	31ff      	adds	r1, #255	; 0xff
 8010a24:	430b      	orrs	r3, r1
 8010a26:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8010a28:	6891      	ldr	r1, [r2, #8]
 8010a2a:	2380      	movs	r3, #128	; 0x80
 8010a2c:	061b      	lsls	r3, r3, #24
 8010a2e:	430b      	orrs	r3, r1
 8010a30:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 8010a32:	f7ff fcf9 	bl	8010428 <HAL_GetTick>
 8010a36:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8010a38:	6823      	ldr	r3, [r4, #0]
 8010a3a:	689b      	ldr	r3, [r3, #8]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	da0f      	bge.n	8010a60 <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8010a40:	f7ff fcf2 	bl	8010428 <HAL_GetTick>
 8010a44:	1b40      	subs	r0, r0, r5
 8010a46:	2802      	cmp	r0, #2
 8010a48:	d9f6      	bls.n	8010a38 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8010a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a4c:	2212      	movs	r2, #18
 8010a4e:	4393      	bics	r3, r2
 8010a50:	3a02      	subs	r2, #2
 8010a52:	4313      	orrs	r3, r2
 8010a54:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8010a56:	2340      	movs	r3, #64	; 0x40
 8010a58:	2200      	movs	r2, #0
 8010a5a:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 8010a5c:	2001      	movs	r0, #1
 8010a5e:	e00f      	b.n	8010a80 <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010a60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a62:	2203      	movs	r2, #3
 8010a64:	4393      	bics	r3, r2
 8010a66:	3a02      	subs	r2, #2
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010a6c:	2000      	movs	r0, #0
 8010a6e:	e004      	b.n	8010a7a <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010a70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a72:	2220      	movs	r2, #32
 8010a74:	4313      	orrs	r3, r2
 8010a76:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8010a78:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010a7a:	2340      	movs	r3, #64	; 0x40
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8010a80:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8010a82:	2002      	movs	r0, #2
 8010a84:	e7fc      	b.n	8010a80 <HAL_ADCEx_Calibration_Start+0x90>
 8010a86:	46c0      	nop			; (mov r8, r8)
 8010a88:	fffffefd 	.word	0xfffffefd

08010a8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010a8c:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	db14      	blt.n	8010abc <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010a92:	0883      	lsrs	r3, r0, #2
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4a15      	ldr	r2, [pc, #84]	; (8010aec <HAL_NVIC_SetPriority+0x60>)
 8010a98:	4694      	mov	ip, r2
 8010a9a:	4463      	add	r3, ip
 8010a9c:	26c0      	movs	r6, #192	; 0xc0
 8010a9e:	00b6      	lsls	r6, r6, #2
 8010aa0:	599d      	ldr	r5, [r3, r6]
 8010aa2:	2403      	movs	r4, #3
 8010aa4:	4020      	ands	r0, r4
 8010aa6:	00c0      	lsls	r0, r0, #3
 8010aa8:	22ff      	movs	r2, #255	; 0xff
 8010aaa:	0014      	movs	r4, r2
 8010aac:	4084      	lsls	r4, r0
 8010aae:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010ab0:	0189      	lsls	r1, r1, #6
 8010ab2:	400a      	ands	r2, r1
 8010ab4:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010ab6:	432a      	orrs	r2, r5
 8010ab8:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010aba:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010abc:	b2c0      	uxtb	r0, r0
 8010abe:	230f      	movs	r3, #15
 8010ac0:	4003      	ands	r3, r0
 8010ac2:	3b08      	subs	r3, #8
 8010ac4:	089b      	lsrs	r3, r3, #2
 8010ac6:	009b      	lsls	r3, r3, #2
 8010ac8:	4a09      	ldr	r2, [pc, #36]	; (8010af0 <HAL_NVIC_SetPriority+0x64>)
 8010aca:	4694      	mov	ip, r2
 8010acc:	4463      	add	r3, ip
 8010ace:	69dd      	ldr	r5, [r3, #28]
 8010ad0:	2203      	movs	r2, #3
 8010ad2:	4010      	ands	r0, r2
 8010ad4:	00c0      	lsls	r0, r0, #3
 8010ad6:	24ff      	movs	r4, #255	; 0xff
 8010ad8:	0022      	movs	r2, r4
 8010ada:	4082      	lsls	r2, r0
 8010adc:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010ade:	0189      	lsls	r1, r1, #6
 8010ae0:	400c      	ands	r4, r1
 8010ae2:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010ae4:	432c      	orrs	r4, r5
 8010ae6:	61dc      	str	r4, [r3, #28]
 8010ae8:	e7e7      	b.n	8010aba <HAL_NVIC_SetPriority+0x2e>
 8010aea:	46c0      	nop			; (mov r8, r8)
 8010aec:	e000e100 	.word	0xe000e100
 8010af0:	e000ed00 	.word	0xe000ed00

08010af4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010af4:	231f      	movs	r3, #31
 8010af6:	4018      	ands	r0, r3
 8010af8:	3b1e      	subs	r3, #30
 8010afa:	4083      	lsls	r3, r0
 8010afc:	4a01      	ldr	r2, [pc, #4]	; (8010b04 <HAL_NVIC_EnableIRQ+0x10>)
 8010afe:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010b00:	4770      	bx	lr
 8010b02:	46c0      	nop			; (mov r8, r8)
 8010b04:	e000e100 	.word	0xe000e100

08010b08 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010b08:	231f      	movs	r3, #31
 8010b0a:	4018      	ands	r0, r3
 8010b0c:	3b1e      	subs	r3, #30
 8010b0e:	4083      	lsls	r3, r0
 8010b10:	4901      	ldr	r1, [pc, #4]	; (8010b18 <HAL_NVIC_DisableIRQ+0x10>)
 8010b12:	2280      	movs	r2, #128	; 0x80
 8010b14:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010b16:	4770      	bx	lr
 8010b18:	e000e100 	.word	0xe000e100

08010b1c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010b1c:	1e43      	subs	r3, r0, #1
 8010b1e:	4a0a      	ldr	r2, [pc, #40]	; (8010b48 <HAL_SYSTICK_Config+0x2c>)
 8010b20:	2001      	movs	r0, #1
 8010b22:	4293      	cmp	r3, r2
 8010b24:	d80e      	bhi.n	8010b44 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010b26:	4a09      	ldr	r2, [pc, #36]	; (8010b4c <HAL_SYSTICK_Config+0x30>)
 8010b28:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010b2a:	4809      	ldr	r0, [pc, #36]	; (8010b50 <HAL_SYSTICK_Config+0x34>)
 8010b2c:	6a03      	ldr	r3, [r0, #32]
 8010b2e:	021b      	lsls	r3, r3, #8
 8010b30:	0a1b      	lsrs	r3, r3, #8
 8010b32:	21c0      	movs	r1, #192	; 0xc0
 8010b34:	0609      	lsls	r1, r1, #24
 8010b36:	430b      	orrs	r3, r1
 8010b38:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010b3e:	3307      	adds	r3, #7
 8010b40:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010b42:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010b44:	4770      	bx	lr
 8010b46:	46c0      	nop			; (mov r8, r8)
 8010b48:	00ffffff 	.word	0x00ffffff
 8010b4c:	e000e010 	.word	0xe000e010
 8010b50:	e000ed00 	.word	0xe000ed00

08010b54 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010b54:	2804      	cmp	r0, #4
 8010b56:	d005      	beq.n	8010b64 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010b58:	4a05      	ldr	r2, [pc, #20]	; (8010b70 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010b5a:	6813      	ldr	r3, [r2, #0]
 8010b5c:	2104      	movs	r1, #4
 8010b5e:	438b      	bics	r3, r1
 8010b60:	6013      	str	r3, [r2, #0]
  }
}
 8010b62:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010b64:	4a02      	ldr	r2, [pc, #8]	; (8010b70 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010b66:	6813      	ldr	r3, [r2, #0]
 8010b68:	2104      	movs	r1, #4
 8010b6a:	430b      	orrs	r3, r1
 8010b6c:	6013      	str	r3, [r2, #0]
 8010b6e:	e7f8      	b.n	8010b62 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010b70:	e000e010 	.word	0xe000e010

08010b74 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b76:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010b78:	0891      	lsrs	r1, r2, #2
 8010b7a:	d013      	beq.n	8010ba4 <CRC_Handle_8+0x30>
 8010b7c:	0034      	movs	r4, r6
 8010b7e:	2303      	movs	r3, #3
 8010b80:	0017      	movs	r7, r2
 8010b82:	439f      	bics	r7, r3
 8010b84:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010b86:	7823      	ldrb	r3, [r4, #0]
 8010b88:	061b      	lsls	r3, r3, #24
 8010b8a:	7865      	ldrb	r5, [r4, #1]
 8010b8c:	042d      	lsls	r5, r5, #16
 8010b8e:	432b      	orrs	r3, r5
 8010b90:	78e5      	ldrb	r5, [r4, #3]
 8010b92:	432b      	orrs	r3, r5
 8010b94:	78a5      	ldrb	r5, [r4, #2]
 8010b96:	022d      	lsls	r5, r5, #8
 8010b98:	432b      	orrs	r3, r5
 8010b9a:	6805      	ldr	r5, [r0, #0]
 8010b9c:	602b      	str	r3, [r5, #0]
 8010b9e:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 8010ba0:	42bc      	cmp	r4, r7
 8010ba2:	d1f0      	bne.n	8010b86 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010ba4:	2303      	movs	r3, #3
 8010ba6:	401a      	ands	r2, r3
 8010ba8:	d01e      	beq.n	8010be8 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 8010baa:	2a01      	cmp	r2, #1
 8010bac:	d00a      	beq.n	8010bc4 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010bae:	2a02      	cmp	r2, #2
 8010bb0:	d10d      	bne.n	8010bce <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010bb2:	0089      	lsls	r1, r1, #2
 8010bb4:	5c72      	ldrb	r2, [r6, r1]
 8010bb6:	0212      	lsls	r2, r2, #8
 8010bb8:	1871      	adds	r1, r6, r1
 8010bba:	784b      	ldrb	r3, [r1, #1]
 8010bbc:	4313      	orrs	r3, r2
 8010bbe:	6802      	ldr	r2, [r0, #0]
 8010bc0:	8013      	strh	r3, [r2, #0]
 8010bc2:	e011      	b.n	8010be8 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010bc4:	0089      	lsls	r1, r1, #2
 8010bc6:	5d8b      	ldrb	r3, [r1, r6]
 8010bc8:	6802      	ldr	r2, [r0, #0]
 8010bca:	7013      	strb	r3, [r2, #0]
 8010bcc:	e00c      	b.n	8010be8 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 8010bce:	2a03      	cmp	r2, #3
 8010bd0:	d10a      	bne.n	8010be8 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010bd2:	0089      	lsls	r1, r1, #2
 8010bd4:	5c72      	ldrb	r2, [r6, r1]
 8010bd6:	0212      	lsls	r2, r2, #8
 8010bd8:	1871      	adds	r1, r6, r1
 8010bda:	784b      	ldrb	r3, [r1, #1]
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	6802      	ldr	r2, [r0, #0]
 8010be0:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010be2:	788b      	ldrb	r3, [r1, #2]
 8010be4:	6802      	ldr	r2, [r0, #0]
 8010be6:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010be8:	6803      	ldr	r3, [r0, #0]
 8010bea:	6818      	ldr	r0, [r3, #0]
}
 8010bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010bee <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bf0:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010bf2:	0852      	lsrs	r2, r2, #1
 8010bf4:	d00b      	beq.n	8010c0e <CRC_Handle_16+0x20>
 8010bf6:	000c      	movs	r4, r1
 8010bf8:	0097      	lsls	r7, r2, #2
 8010bfa:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010bfc:	8823      	ldrh	r3, [r4, #0]
 8010bfe:	041b      	lsls	r3, r3, #16
 8010c00:	8866      	ldrh	r6, [r4, #2]
 8010c02:	4333      	orrs	r3, r6
 8010c04:	6806      	ldr	r6, [r0, #0]
 8010c06:	6033      	str	r3, [r6, #0]
 8010c08:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 8010c0a:	42bc      	cmp	r4, r7
 8010c0c:	d1f6      	bne.n	8010bfc <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 8010c0e:	07eb      	lsls	r3, r5, #31
 8010c10:	d503      	bpl.n	8010c1a <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010c12:	0092      	lsls	r2, r2, #2
 8010c14:	5a53      	ldrh	r3, [r2, r1]
 8010c16:	6802      	ldr	r2, [r0, #0]
 8010c18:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010c1a:	6803      	ldr	r3, [r0, #0]
 8010c1c:	6818      	ldr	r0, [r3, #0]
}
 8010c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c20 <HAL_CRC_Init>:
{
 8010c20:	b510      	push	{r4, lr}
 8010c22:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010c24:	d029      	beq.n	8010c7a <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010c26:	7f43      	ldrb	r3, [r0, #29]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d01e      	beq.n	8010c6a <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010c2c:	2302      	movs	r3, #2
 8010c2e:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010c30:	0020      	movs	r0, r4
 8010c32:	f000 f8b1 	bl	8010d98 <HAL_CRCEx_Init>
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d121      	bne.n	8010c7e <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010c3a:	7963      	ldrb	r3, [r4, #5]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d118      	bne.n	8010c72 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	2201      	movs	r2, #1
 8010c44:	4252      	negs	r2, r2
 8010c46:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010c48:	6822      	ldr	r2, [r4, #0]
 8010c4a:	6893      	ldr	r3, [r2, #8]
 8010c4c:	2160      	movs	r1, #96	; 0x60
 8010c4e:	438b      	bics	r3, r1
 8010c50:	6961      	ldr	r1, [r4, #20]
 8010c52:	430b      	orrs	r3, r1
 8010c54:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010c56:	6822      	ldr	r2, [r4, #0]
 8010c58:	6893      	ldr	r3, [r2, #8]
 8010c5a:	2180      	movs	r1, #128	; 0x80
 8010c5c:	438b      	bics	r3, r1
 8010c5e:	69a1      	ldr	r1, [r4, #24]
 8010c60:	430b      	orrs	r3, r1
 8010c62:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010c64:	2301      	movs	r3, #1
 8010c66:	7763      	strb	r3, [r4, #29]
}
 8010c68:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010c6a:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010c6c:	f7fc fb20 	bl	800d2b0 <HAL_CRC_MspInit>
 8010c70:	e7dc      	b.n	8010c2c <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010c72:	6823      	ldr	r3, [r4, #0]
 8010c74:	6922      	ldr	r2, [r4, #16]
 8010c76:	611a      	str	r2, [r3, #16]
 8010c78:	e7e6      	b.n	8010c48 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010c7a:	2001      	movs	r0, #1
 8010c7c:	e7f4      	b.n	8010c68 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010c7e:	2001      	movs	r0, #1
 8010c80:	e7f2      	b.n	8010c68 <HAL_CRC_Init+0x48>

08010c82 <HAL_CRC_Accumulate>:
{
 8010c82:	b510      	push	{r4, lr}
 8010c84:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010c86:	7f03      	ldrb	r3, [r0, #28]
 8010c88:	2b01      	cmp	r3, #1
 8010c8a:	d024      	beq.n	8010cd6 <HAL_CRC_Accumulate+0x54>
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010c90:	3301      	adds	r3, #1
 8010c92:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010c94:	6a03      	ldr	r3, [r0, #32]
 8010c96:	2b02      	cmp	r3, #2
 8010c98:	d01a      	beq.n	8010cd0 <HAL_CRC_Accumulate+0x4e>
 8010c9a:	2b03      	cmp	r3, #3
 8010c9c:	d007      	beq.n	8010cae <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010c9e:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	d011      	beq.n	8010cc8 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010ca8:	2300      	movs	r3, #0
 8010caa:	7723      	strb	r3, [r4, #28]
}
 8010cac:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8010cae:	2a00      	cmp	r2, #0
 8010cb0:	d007      	beq.n	8010cc2 <HAL_CRC_Accumulate+0x40>
 8010cb2:	000b      	movs	r3, r1
 8010cb4:	0092      	lsls	r2, r2, #2
 8010cb6:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010cb8:	6822      	ldr	r2, [r4, #0]
 8010cba:	cb01      	ldmia	r3!, {r0}
 8010cbc:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010cbe:	428b      	cmp	r3, r1
 8010cc0:	d1fa      	bne.n	8010cb8 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010cc2:	6823      	ldr	r3, [r4, #0]
 8010cc4:	6818      	ldr	r0, [r3, #0]
      break;
 8010cc6:	e7ed      	b.n	8010ca4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010cc8:	0020      	movs	r0, r4
 8010cca:	f7ff ff53 	bl	8010b74 <CRC_Handle_8>
      break;
 8010cce:	e7e9      	b.n	8010ca4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010cd0:	f7ff ff8d 	bl	8010bee <CRC_Handle_16>
      break;
 8010cd4:	e7e6      	b.n	8010ca4 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010cd6:	2002      	movs	r0, #2
 8010cd8:	e7e8      	b.n	8010cac <HAL_CRC_Accumulate+0x2a>

08010cda <HAL_CRC_Calculate>:
{
 8010cda:	b570      	push	{r4, r5, r6, lr}
 8010cdc:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010cde:	7f03      	ldrb	r3, [r0, #28]
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	d029      	beq.n	8010d38 <HAL_CRC_Calculate+0x5e>
 8010ce4:	2501      	movs	r5, #1
 8010ce6:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010ce8:	2302      	movs	r3, #2
 8010cea:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010cec:	6800      	ldr	r0, [r0, #0]
 8010cee:	6883      	ldr	r3, [r0, #8]
 8010cf0:	432b      	orrs	r3, r5
 8010cf2:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010cf4:	6a23      	ldr	r3, [r4, #32]
 8010cf6:	2b02      	cmp	r3, #2
 8010cf8:	d01a      	beq.n	8010d30 <HAL_CRC_Calculate+0x56>
 8010cfa:	2b03      	cmp	r3, #3
 8010cfc:	d007      	beq.n	8010d0e <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010cfe:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d011      	beq.n	8010d28 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010d04:	2301      	movs	r3, #1
 8010d06:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010d08:	2300      	movs	r3, #0
 8010d0a:	7723      	strb	r3, [r4, #28]
}
 8010d0c:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010d0e:	2a00      	cmp	r2, #0
 8010d10:	d007      	beq.n	8010d22 <HAL_CRC_Calculate+0x48>
 8010d12:	000b      	movs	r3, r1
 8010d14:	0092      	lsls	r2, r2, #2
 8010d16:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010d18:	6820      	ldr	r0, [r4, #0]
 8010d1a:	cb20      	ldmia	r3!, {r5}
 8010d1c:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010d1e:	428b      	cmp	r3, r1
 8010d20:	d1fa      	bne.n	8010d18 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8010d22:	6823      	ldr	r3, [r4, #0]
 8010d24:	6818      	ldr	r0, [r3, #0]
      break;
 8010d26:	e7ed      	b.n	8010d04 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010d28:	0020      	movs	r0, r4
 8010d2a:	f7ff ff23 	bl	8010b74 <CRC_Handle_8>
      break;
 8010d2e:	e7e9      	b.n	8010d04 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010d30:	0020      	movs	r0, r4
 8010d32:	f7ff ff5c 	bl	8010bee <CRC_Handle_16>
      break;
 8010d36:	e7e5      	b.n	8010d04 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010d38:	2002      	movs	r0, #2
 8010d3a:	e7e7      	b.n	8010d0c <HAL_CRC_Calculate+0x32>

08010d3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010d3c:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010d3e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010d40:	2501      	movs	r5, #1
 8010d42:	002c      	movs	r4, r5
 8010d44:	409c      	lsls	r4, r3
 8010d46:	4221      	tst	r1, r4
 8010d48:	d10b      	bne.n	8010d62 <HAL_CRCEx_Polynomial_Set+0x26>
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	d2f9      	bcs.n	8010d42 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8010d4e:	2a10      	cmp	r2, #16
 8010d50:	d01c      	beq.n	8010d8c <HAL_CRCEx_Polynomial_Set+0x50>
 8010d52:	2a18      	cmp	r2, #24
 8010d54:	d01e      	beq.n	8010d94 <HAL_CRCEx_Polynomial_Set+0x58>
 8010d56:	2a08      	cmp	r2, #8
 8010d58:	d109      	bne.n	8010d6e <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 8010d5a:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8010d5c:	2b0f      	cmp	r3, #15
 8010d5e:	d906      	bls.n	8010d6e <HAL_CRCEx_Polynomial_Set+0x32>
 8010d60:	e00e      	b.n	8010d80 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8010d62:	2a10      	cmp	r2, #16
 8010d64:	d012      	beq.n	8010d8c <HAL_CRCEx_Polynomial_Set+0x50>
 8010d66:	2a18      	cmp	r2, #24
 8010d68:	d00c      	beq.n	8010d84 <HAL_CRCEx_Polynomial_Set+0x48>
 8010d6a:	2a08      	cmp	r2, #8
 8010d6c:	d0f5      	beq.n	8010d5a <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010d6e:	6803      	ldr	r3, [r0, #0]
 8010d70:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010d72:	6801      	ldr	r1, [r0, #0]
 8010d74:	688b      	ldr	r3, [r1, #8]
 8010d76:	2018      	movs	r0, #24
 8010d78:	4383      	bics	r3, r0
 8010d7a:	431a      	orrs	r2, r3
 8010d7c:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010d7e:	2400      	movs	r4, #0
}
 8010d80:	0020      	movs	r0, r4
 8010d82:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010d84:	2b06      	cmp	r3, #6
 8010d86:	d9f2      	bls.n	8010d6e <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 8010d88:	2401      	movs	r4, #1
 8010d8a:	e7f9      	b.n	8010d80 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010d8c:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 8010d8e:	2b07      	cmp	r3, #7
 8010d90:	d9ed      	bls.n	8010d6e <HAL_CRCEx_Polynomial_Set+0x32>
 8010d92:	e7f5      	b.n	8010d80 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010d94:	2401      	movs	r4, #1
 8010d96:	e7f3      	b.n	8010d80 <HAL_CRCEx_Polynomial_Set+0x44>

08010d98 <HAL_CRCEx_Init>:
{
 8010d98:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010d9a:	7903      	ldrb	r3, [r0, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d109      	bne.n	8010db4 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010da0:	6803      	ldr	r3, [r0, #0]
 8010da2:	4a08      	ldr	r2, [pc, #32]	; (8010dc4 <HAL_CRCEx_Init+0x2c>)
 8010da4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010da6:	6802      	ldr	r2, [r0, #0]
 8010da8:	6893      	ldr	r3, [r2, #8]
 8010daa:	2118      	movs	r1, #24
 8010dac:	438b      	bics	r3, r1
 8010dae:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010db0:	2000      	movs	r0, #0
}
 8010db2:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010db4:	68c2      	ldr	r2, [r0, #12]
 8010db6:	6881      	ldr	r1, [r0, #8]
 8010db8:	f7ff ffc0 	bl	8010d3c <HAL_CRCEx_Polynomial_Set>
 8010dbc:	1e43      	subs	r3, r0, #1
 8010dbe:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010dc0:	b2c0      	uxtb	r0, r0
 8010dc2:	e7f6      	b.n	8010db2 <HAL_CRCEx_Init+0x1a>
 8010dc4:	04c11db7 	.word	0x04c11db7

08010dc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010dc8:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d022      	beq.n	8010e14 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010dce:	2321      	movs	r3, #33	; 0x21
 8010dd0:	5cc3      	ldrb	r3, [r0, r3]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d102      	bne.n	8010ddc <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8010dd6:	3320      	adds	r3, #32
 8010dd8:	2200      	movs	r2, #0
 8010dda:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010ddc:	2121      	movs	r1, #33	; 0x21
 8010dde:	2302      	movs	r3, #2
 8010de0:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010de2:	6804      	ldr	r4, [r0, #0]
 8010de4:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010de6:	4a0c      	ldr	r2, [pc, #48]	; (8010e18 <HAL_DMA_Init+0x50>)
 8010de8:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010dea:	6843      	ldr	r3, [r0, #4]
 8010dec:	6885      	ldr	r5, [r0, #8]
 8010dee:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010df0:	68c5      	ldr	r5, [r0, #12]
 8010df2:	432b      	orrs	r3, r5
 8010df4:	6905      	ldr	r5, [r0, #16]
 8010df6:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010df8:	6945      	ldr	r5, [r0, #20]
 8010dfa:	432b      	orrs	r3, r5
 8010dfc:	6985      	ldr	r5, [r0, #24]
 8010dfe:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010e00:	69c5      	ldr	r5, [r0, #28]
 8010e02:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010e04:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010e06:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010e10:	2000      	movs	r0, #0
}  
 8010e12:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010e14:	2001      	movs	r0, #1
 8010e16:	e7fc      	b.n	8010e12 <HAL_DMA_Init+0x4a>
 8010e18:	ffffc00f 	.word	0xffffc00f

08010e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010e1c:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010e1e:	2420      	movs	r4, #32
 8010e20:	5d04      	ldrb	r4, [r0, r4]
 8010e22:	2c01      	cmp	r4, #1
 8010e24:	d02d      	beq.n	8010e82 <HAL_DMA_Start_IT+0x66>
 8010e26:	2601      	movs	r6, #1
 8010e28:	2420      	movs	r4, #32
 8010e2a:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010e2c:	3401      	adds	r4, #1
 8010e2e:	2502      	movs	r5, #2
 8010e30:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010e32:	6805      	ldr	r5, [r0, #0]
 8010e34:	682c      	ldr	r4, [r5, #0]
 8010e36:	43b4      	bics	r4, r6
 8010e38:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010e3a:	6804      	ldr	r4, [r0, #0]
 8010e3c:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010e3e:	6843      	ldr	r3, [r0, #4]
 8010e40:	2b10      	cmp	r3, #16
 8010e42:	d019      	beq.n	8010e78 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010e44:	6803      	ldr	r3, [r0, #0]
 8010e46:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010e48:	6803      	ldr	r3, [r0, #0]
 8010e4a:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010e4c:	6802      	ldr	r2, [r0, #0]
 8010e4e:	6813      	ldr	r3, [r2, #0]
 8010e50:	2102      	movs	r1, #2
 8010e52:	430b      	orrs	r3, r1
 8010e54:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010e56:	6802      	ldr	r2, [r0, #0]
 8010e58:	6813      	ldr	r3, [r2, #0]
 8010e5a:	3102      	adds	r1, #2
 8010e5c:	430b      	orrs	r3, r1
 8010e5e:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010e60:	6802      	ldr	r2, [r0, #0]
 8010e62:	6813      	ldr	r3, [r2, #0]
 8010e64:	3104      	adds	r1, #4
 8010e66:	430b      	orrs	r3, r1
 8010e68:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010e6a:	6802      	ldr	r2, [r0, #0]
 8010e6c:	6813      	ldr	r3, [r2, #0]
 8010e6e:	3907      	subs	r1, #7
 8010e70:	430b      	orrs	r3, r1
 8010e72:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010e74:	2000      	movs	r0, #0
} 
 8010e76:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010e78:	6803      	ldr	r3, [r0, #0]
 8010e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010e7c:	6803      	ldr	r3, [r0, #0]
 8010e7e:	60d9      	str	r1, [r3, #12]
 8010e80:	e7e4      	b.n	8010e4c <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8010e82:	2002      	movs	r0, #2
 8010e84:	e7f7      	b.n	8010e76 <HAL_DMA_Start_IT+0x5a>

08010e86 <HAL_DMA_Abort>:
{
 8010e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e88:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010e8a:	6802      	ldr	r2, [r0, #0]
 8010e8c:	6813      	ldr	r3, [r2, #0]
 8010e8e:	2101      	movs	r1, #1
 8010e90:	438b      	bics	r3, r1
 8010e92:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010e94:	f7ff fac8 	bl	8010428 <HAL_GetTick>
 8010e98:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010e9a:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010e9c:	26fa      	movs	r6, #250	; 0xfa
 8010e9e:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010ea0:	6823      	ldr	r3, [r4, #0]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	421d      	tst	r5, r3
 8010ea6:	d00f      	beq.n	8010ec8 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010ea8:	f7ff fabe 	bl	8010428 <HAL_GetTick>
 8010eac:	1bc0      	subs	r0, r0, r7
 8010eae:	42b0      	cmp	r0, r6
 8010eb0:	d9f6      	bls.n	8010ea0 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010eb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010eb4:	2220      	movs	r2, #32
 8010eb6:	4313      	orrs	r3, r2
 8010eb8:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010eba:	2321      	movs	r3, #33	; 0x21
 8010ebc:	2103      	movs	r1, #3
 8010ebe:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010ec4:	2003      	movs	r0, #3
 8010ec6:	e006      	b.n	8010ed6 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010ec8:	2321      	movs	r3, #33	; 0x21
 8010eca:	2201      	movs	r2, #1
 8010ecc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010ece:	3b01      	subs	r3, #1
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010ed4:	2000      	movs	r0, #0
}
 8010ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ed8 <HAL_DMA_IRQHandler>:
{        
 8010ed8:	b510      	push	{r4, lr}
 8010eda:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010edc:	6803      	ldr	r3, [r0, #0]
 8010ede:	4ab4      	ldr	r2, [pc, #720]	; (80111b0 <HAL_DMA_IRQHandler+0x2d8>)
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d94d      	bls.n	8010f80 <HAL_DMA_IRQHandler+0xa8>
 8010ee4:	4ab3      	ldr	r2, [pc, #716]	; (80111b4 <HAL_DMA_IRQHandler+0x2dc>)
 8010ee6:	6811      	ldr	r1, [r2, #0]
 8010ee8:	4ab3      	ldr	r2, [pc, #716]	; (80111b8 <HAL_DMA_IRQHandler+0x2e0>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d026      	beq.n	8010f3c <HAL_DMA_IRQHandler+0x64>
 8010eee:	4ab3      	ldr	r2, [pc, #716]	; (80111bc <HAL_DMA_IRQHandler+0x2e4>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d02d      	beq.n	8010f50 <HAL_DMA_IRQHandler+0x78>
 8010ef4:	4ab2      	ldr	r2, [pc, #712]	; (80111c0 <HAL_DMA_IRQHandler+0x2e8>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d02c      	beq.n	8010f54 <HAL_DMA_IRQHandler+0x7c>
 8010efa:	4ab2      	ldr	r2, [pc, #712]	; (80111c4 <HAL_DMA_IRQHandler+0x2ec>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d02c      	beq.n	8010f5a <HAL_DMA_IRQHandler+0x82>
 8010f00:	4ab1      	ldr	r2, [pc, #708]	; (80111c8 <HAL_DMA_IRQHandler+0x2f0>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d02c      	beq.n	8010f60 <HAL_DMA_IRQHandler+0x88>
 8010f06:	4ab1      	ldr	r2, [pc, #708]	; (80111cc <HAL_DMA_IRQHandler+0x2f4>)
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d02c      	beq.n	8010f66 <HAL_DMA_IRQHandler+0x8e>
 8010f0c:	4aa8      	ldr	r2, [pc, #672]	; (80111b0 <HAL_DMA_IRQHandler+0x2d8>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d02c      	beq.n	8010f6c <HAL_DMA_IRQHandler+0x94>
 8010f12:	4aaf      	ldr	r2, [pc, #700]	; (80111d0 <HAL_DMA_IRQHandler+0x2f8>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d02c      	beq.n	8010f72 <HAL_DMA_IRQHandler+0x9a>
 8010f18:	4aae      	ldr	r2, [pc, #696]	; (80111d4 <HAL_DMA_IRQHandler+0x2fc>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d02b      	beq.n	8010f76 <HAL_DMA_IRQHandler+0x9e>
 8010f1e:	4aae      	ldr	r2, [pc, #696]	; (80111d8 <HAL_DMA_IRQHandler+0x300>)
 8010f20:	4293      	cmp	r3, r2
 8010f22:	d02a      	beq.n	8010f7a <HAL_DMA_IRQHandler+0xa2>
 8010f24:	4aad      	ldr	r2, [pc, #692]	; (80111dc <HAL_DMA_IRQHandler+0x304>)
 8010f26:	189a      	adds	r2, r3, r2
 8010f28:	4250      	negs	r0, r2
 8010f2a:	4142      	adcs	r2, r0
 8010f2c:	4252      	negs	r2, r2
 8010f2e:	48ac      	ldr	r0, [pc, #688]	; (80111e0 <HAL_DMA_IRQHandler+0x308>)
 8010f30:	4002      	ands	r2, r0
 8010f32:	2080      	movs	r0, #128	; 0x80
 8010f34:	0300      	lsls	r0, r0, #12
 8010f36:	4684      	mov	ip, r0
 8010f38:	4462      	add	r2, ip
 8010f3a:	e000      	b.n	8010f3e <HAL_DMA_IRQHandler+0x66>
 8010f3c:	2208      	movs	r2, #8
 8010f3e:	420a      	tst	r2, r1
 8010f40:	d100      	bne.n	8010f44 <HAL_DMA_IRQHandler+0x6c>
 8010f42:	e0e6      	b.n	8011112 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	0712      	lsls	r2, r2, #28
 8010f48:	d500      	bpl.n	8010f4c <HAL_DMA_IRQHandler+0x74>
 8010f4a:	e097      	b.n	801107c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010f4c:	6823      	ldr	r3, [r4, #0]
 8010f4e:	e0e0      	b.n	8011112 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010f50:	2280      	movs	r2, #128	; 0x80
 8010f52:	e7f4      	b.n	8010f3e <HAL_DMA_IRQHandler+0x66>
 8010f54:	2280      	movs	r2, #128	; 0x80
 8010f56:	0112      	lsls	r2, r2, #4
 8010f58:	e7f1      	b.n	8010f3e <HAL_DMA_IRQHandler+0x66>
 8010f5a:	2280      	movs	r2, #128	; 0x80
 8010f5c:	0212      	lsls	r2, r2, #8
 8010f5e:	e7ee      	b.n	8010f3e <HAL_DMA_IRQHandler+0x66>
 8010f60:	2280      	movs	r2, #128	; 0x80
 8010f62:	0312      	lsls	r2, r2, #12
 8010f64:	e7eb      	b.n	8010f3e <HAL_DMA_IRQHandler+0x66>
 8010f66:	2280      	movs	r2, #128	; 0x80
 8010f68:	0412      	lsls	r2, r2, #16
 8010f6a:	e7e8      	b.n	8010f3e <HAL_DMA_IRQHandler+0x66>
 8010f6c:	2280      	movs	r2, #128	; 0x80
 8010f6e:	0512      	lsls	r2, r2, #20
 8010f70:	e7e5      	b.n	8010f3e <HAL_DMA_IRQHandler+0x66>
 8010f72:	2208      	movs	r2, #8
 8010f74:	e7e3      	b.n	8010f3e <HAL_DMA_IRQHandler+0x66>
 8010f76:	2280      	movs	r2, #128	; 0x80
 8010f78:	e7e1      	b.n	8010f3e <HAL_DMA_IRQHandler+0x66>
 8010f7a:	2280      	movs	r2, #128	; 0x80
 8010f7c:	0112      	lsls	r2, r2, #4
 8010f7e:	e7de      	b.n	8010f3e <HAL_DMA_IRQHandler+0x66>
 8010f80:	4a98      	ldr	r2, [pc, #608]	; (80111e4 <HAL_DMA_IRQHandler+0x30c>)
 8010f82:	6811      	ldr	r1, [r2, #0]
 8010f84:	4a8c      	ldr	r2, [pc, #560]	; (80111b8 <HAL_DMA_IRQHandler+0x2e0>)
 8010f86:	4293      	cmp	r3, r2
 8010f88:	d026      	beq.n	8010fd8 <HAL_DMA_IRQHandler+0x100>
 8010f8a:	4a8c      	ldr	r2, [pc, #560]	; (80111bc <HAL_DMA_IRQHandler+0x2e4>)
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	d05d      	beq.n	801104c <HAL_DMA_IRQHandler+0x174>
 8010f90:	4a8b      	ldr	r2, [pc, #556]	; (80111c0 <HAL_DMA_IRQHandler+0x2e8>)
 8010f92:	4293      	cmp	r3, r2
 8010f94:	d05c      	beq.n	8011050 <HAL_DMA_IRQHandler+0x178>
 8010f96:	4a8b      	ldr	r2, [pc, #556]	; (80111c4 <HAL_DMA_IRQHandler+0x2ec>)
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d05c      	beq.n	8011056 <HAL_DMA_IRQHandler+0x17e>
 8010f9c:	4a8a      	ldr	r2, [pc, #552]	; (80111c8 <HAL_DMA_IRQHandler+0x2f0>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d05c      	beq.n	801105c <HAL_DMA_IRQHandler+0x184>
 8010fa2:	4a8a      	ldr	r2, [pc, #552]	; (80111cc <HAL_DMA_IRQHandler+0x2f4>)
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	d05c      	beq.n	8011062 <HAL_DMA_IRQHandler+0x18a>
 8010fa8:	4a81      	ldr	r2, [pc, #516]	; (80111b0 <HAL_DMA_IRQHandler+0x2d8>)
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d05c      	beq.n	8011068 <HAL_DMA_IRQHandler+0x190>
 8010fae:	4a88      	ldr	r2, [pc, #544]	; (80111d0 <HAL_DMA_IRQHandler+0x2f8>)
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d05c      	beq.n	801106e <HAL_DMA_IRQHandler+0x196>
 8010fb4:	4a87      	ldr	r2, [pc, #540]	; (80111d4 <HAL_DMA_IRQHandler+0x2fc>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d05b      	beq.n	8011072 <HAL_DMA_IRQHandler+0x19a>
 8010fba:	4a87      	ldr	r2, [pc, #540]	; (80111d8 <HAL_DMA_IRQHandler+0x300>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d05a      	beq.n	8011076 <HAL_DMA_IRQHandler+0x19e>
 8010fc0:	4a86      	ldr	r2, [pc, #536]	; (80111dc <HAL_DMA_IRQHandler+0x304>)
 8010fc2:	189a      	adds	r2, r3, r2
 8010fc4:	4250      	negs	r0, r2
 8010fc6:	4142      	adcs	r2, r0
 8010fc8:	4252      	negs	r2, r2
 8010fca:	4885      	ldr	r0, [pc, #532]	; (80111e0 <HAL_DMA_IRQHandler+0x308>)
 8010fcc:	4002      	ands	r2, r0
 8010fce:	2080      	movs	r0, #128	; 0x80
 8010fd0:	0300      	lsls	r0, r0, #12
 8010fd2:	4684      	mov	ip, r0
 8010fd4:	4462      	add	r2, ip
 8010fd6:	e000      	b.n	8010fda <HAL_DMA_IRQHandler+0x102>
 8010fd8:	2208      	movs	r2, #8
 8010fda:	420a      	tst	r2, r1
 8010fdc:	d000      	beq.n	8010fe0 <HAL_DMA_IRQHandler+0x108>
 8010fde:	e3ad      	b.n	801173c <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010fe0:	4a80      	ldr	r2, [pc, #512]	; (80111e4 <HAL_DMA_IRQHandler+0x30c>)
 8010fe2:	6811      	ldr	r1, [r2, #0]
 8010fe4:	4a74      	ldr	r2, [pc, #464]	; (80111b8 <HAL_DMA_IRQHandler+0x2e0>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d100      	bne.n	8010fec <HAL_DMA_IRQHandler+0x114>
 8010fea:	e198      	b.n	801131e <HAL_DMA_IRQHandler+0x446>
 8010fec:	4a73      	ldr	r2, [pc, #460]	; (80111bc <HAL_DMA_IRQHandler+0x2e4>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d100      	bne.n	8010ff4 <HAL_DMA_IRQHandler+0x11c>
 8010ff2:	e1da      	b.n	80113aa <HAL_DMA_IRQHandler+0x4d2>
 8010ff4:	4a72      	ldr	r2, [pc, #456]	; (80111c0 <HAL_DMA_IRQHandler+0x2e8>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d100      	bne.n	8010ffc <HAL_DMA_IRQHandler+0x124>
 8010ffa:	e1d8      	b.n	80113ae <HAL_DMA_IRQHandler+0x4d6>
 8010ffc:	4a71      	ldr	r2, [pc, #452]	; (80111c4 <HAL_DMA_IRQHandler+0x2ec>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d100      	bne.n	8011004 <HAL_DMA_IRQHandler+0x12c>
 8011002:	e1d7      	b.n	80113b4 <HAL_DMA_IRQHandler+0x4dc>
 8011004:	4a70      	ldr	r2, [pc, #448]	; (80111c8 <HAL_DMA_IRQHandler+0x2f0>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d100      	bne.n	801100c <HAL_DMA_IRQHandler+0x134>
 801100a:	e1d6      	b.n	80113ba <HAL_DMA_IRQHandler+0x4e2>
 801100c:	4a6f      	ldr	r2, [pc, #444]	; (80111cc <HAL_DMA_IRQHandler+0x2f4>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d100      	bne.n	8011014 <HAL_DMA_IRQHandler+0x13c>
 8011012:	e1d5      	b.n	80113c0 <HAL_DMA_IRQHandler+0x4e8>
 8011014:	4a66      	ldr	r2, [pc, #408]	; (80111b0 <HAL_DMA_IRQHandler+0x2d8>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d100      	bne.n	801101c <HAL_DMA_IRQHandler+0x144>
 801101a:	e1d4      	b.n	80113c6 <HAL_DMA_IRQHandler+0x4ee>
 801101c:	4a6c      	ldr	r2, [pc, #432]	; (80111d0 <HAL_DMA_IRQHandler+0x2f8>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d100      	bne.n	8011024 <HAL_DMA_IRQHandler+0x14c>
 8011022:	e1d3      	b.n	80113cc <HAL_DMA_IRQHandler+0x4f4>
 8011024:	4a6b      	ldr	r2, [pc, #428]	; (80111d4 <HAL_DMA_IRQHandler+0x2fc>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d100      	bne.n	801102c <HAL_DMA_IRQHandler+0x154>
 801102a:	e1d1      	b.n	80113d0 <HAL_DMA_IRQHandler+0x4f8>
 801102c:	4a6a      	ldr	r2, [pc, #424]	; (80111d8 <HAL_DMA_IRQHandler+0x300>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d100      	bne.n	8011034 <HAL_DMA_IRQHandler+0x15c>
 8011032:	e1cf      	b.n	80113d4 <HAL_DMA_IRQHandler+0x4fc>
 8011034:	4a69      	ldr	r2, [pc, #420]	; (80111dc <HAL_DMA_IRQHandler+0x304>)
 8011036:	189a      	adds	r2, r3, r2
 8011038:	4250      	negs	r0, r2
 801103a:	4142      	adcs	r2, r0
 801103c:	4252      	negs	r2, r2
 801103e:	486a      	ldr	r0, [pc, #424]	; (80111e8 <HAL_DMA_IRQHandler+0x310>)
 8011040:	4002      	ands	r2, r0
 8011042:	2080      	movs	r0, #128	; 0x80
 8011044:	02c0      	lsls	r0, r0, #11
 8011046:	4684      	mov	ip, r0
 8011048:	4462      	add	r2, ip
 801104a:	e169      	b.n	8011320 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801104c:	2280      	movs	r2, #128	; 0x80
 801104e:	e7c4      	b.n	8010fda <HAL_DMA_IRQHandler+0x102>
 8011050:	2280      	movs	r2, #128	; 0x80
 8011052:	0112      	lsls	r2, r2, #4
 8011054:	e7c1      	b.n	8010fda <HAL_DMA_IRQHandler+0x102>
 8011056:	2280      	movs	r2, #128	; 0x80
 8011058:	0212      	lsls	r2, r2, #8
 801105a:	e7be      	b.n	8010fda <HAL_DMA_IRQHandler+0x102>
 801105c:	2280      	movs	r2, #128	; 0x80
 801105e:	0312      	lsls	r2, r2, #12
 8011060:	e7bb      	b.n	8010fda <HAL_DMA_IRQHandler+0x102>
 8011062:	2280      	movs	r2, #128	; 0x80
 8011064:	0412      	lsls	r2, r2, #16
 8011066:	e7b8      	b.n	8010fda <HAL_DMA_IRQHandler+0x102>
 8011068:	2280      	movs	r2, #128	; 0x80
 801106a:	0512      	lsls	r2, r2, #20
 801106c:	e7b5      	b.n	8010fda <HAL_DMA_IRQHandler+0x102>
 801106e:	2208      	movs	r2, #8
 8011070:	e7b3      	b.n	8010fda <HAL_DMA_IRQHandler+0x102>
 8011072:	2280      	movs	r2, #128	; 0x80
 8011074:	e7b1      	b.n	8010fda <HAL_DMA_IRQHandler+0x102>
 8011076:	2280      	movs	r2, #128	; 0x80
 8011078:	0112      	lsls	r2, r2, #4
 801107a:	e7ae      	b.n	8010fda <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	2108      	movs	r1, #8
 8011080:	438a      	bics	r2, r1
 8011082:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011084:	6823      	ldr	r3, [r4, #0]
 8011086:	4a4a      	ldr	r2, [pc, #296]	; (80111b0 <HAL_DMA_IRQHandler+0x2d8>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d800      	bhi.n	801108e <HAL_DMA_IRQHandler+0x1b6>
 801108c:	e0ae      	b.n	80111ec <HAL_DMA_IRQHandler+0x314>
 801108e:	4a4a      	ldr	r2, [pc, #296]	; (80111b8 <HAL_DMA_IRQHandler+0x2e0>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d027      	beq.n	80110e4 <HAL_DMA_IRQHandler+0x20c>
 8011094:	4a49      	ldr	r2, [pc, #292]	; (80111bc <HAL_DMA_IRQHandler+0x2e4>)
 8011096:	4293      	cmp	r3, r2
 8011098:	d071      	beq.n	801117e <HAL_DMA_IRQHandler+0x2a6>
 801109a:	4a49      	ldr	r2, [pc, #292]	; (80111c0 <HAL_DMA_IRQHandler+0x2e8>)
 801109c:	4293      	cmp	r3, r2
 801109e:	d070      	beq.n	8011182 <HAL_DMA_IRQHandler+0x2aa>
 80110a0:	4a48      	ldr	r2, [pc, #288]	; (80111c4 <HAL_DMA_IRQHandler+0x2ec>)
 80110a2:	4293      	cmp	r3, r2
 80110a4:	d070      	beq.n	8011188 <HAL_DMA_IRQHandler+0x2b0>
 80110a6:	4a48      	ldr	r2, [pc, #288]	; (80111c8 <HAL_DMA_IRQHandler+0x2f0>)
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d070      	beq.n	801118e <HAL_DMA_IRQHandler+0x2b6>
 80110ac:	4a47      	ldr	r2, [pc, #284]	; (80111cc <HAL_DMA_IRQHandler+0x2f4>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d070      	beq.n	8011194 <HAL_DMA_IRQHandler+0x2bc>
 80110b2:	4a3f      	ldr	r2, [pc, #252]	; (80111b0 <HAL_DMA_IRQHandler+0x2d8>)
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d070      	beq.n	801119a <HAL_DMA_IRQHandler+0x2c2>
 80110b8:	4a45      	ldr	r2, [pc, #276]	; (80111d0 <HAL_DMA_IRQHandler+0x2f8>)
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d070      	beq.n	80111a0 <HAL_DMA_IRQHandler+0x2c8>
 80110be:	4a45      	ldr	r2, [pc, #276]	; (80111d4 <HAL_DMA_IRQHandler+0x2fc>)
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d06f      	beq.n	80111a4 <HAL_DMA_IRQHandler+0x2cc>
 80110c4:	4a44      	ldr	r2, [pc, #272]	; (80111d8 <HAL_DMA_IRQHandler+0x300>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d06e      	beq.n	80111a8 <HAL_DMA_IRQHandler+0x2d0>
 80110ca:	4a44      	ldr	r2, [pc, #272]	; (80111dc <HAL_DMA_IRQHandler+0x304>)
 80110cc:	4694      	mov	ip, r2
 80110ce:	4463      	add	r3, ip
 80110d0:	425a      	negs	r2, r3
 80110d2:	4153      	adcs	r3, r2
 80110d4:	425b      	negs	r3, r3
 80110d6:	4a42      	ldr	r2, [pc, #264]	; (80111e0 <HAL_DMA_IRQHandler+0x308>)
 80110d8:	4013      	ands	r3, r2
 80110da:	2280      	movs	r2, #128	; 0x80
 80110dc:	0312      	lsls	r2, r2, #12
 80110de:	4694      	mov	ip, r2
 80110e0:	4463      	add	r3, ip
 80110e2:	e000      	b.n	80110e6 <HAL_DMA_IRQHandler+0x20e>
 80110e4:	2308      	movs	r3, #8
 80110e6:	4a33      	ldr	r2, [pc, #204]	; (80111b4 <HAL_DMA_IRQHandler+0x2dc>)
 80110e8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80110ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110ec:	2201      	movs	r2, #1
 80110ee:	4313      	orrs	r3, r2
 80110f0:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80110f2:	2321      	movs	r3, #33	; 0x21
 80110f4:	3203      	adds	r2, #3
 80110f6:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 80110f8:	3b01      	subs	r3, #1
 80110fa:	2200      	movs	r2, #0
 80110fc:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80110fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011100:	2b00      	cmp	r3, #0
 8011102:	d001      	beq.n	8011108 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 8011104:	0020      	movs	r0, r4
 8011106:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011108:	6823      	ldr	r3, [r4, #0]
 801110a:	4a29      	ldr	r2, [pc, #164]	; (80111b0 <HAL_DMA_IRQHandler+0x2d8>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d800      	bhi.n	8011112 <HAL_DMA_IRQHandler+0x23a>
 8011110:	e766      	b.n	8010fe0 <HAL_DMA_IRQHandler+0x108>
 8011112:	4a28      	ldr	r2, [pc, #160]	; (80111b4 <HAL_DMA_IRQHandler+0x2dc>)
 8011114:	6811      	ldr	r1, [r2, #0]
 8011116:	4a28      	ldr	r2, [pc, #160]	; (80111b8 <HAL_DMA_IRQHandler+0x2e0>)
 8011118:	4293      	cmp	r3, r2
 801111a:	d100      	bne.n	801111e <HAL_DMA_IRQHandler+0x246>
 801111c:	e0ad      	b.n	801127a <HAL_DMA_IRQHandler+0x3a2>
 801111e:	4a27      	ldr	r2, [pc, #156]	; (80111bc <HAL_DMA_IRQHandler+0x2e4>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d100      	bne.n	8011126 <HAL_DMA_IRQHandler+0x24e>
 8011124:	e0e3      	b.n	80112ee <HAL_DMA_IRQHandler+0x416>
 8011126:	4a26      	ldr	r2, [pc, #152]	; (80111c0 <HAL_DMA_IRQHandler+0x2e8>)
 8011128:	4293      	cmp	r3, r2
 801112a:	d100      	bne.n	801112e <HAL_DMA_IRQHandler+0x256>
 801112c:	e0e1      	b.n	80112f2 <HAL_DMA_IRQHandler+0x41a>
 801112e:	4a25      	ldr	r2, [pc, #148]	; (80111c4 <HAL_DMA_IRQHandler+0x2ec>)
 8011130:	4293      	cmp	r3, r2
 8011132:	d100      	bne.n	8011136 <HAL_DMA_IRQHandler+0x25e>
 8011134:	e0e0      	b.n	80112f8 <HAL_DMA_IRQHandler+0x420>
 8011136:	4a24      	ldr	r2, [pc, #144]	; (80111c8 <HAL_DMA_IRQHandler+0x2f0>)
 8011138:	4293      	cmp	r3, r2
 801113a:	d100      	bne.n	801113e <HAL_DMA_IRQHandler+0x266>
 801113c:	e0df      	b.n	80112fe <HAL_DMA_IRQHandler+0x426>
 801113e:	4a23      	ldr	r2, [pc, #140]	; (80111cc <HAL_DMA_IRQHandler+0x2f4>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d100      	bne.n	8011146 <HAL_DMA_IRQHandler+0x26e>
 8011144:	e0de      	b.n	8011304 <HAL_DMA_IRQHandler+0x42c>
 8011146:	4a1a      	ldr	r2, [pc, #104]	; (80111b0 <HAL_DMA_IRQHandler+0x2d8>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d100      	bne.n	801114e <HAL_DMA_IRQHandler+0x276>
 801114c:	e0dd      	b.n	801130a <HAL_DMA_IRQHandler+0x432>
 801114e:	4a20      	ldr	r2, [pc, #128]	; (80111d0 <HAL_DMA_IRQHandler+0x2f8>)
 8011150:	4293      	cmp	r3, r2
 8011152:	d100      	bne.n	8011156 <HAL_DMA_IRQHandler+0x27e>
 8011154:	e0dc      	b.n	8011310 <HAL_DMA_IRQHandler+0x438>
 8011156:	4a1f      	ldr	r2, [pc, #124]	; (80111d4 <HAL_DMA_IRQHandler+0x2fc>)
 8011158:	4293      	cmp	r3, r2
 801115a:	d100      	bne.n	801115e <HAL_DMA_IRQHandler+0x286>
 801115c:	e0da      	b.n	8011314 <HAL_DMA_IRQHandler+0x43c>
 801115e:	4a1e      	ldr	r2, [pc, #120]	; (80111d8 <HAL_DMA_IRQHandler+0x300>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d100      	bne.n	8011166 <HAL_DMA_IRQHandler+0x28e>
 8011164:	e0d8      	b.n	8011318 <HAL_DMA_IRQHandler+0x440>
 8011166:	4a1d      	ldr	r2, [pc, #116]	; (80111dc <HAL_DMA_IRQHandler+0x304>)
 8011168:	189a      	adds	r2, r3, r2
 801116a:	4250      	negs	r0, r2
 801116c:	4142      	adcs	r2, r0
 801116e:	4252      	negs	r2, r2
 8011170:	481d      	ldr	r0, [pc, #116]	; (80111e8 <HAL_DMA_IRQHandler+0x310>)
 8011172:	4002      	ands	r2, r0
 8011174:	2080      	movs	r0, #128	; 0x80
 8011176:	02c0      	lsls	r0, r0, #11
 8011178:	4684      	mov	ip, r0
 801117a:	4462      	add	r2, ip
 801117c:	e07e      	b.n	801127c <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801117e:	2380      	movs	r3, #128	; 0x80
 8011180:	e7b1      	b.n	80110e6 <HAL_DMA_IRQHandler+0x20e>
 8011182:	2380      	movs	r3, #128	; 0x80
 8011184:	011b      	lsls	r3, r3, #4
 8011186:	e7ae      	b.n	80110e6 <HAL_DMA_IRQHandler+0x20e>
 8011188:	2380      	movs	r3, #128	; 0x80
 801118a:	021b      	lsls	r3, r3, #8
 801118c:	e7ab      	b.n	80110e6 <HAL_DMA_IRQHandler+0x20e>
 801118e:	2380      	movs	r3, #128	; 0x80
 8011190:	031b      	lsls	r3, r3, #12
 8011192:	e7a8      	b.n	80110e6 <HAL_DMA_IRQHandler+0x20e>
 8011194:	2380      	movs	r3, #128	; 0x80
 8011196:	041b      	lsls	r3, r3, #16
 8011198:	e7a5      	b.n	80110e6 <HAL_DMA_IRQHandler+0x20e>
 801119a:	2380      	movs	r3, #128	; 0x80
 801119c:	051b      	lsls	r3, r3, #20
 801119e:	e7a2      	b.n	80110e6 <HAL_DMA_IRQHandler+0x20e>
 80111a0:	2308      	movs	r3, #8
 80111a2:	e7a0      	b.n	80110e6 <HAL_DMA_IRQHandler+0x20e>
 80111a4:	2380      	movs	r3, #128	; 0x80
 80111a6:	e79e      	b.n	80110e6 <HAL_DMA_IRQHandler+0x20e>
 80111a8:	2380      	movs	r3, #128	; 0x80
 80111aa:	011b      	lsls	r3, r3, #4
 80111ac:	e79b      	b.n	80110e6 <HAL_DMA_IRQHandler+0x20e>
 80111ae:	46c0      	nop			; (mov r8, r8)
 80111b0:	40020080 	.word	0x40020080
 80111b4:	40020400 	.word	0x40020400
 80111b8:	40020008 	.word	0x40020008
 80111bc:	4002001c 	.word	0x4002001c
 80111c0:	40020030 	.word	0x40020030
 80111c4:	40020044 	.word	0x40020044
 80111c8:	40020058 	.word	0x40020058
 80111cc:	4002006c 	.word	0x4002006c
 80111d0:	40020408 	.word	0x40020408
 80111d4:	4002041c 	.word	0x4002041c
 80111d8:	40020430 	.word	0x40020430
 80111dc:	bffdfbbc 	.word	0xbffdfbbc
 80111e0:	fff88000 	.word	0xfff88000
 80111e4:	40020000 	.word	0x40020000
 80111e8:	fffc4000 	.word	0xfffc4000
 80111ec:	4aaa      	ldr	r2, [pc, #680]	; (8011498 <HAL_DMA_IRQHandler+0x5c0>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d027      	beq.n	8011242 <HAL_DMA_IRQHandler+0x36a>
 80111f2:	4aaa      	ldr	r2, [pc, #680]	; (801149c <HAL_DMA_IRQHandler+0x5c4>)
 80111f4:	4293      	cmp	r3, r2
 80111f6:	d028      	beq.n	801124a <HAL_DMA_IRQHandler+0x372>
 80111f8:	4aa9      	ldr	r2, [pc, #676]	; (80114a0 <HAL_DMA_IRQHandler+0x5c8>)
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d027      	beq.n	801124e <HAL_DMA_IRQHandler+0x376>
 80111fe:	4aa9      	ldr	r2, [pc, #676]	; (80114a4 <HAL_DMA_IRQHandler+0x5cc>)
 8011200:	4293      	cmp	r3, r2
 8011202:	d027      	beq.n	8011254 <HAL_DMA_IRQHandler+0x37c>
 8011204:	4aa8      	ldr	r2, [pc, #672]	; (80114a8 <HAL_DMA_IRQHandler+0x5d0>)
 8011206:	4293      	cmp	r3, r2
 8011208:	d027      	beq.n	801125a <HAL_DMA_IRQHandler+0x382>
 801120a:	4aa8      	ldr	r2, [pc, #672]	; (80114ac <HAL_DMA_IRQHandler+0x5d4>)
 801120c:	4293      	cmp	r3, r2
 801120e:	d027      	beq.n	8011260 <HAL_DMA_IRQHandler+0x388>
 8011210:	4aa7      	ldr	r2, [pc, #668]	; (80114b0 <HAL_DMA_IRQHandler+0x5d8>)
 8011212:	4293      	cmp	r3, r2
 8011214:	d027      	beq.n	8011266 <HAL_DMA_IRQHandler+0x38e>
 8011216:	4aa7      	ldr	r2, [pc, #668]	; (80114b4 <HAL_DMA_IRQHandler+0x5dc>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d027      	beq.n	801126c <HAL_DMA_IRQHandler+0x394>
 801121c:	4aa6      	ldr	r2, [pc, #664]	; (80114b8 <HAL_DMA_IRQHandler+0x5e0>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d026      	beq.n	8011270 <HAL_DMA_IRQHandler+0x398>
 8011222:	4aa6      	ldr	r2, [pc, #664]	; (80114bc <HAL_DMA_IRQHandler+0x5e4>)
 8011224:	4293      	cmp	r3, r2
 8011226:	d025      	beq.n	8011274 <HAL_DMA_IRQHandler+0x39c>
 8011228:	4aa5      	ldr	r2, [pc, #660]	; (80114c0 <HAL_DMA_IRQHandler+0x5e8>)
 801122a:	4694      	mov	ip, r2
 801122c:	4463      	add	r3, ip
 801122e:	425a      	negs	r2, r3
 8011230:	4153      	adcs	r3, r2
 8011232:	425b      	negs	r3, r3
 8011234:	4aa3      	ldr	r2, [pc, #652]	; (80114c4 <HAL_DMA_IRQHandler+0x5ec>)
 8011236:	4013      	ands	r3, r2
 8011238:	2280      	movs	r2, #128	; 0x80
 801123a:	0312      	lsls	r2, r2, #12
 801123c:	4694      	mov	ip, r2
 801123e:	4463      	add	r3, ip
 8011240:	e000      	b.n	8011244 <HAL_DMA_IRQHandler+0x36c>
 8011242:	2308      	movs	r3, #8
 8011244:	4aa0      	ldr	r2, [pc, #640]	; (80114c8 <HAL_DMA_IRQHandler+0x5f0>)
 8011246:	6053      	str	r3, [r2, #4]
 8011248:	e74f      	b.n	80110ea <HAL_DMA_IRQHandler+0x212>
 801124a:	2380      	movs	r3, #128	; 0x80
 801124c:	e7fa      	b.n	8011244 <HAL_DMA_IRQHandler+0x36c>
 801124e:	2380      	movs	r3, #128	; 0x80
 8011250:	011b      	lsls	r3, r3, #4
 8011252:	e7f7      	b.n	8011244 <HAL_DMA_IRQHandler+0x36c>
 8011254:	2380      	movs	r3, #128	; 0x80
 8011256:	021b      	lsls	r3, r3, #8
 8011258:	e7f4      	b.n	8011244 <HAL_DMA_IRQHandler+0x36c>
 801125a:	2380      	movs	r3, #128	; 0x80
 801125c:	031b      	lsls	r3, r3, #12
 801125e:	e7f1      	b.n	8011244 <HAL_DMA_IRQHandler+0x36c>
 8011260:	2380      	movs	r3, #128	; 0x80
 8011262:	041b      	lsls	r3, r3, #16
 8011264:	e7ee      	b.n	8011244 <HAL_DMA_IRQHandler+0x36c>
 8011266:	2380      	movs	r3, #128	; 0x80
 8011268:	051b      	lsls	r3, r3, #20
 801126a:	e7eb      	b.n	8011244 <HAL_DMA_IRQHandler+0x36c>
 801126c:	2308      	movs	r3, #8
 801126e:	e7e9      	b.n	8011244 <HAL_DMA_IRQHandler+0x36c>
 8011270:	2380      	movs	r3, #128	; 0x80
 8011272:	e7e7      	b.n	8011244 <HAL_DMA_IRQHandler+0x36c>
 8011274:	2380      	movs	r3, #128	; 0x80
 8011276:	011b      	lsls	r3, r3, #4
 8011278:	e7e4      	b.n	8011244 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801127a:	2204      	movs	r2, #4
 801127c:	420a      	tst	r2, r1
 801127e:	d152      	bne.n	8011326 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011280:	6821      	ldr	r1, [r4, #0]
 8011282:	4b92      	ldr	r3, [pc, #584]	; (80114cc <HAL_DMA_IRQHandler+0x5f4>)
 8011284:	6818      	ldr	r0, [r3, #0]
 8011286:	4a84      	ldr	r2, [pc, #528]	; (8011498 <HAL_DMA_IRQHandler+0x5c0>)
 8011288:	4291      	cmp	r1, r2
 801128a:	d100      	bne.n	801128e <HAL_DMA_IRQHandler+0x3b6>
 801128c:	e16b      	b.n	8011566 <HAL_DMA_IRQHandler+0x68e>
 801128e:	4a83      	ldr	r2, [pc, #524]	; (801149c <HAL_DMA_IRQHandler+0x5c4>)
 8011290:	4291      	cmp	r1, r2
 8011292:	d100      	bne.n	8011296 <HAL_DMA_IRQHandler+0x3be>
 8011294:	e1aa      	b.n	80115ec <HAL_DMA_IRQHandler+0x714>
 8011296:	4a82      	ldr	r2, [pc, #520]	; (80114a0 <HAL_DMA_IRQHandler+0x5c8>)
 8011298:	4291      	cmp	r1, r2
 801129a:	d100      	bne.n	801129e <HAL_DMA_IRQHandler+0x3c6>
 801129c:	e1a8      	b.n	80115f0 <HAL_DMA_IRQHandler+0x718>
 801129e:	4a81      	ldr	r2, [pc, #516]	; (80114a4 <HAL_DMA_IRQHandler+0x5cc>)
 80112a0:	4291      	cmp	r1, r2
 80112a2:	d100      	bne.n	80112a6 <HAL_DMA_IRQHandler+0x3ce>
 80112a4:	e1a7      	b.n	80115f6 <HAL_DMA_IRQHandler+0x71e>
 80112a6:	4b80      	ldr	r3, [pc, #512]	; (80114a8 <HAL_DMA_IRQHandler+0x5d0>)
 80112a8:	4299      	cmp	r1, r3
 80112aa:	d100      	bne.n	80112ae <HAL_DMA_IRQHandler+0x3d6>
 80112ac:	e1a6      	b.n	80115fc <HAL_DMA_IRQHandler+0x724>
 80112ae:	4b7f      	ldr	r3, [pc, #508]	; (80114ac <HAL_DMA_IRQHandler+0x5d4>)
 80112b0:	4299      	cmp	r1, r3
 80112b2:	d100      	bne.n	80112b6 <HAL_DMA_IRQHandler+0x3de>
 80112b4:	e1a5      	b.n	8011602 <HAL_DMA_IRQHandler+0x72a>
 80112b6:	4b7e      	ldr	r3, [pc, #504]	; (80114b0 <HAL_DMA_IRQHandler+0x5d8>)
 80112b8:	4299      	cmp	r1, r3
 80112ba:	d100      	bne.n	80112be <HAL_DMA_IRQHandler+0x3e6>
 80112bc:	e1a4      	b.n	8011608 <HAL_DMA_IRQHandler+0x730>
 80112be:	4b7d      	ldr	r3, [pc, #500]	; (80114b4 <HAL_DMA_IRQHandler+0x5dc>)
 80112c0:	4299      	cmp	r1, r3
 80112c2:	d100      	bne.n	80112c6 <HAL_DMA_IRQHandler+0x3ee>
 80112c4:	e1a3      	b.n	801160e <HAL_DMA_IRQHandler+0x736>
 80112c6:	4b7c      	ldr	r3, [pc, #496]	; (80114b8 <HAL_DMA_IRQHandler+0x5e0>)
 80112c8:	4299      	cmp	r1, r3
 80112ca:	d100      	bne.n	80112ce <HAL_DMA_IRQHandler+0x3f6>
 80112cc:	e1a1      	b.n	8011612 <HAL_DMA_IRQHandler+0x73a>
 80112ce:	4b7b      	ldr	r3, [pc, #492]	; (80114bc <HAL_DMA_IRQHandler+0x5e4>)
 80112d0:	4299      	cmp	r1, r3
 80112d2:	d100      	bne.n	80112d6 <HAL_DMA_IRQHandler+0x3fe>
 80112d4:	e19f      	b.n	8011616 <HAL_DMA_IRQHandler+0x73e>
 80112d6:	4b7a      	ldr	r3, [pc, #488]	; (80114c0 <HAL_DMA_IRQHandler+0x5e8>)
 80112d8:	18ca      	adds	r2, r1, r3
 80112da:	4253      	negs	r3, r2
 80112dc:	415a      	adcs	r2, r3
 80112de:	4252      	negs	r2, r2
 80112e0:	4b7b      	ldr	r3, [pc, #492]	; (80114d0 <HAL_DMA_IRQHandler+0x5f8>)
 80112e2:	4013      	ands	r3, r2
 80112e4:	2280      	movs	r2, #128	; 0x80
 80112e6:	0292      	lsls	r2, r2, #10
 80112e8:	4694      	mov	ip, r2
 80112ea:	4463      	add	r3, ip
 80112ec:	e13c      	b.n	8011568 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80112ee:	2240      	movs	r2, #64	; 0x40
 80112f0:	e7c4      	b.n	801127c <HAL_DMA_IRQHandler+0x3a4>
 80112f2:	2280      	movs	r2, #128	; 0x80
 80112f4:	00d2      	lsls	r2, r2, #3
 80112f6:	e7c1      	b.n	801127c <HAL_DMA_IRQHandler+0x3a4>
 80112f8:	2280      	movs	r2, #128	; 0x80
 80112fa:	01d2      	lsls	r2, r2, #7
 80112fc:	e7be      	b.n	801127c <HAL_DMA_IRQHandler+0x3a4>
 80112fe:	2280      	movs	r2, #128	; 0x80
 8011300:	02d2      	lsls	r2, r2, #11
 8011302:	e7bb      	b.n	801127c <HAL_DMA_IRQHandler+0x3a4>
 8011304:	2280      	movs	r2, #128	; 0x80
 8011306:	03d2      	lsls	r2, r2, #15
 8011308:	e7b8      	b.n	801127c <HAL_DMA_IRQHandler+0x3a4>
 801130a:	2280      	movs	r2, #128	; 0x80
 801130c:	04d2      	lsls	r2, r2, #19
 801130e:	e7b5      	b.n	801127c <HAL_DMA_IRQHandler+0x3a4>
 8011310:	2204      	movs	r2, #4
 8011312:	e7b3      	b.n	801127c <HAL_DMA_IRQHandler+0x3a4>
 8011314:	2240      	movs	r2, #64	; 0x40
 8011316:	e7b1      	b.n	801127c <HAL_DMA_IRQHandler+0x3a4>
 8011318:	2280      	movs	r2, #128	; 0x80
 801131a:	00d2      	lsls	r2, r2, #3
 801131c:	e7ae      	b.n	801127c <HAL_DMA_IRQHandler+0x3a4>
 801131e:	2204      	movs	r2, #4
 8011320:	420a      	tst	r2, r1
 8011322:	d100      	bne.n	8011326 <HAL_DMA_IRQHandler+0x44e>
 8011324:	e208      	b.n	8011738 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	0752      	lsls	r2, r2, #29
 801132a:	d561      	bpl.n	80113f0 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	0692      	lsls	r2, r2, #26
 8011330:	d403      	bmi.n	801133a <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011332:	681a      	ldr	r2, [r3, #0]
 8011334:	2104      	movs	r1, #4
 8011336:	438a      	bics	r2, r1
 8011338:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801133a:	6823      	ldr	r3, [r4, #0]
 801133c:	4a5c      	ldr	r2, [pc, #368]	; (80114b0 <HAL_DMA_IRQHandler+0x5d8>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d800      	bhi.n	8011344 <HAL_DMA_IRQHandler+0x46c>
 8011342:	e0c9      	b.n	80114d8 <HAL_DMA_IRQHandler+0x600>
 8011344:	4a54      	ldr	r2, [pc, #336]	; (8011498 <HAL_DMA_IRQHandler+0x5c0>)
 8011346:	4293      	cmp	r3, r2
 8011348:	d047      	beq.n	80113da <HAL_DMA_IRQHandler+0x502>
 801134a:	4a54      	ldr	r2, [pc, #336]	; (801149c <HAL_DMA_IRQHandler+0x5c4>)
 801134c:	4293      	cmp	r3, r2
 801134e:	d100      	bne.n	8011352 <HAL_DMA_IRQHandler+0x47a>
 8011350:	e089      	b.n	8011466 <HAL_DMA_IRQHandler+0x58e>
 8011352:	4a53      	ldr	r2, [pc, #332]	; (80114a0 <HAL_DMA_IRQHandler+0x5c8>)
 8011354:	4293      	cmp	r3, r2
 8011356:	d100      	bne.n	801135a <HAL_DMA_IRQHandler+0x482>
 8011358:	e087      	b.n	801146a <HAL_DMA_IRQHandler+0x592>
 801135a:	4a52      	ldr	r2, [pc, #328]	; (80114a4 <HAL_DMA_IRQHandler+0x5cc>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d100      	bne.n	8011362 <HAL_DMA_IRQHandler+0x48a>
 8011360:	e086      	b.n	8011470 <HAL_DMA_IRQHandler+0x598>
 8011362:	4a51      	ldr	r2, [pc, #324]	; (80114a8 <HAL_DMA_IRQHandler+0x5d0>)
 8011364:	4293      	cmp	r3, r2
 8011366:	d100      	bne.n	801136a <HAL_DMA_IRQHandler+0x492>
 8011368:	e085      	b.n	8011476 <HAL_DMA_IRQHandler+0x59e>
 801136a:	4a50      	ldr	r2, [pc, #320]	; (80114ac <HAL_DMA_IRQHandler+0x5d4>)
 801136c:	4293      	cmp	r3, r2
 801136e:	d100      	bne.n	8011372 <HAL_DMA_IRQHandler+0x49a>
 8011370:	e084      	b.n	801147c <HAL_DMA_IRQHandler+0x5a4>
 8011372:	4a4f      	ldr	r2, [pc, #316]	; (80114b0 <HAL_DMA_IRQHandler+0x5d8>)
 8011374:	4293      	cmp	r3, r2
 8011376:	d100      	bne.n	801137a <HAL_DMA_IRQHandler+0x4a2>
 8011378:	e083      	b.n	8011482 <HAL_DMA_IRQHandler+0x5aa>
 801137a:	4a4e      	ldr	r2, [pc, #312]	; (80114b4 <HAL_DMA_IRQHandler+0x5dc>)
 801137c:	4293      	cmp	r3, r2
 801137e:	d100      	bne.n	8011382 <HAL_DMA_IRQHandler+0x4aa>
 8011380:	e082      	b.n	8011488 <HAL_DMA_IRQHandler+0x5b0>
 8011382:	4a4d      	ldr	r2, [pc, #308]	; (80114b8 <HAL_DMA_IRQHandler+0x5e0>)
 8011384:	4293      	cmp	r3, r2
 8011386:	d100      	bne.n	801138a <HAL_DMA_IRQHandler+0x4b2>
 8011388:	e080      	b.n	801148c <HAL_DMA_IRQHandler+0x5b4>
 801138a:	4a4c      	ldr	r2, [pc, #304]	; (80114bc <HAL_DMA_IRQHandler+0x5e4>)
 801138c:	4293      	cmp	r3, r2
 801138e:	d07f      	beq.n	8011490 <HAL_DMA_IRQHandler+0x5b8>
 8011390:	4a4b      	ldr	r2, [pc, #300]	; (80114c0 <HAL_DMA_IRQHandler+0x5e8>)
 8011392:	4694      	mov	ip, r2
 8011394:	4463      	add	r3, ip
 8011396:	425a      	negs	r2, r3
 8011398:	4153      	adcs	r3, r2
 801139a:	425b      	negs	r3, r3
 801139c:	4a4d      	ldr	r2, [pc, #308]	; (80114d4 <HAL_DMA_IRQHandler+0x5fc>)
 801139e:	4013      	ands	r3, r2
 80113a0:	2280      	movs	r2, #128	; 0x80
 80113a2:	02d2      	lsls	r2, r2, #11
 80113a4:	4694      	mov	ip, r2
 80113a6:	4463      	add	r3, ip
 80113a8:	e018      	b.n	80113dc <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80113aa:	2240      	movs	r2, #64	; 0x40
 80113ac:	e7b8      	b.n	8011320 <HAL_DMA_IRQHandler+0x448>
 80113ae:	2280      	movs	r2, #128	; 0x80
 80113b0:	00d2      	lsls	r2, r2, #3
 80113b2:	e7b5      	b.n	8011320 <HAL_DMA_IRQHandler+0x448>
 80113b4:	2280      	movs	r2, #128	; 0x80
 80113b6:	01d2      	lsls	r2, r2, #7
 80113b8:	e7b2      	b.n	8011320 <HAL_DMA_IRQHandler+0x448>
 80113ba:	2280      	movs	r2, #128	; 0x80
 80113bc:	02d2      	lsls	r2, r2, #11
 80113be:	e7af      	b.n	8011320 <HAL_DMA_IRQHandler+0x448>
 80113c0:	2280      	movs	r2, #128	; 0x80
 80113c2:	03d2      	lsls	r2, r2, #15
 80113c4:	e7ac      	b.n	8011320 <HAL_DMA_IRQHandler+0x448>
 80113c6:	2280      	movs	r2, #128	; 0x80
 80113c8:	04d2      	lsls	r2, r2, #19
 80113ca:	e7a9      	b.n	8011320 <HAL_DMA_IRQHandler+0x448>
 80113cc:	2204      	movs	r2, #4
 80113ce:	e7a7      	b.n	8011320 <HAL_DMA_IRQHandler+0x448>
 80113d0:	2240      	movs	r2, #64	; 0x40
 80113d2:	e7a5      	b.n	8011320 <HAL_DMA_IRQHandler+0x448>
 80113d4:	2280      	movs	r2, #128	; 0x80
 80113d6:	00d2      	lsls	r2, r2, #3
 80113d8:	e7a2      	b.n	8011320 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80113da:	2304      	movs	r3, #4
 80113dc:	4a3b      	ldr	r2, [pc, #236]	; (80114cc <HAL_DMA_IRQHandler+0x5f4>)
 80113de:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80113e0:	2321      	movs	r3, #33	; 0x21
 80113e2:	2211      	movs	r2, #17
 80113e4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80113e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d001      	beq.n	80113f0 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 80113ec:	0020      	movs	r0, r4
 80113ee:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80113f0:	6821      	ldr	r1, [r4, #0]
 80113f2:	4b2f      	ldr	r3, [pc, #188]	; (80114b0 <HAL_DMA_IRQHandler+0x5d8>)
 80113f4:	4299      	cmp	r1, r3
 80113f6:	d900      	bls.n	80113fa <HAL_DMA_IRQHandler+0x522>
 80113f8:	e743      	b.n	8011282 <HAL_DMA_IRQHandler+0x3aa>
 80113fa:	4b33      	ldr	r3, [pc, #204]	; (80114c8 <HAL_DMA_IRQHandler+0x5f0>)
 80113fc:	6818      	ldr	r0, [r3, #0]
 80113fe:	4a26      	ldr	r2, [pc, #152]	; (8011498 <HAL_DMA_IRQHandler+0x5c0>)
 8011400:	4291      	cmp	r1, r2
 8011402:	d100      	bne.n	8011406 <HAL_DMA_IRQHandler+0x52e>
 8011404:	e10a      	b.n	801161c <HAL_DMA_IRQHandler+0x744>
 8011406:	4a25      	ldr	r2, [pc, #148]	; (801149c <HAL_DMA_IRQHandler+0x5c4>)
 8011408:	4291      	cmp	r1, r2
 801140a:	d100      	bne.n	801140e <HAL_DMA_IRQHandler+0x536>
 801140c:	e10c      	b.n	8011628 <HAL_DMA_IRQHandler+0x750>
 801140e:	4a24      	ldr	r2, [pc, #144]	; (80114a0 <HAL_DMA_IRQHandler+0x5c8>)
 8011410:	4291      	cmp	r1, r2
 8011412:	d100      	bne.n	8011416 <HAL_DMA_IRQHandler+0x53e>
 8011414:	e10a      	b.n	801162c <HAL_DMA_IRQHandler+0x754>
 8011416:	4a23      	ldr	r2, [pc, #140]	; (80114a4 <HAL_DMA_IRQHandler+0x5cc>)
 8011418:	4291      	cmp	r1, r2
 801141a:	d100      	bne.n	801141e <HAL_DMA_IRQHandler+0x546>
 801141c:	e109      	b.n	8011632 <HAL_DMA_IRQHandler+0x75a>
 801141e:	4b22      	ldr	r3, [pc, #136]	; (80114a8 <HAL_DMA_IRQHandler+0x5d0>)
 8011420:	4299      	cmp	r1, r3
 8011422:	d100      	bne.n	8011426 <HAL_DMA_IRQHandler+0x54e>
 8011424:	e108      	b.n	8011638 <HAL_DMA_IRQHandler+0x760>
 8011426:	4b21      	ldr	r3, [pc, #132]	; (80114ac <HAL_DMA_IRQHandler+0x5d4>)
 8011428:	4299      	cmp	r1, r3
 801142a:	d100      	bne.n	801142e <HAL_DMA_IRQHandler+0x556>
 801142c:	e107      	b.n	801163e <HAL_DMA_IRQHandler+0x766>
 801142e:	4b20      	ldr	r3, [pc, #128]	; (80114b0 <HAL_DMA_IRQHandler+0x5d8>)
 8011430:	4299      	cmp	r1, r3
 8011432:	d100      	bne.n	8011436 <HAL_DMA_IRQHandler+0x55e>
 8011434:	e106      	b.n	8011644 <HAL_DMA_IRQHandler+0x76c>
 8011436:	4b1f      	ldr	r3, [pc, #124]	; (80114b4 <HAL_DMA_IRQHandler+0x5dc>)
 8011438:	4299      	cmp	r1, r3
 801143a:	d100      	bne.n	801143e <HAL_DMA_IRQHandler+0x566>
 801143c:	e105      	b.n	801164a <HAL_DMA_IRQHandler+0x772>
 801143e:	4b1e      	ldr	r3, [pc, #120]	; (80114b8 <HAL_DMA_IRQHandler+0x5e0>)
 8011440:	4299      	cmp	r1, r3
 8011442:	d100      	bne.n	8011446 <HAL_DMA_IRQHandler+0x56e>
 8011444:	e103      	b.n	801164e <HAL_DMA_IRQHandler+0x776>
 8011446:	4b1d      	ldr	r3, [pc, #116]	; (80114bc <HAL_DMA_IRQHandler+0x5e4>)
 8011448:	4299      	cmp	r1, r3
 801144a:	d100      	bne.n	801144e <HAL_DMA_IRQHandler+0x576>
 801144c:	e101      	b.n	8011652 <HAL_DMA_IRQHandler+0x77a>
 801144e:	4b1c      	ldr	r3, [pc, #112]	; (80114c0 <HAL_DMA_IRQHandler+0x5e8>)
 8011450:	18ca      	adds	r2, r1, r3
 8011452:	4253      	negs	r3, r2
 8011454:	415a      	adcs	r2, r3
 8011456:	4252      	negs	r2, r2
 8011458:	4b1d      	ldr	r3, [pc, #116]	; (80114d0 <HAL_DMA_IRQHandler+0x5f8>)
 801145a:	4013      	ands	r3, r2
 801145c:	2280      	movs	r2, #128	; 0x80
 801145e:	0292      	lsls	r2, r2, #10
 8011460:	4694      	mov	ip, r2
 8011462:	4463      	add	r3, ip
 8011464:	e0db      	b.n	801161e <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011466:	2340      	movs	r3, #64	; 0x40
 8011468:	e7b8      	b.n	80113dc <HAL_DMA_IRQHandler+0x504>
 801146a:	2380      	movs	r3, #128	; 0x80
 801146c:	00db      	lsls	r3, r3, #3
 801146e:	e7b5      	b.n	80113dc <HAL_DMA_IRQHandler+0x504>
 8011470:	2380      	movs	r3, #128	; 0x80
 8011472:	01db      	lsls	r3, r3, #7
 8011474:	e7b2      	b.n	80113dc <HAL_DMA_IRQHandler+0x504>
 8011476:	2380      	movs	r3, #128	; 0x80
 8011478:	02db      	lsls	r3, r3, #11
 801147a:	e7af      	b.n	80113dc <HAL_DMA_IRQHandler+0x504>
 801147c:	2380      	movs	r3, #128	; 0x80
 801147e:	03db      	lsls	r3, r3, #15
 8011480:	e7ac      	b.n	80113dc <HAL_DMA_IRQHandler+0x504>
 8011482:	2380      	movs	r3, #128	; 0x80
 8011484:	04db      	lsls	r3, r3, #19
 8011486:	e7a9      	b.n	80113dc <HAL_DMA_IRQHandler+0x504>
 8011488:	2304      	movs	r3, #4
 801148a:	e7a7      	b.n	80113dc <HAL_DMA_IRQHandler+0x504>
 801148c:	2340      	movs	r3, #64	; 0x40
 801148e:	e7a5      	b.n	80113dc <HAL_DMA_IRQHandler+0x504>
 8011490:	2380      	movs	r3, #128	; 0x80
 8011492:	00db      	lsls	r3, r3, #3
 8011494:	e7a2      	b.n	80113dc <HAL_DMA_IRQHandler+0x504>
 8011496:	46c0      	nop			; (mov r8, r8)
 8011498:	40020008 	.word	0x40020008
 801149c:	4002001c 	.word	0x4002001c
 80114a0:	40020030 	.word	0x40020030
 80114a4:	40020044 	.word	0x40020044
 80114a8:	40020058 	.word	0x40020058
 80114ac:	4002006c 	.word	0x4002006c
 80114b0:	40020080 	.word	0x40020080
 80114b4:	40020408 	.word	0x40020408
 80114b8:	4002041c 	.word	0x4002041c
 80114bc:	40020430 	.word	0x40020430
 80114c0:	bffdfbbc 	.word	0xbffdfbbc
 80114c4:	fff88000 	.word	0xfff88000
 80114c8:	40020000 	.word	0x40020000
 80114cc:	40020400 	.word	0x40020400
 80114d0:	fffe2000 	.word	0xfffe2000
 80114d4:	fffc4000 	.word	0xfffc4000
 80114d8:	4a9b      	ldr	r2, [pc, #620]	; (8011748 <HAL_DMA_IRQHandler+0x870>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d027      	beq.n	801152e <HAL_DMA_IRQHandler+0x656>
 80114de:	4a9b      	ldr	r2, [pc, #620]	; (801174c <HAL_DMA_IRQHandler+0x874>)
 80114e0:	4293      	cmp	r3, r2
 80114e2:	d028      	beq.n	8011536 <HAL_DMA_IRQHandler+0x65e>
 80114e4:	4a9a      	ldr	r2, [pc, #616]	; (8011750 <HAL_DMA_IRQHandler+0x878>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d027      	beq.n	801153a <HAL_DMA_IRQHandler+0x662>
 80114ea:	4a9a      	ldr	r2, [pc, #616]	; (8011754 <HAL_DMA_IRQHandler+0x87c>)
 80114ec:	4293      	cmp	r3, r2
 80114ee:	d027      	beq.n	8011540 <HAL_DMA_IRQHandler+0x668>
 80114f0:	4a99      	ldr	r2, [pc, #612]	; (8011758 <HAL_DMA_IRQHandler+0x880>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d027      	beq.n	8011546 <HAL_DMA_IRQHandler+0x66e>
 80114f6:	4a99      	ldr	r2, [pc, #612]	; (801175c <HAL_DMA_IRQHandler+0x884>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d027      	beq.n	801154c <HAL_DMA_IRQHandler+0x674>
 80114fc:	4a98      	ldr	r2, [pc, #608]	; (8011760 <HAL_DMA_IRQHandler+0x888>)
 80114fe:	4293      	cmp	r3, r2
 8011500:	d027      	beq.n	8011552 <HAL_DMA_IRQHandler+0x67a>
 8011502:	4a98      	ldr	r2, [pc, #608]	; (8011764 <HAL_DMA_IRQHandler+0x88c>)
 8011504:	4293      	cmp	r3, r2
 8011506:	d027      	beq.n	8011558 <HAL_DMA_IRQHandler+0x680>
 8011508:	4a97      	ldr	r2, [pc, #604]	; (8011768 <HAL_DMA_IRQHandler+0x890>)
 801150a:	4293      	cmp	r3, r2
 801150c:	d026      	beq.n	801155c <HAL_DMA_IRQHandler+0x684>
 801150e:	4a97      	ldr	r2, [pc, #604]	; (801176c <HAL_DMA_IRQHandler+0x894>)
 8011510:	4293      	cmp	r3, r2
 8011512:	d025      	beq.n	8011560 <HAL_DMA_IRQHandler+0x688>
 8011514:	4a96      	ldr	r2, [pc, #600]	; (8011770 <HAL_DMA_IRQHandler+0x898>)
 8011516:	4694      	mov	ip, r2
 8011518:	4463      	add	r3, ip
 801151a:	425a      	negs	r2, r3
 801151c:	4153      	adcs	r3, r2
 801151e:	425b      	negs	r3, r3
 8011520:	4a94      	ldr	r2, [pc, #592]	; (8011774 <HAL_DMA_IRQHandler+0x89c>)
 8011522:	4013      	ands	r3, r2
 8011524:	2280      	movs	r2, #128	; 0x80
 8011526:	02d2      	lsls	r2, r2, #11
 8011528:	4694      	mov	ip, r2
 801152a:	4463      	add	r3, ip
 801152c:	e000      	b.n	8011530 <HAL_DMA_IRQHandler+0x658>
 801152e:	2304      	movs	r3, #4
 8011530:	4a91      	ldr	r2, [pc, #580]	; (8011778 <HAL_DMA_IRQHandler+0x8a0>)
 8011532:	6053      	str	r3, [r2, #4]
 8011534:	e754      	b.n	80113e0 <HAL_DMA_IRQHandler+0x508>
 8011536:	2340      	movs	r3, #64	; 0x40
 8011538:	e7fa      	b.n	8011530 <HAL_DMA_IRQHandler+0x658>
 801153a:	2380      	movs	r3, #128	; 0x80
 801153c:	00db      	lsls	r3, r3, #3
 801153e:	e7f7      	b.n	8011530 <HAL_DMA_IRQHandler+0x658>
 8011540:	2380      	movs	r3, #128	; 0x80
 8011542:	01db      	lsls	r3, r3, #7
 8011544:	e7f4      	b.n	8011530 <HAL_DMA_IRQHandler+0x658>
 8011546:	2380      	movs	r3, #128	; 0x80
 8011548:	02db      	lsls	r3, r3, #11
 801154a:	e7f1      	b.n	8011530 <HAL_DMA_IRQHandler+0x658>
 801154c:	2380      	movs	r3, #128	; 0x80
 801154e:	03db      	lsls	r3, r3, #15
 8011550:	e7ee      	b.n	8011530 <HAL_DMA_IRQHandler+0x658>
 8011552:	2380      	movs	r3, #128	; 0x80
 8011554:	04db      	lsls	r3, r3, #19
 8011556:	e7eb      	b.n	8011530 <HAL_DMA_IRQHandler+0x658>
 8011558:	2304      	movs	r3, #4
 801155a:	e7e9      	b.n	8011530 <HAL_DMA_IRQHandler+0x658>
 801155c:	2340      	movs	r3, #64	; 0x40
 801155e:	e7e7      	b.n	8011530 <HAL_DMA_IRQHandler+0x658>
 8011560:	2380      	movs	r3, #128	; 0x80
 8011562:	00db      	lsls	r3, r3, #3
 8011564:	e7e4      	b.n	8011530 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011566:	2302      	movs	r3, #2
 8011568:	4003      	ands	r3, r0
 801156a:	1e5a      	subs	r2, r3, #1
 801156c:	4193      	sbcs	r3, r2
 801156e:	b2db      	uxtb	r3, r3
 8011570:	2b00      	cmp	r3, #0
 8011572:	d100      	bne.n	8011576 <HAL_DMA_IRQHandler+0x69e>
 8011574:	e080      	b.n	8011678 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011576:	680b      	ldr	r3, [r1, #0]
 8011578:	079b      	lsls	r3, r3, #30
 801157a:	d57d      	bpl.n	8011678 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801157c:	680b      	ldr	r3, [r1, #0]
 801157e:	069b      	lsls	r3, r3, #26
 8011580:	d403      	bmi.n	801158a <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011582:	680b      	ldr	r3, [r1, #0]
 8011584:	2202      	movs	r2, #2
 8011586:	4393      	bics	r3, r2
 8011588:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801158a:	6823      	ldr	r3, [r4, #0]
 801158c:	4a74      	ldr	r2, [pc, #464]	; (8011760 <HAL_DMA_IRQHandler+0x888>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d800      	bhi.n	8011594 <HAL_DMA_IRQHandler+0x6bc>
 8011592:	e08a      	b.n	80116aa <HAL_DMA_IRQHandler+0x7d2>
 8011594:	4a6c      	ldr	r2, [pc, #432]	; (8011748 <HAL_DMA_IRQHandler+0x870>)
 8011596:	4293      	cmp	r3, r2
 8011598:	d05e      	beq.n	8011658 <HAL_DMA_IRQHandler+0x780>
 801159a:	4a6c      	ldr	r2, [pc, #432]	; (801174c <HAL_DMA_IRQHandler+0x874>)
 801159c:	4293      	cmp	r3, r2
 801159e:	d100      	bne.n	80115a2 <HAL_DMA_IRQHandler+0x6ca>
 80115a0:	e06b      	b.n	801167a <HAL_DMA_IRQHandler+0x7a2>
 80115a2:	4a6b      	ldr	r2, [pc, #428]	; (8011750 <HAL_DMA_IRQHandler+0x878>)
 80115a4:	4293      	cmp	r3, r2
 80115a6:	d06a      	beq.n	801167e <HAL_DMA_IRQHandler+0x7a6>
 80115a8:	4a6a      	ldr	r2, [pc, #424]	; (8011754 <HAL_DMA_IRQHandler+0x87c>)
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d06a      	beq.n	8011684 <HAL_DMA_IRQHandler+0x7ac>
 80115ae:	4a6a      	ldr	r2, [pc, #424]	; (8011758 <HAL_DMA_IRQHandler+0x880>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d06a      	beq.n	801168a <HAL_DMA_IRQHandler+0x7b2>
 80115b4:	4a69      	ldr	r2, [pc, #420]	; (801175c <HAL_DMA_IRQHandler+0x884>)
 80115b6:	4293      	cmp	r3, r2
 80115b8:	d06a      	beq.n	8011690 <HAL_DMA_IRQHandler+0x7b8>
 80115ba:	4a69      	ldr	r2, [pc, #420]	; (8011760 <HAL_DMA_IRQHandler+0x888>)
 80115bc:	4293      	cmp	r3, r2
 80115be:	d06a      	beq.n	8011696 <HAL_DMA_IRQHandler+0x7be>
 80115c0:	4a68      	ldr	r2, [pc, #416]	; (8011764 <HAL_DMA_IRQHandler+0x88c>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d06a      	beq.n	801169c <HAL_DMA_IRQHandler+0x7c4>
 80115c6:	4a68      	ldr	r2, [pc, #416]	; (8011768 <HAL_DMA_IRQHandler+0x890>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d069      	beq.n	80116a0 <HAL_DMA_IRQHandler+0x7c8>
 80115cc:	4a67      	ldr	r2, [pc, #412]	; (801176c <HAL_DMA_IRQHandler+0x894>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d068      	beq.n	80116a4 <HAL_DMA_IRQHandler+0x7cc>
 80115d2:	4a67      	ldr	r2, [pc, #412]	; (8011770 <HAL_DMA_IRQHandler+0x898>)
 80115d4:	4694      	mov	ip, r2
 80115d6:	4463      	add	r3, ip
 80115d8:	425a      	negs	r2, r3
 80115da:	4153      	adcs	r3, r2
 80115dc:	425b      	negs	r3, r3
 80115de:	4a67      	ldr	r2, [pc, #412]	; (801177c <HAL_DMA_IRQHandler+0x8a4>)
 80115e0:	4013      	ands	r3, r2
 80115e2:	2280      	movs	r2, #128	; 0x80
 80115e4:	0292      	lsls	r2, r2, #10
 80115e6:	4694      	mov	ip, r2
 80115e8:	4463      	add	r3, ip
 80115ea:	e036      	b.n	801165a <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80115ec:	2320      	movs	r3, #32
 80115ee:	e7bb      	b.n	8011568 <HAL_DMA_IRQHandler+0x690>
 80115f0:	2380      	movs	r3, #128	; 0x80
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	e7b8      	b.n	8011568 <HAL_DMA_IRQHandler+0x690>
 80115f6:	2380      	movs	r3, #128	; 0x80
 80115f8:	019b      	lsls	r3, r3, #6
 80115fa:	e7b5      	b.n	8011568 <HAL_DMA_IRQHandler+0x690>
 80115fc:	2380      	movs	r3, #128	; 0x80
 80115fe:	029b      	lsls	r3, r3, #10
 8011600:	e7b2      	b.n	8011568 <HAL_DMA_IRQHandler+0x690>
 8011602:	2380      	movs	r3, #128	; 0x80
 8011604:	039b      	lsls	r3, r3, #14
 8011606:	e7af      	b.n	8011568 <HAL_DMA_IRQHandler+0x690>
 8011608:	2380      	movs	r3, #128	; 0x80
 801160a:	049b      	lsls	r3, r3, #18
 801160c:	e7ac      	b.n	8011568 <HAL_DMA_IRQHandler+0x690>
 801160e:	2302      	movs	r3, #2
 8011610:	e7aa      	b.n	8011568 <HAL_DMA_IRQHandler+0x690>
 8011612:	2320      	movs	r3, #32
 8011614:	e7a8      	b.n	8011568 <HAL_DMA_IRQHandler+0x690>
 8011616:	2380      	movs	r3, #128	; 0x80
 8011618:	009b      	lsls	r3, r3, #2
 801161a:	e7a5      	b.n	8011568 <HAL_DMA_IRQHandler+0x690>
 801161c:	2302      	movs	r3, #2
 801161e:	4003      	ands	r3, r0
 8011620:	1e5a      	subs	r2, r3, #1
 8011622:	4193      	sbcs	r3, r2
 8011624:	b2db      	uxtb	r3, r3
 8011626:	e7a3      	b.n	8011570 <HAL_DMA_IRQHandler+0x698>
 8011628:	2320      	movs	r3, #32
 801162a:	e7f8      	b.n	801161e <HAL_DMA_IRQHandler+0x746>
 801162c:	2380      	movs	r3, #128	; 0x80
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	e7f5      	b.n	801161e <HAL_DMA_IRQHandler+0x746>
 8011632:	2380      	movs	r3, #128	; 0x80
 8011634:	019b      	lsls	r3, r3, #6
 8011636:	e7f2      	b.n	801161e <HAL_DMA_IRQHandler+0x746>
 8011638:	2380      	movs	r3, #128	; 0x80
 801163a:	029b      	lsls	r3, r3, #10
 801163c:	e7ef      	b.n	801161e <HAL_DMA_IRQHandler+0x746>
 801163e:	2380      	movs	r3, #128	; 0x80
 8011640:	039b      	lsls	r3, r3, #14
 8011642:	e7ec      	b.n	801161e <HAL_DMA_IRQHandler+0x746>
 8011644:	2380      	movs	r3, #128	; 0x80
 8011646:	049b      	lsls	r3, r3, #18
 8011648:	e7e9      	b.n	801161e <HAL_DMA_IRQHandler+0x746>
 801164a:	2302      	movs	r3, #2
 801164c:	e7e7      	b.n	801161e <HAL_DMA_IRQHandler+0x746>
 801164e:	2320      	movs	r3, #32
 8011650:	e7e5      	b.n	801161e <HAL_DMA_IRQHandler+0x746>
 8011652:	2380      	movs	r3, #128	; 0x80
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	e7e2      	b.n	801161e <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011658:	2302      	movs	r3, #2
 801165a:	4a49      	ldr	r2, [pc, #292]	; (8011780 <HAL_DMA_IRQHandler+0x8a8>)
 801165c:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 801165e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011660:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011662:	2321      	movs	r3, #33	; 0x21
 8011664:	2201      	movs	r2, #1
 8011666:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011668:	3b01      	subs	r3, #1
 801166a:	2200      	movs	r2, #0
 801166c:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801166e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011670:	2b00      	cmp	r3, #0
 8011672:	d001      	beq.n	8011678 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 8011674:	0020      	movs	r0, r4
 8011676:	4798      	blx	r3
}  
 8011678:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801167a:	2320      	movs	r3, #32
 801167c:	e7ed      	b.n	801165a <HAL_DMA_IRQHandler+0x782>
 801167e:	2380      	movs	r3, #128	; 0x80
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	e7ea      	b.n	801165a <HAL_DMA_IRQHandler+0x782>
 8011684:	2380      	movs	r3, #128	; 0x80
 8011686:	019b      	lsls	r3, r3, #6
 8011688:	e7e7      	b.n	801165a <HAL_DMA_IRQHandler+0x782>
 801168a:	2380      	movs	r3, #128	; 0x80
 801168c:	029b      	lsls	r3, r3, #10
 801168e:	e7e4      	b.n	801165a <HAL_DMA_IRQHandler+0x782>
 8011690:	2380      	movs	r3, #128	; 0x80
 8011692:	039b      	lsls	r3, r3, #14
 8011694:	e7e1      	b.n	801165a <HAL_DMA_IRQHandler+0x782>
 8011696:	2380      	movs	r3, #128	; 0x80
 8011698:	049b      	lsls	r3, r3, #18
 801169a:	e7de      	b.n	801165a <HAL_DMA_IRQHandler+0x782>
 801169c:	2302      	movs	r3, #2
 801169e:	e7dc      	b.n	801165a <HAL_DMA_IRQHandler+0x782>
 80116a0:	2320      	movs	r3, #32
 80116a2:	e7da      	b.n	801165a <HAL_DMA_IRQHandler+0x782>
 80116a4:	2380      	movs	r3, #128	; 0x80
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	e7d7      	b.n	801165a <HAL_DMA_IRQHandler+0x782>
 80116aa:	4a27      	ldr	r2, [pc, #156]	; (8011748 <HAL_DMA_IRQHandler+0x870>)
 80116ac:	4293      	cmp	r3, r2
 80116ae:	d027      	beq.n	8011700 <HAL_DMA_IRQHandler+0x828>
 80116b0:	4a26      	ldr	r2, [pc, #152]	; (801174c <HAL_DMA_IRQHandler+0x874>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d028      	beq.n	8011708 <HAL_DMA_IRQHandler+0x830>
 80116b6:	4a26      	ldr	r2, [pc, #152]	; (8011750 <HAL_DMA_IRQHandler+0x878>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d027      	beq.n	801170c <HAL_DMA_IRQHandler+0x834>
 80116bc:	4a25      	ldr	r2, [pc, #148]	; (8011754 <HAL_DMA_IRQHandler+0x87c>)
 80116be:	4293      	cmp	r3, r2
 80116c0:	d027      	beq.n	8011712 <HAL_DMA_IRQHandler+0x83a>
 80116c2:	4a25      	ldr	r2, [pc, #148]	; (8011758 <HAL_DMA_IRQHandler+0x880>)
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d027      	beq.n	8011718 <HAL_DMA_IRQHandler+0x840>
 80116c8:	4a24      	ldr	r2, [pc, #144]	; (801175c <HAL_DMA_IRQHandler+0x884>)
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d027      	beq.n	801171e <HAL_DMA_IRQHandler+0x846>
 80116ce:	4a24      	ldr	r2, [pc, #144]	; (8011760 <HAL_DMA_IRQHandler+0x888>)
 80116d0:	4293      	cmp	r3, r2
 80116d2:	d027      	beq.n	8011724 <HAL_DMA_IRQHandler+0x84c>
 80116d4:	4a23      	ldr	r2, [pc, #140]	; (8011764 <HAL_DMA_IRQHandler+0x88c>)
 80116d6:	4293      	cmp	r3, r2
 80116d8:	d027      	beq.n	801172a <HAL_DMA_IRQHandler+0x852>
 80116da:	4a23      	ldr	r2, [pc, #140]	; (8011768 <HAL_DMA_IRQHandler+0x890>)
 80116dc:	4293      	cmp	r3, r2
 80116de:	d026      	beq.n	801172e <HAL_DMA_IRQHandler+0x856>
 80116e0:	4a22      	ldr	r2, [pc, #136]	; (801176c <HAL_DMA_IRQHandler+0x894>)
 80116e2:	4293      	cmp	r3, r2
 80116e4:	d025      	beq.n	8011732 <HAL_DMA_IRQHandler+0x85a>
 80116e6:	4a22      	ldr	r2, [pc, #136]	; (8011770 <HAL_DMA_IRQHandler+0x898>)
 80116e8:	4694      	mov	ip, r2
 80116ea:	4463      	add	r3, ip
 80116ec:	425a      	negs	r2, r3
 80116ee:	4153      	adcs	r3, r2
 80116f0:	425b      	negs	r3, r3
 80116f2:	4a22      	ldr	r2, [pc, #136]	; (801177c <HAL_DMA_IRQHandler+0x8a4>)
 80116f4:	4013      	ands	r3, r2
 80116f6:	2280      	movs	r2, #128	; 0x80
 80116f8:	0292      	lsls	r2, r2, #10
 80116fa:	4694      	mov	ip, r2
 80116fc:	4463      	add	r3, ip
 80116fe:	e000      	b.n	8011702 <HAL_DMA_IRQHandler+0x82a>
 8011700:	2302      	movs	r3, #2
 8011702:	4a1d      	ldr	r2, [pc, #116]	; (8011778 <HAL_DMA_IRQHandler+0x8a0>)
 8011704:	6053      	str	r3, [r2, #4]
 8011706:	e7aa      	b.n	801165e <HAL_DMA_IRQHandler+0x786>
 8011708:	2320      	movs	r3, #32
 801170a:	e7fa      	b.n	8011702 <HAL_DMA_IRQHandler+0x82a>
 801170c:	2380      	movs	r3, #128	; 0x80
 801170e:	009b      	lsls	r3, r3, #2
 8011710:	e7f7      	b.n	8011702 <HAL_DMA_IRQHandler+0x82a>
 8011712:	2380      	movs	r3, #128	; 0x80
 8011714:	019b      	lsls	r3, r3, #6
 8011716:	e7f4      	b.n	8011702 <HAL_DMA_IRQHandler+0x82a>
 8011718:	2380      	movs	r3, #128	; 0x80
 801171a:	029b      	lsls	r3, r3, #10
 801171c:	e7f1      	b.n	8011702 <HAL_DMA_IRQHandler+0x82a>
 801171e:	2380      	movs	r3, #128	; 0x80
 8011720:	039b      	lsls	r3, r3, #14
 8011722:	e7ee      	b.n	8011702 <HAL_DMA_IRQHandler+0x82a>
 8011724:	2380      	movs	r3, #128	; 0x80
 8011726:	049b      	lsls	r3, r3, #18
 8011728:	e7eb      	b.n	8011702 <HAL_DMA_IRQHandler+0x82a>
 801172a:	2302      	movs	r3, #2
 801172c:	e7e9      	b.n	8011702 <HAL_DMA_IRQHandler+0x82a>
 801172e:	2320      	movs	r3, #32
 8011730:	e7e7      	b.n	8011702 <HAL_DMA_IRQHandler+0x82a>
 8011732:	2380      	movs	r3, #128	; 0x80
 8011734:	009b      	lsls	r3, r3, #2
 8011736:	e7e4      	b.n	8011702 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011738:	6821      	ldr	r1, [r4, #0]
 801173a:	e65e      	b.n	80113fa <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	0712      	lsls	r2, r2, #28
 8011740:	d500      	bpl.n	8011744 <HAL_DMA_IRQHandler+0x86c>
 8011742:	e49b      	b.n	801107c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011744:	6823      	ldr	r3, [r4, #0]
 8011746:	e44b      	b.n	8010fe0 <HAL_DMA_IRQHandler+0x108>
 8011748:	40020008 	.word	0x40020008
 801174c:	4002001c 	.word	0x4002001c
 8011750:	40020030 	.word	0x40020030
 8011754:	40020044 	.word	0x40020044
 8011758:	40020058 	.word	0x40020058
 801175c:	4002006c 	.word	0x4002006c
 8011760:	40020080 	.word	0x40020080
 8011764:	40020408 	.word	0x40020408
 8011768:	4002041c 	.word	0x4002041c
 801176c:	40020430 	.word	0x40020430
 8011770:	bffdfbbc 	.word	0xbffdfbbc
 8011774:	fffc4000 	.word	0xfffc4000
 8011778:	40020000 	.word	0x40020000
 801177c:	fffe2000 	.word	0xfffe2000
 8011780:	40020400 	.word	0x40020400

08011784 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011784:	4b0a      	ldr	r3, [pc, #40]	; (80117b0 <FLASH_SetErrorCode+0x2c>)
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	06db      	lsls	r3, r3, #27
 801178a:	d504      	bpl.n	8011796 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801178c:	4a09      	ldr	r2, [pc, #36]	; (80117b4 <FLASH_SetErrorCode+0x30>)
 801178e:	69d3      	ldr	r3, [r2, #28]
 8011790:	2102      	movs	r1, #2
 8011792:	430b      	orrs	r3, r1
 8011794:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011796:	4b06      	ldr	r3, [pc, #24]	; (80117b0 <FLASH_SetErrorCode+0x2c>)
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	075b      	lsls	r3, r3, #29
 801179c:	d504      	bpl.n	80117a8 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 801179e:	4a05      	ldr	r2, [pc, #20]	; (80117b4 <FLASH_SetErrorCode+0x30>)
 80117a0:	69d3      	ldr	r3, [r2, #28]
 80117a2:	2101      	movs	r1, #1
 80117a4:	430b      	orrs	r3, r1
 80117a6:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80117a8:	4b01      	ldr	r3, [pc, #4]	; (80117b0 <FLASH_SetErrorCode+0x2c>)
 80117aa:	2214      	movs	r2, #20
 80117ac:	60da      	str	r2, [r3, #12]
}  
 80117ae:	4770      	bx	lr
 80117b0:	40022000 	.word	0x40022000
 80117b4:	20006f90 	.word	0x20006f90

080117b8 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80117b8:	4b05      	ldr	r3, [pc, #20]	; (80117d0 <HAL_FLASH_Unlock+0x18>)
 80117ba:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 80117bc:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80117be:	061b      	lsls	r3, r3, #24
 80117c0:	d505      	bpl.n	80117ce <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80117c2:	4b03      	ldr	r3, [pc, #12]	; (80117d0 <HAL_FLASH_Unlock+0x18>)
 80117c4:	4a03      	ldr	r2, [pc, #12]	; (80117d4 <HAL_FLASH_Unlock+0x1c>)
 80117c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80117c8:	4a03      	ldr	r2, [pc, #12]	; (80117d8 <HAL_FLASH_Unlock+0x20>)
 80117ca:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80117cc:	2000      	movs	r0, #0
}
 80117ce:	4770      	bx	lr
 80117d0:	40022000 	.word	0x40022000
 80117d4:	45670123 	.word	0x45670123
 80117d8:	cdef89ab 	.word	0xcdef89ab

080117dc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80117dc:	4a03      	ldr	r2, [pc, #12]	; (80117ec <HAL_FLASH_Lock+0x10>)
 80117de:	6913      	ldr	r3, [r2, #16]
 80117e0:	2180      	movs	r1, #128	; 0x80
 80117e2:	430b      	orrs	r3, r1
 80117e4:	6113      	str	r3, [r2, #16]
}
 80117e6:	2000      	movs	r0, #0
 80117e8:	4770      	bx	lr
 80117ea:	46c0      	nop			; (mov r8, r8)
 80117ec:	40022000 	.word	0x40022000

080117f0 <FLASH_WaitForLastOperation>:
{
 80117f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117f2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80117f4:	f7fe fe18 	bl	8010428 <HAL_GetTick>
 80117f8:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80117fa:	4e13      	ldr	r6, [pc, #76]	; (8011848 <FLASH_WaitForLastOperation+0x58>)
 80117fc:	2501      	movs	r5, #1
 80117fe:	68f3      	ldr	r3, [r6, #12]
 8011800:	421d      	tst	r5, r3
 8011802:	d00a      	beq.n	801181a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011804:	1c63      	adds	r3, r4, #1
 8011806:	d0fa      	beq.n	80117fe <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011808:	2c00      	cmp	r4, #0
 801180a:	d01a      	beq.n	8011842 <FLASH_WaitForLastOperation+0x52>
 801180c:	f7fe fe0c 	bl	8010428 <HAL_GetTick>
 8011810:	1bc0      	subs	r0, r0, r7
 8011812:	42a0      	cmp	r0, r4
 8011814:	d9f3      	bls.n	80117fe <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8011816:	2003      	movs	r0, #3
 8011818:	e012      	b.n	8011840 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801181a:	4b0b      	ldr	r3, [pc, #44]	; (8011848 <FLASH_WaitForLastOperation+0x58>)
 801181c:	68db      	ldr	r3, [r3, #12]
 801181e:	069b      	lsls	r3, r3, #26
 8011820:	d502      	bpl.n	8011828 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011822:	4b09      	ldr	r3, [pc, #36]	; (8011848 <FLASH_WaitForLastOperation+0x58>)
 8011824:	2220      	movs	r2, #32
 8011826:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011828:	4b07      	ldr	r3, [pc, #28]	; (8011848 <FLASH_WaitForLastOperation+0x58>)
 801182a:	68db      	ldr	r3, [r3, #12]
 801182c:	06db      	lsls	r3, r3, #27
 801182e:	d404      	bmi.n	801183a <FLASH_WaitForLastOperation+0x4a>
 8011830:	4b05      	ldr	r3, [pc, #20]	; (8011848 <FLASH_WaitForLastOperation+0x58>)
 8011832:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011834:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011836:	075b      	lsls	r3, r3, #29
 8011838:	d502      	bpl.n	8011840 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 801183a:	f7ff ffa3 	bl	8011784 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801183e:	2001      	movs	r0, #1
}
 8011840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8011842:	2003      	movs	r0, #3
 8011844:	e7fc      	b.n	8011840 <FLASH_WaitForLastOperation+0x50>
 8011846:	46c0      	nop			; (mov r8, r8)
 8011848:	40022000 	.word	0x40022000

0801184c <HAL_FLASH_Program>:
{
 801184c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801184e:	46de      	mov	lr, fp
 8011850:	4657      	mov	r7, sl
 8011852:	464e      	mov	r6, r9
 8011854:	4645      	mov	r5, r8
 8011856:	b5e0      	push	{r5, r6, r7, lr}
 8011858:	b083      	sub	sp, #12
 801185a:	0004      	movs	r4, r0
 801185c:	000e      	movs	r6, r1
 801185e:	9201      	str	r2, [sp, #4]
 8011860:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011862:	4b2a      	ldr	r3, [pc, #168]	; (801190c <HAL_FLASH_Program+0xc0>)
 8011864:	7e1b      	ldrb	r3, [r3, #24]
 8011866:	2b01      	cmp	r3, #1
 8011868:	d04b      	beq.n	8011902 <HAL_FLASH_Program+0xb6>
 801186a:	4b28      	ldr	r3, [pc, #160]	; (801190c <HAL_FLASH_Program+0xc0>)
 801186c:	2201      	movs	r2, #1
 801186e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011870:	4827      	ldr	r0, [pc, #156]	; (8011910 <HAL_FLASH_Program+0xc4>)
 8011872:	f7ff ffbd 	bl	80117f0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011876:	2800      	cmp	r0, #0
 8011878:	d139      	bne.n	80118ee <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801187a:	2c01      	cmp	r4, #1
 801187c:	d043      	beq.n	8011906 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 801187e:	3c02      	subs	r4, #2
 8011880:	4263      	negs	r3, r4
 8011882:	415c      	adcs	r4, r3
 8011884:	4264      	negs	r4, r4
 8011886:	2301      	movs	r3, #1
 8011888:	439c      	bics	r4, r3
 801188a:	46a0      	mov	r8, r4
 801188c:	3303      	adds	r3, #3
 801188e:	469c      	mov	ip, r3
 8011890:	44e0      	add	r8, ip
{
 8011892:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011894:	4b1d      	ldr	r3, [pc, #116]	; (801190c <HAL_FLASH_Program+0xc0>)
 8011896:	469b      	mov	fp, r3
 8011898:	2300      	movs	r3, #0
 801189a:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801189c:	4c1d      	ldr	r4, [pc, #116]	; (8011914 <HAL_FLASH_Program+0xc8>)
 801189e:	e01e      	b.n	80118de <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80118a0:	2220      	movs	r2, #32
 80118a2:	1ad2      	subs	r2, r2, r3
 80118a4:	4649      	mov	r1, r9
 80118a6:	4091      	lsls	r1, r2
 80118a8:	000a      	movs	r2, r1
 80118aa:	9901      	ldr	r1, [sp, #4]
 80118ac:	40d9      	lsrs	r1, r3
 80118ae:	000b      	movs	r3, r1
 80118b0:	4313      	orrs	r3, r2
 80118b2:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80118b4:	465a      	mov	r2, fp
 80118b6:	4651      	mov	r1, sl
 80118b8:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80118ba:	6922      	ldr	r2, [r4, #16]
 80118bc:	2701      	movs	r7, #1
 80118be:	433a      	orrs	r2, r7
 80118c0:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 80118c2:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80118c4:	4812      	ldr	r0, [pc, #72]	; (8011910 <HAL_FLASH_Program+0xc4>)
 80118c6:	f7ff ff93 	bl	80117f0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80118ca:	6923      	ldr	r3, [r4, #16]
 80118cc:	43bb      	bics	r3, r7
 80118ce:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80118d0:	2800      	cmp	r0, #0
 80118d2:	d10c      	bne.n	80118ee <HAL_FLASH_Program+0xa2>
 80118d4:	3501      	adds	r5, #1
 80118d6:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 80118d8:	b2eb      	uxtb	r3, r5
 80118da:	4598      	cmp	r8, r3
 80118dc:	d907      	bls.n	80118ee <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80118de:	012b      	lsls	r3, r5, #4
 80118e0:	2220      	movs	r2, #32
 80118e2:	4252      	negs	r2, r2
 80118e4:	189a      	adds	r2, r3, r2
 80118e6:	d4db      	bmi.n	80118a0 <HAL_FLASH_Program+0x54>
 80118e8:	464b      	mov	r3, r9
 80118ea:	40d3      	lsrs	r3, r2
 80118ec:	e7e1      	b.n	80118b2 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 80118ee:	4b07      	ldr	r3, [pc, #28]	; (801190c <HAL_FLASH_Program+0xc0>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	761a      	strb	r2, [r3, #24]
}
 80118f4:	b003      	add	sp, #12
 80118f6:	bc3c      	pop	{r2, r3, r4, r5}
 80118f8:	4690      	mov	r8, r2
 80118fa:	4699      	mov	r9, r3
 80118fc:	46a2      	mov	sl, r4
 80118fe:	46ab      	mov	fp, r5
 8011900:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011902:	2002      	movs	r0, #2
 8011904:	e7f6      	b.n	80118f4 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8011906:	2301      	movs	r3, #1
 8011908:	4698      	mov	r8, r3
 801190a:	e7c2      	b.n	8011892 <HAL_FLASH_Program+0x46>
 801190c:	20006f90 	.word	0x20006f90
 8011910:	0000c350 	.word	0x0000c350
 8011914:	40022000 	.word	0x40022000

08011918 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011918:	4b06      	ldr	r3, [pc, #24]	; (8011934 <FLASH_MassErase+0x1c>)
 801191a:	2200      	movs	r2, #0
 801191c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801191e:	4b06      	ldr	r3, [pc, #24]	; (8011938 <FLASH_MassErase+0x20>)
 8011920:	691a      	ldr	r2, [r3, #16]
 8011922:	2104      	movs	r1, #4
 8011924:	430a      	orrs	r2, r1
 8011926:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011928:	691a      	ldr	r2, [r3, #16]
 801192a:	313c      	adds	r1, #60	; 0x3c
 801192c:	430a      	orrs	r2, r1
 801192e:	611a      	str	r2, [r3, #16]
}
 8011930:	4770      	bx	lr
 8011932:	46c0      	nop			; (mov r8, r8)
 8011934:	20006f90 	.word	0x20006f90
 8011938:	40022000 	.word	0x40022000

0801193c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801193c:	4b06      	ldr	r3, [pc, #24]	; (8011958 <FLASH_PageErase+0x1c>)
 801193e:	2200      	movs	r2, #0
 8011940:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011942:	4b06      	ldr	r3, [pc, #24]	; (801195c <FLASH_PageErase+0x20>)
 8011944:	691a      	ldr	r2, [r3, #16]
 8011946:	2102      	movs	r1, #2
 8011948:	430a      	orrs	r2, r1
 801194a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 801194c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801194e:	691a      	ldr	r2, [r3, #16]
 8011950:	313e      	adds	r1, #62	; 0x3e
 8011952:	430a      	orrs	r2, r1
 8011954:	611a      	str	r2, [r3, #16]
}
 8011956:	4770      	bx	lr
 8011958:	20006f90 	.word	0x20006f90
 801195c:	40022000 	.word	0x40022000

08011960 <HAL_FLASHEx_Erase>:
{
 8011960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011962:	46c6      	mov	lr, r8
 8011964:	b500      	push	{lr}
 8011966:	0006      	movs	r6, r0
 8011968:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 801196a:	4b2a      	ldr	r3, [pc, #168]	; (8011a14 <HAL_FLASHEx_Erase+0xb4>)
 801196c:	7e1b      	ldrb	r3, [r3, #24]
 801196e:	2b01      	cmp	r3, #1
 8011970:	d04d      	beq.n	8011a0e <HAL_FLASHEx_Erase+0xae>
 8011972:	4b28      	ldr	r3, [pc, #160]	; (8011a14 <HAL_FLASHEx_Erase+0xb4>)
 8011974:	2201      	movs	r2, #1
 8011976:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011978:	6803      	ldr	r3, [r0, #0]
 801197a:	2b01      	cmp	r3, #1
 801197c:	d029      	beq.n	80119d2 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801197e:	4826      	ldr	r0, [pc, #152]	; (8011a18 <HAL_FLASHEx_Erase+0xb8>)
 8011980:	f7ff ff36 	bl	80117f0 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011984:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011986:	2800      	cmp	r0, #0
 8011988:	d129      	bne.n	80119de <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 801198a:	2301      	movs	r3, #1
 801198c:	425b      	negs	r3, r3
 801198e:	4642      	mov	r2, r8
 8011990:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8011992:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011994:	68b3      	ldr	r3, [r6, #8]
 8011996:	02db      	lsls	r3, r3, #11
 8011998:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 801199a:	429c      	cmp	r4, r3
 801199c:	d235      	bcs.n	8011a0a <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 801199e:	4f1f      	ldr	r7, [pc, #124]	; (8011a1c <HAL_FLASHEx_Erase+0xbc>)
 80119a0:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 80119a2:	0020      	movs	r0, r4
 80119a4:	f7ff ffca 	bl	801193c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80119a8:	481b      	ldr	r0, [pc, #108]	; (8011a18 <HAL_FLASHEx_Erase+0xb8>)
 80119aa:	f7ff ff21 	bl	80117f0 <FLASH_WaitForLastOperation>
 80119ae:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	43ab      	bics	r3, r5
 80119b4:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d124      	bne.n	8011a04 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 80119ba:	2380      	movs	r3, #128	; 0x80
 80119bc:	011b      	lsls	r3, r3, #4
 80119be:	469c      	mov	ip, r3
 80119c0:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80119c2:	68b3      	ldr	r3, [r6, #8]
 80119c4:	02db      	lsls	r3, r3, #11
 80119c6:	6871      	ldr	r1, [r6, #4]
 80119c8:	468c      	mov	ip, r1
 80119ca:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80119cc:	42a3      	cmp	r3, r4
 80119ce:	d8e8      	bhi.n	80119a2 <HAL_FLASHEx_Erase+0x42>
 80119d0:	e005      	b.n	80119de <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80119d2:	4811      	ldr	r0, [pc, #68]	; (8011a18 <HAL_FLASHEx_Erase+0xb8>)
 80119d4:	f7ff ff0c 	bl	80117f0 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 80119d8:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80119da:	2800      	cmp	r0, #0
 80119dc:	d006      	beq.n	80119ec <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 80119de:	4b0d      	ldr	r3, [pc, #52]	; (8011a14 <HAL_FLASHEx_Erase+0xb4>)
 80119e0:	2100      	movs	r1, #0
 80119e2:	7619      	strb	r1, [r3, #24]
}
 80119e4:	0010      	movs	r0, r2
 80119e6:	bc04      	pop	{r2}
 80119e8:	4690      	mov	r8, r2
 80119ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 80119ec:	f7ff ff94 	bl	8011918 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80119f0:	4809      	ldr	r0, [pc, #36]	; (8011a18 <HAL_FLASHEx_Erase+0xb8>)
 80119f2:	f7ff fefd 	bl	80117f0 <FLASH_WaitForLastOperation>
 80119f6:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80119f8:	4908      	ldr	r1, [pc, #32]	; (8011a1c <HAL_FLASHEx_Erase+0xbc>)
 80119fa:	690b      	ldr	r3, [r1, #16]
 80119fc:	2004      	movs	r0, #4
 80119fe:	4383      	bics	r3, r0
 8011a00:	610b      	str	r3, [r1, #16]
 8011a02:	e7ec      	b.n	80119de <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8011a04:	4643      	mov	r3, r8
 8011a06:	601c      	str	r4, [r3, #0]
            break;
 8011a08:	e7e9      	b.n	80119de <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	e7e7      	b.n	80119de <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8011a0e:	2202      	movs	r2, #2
 8011a10:	e7e8      	b.n	80119e4 <HAL_FLASHEx_Erase+0x84>
 8011a12:	46c0      	nop			; (mov r8, r8)
 8011a14:	20006f90 	.word	0x20006f90
 8011a18:	0000c350 	.word	0x0000c350
 8011a1c:	40022000 	.word	0x40022000

08011a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a22:	46de      	mov	lr, fp
 8011a24:	4657      	mov	r7, sl
 8011a26:	464e      	mov	r6, r9
 8011a28:	4645      	mov	r5, r8
 8011a2a:	b5e0      	push	{r5, r6, r7, lr}
 8011a2c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011a2e:	680a      	ldr	r2, [r1, #0]
 8011a30:	2a00      	cmp	r2, #0
 8011a32:	d100      	bne.n	8011a36 <HAL_GPIO_Init+0x16>
 8011a34:	e0bf      	b.n	8011bb6 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 8011a36:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011a38:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011a3a:	2410      	movs	r4, #16
 8011a3c:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011a3e:	3c0d      	subs	r4, #13
 8011a40:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011a42:	2480      	movs	r4, #128	; 0x80
 8011a44:	0564      	lsls	r4, r4, #21
 8011a46:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011a48:	4c5e      	ldr	r4, [pc, #376]	; (8011bc4 <HAL_GPIO_Init+0x1a4>)
 8011a4a:	1904      	adds	r4, r0, r4
 8011a4c:	1e65      	subs	r5, r4, #1
 8011a4e:	41ac      	sbcs	r4, r5
 8011a50:	3404      	adds	r4, #4
 8011a52:	46a1      	mov	r9, r4
 8011a54:	e03b      	b.n	8011ace <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 8011a56:	08dc      	lsrs	r4, r3, #3
 8011a58:	00a4      	lsls	r4, r4, #2
 8011a5a:	1904      	adds	r4, r0, r4
 8011a5c:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011a5e:	2507      	movs	r5, #7
 8011a60:	401d      	ands	r5, r3
 8011a62:	00ad      	lsls	r5, r5, #2
 8011a64:	220f      	movs	r2, #15
 8011a66:	40aa      	lsls	r2, r5
 8011a68:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011a6a:	690a      	ldr	r2, [r1, #16]
 8011a6c:	40aa      	lsls	r2, r5
 8011a6e:	0015      	movs	r5, r2
 8011a70:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8011a72:	6225      	str	r5, [r4, #32]
 8011a74:	e035      	b.n	8011ae2 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011a76:	2500      	movs	r5, #0
 8011a78:	465a      	mov	r2, fp
 8011a7a:	4095      	lsls	r5, r2
 8011a7c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011a7e:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011a80:	4c51      	ldr	r4, [pc, #324]	; (8011bc8 <HAL_GPIO_Init+0x1a8>)
 8011a82:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011a84:	9a01      	ldr	r2, [sp, #4]
 8011a86:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011a88:	684a      	ldr	r2, [r1, #4]
 8011a8a:	03d2      	lsls	r2, r2, #15
 8011a8c:	d500      	bpl.n	8011a90 <HAL_GPIO_Init+0x70>
 8011a8e:	e086      	b.n	8011b9e <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011a90:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011a92:	4f4d      	ldr	r7, [pc, #308]	; (8011bc8 <HAL_GPIO_Init+0x1a8>)
 8011a94:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 8011a96:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011a98:	684a      	ldr	r2, [r1, #4]
 8011a9a:	0392      	lsls	r2, r2, #14
 8011a9c:	d500      	bpl.n	8011aa0 <HAL_GPIO_Init+0x80>
 8011a9e:	e081      	b.n	8011ba4 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011aa0:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011aa2:	4f49      	ldr	r7, [pc, #292]	; (8011bc8 <HAL_GPIO_Init+0x1a8>)
 8011aa4:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011aa6:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011aa8:	684a      	ldr	r2, [r1, #4]
 8011aaa:	02d2      	lsls	r2, r2, #11
 8011aac:	d47d      	bmi.n	8011baa <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011aae:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011ab0:	4f45      	ldr	r7, [pc, #276]	; (8011bc8 <HAL_GPIO_Init+0x1a8>)
 8011ab2:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8011ab4:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011ab6:	684a      	ldr	r2, [r1, #4]
 8011ab8:	0292      	lsls	r2, r2, #10
 8011aba:	d479      	bmi.n	8011bb0 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011abc:	0022      	movs	r2, r4
 8011abe:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011ac0:	4c41      	ldr	r4, [pc, #260]	; (8011bc8 <HAL_GPIO_Init+0x1a8>)
 8011ac2:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8011ac4:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011ac6:	680a      	ldr	r2, [r1, #0]
 8011ac8:	0014      	movs	r4, r2
 8011aca:	40dc      	lsrs	r4, r3
 8011acc:	d073      	beq.n	8011bb6 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011ace:	0034      	movs	r4, r6
 8011ad0:	409c      	lsls	r4, r3
 8011ad2:	4022      	ands	r2, r4
 8011ad4:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8011ad6:	d0f5      	beq.n	8011ac4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011ad8:	684c      	ldr	r4, [r1, #4]
 8011ada:	4642      	mov	r2, r8
 8011adc:	4394      	bics	r4, r2
 8011ade:	2c02      	cmp	r4, #2
 8011ae0:	d0b9      	beq.n	8011a56 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8011ae2:	6804      	ldr	r4, [r0, #0]
 8011ae4:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011ae6:	4665      	mov	r5, ip
 8011ae8:	40bd      	lsls	r5, r7
 8011aea:	43ed      	mvns	r5, r5
 8011aec:	402c      	ands	r4, r5
 8011aee:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011af0:	684c      	ldr	r4, [r1, #4]
 8011af2:	4662      	mov	r2, ip
 8011af4:	4014      	ands	r4, r2
 8011af6:	40bc      	lsls	r4, r7
 8011af8:	465a      	mov	r2, fp
 8011afa:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8011afc:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011afe:	684c      	ldr	r4, [r1, #4]
 8011b00:	4642      	mov	r2, r8
 8011b02:	4394      	bics	r4, r2
 8011b04:	3c01      	subs	r4, #1
 8011b06:	2c01      	cmp	r4, #1
 8011b08:	d813      	bhi.n	8011b32 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8011b0a:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011b0c:	402c      	ands	r4, r5
 8011b0e:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011b10:	68cc      	ldr	r4, [r1, #12]
 8011b12:	40bc      	lsls	r4, r7
 8011b14:	465a      	mov	r2, fp
 8011b16:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8011b18:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8011b1a:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011b1c:	0032      	movs	r2, r6
 8011b1e:	409a      	lsls	r2, r3
 8011b20:	4394      	bics	r4, r2
 8011b22:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011b24:	684a      	ldr	r2, [r1, #4]
 8011b26:	0914      	lsrs	r4, r2, #4
 8011b28:	4034      	ands	r4, r6
 8011b2a:	409c      	lsls	r4, r3
 8011b2c:	465a      	mov	r2, fp
 8011b2e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8011b30:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8011b32:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011b34:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011b36:	688d      	ldr	r5, [r1, #8]
 8011b38:	40bd      	lsls	r5, r7
 8011b3a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8011b3c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011b3e:	684a      	ldr	r2, [r1, #4]
 8011b40:	4654      	mov	r4, sl
 8011b42:	4222      	tst	r2, r4
 8011b44:	d0be      	beq.n	8011ac4 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011b46:	4c21      	ldr	r4, [pc, #132]	; (8011bcc <HAL_GPIO_Init+0x1ac>)
 8011b48:	69a5      	ldr	r5, [r4, #24]
 8011b4a:	4335      	orrs	r5, r6
 8011b4c:	61a5      	str	r5, [r4, #24]
 8011b4e:	69a4      	ldr	r4, [r4, #24]
 8011b50:	4034      	ands	r4, r6
 8011b52:	9403      	str	r4, [sp, #12]
 8011b54:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011b56:	089c      	lsrs	r4, r3, #2
 8011b58:	00a4      	lsls	r4, r4, #2
 8011b5a:	4a1d      	ldr	r2, [pc, #116]	; (8011bd0 <HAL_GPIO_Init+0x1b0>)
 8011b5c:	4693      	mov	fp, r2
 8011b5e:	445c      	add	r4, fp
 8011b60:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011b62:	4667      	mov	r7, ip
 8011b64:	401f      	ands	r7, r3
 8011b66:	00ba      	lsls	r2, r7, #2
 8011b68:	4693      	mov	fp, r2
 8011b6a:	270f      	movs	r7, #15
 8011b6c:	4097      	lsls	r7, r2
 8011b6e:	43bd      	bics	r5, r7
 8011b70:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011b72:	2590      	movs	r5, #144	; 0x90
 8011b74:	05ed      	lsls	r5, r5, #23
 8011b76:	42a8      	cmp	r0, r5
 8011b78:	d100      	bne.n	8011b7c <HAL_GPIO_Init+0x15c>
 8011b7a:	e77c      	b.n	8011a76 <HAL_GPIO_Init+0x56>
 8011b7c:	4d15      	ldr	r5, [pc, #84]	; (8011bd4 <HAL_GPIO_Init+0x1b4>)
 8011b7e:	42a8      	cmp	r0, r5
 8011b80:	d007      	beq.n	8011b92 <HAL_GPIO_Init+0x172>
 8011b82:	4d15      	ldr	r5, [pc, #84]	; (8011bd8 <HAL_GPIO_Init+0x1b8>)
 8011b84:	42a8      	cmp	r0, r5
 8011b86:	d006      	beq.n	8011b96 <HAL_GPIO_Init+0x176>
 8011b88:	4d14      	ldr	r5, [pc, #80]	; (8011bdc <HAL_GPIO_Init+0x1bc>)
 8011b8a:	42a8      	cmp	r0, r5
 8011b8c:	d005      	beq.n	8011b9a <HAL_GPIO_Init+0x17a>
 8011b8e:	464d      	mov	r5, r9
 8011b90:	e772      	b.n	8011a78 <HAL_GPIO_Init+0x58>
 8011b92:	0035      	movs	r5, r6
 8011b94:	e770      	b.n	8011a78 <HAL_GPIO_Init+0x58>
 8011b96:	2502      	movs	r5, #2
 8011b98:	e76e      	b.n	8011a78 <HAL_GPIO_Init+0x58>
 8011b9a:	4665      	mov	r5, ip
 8011b9c:	e76c      	b.n	8011a78 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8011b9e:	9a01      	ldr	r2, [sp, #4]
 8011ba0:	4314      	orrs	r4, r2
 8011ba2:	e776      	b.n	8011a92 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8011ba4:	9a01      	ldr	r2, [sp, #4]
 8011ba6:	4314      	orrs	r4, r2
 8011ba8:	e77b      	b.n	8011aa2 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 8011baa:	9a01      	ldr	r2, [sp, #4]
 8011bac:	4314      	orrs	r4, r2
 8011bae:	e77f      	b.n	8011ab0 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8011bb0:	9a01      	ldr	r2, [sp, #4]
 8011bb2:	4322      	orrs	r2, r4
 8011bb4:	e784      	b.n	8011ac0 <HAL_GPIO_Init+0xa0>
  } 
}
 8011bb6:	b005      	add	sp, #20
 8011bb8:	bc3c      	pop	{r2, r3, r4, r5}
 8011bba:	4690      	mov	r8, r2
 8011bbc:	4699      	mov	r9, r3
 8011bbe:	46a2      	mov	sl, r4
 8011bc0:	46ab      	mov	fp, r5
 8011bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bc4:	b7fff000 	.word	0xb7fff000
 8011bc8:	40010400 	.word	0x40010400
 8011bcc:	40021000 	.word	0x40021000
 8011bd0:	40010000 	.word	0x40010000
 8011bd4:	48000400 	.word	0x48000400
 8011bd8:	48000800 	.word	0x48000800
 8011bdc:	48000c00 	.word	0x48000c00

08011be0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011be2:	46de      	mov	lr, fp
 8011be4:	4657      	mov	r7, sl
 8011be6:	464e      	mov	r6, r9
 8011be8:	4645      	mov	r5, r8
 8011bea:	b5e0      	push	{r5, r6, r7, lr}
 8011bec:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011bee:	2900      	cmp	r1, #0
 8011bf0:	d071      	beq.n	8011cd6 <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 8011bf2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011bf8:	3202      	adds	r2, #2
 8011bfa:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011bfc:	3204      	adds	r2, #4
 8011bfe:	4693      	mov	fp, r2
 8011c00:	3208      	adds	r2, #8
 8011c02:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011c04:	4a37      	ldr	r2, [pc, #220]	; (8011ce4 <HAL_GPIO_DeInit+0x104>)
 8011c06:	1882      	adds	r2, r0, r2
 8011c08:	1e54      	subs	r4, r2, #1
 8011c0a:	41a2      	sbcs	r2, r4
 8011c0c:	3204      	adds	r2, #4
 8011c0e:	9201      	str	r2, [sp, #4]
 8011c10:	9100      	str	r1, [sp, #0]
 8011c12:	e009      	b.n	8011c28 <HAL_GPIO_DeInit+0x48>
 8011c14:	2100      	movs	r1, #0
 8011c16:	4689      	mov	r9, r1
 8011c18:	4649      	mov	r1, r9
 8011c1a:	40a9      	lsls	r1, r5
 8011c1c:	42b1      	cmp	r1, r6
 8011c1e:	d048      	beq.n	8011cb2 <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8011c20:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8011c22:	9a00      	ldr	r2, [sp, #0]
 8011c24:	40da      	lsrs	r2, r3
 8011c26:	d056      	beq.n	8011cd6 <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 8011c28:	4662      	mov	r2, ip
 8011c2a:	409a      	lsls	r2, r3
 8011c2c:	9900      	ldr	r1, [sp, #0]
 8011c2e:	400a      	ands	r2, r1
    if (iocurrent)
 8011c30:	d0f6      	beq.n	8011c20 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011c32:	6804      	ldr	r4, [r0, #0]
 8011c34:	005d      	lsls	r5, r3, #1
 8011c36:	4646      	mov	r6, r8
 8011c38:	40ae      	lsls	r6, r5
 8011c3a:	43f5      	mvns	r5, r6
 8011c3c:	402c      	ands	r4, r5
 8011c3e:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011c40:	08dc      	lsrs	r4, r3, #3
 8011c42:	00a4      	lsls	r4, r4, #2
 8011c44:	1904      	adds	r4, r0, r4
 8011c46:	6a26      	ldr	r6, [r4, #32]
 8011c48:	465f      	mov	r7, fp
 8011c4a:	401f      	ands	r7, r3
 8011c4c:	00bf      	lsls	r7, r7, #2
 8011c4e:	4651      	mov	r1, sl
 8011c50:	40b9      	lsls	r1, r7
 8011c52:	438e      	bics	r6, r1
 8011c54:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011c56:	6884      	ldr	r4, [r0, #8]
 8011c58:	402c      	ands	r4, r5
 8011c5a:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011c5c:	6844      	ldr	r4, [r0, #4]
 8011c5e:	4666      	mov	r6, ip
 8011c60:	409e      	lsls	r6, r3
 8011c62:	43b4      	bics	r4, r6
 8011c64:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011c66:	68c4      	ldr	r4, [r0, #12]
 8011c68:	4025      	ands	r5, r4
 8011c6a:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8011c6c:	089c      	lsrs	r4, r3, #2
 8011c6e:	00a4      	lsls	r4, r4, #2
 8011c70:	491d      	ldr	r1, [pc, #116]	; (8011ce8 <HAL_GPIO_DeInit+0x108>)
 8011c72:	4689      	mov	r9, r1
 8011c74:	444c      	add	r4, r9
 8011c76:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011c78:	4645      	mov	r5, r8
 8011c7a:	401d      	ands	r5, r3
 8011c7c:	00ad      	lsls	r5, r5, #2
 8011c7e:	4657      	mov	r7, sl
 8011c80:	40af      	lsls	r7, r5
 8011c82:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011c84:	2190      	movs	r1, #144	; 0x90
 8011c86:	05c9      	lsls	r1, r1, #23
 8011c88:	4288      	cmp	r0, r1
 8011c8a:	d0c3      	beq.n	8011c14 <HAL_GPIO_DeInit+0x34>
 8011c8c:	4917      	ldr	r1, [pc, #92]	; (8011cec <HAL_GPIO_DeInit+0x10c>)
 8011c8e:	4288      	cmp	r0, r1
 8011c90:	d008      	beq.n	8011ca4 <HAL_GPIO_DeInit+0xc4>
 8011c92:	4917      	ldr	r1, [pc, #92]	; (8011cf0 <HAL_GPIO_DeInit+0x110>)
 8011c94:	4288      	cmp	r0, r1
 8011c96:	d007      	beq.n	8011ca8 <HAL_GPIO_DeInit+0xc8>
 8011c98:	4916      	ldr	r1, [pc, #88]	; (8011cf4 <HAL_GPIO_DeInit+0x114>)
 8011c9a:	4288      	cmp	r0, r1
 8011c9c:	d007      	beq.n	8011cae <HAL_GPIO_DeInit+0xce>
 8011c9e:	9901      	ldr	r1, [sp, #4]
 8011ca0:	4689      	mov	r9, r1
 8011ca2:	e7b9      	b.n	8011c18 <HAL_GPIO_DeInit+0x38>
 8011ca4:	46e1      	mov	r9, ip
 8011ca6:	e7b7      	b.n	8011c18 <HAL_GPIO_DeInit+0x38>
 8011ca8:	2102      	movs	r1, #2
 8011caa:	4689      	mov	r9, r1
 8011cac:	e7b4      	b.n	8011c18 <HAL_GPIO_DeInit+0x38>
 8011cae:	46c1      	mov	r9, r8
 8011cb0:	e7b2      	b.n	8011c18 <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011cb2:	68a5      	ldr	r5, [r4, #8]
 8011cb4:	43bd      	bics	r5, r7
 8011cb6:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011cb8:	4c0f      	ldr	r4, [pc, #60]	; (8011cf8 <HAL_GPIO_DeInit+0x118>)
 8011cba:	6825      	ldr	r5, [r4, #0]
 8011cbc:	43d2      	mvns	r2, r2
 8011cbe:	4015      	ands	r5, r2
 8011cc0:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011cc2:	6865      	ldr	r5, [r4, #4]
 8011cc4:	4015      	ands	r5, r2
 8011cc6:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011cc8:	68a5      	ldr	r5, [r4, #8]
 8011cca:	4015      	ands	r5, r2
 8011ccc:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011cce:	68e5      	ldr	r5, [r4, #12]
 8011cd0:	402a      	ands	r2, r5
 8011cd2:	60e2      	str	r2, [r4, #12]
 8011cd4:	e7a4      	b.n	8011c20 <HAL_GPIO_DeInit+0x40>
  }
}
 8011cd6:	b003      	add	sp, #12
 8011cd8:	bc3c      	pop	{r2, r3, r4, r5}
 8011cda:	4690      	mov	r8, r2
 8011cdc:	4699      	mov	r9, r3
 8011cde:	46a2      	mov	sl, r4
 8011ce0:	46ab      	mov	fp, r5
 8011ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ce4:	b7fff000 	.word	0xb7fff000
 8011ce8:	40010000 	.word	0x40010000
 8011cec:	48000400 	.word	0x48000400
 8011cf0:	48000800 	.word	0x48000800
 8011cf4:	48000c00 	.word	0x48000c00
 8011cf8:	40010400 	.word	0x40010400

08011cfc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011cfc:	6900      	ldr	r0, [r0, #16]
 8011cfe:	4008      	ands	r0, r1
 8011d00:	1e41      	subs	r1, r0, #1
 8011d02:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011d04:	b2c0      	uxtb	r0, r0
  }
 8011d06:	4770      	bx	lr

08011d08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011d08:	2a00      	cmp	r2, #0
 8011d0a:	d101      	bne.n	8011d10 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011d0c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8011d0e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011d10:	6181      	str	r1, [r0, #24]
 8011d12:	e7fc      	b.n	8011d0e <HAL_GPIO_WritePin+0x6>

08011d14 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011d14:	6943      	ldr	r3, [r0, #20]
 8011d16:	4059      	eors	r1, r3
 8011d18:	6141      	str	r1, [r0, #20]
}
 8011d1a:	4770      	bx	lr

08011d1c <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8011d1c:	4770      	bx	lr
	...

08011d20 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8011d20:	4a03      	ldr	r2, [pc, #12]	; (8011d30 <HAL_PWR_EnableBkUpAccess+0x10>)
 8011d22:	6811      	ldr	r1, [r2, #0]
 8011d24:	2380      	movs	r3, #128	; 0x80
 8011d26:	005b      	lsls	r3, r3, #1
 8011d28:	430b      	orrs	r3, r1
 8011d2a:	6013      	str	r3, [r2, #0]
}
 8011d2c:	4770      	bx	lr
 8011d2e:	46c0      	nop			; (mov r8, r8)
 8011d30:	40007000 	.word	0x40007000

08011d34 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d36:	46c6      	mov	lr, r8
 8011d38:	b500      	push	{lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011d3e:	6803      	ldr	r3, [r0, #0]
 8011d40:	07db      	lsls	r3, r3, #31
 8011d42:	d538      	bpl.n	8011db6 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011d44:	4bbd      	ldr	r3, [pc, #756]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011d46:	685a      	ldr	r2, [r3, #4]
 8011d48:	230c      	movs	r3, #12
 8011d4a:	4013      	ands	r3, r2
 8011d4c:	2b04      	cmp	r3, #4
 8011d4e:	d02a      	beq.n	8011da6 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011d50:	4bba      	ldr	r3, [pc, #744]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011d52:	685a      	ldr	r2, [r3, #4]
 8011d54:	230c      	movs	r3, #12
 8011d56:	4013      	ands	r3, r2
 8011d58:	2b08      	cmp	r3, #8
 8011d5a:	d108      	bne.n	8011d6e <HAL_RCC_OscConfig+0x3a>
 8011d5c:	4bb7      	ldr	r3, [pc, #732]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	22c0      	movs	r2, #192	; 0xc0
 8011d62:	0252      	lsls	r2, r2, #9
 8011d64:	4013      	ands	r3, r2
 8011d66:	2280      	movs	r2, #128	; 0x80
 8011d68:	0252      	lsls	r2, r2, #9
 8011d6a:	4293      	cmp	r3, r2
 8011d6c:	d01b      	beq.n	8011da6 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011d6e:	4bb3      	ldr	r3, [pc, #716]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	49b3      	ldr	r1, [pc, #716]	; (8012040 <HAL_RCC_OscConfig+0x30c>)
 8011d74:	400a      	ands	r2, r1
 8011d76:	601a      	str	r2, [r3, #0]
 8011d78:	681a      	ldr	r2, [r3, #0]
 8011d7a:	49b2      	ldr	r1, [pc, #712]	; (8012044 <HAL_RCC_OscConfig+0x310>)
 8011d7c:	400a      	ands	r2, r1
 8011d7e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011d80:	f7fe fb52 	bl	8010428 <HAL_GetTick>
 8011d84:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011d86:	4ead      	ldr	r6, [pc, #692]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011d88:	2580      	movs	r5, #128	; 0x80
 8011d8a:	02ad      	lsls	r5, r5, #10
 8011d8c:	6833      	ldr	r3, [r6, #0]
 8011d8e:	422b      	tst	r3, r5
 8011d90:	d039      	beq.n	8011e06 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011d92:	f7fe fb49 	bl	8010428 <HAL_GetTick>
 8011d96:	1bc0      	subs	r0, r0, r7
 8011d98:	2864      	cmp	r0, #100	; 0x64
 8011d9a:	d9f7      	bls.n	8011d8c <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8011d9c:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8011d9e:	b002      	add	sp, #8
 8011da0:	bc04      	pop	{r2}
 8011da2:	4690      	mov	r8, r2
 8011da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011da6:	4ba5      	ldr	r3, [pc, #660]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	039b      	lsls	r3, r3, #14
 8011dac:	d503      	bpl.n	8011db6 <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 8011dae:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011db0:	6863      	ldr	r3, [r4, #4]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d0f3      	beq.n	8011d9e <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011db6:	6823      	ldr	r3, [r4, #0]
 8011db8:	079b      	lsls	r3, r3, #30
 8011dba:	d400      	bmi.n	8011dbe <HAL_RCC_OscConfig+0x8a>
 8011dbc:	e08d      	b.n	8011eda <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011dbe:	4b9f      	ldr	r3, [pc, #636]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	220c      	movs	r2, #12
 8011dc4:	421a      	tst	r2, r3
 8011dc6:	d077      	beq.n	8011eb8 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011dc8:	4b9c      	ldr	r3, [pc, #624]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011dca:	685a      	ldr	r2, [r3, #4]
 8011dcc:	230c      	movs	r3, #12
 8011dce:	4013      	ands	r3, r2
 8011dd0:	2b08      	cmp	r3, #8
 8011dd2:	d068      	beq.n	8011ea6 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011dd4:	68e3      	ldr	r3, [r4, #12]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d100      	bne.n	8011ddc <HAL_RCC_OscConfig+0xa8>
 8011dda:	e0a1      	b.n	8011f20 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8011ddc:	4a97      	ldr	r2, [pc, #604]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011dde:	6813      	ldr	r3, [r2, #0]
 8011de0:	2101      	movs	r1, #1
 8011de2:	430b      	orrs	r3, r1
 8011de4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011de6:	f7fe fb1f 	bl	8010428 <HAL_GetTick>
 8011dea:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011dec:	4e93      	ldr	r6, [pc, #588]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011dee:	2502      	movs	r5, #2
 8011df0:	6833      	ldr	r3, [r6, #0]
 8011df2:	421d      	tst	r5, r3
 8011df4:	d000      	beq.n	8011df8 <HAL_RCC_OscConfig+0xc4>
 8011df6:	e08a      	b.n	8011f0e <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011df8:	f7fe fb16 	bl	8010428 <HAL_GetTick>
 8011dfc:	1bc0      	subs	r0, r0, r7
 8011dfe:	2864      	cmp	r0, #100	; 0x64
 8011e00:	d9f6      	bls.n	8011df0 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8011e02:	2003      	movs	r0, #3
 8011e04:	e7cb      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011e06:	6863      	ldr	r3, [r4, #4]
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	d00b      	beq.n	8011e24 <HAL_RCC_OscConfig+0xf0>
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d122      	bne.n	8011e56 <HAL_RCC_OscConfig+0x122>
 8011e10:	4b8a      	ldr	r3, [pc, #552]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011e12:	681a      	ldr	r2, [r3, #0]
 8011e14:	498a      	ldr	r1, [pc, #552]	; (8012040 <HAL_RCC_OscConfig+0x30c>)
 8011e16:	400a      	ands	r2, r1
 8011e18:	601a      	str	r2, [r3, #0]
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	4989      	ldr	r1, [pc, #548]	; (8012044 <HAL_RCC_OscConfig+0x310>)
 8011e1e:	400a      	ands	r2, r1
 8011e20:	601a      	str	r2, [r3, #0]
 8011e22:	e005      	b.n	8011e30 <HAL_RCC_OscConfig+0xfc>
 8011e24:	4a85      	ldr	r2, [pc, #532]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011e26:	6811      	ldr	r1, [r2, #0]
 8011e28:	2380      	movs	r3, #128	; 0x80
 8011e2a:	025b      	lsls	r3, r3, #9
 8011e2c:	430b      	orrs	r3, r1
 8011e2e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011e30:	6863      	ldr	r3, [r4, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d027      	beq.n	8011e86 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8011e36:	f7fe faf7 	bl	8010428 <HAL_GetTick>
 8011e3a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011e3c:	4e7f      	ldr	r6, [pc, #508]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011e3e:	2580      	movs	r5, #128	; 0x80
 8011e40:	02ad      	lsls	r5, r5, #10
 8011e42:	6833      	ldr	r3, [r6, #0]
 8011e44:	422b      	tst	r3, r5
 8011e46:	d1b6      	bne.n	8011db6 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011e48:	f7fe faee 	bl	8010428 <HAL_GetTick>
 8011e4c:	1bc0      	subs	r0, r0, r7
 8011e4e:	2864      	cmp	r0, #100	; 0x64
 8011e50:	d9f7      	bls.n	8011e42 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8011e52:	2003      	movs	r0, #3
 8011e54:	e7a3      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011e56:	2b05      	cmp	r3, #5
 8011e58:	d009      	beq.n	8011e6e <HAL_RCC_OscConfig+0x13a>
 8011e5a:	4b78      	ldr	r3, [pc, #480]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011e5c:	681a      	ldr	r2, [r3, #0]
 8011e5e:	4978      	ldr	r1, [pc, #480]	; (8012040 <HAL_RCC_OscConfig+0x30c>)
 8011e60:	400a      	ands	r2, r1
 8011e62:	601a      	str	r2, [r3, #0]
 8011e64:	681a      	ldr	r2, [r3, #0]
 8011e66:	4977      	ldr	r1, [pc, #476]	; (8012044 <HAL_RCC_OscConfig+0x310>)
 8011e68:	400a      	ands	r2, r1
 8011e6a:	601a      	str	r2, [r3, #0]
 8011e6c:	e7e0      	b.n	8011e30 <HAL_RCC_OscConfig+0xfc>
 8011e6e:	4b73      	ldr	r3, [pc, #460]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011e70:	6819      	ldr	r1, [r3, #0]
 8011e72:	2280      	movs	r2, #128	; 0x80
 8011e74:	02d2      	lsls	r2, r2, #11
 8011e76:	430a      	orrs	r2, r1
 8011e78:	601a      	str	r2, [r3, #0]
 8011e7a:	6819      	ldr	r1, [r3, #0]
 8011e7c:	2280      	movs	r2, #128	; 0x80
 8011e7e:	0252      	lsls	r2, r2, #9
 8011e80:	430a      	orrs	r2, r1
 8011e82:	601a      	str	r2, [r3, #0]
 8011e84:	e7d4      	b.n	8011e30 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8011e86:	f7fe facf 	bl	8010428 <HAL_GetTick>
 8011e8a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011e8c:	4e6b      	ldr	r6, [pc, #428]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011e8e:	2580      	movs	r5, #128	; 0x80
 8011e90:	02ad      	lsls	r5, r5, #10
 8011e92:	6833      	ldr	r3, [r6, #0]
 8011e94:	422b      	tst	r3, r5
 8011e96:	d08e      	beq.n	8011db6 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011e98:	f7fe fac6 	bl	8010428 <HAL_GetTick>
 8011e9c:	1bc0      	subs	r0, r0, r7
 8011e9e:	2864      	cmp	r0, #100	; 0x64
 8011ea0:	d9f7      	bls.n	8011e92 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8011ea2:	2003      	movs	r0, #3
 8011ea4:	e77b      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011ea6:	4b65      	ldr	r3, [pc, #404]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	22c0      	movs	r2, #192	; 0xc0
 8011eac:	0252      	lsls	r2, r2, #9
 8011eae:	4013      	ands	r3, r2
 8011eb0:	2280      	movs	r2, #128	; 0x80
 8011eb2:	0212      	lsls	r2, r2, #8
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d18d      	bne.n	8011dd4 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011eb8:	4b60      	ldr	r3, [pc, #384]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	079b      	lsls	r3, r3, #30
 8011ebe:	d504      	bpl.n	8011eca <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8011ec0:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011ec2:	68e3      	ldr	r3, [r4, #12]
 8011ec4:	2b01      	cmp	r3, #1
 8011ec6:	d000      	beq.n	8011eca <HAL_RCC_OscConfig+0x196>
 8011ec8:	e769      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011eca:	495c      	ldr	r1, [pc, #368]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011ecc:	680a      	ldr	r2, [r1, #0]
 8011ece:	6923      	ldr	r3, [r4, #16]
 8011ed0:	00db      	lsls	r3, r3, #3
 8011ed2:	20f8      	movs	r0, #248	; 0xf8
 8011ed4:	4382      	bics	r2, r0
 8011ed6:	4313      	orrs	r3, r2
 8011ed8:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	071b      	lsls	r3, r3, #28
 8011ede:	d547      	bpl.n	8011f70 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011ee0:	6a23      	ldr	r3, [r4, #32]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d030      	beq.n	8011f48 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8011ee6:	4a55      	ldr	r2, [pc, #340]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011ee8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011eea:	2101      	movs	r1, #1
 8011eec:	430b      	orrs	r3, r1
 8011eee:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011ef0:	f7fe fa9a 	bl	8010428 <HAL_GetTick>
 8011ef4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011ef6:	4e51      	ldr	r6, [pc, #324]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011ef8:	2502      	movs	r5, #2
 8011efa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011efc:	421d      	tst	r5, r3
 8011efe:	d137      	bne.n	8011f70 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011f00:	f7fe fa92 	bl	8010428 <HAL_GetTick>
 8011f04:	1bc0      	subs	r0, r0, r7
 8011f06:	2864      	cmp	r0, #100	; 0x64
 8011f08:	d9f7      	bls.n	8011efa <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8011f0a:	2003      	movs	r0, #3
 8011f0c:	e747      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011f0e:	494b      	ldr	r1, [pc, #300]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011f10:	680a      	ldr	r2, [r1, #0]
 8011f12:	6923      	ldr	r3, [r4, #16]
 8011f14:	00db      	lsls	r3, r3, #3
 8011f16:	20f8      	movs	r0, #248	; 0xf8
 8011f18:	4382      	bics	r2, r0
 8011f1a:	4313      	orrs	r3, r2
 8011f1c:	600b      	str	r3, [r1, #0]
 8011f1e:	e7dc      	b.n	8011eda <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8011f20:	4a46      	ldr	r2, [pc, #280]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011f22:	6813      	ldr	r3, [r2, #0]
 8011f24:	2101      	movs	r1, #1
 8011f26:	438b      	bics	r3, r1
 8011f28:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011f2a:	f7fe fa7d 	bl	8010428 <HAL_GetTick>
 8011f2e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011f30:	4e42      	ldr	r6, [pc, #264]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011f32:	2502      	movs	r5, #2
 8011f34:	6833      	ldr	r3, [r6, #0]
 8011f36:	421d      	tst	r5, r3
 8011f38:	d0cf      	beq.n	8011eda <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011f3a:	f7fe fa75 	bl	8010428 <HAL_GetTick>
 8011f3e:	1bc0      	subs	r0, r0, r7
 8011f40:	2864      	cmp	r0, #100	; 0x64
 8011f42:	d9f7      	bls.n	8011f34 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8011f44:	2003      	movs	r0, #3
 8011f46:	e72a      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8011f48:	4a3c      	ldr	r2, [pc, #240]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011f4a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011f4c:	2101      	movs	r1, #1
 8011f4e:	438b      	bics	r3, r1
 8011f50:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011f52:	f7fe fa69 	bl	8010428 <HAL_GetTick>
 8011f56:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011f58:	4e38      	ldr	r6, [pc, #224]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011f5a:	2502      	movs	r5, #2
 8011f5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011f5e:	421d      	tst	r5, r3
 8011f60:	d006      	beq.n	8011f70 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011f62:	f7fe fa61 	bl	8010428 <HAL_GetTick>
 8011f66:	1bc0      	subs	r0, r0, r7
 8011f68:	2864      	cmp	r0, #100	; 0x64
 8011f6a:	d9f7      	bls.n	8011f5c <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 8011f6c:	2003      	movs	r0, #3
 8011f6e:	e716      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011f70:	6823      	ldr	r3, [r4, #0]
 8011f72:	075b      	lsls	r3, r3, #29
 8011f74:	d442      	bmi.n	8011ffc <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011f76:	6823      	ldr	r3, [r4, #0]
 8011f78:	06db      	lsls	r3, r3, #27
 8011f7a:	d512      	bpl.n	8011fa2 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8011f7c:	6963      	ldr	r3, [r4, #20]
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	d100      	bne.n	8011f84 <HAL_RCC_OscConfig+0x250>
 8011f82:	e0ce      	b.n	8012122 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011f84:	3305      	adds	r3, #5
 8011f86:	d000      	beq.n	8011f8a <HAL_RCC_OscConfig+0x256>
 8011f88:	e0ec      	b.n	8012164 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 8011f8a:	4a2c      	ldr	r2, [pc, #176]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011f8c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011f8e:	2104      	movs	r1, #4
 8011f90:	438b      	bics	r3, r1
 8011f92:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011f94:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011f96:	69a3      	ldr	r3, [r4, #24]
 8011f98:	00db      	lsls	r3, r3, #3
 8011f9a:	20f8      	movs	r0, #248	; 0xf8
 8011f9c:	4381      	bics	r1, r0
 8011f9e:	430b      	orrs	r3, r1
 8011fa0:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011fa2:	6823      	ldr	r3, [r4, #0]
 8011fa4:	069b      	lsls	r3, r3, #26
 8011fa6:	d400      	bmi.n	8011faa <HAL_RCC_OscConfig+0x276>
 8011fa8:	e106      	b.n	80121b8 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011faa:	4b24      	ldr	r3, [pc, #144]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011fac:	685a      	ldr	r2, [r3, #4]
 8011fae:	230c      	movs	r3, #12
 8011fb0:	4013      	ands	r3, r2
 8011fb2:	2b0c      	cmp	r3, #12
 8011fb4:	d100      	bne.n	8011fb8 <HAL_RCC_OscConfig+0x284>
 8011fb6:	e0f6      	b.n	80121a6 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011fb8:	4b20      	ldr	r3, [pc, #128]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011fba:	685a      	ldr	r2, [r3, #4]
 8011fbc:	230c      	movs	r3, #12
 8011fbe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011fc0:	2b08      	cmp	r3, #8
 8011fc2:	d100      	bne.n	8011fc6 <HAL_RCC_OscConfig+0x292>
 8011fc4:	e0e7      	b.n	8012196 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011fc6:	69e3      	ldr	r3, [r4, #28]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d100      	bne.n	8011fce <HAL_RCC_OscConfig+0x29a>
 8011fcc:	e116      	b.n	80121fc <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8011fce:	4a1b      	ldr	r2, [pc, #108]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011fd0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011fd2:	2380      	movs	r3, #128	; 0x80
 8011fd4:	025b      	lsls	r3, r3, #9
 8011fd6:	430b      	orrs	r3, r1
 8011fd8:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011fda:	f7fe fa25 	bl	8010428 <HAL_GetTick>
 8011fde:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011fe0:	4e16      	ldr	r6, [pc, #88]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011fe2:	2580      	movs	r5, #128	; 0x80
 8011fe4:	026d      	lsls	r5, r5, #9
 8011fe6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011fe8:	422b      	tst	r3, r5
 8011fea:	d000      	beq.n	8011fee <HAL_RCC_OscConfig+0x2ba>
 8011fec:	e0e4      	b.n	80121b8 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011fee:	f7fe fa1b 	bl	8010428 <HAL_GetTick>
 8011ff2:	1bc0      	subs	r0, r0, r7
 8011ff4:	2864      	cmp	r0, #100	; 0x64
 8011ff6:	d9f6      	bls.n	8011fe6 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8011ff8:	2003      	movs	r0, #3
 8011ffa:	e6d0      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011ffc:	4a0f      	ldr	r2, [pc, #60]	; (801203c <HAL_RCC_OscConfig+0x308>)
 8011ffe:	69d1      	ldr	r1, [r2, #28]
 8012000:	2080      	movs	r0, #128	; 0x80
 8012002:	0540      	lsls	r0, r0, #21
 8012004:	4301      	orrs	r1, r0
 8012006:	61d1      	str	r1, [r2, #28]
 8012008:	69d3      	ldr	r3, [r2, #28]
 801200a:	4003      	ands	r3, r0
 801200c:	9301      	str	r3, [sp, #4]
 801200e:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012010:	4a0d      	ldr	r2, [pc, #52]	; (8012048 <HAL_RCC_OscConfig+0x314>)
 8012012:	6811      	ldr	r1, [r2, #0]
 8012014:	2380      	movs	r3, #128	; 0x80
 8012016:	005b      	lsls	r3, r3, #1
 8012018:	430b      	orrs	r3, r1
 801201a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 801201c:	f7fe fa04 	bl	8010428 <HAL_GetTick>
 8012020:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012022:	4e09      	ldr	r6, [pc, #36]	; (8012048 <HAL_RCC_OscConfig+0x314>)
 8012024:	2580      	movs	r5, #128	; 0x80
 8012026:	006d      	lsls	r5, r5, #1
 8012028:	6833      	ldr	r3, [r6, #0]
 801202a:	422b      	tst	r3, r5
 801202c:	d10e      	bne.n	801204c <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801202e:	f7fe f9fb 	bl	8010428 <HAL_GetTick>
 8012032:	1bc0      	subs	r0, r0, r7
 8012034:	2864      	cmp	r0, #100	; 0x64
 8012036:	d9f7      	bls.n	8012028 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8012038:	2003      	movs	r0, #3
 801203a:	e6b0      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
 801203c:	40021000 	.word	0x40021000
 8012040:	fffeffff 	.word	0xfffeffff
 8012044:	fffbffff 	.word	0xfffbffff
 8012048:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 801204c:	4b95      	ldr	r3, [pc, #596]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 801204e:	6a1a      	ldr	r2, [r3, #32]
 8012050:	2101      	movs	r1, #1
 8012052:	438a      	bics	r2, r1
 8012054:	621a      	str	r2, [r3, #32]
 8012056:	6a1a      	ldr	r2, [r3, #32]
 8012058:	3103      	adds	r1, #3
 801205a:	438a      	bics	r2, r1
 801205c:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 801205e:	f7fe f9e3 	bl	8010428 <HAL_GetTick>
 8012062:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012064:	4e8f      	ldr	r6, [pc, #572]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 8012066:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012068:	4f8f      	ldr	r7, [pc, #572]	; (80122a8 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801206a:	6a33      	ldr	r3, [r6, #32]
 801206c:	421d      	tst	r5, r3
 801206e:	d007      	beq.n	8012080 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012070:	f7fe f9da 	bl	8010428 <HAL_GetTick>
 8012074:	4643      	mov	r3, r8
 8012076:	1ac0      	subs	r0, r0, r3
 8012078:	42b8      	cmp	r0, r7
 801207a:	d9f6      	bls.n	801206a <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 801207c:	2003      	movs	r0, #3
 801207e:	e68e      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012080:	68a3      	ldr	r3, [r4, #8]
 8012082:	2b01      	cmp	r3, #1
 8012084:	d00b      	beq.n	801209e <HAL_RCC_OscConfig+0x36a>
 8012086:	2b00      	cmp	r3, #0
 8012088:	d123      	bne.n	80120d2 <HAL_RCC_OscConfig+0x39e>
 801208a:	4b86      	ldr	r3, [pc, #536]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 801208c:	6a1a      	ldr	r2, [r3, #32]
 801208e:	2101      	movs	r1, #1
 8012090:	438a      	bics	r2, r1
 8012092:	621a      	str	r2, [r3, #32]
 8012094:	6a1a      	ldr	r2, [r3, #32]
 8012096:	3103      	adds	r1, #3
 8012098:	438a      	bics	r2, r1
 801209a:	621a      	str	r2, [r3, #32]
 801209c:	e004      	b.n	80120a8 <HAL_RCC_OscConfig+0x374>
 801209e:	4a81      	ldr	r2, [pc, #516]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 80120a0:	6a13      	ldr	r3, [r2, #32]
 80120a2:	2101      	movs	r1, #1
 80120a4:	430b      	orrs	r3, r1
 80120a6:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80120a8:	68a3      	ldr	r3, [r4, #8]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d027      	beq.n	80120fe <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80120ae:	f7fe f9bb 	bl	8010428 <HAL_GetTick>
 80120b2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80120b4:	4e7b      	ldr	r6, [pc, #492]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 80120b6:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80120b8:	4f7b      	ldr	r7, [pc, #492]	; (80122a8 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80120ba:	6a33      	ldr	r3, [r6, #32]
 80120bc:	421d      	tst	r5, r3
 80120be:	d000      	beq.n	80120c2 <HAL_RCC_OscConfig+0x38e>
 80120c0:	e759      	b.n	8011f76 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80120c2:	f7fe f9b1 	bl	8010428 <HAL_GetTick>
 80120c6:	4643      	mov	r3, r8
 80120c8:	1ac0      	subs	r0, r0, r3
 80120ca:	42b8      	cmp	r0, r7
 80120cc:	d9f5      	bls.n	80120ba <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 80120ce:	2003      	movs	r0, #3
 80120d0:	e665      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80120d2:	2b05      	cmp	r3, #5
 80120d4:	d009      	beq.n	80120ea <HAL_RCC_OscConfig+0x3b6>
 80120d6:	4b73      	ldr	r3, [pc, #460]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 80120d8:	6a1a      	ldr	r2, [r3, #32]
 80120da:	2101      	movs	r1, #1
 80120dc:	438a      	bics	r2, r1
 80120de:	621a      	str	r2, [r3, #32]
 80120e0:	6a1a      	ldr	r2, [r3, #32]
 80120e2:	3103      	adds	r1, #3
 80120e4:	438a      	bics	r2, r1
 80120e6:	621a      	str	r2, [r3, #32]
 80120e8:	e7de      	b.n	80120a8 <HAL_RCC_OscConfig+0x374>
 80120ea:	4b6e      	ldr	r3, [pc, #440]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 80120ec:	6a1a      	ldr	r2, [r3, #32]
 80120ee:	2104      	movs	r1, #4
 80120f0:	430a      	orrs	r2, r1
 80120f2:	621a      	str	r2, [r3, #32]
 80120f4:	6a1a      	ldr	r2, [r3, #32]
 80120f6:	3903      	subs	r1, #3
 80120f8:	430a      	orrs	r2, r1
 80120fa:	621a      	str	r2, [r3, #32]
 80120fc:	e7d4      	b.n	80120a8 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 80120fe:	f7fe f993 	bl	8010428 <HAL_GetTick>
 8012102:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012104:	4e67      	ldr	r6, [pc, #412]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 8012106:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012108:	4f67      	ldr	r7, [pc, #412]	; (80122a8 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801210a:	6a33      	ldr	r3, [r6, #32]
 801210c:	421d      	tst	r5, r3
 801210e:	d100      	bne.n	8012112 <HAL_RCC_OscConfig+0x3de>
 8012110:	e731      	b.n	8011f76 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012112:	f7fe f989 	bl	8010428 <HAL_GetTick>
 8012116:	4643      	mov	r3, r8
 8012118:	1ac0      	subs	r0, r0, r3
 801211a:	42b8      	cmp	r0, r7
 801211c:	d9f5      	bls.n	801210a <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 801211e:	2003      	movs	r0, #3
 8012120:	e63d      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012122:	4b60      	ldr	r3, [pc, #384]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 8012124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012126:	2104      	movs	r1, #4
 8012128:	430a      	orrs	r2, r1
 801212a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 801212c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801212e:	3903      	subs	r1, #3
 8012130:	430a      	orrs	r2, r1
 8012132:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012134:	f7fe f978 	bl	8010428 <HAL_GetTick>
 8012138:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801213a:	4e5a      	ldr	r6, [pc, #360]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 801213c:	2502      	movs	r5, #2
 801213e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012140:	421d      	tst	r5, r3
 8012142:	d106      	bne.n	8012152 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012144:	f7fe f970 	bl	8010428 <HAL_GetTick>
 8012148:	1bc0      	subs	r0, r0, r7
 801214a:	2864      	cmp	r0, #100	; 0x64
 801214c:	d9f7      	bls.n	801213e <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 801214e:	2003      	movs	r0, #3
 8012150:	e625      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012152:	4954      	ldr	r1, [pc, #336]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 8012154:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8012156:	69a3      	ldr	r3, [r4, #24]
 8012158:	00db      	lsls	r3, r3, #3
 801215a:	20f8      	movs	r0, #248	; 0xf8
 801215c:	4382      	bics	r2, r0
 801215e:	4313      	orrs	r3, r2
 8012160:	634b      	str	r3, [r1, #52]	; 0x34
 8012162:	e71e      	b.n	8011fa2 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012164:	4b4f      	ldr	r3, [pc, #316]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 8012166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012168:	2104      	movs	r1, #4
 801216a:	430a      	orrs	r2, r1
 801216c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 801216e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012170:	3903      	subs	r1, #3
 8012172:	438a      	bics	r2, r1
 8012174:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012176:	f7fe f957 	bl	8010428 <HAL_GetTick>
 801217a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801217c:	4e49      	ldr	r6, [pc, #292]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 801217e:	2502      	movs	r5, #2
 8012180:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012182:	421d      	tst	r5, r3
 8012184:	d100      	bne.n	8012188 <HAL_RCC_OscConfig+0x454>
 8012186:	e70c      	b.n	8011fa2 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012188:	f7fe f94e 	bl	8010428 <HAL_GetTick>
 801218c:	1bc0      	subs	r0, r0, r7
 801218e:	2864      	cmp	r0, #100	; 0x64
 8012190:	d9f6      	bls.n	8012180 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 8012192:	2003      	movs	r0, #3
 8012194:	e603      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012196:	4b43      	ldr	r3, [pc, #268]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	22c0      	movs	r2, #192	; 0xc0
 801219c:	0252      	lsls	r2, r2, #9
 801219e:	4013      	ands	r3, r2
 80121a0:	4293      	cmp	r3, r2
 80121a2:	d000      	beq.n	80121a6 <HAL_RCC_OscConfig+0x472>
 80121a4:	e70f      	b.n	8011fc6 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80121a6:	4b3f      	ldr	r3, [pc, #252]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 80121a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121aa:	03db      	lsls	r3, r3, #15
 80121ac:	d504      	bpl.n	80121b8 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 80121ae:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80121b0:	69e3      	ldr	r3, [r4, #28]
 80121b2:	2b01      	cmp	r3, #1
 80121b4:	d000      	beq.n	80121b8 <HAL_RCC_OscConfig+0x484>
 80121b6:	e5f2      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80121b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80121ba:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d100      	bne.n	80121c2 <HAL_RCC_OscConfig+0x48e>
 80121c0:	e5ed      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80121c2:	4a38      	ldr	r2, [pc, #224]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 80121c4:	6851      	ldr	r1, [r2, #4]
 80121c6:	220c      	movs	r2, #12
 80121c8:	400a      	ands	r2, r1
 80121ca:	2a08      	cmp	r2, #8
 80121cc:	d068      	beq.n	80122a0 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80121ce:	2b02      	cmp	r3, #2
 80121d0:	d029      	beq.n	8012226 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 80121d2:	4a34      	ldr	r2, [pc, #208]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 80121d4:	6813      	ldr	r3, [r2, #0]
 80121d6:	4935      	ldr	r1, [pc, #212]	; (80122ac <HAL_RCC_OscConfig+0x578>)
 80121d8:	400b      	ands	r3, r1
 80121da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80121dc:	f7fe f924 	bl	8010428 <HAL_GetTick>
 80121e0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80121e2:	4d30      	ldr	r5, [pc, #192]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 80121e4:	2480      	movs	r4, #128	; 0x80
 80121e6:	04a4      	lsls	r4, r4, #18
 80121e8:	682b      	ldr	r3, [r5, #0]
 80121ea:	4223      	tst	r3, r4
 80121ec:	d056      	beq.n	801229c <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80121ee:	f7fe f91b 	bl	8010428 <HAL_GetTick>
 80121f2:	1b80      	subs	r0, r0, r6
 80121f4:	2864      	cmp	r0, #100	; 0x64
 80121f6:	d9f7      	bls.n	80121e8 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 80121f8:	2003      	movs	r0, #3
 80121fa:	e5d0      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 80121fc:	4a29      	ldr	r2, [pc, #164]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 80121fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012200:	492b      	ldr	r1, [pc, #172]	; (80122b0 <HAL_RCC_OscConfig+0x57c>)
 8012202:	400b      	ands	r3, r1
 8012204:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012206:	f7fe f90f 	bl	8010428 <HAL_GetTick>
 801220a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801220c:	4e25      	ldr	r6, [pc, #148]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 801220e:	2580      	movs	r5, #128	; 0x80
 8012210:	026d      	lsls	r5, r5, #9
 8012212:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012214:	422b      	tst	r3, r5
 8012216:	d0cf      	beq.n	80121b8 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012218:	f7fe f906 	bl	8010428 <HAL_GetTick>
 801221c:	1bc0      	subs	r0, r0, r7
 801221e:	2864      	cmp	r0, #100	; 0x64
 8012220:	d9f7      	bls.n	8012212 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8012222:	2003      	movs	r0, #3
 8012224:	e5bb      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8012226:	4a1f      	ldr	r2, [pc, #124]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 8012228:	6813      	ldr	r3, [r2, #0]
 801222a:	4920      	ldr	r1, [pc, #128]	; (80122ac <HAL_RCC_OscConfig+0x578>)
 801222c:	400b      	ands	r3, r1
 801222e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012230:	f7fe f8fa 	bl	8010428 <HAL_GetTick>
 8012234:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012236:	4e1b      	ldr	r6, [pc, #108]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 8012238:	2580      	movs	r5, #128	; 0x80
 801223a:	04ad      	lsls	r5, r5, #18
 801223c:	6833      	ldr	r3, [r6, #0]
 801223e:	422b      	tst	r3, r5
 8012240:	d006      	beq.n	8012250 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012242:	f7fe f8f1 	bl	8010428 <HAL_GetTick>
 8012246:	1bc0      	subs	r0, r0, r7
 8012248:	2864      	cmp	r0, #100	; 0x64
 801224a:	d9f7      	bls.n	801223c <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 801224c:	2003      	movs	r0, #3
 801224e:	e5a6      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012250:	4b14      	ldr	r3, [pc, #80]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 8012252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012254:	210f      	movs	r1, #15
 8012256:	438a      	bics	r2, r1
 8012258:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801225a:	430a      	orrs	r2, r1
 801225c:	62da      	str	r2, [r3, #44]	; 0x2c
 801225e:	6859      	ldr	r1, [r3, #4]
 8012260:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012262:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012264:	4302      	orrs	r2, r0
 8012266:	4813      	ldr	r0, [pc, #76]	; (80122b4 <HAL_RCC_OscConfig+0x580>)
 8012268:	4001      	ands	r1, r0
 801226a:	430a      	orrs	r2, r1
 801226c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 801226e:	6819      	ldr	r1, [r3, #0]
 8012270:	2280      	movs	r2, #128	; 0x80
 8012272:	0452      	lsls	r2, r2, #17
 8012274:	430a      	orrs	r2, r1
 8012276:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8012278:	f7fe f8d6 	bl	8010428 <HAL_GetTick>
 801227c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801227e:	4d09      	ldr	r5, [pc, #36]	; (80122a4 <HAL_RCC_OscConfig+0x570>)
 8012280:	2480      	movs	r4, #128	; 0x80
 8012282:	04a4      	lsls	r4, r4, #18
 8012284:	682b      	ldr	r3, [r5, #0]
 8012286:	4223      	tst	r3, r4
 8012288:	d106      	bne.n	8012298 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801228a:	f7fe f8cd 	bl	8010428 <HAL_GetTick>
 801228e:	1b80      	subs	r0, r0, r6
 8012290:	2864      	cmp	r0, #100	; 0x64
 8012292:	d9f7      	bls.n	8012284 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8012294:	2003      	movs	r0, #3
 8012296:	e582      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8012298:	2000      	movs	r0, #0
 801229a:	e580      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
 801229c:	2000      	movs	r0, #0
 801229e:	e57e      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80122a0:	2001      	movs	r0, #1
 80122a2:	e57c      	b.n	8011d9e <HAL_RCC_OscConfig+0x6a>
 80122a4:	40021000 	.word	0x40021000
 80122a8:	00001388 	.word	0x00001388
 80122ac:	feffffff 	.word	0xfeffffff
 80122b0:	fffeffff 	.word	0xfffeffff
 80122b4:	ffc27fff 	.word	0xffc27fff

080122b8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80122b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ba:	46ce      	mov	lr, r9
 80122bc:	4647      	mov	r7, r8
 80122be:	b580      	push	{r7, lr}
 80122c0:	0005      	movs	r5, r0
 80122c2:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80122c4:	4b95      	ldr	r3, [pc, #596]	; (801251c <HAL_RCC_ClockConfig+0x264>)
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	2301      	movs	r3, #1
 80122ca:	4013      	ands	r3, r2
 80122cc:	428b      	cmp	r3, r1
 80122ce:	d300      	bcc.n	80122d2 <HAL_RCC_ClockConfig+0x1a>
 80122d0:	e089      	b.n	80123e6 <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80122d2:	4992      	ldr	r1, [pc, #584]	; (801251c <HAL_RCC_ClockConfig+0x264>)
 80122d4:	680b      	ldr	r3, [r1, #0]
 80122d6:	2201      	movs	r2, #1
 80122d8:	4393      	bics	r3, r2
 80122da:	4323      	orrs	r3, r4
 80122dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80122de:	680b      	ldr	r3, [r1, #0]
 80122e0:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 80122e2:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80122e4:	42a2      	cmp	r2, r4
 80122e6:	d003      	beq.n	80122f0 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80122e8:	bc0c      	pop	{r2, r3}
 80122ea:	4690      	mov	r8, r2
 80122ec:	4699      	mov	r9, r3
 80122ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80122f0:	682b      	ldr	r3, [r5, #0]
 80122f2:	079b      	lsls	r3, r3, #30
 80122f4:	d506      	bpl.n	8012304 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80122f6:	4a8a      	ldr	r2, [pc, #552]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 80122f8:	6853      	ldr	r3, [r2, #4]
 80122fa:	21f0      	movs	r1, #240	; 0xf0
 80122fc:	438b      	bics	r3, r1
 80122fe:	68a9      	ldr	r1, [r5, #8]
 8012300:	430b      	orrs	r3, r1
 8012302:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012304:	682b      	ldr	r3, [r5, #0]
 8012306:	07db      	lsls	r3, r3, #31
 8012308:	d400      	bmi.n	801230c <HAL_RCC_ClockConfig+0x54>
 801230a:	e0f7      	b.n	80124fc <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801230c:	686b      	ldr	r3, [r5, #4]
 801230e:	2b01      	cmp	r3, #1
 8012310:	d009      	beq.n	8012326 <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012312:	2b02      	cmp	r3, #2
 8012314:	d02b      	beq.n	801236e <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012316:	2b03      	cmp	r3, #3
 8012318:	d02f      	beq.n	801237a <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801231a:	4a81      	ldr	r2, [pc, #516]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 801231c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801231e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012320:	0792      	lsls	r2, r2, #30
 8012322:	d405      	bmi.n	8012330 <HAL_RCC_ClockConfig+0x78>
 8012324:	e7e0      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012326:	4a7e      	ldr	r2, [pc, #504]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012328:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801232a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801232c:	0392      	lsls	r2, r2, #14
 801232e:	d5db      	bpl.n	80122e8 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012330:	497b      	ldr	r1, [pc, #492]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012332:	684a      	ldr	r2, [r1, #4]
 8012334:	2003      	movs	r0, #3
 8012336:	4382      	bics	r2, r0
 8012338:	4313      	orrs	r3, r2
 801233a:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 801233c:	f7fe f874 	bl	8010428 <HAL_GetTick>
 8012340:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012342:	686b      	ldr	r3, [r5, #4]
 8012344:	2b01      	cmp	r3, #1
 8012346:	d01e      	beq.n	8012386 <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012348:	2b02      	cmp	r3, #2
 801234a:	d02c      	beq.n	80123a6 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801234c:	2b03      	cmp	r3, #3
 801234e:	d03a      	beq.n	80123c6 <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012350:	4f73      	ldr	r7, [pc, #460]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012352:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012354:	4b73      	ldr	r3, [pc, #460]	; (8012524 <HAL_RCC_ClockConfig+0x26c>)
 8012356:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	421e      	tst	r6, r3
 801235c:	d100      	bne.n	8012360 <HAL_RCC_ClockConfig+0xa8>
 801235e:	e0cd      	b.n	80124fc <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012360:	f7fe f862 	bl	8010428 <HAL_GetTick>
 8012364:	1b00      	subs	r0, r0, r4
 8012366:	4540      	cmp	r0, r8
 8012368:	d9f6      	bls.n	8012358 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 801236a:	2003      	movs	r0, #3
 801236c:	e7bc      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801236e:	4a6c      	ldr	r2, [pc, #432]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012370:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012372:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012374:	0192      	lsls	r2, r2, #6
 8012376:	d4db      	bmi.n	8012330 <HAL_RCC_ClockConfig+0x78>
 8012378:	e7b6      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801237a:	4a69      	ldr	r2, [pc, #420]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 801237c:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 801237e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012380:	03d2      	lsls	r2, r2, #15
 8012382:	d4d5      	bmi.n	8012330 <HAL_RCC_ClockConfig+0x78>
 8012384:	e7b0      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012386:	4f66      	ldr	r7, [pc, #408]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012388:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801238a:	4b66      	ldr	r3, [pc, #408]	; (8012524 <HAL_RCC_ClockConfig+0x26c>)
 801238c:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	4033      	ands	r3, r6
 8012392:	2b04      	cmp	r3, #4
 8012394:	d100      	bne.n	8012398 <HAL_RCC_ClockConfig+0xe0>
 8012396:	e0b1      	b.n	80124fc <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012398:	f7fe f846 	bl	8010428 <HAL_GetTick>
 801239c:	1b00      	subs	r0, r0, r4
 801239e:	4540      	cmp	r0, r8
 80123a0:	d9f5      	bls.n	801238e <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 80123a2:	2003      	movs	r0, #3
 80123a4:	e7a0      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80123a6:	4f5e      	ldr	r7, [pc, #376]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 80123a8:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123aa:	4b5e      	ldr	r3, [pc, #376]	; (8012524 <HAL_RCC_ClockConfig+0x26c>)
 80123ac:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4033      	ands	r3, r6
 80123b2:	2b08      	cmp	r3, #8
 80123b4:	d100      	bne.n	80123b8 <HAL_RCC_ClockConfig+0x100>
 80123b6:	e0a1      	b.n	80124fc <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123b8:	f7fe f836 	bl	8010428 <HAL_GetTick>
 80123bc:	1b00      	subs	r0, r0, r4
 80123be:	4540      	cmp	r0, r8
 80123c0:	d9f5      	bls.n	80123ae <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 80123c2:	2003      	movs	r0, #3
 80123c4:	e790      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80123c6:	4f56      	ldr	r7, [pc, #344]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 80123c8:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123ca:	4b56      	ldr	r3, [pc, #344]	; (8012524 <HAL_RCC_ClockConfig+0x26c>)
 80123cc:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	4033      	ands	r3, r6
 80123d2:	2b0c      	cmp	r3, #12
 80123d4:	d100      	bne.n	80123d8 <HAL_RCC_ClockConfig+0x120>
 80123d6:	e091      	b.n	80124fc <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123d8:	f7fe f826 	bl	8010428 <HAL_GetTick>
 80123dc:	1b00      	subs	r0, r0, r4
 80123de:	4540      	cmp	r0, r8
 80123e0:	d9f5      	bls.n	80123ce <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 80123e2:	2003      	movs	r0, #3
 80123e4:	e780      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80123e6:	6803      	ldr	r3, [r0, #0]
 80123e8:	079b      	lsls	r3, r3, #30
 80123ea:	d506      	bpl.n	80123fa <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80123ec:	4a4c      	ldr	r2, [pc, #304]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 80123ee:	6853      	ldr	r3, [r2, #4]
 80123f0:	21f0      	movs	r1, #240	; 0xf0
 80123f2:	438b      	bics	r3, r1
 80123f4:	6881      	ldr	r1, [r0, #8]
 80123f6:	430b      	orrs	r3, r1
 80123f8:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80123fa:	682b      	ldr	r3, [r5, #0]
 80123fc:	07db      	lsls	r3, r3, #31
 80123fe:	d571      	bpl.n	80124e4 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012400:	686b      	ldr	r3, [r5, #4]
 8012402:	2b01      	cmp	r3, #1
 8012404:	d009      	beq.n	801241a <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012406:	2b02      	cmp	r3, #2
 8012408:	d02d      	beq.n	8012466 <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801240a:	2b03      	cmp	r3, #3
 801240c:	d031      	beq.n	8012472 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801240e:	4a44      	ldr	r2, [pc, #272]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012410:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012412:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012414:	0792      	lsls	r2, r2, #30
 8012416:	d406      	bmi.n	8012426 <HAL_RCC_ClockConfig+0x16e>
 8012418:	e766      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801241a:	4a41      	ldr	r2, [pc, #260]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 801241c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801241e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012420:	0392      	lsls	r2, r2, #14
 8012422:	d400      	bmi.n	8012426 <HAL_RCC_ClockConfig+0x16e>
 8012424:	e760      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012426:	493e      	ldr	r1, [pc, #248]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012428:	684a      	ldr	r2, [r1, #4]
 801242a:	2003      	movs	r0, #3
 801242c:	4382      	bics	r2, r0
 801242e:	4313      	orrs	r3, r2
 8012430:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012432:	f7fd fff9 	bl	8010428 <HAL_GetTick>
 8012436:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012438:	686b      	ldr	r3, [r5, #4]
 801243a:	2b01      	cmp	r3, #1
 801243c:	d01f      	beq.n	801247e <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801243e:	2b02      	cmp	r3, #2
 8012440:	d02e      	beq.n	80124a0 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012442:	2b03      	cmp	r3, #3
 8012444:	d03d      	beq.n	80124c2 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012446:	4b36      	ldr	r3, [pc, #216]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012448:	4698      	mov	r8, r3
 801244a:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801244c:	4b35      	ldr	r3, [pc, #212]	; (8012524 <HAL_RCC_ClockConfig+0x26c>)
 801244e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012450:	4643      	mov	r3, r8
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	421f      	tst	r7, r3
 8012456:	d045      	beq.n	80124e4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012458:	f7fd ffe6 	bl	8010428 <HAL_GetTick>
 801245c:	1b80      	subs	r0, r0, r6
 801245e:	4548      	cmp	r0, r9
 8012460:	d9f6      	bls.n	8012450 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 8012462:	2003      	movs	r0, #3
 8012464:	e740      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012466:	4a2e      	ldr	r2, [pc, #184]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012468:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801246a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801246c:	0192      	lsls	r2, r2, #6
 801246e:	d4da      	bmi.n	8012426 <HAL_RCC_ClockConfig+0x16e>
 8012470:	e73a      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012472:	4a2b      	ldr	r2, [pc, #172]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012474:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8012476:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012478:	03d2      	lsls	r2, r2, #15
 801247a:	d4d4      	bmi.n	8012426 <HAL_RCC_ClockConfig+0x16e>
 801247c:	e734      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801247e:	4b28      	ldr	r3, [pc, #160]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012480:	4698      	mov	r8, r3
 8012482:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012484:	4b27      	ldr	r3, [pc, #156]	; (8012524 <HAL_RCC_ClockConfig+0x26c>)
 8012486:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012488:	4643      	mov	r3, r8
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	403b      	ands	r3, r7
 801248e:	2b04      	cmp	r3, #4
 8012490:	d028      	beq.n	80124e4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012492:	f7fd ffc9 	bl	8010428 <HAL_GetTick>
 8012496:	1b80      	subs	r0, r0, r6
 8012498:	4548      	cmp	r0, r9
 801249a:	d9f5      	bls.n	8012488 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 801249c:	2003      	movs	r0, #3
 801249e:	e723      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80124a0:	4b1f      	ldr	r3, [pc, #124]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 80124a2:	4698      	mov	r8, r3
 80124a4:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124a6:	4b1f      	ldr	r3, [pc, #124]	; (8012524 <HAL_RCC_ClockConfig+0x26c>)
 80124a8:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80124aa:	4643      	mov	r3, r8
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	403b      	ands	r3, r7
 80124b0:	2b08      	cmp	r3, #8
 80124b2:	d017      	beq.n	80124e4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124b4:	f7fd ffb8 	bl	8010428 <HAL_GetTick>
 80124b8:	1b80      	subs	r0, r0, r6
 80124ba:	4548      	cmp	r0, r9
 80124bc:	d9f5      	bls.n	80124aa <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 80124be:	2003      	movs	r0, #3
 80124c0:	e712      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80124c2:	4b17      	ldr	r3, [pc, #92]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 80124c4:	4698      	mov	r8, r3
 80124c6:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124c8:	4b16      	ldr	r3, [pc, #88]	; (8012524 <HAL_RCC_ClockConfig+0x26c>)
 80124ca:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80124cc:	4643      	mov	r3, r8
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	403b      	ands	r3, r7
 80124d2:	2b0c      	cmp	r3, #12
 80124d4:	d006      	beq.n	80124e4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124d6:	f7fd ffa7 	bl	8010428 <HAL_GetTick>
 80124da:	1b80      	subs	r0, r0, r6
 80124dc:	4548      	cmp	r0, r9
 80124de:	d9f5      	bls.n	80124cc <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 80124e0:	2003      	movs	r0, #3
 80124e2:	e701      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80124e4:	490d      	ldr	r1, [pc, #52]	; (801251c <HAL_RCC_ClockConfig+0x264>)
 80124e6:	680b      	ldr	r3, [r1, #0]
 80124e8:	2201      	movs	r2, #1
 80124ea:	4393      	bics	r3, r2
 80124ec:	4323      	orrs	r3, r4
 80124ee:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80124f0:	680b      	ldr	r3, [r1, #0]
 80124f2:	401a      	ands	r2, r3
      return HAL_ERROR;
 80124f4:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80124f6:	42a2      	cmp	r2, r4
 80124f8:	d000      	beq.n	80124fc <HAL_RCC_ClockConfig+0x244>
 80124fa:	e6f5      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80124fc:	682b      	ldr	r3, [r5, #0]
 80124fe:	075b      	lsls	r3, r3, #29
 8012500:	d506      	bpl.n	8012510 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012502:	4a07      	ldr	r2, [pc, #28]	; (8012520 <HAL_RCC_ClockConfig+0x268>)
 8012504:	6853      	ldr	r3, [r2, #4]
 8012506:	4908      	ldr	r1, [pc, #32]	; (8012528 <HAL_RCC_ClockConfig+0x270>)
 8012508:	400b      	ands	r3, r1
 801250a:	68e9      	ldr	r1, [r5, #12]
 801250c:	430b      	orrs	r3, r1
 801250e:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012510:	2000      	movs	r0, #0
 8012512:	f7fd ff5f 	bl	80103d4 <HAL_InitTick>
  return HAL_OK;
 8012516:	2000      	movs	r0, #0
 8012518:	e6e6      	b.n	80122e8 <HAL_RCC_ClockConfig+0x30>
 801251a:	46c0      	nop			; (mov r8, r8)
 801251c:	40022000 	.word	0x40022000
 8012520:	40021000 	.word	0x40021000
 8012524:	00001388 	.word	0x00001388
 8012528:	fffff8ff 	.word	0xfffff8ff

0801252c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801252c:	b530      	push	{r4, r5, lr}
 801252e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012530:	aa04      	add	r2, sp, #16
 8012532:	4b21      	ldr	r3, [pc, #132]	; (80125b8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8012534:	0018      	movs	r0, r3
 8012536:	c832      	ldmia	r0!, {r1, r4, r5}
 8012538:	c232      	stmia	r2!, {r1, r4, r5}
 801253a:	0011      	movs	r1, r2
 801253c:	6802      	ldr	r2, [r0, #0]
 801253e:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012540:	466a      	mov	r2, sp
 8012542:	3310      	adds	r3, #16
 8012544:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012546:	c213      	stmia	r2!, {r0, r1, r4}
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 801254c:	4b1b      	ldr	r3, [pc, #108]	; (80125bc <HAL_RCC_GetSysClockFreq+0x90>)
 801254e:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012550:	200c      	movs	r0, #12
 8012552:	4018      	ands	r0, r3
 8012554:	2808      	cmp	r0, #8
 8012556:	d00a      	beq.n	801256e <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012558:	380c      	subs	r0, #12
 801255a:	4243      	negs	r3, r0
 801255c:	4158      	adcs	r0, r3
 801255e:	4240      	negs	r0, r0
 8012560:	4b17      	ldr	r3, [pc, #92]	; (80125c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8012562:	4018      	ands	r0, r3
 8012564:	4b17      	ldr	r3, [pc, #92]	; (80125c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8012566:	469c      	mov	ip, r3
 8012568:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801256a:	b009      	add	sp, #36	; 0x24
 801256c:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 801256e:	0c99      	lsrs	r1, r3, #18
 8012570:	220f      	movs	r2, #15
 8012572:	4011      	ands	r1, r2
 8012574:	a804      	add	r0, sp, #16
 8012576:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012578:	4910      	ldr	r1, [pc, #64]	; (80125bc <HAL_RCC_GetSysClockFreq+0x90>)
 801257a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801257c:	400a      	ands	r2, r1
 801257e:	4669      	mov	r1, sp
 8012580:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012582:	22c0      	movs	r2, #192	; 0xc0
 8012584:	0252      	lsls	r2, r2, #9
 8012586:	4013      	ands	r3, r2
 8012588:	2280      	movs	r2, #128	; 0x80
 801258a:	0252      	lsls	r2, r2, #9
 801258c:	4293      	cmp	r3, r2
 801258e:	d008      	beq.n	80125a2 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8012590:	22c0      	movs	r2, #192	; 0xc0
 8012592:	0252      	lsls	r2, r2, #9
 8012594:	4293      	cmp	r3, r2
 8012596:	d009      	beq.n	80125ac <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012598:	480a      	ldr	r0, [pc, #40]	; (80125c4 <HAL_RCC_GetSysClockFreq+0x98>)
 801259a:	f7ed fdd9 	bl	8000150 <__udivsi3>
 801259e:	4360      	muls	r0, r4
 80125a0:	e7e3      	b.n	801256a <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80125a2:	4808      	ldr	r0, [pc, #32]	; (80125c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80125a4:	f7ed fdd4 	bl	8000150 <__udivsi3>
 80125a8:	4360      	muls	r0, r4
 80125aa:	e7de      	b.n	801256a <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80125ac:	4806      	ldr	r0, [pc, #24]	; (80125c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80125ae:	f7ed fdcf 	bl	8000150 <__udivsi3>
 80125b2:	4360      	muls	r0, r4
 80125b4:	e7d9      	b.n	801256a <HAL_RCC_GetSysClockFreq+0x3e>
 80125b6:	46c0      	nop			; (mov r8, r8)
 80125b8:	0801856c 	.word	0x0801856c
 80125bc:	40021000 	.word	0x40021000
 80125c0:	02625a00 	.word	0x02625a00
 80125c4:	007a1200 	.word	0x007a1200
 80125c8:	02dc6c00 	.word	0x02dc6c00

080125cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80125cc:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80125ce:	f7ff ffad 	bl	801252c <HAL_RCC_GetSysClockFreq>
 80125d2:	4b05      	ldr	r3, [pc, #20]	; (80125e8 <HAL_RCC_GetHCLKFreq+0x1c>)
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	061b      	lsls	r3, r3, #24
 80125d8:	0f1b      	lsrs	r3, r3, #28
 80125da:	4a04      	ldr	r2, [pc, #16]	; (80125ec <HAL_RCC_GetHCLKFreq+0x20>)
 80125dc:	5cd3      	ldrb	r3, [r2, r3]
 80125de:	40d8      	lsrs	r0, r3
 80125e0:	4b03      	ldr	r3, [pc, #12]	; (80125f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80125e2:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80125e4:	bd10      	pop	{r4, pc}
 80125e6:	46c0      	nop			; (mov r8, r8)
 80125e8:	40021000 	.word	0x40021000
 80125ec:	0801ba78 	.word	0x0801ba78
 80125f0:	20000090 	.word	0x20000090

080125f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80125f4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 80125f6:	f7ff ffe9 	bl	80125cc <HAL_RCC_GetHCLKFreq>
 80125fa:	4b04      	ldr	r3, [pc, #16]	; (801260c <HAL_RCC_GetPCLK1Freq+0x18>)
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	055b      	lsls	r3, r3, #21
 8012600:	0f5b      	lsrs	r3, r3, #29
 8012602:	4a03      	ldr	r2, [pc, #12]	; (8012610 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012604:	5cd3      	ldrb	r3, [r2, r3]
 8012606:	40d8      	lsrs	r0, r3
}    
 8012608:	bd10      	pop	{r4, pc}
 801260a:	46c0      	nop			; (mov r8, r8)
 801260c:	40021000 	.word	0x40021000
 8012610:	0801ba78 	.word	0x0801ba78

08012614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012616:	46c6      	mov	lr, r8
 8012618:	b500      	push	{lr}
 801261a:	b082      	sub	sp, #8
 801261c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801261e:	6803      	ldr	r3, [r0, #0]
 8012620:	03db      	lsls	r3, r3, #15
 8012622:	d507      	bpl.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012624:	4b43      	ldr	r3, [pc, #268]	; (8012734 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012626:	6a1b      	ldr	r3, [r3, #32]
 8012628:	6842      	ldr	r2, [r0, #4]
 801262a:	4053      	eors	r3, r2
 801262c:	22c0      	movs	r2, #192	; 0xc0
 801262e:	0092      	lsls	r2, r2, #2
 8012630:	4213      	tst	r3, r2
 8012632:	d136      	bne.n	80126a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012634:	6823      	ldr	r3, [r4, #0]
 8012636:	07db      	lsls	r3, r3, #31
 8012638:	d506      	bpl.n	8012648 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801263a:	4a3e      	ldr	r2, [pc, #248]	; (8012734 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801263c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801263e:	2103      	movs	r1, #3
 8012640:	438b      	bics	r3, r1
 8012642:	68a1      	ldr	r1, [r4, #8]
 8012644:	430b      	orrs	r3, r1
 8012646:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012648:	6823      	ldr	r3, [r4, #0]
 801264a:	079b      	lsls	r3, r3, #30
 801264c:	d506      	bpl.n	801265c <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801264e:	4a39      	ldr	r2, [pc, #228]	; (8012734 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012650:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012652:	4939      	ldr	r1, [pc, #228]	; (8012738 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012654:	400b      	ands	r3, r1
 8012656:	68e1      	ldr	r1, [r4, #12]
 8012658:	430b      	orrs	r3, r1
 801265a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801265c:	6823      	ldr	r3, [r4, #0]
 801265e:	035b      	lsls	r3, r3, #13
 8012660:	d506      	bpl.n	8012670 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012662:	4a34      	ldr	r2, [pc, #208]	; (8012734 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012664:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012666:	4935      	ldr	r1, [pc, #212]	; (801273c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012668:	400b      	ands	r3, r1
 801266a:	6921      	ldr	r1, [r4, #16]
 801266c:	430b      	orrs	r3, r1
 801266e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012670:	6823      	ldr	r3, [r4, #0]
 8012672:	069b      	lsls	r3, r3, #26
 8012674:	d506      	bpl.n	8012684 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012676:	4a2f      	ldr	r2, [pc, #188]	; (8012734 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012678:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801267a:	2110      	movs	r1, #16
 801267c:	438b      	bics	r3, r1
 801267e:	6961      	ldr	r1, [r4, #20]
 8012680:	430b      	orrs	r3, r1
 8012682:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012684:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012686:	6823      	ldr	r3, [r4, #0]
 8012688:	055b      	lsls	r3, r3, #21
 801268a:	d506      	bpl.n	801269a <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801268c:	4a29      	ldr	r2, [pc, #164]	; (8012734 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801268e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012690:	2140      	movs	r1, #64	; 0x40
 8012692:	438b      	bics	r3, r1
 8012694:	69a1      	ldr	r1, [r4, #24]
 8012696:	430b      	orrs	r3, r1
 8012698:	6313      	str	r3, [r2, #48]	; 0x30
}
 801269a:	b002      	add	sp, #8
 801269c:	bc04      	pop	{r2}
 801269e:	4690      	mov	r8, r2
 80126a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80126a2:	4a24      	ldr	r2, [pc, #144]	; (8012734 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80126a4:	69d1      	ldr	r1, [r2, #28]
 80126a6:	2080      	movs	r0, #128	; 0x80
 80126a8:	0540      	lsls	r0, r0, #21
 80126aa:	4301      	orrs	r1, r0
 80126ac:	61d1      	str	r1, [r2, #28]
 80126ae:	69d3      	ldr	r3, [r2, #28]
 80126b0:	4003      	ands	r3, r0
 80126b2:	9301      	str	r3, [sp, #4]
 80126b4:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80126b6:	4a22      	ldr	r2, [pc, #136]	; (8012740 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80126b8:	6811      	ldr	r1, [r2, #0]
 80126ba:	2380      	movs	r3, #128	; 0x80
 80126bc:	005b      	lsls	r3, r3, #1
 80126be:	430b      	orrs	r3, r1
 80126c0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80126c2:	f7fd feb1 	bl	8010428 <HAL_GetTick>
 80126c6:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80126c8:	4e1d      	ldr	r6, [pc, #116]	; (8012740 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80126ca:	2580      	movs	r5, #128	; 0x80
 80126cc:	006d      	lsls	r5, r5, #1
 80126ce:	6833      	ldr	r3, [r6, #0]
 80126d0:	422b      	tst	r3, r5
 80126d2:	d106      	bne.n	80126e2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80126d4:	f7fd fea8 	bl	8010428 <HAL_GetTick>
 80126d8:	1bc0      	subs	r0, r0, r7
 80126da:	2864      	cmp	r0, #100	; 0x64
 80126dc:	d9f7      	bls.n	80126ce <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 80126de:	2003      	movs	r0, #3
 80126e0:	e7db      	b.n	801269a <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80126e2:	4b14      	ldr	r3, [pc, #80]	; (8012734 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80126e4:	6a18      	ldr	r0, [r3, #32]
 80126e6:	4a17      	ldr	r2, [pc, #92]	; (8012744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80126e8:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 80126ea:	6a1d      	ldr	r5, [r3, #32]
 80126ec:	2180      	movs	r1, #128	; 0x80
 80126ee:	0249      	lsls	r1, r1, #9
 80126f0:	4329      	orrs	r1, r5
 80126f2:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80126f4:	6a19      	ldr	r1, [r3, #32]
 80126f6:	4d14      	ldr	r5, [pc, #80]	; (8012748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80126f8:	4029      	ands	r1, r5
 80126fa:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 80126fc:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80126fe:	0783      	lsls	r3, r0, #30
 8012700:	d407      	bmi.n	8012712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012702:	4a0c      	ldr	r2, [pc, #48]	; (8012734 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012704:	6a13      	ldr	r3, [r2, #32]
 8012706:	490f      	ldr	r1, [pc, #60]	; (8012744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012708:	400b      	ands	r3, r1
 801270a:	6861      	ldr	r1, [r4, #4]
 801270c:	430b      	orrs	r3, r1
 801270e:	6213      	str	r3, [r2, #32]
 8012710:	e790      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8012712:	f7fd fe89 	bl	8010428 <HAL_GetTick>
 8012716:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012718:	4e06      	ldr	r6, [pc, #24]	; (8012734 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801271a:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801271c:	4f0b      	ldr	r7, [pc, #44]	; (801274c <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801271e:	6a33      	ldr	r3, [r6, #32]
 8012720:	421d      	tst	r5, r3
 8012722:	d1ee      	bne.n	8012702 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012724:	f7fd fe80 	bl	8010428 <HAL_GetTick>
 8012728:	4643      	mov	r3, r8
 801272a:	1ac0      	subs	r0, r0, r3
 801272c:	42b8      	cmp	r0, r7
 801272e:	d9f6      	bls.n	801271e <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8012730:	2003      	movs	r0, #3
 8012732:	e7b2      	b.n	801269a <HAL_RCCEx_PeriphCLKConfig+0x86>
 8012734:	40021000 	.word	0x40021000
 8012738:	fffcffff 	.word	0xfffcffff
 801273c:	fff3ffff 	.word	0xfff3ffff
 8012740:	40007000 	.word	0x40007000
 8012744:	fffffcff 	.word	0xfffffcff
 8012748:	fffeffff 	.word	0xfffeffff
 801274c:	00001388 	.word	0x00001388

08012750 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012750:	4770      	bx	lr

08012752 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012754:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012756:	6802      	ldr	r2, [r0, #0]
 8012758:	68d3      	ldr	r3, [r2, #12]
 801275a:	21a0      	movs	r1, #160	; 0xa0
 801275c:	438b      	bics	r3, r1
 801275e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012760:	f7fd fe62 	bl	8010428 <HAL_GetTick>
 8012764:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012766:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012768:	26fa      	movs	r6, #250	; 0xfa
 801276a:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801276c:	6823      	ldr	r3, [r4, #0]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	421d      	tst	r5, r3
 8012772:	d106      	bne.n	8012782 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012774:	f7fd fe58 	bl	8010428 <HAL_GetTick>
 8012778:	1bc0      	subs	r0, r0, r7
 801277a:	42b0      	cmp	r0, r6
 801277c:	d9f6      	bls.n	801276c <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 801277e:	2003      	movs	r0, #3
 8012780:	e000      	b.n	8012784 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8012782:	2000      	movs	r0, #0
}
 8012784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012786 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012788:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801278a:	6803      	ldr	r3, [r0, #0]
 801278c:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 801278e:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012790:	0652      	lsls	r2, r2, #25
 8012792:	d500      	bpl.n	8012796 <RTC_EnterInitMode+0x10>
}
 8012794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012796:	2201      	movs	r2, #1
 8012798:	4252      	negs	r2, r2
 801279a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 801279c:	f7fd fe44 	bl	8010428 <HAL_GetTick>
 80127a0:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80127a2:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80127a4:	26fa      	movs	r6, #250	; 0xfa
 80127a6:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80127a8:	6823      	ldr	r3, [r4, #0]
 80127aa:	68db      	ldr	r3, [r3, #12]
 80127ac:	421d      	tst	r5, r3
 80127ae:	d106      	bne.n	80127be <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80127b0:	f7fd fe3a 	bl	8010428 <HAL_GetTick>
 80127b4:	1bc0      	subs	r0, r0, r7
 80127b6:	42b0      	cmp	r0, r6
 80127b8:	d9f6      	bls.n	80127a8 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80127ba:	2003      	movs	r0, #3
 80127bc:	e7ea      	b.n	8012794 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80127be:	2000      	movs	r0, #0
 80127c0:	e7e8      	b.n	8012794 <RTC_EnterInitMode+0xe>
	...

080127c4 <HAL_RTC_Init>:
{
 80127c4:	b570      	push	{r4, r5, r6, lr}
 80127c6:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80127c8:	d046      	beq.n	8012858 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80127ca:	7f43      	ldrb	r3, [r0, #29]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d038      	beq.n	8012842 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80127d0:	2302      	movs	r3, #2
 80127d2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80127d4:	6823      	ldr	r3, [r4, #0]
 80127d6:	22ca      	movs	r2, #202	; 0xca
 80127d8:	625a      	str	r2, [r3, #36]	; 0x24
 80127da:	6823      	ldr	r3, [r4, #0]
 80127dc:	3a77      	subs	r2, #119	; 0x77
 80127de:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80127e0:	0020      	movs	r0, r4
 80127e2:	f7ff ffd0 	bl	8012786 <RTC_EnterInitMode>
 80127e6:	2800      	cmp	r0, #0
 80127e8:	d12f      	bne.n	801284a <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80127ea:	6822      	ldr	r2, [r4, #0]
 80127ec:	6893      	ldr	r3, [r2, #8]
 80127ee:	491b      	ldr	r1, [pc, #108]	; (801285c <HAL_RTC_Init+0x98>)
 80127f0:	400b      	ands	r3, r1
 80127f2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80127f4:	6822      	ldr	r2, [r4, #0]
 80127f6:	6891      	ldr	r1, [r2, #8]
 80127f8:	6863      	ldr	r3, [r4, #4]
 80127fa:	6925      	ldr	r5, [r4, #16]
 80127fc:	432b      	orrs	r3, r5
 80127fe:	6965      	ldr	r5, [r4, #20]
 8012800:	432b      	orrs	r3, r5
 8012802:	430b      	orrs	r3, r1
 8012804:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012806:	6823      	ldr	r3, [r4, #0]
 8012808:	68e2      	ldr	r2, [r4, #12]
 801280a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801280c:	6822      	ldr	r2, [r4, #0]
 801280e:	6911      	ldr	r1, [r2, #16]
 8012810:	68a3      	ldr	r3, [r4, #8]
 8012812:	041b      	lsls	r3, r3, #16
 8012814:	430b      	orrs	r3, r1
 8012816:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012818:	6822      	ldr	r2, [r4, #0]
 801281a:	68d3      	ldr	r3, [r2, #12]
 801281c:	2180      	movs	r1, #128	; 0x80
 801281e:	438b      	bics	r3, r1
 8012820:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012822:	6822      	ldr	r2, [r4, #0]
 8012824:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012826:	490e      	ldr	r1, [pc, #56]	; (8012860 <HAL_RTC_Init+0x9c>)
 8012828:	400b      	ands	r3, r1
 801282a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 801282c:	6822      	ldr	r2, [r4, #0]
 801282e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012830:	69a1      	ldr	r1, [r4, #24]
 8012832:	430b      	orrs	r3, r1
 8012834:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012836:	6823      	ldr	r3, [r4, #0]
 8012838:	22ff      	movs	r2, #255	; 0xff
 801283a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 801283c:	2301      	movs	r3, #1
 801283e:	7763      	strb	r3, [r4, #29]
}
 8012840:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012842:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012844:	f7ff ff84 	bl	8012750 <HAL_RTC_MspInit>
 8012848:	e7c2      	b.n	80127d0 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801284a:	6823      	ldr	r3, [r4, #0]
 801284c:	22ff      	movs	r2, #255	; 0xff
 801284e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012850:	2304      	movs	r3, #4
 8012852:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012854:	2001      	movs	r0, #1
 8012856:	e7f3      	b.n	8012840 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8012858:	2001      	movs	r0, #1
 801285a:	e7f1      	b.n	8012840 <HAL_RTC_Init+0x7c>
 801285c:	ff8fffbf 	.word	0xff8fffbf
 8012860:	fffbffff 	.word	0xfffbffff

08012864 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8012864:	2809      	cmp	r0, #9
 8012866:	d909      	bls.n	801287c <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8012868:	2300      	movs	r3, #0
  {
    bcdhigh++;
 801286a:	3301      	adds	r3, #1
    Value -= 10;
 801286c:	380a      	subs	r0, #10
 801286e:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012870:	2809      	cmp	r0, #9
 8012872:	d8fa      	bhi.n	801286a <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012874:	011b      	lsls	r3, r3, #4
 8012876:	4318      	orrs	r0, r3
 8012878:	b2c0      	uxtb	r0, r0
}
 801287a:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 801287c:	2300      	movs	r3, #0
 801287e:	e7f9      	b.n	8012874 <RTC_ByteToBcd2+0x10>

08012880 <HAL_RTC_SetTime>:
{
 8012880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012882:	46c6      	mov	lr, r8
 8012884:	b500      	push	{lr}
 8012886:	0004      	movs	r4, r0
 8012888:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 801288a:	7f03      	ldrb	r3, [r0, #28]
 801288c:	2b01      	cmp	r3, #1
 801288e:	d100      	bne.n	8012892 <HAL_RTC_SetTime+0x12>
 8012890:	e075      	b.n	801297e <HAL_RTC_SetTime+0xfe>
 8012892:	2301      	movs	r3, #1
 8012894:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012896:	3301      	adds	r3, #1
 8012898:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 801289a:	2a00      	cmp	r2, #0
 801289c:	d144      	bne.n	8012928 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801289e:	6803      	ldr	r3, [r0, #0]
 80128a0:	689b      	ldr	r3, [r3, #8]
 80128a2:	065b      	lsls	r3, r3, #25
 80128a4:	d401      	bmi.n	80128aa <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 80128a6:	2300      	movs	r3, #0
 80128a8:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80128aa:	7830      	ldrb	r0, [r6, #0]
 80128ac:	f7ff ffda 	bl	8012864 <RTC_ByteToBcd2>
 80128b0:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80128b2:	7870      	ldrb	r0, [r6, #1]
 80128b4:	f7ff ffd6 	bl	8012864 <RTC_ByteToBcd2>
 80128b8:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80128ba:	78b0      	ldrb	r0, [r6, #2]
 80128bc:	f7ff ffd2 	bl	8012864 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80128c0:	7a35      	ldrb	r5, [r6, #8]
 80128c2:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80128c4:	4305      	orrs	r5, r0
 80128c6:	4643      	mov	r3, r8
 80128c8:	0418      	lsls	r0, r3, #16
 80128ca:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80128cc:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80128ce:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80128d0:	6823      	ldr	r3, [r4, #0]
 80128d2:	22ca      	movs	r2, #202	; 0xca
 80128d4:	625a      	str	r2, [r3, #36]	; 0x24
 80128d6:	6823      	ldr	r3, [r4, #0]
 80128d8:	3a77      	subs	r2, #119	; 0x77
 80128da:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80128dc:	0020      	movs	r0, r4
 80128de:	f7ff ff52 	bl	8012786 <RTC_EnterInitMode>
 80128e2:	1e07      	subs	r7, r0, #0
 80128e4:	d131      	bne.n	801294a <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80128e6:	6823      	ldr	r3, [r4, #0]
 80128e8:	4826      	ldr	r0, [pc, #152]	; (8012984 <HAL_RTC_SetTime+0x104>)
 80128ea:	4005      	ands	r5, r0
 80128ec:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80128ee:	6822      	ldr	r2, [r4, #0]
 80128f0:	6893      	ldr	r3, [r2, #8]
 80128f2:	4925      	ldr	r1, [pc, #148]	; (8012988 <HAL_RTC_SetTime+0x108>)
 80128f4:	400b      	ands	r3, r1
 80128f6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80128f8:	6822      	ldr	r2, [r4, #0]
 80128fa:	6891      	ldr	r1, [r2, #8]
 80128fc:	68f3      	ldr	r3, [r6, #12]
 80128fe:	6930      	ldr	r0, [r6, #16]
 8012900:	4303      	orrs	r3, r0
 8012902:	430b      	orrs	r3, r1
 8012904:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012906:	6822      	ldr	r2, [r4, #0]
 8012908:	68d3      	ldr	r3, [r2, #12]
 801290a:	2180      	movs	r1, #128	; 0x80
 801290c:	438b      	bics	r3, r1
 801290e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	689b      	ldr	r3, [r3, #8]
 8012914:	069b      	lsls	r3, r3, #26
 8012916:	d524      	bpl.n	8012962 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012918:	6823      	ldr	r3, [r4, #0]
 801291a:	22ff      	movs	r2, #255	; 0xff
 801291c:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 801291e:	2301      	movs	r3, #1
 8012920:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012922:	2300      	movs	r3, #0
 8012924:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8012926:	e018      	b.n	801295a <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012928:	6803      	ldr	r3, [r0, #0]
 801292a:	689b      	ldr	r3, [r3, #8]
 801292c:	065b      	lsls	r3, r3, #25
 801292e:	d401      	bmi.n	8012934 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8012930:	2300      	movs	r3, #0
 8012932:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012934:	7835      	ldrb	r5, [r6, #0]
 8012936:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012938:	7870      	ldrb	r0, [r6, #1]
 801293a:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801293c:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 801293e:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012940:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012942:	7a30      	ldrb	r0, [r6, #8]
 8012944:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012946:	4305      	orrs	r5, r0
 8012948:	e7c2      	b.n	80128d0 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	22ff      	movs	r2, #255	; 0xff
 801294e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012950:	2304      	movs	r3, #4
 8012952:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012954:	2300      	movs	r3, #0
 8012956:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012958:	2701      	movs	r7, #1
}
 801295a:	0038      	movs	r0, r7
 801295c:	bc04      	pop	{r2}
 801295e:	4690      	mov	r8, r2
 8012960:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012962:	0020      	movs	r0, r4
 8012964:	f7ff fef5 	bl	8012752 <HAL_RTC_WaitForSynchro>
 8012968:	2800      	cmp	r0, #0
 801296a:	d0d5      	beq.n	8012918 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801296c:	6823      	ldr	r3, [r4, #0]
 801296e:	22ff      	movs	r2, #255	; 0xff
 8012970:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012972:	2304      	movs	r3, #4
 8012974:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012976:	2300      	movs	r3, #0
 8012978:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 801297a:	2701      	movs	r7, #1
 801297c:	e7ed      	b.n	801295a <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 801297e:	2702      	movs	r7, #2
 8012980:	e7eb      	b.n	801295a <HAL_RTC_SetTime+0xda>
 8012982:	46c0      	nop			; (mov r8, r8)
 8012984:	007f7f7f 	.word	0x007f7f7f
 8012988:	fffbffff 	.word	0xfffbffff

0801298c <HAL_RTC_SetDate>:
{
 801298c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801298e:	46c6      	mov	lr, r8
 8012990:	b500      	push	{lr}
 8012992:	0004      	movs	r4, r0
 8012994:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012996:	7f03      	ldrb	r3, [r0, #28]
 8012998:	2b01      	cmp	r3, #1
 801299a:	d03a      	beq.n	8012a12 <HAL_RTC_SetDate+0x86>
 801299c:	2301      	movs	r3, #1
 801299e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80129a0:	3301      	adds	r3, #1
 80129a2:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80129a4:	2a00      	cmp	r2, #0
 80129a6:	d136      	bne.n	8012a16 <HAL_RTC_SetDate+0x8a>
 80129a8:	784b      	ldrb	r3, [r1, #1]
 80129aa:	06da      	lsls	r2, r3, #27
 80129ac:	d503      	bpl.n	80129b6 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80129ae:	2210      	movs	r2, #16
 80129b0:	4393      	bics	r3, r2
 80129b2:	330a      	adds	r3, #10
 80129b4:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80129b6:	78f0      	ldrb	r0, [r6, #3]
 80129b8:	f7ff ff54 	bl	8012864 <RTC_ByteToBcd2>
 80129bc:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80129be:	7870      	ldrb	r0, [r6, #1]
 80129c0:	f7ff ff50 	bl	8012864 <RTC_ByteToBcd2>
 80129c4:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80129c6:	78b0      	ldrb	r0, [r6, #2]
 80129c8:	f7ff ff4c 	bl	8012864 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 80129cc:	7835      	ldrb	r5, [r6, #0]
 80129ce:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80129d0:	4305      	orrs	r5, r0
 80129d2:	4643      	mov	r3, r8
 80129d4:	0418      	lsls	r0, r3, #16
 80129d6:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80129d8:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80129da:	433d      	orrs	r5, r7
 80129dc:	e025      	b.n	8012a2a <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80129de:	6823      	ldr	r3, [r4, #0]
 80129e0:	22ff      	movs	r2, #255	; 0xff
 80129e2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80129e4:	2304      	movs	r3, #4
 80129e6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80129e8:	2300      	movs	r3, #0
 80129ea:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80129ec:	2601      	movs	r6, #1
}
 80129ee:	0030      	movs	r0, r6
 80129f0:	bc04      	pop	{r2}
 80129f2:	4690      	mov	r8, r2
 80129f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80129f6:	0020      	movs	r0, r4
 80129f8:	f7ff feab 	bl	8012752 <HAL_RTC_WaitForSynchro>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	d02c      	beq.n	8012a5a <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012a00:	6823      	ldr	r3, [r4, #0]
 8012a02:	22ff      	movs	r2, #255	; 0xff
 8012a04:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012a06:	2304      	movs	r3, #4
 8012a08:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012a0e:	2601      	movs	r6, #1
 8012a10:	e7ed      	b.n	80129ee <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8012a12:	2602      	movs	r6, #2
 8012a14:	e7eb      	b.n	80129ee <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012a16:	78cd      	ldrb	r5, [r1, #3]
 8012a18:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012a1a:	7848      	ldrb	r0, [r1, #1]
 8012a1c:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012a1e:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8012a20:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8012a22:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012a24:	7808      	ldrb	r0, [r1, #0]
 8012a26:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012a28:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012a2a:	6823      	ldr	r3, [r4, #0]
 8012a2c:	22ca      	movs	r2, #202	; 0xca
 8012a2e:	625a      	str	r2, [r3, #36]	; 0x24
 8012a30:	6823      	ldr	r3, [r4, #0]
 8012a32:	3a77      	subs	r2, #119	; 0x77
 8012a34:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012a36:	0020      	movs	r0, r4
 8012a38:	f7ff fea5 	bl	8012786 <RTC_EnterInitMode>
 8012a3c:	1e06      	subs	r6, r0, #0
 8012a3e:	d1ce      	bne.n	80129de <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012a40:	6823      	ldr	r3, [r4, #0]
 8012a42:	480a      	ldr	r0, [pc, #40]	; (8012a6c <HAL_RTC_SetDate+0xe0>)
 8012a44:	4005      	ands	r5, r0
 8012a46:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012a48:	6822      	ldr	r2, [r4, #0]
 8012a4a:	68d3      	ldr	r3, [r2, #12]
 8012a4c:	2180      	movs	r1, #128	; 0x80
 8012a4e:	438b      	bics	r3, r1
 8012a50:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012a52:	6823      	ldr	r3, [r4, #0]
 8012a54:	689b      	ldr	r3, [r3, #8]
 8012a56:	069b      	lsls	r3, r3, #26
 8012a58:	d5cd      	bpl.n	80129f6 <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012a5a:	6823      	ldr	r3, [r4, #0]
 8012a5c:	22ff      	movs	r2, #255	; 0xff
 8012a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012a60:	2301      	movs	r3, #1
 8012a62:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012a64:	2300      	movs	r3, #0
 8012a66:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8012a68:	e7c1      	b.n	80129ee <HAL_RTC_SetDate+0x62>
 8012a6a:	46c0      	nop			; (mov r8, r8)
 8012a6c:	00ffff3f 	.word	0x00ffff3f

08012a70 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012a70:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012a72:	0900      	lsrs	r0, r0, #4
 8012a74:	0083      	lsls	r3, r0, #2
 8012a76:	181b      	adds	r3, r3, r0
 8012a78:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012a7a:	200f      	movs	r0, #15
 8012a7c:	4010      	ands	r0, r2
 8012a7e:	1818      	adds	r0, r3, r0
 8012a80:	b2c0      	uxtb	r0, r0
}
 8012a82:	4770      	bx	lr

08012a84 <HAL_RTC_GetTime>:
{
 8012a84:	b570      	push	{r4, r5, r6, lr}
 8012a86:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012a88:	6803      	ldr	r3, [r0, #0]
 8012a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a8c:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012a8e:	6803      	ldr	r3, [r0, #0]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	490e      	ldr	r1, [pc, #56]	; (8012acc <HAL_RTC_GetTime+0x48>)
 8012a94:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012a96:	0c19      	lsrs	r1, r3, #16
 8012a98:	203f      	movs	r0, #63	; 0x3f
 8012a9a:	4008      	ands	r0, r1
 8012a9c:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012a9e:	0a1e      	lsrs	r6, r3, #8
 8012aa0:	b2f6      	uxtb	r6, r6
 8012aa2:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012aa4:	b2dc      	uxtb	r4, r3
 8012aa6:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012aa8:	2340      	movs	r3, #64	; 0x40
 8012aaa:	400b      	ands	r3, r1
 8012aac:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8012aae:	2a00      	cmp	r2, #0
 8012ab0:	d10a      	bne.n	8012ac8 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012ab2:	f7ff ffdd 	bl	8012a70 <RTC_Bcd2ToByte>
 8012ab6:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012ab8:	0030      	movs	r0, r6
 8012aba:	f7ff ffd9 	bl	8012a70 <RTC_Bcd2ToByte>
 8012abe:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012ac0:	0020      	movs	r0, r4
 8012ac2:	f7ff ffd5 	bl	8012a70 <RTC_Bcd2ToByte>
 8012ac6:	70a8      	strb	r0, [r5, #2]
}
 8012ac8:	2000      	movs	r0, #0
 8012aca:	bd70      	pop	{r4, r5, r6, pc}
 8012acc:	007f7f7f 	.word	0x007f7f7f

08012ad0 <HAL_RTC_GetDate>:
{
 8012ad0:	b570      	push	{r4, r5, r6, lr}
 8012ad2:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012ad4:	6803      	ldr	r3, [r0, #0]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	490d      	ldr	r1, [pc, #52]	; (8012b10 <HAL_RTC_GetDate+0x40>)
 8012ada:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012adc:	0c18      	lsrs	r0, r3, #16
 8012ade:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012ae0:	04dd      	lsls	r5, r3, #19
 8012ae2:	0eed      	lsrs	r5, r5, #27
 8012ae4:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012ae6:	b2de      	uxtb	r6, r3
 8012ae8:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012aea:	041b      	lsls	r3, r3, #16
 8012aec:	0f5b      	lsrs	r3, r3, #29
 8012aee:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8012af0:	2a00      	cmp	r2, #0
 8012af2:	d10a      	bne.n	8012b0a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012af4:	f7ff ffbc 	bl	8012a70 <RTC_Bcd2ToByte>
 8012af8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012afa:	0028      	movs	r0, r5
 8012afc:	f7ff ffb8 	bl	8012a70 <RTC_Bcd2ToByte>
 8012b00:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012b02:	0030      	movs	r0, r6
 8012b04:	f7ff ffb4 	bl	8012a70 <RTC_Bcd2ToByte>
 8012b08:	70a0      	strb	r0, [r4, #2]
}
 8012b0a:	2000      	movs	r0, #0
 8012b0c:	bd70      	pop	{r4, r5, r6, pc}
 8012b0e:	46c0      	nop			; (mov r8, r8)
 8012b10:	00ffff3f 	.word	0x00ffff3f

08012b14 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012b14:	6803      	ldr	r3, [r0, #0]
 8012b16:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012b18:	0089      	lsls	r1, r1, #2
 8012b1a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012b1c:	600a      	str	r2, [r1, #0]
}
 8012b1e:	4770      	bx	lr

08012b20 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012b20:	6803      	ldr	r3, [r0, #0]
 8012b22:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012b24:	0089      	lsls	r1, r1, #2
 8012b26:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012b28:	6808      	ldr	r0, [r1, #0]
}
 8012b2a:	4770      	bx	lr

08012b2c <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012b2c:	4770      	bx	lr

08012b2e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012b2e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012b30:	2239      	movs	r2, #57	; 0x39
 8012b32:	2302      	movs	r3, #2
 8012b34:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012b36:	6804      	ldr	r4, [r0, #0]
 8012b38:	6823      	ldr	r3, [r4, #0]
 8012b3a:	2101      	movs	r1, #1
 8012b3c:	430b      	orrs	r3, r1
 8012b3e:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012b40:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8012b42:	2000      	movs	r0, #0
 8012b44:	bd10      	pop	{r4, pc}
	...

08012b48 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012b48:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012b4a:	4a36      	ldr	r2, [pc, #216]	; (8012c24 <TIM_Base_SetConfig+0xdc>)
 8012b4c:	4290      	cmp	r0, r2
 8012b4e:	d022      	beq.n	8012b96 <TIM_Base_SetConfig+0x4e>
 8012b50:	2280      	movs	r2, #128	; 0x80
 8012b52:	05d2      	lsls	r2, r2, #23
 8012b54:	4290      	cmp	r0, r2
 8012b56:	d014      	beq.n	8012b82 <TIM_Base_SetConfig+0x3a>
 8012b58:	4a33      	ldr	r2, [pc, #204]	; (8012c28 <TIM_Base_SetConfig+0xe0>)
 8012b5a:	4290      	cmp	r0, r2
 8012b5c:	d016      	beq.n	8012b8c <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012b5e:	4a33      	ldr	r2, [pc, #204]	; (8012c2c <TIM_Base_SetConfig+0xe4>)
 8012b60:	4290      	cmp	r0, r2
 8012b62:	d040      	beq.n	8012be6 <TIM_Base_SetConfig+0x9e>
 8012b64:	4a32      	ldr	r2, [pc, #200]	; (8012c30 <TIM_Base_SetConfig+0xe8>)
 8012b66:	4290      	cmp	r0, r2
 8012b68:	d047      	beq.n	8012bfa <TIM_Base_SetConfig+0xb2>
 8012b6a:	4a32      	ldr	r2, [pc, #200]	; (8012c34 <TIM_Base_SetConfig+0xec>)
 8012b6c:	4290      	cmp	r0, r2
 8012b6e:	d04e      	beq.n	8012c0e <TIM_Base_SetConfig+0xc6>
 8012b70:	4a31      	ldr	r2, [pc, #196]	; (8012c38 <TIM_Base_SetConfig+0xf0>)
 8012b72:	4290      	cmp	r0, r2
 8012b74:	d02d      	beq.n	8012bd2 <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8012b76:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b78:	688b      	ldr	r3, [r1, #8]
 8012b7a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012b7c:	680b      	ldr	r3, [r1, #0]
 8012b7e:	6283      	str	r3, [r0, #40]	; 0x28
 8012b80:	e024      	b.n	8012bcc <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012b82:	2270      	movs	r2, #112	; 0x70
 8012b84:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012b86:	684a      	ldr	r2, [r1, #4]
 8012b88:	4313      	orrs	r3, r2
 8012b8a:	e008      	b.n	8012b9e <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012b8c:	2270      	movs	r2, #112	; 0x70
 8012b8e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012b90:	684a      	ldr	r2, [r1, #4]
 8012b92:	4313      	orrs	r3, r2
 8012b94:	e003      	b.n	8012b9e <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012b96:	2270      	movs	r2, #112	; 0x70
 8012b98:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012b9a:	684a      	ldr	r2, [r1, #4]
 8012b9c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b9e:	4a27      	ldr	r2, [pc, #156]	; (8012c3c <TIM_Base_SetConfig+0xf4>)
 8012ba0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012ba2:	68ca      	ldr	r2, [r1, #12]
 8012ba4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012ba6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012ba8:	688b      	ldr	r3, [r1, #8]
 8012baa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012bac:	680b      	ldr	r3, [r1, #0]
 8012bae:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012bb0:	4b1c      	ldr	r3, [pc, #112]	; (8012c24 <TIM_Base_SetConfig+0xdc>)
 8012bb2:	4298      	cmp	r0, r3
 8012bb4:	d008      	beq.n	8012bc8 <TIM_Base_SetConfig+0x80>
 8012bb6:	4b1e      	ldr	r3, [pc, #120]	; (8012c30 <TIM_Base_SetConfig+0xe8>)
 8012bb8:	4298      	cmp	r0, r3
 8012bba:	d005      	beq.n	8012bc8 <TIM_Base_SetConfig+0x80>
 8012bbc:	4b1d      	ldr	r3, [pc, #116]	; (8012c34 <TIM_Base_SetConfig+0xec>)
 8012bbe:	4298      	cmp	r0, r3
 8012bc0:	d002      	beq.n	8012bc8 <TIM_Base_SetConfig+0x80>
 8012bc2:	4b1d      	ldr	r3, [pc, #116]	; (8012c38 <TIM_Base_SetConfig+0xf0>)
 8012bc4:	4298      	cmp	r0, r3
 8012bc6:	d101      	bne.n	8012bcc <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012bc8:	690b      	ldr	r3, [r1, #16]
 8012bca:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	6143      	str	r3, [r0, #20]
}
 8012bd0:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8012bd2:	4a1a      	ldr	r2, [pc, #104]	; (8012c3c <TIM_Base_SetConfig+0xf4>)
 8012bd4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012bd6:	68ca      	ldr	r2, [r1, #12]
 8012bd8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012bda:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012bdc:	688b      	ldr	r3, [r1, #8]
 8012bde:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012be0:	680b      	ldr	r3, [r1, #0]
 8012be2:	6283      	str	r3, [r0, #40]	; 0x28
 8012be4:	e7f0      	b.n	8012bc8 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012be6:	4a15      	ldr	r2, [pc, #84]	; (8012c3c <TIM_Base_SetConfig+0xf4>)
 8012be8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012bea:	68ca      	ldr	r2, [r1, #12]
 8012bec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012bee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012bf0:	688b      	ldr	r3, [r1, #8]
 8012bf2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012bf4:	680b      	ldr	r3, [r1, #0]
 8012bf6:	6283      	str	r3, [r0, #40]	; 0x28
 8012bf8:	e7e8      	b.n	8012bcc <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012bfa:	4a10      	ldr	r2, [pc, #64]	; (8012c3c <TIM_Base_SetConfig+0xf4>)
 8012bfc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012bfe:	68ca      	ldr	r2, [r1, #12]
 8012c00:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012c02:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012c04:	688b      	ldr	r3, [r1, #8]
 8012c06:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012c08:	680b      	ldr	r3, [r1, #0]
 8012c0a:	6283      	str	r3, [r0, #40]	; 0x28
 8012c0c:	e7dc      	b.n	8012bc8 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012c0e:	4a0b      	ldr	r2, [pc, #44]	; (8012c3c <TIM_Base_SetConfig+0xf4>)
 8012c10:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012c12:	68ca      	ldr	r2, [r1, #12]
 8012c14:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012c16:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012c18:	688b      	ldr	r3, [r1, #8]
 8012c1a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012c1c:	680b      	ldr	r3, [r1, #0]
 8012c1e:	6283      	str	r3, [r0, #40]	; 0x28
 8012c20:	e7d2      	b.n	8012bc8 <TIM_Base_SetConfig+0x80>
 8012c22:	46c0      	nop			; (mov r8, r8)
 8012c24:	40012c00 	.word	0x40012c00
 8012c28:	40000400 	.word	0x40000400
 8012c2c:	40002000 	.word	0x40002000
 8012c30:	40014000 	.word	0x40014000
 8012c34:	40014400 	.word	0x40014400
 8012c38:	40014800 	.word	0x40014800
 8012c3c:	fffffcff 	.word	0xfffffcff

08012c40 <HAL_TIM_Base_Init>:
{
 8012c40:	b570      	push	{r4, r5, r6, lr}
 8012c42:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012c44:	d014      	beq.n	8012c70 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012c46:	2339      	movs	r3, #57	; 0x39
 8012c48:	5cc3      	ldrb	r3, [r0, r3]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00a      	beq.n	8012c64 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8012c4e:	2539      	movs	r5, #57	; 0x39
 8012c50:	2302      	movs	r3, #2
 8012c52:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012c54:	1d21      	adds	r1, r4, #4
 8012c56:	6820      	ldr	r0, [r4, #0]
 8012c58:	f7ff ff76 	bl	8012b48 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012c60:	2000      	movs	r0, #0
}
 8012c62:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012c64:	3338      	adds	r3, #56	; 0x38
 8012c66:	2200      	movs	r2, #0
 8012c68:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8012c6a:	f7ff ff5f 	bl	8012b2c <HAL_TIM_Base_MspInit>
 8012c6e:	e7ee      	b.n	8012c4e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012c70:	2001      	movs	r0, #1
 8012c72:	e7f6      	b.n	8012c62 <HAL_TIM_Base_Init+0x22>

08012c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012c76:	2338      	movs	r3, #56	; 0x38
 8012c78:	5cc3      	ldrb	r3, [r0, r3]
 8012c7a:	2b01      	cmp	r3, #1
 8012c7c:	d01e      	beq.n	8012cbc <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012c7e:	2238      	movs	r2, #56	; 0x38
 8012c80:	2501      	movs	r5, #1
 8012c82:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012c84:	2439      	movs	r4, #57	; 0x39
 8012c86:	2302      	movs	r3, #2
 8012c88:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012c8a:	6806      	ldr	r6, [r0, #0]
 8012c8c:	6873      	ldr	r3, [r6, #4]
 8012c8e:	2770      	movs	r7, #112	; 0x70
 8012c90:	43bb      	bics	r3, r7
 8012c92:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012c94:	6806      	ldr	r6, [r0, #0]
 8012c96:	6873      	ldr	r3, [r6, #4]
 8012c98:	680f      	ldr	r7, [r1, #0]
 8012c9a:	433b      	orrs	r3, r7
 8012c9c:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012c9e:	6806      	ldr	r6, [r0, #0]
 8012ca0:	68b3      	ldr	r3, [r6, #8]
 8012ca2:	2780      	movs	r7, #128	; 0x80
 8012ca4:	43bb      	bics	r3, r7
 8012ca6:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012ca8:	6806      	ldr	r6, [r0, #0]
 8012caa:	68b3      	ldr	r3, [r6, #8]
 8012cac:	6849      	ldr	r1, [r1, #4]
 8012cae:	430b      	orrs	r3, r1
 8012cb0:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012cb2:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012cb8:	2000      	movs	r0, #0
}
 8012cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012cbc:	2002      	movs	r0, #2
 8012cbe:	e7fc      	b.n	8012cba <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012cc0 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012cc0:	4770      	bx	lr

08012cc2 <HAL_UART_DeInit>:
{
 8012cc2:	b570      	push	{r4, r5, r6, lr}
 8012cc4:	0004      	movs	r4, r0
    return HAL_ERROR;
 8012cc6:	2001      	movs	r0, #1
  if(huart == NULL)
 8012cc8:	2c00      	cmp	r4, #0
 8012cca:	d016      	beq.n	8012cfa <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8012ccc:	2669      	movs	r6, #105	; 0x69
 8012cce:	2302      	movs	r3, #2
 8012cd0:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8012cd2:	6822      	ldr	r2, [r4, #0]
 8012cd4:	6813      	ldr	r3, [r2, #0]
 8012cd6:	2101      	movs	r1, #1
 8012cd8:	438b      	bics	r3, r1
 8012cda:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012cdc:	6823      	ldr	r3, [r4, #0]
 8012cde:	2500      	movs	r5, #0
 8012ce0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012ce2:	6823      	ldr	r3, [r4, #0]
 8012ce4:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012ce6:	6823      	ldr	r3, [r4, #0]
 8012ce8:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012cea:	0020      	movs	r0, r4
 8012cec:	f7ff ffe8 	bl	8012cc0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cf0:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012cf2:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012cf4:	2368      	movs	r3, #104	; 0x68
 8012cf6:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012cf8:	2000      	movs	r0, #0
}
 8012cfa:	bd70      	pop	{r4, r5, r6, pc}

08012cfc <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012cfc:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012cfe:	2369      	movs	r3, #105	; 0x69
 8012d00:	5cc3      	ldrb	r3, [r0, r3]
 8012d02:	2b01      	cmp	r3, #1
 8012d04:	d004      	beq.n	8012d10 <HAL_UART_Transmit_IT+0x14>
 8012d06:	2369      	movs	r3, #105	; 0x69
 8012d08:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012d0a:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012d0c:	2c22      	cmp	r4, #34	; 0x22
 8012d0e:	d127      	bne.n	8012d60 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8012d10:	2900      	cmp	r1, #0
 8012d12:	d02b      	beq.n	8012d6c <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8012d14:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012d16:	2a00      	cmp	r2, #0
 8012d18:	d022      	beq.n	8012d60 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012d1a:	3367      	adds	r3, #103	; 0x67
 8012d1c:	5cc3      	ldrb	r3, [r0, r3]
 8012d1e:	2b01      	cmp	r3, #1
 8012d20:	d026      	beq.n	8012d70 <HAL_UART_Transmit_IT+0x74>
 8012d22:	2368      	movs	r3, #104	; 0x68
 8012d24:	2401      	movs	r4, #1
 8012d26:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8012d28:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012d2a:	3b18      	subs	r3, #24
 8012d2c:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012d2e:	3302      	adds	r3, #2
 8012d30:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d32:	2300      	movs	r3, #0
 8012d34:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012d36:	3369      	adds	r3, #105	; 0x69
 8012d38:	5cc3      	ldrb	r3, [r0, r3]
 8012d3a:	2b22      	cmp	r3, #34	; 0x22
 8012d3c:	d012      	beq.n	8012d64 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012d3e:	2369      	movs	r3, #105	; 0x69
 8012d40:	2212      	movs	r2, #18
 8012d42:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012d44:	6802      	ldr	r2, [r0, #0]
 8012d46:	6893      	ldr	r3, [r2, #8]
 8012d48:	2101      	movs	r1, #1
 8012d4a:	430b      	orrs	r3, r1
 8012d4c:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012d4e:	2368      	movs	r3, #104	; 0x68
 8012d50:	2200      	movs	r2, #0
 8012d52:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012d54:	6802      	ldr	r2, [r0, #0]
 8012d56:	6813      	ldr	r3, [r2, #0]
 8012d58:	317f      	adds	r1, #127	; 0x7f
 8012d5a:	430b      	orrs	r3, r1
 8012d5c:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012d5e:	2300      	movs	r3, #0
  }
}
 8012d60:	0018      	movs	r0, r3
 8012d62:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012d64:	3347      	adds	r3, #71	; 0x47
 8012d66:	2232      	movs	r2, #50	; 0x32
 8012d68:	54c2      	strb	r2, [r0, r3]
 8012d6a:	e7eb      	b.n	8012d44 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	e7f7      	b.n	8012d60 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012d70:	2302      	movs	r3, #2
 8012d72:	e7f5      	b.n	8012d60 <HAL_UART_Transmit_IT+0x64>

08012d74 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012d74:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012d76:	2369      	movs	r3, #105	; 0x69
 8012d78:	5cc3      	ldrb	r3, [r0, r3]
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	d004      	beq.n	8012d88 <HAL_UART_Receive_IT+0x14>
 8012d7e:	2369      	movs	r3, #105	; 0x69
 8012d80:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012d82:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012d84:	2c12      	cmp	r4, #18
 8012d86:	d14e      	bne.n	8012e26 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8012d88:	2900      	cmp	r1, #0
 8012d8a:	d05d      	beq.n	8012e48 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8012d8c:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012d8e:	2a00      	cmp	r2, #0
 8012d90:	d049      	beq.n	8012e26 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012d92:	3367      	adds	r3, #103	; 0x67
 8012d94:	5cc3      	ldrb	r3, [r0, r3]
 8012d96:	2b01      	cmp	r3, #1
 8012d98:	d058      	beq.n	8012e4c <HAL_UART_Receive_IT+0xd8>
 8012d9a:	2368      	movs	r3, #104	; 0x68
 8012d9c:	2401      	movs	r4, #1
 8012d9e:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8012da0:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8012da2:	3b10      	subs	r3, #16
 8012da4:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8012da6:	3302      	adds	r3, #2
 8012da8:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8012daa:	6883      	ldr	r3, [r0, #8]
 8012dac:	2280      	movs	r2, #128	; 0x80
 8012dae:	0152      	lsls	r2, r2, #5
 8012db0:	4293      	cmp	r3, r2
 8012db2:	d008      	beq.n	8012dc6 <HAL_UART_Receive_IT+0x52>
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d115      	bne.n	8012de4 <HAL_UART_Receive_IT+0x70>
 8012db8:	6903      	ldr	r3, [r0, #16]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d10e      	bne.n	8012ddc <HAL_UART_Receive_IT+0x68>
 8012dbe:	335c      	adds	r3, #92	; 0x5c
 8012dc0:	22ff      	movs	r2, #255	; 0xff
 8012dc2:	52c2      	strh	r2, [r0, r3]
 8012dc4:	e012      	b.n	8012dec <HAL_UART_Receive_IT+0x78>
 8012dc6:	6903      	ldr	r3, [r0, #16]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d103      	bne.n	8012dd4 <HAL_UART_Receive_IT+0x60>
 8012dcc:	335c      	adds	r3, #92	; 0x5c
 8012dce:	4a20      	ldr	r2, [pc, #128]	; (8012e50 <HAL_UART_Receive_IT+0xdc>)
 8012dd0:	52c2      	strh	r2, [r0, r3]
 8012dd2:	e00b      	b.n	8012dec <HAL_UART_Receive_IT+0x78>
 8012dd4:	235c      	movs	r3, #92	; 0x5c
 8012dd6:	22ff      	movs	r2, #255	; 0xff
 8012dd8:	52c2      	strh	r2, [r0, r3]
 8012dda:	e007      	b.n	8012dec <HAL_UART_Receive_IT+0x78>
 8012ddc:	235c      	movs	r3, #92	; 0x5c
 8012dde:	227f      	movs	r2, #127	; 0x7f
 8012de0:	52c2      	strh	r2, [r0, r3]
 8012de2:	e003      	b.n	8012dec <HAL_UART_Receive_IT+0x78>
 8012de4:	2280      	movs	r2, #128	; 0x80
 8012de6:	0552      	lsls	r2, r2, #21
 8012de8:	4293      	cmp	r3, r2
 8012dea:	d01e      	beq.n	8012e2a <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012dec:	2300      	movs	r3, #0
 8012dee:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012df0:	3369      	adds	r3, #105	; 0x69
 8012df2:	5cc3      	ldrb	r3, [r0, r3]
 8012df4:	2b12      	cmp	r3, #18
 8012df6:	d023      	beq.n	8012e40 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012df8:	2369      	movs	r3, #105	; 0x69
 8012dfa:	2222      	movs	r2, #34	; 0x22
 8012dfc:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012dfe:	6802      	ldr	r2, [r0, #0]
 8012e00:	6811      	ldr	r1, [r2, #0]
 8012e02:	2380      	movs	r3, #128	; 0x80
 8012e04:	005b      	lsls	r3, r3, #1
 8012e06:	430b      	orrs	r3, r1
 8012e08:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012e0a:	6802      	ldr	r2, [r0, #0]
 8012e0c:	6893      	ldr	r3, [r2, #8]
 8012e0e:	2101      	movs	r1, #1
 8012e10:	430b      	orrs	r3, r1
 8012e12:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012e14:	2368      	movs	r3, #104	; 0x68
 8012e16:	2200      	movs	r2, #0
 8012e18:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012e1a:	6802      	ldr	r2, [r0, #0]
 8012e1c:	6813      	ldr	r3, [r2, #0]
 8012e1e:	311f      	adds	r1, #31
 8012e20:	430b      	orrs	r3, r1
 8012e22:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012e24:	2300      	movs	r3, #0
  }
}
 8012e26:	0018      	movs	r0, r3
 8012e28:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8012e2a:	6903      	ldr	r3, [r0, #16]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d103      	bne.n	8012e38 <HAL_UART_Receive_IT+0xc4>
 8012e30:	335c      	adds	r3, #92	; 0x5c
 8012e32:	227f      	movs	r2, #127	; 0x7f
 8012e34:	52c2      	strh	r2, [r0, r3]
 8012e36:	e7d9      	b.n	8012dec <HAL_UART_Receive_IT+0x78>
 8012e38:	235c      	movs	r3, #92	; 0x5c
 8012e3a:	223f      	movs	r2, #63	; 0x3f
 8012e3c:	52c2      	strh	r2, [r0, r3]
 8012e3e:	e7d5      	b.n	8012dec <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012e40:	3357      	adds	r3, #87	; 0x57
 8012e42:	2232      	movs	r2, #50	; 0x32
 8012e44:	54c2      	strb	r2, [r0, r3]
 8012e46:	e7da      	b.n	8012dfe <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8012e48:	2301      	movs	r3, #1
 8012e4a:	e7ec      	b.n	8012e26 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012e4c:	2302      	movs	r3, #2
 8012e4e:	e7ea      	b.n	8012e26 <HAL_UART_Receive_IT+0xb2>
 8012e50:	000001ff 	.word	0x000001ff

08012e54 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012e54:	b510      	push	{r4, lr}
 8012e56:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012e58:	2369      	movs	r3, #105	; 0x69
 8012e5a:	5cc3      	ldrb	r3, [r0, r3]
 8012e5c:	2b01      	cmp	r3, #1
 8012e5e:	d004      	beq.n	8012e6a <HAL_UART_Transmit_DMA+0x16>
 8012e60:	2369      	movs	r3, #105	; 0x69
 8012e62:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012e64:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012e66:	2b22      	cmp	r3, #34	; 0x22
 8012e68:	d134      	bne.n	8012ed4 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 8012e6a:	2900      	cmp	r1, #0
 8012e6c:	d037      	beq.n	8012ede <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 8012e6e:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012e70:	2a00      	cmp	r2, #0
 8012e72:	d02f      	beq.n	8012ed4 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8012e74:	2368      	movs	r3, #104	; 0x68
 8012e76:	5ce3      	ldrb	r3, [r4, r3]
 8012e78:	2b01      	cmp	r3, #1
 8012e7a:	d032      	beq.n	8012ee2 <HAL_UART_Transmit_DMA+0x8e>
 8012e7c:	2368      	movs	r3, #104	; 0x68
 8012e7e:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 8012e80:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012e82:	3b18      	subs	r3, #24
 8012e84:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8012e86:	3302      	adds	r3, #2
 8012e88:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012e8e:	3369      	adds	r3, #105	; 0x69
 8012e90:	5ce3      	ldrb	r3, [r4, r3]
 8012e92:	2b22      	cmp	r3, #34	; 0x22
 8012e94:	d01f      	beq.n	8012ed6 <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012e96:	2369      	movs	r3, #105	; 0x69
 8012e98:	2012      	movs	r0, #18
 8012e9a:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012e9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012e9e:	4812      	ldr	r0, [pc, #72]	; (8012ee8 <HAL_UART_Transmit_DMA+0x94>)
 8012ea0:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012ea2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012ea4:	4811      	ldr	r0, [pc, #68]	; (8012eec <HAL_UART_Transmit_DMA+0x98>)
 8012ea6:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012ea8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012eaa:	4811      	ldr	r0, [pc, #68]	; (8012ef0 <HAL_UART_Transmit_DMA+0x9c>)
 8012eac:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012eae:	6820      	ldr	r0, [r4, #0]
 8012eb0:	3028      	adds	r0, #40	; 0x28
 8012eb2:	0013      	movs	r3, r2
 8012eb4:	0002      	movs	r2, r0
 8012eb6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012eb8:	f7fd ffb0 	bl	8010e1c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012ebc:	6823      	ldr	r3, [r4, #0]
 8012ebe:	2240      	movs	r2, #64	; 0x40
 8012ec0:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8012ec2:	6822      	ldr	r2, [r4, #0]
 8012ec4:	6893      	ldr	r3, [r2, #8]
 8012ec6:	2180      	movs	r1, #128	; 0x80
 8012ec8:	430b      	orrs	r3, r1
 8012eca:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012ecc:	2368      	movs	r3, #104	; 0x68
 8012ece:	2200      	movs	r2, #0
 8012ed0:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012ed2:	2000      	movs	r0, #0
  }
}
 8012ed4:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012ed6:	3347      	adds	r3, #71	; 0x47
 8012ed8:	3031      	adds	r0, #49	; 0x31
 8012eda:	54e0      	strb	r0, [r4, r3]
 8012edc:	e7de      	b.n	8012e9c <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8012ede:	2001      	movs	r0, #1
 8012ee0:	e7f8      	b.n	8012ed4 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8012ee2:	2002      	movs	r0, #2
 8012ee4:	e7f6      	b.n	8012ed4 <HAL_UART_Transmit_DMA+0x80>
 8012ee6:	46c0      	nop			; (mov r8, r8)
 8012ee8:	08012f8d 	.word	0x08012f8d
 8012eec:	08012fbf 	.word	0x08012fbf
 8012ef0:	0801300f 	.word	0x0801300f

08012ef4 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ef4:	b510      	push	{r4, lr}
 8012ef6:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012ef8:	2069      	movs	r0, #105	; 0x69
 8012efa:	5c20      	ldrb	r0, [r4, r0]
 8012efc:	2801      	cmp	r0, #1
 8012efe:	d004      	beq.n	8012f0a <HAL_UART_Receive_DMA+0x16>
 8012f00:	2369      	movs	r3, #105	; 0x69
 8012f02:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012f04:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012f06:	2b12      	cmp	r3, #18
 8012f08:	d130      	bne.n	8012f6c <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8012f0a:	2900      	cmp	r1, #0
 8012f0c:	d033      	beq.n	8012f76 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8012f0e:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012f10:	2a00      	cmp	r2, #0
 8012f12:	d02b      	beq.n	8012f6c <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8012f14:	2368      	movs	r3, #104	; 0x68
 8012f16:	5ce3      	ldrb	r3, [r4, r3]
 8012f18:	2b01      	cmp	r3, #1
 8012f1a:	d02e      	beq.n	8012f7a <HAL_UART_Receive_DMA+0x86>
 8012f1c:	2368      	movs	r3, #104	; 0x68
 8012f1e:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8012f20:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012f22:	3b10      	subs	r3, #16
 8012f24:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f26:	2300      	movs	r3, #0
 8012f28:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012f2a:	3369      	adds	r3, #105	; 0x69
 8012f2c:	5ce3      	ldrb	r3, [r4, r3]
 8012f2e:	2b12      	cmp	r3, #18
 8012f30:	d01d      	beq.n	8012f6e <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012f32:	2369      	movs	r3, #105	; 0x69
 8012f34:	2022      	movs	r0, #34	; 0x22
 8012f36:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f3a:	4811      	ldr	r0, [pc, #68]	; (8012f80 <HAL_UART_Receive_DMA+0x8c>)
 8012f3c:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f40:	4810      	ldr	r0, [pc, #64]	; (8012f84 <HAL_UART_Receive_DMA+0x90>)
 8012f42:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f46:	4810      	ldr	r0, [pc, #64]	; (8012f88 <HAL_UART_Receive_DMA+0x94>)
 8012f48:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012f4a:	6820      	ldr	r0, [r4, #0]
 8012f4c:	3024      	adds	r0, #36	; 0x24
 8012f4e:	0013      	movs	r3, r2
 8012f50:	000a      	movs	r2, r1
 8012f52:	0001      	movs	r1, r0
 8012f54:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012f56:	f7fd ff61 	bl	8010e1c <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012f5a:	6822      	ldr	r2, [r4, #0]
 8012f5c:	6893      	ldr	r3, [r2, #8]
 8012f5e:	2140      	movs	r1, #64	; 0x40
 8012f60:	430b      	orrs	r3, r1
 8012f62:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8012f64:	2368      	movs	r3, #104	; 0x68
 8012f66:	2200      	movs	r2, #0
 8012f68:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012f6a:	2000      	movs	r0, #0
  }
}
 8012f6c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012f6e:	3357      	adds	r3, #87	; 0x57
 8012f70:	3031      	adds	r0, #49	; 0x31
 8012f72:	54e0      	strb	r0, [r4, r3]
 8012f74:	e7e0      	b.n	8012f38 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8012f76:	2001      	movs	r0, #1
 8012f78:	e7f8      	b.n	8012f6c <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8012f7a:	2002      	movs	r0, #2
 8012f7c:	e7f6      	b.n	8012f6c <HAL_UART_Receive_DMA+0x78>
 8012f7e:	46c0      	nop			; (mov r8, r8)
 8012f80:	08012fc9 	.word	0x08012fc9
 8012f84:	08013005 	.word	0x08013005
 8012f88:	0801300f 	.word	0x0801300f

08012f8c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012f8c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012f8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012f90:	6802      	ldr	r2, [r0, #0]
 8012f92:	6812      	ldr	r2, [r2, #0]
 8012f94:	0692      	lsls	r2, r2, #26
 8012f96:	d40d      	bmi.n	8012fb4 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8012f98:	2252      	movs	r2, #82	; 0x52
 8012f9a:	2100      	movs	r1, #0
 8012f9c:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8012f9e:	6819      	ldr	r1, [r3, #0]
 8012fa0:	688a      	ldr	r2, [r1, #8]
 8012fa2:	2080      	movs	r0, #128	; 0x80
 8012fa4:	4382      	bics	r2, r0
 8012fa6:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	6813      	ldr	r3, [r2, #0]
 8012fac:	2140      	movs	r1, #64	; 0x40
 8012fae:	430b      	orrs	r3, r1
 8012fb0:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8012fb2:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012fb4:	0018      	movs	r0, r3
 8012fb6:	f7fa fb71 	bl	800d69c <HAL_UART_TxCpltCallback>
}
 8012fba:	e7fa      	b.n	8012fb2 <UART_DMATransmitCplt+0x26>

08012fbc <HAL_UART_TxHalfCpltCallback>:
}
 8012fbc:	4770      	bx	lr

08012fbe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012fbe:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8012fc0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012fc2:	f7ff fffb 	bl	8012fbc <HAL_UART_TxHalfCpltCallback>
}
 8012fc6:	bd10      	pop	{r4, pc}

08012fc8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012fc8:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012fca:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012fcc:	6802      	ldr	r2, [r0, #0]
 8012fce:	6812      	ldr	r2, [r2, #0]
 8012fd0:	0692      	lsls	r2, r2, #26
 8012fd2:	d40e      	bmi.n	8012ff2 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8012fd4:	225a      	movs	r2, #90	; 0x5a
 8012fd6:	2100      	movs	r1, #0
 8012fd8:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012fda:	6819      	ldr	r1, [r3, #0]
 8012fdc:	688a      	ldr	r2, [r1, #8]
 8012fde:	2040      	movs	r0, #64	; 0x40
 8012fe0:	4382      	bics	r2, r0
 8012fe2:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012fe4:	2269      	movs	r2, #105	; 0x69
 8012fe6:	5c9a      	ldrb	r2, [r3, r2]
 8012fe8:	2a32      	cmp	r2, #50	; 0x32
 8012fea:	d006      	beq.n	8012ffa <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012fec:	2269      	movs	r2, #105	; 0x69
 8012fee:	2101      	movs	r1, #1
 8012ff0:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012ff2:	0018      	movs	r0, r3
 8012ff4:	f7fa fb90 	bl	800d718 <HAL_UART_RxCpltCallback>
}
 8012ff8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012ffa:	3237      	adds	r2, #55	; 0x37
 8012ffc:	2112      	movs	r1, #18
 8012ffe:	5499      	strb	r1, [r3, r2]
 8013000:	e7f7      	b.n	8012ff2 <UART_DMAReceiveCplt+0x2a>

08013002 <HAL_UART_RxHalfCpltCallback>:
}
 8013002:	4770      	bx	lr

08013004 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013004:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013006:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013008:	f7ff fffb 	bl	8013002 <HAL_UART_RxHalfCpltCallback>
}
 801300c:	bd10      	pop	{r4, pc}

0801300e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801300e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013010:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8013012:	2300      	movs	r3, #0
 8013014:	225a      	movs	r2, #90	; 0x5a
 8013016:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013018:	3a08      	subs	r2, #8
 801301a:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 801301c:	3369      	adds	r3, #105	; 0x69
 801301e:	3a51      	subs	r2, #81	; 0x51
 8013020:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013022:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013024:	320f      	adds	r2, #15
 8013026:	4313      	orrs	r3, r2
 8013028:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801302a:	f7fa fb4f 	bl	800d6cc <HAL_UART_ErrorCallback>
}
 801302e:	bd10      	pop	{r4, pc}

08013030 <UART_SetConfig>:
{
 8013030:	b570      	push	{r4, r5, r6, lr}
 8013032:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013034:	6801      	ldr	r1, [r0, #0]
 8013036:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013038:	6883      	ldr	r3, [r0, #8]
 801303a:	6900      	ldr	r0, [r0, #16]
 801303c:	4303      	orrs	r3, r0
 801303e:	6960      	ldr	r0, [r4, #20]
 8013040:	4303      	orrs	r3, r0
 8013042:	69e0      	ldr	r0, [r4, #28]
 8013044:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013046:	487e      	ldr	r0, [pc, #504]	; (8013240 <UART_SetConfig+0x210>)
 8013048:	4002      	ands	r2, r0
 801304a:	4313      	orrs	r3, r2
 801304c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801304e:	6822      	ldr	r2, [r4, #0]
 8013050:	6853      	ldr	r3, [r2, #4]
 8013052:	497c      	ldr	r1, [pc, #496]	; (8013244 <UART_SetConfig+0x214>)
 8013054:	400b      	ands	r3, r1
 8013056:	68e1      	ldr	r1, [r4, #12]
 8013058:	430b      	orrs	r3, r1
 801305a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801305c:	6821      	ldr	r1, [r4, #0]
 801305e:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013060:	69a3      	ldr	r3, [r4, #24]
 8013062:	6a20      	ldr	r0, [r4, #32]
 8013064:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013066:	4878      	ldr	r0, [pc, #480]	; (8013248 <UART_SetConfig+0x218>)
 8013068:	4002      	ands	r2, r0
 801306a:	4313      	orrs	r3, r2
 801306c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801306e:	6825      	ldr	r5, [r4, #0]
 8013070:	4b76      	ldr	r3, [pc, #472]	; (801324c <UART_SetConfig+0x21c>)
 8013072:	429d      	cmp	r5, r3
 8013074:	d022      	beq.n	80130bc <UART_SetConfig+0x8c>
 8013076:	4b76      	ldr	r3, [pc, #472]	; (8013250 <UART_SetConfig+0x220>)
 8013078:	429d      	cmp	r5, r3
 801307a:	d034      	beq.n	80130e6 <UART_SetConfig+0xb6>
 801307c:	4b75      	ldr	r3, [pc, #468]	; (8013254 <UART_SetConfig+0x224>)
 801307e:	429d      	cmp	r5, r3
 8013080:	d100      	bne.n	8013084 <UART_SetConfig+0x54>
 8013082:	e06b      	b.n	801315c <UART_SetConfig+0x12c>
 8013084:	4b74      	ldr	r3, [pc, #464]	; (8013258 <UART_SetConfig+0x228>)
 8013086:	429d      	cmp	r5, r3
 8013088:	d100      	bne.n	801308c <UART_SetConfig+0x5c>
 801308a:	e08e      	b.n	80131aa <UART_SetConfig+0x17a>
 801308c:	4b73      	ldr	r3, [pc, #460]	; (801325c <UART_SetConfig+0x22c>)
 801308e:	429d      	cmp	r5, r3
 8013090:	d100      	bne.n	8013094 <UART_SetConfig+0x64>
 8013092:	e08a      	b.n	80131aa <UART_SetConfig+0x17a>
 8013094:	4b72      	ldr	r3, [pc, #456]	; (8013260 <UART_SetConfig+0x230>)
 8013096:	429d      	cmp	r5, r3
 8013098:	d100      	bne.n	801309c <UART_SetConfig+0x6c>
 801309a:	e086      	b.n	80131aa <UART_SetConfig+0x17a>
 801309c:	4b71      	ldr	r3, [pc, #452]	; (8013264 <UART_SetConfig+0x234>)
 801309e:	429d      	cmp	r5, r3
 80130a0:	d100      	bne.n	80130a4 <UART_SetConfig+0x74>
 80130a2:	e082      	b.n	80131aa <UART_SetConfig+0x17a>
 80130a4:	4b70      	ldr	r3, [pc, #448]	; (8013268 <UART_SetConfig+0x238>)
 80130a6:	429d      	cmp	r5, r3
 80130a8:	d100      	bne.n	80130ac <UART_SetConfig+0x7c>
 80130aa:	e07e      	b.n	80131aa <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80130ac:	2380      	movs	r3, #128	; 0x80
 80130ae:	021b      	lsls	r3, r3, #8
 80130b0:	69e2      	ldr	r2, [r4, #28]
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d100      	bne.n	80130b8 <UART_SetConfig+0x88>
 80130b6:	e072      	b.n	801319e <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 80130b8:	2001      	movs	r0, #1
 80130ba:	e04e      	b.n	801315a <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80130bc:	4b6b      	ldr	r3, [pc, #428]	; (801326c <UART_SetConfig+0x23c>)
 80130be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80130c0:	2303      	movs	r3, #3
 80130c2:	4013      	ands	r3, r2
 80130c4:	2b01      	cmp	r3, #1
 80130c6:	d100      	bne.n	80130ca <UART_SetConfig+0x9a>
 80130c8:	e09a      	b.n	8013200 <UART_SetConfig+0x1d0>
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d02f      	beq.n	801312e <UART_SetConfig+0xfe>
 80130ce:	2b02      	cmp	r3, #2
 80130d0:	d100      	bne.n	80130d4 <UART_SetConfig+0xa4>
 80130d2:	e0a5      	b.n	8013220 <UART_SetConfig+0x1f0>
 80130d4:	2b03      	cmp	r3, #3
 80130d6:	d01a      	beq.n	801310e <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80130d8:	2380      	movs	r3, #128	; 0x80
 80130da:	021b      	lsls	r3, r3, #8
 80130dc:	69e2      	ldr	r2, [r4, #28]
 80130de:	429a      	cmp	r2, r3
 80130e0:	d060      	beq.n	80131a4 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 80130e2:	2001      	movs	r0, #1
 80130e4:	e039      	b.n	801315a <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80130e6:	4b61      	ldr	r3, [pc, #388]	; (801326c <UART_SetConfig+0x23c>)
 80130e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ea:	22c0      	movs	r2, #192	; 0xc0
 80130ec:	0292      	lsls	r2, r2, #10
 80130ee:	4013      	ands	r3, r2
 80130f0:	2280      	movs	r2, #128	; 0x80
 80130f2:	0252      	lsls	r2, r2, #9
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d100      	bne.n	80130fa <UART_SetConfig+0xca>
 80130f8:	e082      	b.n	8013200 <UART_SetConfig+0x1d0>
 80130fa:	d916      	bls.n	801312a <UART_SetConfig+0xfa>
 80130fc:	2280      	movs	r2, #128	; 0x80
 80130fe:	0292      	lsls	r2, r2, #10
 8013100:	4293      	cmp	r3, r2
 8013102:	d100      	bne.n	8013106 <UART_SetConfig+0xd6>
 8013104:	e08c      	b.n	8013220 <UART_SetConfig+0x1f0>
 8013106:	22c0      	movs	r2, #192	; 0xc0
 8013108:	0292      	lsls	r2, r2, #10
 801310a:	4293      	cmp	r3, r2
 801310c:	d1e4      	bne.n	80130d8 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801310e:	2380      	movs	r3, #128	; 0x80
 8013110:	021b      	lsls	r3, r3, #8
 8013112:	69e2      	ldr	r2, [r4, #28]
 8013114:	429a      	cmp	r2, r3
 8013116:	d038      	beq.n	801318a <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013118:	6861      	ldr	r1, [r4, #4]
 801311a:	4855      	ldr	r0, [pc, #340]	; (8013270 <UART_SetConfig+0x240>)
 801311c:	f7ed f818 	bl	8000150 <__udivsi3>
 8013120:	0400      	lsls	r0, r0, #16
 8013122:	0c00      	lsrs	r0, r0, #16
 8013124:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013126:	2000      	movs	r0, #0
        break;
 8013128:	e017      	b.n	801315a <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801312a:	2b00      	cmp	r3, #0
 801312c:	d1d4      	bne.n	80130d8 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801312e:	2380      	movs	r3, #128	; 0x80
 8013130:	021b      	lsls	r3, r3, #8
 8013132:	69e2      	ldr	r2, [r4, #28]
 8013134:	429a      	cmp	r2, r3
 8013136:	d13d      	bne.n	80131b4 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013138:	f7ff fa5c 	bl	80125f4 <HAL_RCC_GetPCLK1Freq>
 801313c:	0040      	lsls	r0, r0, #1
 801313e:	6861      	ldr	r1, [r4, #4]
 8013140:	f7ed f806 	bl	8000150 <__udivsi3>
 8013144:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013146:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8013148:	220f      	movs	r2, #15
 801314a:	0019      	movs	r1, r3
 801314c:	4391      	bics	r1, r2
 801314e:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8013150:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8013152:	071b      	lsls	r3, r3, #28
 8013154:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8013156:	4313      	orrs	r3, r2
 8013158:	60cb      	str	r3, [r1, #12]
}
 801315a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 801315c:	4b43      	ldr	r3, [pc, #268]	; (801326c <UART_SetConfig+0x23c>)
 801315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013160:	22c0      	movs	r2, #192	; 0xc0
 8013162:	0312      	lsls	r2, r2, #12
 8013164:	4013      	ands	r3, r2
 8013166:	2280      	movs	r2, #128	; 0x80
 8013168:	02d2      	lsls	r2, r2, #11
 801316a:	4293      	cmp	r3, r2
 801316c:	d02d      	beq.n	80131ca <UART_SetConfig+0x19a>
 801316e:	d913      	bls.n	8013198 <UART_SetConfig+0x168>
 8013170:	2280      	movs	r2, #128	; 0x80
 8013172:	0312      	lsls	r2, r2, #12
 8013174:	4293      	cmp	r3, r2
 8013176:	d036      	beq.n	80131e6 <UART_SetConfig+0x1b6>
 8013178:	22c0      	movs	r2, #192	; 0xc0
 801317a:	0312      	lsls	r2, r2, #12
 801317c:	4293      	cmp	r3, r2
 801317e:	d1ab      	bne.n	80130d8 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013180:	2380      	movs	r3, #128	; 0x80
 8013182:	021b      	lsls	r3, r3, #8
 8013184:	69e2      	ldr	r2, [r4, #28]
 8013186:	429a      	cmp	r2, r3
 8013188:	d1c6      	bne.n	8013118 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 801318a:	6861      	ldr	r1, [r4, #4]
 801318c:	4839      	ldr	r0, [pc, #228]	; (8013274 <UART_SetConfig+0x244>)
 801318e:	f7ec ffdf 	bl	8000150 <__udivsi3>
 8013192:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013194:	2000      	movs	r0, #0
        break;
 8013196:	e7d7      	b.n	8013148 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013198:	2b00      	cmp	r3, #0
 801319a:	d0c8      	beq.n	801312e <UART_SetConfig+0xfe>
 801319c:	e79c      	b.n	80130d8 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 801319e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80131a0:	2300      	movs	r3, #0
 80131a2:	e7d1      	b.n	8013148 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 80131a4:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80131a6:	2300      	movs	r3, #0
 80131a8:	e7ce      	b.n	8013148 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80131aa:	2380      	movs	r3, #128	; 0x80
 80131ac:	021b      	lsls	r3, r3, #8
 80131ae:	69e2      	ldr	r2, [r4, #28]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	d0c1      	beq.n	8013138 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80131b4:	f7ff fa1e 	bl	80125f4 <HAL_RCC_GetPCLK1Freq>
 80131b8:	6825      	ldr	r5, [r4, #0]
 80131ba:	6861      	ldr	r1, [r4, #4]
 80131bc:	f7ec ffc8 	bl	8000150 <__udivsi3>
 80131c0:	0400      	lsls	r0, r0, #16
 80131c2:	0c00      	lsrs	r0, r0, #16
 80131c4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80131c6:	2000      	movs	r0, #0
  return ret;
 80131c8:	e7c7      	b.n	801315a <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80131ca:	2380      	movs	r3, #128	; 0x80
 80131cc:	021b      	lsls	r3, r3, #8
 80131ce:	69e2      	ldr	r2, [r4, #28]
 80131d0:	429a      	cmp	r2, r3
 80131d2:	d11a      	bne.n	801320a <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80131d4:	f7ff f9aa 	bl	801252c <HAL_RCC_GetSysClockFreq>
 80131d8:	0040      	lsls	r0, r0, #1
 80131da:	6861      	ldr	r1, [r4, #4]
 80131dc:	f7ec ffb8 	bl	8000150 <__udivsi3>
 80131e0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80131e2:	2000      	movs	r0, #0
        break;
 80131e4:	e7b0      	b.n	8013148 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80131e6:	2380      	movs	r3, #128	; 0x80
 80131e8:	021b      	lsls	r3, r3, #8
 80131ea:	69e2      	ldr	r2, [r4, #28]
 80131ec:	429a      	cmp	r2, r3
 80131ee:	d11c      	bne.n	801322a <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80131f0:	6861      	ldr	r1, [r4, #4]
 80131f2:	2080      	movs	r0, #128	; 0x80
 80131f4:	0240      	lsls	r0, r0, #9
 80131f6:	f7ec ffab 	bl	8000150 <__udivsi3>
 80131fa:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80131fc:	2000      	movs	r0, #0
        break;
 80131fe:	e7a3      	b.n	8013148 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013200:	2380      	movs	r3, #128	; 0x80
 8013202:	021b      	lsls	r3, r3, #8
 8013204:	69e2      	ldr	r2, [r4, #28]
 8013206:	429a      	cmp	r2, r3
 8013208:	d0e4      	beq.n	80131d4 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801320a:	f7ff f98f 	bl	801252c <HAL_RCC_GetSysClockFreq>
 801320e:	6825      	ldr	r5, [r4, #0]
 8013210:	6861      	ldr	r1, [r4, #4]
 8013212:	f7ec ff9d 	bl	8000150 <__udivsi3>
 8013216:	0400      	lsls	r0, r0, #16
 8013218:	0c00      	lsrs	r0, r0, #16
 801321a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801321c:	2000      	movs	r0, #0
        break;
 801321e:	e79c      	b.n	801315a <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013220:	2380      	movs	r3, #128	; 0x80
 8013222:	021b      	lsls	r3, r3, #8
 8013224:	69e2      	ldr	r2, [r4, #28]
 8013226:	429a      	cmp	r2, r3
 8013228:	d0e2      	beq.n	80131f0 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 801322a:	6861      	ldr	r1, [r4, #4]
 801322c:	2080      	movs	r0, #128	; 0x80
 801322e:	0200      	lsls	r0, r0, #8
 8013230:	f7ec ff8e 	bl	8000150 <__udivsi3>
 8013234:	0400      	lsls	r0, r0, #16
 8013236:	0c00      	lsrs	r0, r0, #16
 8013238:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801323a:	2000      	movs	r0, #0
        break;
 801323c:	e78d      	b.n	801315a <UART_SetConfig+0x12a>
 801323e:	46c0      	nop			; (mov r8, r8)
 8013240:	efff69f3 	.word	0xefff69f3
 8013244:	ffffcfff 	.word	0xffffcfff
 8013248:	fffff4ff 	.word	0xfffff4ff
 801324c:	40013800 	.word	0x40013800
 8013250:	40004400 	.word	0x40004400
 8013254:	40004800 	.word	0x40004800
 8013258:	40004c00 	.word	0x40004c00
 801325c:	40005000 	.word	0x40005000
 8013260:	40011400 	.word	0x40011400
 8013264:	40011800 	.word	0x40011800
 8013268:	40011c00 	.word	0x40011c00
 801326c:	40021000 	.word	0x40021000
 8013270:	007a1200 	.word	0x007a1200
 8013274:	00f42400 	.word	0x00f42400

08013278 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013278:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801327a:	07db      	lsls	r3, r3, #31
 801327c:	d506      	bpl.n	801328c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801327e:	6802      	ldr	r2, [r0, #0]
 8013280:	6853      	ldr	r3, [r2, #4]
 8013282:	492c      	ldr	r1, [pc, #176]	; (8013334 <UART_AdvFeatureConfig+0xbc>)
 8013284:	400b      	ands	r3, r1
 8013286:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013288:	430b      	orrs	r3, r1
 801328a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801328c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801328e:	079b      	lsls	r3, r3, #30
 8013290:	d506      	bpl.n	80132a0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013292:	6802      	ldr	r2, [r0, #0]
 8013294:	6853      	ldr	r3, [r2, #4]
 8013296:	4928      	ldr	r1, [pc, #160]	; (8013338 <UART_AdvFeatureConfig+0xc0>)
 8013298:	400b      	ands	r3, r1
 801329a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801329c:	430b      	orrs	r3, r1
 801329e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80132a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80132a2:	075b      	lsls	r3, r3, #29
 80132a4:	d506      	bpl.n	80132b4 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80132a6:	6802      	ldr	r2, [r0, #0]
 80132a8:	6853      	ldr	r3, [r2, #4]
 80132aa:	4924      	ldr	r1, [pc, #144]	; (801333c <UART_AdvFeatureConfig+0xc4>)
 80132ac:	400b      	ands	r3, r1
 80132ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80132b0:	430b      	orrs	r3, r1
 80132b2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80132b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80132b6:	071b      	lsls	r3, r3, #28
 80132b8:	d506      	bpl.n	80132c8 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80132ba:	6802      	ldr	r2, [r0, #0]
 80132bc:	6853      	ldr	r3, [r2, #4]
 80132be:	4920      	ldr	r1, [pc, #128]	; (8013340 <UART_AdvFeatureConfig+0xc8>)
 80132c0:	400b      	ands	r3, r1
 80132c2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80132c4:	430b      	orrs	r3, r1
 80132c6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80132c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80132ca:	06db      	lsls	r3, r3, #27
 80132cc:	d506      	bpl.n	80132dc <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80132ce:	6802      	ldr	r2, [r0, #0]
 80132d0:	6893      	ldr	r3, [r2, #8]
 80132d2:	491c      	ldr	r1, [pc, #112]	; (8013344 <UART_AdvFeatureConfig+0xcc>)
 80132d4:	400b      	ands	r3, r1
 80132d6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80132d8:	430b      	orrs	r3, r1
 80132da:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80132dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80132de:	069b      	lsls	r3, r3, #26
 80132e0:	d506      	bpl.n	80132f0 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80132e2:	6802      	ldr	r2, [r0, #0]
 80132e4:	6893      	ldr	r3, [r2, #8]
 80132e6:	4918      	ldr	r1, [pc, #96]	; (8013348 <UART_AdvFeatureConfig+0xd0>)
 80132e8:	400b      	ands	r3, r1
 80132ea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80132ec:	430b      	orrs	r3, r1
 80132ee:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80132f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80132f2:	065b      	lsls	r3, r3, #25
 80132f4:	d50b      	bpl.n	801330e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80132f6:	6802      	ldr	r2, [r0, #0]
 80132f8:	6853      	ldr	r3, [r2, #4]
 80132fa:	4914      	ldr	r1, [pc, #80]	; (801334c <UART_AdvFeatureConfig+0xd4>)
 80132fc:	400b      	ands	r3, r1
 80132fe:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013300:	430b      	orrs	r3, r1
 8013302:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013304:	2380      	movs	r3, #128	; 0x80
 8013306:	035b      	lsls	r3, r3, #13
 8013308:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801330a:	429a      	cmp	r2, r3
 801330c:	d00a      	beq.n	8013324 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801330e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013310:	061b      	lsls	r3, r3, #24
 8013312:	d506      	bpl.n	8013322 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013314:	6802      	ldr	r2, [r0, #0]
 8013316:	6853      	ldr	r3, [r2, #4]
 8013318:	490d      	ldr	r1, [pc, #52]	; (8013350 <UART_AdvFeatureConfig+0xd8>)
 801331a:	400b      	ands	r3, r1
 801331c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801331e:	430b      	orrs	r3, r1
 8013320:	6053      	str	r3, [r2, #4]
}
 8013322:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013324:	6802      	ldr	r2, [r0, #0]
 8013326:	6853      	ldr	r3, [r2, #4]
 8013328:	490a      	ldr	r1, [pc, #40]	; (8013354 <UART_AdvFeatureConfig+0xdc>)
 801332a:	400b      	ands	r3, r1
 801332c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801332e:	430b      	orrs	r3, r1
 8013330:	6053      	str	r3, [r2, #4]
 8013332:	e7ec      	b.n	801330e <UART_AdvFeatureConfig+0x96>
 8013334:	fffdffff 	.word	0xfffdffff
 8013338:	fffeffff 	.word	0xfffeffff
 801333c:	fffbffff 	.word	0xfffbffff
 8013340:	ffff7fff 	.word	0xffff7fff
 8013344:	ffffefff 	.word	0xffffefff
 8013348:	ffffdfff 	.word	0xffffdfff
 801334c:	ffefffff 	.word	0xffefffff
 8013350:	fff7ffff 	.word	0xfff7ffff
 8013354:	ff9fffff 	.word	0xff9fffff

08013358 <UART_WaitOnFlagUntilTimeout>:
{
 8013358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801335a:	46c6      	mov	lr, r8
 801335c:	b500      	push	{lr}
 801335e:	0006      	movs	r6, r0
 8013360:	000c      	movs	r4, r1
 8013362:	0017      	movs	r7, r2
 8013364:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8013366:	f7fd f85f 	bl	8010428 <HAL_GetTick>
 801336a:	4680      	mov	r8, r0
  if(Status == RESET)
 801336c:	2f00      	cmp	r7, #0
 801336e:	d029      	beq.n	80133c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013370:	6832      	ldr	r2, [r6, #0]
 8013372:	69d3      	ldr	r3, [r2, #28]
 8013374:	4023      	ands	r3, r4
 8013376:	42a3      	cmp	r3, r4
 8013378:	d152      	bne.n	8013420 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 801337a:	1c6b      	adds	r3, r5, #1
 801337c:	d0f9      	beq.n	8013372 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801337e:	2d00      	cmp	r5, #0
 8013380:	d005      	beq.n	801338e <UART_WaitOnFlagUntilTimeout+0x36>
 8013382:	f7fd f851 	bl	8010428 <HAL_GetTick>
 8013386:	4643      	mov	r3, r8
 8013388:	1ac0      	subs	r0, r0, r3
 801338a:	42a8      	cmp	r0, r5
 801338c:	d9f0      	bls.n	8013370 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801338e:	6832      	ldr	r2, [r6, #0]
 8013390:	6813      	ldr	r3, [r2, #0]
 8013392:	2180      	movs	r1, #128	; 0x80
 8013394:	438b      	bics	r3, r1
 8013396:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013398:	6832      	ldr	r2, [r6, #0]
 801339a:	6813      	ldr	r3, [r2, #0]
 801339c:	3960      	subs	r1, #96	; 0x60
 801339e:	438b      	bics	r3, r1
 80133a0:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80133a2:	6832      	ldr	r2, [r6, #0]
 80133a4:	6813      	ldr	r3, [r2, #0]
 80133a6:	491f      	ldr	r1, [pc, #124]	; (8013424 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80133a8:	400b      	ands	r3, r1
 80133aa:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80133ac:	6831      	ldr	r1, [r6, #0]
 80133ae:	688b      	ldr	r3, [r1, #8]
 80133b0:	2201      	movs	r2, #1
 80133b2:	4393      	bics	r3, r2
 80133b4:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80133b6:	2369      	movs	r3, #105	; 0x69
 80133b8:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80133ba:	3b01      	subs	r3, #1
 80133bc:	2200      	movs	r2, #0
 80133be:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80133c0:	2003      	movs	r0, #3
 80133c2:	e02a      	b.n	801341a <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80133c4:	6832      	ldr	r2, [r6, #0]
 80133c6:	69d3      	ldr	r3, [r2, #28]
 80133c8:	4023      	ands	r3, r4
 80133ca:	42a3      	cmp	r3, r4
 80133cc:	d024      	beq.n	8013418 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 80133ce:	1c6b      	adds	r3, r5, #1
 80133d0:	d0f9      	beq.n	80133c6 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80133d2:	2d00      	cmp	r5, #0
 80133d4:	d005      	beq.n	80133e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80133d6:	f7fd f827 	bl	8010428 <HAL_GetTick>
 80133da:	4643      	mov	r3, r8
 80133dc:	1ac0      	subs	r0, r0, r3
 80133de:	42a8      	cmp	r0, r5
 80133e0:	d9f0      	bls.n	80133c4 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80133e2:	6832      	ldr	r2, [r6, #0]
 80133e4:	6813      	ldr	r3, [r2, #0]
 80133e6:	2180      	movs	r1, #128	; 0x80
 80133e8:	438b      	bics	r3, r1
 80133ea:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80133ec:	6832      	ldr	r2, [r6, #0]
 80133ee:	6813      	ldr	r3, [r2, #0]
 80133f0:	3960      	subs	r1, #96	; 0x60
 80133f2:	438b      	bics	r3, r1
 80133f4:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80133f6:	6832      	ldr	r2, [r6, #0]
 80133f8:	6813      	ldr	r3, [r2, #0]
 80133fa:	490a      	ldr	r1, [pc, #40]	; (8013424 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80133fc:	400b      	ands	r3, r1
 80133fe:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013400:	6831      	ldr	r1, [r6, #0]
 8013402:	688b      	ldr	r3, [r1, #8]
 8013404:	2201      	movs	r2, #1
 8013406:	4393      	bics	r3, r2
 8013408:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801340a:	2369      	movs	r3, #105	; 0x69
 801340c:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801340e:	3b01      	subs	r3, #1
 8013410:	2200      	movs	r2, #0
 8013412:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013414:	2003      	movs	r0, #3
 8013416:	e000      	b.n	801341a <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8013418:	2000      	movs	r0, #0
}
 801341a:	bc04      	pop	{r2}
 801341c:	4690      	mov	r8, r2
 801341e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013420:	2000      	movs	r0, #0
 8013422:	e7fa      	b.n	801341a <UART_WaitOnFlagUntilTimeout+0xc2>
 8013424:	fffffeff 	.word	0xfffffeff

08013428 <HAL_UART_Transmit>:
{
 8013428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801342a:	b083      	sub	sp, #12
 801342c:	0004      	movs	r4, r0
 801342e:	000e      	movs	r6, r1
 8013430:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013432:	2369      	movs	r3, #105	; 0x69
 8013434:	5cc3      	ldrb	r3, [r0, r3]
 8013436:	2b01      	cmp	r3, #1
 8013438:	d004      	beq.n	8013444 <HAL_UART_Transmit+0x1c>
 801343a:	2369      	movs	r3, #105	; 0x69
 801343c:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 801343e:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013440:	2b22      	cmp	r3, #34	; 0x22
 8013442:	d153      	bne.n	80134ec <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8013444:	2e00      	cmp	r6, #0
 8013446:	d050      	beq.n	80134ea <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 8013448:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801344a:	2a00      	cmp	r2, #0
 801344c:	d04e      	beq.n	80134ec <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 801344e:	2368      	movs	r3, #104	; 0x68
 8013450:	5ce3      	ldrb	r3, [r4, r3]
 8013452:	2b01      	cmp	r3, #1
 8013454:	d04c      	beq.n	80134f0 <HAL_UART_Transmit+0xc8>
 8013456:	2368      	movs	r3, #104	; 0x68
 8013458:	2101      	movs	r1, #1
 801345a:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801345c:	2300      	movs	r3, #0
 801345e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013460:	3369      	adds	r3, #105	; 0x69
 8013462:	5ce3      	ldrb	r3, [r4, r3]
 8013464:	2b22      	cmp	r3, #34	; 0x22
 8013466:	d008      	beq.n	801347a <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013468:	2369      	movs	r3, #105	; 0x69
 801346a:	2112      	movs	r1, #18
 801346c:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 801346e:	2350      	movs	r3, #80	; 0x50
 8013470:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8013472:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013474:	2580      	movs	r5, #128	; 0x80
 8013476:	016d      	lsls	r5, r5, #5
 8013478:	e00a      	b.n	8013490 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801347a:	3347      	adds	r3, #71	; 0x47
 801347c:	3131      	adds	r1, #49	; 0x31
 801347e:	54e1      	strb	r1, [r4, r3]
 8013480:	e7f5      	b.n	801346e <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8013482:	7833      	ldrb	r3, [r6, #0]
 8013484:	6822      	ldr	r2, [r4, #0]
 8013486:	8513      	strh	r3, [r2, #40]	; 0x28
 8013488:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 801348a:	5be2      	ldrh	r2, [r4, r7]
 801348c:	2a00      	cmp	r2, #0
 801348e:	d016      	beq.n	80134be <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013490:	3a01      	subs	r2, #1
 8013492:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013494:	9b01      	ldr	r3, [sp, #4]
 8013496:	2200      	movs	r2, #0
 8013498:	2180      	movs	r1, #128	; 0x80
 801349a:	0020      	movs	r0, r4
 801349c:	f7ff ff5c 	bl	8013358 <UART_WaitOnFlagUntilTimeout>
 80134a0:	2800      	cmp	r0, #0
 80134a2:	d127      	bne.n	80134f4 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80134a4:	68a3      	ldr	r3, [r4, #8]
 80134a6:	42ab      	cmp	r3, r5
 80134a8:	d1eb      	bne.n	8013482 <HAL_UART_Transmit+0x5a>
 80134aa:	6923      	ldr	r3, [r4, #16]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d1e8      	bne.n	8013482 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80134b0:	8833      	ldrh	r3, [r6, #0]
 80134b2:	05db      	lsls	r3, r3, #23
 80134b4:	0ddb      	lsrs	r3, r3, #23
 80134b6:	6822      	ldr	r2, [r4, #0]
 80134b8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80134ba:	3602      	adds	r6, #2
 80134bc:	e7e5      	b.n	801348a <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80134be:	9b01      	ldr	r3, [sp, #4]
 80134c0:	2140      	movs	r1, #64	; 0x40
 80134c2:	0020      	movs	r0, r4
 80134c4:	f7ff ff48 	bl	8013358 <UART_WaitOnFlagUntilTimeout>
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d115      	bne.n	80134f8 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80134cc:	2369      	movs	r3, #105	; 0x69
 80134ce:	5ce3      	ldrb	r3, [r4, r3]
 80134d0:	2b32      	cmp	r3, #50	; 0x32
 80134d2:	d006      	beq.n	80134e2 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 80134d4:	2369      	movs	r3, #105	; 0x69
 80134d6:	2201      	movs	r2, #1
 80134d8:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80134da:	2368      	movs	r3, #104	; 0x68
 80134dc:	2200      	movs	r2, #0
 80134de:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80134e0:	e004      	b.n	80134ec <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80134e2:	3337      	adds	r3, #55	; 0x37
 80134e4:	2222      	movs	r2, #34	; 0x22
 80134e6:	54e2      	strb	r2, [r4, r3]
 80134e8:	e7f7      	b.n	80134da <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 80134ea:	2001      	movs	r0, #1
}
 80134ec:	b003      	add	sp, #12
 80134ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 80134f0:	2002      	movs	r0, #2
 80134f2:	e7fb      	b.n	80134ec <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80134f4:	2003      	movs	r0, #3
 80134f6:	e7f9      	b.n	80134ec <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80134f8:	2003      	movs	r0, #3
 80134fa:	e7f7      	b.n	80134ec <HAL_UART_Transmit+0xc4>

080134fc <UART_CheckIdleState>:
{
 80134fc:	b510      	push	{r4, lr}
 80134fe:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013500:	2300      	movs	r3, #0
 8013502:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013504:	6803      	ldr	r3, [r0, #0]
 8013506:	4a18      	ldr	r2, [pc, #96]	; (8013568 <UART_CheckIdleState+0x6c>)
 8013508:	4293      	cmp	r3, r2
 801350a:	d005      	beq.n	8013518 <UART_CheckIdleState+0x1c>
 801350c:	4a17      	ldr	r2, [pc, #92]	; (801356c <UART_CheckIdleState+0x70>)
 801350e:	4293      	cmp	r3, r2
 8013510:	d002      	beq.n	8013518 <UART_CheckIdleState+0x1c>
 8013512:	4a17      	ldr	r2, [pc, #92]	; (8013570 <UART_CheckIdleState+0x74>)
 8013514:	4293      	cmp	r3, r2
 8013516:	d106      	bne.n	8013526 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	071b      	lsls	r3, r3, #28
 801351c:	d40b      	bmi.n	8013536 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801351e:	6823      	ldr	r3, [r4, #0]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	075b      	lsls	r3, r3, #29
 8013524:	d413      	bmi.n	801354e <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8013526:	2369      	movs	r3, #105	; 0x69
 8013528:	2201      	movs	r2, #1
 801352a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 801352c:	3b01      	subs	r3, #1
 801352e:	2200      	movs	r2, #0
 8013530:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8013532:	2000      	movs	r0, #0
}
 8013534:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013536:	23fa      	movs	r3, #250	; 0xfa
 8013538:	2180      	movs	r1, #128	; 0x80
 801353a:	009b      	lsls	r3, r3, #2
 801353c:	2200      	movs	r2, #0
 801353e:	0389      	lsls	r1, r1, #14
 8013540:	0020      	movs	r0, r4
 8013542:	f7ff ff09 	bl	8013358 <UART_WaitOnFlagUntilTimeout>
 8013546:	2800      	cmp	r0, #0
 8013548:	d0e9      	beq.n	801351e <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 801354a:	2003      	movs	r0, #3
 801354c:	e7f2      	b.n	8013534 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801354e:	23fa      	movs	r3, #250	; 0xfa
 8013550:	2180      	movs	r1, #128	; 0x80
 8013552:	009b      	lsls	r3, r3, #2
 8013554:	2200      	movs	r2, #0
 8013556:	03c9      	lsls	r1, r1, #15
 8013558:	0020      	movs	r0, r4
 801355a:	f7ff fefd 	bl	8013358 <UART_WaitOnFlagUntilTimeout>
 801355e:	2800      	cmp	r0, #0
 8013560:	d0e1      	beq.n	8013526 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8013562:	2003      	movs	r0, #3
 8013564:	e7e6      	b.n	8013534 <UART_CheckIdleState+0x38>
 8013566:	46c0      	nop			; (mov r8, r8)
 8013568:	40013800 	.word	0x40013800
 801356c:	40004400 	.word	0x40004400
 8013570:	40004800 	.word	0x40004800

08013574 <HAL_UART_Init>:
{
 8013574:	b510      	push	{r4, lr}
 8013576:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013578:	d030      	beq.n	80135dc <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 801357a:	2369      	movs	r3, #105	; 0x69
 801357c:	5cc3      	ldrb	r3, [r0, r3]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d022      	beq.n	80135c8 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8013582:	2369      	movs	r3, #105	; 0x69
 8013584:	2202      	movs	r2, #2
 8013586:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013588:	6822      	ldr	r2, [r4, #0]
 801358a:	6813      	ldr	r3, [r2, #0]
 801358c:	2101      	movs	r1, #1
 801358e:	438b      	bics	r3, r1
 8013590:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013592:	0020      	movs	r0, r4
 8013594:	f7ff fd4c 	bl	8013030 <UART_SetConfig>
 8013598:	2801      	cmp	r0, #1
 801359a:	d014      	beq.n	80135c6 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801359c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d118      	bne.n	80135d4 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80135a2:	6822      	ldr	r2, [r4, #0]
 80135a4:	6853      	ldr	r3, [r2, #4]
 80135a6:	490e      	ldr	r1, [pc, #56]	; (80135e0 <HAL_UART_Init+0x6c>)
 80135a8:	400b      	ands	r3, r1
 80135aa:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80135ac:	6822      	ldr	r2, [r4, #0]
 80135ae:	6893      	ldr	r3, [r2, #8]
 80135b0:	212a      	movs	r1, #42	; 0x2a
 80135b2:	438b      	bics	r3, r1
 80135b4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80135b6:	6822      	ldr	r2, [r4, #0]
 80135b8:	6813      	ldr	r3, [r2, #0]
 80135ba:	3929      	subs	r1, #41	; 0x29
 80135bc:	430b      	orrs	r3, r1
 80135be:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80135c0:	0020      	movs	r0, r4
 80135c2:	f7ff ff9b 	bl	80134fc <UART_CheckIdleState>
}
 80135c6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80135c8:	3368      	adds	r3, #104	; 0x68
 80135ca:	2200      	movs	r2, #0
 80135cc:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80135ce:	f7fa fb3f 	bl	800dc50 <HAL_UART_MspInit>
 80135d2:	e7d6      	b.n	8013582 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80135d4:	0020      	movs	r0, r4
 80135d6:	f7ff fe4f 	bl	8013278 <UART_AdvFeatureConfig>
 80135da:	e7e2      	b.n	80135a2 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80135dc:	2001      	movs	r0, #1
 80135de:	e7f2      	b.n	80135c6 <HAL_UART_Init+0x52>
 80135e0:	ffffb7ff 	.word	0xffffb7ff

080135e4 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80135e4:	2369      	movs	r3, #105	; 0x69
 80135e6:	5cc3      	ldrb	r3, [r0, r3]
 80135e8:	2b12      	cmp	r3, #18
 80135ea:	d004      	beq.n	80135f6 <UART_Transmit_IT+0x12>
 80135ec:	2369      	movs	r3, #105	; 0x69
 80135ee:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80135f0:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80135f2:	2a32      	cmp	r2, #50	; 0x32
 80135f4:	d113      	bne.n	801361e <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 80135f6:	2352      	movs	r3, #82	; 0x52
 80135f8:	5ac3      	ldrh	r3, [r0, r3]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d011      	beq.n	8013622 <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80135fe:	2380      	movs	r3, #128	; 0x80
 8013600:	015b      	lsls	r3, r3, #5
 8013602:	6882      	ldr	r2, [r0, #8]
 8013604:	429a      	cmp	r2, r3
 8013606:	d018      	beq.n	801363a <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013608:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801360a:	1c5a      	adds	r2, r3, #1
 801360c:	64c2      	str	r2, [r0, #76]	; 0x4c
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	6802      	ldr	r2, [r0, #0]
 8013612:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8013614:	2252      	movs	r2, #82	; 0x52
 8013616:	5a83      	ldrh	r3, [r0, r2]
 8013618:	3b01      	subs	r3, #1
 801361a:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 801361c:	2300      	movs	r3, #0
  }
}
 801361e:	0018      	movs	r0, r3
 8013620:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013622:	6802      	ldr	r2, [r0, #0]
 8013624:	6813      	ldr	r3, [r2, #0]
 8013626:	2180      	movs	r1, #128	; 0x80
 8013628:	438b      	bics	r3, r1
 801362a:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801362c:	6802      	ldr	r2, [r0, #0]
 801362e:	6813      	ldr	r3, [r2, #0]
 8013630:	3940      	subs	r1, #64	; 0x40
 8013632:	430b      	orrs	r3, r1
 8013634:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8013636:	2300      	movs	r3, #0
 8013638:	e7f1      	b.n	801361e <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801363a:	6903      	ldr	r3, [r0, #16]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d1e3      	bne.n	8013608 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013640:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013642:	881b      	ldrh	r3, [r3, #0]
 8013644:	05db      	lsls	r3, r3, #23
 8013646:	0ddb      	lsrs	r3, r3, #23
 8013648:	6802      	ldr	r2, [r0, #0]
 801364a:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 801364c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801364e:	3302      	adds	r3, #2
 8013650:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013652:	e7df      	b.n	8013614 <UART_Transmit_IT+0x30>

08013654 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013654:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013656:	6802      	ldr	r2, [r0, #0]
 8013658:	6813      	ldr	r3, [r2, #0]
 801365a:	2140      	movs	r1, #64	; 0x40
 801365c:	438b      	bics	r3, r1
 801365e:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013660:	2369      	movs	r3, #105	; 0x69
 8013662:	5cc3      	ldrb	r3, [r0, r3]
 8013664:	2b32      	cmp	r3, #50	; 0x32
 8013666:	d00a      	beq.n	801367e <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013668:	6801      	ldr	r1, [r0, #0]
 801366a:	688b      	ldr	r3, [r1, #8]
 801366c:	2201      	movs	r2, #1
 801366e:	4393      	bics	r3, r2
 8013670:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8013672:	2369      	movs	r3, #105	; 0x69
 8013674:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8013676:	f7fa f811 	bl	800d69c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 801367a:	2000      	movs	r0, #0
 801367c:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 801367e:	3337      	adds	r3, #55	; 0x37
 8013680:	2222      	movs	r2, #34	; 0x22
 8013682:	54c2      	strb	r2, [r0, r3]
 8013684:	e7f7      	b.n	8013676 <UART_EndTransmit_IT+0x22>
	...

08013688 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013688:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801368a:	2369      	movs	r3, #105	; 0x69
 801368c:	5cc3      	ldrb	r3, [r0, r3]
 801368e:	2b22      	cmp	r3, #34	; 0x22
 8013690:	d004      	beq.n	801369c <UART_Receive_IT+0x14>
 8013692:	2369      	movs	r3, #105	; 0x69
 8013694:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013696:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013698:	2b32      	cmp	r3, #50	; 0x32
 801369a:	d12d      	bne.n	80136f8 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 801369c:	235c      	movs	r3, #92	; 0x5c
 801369e:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136a0:	2280      	movs	r2, #128	; 0x80
 80136a2:	0152      	lsls	r2, r2, #5
 80136a4:	6883      	ldr	r3, [r0, #8]
 80136a6:	4293      	cmp	r3, r2
 80136a8:	d028      	beq.n	80136fc <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80136aa:	6803      	ldr	r3, [r0, #0]
 80136ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80136ae:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80136b0:	1c54      	adds	r4, r2, #1
 80136b2:	6544      	str	r4, [r0, #84]	; 0x54
 80136b4:	400b      	ands	r3, r1
 80136b6:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 80136b8:	225a      	movs	r2, #90	; 0x5a
 80136ba:	5a83      	ldrh	r3, [r0, r2]
 80136bc:	3b01      	subs	r3, #1
 80136be:	b29b      	uxth	r3, r3
 80136c0:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 80136c2:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d117      	bne.n	80136f8 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80136c8:	6802      	ldr	r2, [r0, #0]
 80136ca:	6813      	ldr	r3, [r2, #0]
 80136cc:	2120      	movs	r1, #32
 80136ce:	438b      	bics	r3, r1
 80136d0:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80136d2:	2369      	movs	r3, #105	; 0x69
 80136d4:	5cc3      	ldrb	r3, [r0, r3]
 80136d6:	2b32      	cmp	r3, #50	; 0x32
 80136d8:	d01c      	beq.n	8013714 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80136da:	6802      	ldr	r2, [r0, #0]
 80136dc:	6813      	ldr	r3, [r2, #0]
 80136de:	490f      	ldr	r1, [pc, #60]	; (801371c <UART_Receive_IT+0x94>)
 80136e0:	400b      	ands	r3, r1
 80136e2:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80136e4:	6801      	ldr	r1, [r0, #0]
 80136e6:	688b      	ldr	r3, [r1, #8]
 80136e8:	2201      	movs	r2, #1
 80136ea:	4393      	bics	r3, r2
 80136ec:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 80136ee:	2369      	movs	r3, #105	; 0x69
 80136f0:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 80136f2:	f7fa f811 	bl	800d718 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80136f6:	2200      	movs	r2, #0
  }
}
 80136f8:	0010      	movs	r0, r2
 80136fa:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136fc:	6903      	ldr	r3, [r0, #16]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d1d3      	bne.n	80136aa <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013702:	6803      	ldr	r3, [r0, #0]
 8013704:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013706:	400b      	ands	r3, r1
 8013708:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801370a:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 801370c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801370e:	3302      	adds	r3, #2
 8013710:	6543      	str	r3, [r0, #84]	; 0x54
 8013712:	e7d1      	b.n	80136b8 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013714:	3337      	adds	r3, #55	; 0x37
 8013716:	2212      	movs	r2, #18
 8013718:	54c2      	strb	r2, [r0, r3]
 801371a:	e7ea      	b.n	80136f2 <UART_Receive_IT+0x6a>
 801371c:	fffffeff 	.word	0xfffffeff

08013720 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013720:	4770      	bx	lr

08013722 <HAL_UART_IRQHandler>:
{
 8013722:	b510      	push	{r4, lr}
 8013724:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8013726:	6803      	ldr	r3, [r0, #0]
 8013728:	69da      	ldr	r2, [r3, #28]
 801372a:	07d2      	lsls	r2, r2, #31
 801372c:	d509      	bpl.n	8013742 <HAL_UART_IRQHandler+0x20>
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	05d2      	lsls	r2, r2, #23
 8013732:	d506      	bpl.n	8013742 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8013734:	2201      	movs	r2, #1
 8013736:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013738:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801373a:	4313      	orrs	r3, r2
 801373c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801373e:	2369      	movs	r3, #105	; 0x69
 8013740:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013742:	6823      	ldr	r3, [r4, #0]
 8013744:	69da      	ldr	r2, [r3, #28]
 8013746:	0792      	lsls	r2, r2, #30
 8013748:	d50b      	bpl.n	8013762 <HAL_UART_IRQHandler+0x40>
 801374a:	689a      	ldr	r2, [r3, #8]
 801374c:	07d2      	lsls	r2, r2, #31
 801374e:	d508      	bpl.n	8013762 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013750:	2202      	movs	r2, #2
 8013752:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013754:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013756:	3202      	adds	r2, #2
 8013758:	4313      	orrs	r3, r2
 801375a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801375c:	2369      	movs	r3, #105	; 0x69
 801375e:	3a03      	subs	r2, #3
 8013760:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013762:	6823      	ldr	r3, [r4, #0]
 8013764:	69da      	ldr	r2, [r3, #28]
 8013766:	0752      	lsls	r2, r2, #29
 8013768:	d50b      	bpl.n	8013782 <HAL_UART_IRQHandler+0x60>
 801376a:	689a      	ldr	r2, [r3, #8]
 801376c:	07d2      	lsls	r2, r2, #31
 801376e:	d508      	bpl.n	8013782 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013770:	2204      	movs	r2, #4
 8013772:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013774:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013776:	3a02      	subs	r2, #2
 8013778:	4313      	orrs	r3, r2
 801377a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801377c:	2369      	movs	r3, #105	; 0x69
 801377e:	3a01      	subs	r2, #1
 8013780:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013782:	6823      	ldr	r3, [r4, #0]
 8013784:	69da      	ldr	r2, [r3, #28]
 8013786:	0712      	lsls	r2, r2, #28
 8013788:	d50a      	bpl.n	80137a0 <HAL_UART_IRQHandler+0x7e>
 801378a:	689a      	ldr	r2, [r3, #8]
 801378c:	07d2      	lsls	r2, r2, #31
 801378e:	d507      	bpl.n	80137a0 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013790:	2208      	movs	r2, #8
 8013792:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013794:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013796:	4313      	orrs	r3, r2
 8013798:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801379a:	2369      	movs	r3, #105	; 0x69
 801379c:	3a07      	subs	r2, #7
 801379e:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80137a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d11c      	bne.n	80137e0 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80137a6:	6823      	ldr	r3, [r4, #0]
 80137a8:	69da      	ldr	r2, [r3, #28]
 80137aa:	02d2      	lsls	r2, r2, #11
 80137ac:	d502      	bpl.n	80137b4 <HAL_UART_IRQHandler+0x92>
 80137ae:	689a      	ldr	r2, [r3, #8]
 80137b0:	0252      	lsls	r2, r2, #9
 80137b2:	d419      	bmi.n	80137e8 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80137b4:	6823      	ldr	r3, [r4, #0]
 80137b6:	69da      	ldr	r2, [r3, #28]
 80137b8:	0692      	lsls	r2, r2, #26
 80137ba:	d502      	bpl.n	80137c2 <HAL_UART_IRQHandler+0xa0>
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	069b      	lsls	r3, r3, #26
 80137c0:	d41c      	bmi.n	80137fc <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80137c2:	6823      	ldr	r3, [r4, #0]
 80137c4:	69da      	ldr	r2, [r3, #28]
 80137c6:	0612      	lsls	r2, r2, #24
 80137c8:	d502      	bpl.n	80137d0 <HAL_UART_IRQHandler+0xae>
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	061b      	lsls	r3, r3, #24
 80137ce:	d41e      	bmi.n	801380e <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80137d0:	6823      	ldr	r3, [r4, #0]
 80137d2:	69da      	ldr	r2, [r3, #28]
 80137d4:	0652      	lsls	r2, r2, #25
 80137d6:	d502      	bpl.n	80137de <HAL_UART_IRQHandler+0xbc>
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	065b      	lsls	r3, r3, #25
 80137dc:	d41b      	bmi.n	8013816 <HAL_UART_IRQHandler+0xf4>
}
 80137de:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 80137e0:	0020      	movs	r0, r4
 80137e2:	f7f9 ff73 	bl	800d6cc <HAL_UART_ErrorCallback>
 80137e6:	e7de      	b.n	80137a6 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80137e8:	2280      	movs	r2, #128	; 0x80
 80137ea:	0352      	lsls	r2, r2, #13
 80137ec:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80137ee:	2369      	movs	r3, #105	; 0x69
 80137f0:	2201      	movs	r2, #1
 80137f2:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80137f4:	0020      	movs	r0, r4
 80137f6:	f7ff ff93 	bl	8013720 <HAL_UARTEx_WakeupCallback>
 80137fa:	e7db      	b.n	80137b4 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 80137fc:	0020      	movs	r0, r4
 80137fe:	f7ff ff43 	bl	8013688 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013802:	6822      	ldr	r2, [r4, #0]
 8013804:	6993      	ldr	r3, [r2, #24]
 8013806:	2108      	movs	r1, #8
 8013808:	430b      	orrs	r3, r1
 801380a:	6193      	str	r3, [r2, #24]
 801380c:	e7d9      	b.n	80137c2 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 801380e:	0020      	movs	r0, r4
 8013810:	f7ff fee8 	bl	80135e4 <UART_Transmit_IT>
 8013814:	e7dc      	b.n	80137d0 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8013816:	0020      	movs	r0, r4
 8013818:	f7ff ff1c 	bl	8013654 <UART_EndTransmit_IT>
}
 801381c:	e7df      	b.n	80137de <HAL_UART_IRQHandler+0xbc>

0801381e <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 801381e:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8013820:	f7f0 ff24 	bl	800466c <Module_Init>
 8013824:	e7fe      	b.n	8013824 <main+0x6>

08013826 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8013826:	e7fe      	b.n	8013826 <UserTask>

08013828 <atof>:
 8013828:	b510      	push	{r4, lr}
 801382a:	2100      	movs	r1, #0
 801382c:	f001 fb3e 	bl	8014eac <strtod>
 8013830:	bd10      	pop	{r4, pc}

08013832 <atoi>:
 8013832:	b510      	push	{r4, lr}
 8013834:	220a      	movs	r2, #10
 8013836:	2100      	movs	r1, #0
 8013838:	f001 fc04 	bl	8015044 <strtol>
 801383c:	bd10      	pop	{r4, pc}

0801383e <atol>:
 801383e:	b510      	push	{r4, lr}
 8013840:	220a      	movs	r2, #10
 8013842:	2100      	movs	r1, #0
 8013844:	f001 fbfe 	bl	8015044 <strtol>
 8013848:	bd10      	pop	{r4, pc}
	...

0801384c <__libc_init_array>:
 801384c:	b570      	push	{r4, r5, r6, lr}
 801384e:	2600      	movs	r6, #0
 8013850:	4d0c      	ldr	r5, [pc, #48]	; (8013884 <__libc_init_array+0x38>)
 8013852:	4c0d      	ldr	r4, [pc, #52]	; (8013888 <__libc_init_array+0x3c>)
 8013854:	1b64      	subs	r4, r4, r5
 8013856:	10a4      	asrs	r4, r4, #2
 8013858:	42a6      	cmp	r6, r4
 801385a:	d109      	bne.n	8013870 <__libc_init_array+0x24>
 801385c:	2600      	movs	r6, #0
 801385e:	f004 fe6d 	bl	801853c <_init>
 8013862:	4d0a      	ldr	r5, [pc, #40]	; (801388c <__libc_init_array+0x40>)
 8013864:	4c0a      	ldr	r4, [pc, #40]	; (8013890 <__libc_init_array+0x44>)
 8013866:	1b64      	subs	r4, r4, r5
 8013868:	10a4      	asrs	r4, r4, #2
 801386a:	42a6      	cmp	r6, r4
 801386c:	d105      	bne.n	801387a <__libc_init_array+0x2e>
 801386e:	bd70      	pop	{r4, r5, r6, pc}
 8013870:	00b3      	lsls	r3, r6, #2
 8013872:	58eb      	ldr	r3, [r5, r3]
 8013874:	4798      	blx	r3
 8013876:	3601      	adds	r6, #1
 8013878:	e7ee      	b.n	8013858 <__libc_init_array+0xc>
 801387a:	00b3      	lsls	r3, r6, #2
 801387c:	58eb      	ldr	r3, [r5, r3]
 801387e:	4798      	blx	r3
 8013880:	3601      	adds	r6, #1
 8013882:	e7f2      	b.n	801386a <__libc_init_array+0x1e>
 8013884:	0801bd54 	.word	0x0801bd54
 8013888:	0801bd54 	.word	0x0801bd54
 801388c:	0801bd54 	.word	0x0801bd54
 8013890:	0801bd5c 	.word	0x0801bd5c

08013894 <__locale_ctype_ptr_l>:
 8013894:	30ec      	adds	r0, #236	; 0xec
 8013896:	6800      	ldr	r0, [r0, #0]
 8013898:	4770      	bx	lr
	...

0801389c <__locale_ctype_ptr>:
 801389c:	4b04      	ldr	r3, [pc, #16]	; (80138b0 <__locale_ctype_ptr+0x14>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d100      	bne.n	80138a8 <__locale_ctype_ptr+0xc>
 80138a6:	4b03      	ldr	r3, [pc, #12]	; (80138b4 <__locale_ctype_ptr+0x18>)
 80138a8:	33ec      	adds	r3, #236	; 0xec
 80138aa:	6818      	ldr	r0, [r3, #0]
 80138ac:	4770      	bx	lr
 80138ae:	46c0      	nop			; (mov r8, r8)
 80138b0:	200000a8 	.word	0x200000a8
 80138b4:	200004d8 	.word	0x200004d8

080138b8 <malloc>:
 80138b8:	b510      	push	{r4, lr}
 80138ba:	4b03      	ldr	r3, [pc, #12]	; (80138c8 <malloc+0x10>)
 80138bc:	0001      	movs	r1, r0
 80138be:	6818      	ldr	r0, [r3, #0]
 80138c0:	f000 f80e 	bl	80138e0 <_malloc_r>
 80138c4:	bd10      	pop	{r4, pc}
 80138c6:	46c0      	nop			; (mov r8, r8)
 80138c8:	200000a8 	.word	0x200000a8

080138cc <free>:
 80138cc:	b510      	push	{r4, lr}
 80138ce:	4b03      	ldr	r3, [pc, #12]	; (80138dc <free+0x10>)
 80138d0:	0001      	movs	r1, r0
 80138d2:	6818      	ldr	r0, [r3, #0]
 80138d4:	f003 fd10 	bl	80172f8 <_free_r>
 80138d8:	bd10      	pop	{r4, pc}
 80138da:	46c0      	nop			; (mov r8, r8)
 80138dc:	200000a8 	.word	0x200000a8

080138e0 <_malloc_r>:
 80138e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138e2:	000d      	movs	r5, r1
 80138e4:	b085      	sub	sp, #20
 80138e6:	350b      	adds	r5, #11
 80138e8:	9001      	str	r0, [sp, #4]
 80138ea:	2d16      	cmp	r5, #22
 80138ec:	d908      	bls.n	8013900 <_malloc_r+0x20>
 80138ee:	2307      	movs	r3, #7
 80138f0:	439d      	bics	r5, r3
 80138f2:	d506      	bpl.n	8013902 <_malloc_r+0x22>
 80138f4:	230c      	movs	r3, #12
 80138f6:	9a01      	ldr	r2, [sp, #4]
 80138f8:	6013      	str	r3, [r2, #0]
 80138fa:	2000      	movs	r0, #0
 80138fc:	b005      	add	sp, #20
 80138fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013900:	2510      	movs	r5, #16
 8013902:	428d      	cmp	r5, r1
 8013904:	d3f6      	bcc.n	80138f4 <_malloc_r+0x14>
 8013906:	9801      	ldr	r0, [sp, #4]
 8013908:	f000 fa34 	bl	8013d74 <__malloc_lock>
 801390c:	23f8      	movs	r3, #248	; 0xf8
 801390e:	33ff      	adds	r3, #255	; 0xff
 8013910:	4ac4      	ldr	r2, [pc, #784]	; (8013c24 <_malloc_r+0x344>)
 8013912:	429d      	cmp	r5, r3
 8013914:	d820      	bhi.n	8013958 <_malloc_r+0x78>
 8013916:	0029      	movs	r1, r5
 8013918:	3108      	adds	r1, #8
 801391a:	1851      	adds	r1, r2, r1
 801391c:	0008      	movs	r0, r1
 801391e:	684c      	ldr	r4, [r1, #4]
 8013920:	3808      	subs	r0, #8
 8013922:	08eb      	lsrs	r3, r5, #3
 8013924:	4284      	cmp	r4, r0
 8013926:	d104      	bne.n	8013932 <_malloc_r+0x52>
 8013928:	68cc      	ldr	r4, [r1, #12]
 801392a:	3302      	adds	r3, #2
 801392c:	469c      	mov	ip, r3
 801392e:	42a1      	cmp	r1, r4
 8013930:	d02a      	beq.n	8013988 <_malloc_r+0xa8>
 8013932:	2303      	movs	r3, #3
 8013934:	6862      	ldr	r2, [r4, #4]
 8013936:	68a1      	ldr	r1, [r4, #8]
 8013938:	439a      	bics	r2, r3
 801393a:	0013      	movs	r3, r2
 801393c:	68e2      	ldr	r2, [r4, #12]
 801393e:	18e3      	adds	r3, r4, r3
 8013940:	60ca      	str	r2, [r1, #12]
 8013942:	6091      	str	r1, [r2, #8]
 8013944:	2201      	movs	r2, #1
 8013946:	6859      	ldr	r1, [r3, #4]
 8013948:	430a      	orrs	r2, r1
 801394a:	605a      	str	r2, [r3, #4]
 801394c:	9801      	ldr	r0, [sp, #4]
 801394e:	f000 fa19 	bl	8013d84 <__malloc_unlock>
 8013952:	0020      	movs	r0, r4
 8013954:	3008      	adds	r0, #8
 8013956:	e7d1      	b.n	80138fc <_malloc_r+0x1c>
 8013958:	0a69      	lsrs	r1, r5, #9
 801395a:	233f      	movs	r3, #63	; 0x3f
 801395c:	2900      	cmp	r1, #0
 801395e:	d003      	beq.n	8013968 <_malloc_r+0x88>
 8013960:	2904      	cmp	r1, #4
 8013962:	d828      	bhi.n	80139b6 <_malloc_r+0xd6>
 8013964:	09ab      	lsrs	r3, r5, #6
 8013966:	3338      	adds	r3, #56	; 0x38
 8013968:	2103      	movs	r1, #3
 801396a:	468c      	mov	ip, r1
 801396c:	00d8      	lsls	r0, r3, #3
 801396e:	1880      	adds	r0, r0, r2
 8013970:	68c4      	ldr	r4, [r0, #12]
 8013972:	4284      	cmp	r4, r0
 8013974:	d006      	beq.n	8013984 <_malloc_r+0xa4>
 8013976:	4666      	mov	r6, ip
 8013978:	6861      	ldr	r1, [r4, #4]
 801397a:	43b1      	bics	r1, r6
 801397c:	1b4f      	subs	r7, r1, r5
 801397e:	2f0f      	cmp	r7, #15
 8013980:	dd31      	ble.n	80139e6 <_malloc_r+0x106>
 8013982:	3b01      	subs	r3, #1
 8013984:	3301      	adds	r3, #1
 8013986:	469c      	mov	ip, r3
 8013988:	6914      	ldr	r4, [r2, #16]
 801398a:	49a7      	ldr	r1, [pc, #668]	; (8013c28 <_malloc_r+0x348>)
 801398c:	428c      	cmp	r4, r1
 801398e:	d055      	beq.n	8013a3c <_malloc_r+0x15c>
 8013990:	2303      	movs	r3, #3
 8013992:	6860      	ldr	r0, [r4, #4]
 8013994:	4398      	bics	r0, r3
 8013996:	0003      	movs	r3, r0
 8013998:	1b46      	subs	r6, r0, r5
 801399a:	2e0f      	cmp	r6, #15
 801399c:	dd31      	ble.n	8013a02 <_malloc_r+0x122>
 801399e:	2701      	movs	r7, #1
 80139a0:	1960      	adds	r0, r4, r5
 80139a2:	433d      	orrs	r5, r7
 80139a4:	4337      	orrs	r7, r6
 80139a6:	6065      	str	r5, [r4, #4]
 80139a8:	6150      	str	r0, [r2, #20]
 80139aa:	6110      	str	r0, [r2, #16]
 80139ac:	60c1      	str	r1, [r0, #12]
 80139ae:	6081      	str	r1, [r0, #8]
 80139b0:	6047      	str	r7, [r0, #4]
 80139b2:	50e6      	str	r6, [r4, r3]
 80139b4:	e7ca      	b.n	801394c <_malloc_r+0x6c>
 80139b6:	2914      	cmp	r1, #20
 80139b8:	d802      	bhi.n	80139c0 <_malloc_r+0xe0>
 80139ba:	000b      	movs	r3, r1
 80139bc:	335b      	adds	r3, #91	; 0x5b
 80139be:	e7d3      	b.n	8013968 <_malloc_r+0x88>
 80139c0:	2954      	cmp	r1, #84	; 0x54
 80139c2:	d802      	bhi.n	80139ca <_malloc_r+0xea>
 80139c4:	0b2b      	lsrs	r3, r5, #12
 80139c6:	336e      	adds	r3, #110	; 0x6e
 80139c8:	e7ce      	b.n	8013968 <_malloc_r+0x88>
 80139ca:	23aa      	movs	r3, #170	; 0xaa
 80139cc:	005b      	lsls	r3, r3, #1
 80139ce:	4299      	cmp	r1, r3
 80139d0:	d802      	bhi.n	80139d8 <_malloc_r+0xf8>
 80139d2:	0beb      	lsrs	r3, r5, #15
 80139d4:	3377      	adds	r3, #119	; 0x77
 80139d6:	e7c7      	b.n	8013968 <_malloc_r+0x88>
 80139d8:	4894      	ldr	r0, [pc, #592]	; (8013c2c <_malloc_r+0x34c>)
 80139da:	237e      	movs	r3, #126	; 0x7e
 80139dc:	4281      	cmp	r1, r0
 80139de:	d8c3      	bhi.n	8013968 <_malloc_r+0x88>
 80139e0:	0cab      	lsrs	r3, r5, #18
 80139e2:	337c      	adds	r3, #124	; 0x7c
 80139e4:	e7c0      	b.n	8013968 <_malloc_r+0x88>
 80139e6:	68e6      	ldr	r6, [r4, #12]
 80139e8:	2f00      	cmp	r7, #0
 80139ea:	db08      	blt.n	80139fe <_malloc_r+0x11e>
 80139ec:	68a3      	ldr	r3, [r4, #8]
 80139ee:	1861      	adds	r1, r4, r1
 80139f0:	60de      	str	r6, [r3, #12]
 80139f2:	60b3      	str	r3, [r6, #8]
 80139f4:	2301      	movs	r3, #1
 80139f6:	684a      	ldr	r2, [r1, #4]
 80139f8:	4313      	orrs	r3, r2
 80139fa:	604b      	str	r3, [r1, #4]
 80139fc:	e7a6      	b.n	801394c <_malloc_r+0x6c>
 80139fe:	0034      	movs	r4, r6
 8013a00:	e7b7      	b.n	8013972 <_malloc_r+0x92>
 8013a02:	6151      	str	r1, [r2, #20]
 8013a04:	6111      	str	r1, [r2, #16]
 8013a06:	2e00      	cmp	r6, #0
 8013a08:	db05      	blt.n	8013a16 <_malloc_r+0x136>
 8013a0a:	2101      	movs	r1, #1
 8013a0c:	1823      	adds	r3, r4, r0
 8013a0e:	685a      	ldr	r2, [r3, #4]
 8013a10:	4311      	orrs	r1, r2
 8013a12:	6059      	str	r1, [r3, #4]
 8013a14:	e79a      	b.n	801394c <_malloc_r+0x6c>
 8013a16:	4986      	ldr	r1, [pc, #536]	; (8013c30 <_malloc_r+0x350>)
 8013a18:	6857      	ldr	r7, [r2, #4]
 8013a1a:	4288      	cmp	r0, r1
 8013a1c:	d900      	bls.n	8013a20 <_malloc_r+0x140>
 8013a1e:	e090      	b.n	8013b42 <_malloc_r+0x262>
 8013a20:	08c3      	lsrs	r3, r0, #3
 8013a22:	39ff      	subs	r1, #255	; 0xff
 8013a24:	1098      	asrs	r0, r3, #2
 8013a26:	39ff      	subs	r1, #255	; 0xff
 8013a28:	4081      	lsls	r1, r0
 8013a2a:	00db      	lsls	r3, r3, #3
 8013a2c:	4339      	orrs	r1, r7
 8013a2e:	6051      	str	r1, [r2, #4]
 8013a30:	189a      	adds	r2, r3, r2
 8013a32:	6893      	ldr	r3, [r2, #8]
 8013a34:	60e2      	str	r2, [r4, #12]
 8013a36:	60a3      	str	r3, [r4, #8]
 8013a38:	6094      	str	r4, [r2, #8]
 8013a3a:	60dc      	str	r4, [r3, #12]
 8013a3c:	4663      	mov	r3, ip
 8013a3e:	2201      	movs	r2, #1
 8013a40:	4978      	ldr	r1, [pc, #480]	; (8013c24 <_malloc_r+0x344>)
 8013a42:	109b      	asrs	r3, r3, #2
 8013a44:	6848      	ldr	r0, [r1, #4]
 8013a46:	409a      	lsls	r2, r3
 8013a48:	4290      	cmp	r0, r2
 8013a4a:	d32d      	bcc.n	8013aa8 <_malloc_r+0x1c8>
 8013a4c:	4202      	tst	r2, r0
 8013a4e:	d109      	bne.n	8013a64 <_malloc_r+0x184>
 8013a50:	2303      	movs	r3, #3
 8013a52:	4664      	mov	r4, ip
 8013a54:	439c      	bics	r4, r3
 8013a56:	0023      	movs	r3, r4
 8013a58:	3304      	adds	r3, #4
 8013a5a:	469c      	mov	ip, r3
 8013a5c:	0052      	lsls	r2, r2, #1
 8013a5e:	4202      	tst	r2, r0
 8013a60:	d100      	bne.n	8013a64 <_malloc_r+0x184>
 8013a62:	e0a4      	b.n	8013bae <_malloc_r+0x2ce>
 8013a64:	4663      	mov	r3, ip
 8013a66:	00db      	lsls	r3, r3, #3
 8013a68:	18cb      	adds	r3, r1, r3
 8013a6a:	9303      	str	r3, [sp, #12]
 8013a6c:	001f      	movs	r7, r3
 8013a6e:	4663      	mov	r3, ip
 8013a70:	9302      	str	r3, [sp, #8]
 8013a72:	68fc      	ldr	r4, [r7, #12]
 8013a74:	42bc      	cmp	r4, r7
 8013a76:	d000      	beq.n	8013a7a <_malloc_r+0x19a>
 8013a78:	e09c      	b.n	8013bb4 <_malloc_r+0x2d4>
 8013a7a:	2003      	movs	r0, #3
 8013a7c:	9b02      	ldr	r3, [sp, #8]
 8013a7e:	3708      	adds	r7, #8
 8013a80:	3301      	adds	r3, #1
 8013a82:	9302      	str	r3, [sp, #8]
 8013a84:	4203      	tst	r3, r0
 8013a86:	d1f4      	bne.n	8013a72 <_malloc_r+0x192>
 8013a88:	4663      	mov	r3, ip
 8013a8a:	2003      	movs	r0, #3
 8013a8c:	4203      	tst	r3, r0
 8013a8e:	d000      	beq.n	8013a92 <_malloc_r+0x1b2>
 8013a90:	e0b3      	b.n	8013bfa <_malloc_r+0x31a>
 8013a92:	684b      	ldr	r3, [r1, #4]
 8013a94:	4393      	bics	r3, r2
 8013a96:	604b      	str	r3, [r1, #4]
 8013a98:	4b62      	ldr	r3, [pc, #392]	; (8013c24 <_malloc_r+0x344>)
 8013a9a:	0052      	lsls	r2, r2, #1
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	d302      	bcc.n	8013aa8 <_malloc_r+0x1c8>
 8013aa2:	2a00      	cmp	r2, #0
 8013aa4:	d000      	beq.n	8013aa8 <_malloc_r+0x1c8>
 8013aa6:	e0b9      	b.n	8013c1c <_malloc_r+0x33c>
 8013aa8:	2303      	movs	r3, #3
 8013aaa:	688f      	ldr	r7, [r1, #8]
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	439a      	bics	r2, r3
 8013ab0:	9202      	str	r2, [sp, #8]
 8013ab2:	42aa      	cmp	r2, r5
 8013ab4:	d303      	bcc.n	8013abe <_malloc_r+0x1de>
 8013ab6:	1b52      	subs	r2, r2, r5
 8013ab8:	2a0f      	cmp	r2, #15
 8013aba:	dd00      	ble.n	8013abe <_malloc_r+0x1de>
 8013abc:	e116      	b.n	8013cec <_malloc_r+0x40c>
 8013abe:	4b5d      	ldr	r3, [pc, #372]	; (8013c34 <_malloc_r+0x354>)
 8013ac0:	2008      	movs	r0, #8
 8013ac2:	681e      	ldr	r6, [r3, #0]
 8013ac4:	f002 fd26 	bl	8016514 <sysconf>
 8013ac8:	4b5b      	ldr	r3, [pc, #364]	; (8013c38 <_malloc_r+0x358>)
 8013aca:	3610      	adds	r6, #16
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	1976      	adds	r6, r6, r5
 8013ad0:	9003      	str	r0, [sp, #12]
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	d003      	beq.n	8013ade <_malloc_r+0x1fe>
 8013ad6:	3e01      	subs	r6, #1
 8013ad8:	1836      	adds	r6, r6, r0
 8013ada:	4243      	negs	r3, r0
 8013adc:	401e      	ands	r6, r3
 8013ade:	0031      	movs	r1, r6
 8013ae0:	9801      	ldr	r0, [sp, #4]
 8013ae2:	f000 fb27 	bl	8014134 <_sbrk_r>
 8013ae6:	0004      	movs	r4, r0
 8013ae8:	1c43      	adds	r3, r0, #1
 8013aea:	d100      	bne.n	8013aee <_malloc_r+0x20e>
 8013aec:	e0d6      	b.n	8013c9c <_malloc_r+0x3bc>
 8013aee:	9b02      	ldr	r3, [sp, #8]
 8013af0:	18fb      	adds	r3, r7, r3
 8013af2:	4283      	cmp	r3, r0
 8013af4:	d903      	bls.n	8013afe <_malloc_r+0x21e>
 8013af6:	4a4b      	ldr	r2, [pc, #300]	; (8013c24 <_malloc_r+0x344>)
 8013af8:	4297      	cmp	r7, r2
 8013afa:	d000      	beq.n	8013afe <_malloc_r+0x21e>
 8013afc:	e0ce      	b.n	8013c9c <_malloc_r+0x3bc>
 8013afe:	494f      	ldr	r1, [pc, #316]	; (8013c3c <_malloc_r+0x35c>)
 8013b00:	680a      	ldr	r2, [r1, #0]
 8013b02:	18b2      	adds	r2, r6, r2
 8013b04:	600a      	str	r2, [r1, #0]
 8013b06:	9903      	ldr	r1, [sp, #12]
 8013b08:	4694      	mov	ip, r2
 8013b0a:	1e48      	subs	r0, r1, #1
 8013b0c:	42a3      	cmp	r3, r4
 8013b0e:	d000      	beq.n	8013b12 <_malloc_r+0x232>
 8013b10:	e09a      	b.n	8013c48 <_malloc_r+0x368>
 8013b12:	4203      	tst	r3, r0
 8013b14:	d000      	beq.n	8013b18 <_malloc_r+0x238>
 8013b16:	e097      	b.n	8013c48 <_malloc_r+0x368>
 8013b18:	9a02      	ldr	r2, [sp, #8]
 8013b1a:	4b42      	ldr	r3, [pc, #264]	; (8013c24 <_malloc_r+0x344>)
 8013b1c:	1992      	adds	r2, r2, r6
 8013b1e:	2601      	movs	r6, #1
 8013b20:	689b      	ldr	r3, [r3, #8]
 8013b22:	4316      	orrs	r6, r2
 8013b24:	605e      	str	r6, [r3, #4]
 8013b26:	4b45      	ldr	r3, [pc, #276]	; (8013c3c <_malloc_r+0x35c>)
 8013b28:	4a45      	ldr	r2, [pc, #276]	; (8013c40 <_malloc_r+0x360>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	6811      	ldr	r1, [r2, #0]
 8013b2e:	428b      	cmp	r3, r1
 8013b30:	d900      	bls.n	8013b34 <_malloc_r+0x254>
 8013b32:	6013      	str	r3, [r2, #0]
 8013b34:	4a43      	ldr	r2, [pc, #268]	; (8013c44 <_malloc_r+0x364>)
 8013b36:	6811      	ldr	r1, [r2, #0]
 8013b38:	428b      	cmp	r3, r1
 8013b3a:	d800      	bhi.n	8013b3e <_malloc_r+0x25e>
 8013b3c:	e0ae      	b.n	8013c9c <_malloc_r+0x3bc>
 8013b3e:	6013      	str	r3, [r2, #0]
 8013b40:	e0ac      	b.n	8013c9c <_malloc_r+0x3bc>
 8013b42:	0a40      	lsrs	r0, r0, #9
 8013b44:	2804      	cmp	r0, #4
 8013b46:	d810      	bhi.n	8013b6a <_malloc_r+0x28a>
 8013b48:	0999      	lsrs	r1, r3, #6
 8013b4a:	3138      	adds	r1, #56	; 0x38
 8013b4c:	00ce      	lsls	r6, r1, #3
 8013b4e:	18b6      	adds	r6, r6, r2
 8013b50:	68b0      	ldr	r0, [r6, #8]
 8013b52:	4286      	cmp	r6, r0
 8013b54:	d124      	bne.n	8013ba0 <_malloc_r+0x2c0>
 8013b56:	2301      	movs	r3, #1
 8013b58:	1089      	asrs	r1, r1, #2
 8013b5a:	408b      	lsls	r3, r1
 8013b5c:	433b      	orrs	r3, r7
 8013b5e:	6053      	str	r3, [r2, #4]
 8013b60:	60e6      	str	r6, [r4, #12]
 8013b62:	60a0      	str	r0, [r4, #8]
 8013b64:	60b4      	str	r4, [r6, #8]
 8013b66:	60c4      	str	r4, [r0, #12]
 8013b68:	e768      	b.n	8013a3c <_malloc_r+0x15c>
 8013b6a:	2814      	cmp	r0, #20
 8013b6c:	d802      	bhi.n	8013b74 <_malloc_r+0x294>
 8013b6e:	0001      	movs	r1, r0
 8013b70:	315b      	adds	r1, #91	; 0x5b
 8013b72:	e7eb      	b.n	8013b4c <_malloc_r+0x26c>
 8013b74:	2854      	cmp	r0, #84	; 0x54
 8013b76:	d802      	bhi.n	8013b7e <_malloc_r+0x29e>
 8013b78:	0b19      	lsrs	r1, r3, #12
 8013b7a:	316e      	adds	r1, #110	; 0x6e
 8013b7c:	e7e6      	b.n	8013b4c <_malloc_r+0x26c>
 8013b7e:	21aa      	movs	r1, #170	; 0xaa
 8013b80:	0049      	lsls	r1, r1, #1
 8013b82:	4288      	cmp	r0, r1
 8013b84:	d802      	bhi.n	8013b8c <_malloc_r+0x2ac>
 8013b86:	0bd9      	lsrs	r1, r3, #15
 8013b88:	3177      	adds	r1, #119	; 0x77
 8013b8a:	e7df      	b.n	8013b4c <_malloc_r+0x26c>
 8013b8c:	4e27      	ldr	r6, [pc, #156]	; (8013c2c <_malloc_r+0x34c>)
 8013b8e:	217e      	movs	r1, #126	; 0x7e
 8013b90:	42b0      	cmp	r0, r6
 8013b92:	d8db      	bhi.n	8013b4c <_malloc_r+0x26c>
 8013b94:	0c99      	lsrs	r1, r3, #18
 8013b96:	317c      	adds	r1, #124	; 0x7c
 8013b98:	e7d8      	b.n	8013b4c <_malloc_r+0x26c>
 8013b9a:	6880      	ldr	r0, [r0, #8]
 8013b9c:	4286      	cmp	r6, r0
 8013b9e:	d004      	beq.n	8013baa <_malloc_r+0x2ca>
 8013ba0:	2103      	movs	r1, #3
 8013ba2:	6842      	ldr	r2, [r0, #4]
 8013ba4:	438a      	bics	r2, r1
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d8f7      	bhi.n	8013b9a <_malloc_r+0x2ba>
 8013baa:	68c6      	ldr	r6, [r0, #12]
 8013bac:	e7d8      	b.n	8013b60 <_malloc_r+0x280>
 8013bae:	2304      	movs	r3, #4
 8013bb0:	449c      	add	ip, r3
 8013bb2:	e753      	b.n	8013a5c <_malloc_r+0x17c>
 8013bb4:	2003      	movs	r0, #3
 8013bb6:	6863      	ldr	r3, [r4, #4]
 8013bb8:	4383      	bics	r3, r0
 8013bba:	1b5e      	subs	r6, r3, r5
 8013bbc:	68e0      	ldr	r0, [r4, #12]
 8013bbe:	2e0f      	cmp	r6, #15
 8013bc0:	dd0e      	ble.n	8013be0 <_malloc_r+0x300>
 8013bc2:	2701      	movs	r7, #1
 8013bc4:	1962      	adds	r2, r4, r5
 8013bc6:	433d      	orrs	r5, r7
 8013bc8:	6065      	str	r5, [r4, #4]
 8013bca:	68a5      	ldr	r5, [r4, #8]
 8013bcc:	4337      	orrs	r7, r6
 8013bce:	60e8      	str	r0, [r5, #12]
 8013bd0:	6085      	str	r5, [r0, #8]
 8013bd2:	614a      	str	r2, [r1, #20]
 8013bd4:	610a      	str	r2, [r1, #16]
 8013bd6:	4914      	ldr	r1, [pc, #80]	; (8013c28 <_malloc_r+0x348>)
 8013bd8:	6057      	str	r7, [r2, #4]
 8013bda:	60d1      	str	r1, [r2, #12]
 8013bdc:	6091      	str	r1, [r2, #8]
 8013bde:	e6e8      	b.n	80139b2 <_malloc_r+0xd2>
 8013be0:	2e00      	cmp	r6, #0
 8013be2:	db08      	blt.n	8013bf6 <_malloc_r+0x316>
 8013be4:	2201      	movs	r2, #1
 8013be6:	18e3      	adds	r3, r4, r3
 8013be8:	6859      	ldr	r1, [r3, #4]
 8013bea:	430a      	orrs	r2, r1
 8013bec:	605a      	str	r2, [r3, #4]
 8013bee:	68a3      	ldr	r3, [r4, #8]
 8013bf0:	60d8      	str	r0, [r3, #12]
 8013bf2:	6083      	str	r3, [r0, #8]
 8013bf4:	e6aa      	b.n	801394c <_malloc_r+0x6c>
 8013bf6:	0004      	movs	r4, r0
 8013bf8:	e73c      	b.n	8013a74 <_malloc_r+0x194>
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	425b      	negs	r3, r3
 8013bfe:	449c      	add	ip, r3
 8013c00:	9b03      	ldr	r3, [sp, #12]
 8013c02:	6818      	ldr	r0, [r3, #0]
 8013c04:	3b08      	subs	r3, #8
 8013c06:	9003      	str	r0, [sp, #12]
 8013c08:	4298      	cmp	r0, r3
 8013c0a:	d100      	bne.n	8013c0e <_malloc_r+0x32e>
 8013c0c:	e73c      	b.n	8013a88 <_malloc_r+0x1a8>
 8013c0e:	e743      	b.n	8013a98 <_malloc_r+0x1b8>
 8013c10:	2004      	movs	r0, #4
 8013c12:	0052      	lsls	r2, r2, #1
 8013c14:	4484      	add	ip, r0
 8013c16:	421a      	tst	r2, r3
 8013c18:	d0fa      	beq.n	8013c10 <_malloc_r+0x330>
 8013c1a:	e723      	b.n	8013a64 <_malloc_r+0x184>
 8013c1c:	9802      	ldr	r0, [sp, #8]
 8013c1e:	4684      	mov	ip, r0
 8013c20:	e7f9      	b.n	8013c16 <_malloc_r+0x336>
 8013c22:	46c0      	nop			; (mov r8, r8)
 8013c24:	20000644 	.word	0x20000644
 8013c28:	2000064c 	.word	0x2000064c
 8013c2c:	00000554 	.word	0x00000554
 8013c30:	000001ff 	.word	0x000001ff
 8013c34:	20006a1c 	.word	0x20006a1c
 8013c38:	20000a4c 	.word	0x20000a4c
 8013c3c:	200069ec 	.word	0x200069ec
 8013c40:	20006a14 	.word	0x20006a14
 8013c44:	20006a18 	.word	0x20006a18
 8013c48:	492e      	ldr	r1, [pc, #184]	; (8013d04 <_malloc_r+0x424>)
 8013c4a:	680a      	ldr	r2, [r1, #0]
 8013c4c:	3201      	adds	r2, #1
 8013c4e:	d133      	bne.n	8013cb8 <_malloc_r+0x3d8>
 8013c50:	600c      	str	r4, [r1, #0]
 8013c52:	2307      	movs	r3, #7
 8013c54:	4023      	ands	r3, r4
 8013c56:	d002      	beq.n	8013c5e <_malloc_r+0x37e>
 8013c58:	2208      	movs	r2, #8
 8013c5a:	1ad3      	subs	r3, r2, r3
 8013c5c:	18e4      	adds	r4, r4, r3
 8013c5e:	9a03      	ldr	r2, [sp, #12]
 8013c60:	19a6      	adds	r6, r4, r6
 8013c62:	18d3      	adds	r3, r2, r3
 8013c64:	4006      	ands	r6, r0
 8013c66:	1b9e      	subs	r6, r3, r6
 8013c68:	0031      	movs	r1, r6
 8013c6a:	9801      	ldr	r0, [sp, #4]
 8013c6c:	f000 fa62 	bl	8014134 <_sbrk_r>
 8013c70:	1c43      	adds	r3, r0, #1
 8013c72:	d101      	bne.n	8013c78 <_malloc_r+0x398>
 8013c74:	0020      	movs	r0, r4
 8013c76:	2600      	movs	r6, #0
 8013c78:	4a23      	ldr	r2, [pc, #140]	; (8013d08 <_malloc_r+0x428>)
 8013c7a:	1b00      	subs	r0, r0, r4
 8013c7c:	6813      	ldr	r3, [r2, #0]
 8013c7e:	199b      	adds	r3, r3, r6
 8013c80:	6013      	str	r3, [r2, #0]
 8013c82:	2301      	movs	r3, #1
 8013c84:	4a21      	ldr	r2, [pc, #132]	; (8013d0c <_malloc_r+0x42c>)
 8013c86:	1986      	adds	r6, r0, r6
 8013c88:	431e      	orrs	r6, r3
 8013c8a:	6094      	str	r4, [r2, #8]
 8013c8c:	6066      	str	r6, [r4, #4]
 8013c8e:	4297      	cmp	r7, r2
 8013c90:	d100      	bne.n	8013c94 <_malloc_r+0x3b4>
 8013c92:	e748      	b.n	8013b26 <_malloc_r+0x246>
 8013c94:	9a02      	ldr	r2, [sp, #8]
 8013c96:	2a0f      	cmp	r2, #15
 8013c98:	d813      	bhi.n	8013cc2 <_malloc_r+0x3e2>
 8013c9a:	6063      	str	r3, [r4, #4]
 8013c9c:	2203      	movs	r2, #3
 8013c9e:	4b1b      	ldr	r3, [pc, #108]	; (8013d0c <_malloc_r+0x42c>)
 8013ca0:	689b      	ldr	r3, [r3, #8]
 8013ca2:	685b      	ldr	r3, [r3, #4]
 8013ca4:	4393      	bics	r3, r2
 8013ca6:	1b5a      	subs	r2, r3, r5
 8013ca8:	42ab      	cmp	r3, r5
 8013caa:	d301      	bcc.n	8013cb0 <_malloc_r+0x3d0>
 8013cac:	2a0f      	cmp	r2, #15
 8013cae:	dc1d      	bgt.n	8013cec <_malloc_r+0x40c>
 8013cb0:	9801      	ldr	r0, [sp, #4]
 8013cb2:	f000 f867 	bl	8013d84 <__malloc_unlock>
 8013cb6:	e620      	b.n	80138fa <_malloc_r+0x1a>
 8013cb8:	1ae3      	subs	r3, r4, r3
 8013cba:	4a13      	ldr	r2, [pc, #76]	; (8013d08 <_malloc_r+0x428>)
 8013cbc:	4463      	add	r3, ip
 8013cbe:	6013      	str	r3, [r2, #0]
 8013cc0:	e7c7      	b.n	8013c52 <_malloc_r+0x372>
 8013cc2:	2207      	movs	r2, #7
 8013cc4:	9e02      	ldr	r6, [sp, #8]
 8013cc6:	3e0c      	subs	r6, #12
 8013cc8:	4396      	bics	r6, r2
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	4013      	ands	r3, r2
 8013cce:	2205      	movs	r2, #5
 8013cd0:	4333      	orrs	r3, r6
 8013cd2:	607b      	str	r3, [r7, #4]
 8013cd4:	19bb      	adds	r3, r7, r6
 8013cd6:	605a      	str	r2, [r3, #4]
 8013cd8:	609a      	str	r2, [r3, #8]
 8013cda:	2e0f      	cmp	r6, #15
 8013cdc:	d800      	bhi.n	8013ce0 <_malloc_r+0x400>
 8013cde:	e722      	b.n	8013b26 <_malloc_r+0x246>
 8013ce0:	0039      	movs	r1, r7
 8013ce2:	9801      	ldr	r0, [sp, #4]
 8013ce4:	3108      	adds	r1, #8
 8013ce6:	f003 fb07 	bl	80172f8 <_free_r>
 8013cea:	e71c      	b.n	8013b26 <_malloc_r+0x246>
 8013cec:	2301      	movs	r3, #1
 8013cee:	0018      	movs	r0, r3
 8013cf0:	4906      	ldr	r1, [pc, #24]	; (8013d0c <_malloc_r+0x42c>)
 8013cf2:	4328      	orrs	r0, r5
 8013cf4:	688c      	ldr	r4, [r1, #8]
 8013cf6:	4313      	orrs	r3, r2
 8013cf8:	1965      	adds	r5, r4, r5
 8013cfa:	6060      	str	r0, [r4, #4]
 8013cfc:	608d      	str	r5, [r1, #8]
 8013cfe:	606b      	str	r3, [r5, #4]
 8013d00:	e624      	b.n	801394c <_malloc_r+0x6c>
 8013d02:	46c0      	nop			; (mov r8, r8)
 8013d04:	20000a4c 	.word	0x20000a4c
 8013d08:	200069ec 	.word	0x200069ec
 8013d0c:	20000644 	.word	0x20000644

08013d10 <__ascii_mbtowc>:
 8013d10:	b082      	sub	sp, #8
 8013d12:	2900      	cmp	r1, #0
 8013d14:	d100      	bne.n	8013d18 <__ascii_mbtowc+0x8>
 8013d16:	a901      	add	r1, sp, #4
 8013d18:	1e10      	subs	r0, r2, #0
 8013d1a:	d006      	beq.n	8013d2a <__ascii_mbtowc+0x1a>
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d006      	beq.n	8013d2e <__ascii_mbtowc+0x1e>
 8013d20:	7813      	ldrb	r3, [r2, #0]
 8013d22:	600b      	str	r3, [r1, #0]
 8013d24:	7810      	ldrb	r0, [r2, #0]
 8013d26:	1e43      	subs	r3, r0, #1
 8013d28:	4198      	sbcs	r0, r3
 8013d2a:	b002      	add	sp, #8
 8013d2c:	4770      	bx	lr
 8013d2e:	2002      	movs	r0, #2
 8013d30:	4240      	negs	r0, r0
 8013d32:	e7fa      	b.n	8013d2a <__ascii_mbtowc+0x1a>

08013d34 <memcmp>:
 8013d34:	b530      	push	{r4, r5, lr}
 8013d36:	2400      	movs	r4, #0
 8013d38:	42a2      	cmp	r2, r4
 8013d3a:	d101      	bne.n	8013d40 <memcmp+0xc>
 8013d3c:	2000      	movs	r0, #0
 8013d3e:	e005      	b.n	8013d4c <memcmp+0x18>
 8013d40:	5d03      	ldrb	r3, [r0, r4]
 8013d42:	1c65      	adds	r5, r4, #1
 8013d44:	5d0c      	ldrb	r4, [r1, r4]
 8013d46:	42a3      	cmp	r3, r4
 8013d48:	d001      	beq.n	8013d4e <memcmp+0x1a>
 8013d4a:	1b18      	subs	r0, r3, r4
 8013d4c:	bd30      	pop	{r4, r5, pc}
 8013d4e:	002c      	movs	r4, r5
 8013d50:	e7f2      	b.n	8013d38 <memcmp+0x4>

08013d52 <memcpy>:
 8013d52:	2300      	movs	r3, #0
 8013d54:	b510      	push	{r4, lr}
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d100      	bne.n	8013d5c <memcpy+0xa>
 8013d5a:	bd10      	pop	{r4, pc}
 8013d5c:	5ccc      	ldrb	r4, [r1, r3]
 8013d5e:	54c4      	strb	r4, [r0, r3]
 8013d60:	3301      	adds	r3, #1
 8013d62:	e7f8      	b.n	8013d56 <memcpy+0x4>

08013d64 <memset>:
 8013d64:	0003      	movs	r3, r0
 8013d66:	1812      	adds	r2, r2, r0
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	d100      	bne.n	8013d6e <memset+0xa>
 8013d6c:	4770      	bx	lr
 8013d6e:	7019      	strb	r1, [r3, #0]
 8013d70:	3301      	adds	r3, #1
 8013d72:	e7f9      	b.n	8013d68 <memset+0x4>

08013d74 <__malloc_lock>:
 8013d74:	b510      	push	{r4, lr}
 8013d76:	4802      	ldr	r0, [pc, #8]	; (8013d80 <__malloc_lock+0xc>)
 8013d78:	f003 feb2 	bl	8017ae0 <__retarget_lock_acquire_recursive>
 8013d7c:	bd10      	pop	{r4, pc}
 8013d7e:	46c0      	nop			; (mov r8, r8)
 8013d80:	20006fb4 	.word	0x20006fb4

08013d84 <__malloc_unlock>:
 8013d84:	b510      	push	{r4, lr}
 8013d86:	4802      	ldr	r0, [pc, #8]	; (8013d90 <__malloc_unlock+0xc>)
 8013d88:	f003 feab 	bl	8017ae2 <__retarget_lock_release_recursive>
 8013d8c:	bd10      	pop	{r4, pc}
 8013d8e:	46c0      	nop			; (mov r8, r8)
 8013d90:	20006fb4 	.word	0x20006fb4

08013d94 <rand>:
 8013d94:	4b09      	ldr	r3, [pc, #36]	; (8013dbc <rand+0x28>)
 8013d96:	b510      	push	{r4, lr}
 8013d98:	681c      	ldr	r4, [r3, #0]
 8013d9a:	4a09      	ldr	r2, [pc, #36]	; (8013dc0 <rand+0x2c>)
 8013d9c:	34a8      	adds	r4, #168	; 0xa8
 8013d9e:	6820      	ldr	r0, [r4, #0]
 8013da0:	6861      	ldr	r1, [r4, #4]
 8013da2:	4b08      	ldr	r3, [pc, #32]	; (8013dc4 <rand+0x30>)
 8013da4:	f7ec fbe2 	bl	800056c <__aeabi_lmul>
 8013da8:	2201      	movs	r2, #1
 8013daa:	2300      	movs	r3, #0
 8013dac:	1880      	adds	r0, r0, r2
 8013dae:	4159      	adcs	r1, r3
 8013db0:	6020      	str	r0, [r4, #0]
 8013db2:	6061      	str	r1, [r4, #4]
 8013db4:	0048      	lsls	r0, r1, #1
 8013db6:	0840      	lsrs	r0, r0, #1
 8013db8:	bd10      	pop	{r4, pc}
 8013dba:	46c0      	nop			; (mov r8, r8)
 8013dbc:	200000a8 	.word	0x200000a8
 8013dc0:	4c957f2d 	.word	0x4c957f2d
 8013dc4:	5851f42d 	.word	0x5851f42d

08013dc8 <realloc>:
 8013dc8:	b510      	push	{r4, lr}
 8013dca:	4b03      	ldr	r3, [pc, #12]	; (8013dd8 <realloc+0x10>)
 8013dcc:	000a      	movs	r2, r1
 8013dce:	0001      	movs	r1, r0
 8013dd0:	6818      	ldr	r0, [r3, #0]
 8013dd2:	f000 f803 	bl	8013ddc <_realloc_r>
 8013dd6:	bd10      	pop	{r4, pc}
 8013dd8:	200000a8 	.word	0x200000a8

08013ddc <_realloc_r>:
 8013ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dde:	b087      	sub	sp, #28
 8013de0:	9003      	str	r0, [sp, #12]
 8013de2:	1e0c      	subs	r4, r1, #0
 8013de4:	9205      	str	r2, [sp, #20]
 8013de6:	d106      	bne.n	8013df6 <_realloc_r+0x1a>
 8013de8:	0011      	movs	r1, r2
 8013dea:	f7ff fd79 	bl	80138e0 <_malloc_r>
 8013dee:	0007      	movs	r7, r0
 8013df0:	0038      	movs	r0, r7
 8013df2:	b007      	add	sp, #28
 8013df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013df6:	9803      	ldr	r0, [sp, #12]
 8013df8:	f7ff ffbc 	bl	8013d74 <__malloc_lock>
 8013dfc:	0023      	movs	r3, r4
 8013dfe:	3b08      	subs	r3, #8
 8013e00:	685f      	ldr	r7, [r3, #4]
 8013e02:	9302      	str	r3, [sp, #8]
 8013e04:	003a      	movs	r2, r7
 8013e06:	2303      	movs	r3, #3
 8013e08:	9e05      	ldr	r6, [sp, #20]
 8013e0a:	439a      	bics	r2, r3
 8013e0c:	360b      	adds	r6, #11
 8013e0e:	9204      	str	r2, [sp, #16]
 8013e10:	2e16      	cmp	r6, #22
 8013e12:	d908      	bls.n	8013e26 <_realloc_r+0x4a>
 8013e14:	3304      	adds	r3, #4
 8013e16:	439e      	bics	r6, r3
 8013e18:	9601      	str	r6, [sp, #4]
 8013e1a:	d506      	bpl.n	8013e2a <_realloc_r+0x4e>
 8013e1c:	230c      	movs	r3, #12
 8013e1e:	9a03      	ldr	r2, [sp, #12]
 8013e20:	2700      	movs	r7, #0
 8013e22:	6013      	str	r3, [r2, #0]
 8013e24:	e7e4      	b.n	8013df0 <_realloc_r+0x14>
 8013e26:	2310      	movs	r3, #16
 8013e28:	9301      	str	r3, [sp, #4]
 8013e2a:	9b01      	ldr	r3, [sp, #4]
 8013e2c:	9a05      	ldr	r2, [sp, #20]
 8013e2e:	4293      	cmp	r3, r2
 8013e30:	d3f4      	bcc.n	8013e1c <_realloc_r+0x40>
 8013e32:	9b01      	ldr	r3, [sp, #4]
 8013e34:	9a04      	ldr	r2, [sp, #16]
 8013e36:	4293      	cmp	r3, r2
 8013e38:	dc00      	bgt.n	8013e3c <_realloc_r+0x60>
 8013e3a:	e16f      	b.n	801411c <_realloc_r+0x340>
 8013e3c:	9b02      	ldr	r3, [sp, #8]
 8013e3e:	48bc      	ldr	r0, [pc, #752]	; (8014130 <_realloc_r+0x354>)
 8013e40:	189b      	adds	r3, r3, r2
 8013e42:	6882      	ldr	r2, [r0, #8]
 8013e44:	4694      	mov	ip, r2
 8013e46:	685a      	ldr	r2, [r3, #4]
 8013e48:	459c      	cmp	ip, r3
 8013e4a:	d006      	beq.n	8013e5a <_realloc_r+0x7e>
 8013e4c:	2501      	movs	r5, #1
 8013e4e:	0011      	movs	r1, r2
 8013e50:	43a9      	bics	r1, r5
 8013e52:	1859      	adds	r1, r3, r1
 8013e54:	6849      	ldr	r1, [r1, #4]
 8013e56:	4229      	tst	r1, r5
 8013e58:	d146      	bne.n	8013ee8 <_realloc_r+0x10c>
 8013e5a:	2103      	movs	r1, #3
 8013e5c:	438a      	bics	r2, r1
 8013e5e:	9904      	ldr	r1, [sp, #16]
 8013e60:	188e      	adds	r6, r1, r2
 8013e62:	9901      	ldr	r1, [sp, #4]
 8013e64:	459c      	cmp	ip, r3
 8013e66:	d117      	bne.n	8013e98 <_realloc_r+0xbc>
 8013e68:	3110      	adds	r1, #16
 8013e6a:	42b1      	cmp	r1, r6
 8013e6c:	dc3e      	bgt.n	8013eec <_realloc_r+0x110>
 8013e6e:	9901      	ldr	r1, [sp, #4]
 8013e70:	9b02      	ldr	r3, [sp, #8]
 8013e72:	468c      	mov	ip, r1
 8013e74:	4463      	add	r3, ip
 8013e76:	6083      	str	r3, [r0, #8]
 8013e78:	001a      	movs	r2, r3
 8013e7a:	1a73      	subs	r3, r6, r1
 8013e7c:	2601      	movs	r6, #1
 8013e7e:	4333      	orrs	r3, r6
 8013e80:	6053      	str	r3, [r2, #4]
 8013e82:	0023      	movs	r3, r4
 8013e84:	3b08      	subs	r3, #8
 8013e86:	685a      	ldr	r2, [r3, #4]
 8013e88:	9803      	ldr	r0, [sp, #12]
 8013e8a:	4016      	ands	r6, r2
 8013e8c:	430e      	orrs	r6, r1
 8013e8e:	605e      	str	r6, [r3, #4]
 8013e90:	f7ff ff78 	bl	8013d84 <__malloc_unlock>
 8013e94:	0027      	movs	r7, r4
 8013e96:	e7ab      	b.n	8013df0 <_realloc_r+0x14>
 8013e98:	42b1      	cmp	r1, r6
 8013e9a:	dc27      	bgt.n	8013eec <_realloc_r+0x110>
 8013e9c:	68da      	ldr	r2, [r3, #12]
 8013e9e:	689b      	ldr	r3, [r3, #8]
 8013ea0:	60da      	str	r2, [r3, #12]
 8013ea2:	6093      	str	r3, [r2, #8]
 8013ea4:	9b01      	ldr	r3, [sp, #4]
 8013ea6:	9a02      	ldr	r2, [sp, #8]
 8013ea8:	1af4      	subs	r4, r6, r3
 8013eaa:	9b02      	ldr	r3, [sp, #8]
 8013eac:	1992      	adds	r2, r2, r6
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	9304      	str	r3, [sp, #16]
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	9804      	ldr	r0, [sp, #16]
 8013eb6:	4018      	ands	r0, r3
 8013eb8:	2c0f      	cmp	r4, #15
 8013eba:	d800      	bhi.n	8013ebe <_realloc_r+0xe2>
 8013ebc:	e130      	b.n	8014120 <_realloc_r+0x344>
 8013ebe:	9d01      	ldr	r5, [sp, #4]
 8013ec0:	9902      	ldr	r1, [sp, #8]
 8013ec2:	4328      	orrs	r0, r5
 8013ec4:	1949      	adds	r1, r1, r5
 8013ec6:	9d02      	ldr	r5, [sp, #8]
 8013ec8:	431c      	orrs	r4, r3
 8013eca:	6068      	str	r0, [r5, #4]
 8013ecc:	604c      	str	r4, [r1, #4]
 8013ece:	6850      	ldr	r0, [r2, #4]
 8013ed0:	3108      	adds	r1, #8
 8013ed2:	4303      	orrs	r3, r0
 8013ed4:	6053      	str	r3, [r2, #4]
 8013ed6:	9803      	ldr	r0, [sp, #12]
 8013ed8:	f003 fa0e 	bl	80172f8 <_free_r>
 8013edc:	9803      	ldr	r0, [sp, #12]
 8013ede:	f7ff ff51 	bl	8013d84 <__malloc_unlock>
 8013ee2:	9f02      	ldr	r7, [sp, #8]
 8013ee4:	3708      	adds	r7, #8
 8013ee6:	e783      	b.n	8013df0 <_realloc_r+0x14>
 8013ee8:	2200      	movs	r2, #0
 8013eea:	0013      	movs	r3, r2
 8013eec:	07f9      	lsls	r1, r7, #31
 8013eee:	d500      	bpl.n	8013ef2 <_realloc_r+0x116>
 8013ef0:	e0c6      	b.n	8014080 <_realloc_r+0x2a4>
 8013ef2:	0021      	movs	r1, r4
 8013ef4:	3908      	subs	r1, #8
 8013ef6:	680d      	ldr	r5, [r1, #0]
 8013ef8:	9902      	ldr	r1, [sp, #8]
 8013efa:	1b4d      	subs	r5, r1, r5
 8013efc:	2103      	movs	r1, #3
 8013efe:	686f      	ldr	r7, [r5, #4]
 8013f00:	438f      	bics	r7, r1
 8013f02:	9904      	ldr	r1, [sp, #16]
 8013f04:	187f      	adds	r7, r7, r1
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d100      	bne.n	8013f0c <_realloc_r+0x130>
 8013f0a:	e084      	b.n	8014016 <_realloc_r+0x23a>
 8013f0c:	19d6      	adds	r6, r2, r7
 8013f0e:	459c      	cmp	ip, r3
 8013f10:	d148      	bne.n	8013fa4 <_realloc_r+0x1c8>
 8013f12:	9b01      	ldr	r3, [sp, #4]
 8013f14:	3310      	adds	r3, #16
 8013f16:	42b3      	cmp	r3, r6
 8013f18:	dc7d      	bgt.n	8014016 <_realloc_r+0x23a>
 8013f1a:	68aa      	ldr	r2, [r5, #8]
 8013f1c:	68eb      	ldr	r3, [r5, #12]
 8013f1e:	002f      	movs	r7, r5
 8013f20:	60d3      	str	r3, [r2, #12]
 8013f22:	609a      	str	r2, [r3, #8]
 8013f24:	000a      	movs	r2, r1
 8013f26:	3a04      	subs	r2, #4
 8013f28:	3708      	adds	r7, #8
 8013f2a:	2a24      	cmp	r2, #36	; 0x24
 8013f2c:	d835      	bhi.n	8013f9a <_realloc_r+0x1be>
 8013f2e:	003b      	movs	r3, r7
 8013f30:	2a13      	cmp	r2, #19
 8013f32:	d908      	bls.n	8013f46 <_realloc_r+0x16a>
 8013f34:	6823      	ldr	r3, [r4, #0]
 8013f36:	60ab      	str	r3, [r5, #8]
 8013f38:	6863      	ldr	r3, [r4, #4]
 8013f3a:	60eb      	str	r3, [r5, #12]
 8013f3c:	2a1b      	cmp	r2, #27
 8013f3e:	d81a      	bhi.n	8013f76 <_realloc_r+0x19a>
 8013f40:	002b      	movs	r3, r5
 8013f42:	3408      	adds	r4, #8
 8013f44:	3310      	adds	r3, #16
 8013f46:	6822      	ldr	r2, [r4, #0]
 8013f48:	601a      	str	r2, [r3, #0]
 8013f4a:	6862      	ldr	r2, [r4, #4]
 8013f4c:	605a      	str	r2, [r3, #4]
 8013f4e:	68a2      	ldr	r2, [r4, #8]
 8013f50:	609a      	str	r2, [r3, #8]
 8013f52:	9b01      	ldr	r3, [sp, #4]
 8013f54:	18ea      	adds	r2, r5, r3
 8013f56:	4b76      	ldr	r3, [pc, #472]	; (8014130 <_realloc_r+0x354>)
 8013f58:	609a      	str	r2, [r3, #8]
 8013f5a:	9b01      	ldr	r3, [sp, #4]
 8013f5c:	1af3      	subs	r3, r6, r3
 8013f5e:	2601      	movs	r6, #1
 8013f60:	4333      	orrs	r3, r6
 8013f62:	6053      	str	r3, [r2, #4]
 8013f64:	686b      	ldr	r3, [r5, #4]
 8013f66:	401e      	ands	r6, r3
 8013f68:	9b01      	ldr	r3, [sp, #4]
 8013f6a:	431e      	orrs	r6, r3
 8013f6c:	606e      	str	r6, [r5, #4]
 8013f6e:	9803      	ldr	r0, [sp, #12]
 8013f70:	f7ff ff08 	bl	8013d84 <__malloc_unlock>
 8013f74:	e73c      	b.n	8013df0 <_realloc_r+0x14>
 8013f76:	68a3      	ldr	r3, [r4, #8]
 8013f78:	612b      	str	r3, [r5, #16]
 8013f7a:	68e3      	ldr	r3, [r4, #12]
 8013f7c:	616b      	str	r3, [r5, #20]
 8013f7e:	2a24      	cmp	r2, #36	; 0x24
 8013f80:	d003      	beq.n	8013f8a <_realloc_r+0x1ae>
 8013f82:	002b      	movs	r3, r5
 8013f84:	3410      	adds	r4, #16
 8013f86:	3318      	adds	r3, #24
 8013f88:	e7dd      	b.n	8013f46 <_realloc_r+0x16a>
 8013f8a:	6923      	ldr	r3, [r4, #16]
 8013f8c:	61ab      	str	r3, [r5, #24]
 8013f8e:	002b      	movs	r3, r5
 8013f90:	6962      	ldr	r2, [r4, #20]
 8013f92:	3320      	adds	r3, #32
 8013f94:	61ea      	str	r2, [r5, #28]
 8013f96:	3418      	adds	r4, #24
 8013f98:	e7d5      	b.n	8013f46 <_realloc_r+0x16a>
 8013f9a:	0021      	movs	r1, r4
 8013f9c:	0038      	movs	r0, r7
 8013f9e:	f003 fdac 	bl	8017afa <memmove>
 8013fa2:	e7d6      	b.n	8013f52 <_realloc_r+0x176>
 8013fa4:	9a01      	ldr	r2, [sp, #4]
 8013fa6:	42b2      	cmp	r2, r6
 8013fa8:	dc35      	bgt.n	8014016 <_realloc_r+0x23a>
 8013faa:	0028      	movs	r0, r5
 8013fac:	68da      	ldr	r2, [r3, #12]
 8013fae:	689b      	ldr	r3, [r3, #8]
 8013fb0:	3008      	adds	r0, #8
 8013fb2:	60da      	str	r2, [r3, #12]
 8013fb4:	6093      	str	r3, [r2, #8]
 8013fb6:	68aa      	ldr	r2, [r5, #8]
 8013fb8:	68eb      	ldr	r3, [r5, #12]
 8013fba:	60d3      	str	r3, [r2, #12]
 8013fbc:	609a      	str	r2, [r3, #8]
 8013fbe:	9a04      	ldr	r2, [sp, #16]
 8013fc0:	3a04      	subs	r2, #4
 8013fc2:	2a24      	cmp	r2, #36	; 0x24
 8013fc4:	d823      	bhi.n	801400e <_realloc_r+0x232>
 8013fc6:	2a13      	cmp	r2, #19
 8013fc8:	d907      	bls.n	8013fda <_realloc_r+0x1fe>
 8013fca:	6823      	ldr	r3, [r4, #0]
 8013fcc:	60ab      	str	r3, [r5, #8]
 8013fce:	6863      	ldr	r3, [r4, #4]
 8013fd0:	60eb      	str	r3, [r5, #12]
 8013fd2:	2a1b      	cmp	r2, #27
 8013fd4:	d809      	bhi.n	8013fea <_realloc_r+0x20e>
 8013fd6:	3408      	adds	r4, #8
 8013fd8:	3008      	adds	r0, #8
 8013fda:	6823      	ldr	r3, [r4, #0]
 8013fdc:	6003      	str	r3, [r0, #0]
 8013fde:	6863      	ldr	r3, [r4, #4]
 8013fe0:	6043      	str	r3, [r0, #4]
 8013fe2:	68a3      	ldr	r3, [r4, #8]
 8013fe4:	6083      	str	r3, [r0, #8]
 8013fe6:	9502      	str	r5, [sp, #8]
 8013fe8:	e75c      	b.n	8013ea4 <_realloc_r+0xc8>
 8013fea:	68a3      	ldr	r3, [r4, #8]
 8013fec:	612b      	str	r3, [r5, #16]
 8013fee:	68e3      	ldr	r3, [r4, #12]
 8013ff0:	616b      	str	r3, [r5, #20]
 8013ff2:	2a24      	cmp	r2, #36	; 0x24
 8013ff4:	d003      	beq.n	8013ffe <_realloc_r+0x222>
 8013ff6:	0028      	movs	r0, r5
 8013ff8:	3410      	adds	r4, #16
 8013ffa:	3018      	adds	r0, #24
 8013ffc:	e7ed      	b.n	8013fda <_realloc_r+0x1fe>
 8013ffe:	0028      	movs	r0, r5
 8014000:	6923      	ldr	r3, [r4, #16]
 8014002:	3020      	adds	r0, #32
 8014004:	61ab      	str	r3, [r5, #24]
 8014006:	6963      	ldr	r3, [r4, #20]
 8014008:	3418      	adds	r4, #24
 801400a:	61eb      	str	r3, [r5, #28]
 801400c:	e7e5      	b.n	8013fda <_realloc_r+0x1fe>
 801400e:	0021      	movs	r1, r4
 8014010:	f003 fd73 	bl	8017afa <memmove>
 8014014:	e7e7      	b.n	8013fe6 <_realloc_r+0x20a>
 8014016:	9b01      	ldr	r3, [sp, #4]
 8014018:	42bb      	cmp	r3, r7
 801401a:	dc31      	bgt.n	8014080 <_realloc_r+0x2a4>
 801401c:	0028      	movs	r0, r5
 801401e:	68aa      	ldr	r2, [r5, #8]
 8014020:	68eb      	ldr	r3, [r5, #12]
 8014022:	3008      	adds	r0, #8
 8014024:	60d3      	str	r3, [r2, #12]
 8014026:	609a      	str	r2, [r3, #8]
 8014028:	9a04      	ldr	r2, [sp, #16]
 801402a:	3a04      	subs	r2, #4
 801402c:	2a24      	cmp	r2, #36	; 0x24
 801402e:	d823      	bhi.n	8014078 <_realloc_r+0x29c>
 8014030:	2a13      	cmp	r2, #19
 8014032:	d907      	bls.n	8014044 <_realloc_r+0x268>
 8014034:	6823      	ldr	r3, [r4, #0]
 8014036:	60ab      	str	r3, [r5, #8]
 8014038:	6863      	ldr	r3, [r4, #4]
 801403a:	60eb      	str	r3, [r5, #12]
 801403c:	2a1b      	cmp	r2, #27
 801403e:	d809      	bhi.n	8014054 <_realloc_r+0x278>
 8014040:	3408      	adds	r4, #8
 8014042:	3008      	adds	r0, #8
 8014044:	6823      	ldr	r3, [r4, #0]
 8014046:	6003      	str	r3, [r0, #0]
 8014048:	6863      	ldr	r3, [r4, #4]
 801404a:	6043      	str	r3, [r0, #4]
 801404c:	68a3      	ldr	r3, [r4, #8]
 801404e:	6083      	str	r3, [r0, #8]
 8014050:	003e      	movs	r6, r7
 8014052:	e7c8      	b.n	8013fe6 <_realloc_r+0x20a>
 8014054:	68a3      	ldr	r3, [r4, #8]
 8014056:	612b      	str	r3, [r5, #16]
 8014058:	68e3      	ldr	r3, [r4, #12]
 801405a:	616b      	str	r3, [r5, #20]
 801405c:	2a24      	cmp	r2, #36	; 0x24
 801405e:	d003      	beq.n	8014068 <_realloc_r+0x28c>
 8014060:	0028      	movs	r0, r5
 8014062:	3410      	adds	r4, #16
 8014064:	3018      	adds	r0, #24
 8014066:	e7ed      	b.n	8014044 <_realloc_r+0x268>
 8014068:	0028      	movs	r0, r5
 801406a:	6923      	ldr	r3, [r4, #16]
 801406c:	3020      	adds	r0, #32
 801406e:	61ab      	str	r3, [r5, #24]
 8014070:	6963      	ldr	r3, [r4, #20]
 8014072:	3418      	adds	r4, #24
 8014074:	61eb      	str	r3, [r5, #28]
 8014076:	e7e5      	b.n	8014044 <_realloc_r+0x268>
 8014078:	0021      	movs	r1, r4
 801407a:	f003 fd3e 	bl	8017afa <memmove>
 801407e:	e7e7      	b.n	8014050 <_realloc_r+0x274>
 8014080:	9905      	ldr	r1, [sp, #20]
 8014082:	9803      	ldr	r0, [sp, #12]
 8014084:	f7ff fc2c 	bl	80138e0 <_malloc_r>
 8014088:	1e07      	subs	r7, r0, #0
 801408a:	d100      	bne.n	801408e <_realloc_r+0x2b2>
 801408c:	e76f      	b.n	8013f6e <_realloc_r+0x192>
 801408e:	0023      	movs	r3, r4
 8014090:	2201      	movs	r2, #1
 8014092:	3b08      	subs	r3, #8
 8014094:	685b      	ldr	r3, [r3, #4]
 8014096:	4393      	bics	r3, r2
 8014098:	9a02      	ldr	r2, [sp, #8]
 801409a:	18d3      	adds	r3, r2, r3
 801409c:	0002      	movs	r2, r0
 801409e:	3a08      	subs	r2, #8
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d105      	bne.n	80140b0 <_realloc_r+0x2d4>
 80140a4:	685e      	ldr	r6, [r3, #4]
 80140a6:	2303      	movs	r3, #3
 80140a8:	439e      	bics	r6, r3
 80140aa:	9b04      	ldr	r3, [sp, #16]
 80140ac:	18f6      	adds	r6, r6, r3
 80140ae:	e6f9      	b.n	8013ea4 <_realloc_r+0xc8>
 80140b0:	9a04      	ldr	r2, [sp, #16]
 80140b2:	3a04      	subs	r2, #4
 80140b4:	2a24      	cmp	r2, #36	; 0x24
 80140b6:	d82d      	bhi.n	8014114 <_realloc_r+0x338>
 80140b8:	2a13      	cmp	r2, #19
 80140ba:	d928      	bls.n	801410e <_realloc_r+0x332>
 80140bc:	6823      	ldr	r3, [r4, #0]
 80140be:	6003      	str	r3, [r0, #0]
 80140c0:	6863      	ldr	r3, [r4, #4]
 80140c2:	6043      	str	r3, [r0, #4]
 80140c4:	2a1b      	cmp	r2, #27
 80140c6:	d80e      	bhi.n	80140e6 <_realloc_r+0x30a>
 80140c8:	0022      	movs	r2, r4
 80140ca:	0003      	movs	r3, r0
 80140cc:	3208      	adds	r2, #8
 80140ce:	3308      	adds	r3, #8
 80140d0:	6811      	ldr	r1, [r2, #0]
 80140d2:	6019      	str	r1, [r3, #0]
 80140d4:	6851      	ldr	r1, [r2, #4]
 80140d6:	6059      	str	r1, [r3, #4]
 80140d8:	6892      	ldr	r2, [r2, #8]
 80140da:	609a      	str	r2, [r3, #8]
 80140dc:	0021      	movs	r1, r4
 80140de:	9803      	ldr	r0, [sp, #12]
 80140e0:	f003 f90a 	bl	80172f8 <_free_r>
 80140e4:	e743      	b.n	8013f6e <_realloc_r+0x192>
 80140e6:	68a3      	ldr	r3, [r4, #8]
 80140e8:	6083      	str	r3, [r0, #8]
 80140ea:	68e3      	ldr	r3, [r4, #12]
 80140ec:	60c3      	str	r3, [r0, #12]
 80140ee:	2a24      	cmp	r2, #36	; 0x24
 80140f0:	d004      	beq.n	80140fc <_realloc_r+0x320>
 80140f2:	0022      	movs	r2, r4
 80140f4:	0003      	movs	r3, r0
 80140f6:	3210      	adds	r2, #16
 80140f8:	3310      	adds	r3, #16
 80140fa:	e7e9      	b.n	80140d0 <_realloc_r+0x2f4>
 80140fc:	6923      	ldr	r3, [r4, #16]
 80140fe:	0022      	movs	r2, r4
 8014100:	6103      	str	r3, [r0, #16]
 8014102:	0003      	movs	r3, r0
 8014104:	6961      	ldr	r1, [r4, #20]
 8014106:	3218      	adds	r2, #24
 8014108:	3318      	adds	r3, #24
 801410a:	6141      	str	r1, [r0, #20]
 801410c:	e7e0      	b.n	80140d0 <_realloc_r+0x2f4>
 801410e:	0003      	movs	r3, r0
 8014110:	0022      	movs	r2, r4
 8014112:	e7dd      	b.n	80140d0 <_realloc_r+0x2f4>
 8014114:	0021      	movs	r1, r4
 8014116:	f003 fcf0 	bl	8017afa <memmove>
 801411a:	e7df      	b.n	80140dc <_realloc_r+0x300>
 801411c:	9e04      	ldr	r6, [sp, #16]
 801411e:	e6c1      	b.n	8013ea4 <_realloc_r+0xc8>
 8014120:	9902      	ldr	r1, [sp, #8]
 8014122:	4306      	orrs	r6, r0
 8014124:	604e      	str	r6, [r1, #4]
 8014126:	6851      	ldr	r1, [r2, #4]
 8014128:	430b      	orrs	r3, r1
 801412a:	6053      	str	r3, [r2, #4]
 801412c:	e6d6      	b.n	8013edc <_realloc_r+0x100>
 801412e:	46c0      	nop			; (mov r8, r8)
 8014130:	20000644 	.word	0x20000644

08014134 <_sbrk_r>:
 8014134:	2300      	movs	r3, #0
 8014136:	b570      	push	{r4, r5, r6, lr}
 8014138:	4c06      	ldr	r4, [pc, #24]	; (8014154 <_sbrk_r+0x20>)
 801413a:	0005      	movs	r5, r0
 801413c:	0008      	movs	r0, r1
 801413e:	6023      	str	r3, [r4, #0]
 8014140:	f004 f9ec 	bl	801851c <_sbrk>
 8014144:	1c43      	adds	r3, r0, #1
 8014146:	d103      	bne.n	8014150 <_sbrk_r+0x1c>
 8014148:	6823      	ldr	r3, [r4, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d000      	beq.n	8014150 <_sbrk_r+0x1c>
 801414e:	602b      	str	r3, [r5, #0]
 8014150:	bd70      	pop	{r4, r5, r6, pc}
 8014152:	46c0      	nop			; (mov r8, r8)
 8014154:	20006fbc 	.word	0x20006fbc

08014158 <sprintf>:
 8014158:	b40e      	push	{r1, r2, r3}
 801415a:	b500      	push	{lr}
 801415c:	490b      	ldr	r1, [pc, #44]	; (801418c <sprintf+0x34>)
 801415e:	b09c      	sub	sp, #112	; 0x70
 8014160:	ab1d      	add	r3, sp, #116	; 0x74
 8014162:	9002      	str	r0, [sp, #8]
 8014164:	9006      	str	r0, [sp, #24]
 8014166:	9107      	str	r1, [sp, #28]
 8014168:	9104      	str	r1, [sp, #16]
 801416a:	4809      	ldr	r0, [pc, #36]	; (8014190 <sprintf+0x38>)
 801416c:	4909      	ldr	r1, [pc, #36]	; (8014194 <sprintf+0x3c>)
 801416e:	cb04      	ldmia	r3!, {r2}
 8014170:	9105      	str	r1, [sp, #20]
 8014172:	6800      	ldr	r0, [r0, #0]
 8014174:	a902      	add	r1, sp, #8
 8014176:	9301      	str	r3, [sp, #4]
 8014178:	f000 ff78 	bl	801506c <_svfprintf_r>
 801417c:	2300      	movs	r3, #0
 801417e:	9a02      	ldr	r2, [sp, #8]
 8014180:	7013      	strb	r3, [r2, #0]
 8014182:	b01c      	add	sp, #112	; 0x70
 8014184:	bc08      	pop	{r3}
 8014186:	b003      	add	sp, #12
 8014188:	4718      	bx	r3
 801418a:	46c0      	nop			; (mov r8, r8)
 801418c:	7fffffff 	.word	0x7fffffff
 8014190:	200000a8 	.word	0x200000a8
 8014194:	ffff0208 	.word	0xffff0208

08014198 <strcat>:
 8014198:	0002      	movs	r2, r0
 801419a:	b510      	push	{r4, lr}
 801419c:	7813      	ldrb	r3, [r2, #0]
 801419e:	1c54      	adds	r4, r2, #1
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d105      	bne.n	80141b0 <strcat+0x18>
 80141a4:	5ccc      	ldrb	r4, [r1, r3]
 80141a6:	54d4      	strb	r4, [r2, r3]
 80141a8:	3301      	adds	r3, #1
 80141aa:	2c00      	cmp	r4, #0
 80141ac:	d1fa      	bne.n	80141a4 <strcat+0xc>
 80141ae:	bd10      	pop	{r4, pc}
 80141b0:	0022      	movs	r2, r4
 80141b2:	e7f3      	b.n	801419c <strcat+0x4>

080141b4 <strchr>:
 80141b4:	b2c9      	uxtb	r1, r1
 80141b6:	7803      	ldrb	r3, [r0, #0]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d004      	beq.n	80141c6 <strchr+0x12>
 80141bc:	428b      	cmp	r3, r1
 80141be:	d100      	bne.n	80141c2 <strchr+0xe>
 80141c0:	4770      	bx	lr
 80141c2:	3001      	adds	r0, #1
 80141c4:	e7f7      	b.n	80141b6 <strchr+0x2>
 80141c6:	424b      	negs	r3, r1
 80141c8:	4159      	adcs	r1, r3
 80141ca:	4249      	negs	r1, r1
 80141cc:	4008      	ands	r0, r1
 80141ce:	e7f7      	b.n	80141c0 <strchr+0xc>

080141d0 <strcpy>:
 80141d0:	0003      	movs	r3, r0
 80141d2:	780a      	ldrb	r2, [r1, #0]
 80141d4:	3101      	adds	r1, #1
 80141d6:	701a      	strb	r2, [r3, #0]
 80141d8:	3301      	adds	r3, #1
 80141da:	2a00      	cmp	r2, #0
 80141dc:	d1f9      	bne.n	80141d2 <strcpy+0x2>
 80141de:	4770      	bx	lr

080141e0 <strncmp>:
 80141e0:	2300      	movs	r3, #0
 80141e2:	b530      	push	{r4, r5, lr}
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d00a      	beq.n	80141fe <strncmp+0x1e>
 80141e8:	3a01      	subs	r2, #1
 80141ea:	5cc4      	ldrb	r4, [r0, r3]
 80141ec:	5ccd      	ldrb	r5, [r1, r3]
 80141ee:	42ac      	cmp	r4, r5
 80141f0:	d104      	bne.n	80141fc <strncmp+0x1c>
 80141f2:	4293      	cmp	r3, r2
 80141f4:	d002      	beq.n	80141fc <strncmp+0x1c>
 80141f6:	3301      	adds	r3, #1
 80141f8:	2c00      	cmp	r4, #0
 80141fa:	d1f6      	bne.n	80141ea <strncmp+0xa>
 80141fc:	1b63      	subs	r3, r4, r5
 80141fe:	0018      	movs	r0, r3
 8014200:	bd30      	pop	{r4, r5, pc}

08014202 <strncpy>:
 8014202:	b530      	push	{r4, r5, lr}
 8014204:	0005      	movs	r5, r0
 8014206:	2a00      	cmp	r2, #0
 8014208:	d100      	bne.n	801420c <strncpy+0xa>
 801420a:	bd30      	pop	{r4, r5, pc}
 801420c:	780c      	ldrb	r4, [r1, #0]
 801420e:	3a01      	subs	r2, #1
 8014210:	1c6b      	adds	r3, r5, #1
 8014212:	702c      	strb	r4, [r5, #0]
 8014214:	3101      	adds	r1, #1
 8014216:	2c00      	cmp	r4, #0
 8014218:	d105      	bne.n	8014226 <strncpy+0x24>
 801421a:	189a      	adds	r2, r3, r2
 801421c:	429a      	cmp	r2, r3
 801421e:	d0f4      	beq.n	801420a <strncpy+0x8>
 8014220:	701c      	strb	r4, [r3, #0]
 8014222:	3301      	adds	r3, #1
 8014224:	e7fa      	b.n	801421c <strncpy+0x1a>
 8014226:	001d      	movs	r5, r3
 8014228:	e7ed      	b.n	8014206 <strncpy+0x4>
	...

0801422c <sulp>:
 801422c:	b570      	push	{r4, r5, r6, lr}
 801422e:	0016      	movs	r6, r2
 8014230:	000d      	movs	r5, r1
 8014232:	f003 ff17 	bl	8018064 <__ulp>
 8014236:	2e00      	cmp	r6, #0
 8014238:	d00d      	beq.n	8014256 <sulp+0x2a>
 801423a:	236b      	movs	r3, #107	; 0x6b
 801423c:	006a      	lsls	r2, r5, #1
 801423e:	0d52      	lsrs	r2, r2, #21
 8014240:	1a9b      	subs	r3, r3, r2
 8014242:	2b00      	cmp	r3, #0
 8014244:	dd07      	ble.n	8014256 <sulp+0x2a>
 8014246:	2400      	movs	r4, #0
 8014248:	4a03      	ldr	r2, [pc, #12]	; (8014258 <sulp+0x2c>)
 801424a:	051b      	lsls	r3, r3, #20
 801424c:	189d      	adds	r5, r3, r2
 801424e:	002b      	movs	r3, r5
 8014250:	0022      	movs	r2, r4
 8014252:	f7ed fdef 	bl	8001e34 <__aeabi_dmul>
 8014256:	bd70      	pop	{r4, r5, r6, pc}
 8014258:	3ff00000 	.word	0x3ff00000

0801425c <_strtod_l>:
 801425c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801425e:	b0a7      	sub	sp, #156	; 0x9c
 8014260:	9307      	str	r3, [sp, #28]
 8014262:	2300      	movs	r3, #0
 8014264:	9004      	str	r0, [sp, #16]
 8014266:	9807      	ldr	r0, [sp, #28]
 8014268:	9322      	str	r3, [sp, #136]	; 0x88
 801426a:	9106      	str	r1, [sp, #24]
 801426c:	921d      	str	r2, [sp, #116]	; 0x74
 801426e:	f003 fc28 	bl	8017ac2 <__localeconv_l>
 8014272:	0005      	movs	r5, r0
 8014274:	6800      	ldr	r0, [r0, #0]
 8014276:	f7eb ff4f 	bl	8000118 <strlen>
 801427a:	2600      	movs	r6, #0
 801427c:	2700      	movs	r7, #0
 801427e:	9b06      	ldr	r3, [sp, #24]
 8014280:	9005      	str	r0, [sp, #20]
 8014282:	9321      	str	r3, [sp, #132]	; 0x84
 8014284:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014286:	781a      	ldrb	r2, [r3, #0]
 8014288:	2a0d      	cmp	r2, #13
 801428a:	d839      	bhi.n	8014300 <_strtod_l+0xa4>
 801428c:	2a09      	cmp	r2, #9
 801428e:	d23d      	bcs.n	801430c <_strtod_l+0xb0>
 8014290:	2a00      	cmp	r2, #0
 8014292:	d044      	beq.n	801431e <_strtod_l+0xc2>
 8014294:	2300      	movs	r3, #0
 8014296:	9313      	str	r3, [sp, #76]	; 0x4c
 8014298:	2200      	movs	r2, #0
 801429a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801429c:	920c      	str	r2, [sp, #48]	; 0x30
 801429e:	7823      	ldrb	r3, [r4, #0]
 80142a0:	2b30      	cmp	r3, #48	; 0x30
 80142a2:	d000      	beq.n	80142a6 <_strtod_l+0x4a>
 80142a4:	e07e      	b.n	80143a4 <_strtod_l+0x148>
 80142a6:	7863      	ldrb	r3, [r4, #1]
 80142a8:	2b58      	cmp	r3, #88	; 0x58
 80142aa:	d002      	beq.n	80142b2 <_strtod_l+0x56>
 80142ac:	2b78      	cmp	r3, #120	; 0x78
 80142ae:	d000      	beq.n	80142b2 <_strtod_l+0x56>
 80142b0:	e06e      	b.n	8014390 <_strtod_l+0x134>
 80142b2:	9b07      	ldr	r3, [sp, #28]
 80142b4:	4a96      	ldr	r2, [pc, #600]	; (8014510 <_strtod_l+0x2b4>)
 80142b6:	9302      	str	r3, [sp, #8]
 80142b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142ba:	a921      	add	r1, sp, #132	; 0x84
 80142bc:	9301      	str	r3, [sp, #4]
 80142be:	ab22      	add	r3, sp, #136	; 0x88
 80142c0:	9300      	str	r3, [sp, #0]
 80142c2:	9804      	ldr	r0, [sp, #16]
 80142c4:	ab23      	add	r3, sp, #140	; 0x8c
 80142c6:	f003 f914 	bl	80174f2 <__gethex>
 80142ca:	2507      	movs	r5, #7
 80142cc:	9005      	str	r0, [sp, #20]
 80142ce:	4005      	ands	r5, r0
 80142d0:	d005      	beq.n	80142de <_strtod_l+0x82>
 80142d2:	2d06      	cmp	r5, #6
 80142d4:	d12f      	bne.n	8014336 <_strtod_l+0xda>
 80142d6:	2300      	movs	r3, #0
 80142d8:	3401      	adds	r4, #1
 80142da:	9421      	str	r4, [sp, #132]	; 0x84
 80142dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80142de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d002      	beq.n	80142ea <_strtod_l+0x8e>
 80142e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80142e8:	601a      	str	r2, [r3, #0]
 80142ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d01d      	beq.n	801432c <_strtod_l+0xd0>
 80142f0:	2380      	movs	r3, #128	; 0x80
 80142f2:	0032      	movs	r2, r6
 80142f4:	061b      	lsls	r3, r3, #24
 80142f6:	18fb      	adds	r3, r7, r3
 80142f8:	0010      	movs	r0, r2
 80142fa:	0019      	movs	r1, r3
 80142fc:	b027      	add	sp, #156	; 0x9c
 80142fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014300:	2a2b      	cmp	r2, #43	; 0x2b
 8014302:	d016      	beq.n	8014332 <_strtod_l+0xd6>
 8014304:	2a2d      	cmp	r2, #45	; 0x2d
 8014306:	d003      	beq.n	8014310 <_strtod_l+0xb4>
 8014308:	2a20      	cmp	r2, #32
 801430a:	d1c3      	bne.n	8014294 <_strtod_l+0x38>
 801430c:	3301      	adds	r3, #1
 801430e:	e7b8      	b.n	8014282 <_strtod_l+0x26>
 8014310:	2201      	movs	r2, #1
 8014312:	9213      	str	r2, [sp, #76]	; 0x4c
 8014314:	1c5a      	adds	r2, r3, #1
 8014316:	9221      	str	r2, [sp, #132]	; 0x84
 8014318:	785b      	ldrb	r3, [r3, #1]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d1bc      	bne.n	8014298 <_strtod_l+0x3c>
 801431e:	9b06      	ldr	r3, [sp, #24]
 8014320:	9321      	str	r3, [sp, #132]	; 0x84
 8014322:	2300      	movs	r3, #0
 8014324:	9313      	str	r3, [sp, #76]	; 0x4c
 8014326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014328:	2b00      	cmp	r3, #0
 801432a:	d1db      	bne.n	80142e4 <_strtod_l+0x88>
 801432c:	0032      	movs	r2, r6
 801432e:	003b      	movs	r3, r7
 8014330:	e7e2      	b.n	80142f8 <_strtod_l+0x9c>
 8014332:	2200      	movs	r2, #0
 8014334:	e7ed      	b.n	8014312 <_strtod_l+0xb6>
 8014336:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014338:	2a00      	cmp	r2, #0
 801433a:	d007      	beq.n	801434c <_strtod_l+0xf0>
 801433c:	2135      	movs	r1, #53	; 0x35
 801433e:	a824      	add	r0, sp, #144	; 0x90
 8014340:	f003 ff7d 	bl	801823e <__copybits>
 8014344:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014346:	9804      	ldr	r0, [sp, #16]
 8014348:	f003 fc12 	bl	8017b70 <_Bfree>
 801434c:	1e68      	subs	r0, r5, #1
 801434e:	2804      	cmp	r0, #4
 8014350:	d806      	bhi.n	8014360 <_strtod_l+0x104>
 8014352:	f7eb fee9 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014356:	030c      	.short	0x030c
 8014358:	1917      	.short	0x1917
 801435a:	0c          	.byte	0x0c
 801435b:	00          	.byte	0x00
 801435c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801435e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8014360:	9b05      	ldr	r3, [sp, #20]
 8014362:	071b      	lsls	r3, r3, #28
 8014364:	d5bb      	bpl.n	80142de <_strtod_l+0x82>
 8014366:	2380      	movs	r3, #128	; 0x80
 8014368:	061b      	lsls	r3, r3, #24
 801436a:	431f      	orrs	r7, r3
 801436c:	e7b7      	b.n	80142de <_strtod_l+0x82>
 801436e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014370:	4a68      	ldr	r2, [pc, #416]	; (8014514 <_strtod_l+0x2b8>)
 8014372:	4969      	ldr	r1, [pc, #420]	; (8014518 <_strtod_l+0x2bc>)
 8014374:	401a      	ands	r2, r3
 8014376:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014378:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801437a:	185b      	adds	r3, r3, r1
 801437c:	051b      	lsls	r3, r3, #20
 801437e:	431a      	orrs	r2, r3
 8014380:	0017      	movs	r7, r2
 8014382:	e7ed      	b.n	8014360 <_strtod_l+0x104>
 8014384:	4f65      	ldr	r7, [pc, #404]	; (801451c <_strtod_l+0x2c0>)
 8014386:	e7eb      	b.n	8014360 <_strtod_l+0x104>
 8014388:	2601      	movs	r6, #1
 801438a:	4f65      	ldr	r7, [pc, #404]	; (8014520 <_strtod_l+0x2c4>)
 801438c:	4276      	negs	r6, r6
 801438e:	e7e7      	b.n	8014360 <_strtod_l+0x104>
 8014390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014392:	1c5a      	adds	r2, r3, #1
 8014394:	9221      	str	r2, [sp, #132]	; 0x84
 8014396:	785b      	ldrb	r3, [r3, #1]
 8014398:	2b30      	cmp	r3, #48	; 0x30
 801439a:	d0f9      	beq.n	8014390 <_strtod_l+0x134>
 801439c:	2b00      	cmp	r3, #0
 801439e:	d09e      	beq.n	80142de <_strtod_l+0x82>
 80143a0:	2301      	movs	r3, #1
 80143a2:	930c      	str	r3, [sp, #48]	; 0x30
 80143a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80143a6:	220a      	movs	r2, #10
 80143a8:	9312      	str	r3, [sp, #72]	; 0x48
 80143aa:	2300      	movs	r3, #0
 80143ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80143ae:	9308      	str	r3, [sp, #32]
 80143b0:	930a      	str	r3, [sp, #40]	; 0x28
 80143b2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80143b4:	7804      	ldrb	r4, [r0, #0]
 80143b6:	0023      	movs	r3, r4
 80143b8:	3b30      	subs	r3, #48	; 0x30
 80143ba:	b2d9      	uxtb	r1, r3
 80143bc:	2909      	cmp	r1, #9
 80143be:	d934      	bls.n	801442a <_strtod_l+0x1ce>
 80143c0:	9a05      	ldr	r2, [sp, #20]
 80143c2:	6829      	ldr	r1, [r5, #0]
 80143c4:	f7ff ff0c 	bl	80141e0 <strncmp>
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d040      	beq.n	801444e <_strtod_l+0x1f2>
 80143cc:	2000      	movs	r0, #0
 80143ce:	0023      	movs	r3, r4
 80143d0:	4684      	mov	ip, r0
 80143d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143d4:	9007      	str	r0, [sp, #28]
 80143d6:	9205      	str	r2, [sp, #20]
 80143d8:	2220      	movs	r2, #32
 80143da:	0019      	movs	r1, r3
 80143dc:	4391      	bics	r1, r2
 80143de:	000a      	movs	r2, r1
 80143e0:	2100      	movs	r1, #0
 80143e2:	2a45      	cmp	r2, #69	; 0x45
 80143e4:	d000      	beq.n	80143e8 <_strtod_l+0x18c>
 80143e6:	e0bf      	b.n	8014568 <_strtod_l+0x30c>
 80143e8:	9b05      	ldr	r3, [sp, #20]
 80143ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143ec:	4303      	orrs	r3, r0
 80143ee:	4313      	orrs	r3, r2
 80143f0:	428b      	cmp	r3, r1
 80143f2:	d094      	beq.n	801431e <_strtod_l+0xc2>
 80143f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80143f6:	9306      	str	r3, [sp, #24]
 80143f8:	3301      	adds	r3, #1
 80143fa:	9321      	str	r3, [sp, #132]	; 0x84
 80143fc:	9b06      	ldr	r3, [sp, #24]
 80143fe:	785b      	ldrb	r3, [r3, #1]
 8014400:	2b2b      	cmp	r3, #43	; 0x2b
 8014402:	d100      	bne.n	8014406 <_strtod_l+0x1aa>
 8014404:	e082      	b.n	801450c <_strtod_l+0x2b0>
 8014406:	000c      	movs	r4, r1
 8014408:	2b2d      	cmp	r3, #45	; 0x2d
 801440a:	d105      	bne.n	8014418 <_strtod_l+0x1bc>
 801440c:	2401      	movs	r4, #1
 801440e:	9b06      	ldr	r3, [sp, #24]
 8014410:	3302      	adds	r3, #2
 8014412:	9321      	str	r3, [sp, #132]	; 0x84
 8014414:	9b06      	ldr	r3, [sp, #24]
 8014416:	789b      	ldrb	r3, [r3, #2]
 8014418:	001a      	movs	r2, r3
 801441a:	3a30      	subs	r2, #48	; 0x30
 801441c:	2a09      	cmp	r2, #9
 801441e:	d800      	bhi.n	8014422 <_strtod_l+0x1c6>
 8014420:	e084      	b.n	801452c <_strtod_l+0x2d0>
 8014422:	9a06      	ldr	r2, [sp, #24]
 8014424:	2100      	movs	r1, #0
 8014426:	9221      	str	r2, [sp, #132]	; 0x84
 8014428:	e09e      	b.n	8014568 <_strtod_l+0x30c>
 801442a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801442c:	2908      	cmp	r1, #8
 801442e:	dc09      	bgt.n	8014444 <_strtod_l+0x1e8>
 8014430:	9908      	ldr	r1, [sp, #32]
 8014432:	4351      	muls	r1, r2
 8014434:	18cb      	adds	r3, r1, r3
 8014436:	9308      	str	r3, [sp, #32]
 8014438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801443a:	3001      	adds	r0, #1
 801443c:	3301      	adds	r3, #1
 801443e:	930a      	str	r3, [sp, #40]	; 0x28
 8014440:	9021      	str	r0, [sp, #132]	; 0x84
 8014442:	e7b6      	b.n	80143b2 <_strtod_l+0x156>
 8014444:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014446:	4351      	muls	r1, r2
 8014448:	18cb      	adds	r3, r1, r3
 801444a:	930b      	str	r3, [sp, #44]	; 0x2c
 801444c:	e7f4      	b.n	8014438 <_strtod_l+0x1dc>
 801444e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014450:	9b05      	ldr	r3, [sp, #20]
 8014452:	4694      	mov	ip, r2
 8014454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014456:	4463      	add	r3, ip
 8014458:	9321      	str	r3, [sp, #132]	; 0x84
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	2a00      	cmp	r2, #0
 801445e:	d036      	beq.n	80144ce <_strtod_l+0x272>
 8014460:	4684      	mov	ip, r0
 8014462:	9205      	str	r2, [sp, #20]
 8014464:	001a      	movs	r2, r3
 8014466:	3a30      	subs	r2, #48	; 0x30
 8014468:	2a09      	cmp	r2, #9
 801446a:	d912      	bls.n	8014492 <_strtod_l+0x236>
 801446c:	2201      	movs	r2, #1
 801446e:	9207      	str	r2, [sp, #28]
 8014470:	e7b2      	b.n	80143d8 <_strtod_l+0x17c>
 8014472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014474:	3001      	adds	r0, #1
 8014476:	1c5a      	adds	r2, r3, #1
 8014478:	9221      	str	r2, [sp, #132]	; 0x84
 801447a:	785b      	ldrb	r3, [r3, #1]
 801447c:	2b30      	cmp	r3, #48	; 0x30
 801447e:	d0f8      	beq.n	8014472 <_strtod_l+0x216>
 8014480:	001a      	movs	r2, r3
 8014482:	3a31      	subs	r2, #49	; 0x31
 8014484:	2a08      	cmp	r2, #8
 8014486:	d83c      	bhi.n	8014502 <_strtod_l+0x2a6>
 8014488:	4684      	mov	ip, r0
 801448a:	2000      	movs	r0, #0
 801448c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801448e:	9005      	str	r0, [sp, #20]
 8014490:	9212      	str	r2, [sp, #72]	; 0x48
 8014492:	3b30      	subs	r3, #48	; 0x30
 8014494:	1c42      	adds	r2, r0, #1
 8014496:	2b00      	cmp	r3, #0
 8014498:	d013      	beq.n	80144c2 <_strtod_l+0x266>
 801449a:	210a      	movs	r1, #10
 801449c:	4494      	add	ip, r2
 801449e:	9a05      	ldr	r2, [sp, #20]
 80144a0:	1885      	adds	r5, r0, r2
 80144a2:	42aa      	cmp	r2, r5
 80144a4:	d115      	bne.n	80144d2 <_strtod_l+0x276>
 80144a6:	9905      	ldr	r1, [sp, #20]
 80144a8:	9a05      	ldr	r2, [sp, #20]
 80144aa:	3101      	adds	r1, #1
 80144ac:	1809      	adds	r1, r1, r0
 80144ae:	1812      	adds	r2, r2, r0
 80144b0:	9105      	str	r1, [sp, #20]
 80144b2:	2a08      	cmp	r2, #8
 80144b4:	dc1b      	bgt.n	80144ee <_strtod_l+0x292>
 80144b6:	220a      	movs	r2, #10
 80144b8:	9908      	ldr	r1, [sp, #32]
 80144ba:	434a      	muls	r2, r1
 80144bc:	189b      	adds	r3, r3, r2
 80144be:	2200      	movs	r2, #0
 80144c0:	9308      	str	r3, [sp, #32]
 80144c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144c4:	0010      	movs	r0, r2
 80144c6:	1c59      	adds	r1, r3, #1
 80144c8:	9121      	str	r1, [sp, #132]	; 0x84
 80144ca:	785b      	ldrb	r3, [r3, #1]
 80144cc:	e7ca      	b.n	8014464 <_strtod_l+0x208>
 80144ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144d0:	e7d4      	b.n	801447c <_strtod_l+0x220>
 80144d2:	1c54      	adds	r4, r2, #1
 80144d4:	2a08      	cmp	r2, #8
 80144d6:	dc04      	bgt.n	80144e2 <_strtod_l+0x286>
 80144d8:	9a08      	ldr	r2, [sp, #32]
 80144da:	434a      	muls	r2, r1
 80144dc:	9208      	str	r2, [sp, #32]
 80144de:	0022      	movs	r2, r4
 80144e0:	e7df      	b.n	80144a2 <_strtod_l+0x246>
 80144e2:	2c10      	cmp	r4, #16
 80144e4:	dcfb      	bgt.n	80144de <_strtod_l+0x282>
 80144e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80144e8:	434a      	muls	r2, r1
 80144ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80144ec:	e7f7      	b.n	80144de <_strtod_l+0x282>
 80144ee:	9905      	ldr	r1, [sp, #20]
 80144f0:	2200      	movs	r2, #0
 80144f2:	2910      	cmp	r1, #16
 80144f4:	dce5      	bgt.n	80144c2 <_strtod_l+0x266>
 80144f6:	210a      	movs	r1, #10
 80144f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80144fa:	4341      	muls	r1, r0
 80144fc:	185b      	adds	r3, r3, r1
 80144fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8014500:	e7df      	b.n	80144c2 <_strtod_l+0x266>
 8014502:	2200      	movs	r2, #0
 8014504:	4694      	mov	ip, r2
 8014506:	9205      	str	r2, [sp, #20]
 8014508:	3201      	adds	r2, #1
 801450a:	e7b0      	b.n	801446e <_strtod_l+0x212>
 801450c:	000c      	movs	r4, r1
 801450e:	e77e      	b.n	801440e <_strtod_l+0x1b2>
 8014510:	0801ba98 	.word	0x0801ba98
 8014514:	ffefffff 	.word	0xffefffff
 8014518:	00000433 	.word	0x00000433
 801451c:	7ff00000 	.word	0x7ff00000
 8014520:	7fffffff 	.word	0x7fffffff
 8014524:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014526:	1c5a      	adds	r2, r3, #1
 8014528:	9221      	str	r2, [sp, #132]	; 0x84
 801452a:	785b      	ldrb	r3, [r3, #1]
 801452c:	2b30      	cmp	r3, #48	; 0x30
 801452e:	d0f9      	beq.n	8014524 <_strtod_l+0x2c8>
 8014530:	001a      	movs	r2, r3
 8014532:	3a31      	subs	r2, #49	; 0x31
 8014534:	2100      	movs	r1, #0
 8014536:	2a08      	cmp	r2, #8
 8014538:	d816      	bhi.n	8014568 <_strtod_l+0x30c>
 801453a:	3b30      	subs	r3, #48	; 0x30
 801453c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801453e:	930e      	str	r3, [sp, #56]	; 0x38
 8014540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014542:	1c59      	adds	r1, r3, #1
 8014544:	9121      	str	r1, [sp, #132]	; 0x84
 8014546:	785b      	ldrb	r3, [r3, #1]
 8014548:	001a      	movs	r2, r3
 801454a:	3a30      	subs	r2, #48	; 0x30
 801454c:	2a09      	cmp	r2, #9
 801454e:	d932      	bls.n	80145b6 <_strtod_l+0x35a>
 8014550:	1b4a      	subs	r2, r1, r5
 8014552:	4dad      	ldr	r5, [pc, #692]	; (8014808 <_strtod_l+0x5ac>)
 8014554:	0029      	movs	r1, r5
 8014556:	2a08      	cmp	r2, #8
 8014558:	dc03      	bgt.n	8014562 <_strtod_l+0x306>
 801455a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801455c:	42a9      	cmp	r1, r5
 801455e:	dd00      	ble.n	8014562 <_strtod_l+0x306>
 8014560:	0029      	movs	r1, r5
 8014562:	2c00      	cmp	r4, #0
 8014564:	d000      	beq.n	8014568 <_strtod_l+0x30c>
 8014566:	4249      	negs	r1, r1
 8014568:	9a05      	ldr	r2, [sp, #20]
 801456a:	2a00      	cmp	r2, #0
 801456c:	d149      	bne.n	8014602 <_strtod_l+0x3a6>
 801456e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014570:	4310      	orrs	r0, r2
 8014572:	d000      	beq.n	8014576 <_strtod_l+0x31a>
 8014574:	e6b3      	b.n	80142de <_strtod_l+0x82>
 8014576:	9a07      	ldr	r2, [sp, #28]
 8014578:	2a00      	cmp	r2, #0
 801457a:	d000      	beq.n	801457e <_strtod_l+0x322>
 801457c:	e6cf      	b.n	801431e <_strtod_l+0xc2>
 801457e:	2b4e      	cmp	r3, #78	; 0x4e
 8014580:	d025      	beq.n	80145ce <_strtod_l+0x372>
 8014582:	dc1f      	bgt.n	80145c4 <_strtod_l+0x368>
 8014584:	2b49      	cmp	r3, #73	; 0x49
 8014586:	d000      	beq.n	801458a <_strtod_l+0x32e>
 8014588:	e6c9      	b.n	801431e <_strtod_l+0xc2>
 801458a:	49a0      	ldr	r1, [pc, #640]	; (801480c <_strtod_l+0x5b0>)
 801458c:	a821      	add	r0, sp, #132	; 0x84
 801458e:	f003 f9ed 	bl	801796c <__match>
 8014592:	2800      	cmp	r0, #0
 8014594:	d100      	bne.n	8014598 <_strtod_l+0x33c>
 8014596:	e6c2      	b.n	801431e <_strtod_l+0xc2>
 8014598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801459a:	499d      	ldr	r1, [pc, #628]	; (8014810 <_strtod_l+0x5b4>)
 801459c:	3b01      	subs	r3, #1
 801459e:	a821      	add	r0, sp, #132	; 0x84
 80145a0:	9321      	str	r3, [sp, #132]	; 0x84
 80145a2:	f003 f9e3 	bl	801796c <__match>
 80145a6:	2800      	cmp	r0, #0
 80145a8:	d102      	bne.n	80145b0 <_strtod_l+0x354>
 80145aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145ac:	3301      	adds	r3, #1
 80145ae:	9321      	str	r3, [sp, #132]	; 0x84
 80145b0:	4f98      	ldr	r7, [pc, #608]	; (8014814 <_strtod_l+0x5b8>)
 80145b2:	2600      	movs	r6, #0
 80145b4:	e693      	b.n	80142de <_strtod_l+0x82>
 80145b6:	220a      	movs	r2, #10
 80145b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80145ba:	434a      	muls	r2, r1
 80145bc:	18d2      	adds	r2, r2, r3
 80145be:	3a30      	subs	r2, #48	; 0x30
 80145c0:	920e      	str	r2, [sp, #56]	; 0x38
 80145c2:	e7bd      	b.n	8014540 <_strtod_l+0x2e4>
 80145c4:	2b69      	cmp	r3, #105	; 0x69
 80145c6:	d0e0      	beq.n	801458a <_strtod_l+0x32e>
 80145c8:	2b6e      	cmp	r3, #110	; 0x6e
 80145ca:	d000      	beq.n	80145ce <_strtod_l+0x372>
 80145cc:	e6a7      	b.n	801431e <_strtod_l+0xc2>
 80145ce:	4992      	ldr	r1, [pc, #584]	; (8014818 <_strtod_l+0x5bc>)
 80145d0:	a821      	add	r0, sp, #132	; 0x84
 80145d2:	f003 f9cb 	bl	801796c <__match>
 80145d6:	2800      	cmp	r0, #0
 80145d8:	d100      	bne.n	80145dc <_strtod_l+0x380>
 80145da:	e6a0      	b.n	801431e <_strtod_l+0xc2>
 80145dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145de:	781b      	ldrb	r3, [r3, #0]
 80145e0:	2b28      	cmp	r3, #40	; 0x28
 80145e2:	d10c      	bne.n	80145fe <_strtod_l+0x3a2>
 80145e4:	aa24      	add	r2, sp, #144	; 0x90
 80145e6:	498d      	ldr	r1, [pc, #564]	; (801481c <_strtod_l+0x5c0>)
 80145e8:	a821      	add	r0, sp, #132	; 0x84
 80145ea:	f003 f9d3 	bl	8017994 <__hexnan>
 80145ee:	2805      	cmp	r0, #5
 80145f0:	d105      	bne.n	80145fe <_strtod_l+0x3a2>
 80145f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80145f4:	4a87      	ldr	r2, [pc, #540]	; (8014814 <_strtod_l+0x5b8>)
 80145f6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80145f8:	431a      	orrs	r2, r3
 80145fa:	0017      	movs	r7, r2
 80145fc:	e66f      	b.n	80142de <_strtod_l+0x82>
 80145fe:	4f88      	ldr	r7, [pc, #544]	; (8014820 <_strtod_l+0x5c4>)
 8014600:	e7d7      	b.n	80145b2 <_strtod_l+0x356>
 8014602:	4663      	mov	r3, ip
 8014604:	1acb      	subs	r3, r1, r3
 8014606:	9307      	str	r3, [sp, #28]
 8014608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801460a:	2b00      	cmp	r3, #0
 801460c:	d101      	bne.n	8014612 <_strtod_l+0x3b6>
 801460e:	9b05      	ldr	r3, [sp, #20]
 8014610:	930a      	str	r3, [sp, #40]	; 0x28
 8014612:	9c05      	ldr	r4, [sp, #20]
 8014614:	2c10      	cmp	r4, #16
 8014616:	dd00      	ble.n	801461a <_strtod_l+0x3be>
 8014618:	2410      	movs	r4, #16
 801461a:	9808      	ldr	r0, [sp, #32]
 801461c:	f7ee fa50 	bl	8002ac0 <__aeabi_ui2d>
 8014620:	9b05      	ldr	r3, [sp, #20]
 8014622:	0006      	movs	r6, r0
 8014624:	000f      	movs	r7, r1
 8014626:	2b09      	cmp	r3, #9
 8014628:	dc15      	bgt.n	8014656 <_strtod_l+0x3fa>
 801462a:	9b07      	ldr	r3, [sp, #28]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d100      	bne.n	8014632 <_strtod_l+0x3d6>
 8014630:	e655      	b.n	80142de <_strtod_l+0x82>
 8014632:	9b07      	ldr	r3, [sp, #28]
 8014634:	2b00      	cmp	r3, #0
 8014636:	dc00      	bgt.n	801463a <_strtod_l+0x3de>
 8014638:	e07d      	b.n	8014736 <_strtod_l+0x4da>
 801463a:	2b16      	cmp	r3, #22
 801463c:	dc62      	bgt.n	8014704 <_strtod_l+0x4a8>
 801463e:	00dc      	lsls	r4, r3, #3
 8014640:	4b78      	ldr	r3, [pc, #480]	; (8014824 <_strtod_l+0x5c8>)
 8014642:	0032      	movs	r2, r6
 8014644:	1919      	adds	r1, r3, r4
 8014646:	003b      	movs	r3, r7
 8014648:	6808      	ldr	r0, [r1, #0]
 801464a:	6849      	ldr	r1, [r1, #4]
 801464c:	f7ed fbf2 	bl	8001e34 <__aeabi_dmul>
 8014650:	0006      	movs	r6, r0
 8014652:	000f      	movs	r7, r1
 8014654:	e643      	b.n	80142de <_strtod_l+0x82>
 8014656:	0022      	movs	r2, r4
 8014658:	4b72      	ldr	r3, [pc, #456]	; (8014824 <_strtod_l+0x5c8>)
 801465a:	3a09      	subs	r2, #9
 801465c:	00d2      	lsls	r2, r2, #3
 801465e:	189b      	adds	r3, r3, r2
 8014660:	681a      	ldr	r2, [r3, #0]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	f7ed fbe6 	bl	8001e34 <__aeabi_dmul>
 8014668:	0006      	movs	r6, r0
 801466a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801466c:	000f      	movs	r7, r1
 801466e:	f7ee fa27 	bl	8002ac0 <__aeabi_ui2d>
 8014672:	000b      	movs	r3, r1
 8014674:	0002      	movs	r2, r0
 8014676:	0039      	movs	r1, r7
 8014678:	0030      	movs	r0, r6
 801467a:	f7ec fcb5 	bl	8000fe8 <__aeabi_dadd>
 801467e:	9b05      	ldr	r3, [sp, #20]
 8014680:	0006      	movs	r6, r0
 8014682:	000f      	movs	r7, r1
 8014684:	2b0f      	cmp	r3, #15
 8014686:	ddd0      	ble.n	801462a <_strtod_l+0x3ce>
 8014688:	9b05      	ldr	r3, [sp, #20]
 801468a:	1b1c      	subs	r4, r3, r4
 801468c:	9b07      	ldr	r3, [sp, #28]
 801468e:	18e4      	adds	r4, r4, r3
 8014690:	2c00      	cmp	r4, #0
 8014692:	dc00      	bgt.n	8014696 <_strtod_l+0x43a>
 8014694:	e094      	b.n	80147c0 <_strtod_l+0x564>
 8014696:	230f      	movs	r3, #15
 8014698:	4023      	ands	r3, r4
 801469a:	d00a      	beq.n	80146b2 <_strtod_l+0x456>
 801469c:	4961      	ldr	r1, [pc, #388]	; (8014824 <_strtod_l+0x5c8>)
 801469e:	00db      	lsls	r3, r3, #3
 80146a0:	18c9      	adds	r1, r1, r3
 80146a2:	0032      	movs	r2, r6
 80146a4:	6808      	ldr	r0, [r1, #0]
 80146a6:	6849      	ldr	r1, [r1, #4]
 80146a8:	003b      	movs	r3, r7
 80146aa:	f7ed fbc3 	bl	8001e34 <__aeabi_dmul>
 80146ae:	0006      	movs	r6, r0
 80146b0:	000f      	movs	r7, r1
 80146b2:	230f      	movs	r3, #15
 80146b4:	439c      	bics	r4, r3
 80146b6:	d06e      	beq.n	8014796 <_strtod_l+0x53a>
 80146b8:	3326      	adds	r3, #38	; 0x26
 80146ba:	33ff      	adds	r3, #255	; 0xff
 80146bc:	429c      	cmp	r4, r3
 80146be:	dd48      	ble.n	8014752 <_strtod_l+0x4f6>
 80146c0:	2400      	movs	r4, #0
 80146c2:	9405      	str	r4, [sp, #20]
 80146c4:	940b      	str	r4, [sp, #44]	; 0x2c
 80146c6:	940a      	str	r4, [sp, #40]	; 0x28
 80146c8:	2322      	movs	r3, #34	; 0x22
 80146ca:	2600      	movs	r6, #0
 80146cc:	9a04      	ldr	r2, [sp, #16]
 80146ce:	4f51      	ldr	r7, [pc, #324]	; (8014814 <_strtod_l+0x5b8>)
 80146d0:	6013      	str	r3, [r2, #0]
 80146d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146d4:	42b3      	cmp	r3, r6
 80146d6:	d100      	bne.n	80146da <_strtod_l+0x47e>
 80146d8:	e601      	b.n	80142de <_strtod_l+0x82>
 80146da:	9922      	ldr	r1, [sp, #136]	; 0x88
 80146dc:	9804      	ldr	r0, [sp, #16]
 80146de:	f003 fa47 	bl	8017b70 <_Bfree>
 80146e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80146e4:	9804      	ldr	r0, [sp, #16]
 80146e6:	f003 fa43 	bl	8017b70 <_Bfree>
 80146ea:	9905      	ldr	r1, [sp, #20]
 80146ec:	9804      	ldr	r0, [sp, #16]
 80146ee:	f003 fa3f 	bl	8017b70 <_Bfree>
 80146f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146f4:	9804      	ldr	r0, [sp, #16]
 80146f6:	f003 fa3b 	bl	8017b70 <_Bfree>
 80146fa:	0021      	movs	r1, r4
 80146fc:	9804      	ldr	r0, [sp, #16]
 80146fe:	f003 fa37 	bl	8017b70 <_Bfree>
 8014702:	e5ec      	b.n	80142de <_strtod_l+0x82>
 8014704:	2325      	movs	r3, #37	; 0x25
 8014706:	9a05      	ldr	r2, [sp, #20]
 8014708:	1a9b      	subs	r3, r3, r2
 801470a:	9a07      	ldr	r2, [sp, #28]
 801470c:	4293      	cmp	r3, r2
 801470e:	dbbb      	blt.n	8014688 <_strtod_l+0x42c>
 8014710:	230f      	movs	r3, #15
 8014712:	9a05      	ldr	r2, [sp, #20]
 8014714:	4c43      	ldr	r4, [pc, #268]	; (8014824 <_strtod_l+0x5c8>)
 8014716:	1a9d      	subs	r5, r3, r2
 8014718:	00e9      	lsls	r1, r5, #3
 801471a:	1861      	adds	r1, r4, r1
 801471c:	0032      	movs	r2, r6
 801471e:	6808      	ldr	r0, [r1, #0]
 8014720:	6849      	ldr	r1, [r1, #4]
 8014722:	003b      	movs	r3, r7
 8014724:	f7ed fb86 	bl	8001e34 <__aeabi_dmul>
 8014728:	9b07      	ldr	r3, [sp, #28]
 801472a:	1b5e      	subs	r6, r3, r5
 801472c:	00f6      	lsls	r6, r6, #3
 801472e:	19a6      	adds	r6, r4, r6
 8014730:	6832      	ldr	r2, [r6, #0]
 8014732:	6873      	ldr	r3, [r6, #4]
 8014734:	e78a      	b.n	801464c <_strtod_l+0x3f0>
 8014736:	9b07      	ldr	r3, [sp, #28]
 8014738:	3316      	adds	r3, #22
 801473a:	dba5      	blt.n	8014688 <_strtod_l+0x42c>
 801473c:	9b07      	ldr	r3, [sp, #28]
 801473e:	0030      	movs	r0, r6
 8014740:	00da      	lsls	r2, r3, #3
 8014742:	4b38      	ldr	r3, [pc, #224]	; (8014824 <_strtod_l+0x5c8>)
 8014744:	0039      	movs	r1, r7
 8014746:	1a9b      	subs	r3, r3, r2
 8014748:	681a      	ldr	r2, [r3, #0]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	f7ec ff68 	bl	8001620 <__aeabi_ddiv>
 8014750:	e77e      	b.n	8014650 <_strtod_l+0x3f4>
 8014752:	2300      	movs	r3, #0
 8014754:	0030      	movs	r0, r6
 8014756:	0039      	movs	r1, r7
 8014758:	001d      	movs	r5, r3
 801475a:	1124      	asrs	r4, r4, #4
 801475c:	2c01      	cmp	r4, #1
 801475e:	dc1d      	bgt.n	801479c <_strtod_l+0x540>
 8014760:	2b00      	cmp	r3, #0
 8014762:	d001      	beq.n	8014768 <_strtod_l+0x50c>
 8014764:	0006      	movs	r6, r0
 8014766:	000f      	movs	r7, r1
 8014768:	4b2f      	ldr	r3, [pc, #188]	; (8014828 <_strtod_l+0x5cc>)
 801476a:	00ed      	lsls	r5, r5, #3
 801476c:	18ff      	adds	r7, r7, r3
 801476e:	4b2f      	ldr	r3, [pc, #188]	; (801482c <_strtod_l+0x5d0>)
 8014770:	0032      	movs	r2, r6
 8014772:	195d      	adds	r5, r3, r5
 8014774:	6828      	ldr	r0, [r5, #0]
 8014776:	6869      	ldr	r1, [r5, #4]
 8014778:	003b      	movs	r3, r7
 801477a:	f7ed fb5b 	bl	8001e34 <__aeabi_dmul>
 801477e:	4b25      	ldr	r3, [pc, #148]	; (8014814 <_strtod_l+0x5b8>)
 8014780:	4a2b      	ldr	r2, [pc, #172]	; (8014830 <_strtod_l+0x5d4>)
 8014782:	0006      	movs	r6, r0
 8014784:	400b      	ands	r3, r1
 8014786:	4293      	cmp	r3, r2
 8014788:	d89a      	bhi.n	80146c0 <_strtod_l+0x464>
 801478a:	4a2a      	ldr	r2, [pc, #168]	; (8014834 <_strtod_l+0x5d8>)
 801478c:	4293      	cmp	r3, r2
 801478e:	d913      	bls.n	80147b8 <_strtod_l+0x55c>
 8014790:	2601      	movs	r6, #1
 8014792:	4f29      	ldr	r7, [pc, #164]	; (8014838 <_strtod_l+0x5dc>)
 8014794:	4276      	negs	r6, r6
 8014796:	2300      	movs	r3, #0
 8014798:	9306      	str	r3, [sp, #24]
 801479a:	e07b      	b.n	8014894 <_strtod_l+0x638>
 801479c:	2201      	movs	r2, #1
 801479e:	4214      	tst	r4, r2
 80147a0:	d007      	beq.n	80147b2 <_strtod_l+0x556>
 80147a2:	4a22      	ldr	r2, [pc, #136]	; (801482c <_strtod_l+0x5d0>)
 80147a4:	00eb      	lsls	r3, r5, #3
 80147a6:	189b      	adds	r3, r3, r2
 80147a8:	681a      	ldr	r2, [r3, #0]
 80147aa:	685b      	ldr	r3, [r3, #4]
 80147ac:	f7ed fb42 	bl	8001e34 <__aeabi_dmul>
 80147b0:	2301      	movs	r3, #1
 80147b2:	3501      	adds	r5, #1
 80147b4:	1064      	asrs	r4, r4, #1
 80147b6:	e7d1      	b.n	801475c <_strtod_l+0x500>
 80147b8:	23d4      	movs	r3, #212	; 0xd4
 80147ba:	049b      	lsls	r3, r3, #18
 80147bc:	18cf      	adds	r7, r1, r3
 80147be:	e7ea      	b.n	8014796 <_strtod_l+0x53a>
 80147c0:	2c00      	cmp	r4, #0
 80147c2:	d0e8      	beq.n	8014796 <_strtod_l+0x53a>
 80147c4:	230f      	movs	r3, #15
 80147c6:	4264      	negs	r4, r4
 80147c8:	4023      	ands	r3, r4
 80147ca:	d00a      	beq.n	80147e2 <_strtod_l+0x586>
 80147cc:	4a15      	ldr	r2, [pc, #84]	; (8014824 <_strtod_l+0x5c8>)
 80147ce:	00db      	lsls	r3, r3, #3
 80147d0:	18d3      	adds	r3, r2, r3
 80147d2:	0030      	movs	r0, r6
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	685b      	ldr	r3, [r3, #4]
 80147d8:	0039      	movs	r1, r7
 80147da:	f7ec ff21 	bl	8001620 <__aeabi_ddiv>
 80147de:	0006      	movs	r6, r0
 80147e0:	000f      	movs	r7, r1
 80147e2:	1124      	asrs	r4, r4, #4
 80147e4:	d0d7      	beq.n	8014796 <_strtod_l+0x53a>
 80147e6:	2c1f      	cmp	r4, #31
 80147e8:	dd28      	ble.n	801483c <_strtod_l+0x5e0>
 80147ea:	2400      	movs	r4, #0
 80147ec:	9405      	str	r4, [sp, #20]
 80147ee:	940b      	str	r4, [sp, #44]	; 0x2c
 80147f0:	940a      	str	r4, [sp, #40]	; 0x28
 80147f2:	2322      	movs	r3, #34	; 0x22
 80147f4:	9a04      	ldr	r2, [sp, #16]
 80147f6:	2600      	movs	r6, #0
 80147f8:	6013      	str	r3, [r2, #0]
 80147fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147fc:	2700      	movs	r7, #0
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d000      	beq.n	8014804 <_strtod_l+0x5a8>
 8014802:	e76a      	b.n	80146da <_strtod_l+0x47e>
 8014804:	e56b      	b.n	80142de <_strtod_l+0x82>
 8014806:	46c0      	nop			; (mov r8, r8)
 8014808:	00004e1f 	.word	0x00004e1f
 801480c:	0801baed 	.word	0x0801baed
 8014810:	0801bc40 	.word	0x0801bc40
 8014814:	7ff00000 	.word	0x7ff00000
 8014818:	0801baf5 	.word	0x0801baf5
 801481c:	0801baac 	.word	0x0801baac
 8014820:	fff80000 	.word	0xfff80000
 8014824:	0801bc78 	.word	0x0801bc78
 8014828:	fcb00000 	.word	0xfcb00000
 801482c:	0801bc50 	.word	0x0801bc50
 8014830:	7ca00000 	.word	0x7ca00000
 8014834:	7c900000 	.word	0x7c900000
 8014838:	7fefffff 	.word	0x7fefffff
 801483c:	2310      	movs	r3, #16
 801483e:	4023      	ands	r3, r4
 8014840:	9306      	str	r3, [sp, #24]
 8014842:	d001      	beq.n	8014848 <_strtod_l+0x5ec>
 8014844:	236a      	movs	r3, #106	; 0x6a
 8014846:	9306      	str	r3, [sp, #24]
 8014848:	2300      	movs	r3, #0
 801484a:	0030      	movs	r0, r6
 801484c:	0039      	movs	r1, r7
 801484e:	001d      	movs	r5, r3
 8014850:	2c00      	cmp	r4, #0
 8014852:	dd00      	ble.n	8014856 <_strtod_l+0x5fa>
 8014854:	e10e      	b.n	8014a74 <_strtod_l+0x818>
 8014856:	2b00      	cmp	r3, #0
 8014858:	d001      	beq.n	801485e <_strtod_l+0x602>
 801485a:	0006      	movs	r6, r0
 801485c:	000f      	movs	r7, r1
 801485e:	9b06      	ldr	r3, [sp, #24]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d00f      	beq.n	8014884 <_strtod_l+0x628>
 8014864:	236b      	movs	r3, #107	; 0x6b
 8014866:	0079      	lsls	r1, r7, #1
 8014868:	0d49      	lsrs	r1, r1, #21
 801486a:	003a      	movs	r2, r7
 801486c:	1a5b      	subs	r3, r3, r1
 801486e:	2b00      	cmp	r3, #0
 8014870:	dd08      	ble.n	8014884 <_strtod_l+0x628>
 8014872:	2b1f      	cmp	r3, #31
 8014874:	dc00      	bgt.n	8014878 <_strtod_l+0x61c>
 8014876:	e112      	b.n	8014a9e <_strtod_l+0x842>
 8014878:	2600      	movs	r6, #0
 801487a:	2b34      	cmp	r3, #52	; 0x34
 801487c:	dc00      	bgt.n	8014880 <_strtod_l+0x624>
 801487e:	e107      	b.n	8014a90 <_strtod_l+0x834>
 8014880:	27dc      	movs	r7, #220	; 0xdc
 8014882:	04bf      	lsls	r7, r7, #18
 8014884:	2200      	movs	r2, #0
 8014886:	2300      	movs	r3, #0
 8014888:	0030      	movs	r0, r6
 801488a:	0039      	movs	r1, r7
 801488c:	f7eb fde6 	bl	800045c <__aeabi_dcmpeq>
 8014890:	2800      	cmp	r0, #0
 8014892:	d1aa      	bne.n	80147ea <_strtod_l+0x58e>
 8014894:	9b08      	ldr	r3, [sp, #32]
 8014896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014898:	9300      	str	r3, [sp, #0]
 801489a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801489c:	9b05      	ldr	r3, [sp, #20]
 801489e:	9804      	ldr	r0, [sp, #16]
 80148a0:	f003 f9ae 	bl	8017c00 <__s2b>
 80148a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80148a6:	2800      	cmp	r0, #0
 80148a8:	d100      	bne.n	80148ac <_strtod_l+0x650>
 80148aa:	e709      	b.n	80146c0 <_strtod_l+0x464>
 80148ac:	9b07      	ldr	r3, [sp, #28]
 80148ae:	9a07      	ldr	r2, [sp, #28]
 80148b0:	17db      	asrs	r3, r3, #31
 80148b2:	4252      	negs	r2, r2
 80148b4:	4013      	ands	r3, r2
 80148b6:	9315      	str	r3, [sp, #84]	; 0x54
 80148b8:	9b07      	ldr	r3, [sp, #28]
 80148ba:	2400      	movs	r4, #0
 80148bc:	43db      	mvns	r3, r3
 80148be:	9a07      	ldr	r2, [sp, #28]
 80148c0:	17db      	asrs	r3, r3, #31
 80148c2:	401a      	ands	r2, r3
 80148c4:	921c      	str	r2, [sp, #112]	; 0x70
 80148c6:	9405      	str	r4, [sp, #20]
 80148c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148ca:	9804      	ldr	r0, [sp, #16]
 80148cc:	6859      	ldr	r1, [r3, #4]
 80148ce:	f003 f927 	bl	8017b20 <_Balloc>
 80148d2:	900a      	str	r0, [sp, #40]	; 0x28
 80148d4:	2800      	cmp	r0, #0
 80148d6:	d100      	bne.n	80148da <_strtod_l+0x67e>
 80148d8:	e6f6      	b.n	80146c8 <_strtod_l+0x46c>
 80148da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148de:	691b      	ldr	r3, [r3, #16]
 80148e0:	310c      	adds	r1, #12
 80148e2:	1c9a      	adds	r2, r3, #2
 80148e4:	0092      	lsls	r2, r2, #2
 80148e6:	300c      	adds	r0, #12
 80148e8:	9308      	str	r3, [sp, #32]
 80148ea:	f7ff fa32 	bl	8013d52 <memcpy>
 80148ee:	ab24      	add	r3, sp, #144	; 0x90
 80148f0:	9301      	str	r3, [sp, #4]
 80148f2:	ab23      	add	r3, sp, #140	; 0x8c
 80148f4:	9300      	str	r3, [sp, #0]
 80148f6:	0032      	movs	r2, r6
 80148f8:	003b      	movs	r3, r7
 80148fa:	9804      	ldr	r0, [sp, #16]
 80148fc:	960e      	str	r6, [sp, #56]	; 0x38
 80148fe:	970f      	str	r7, [sp, #60]	; 0x3c
 8014900:	f003 fc22 	bl	8018148 <__d2b>
 8014904:	9022      	str	r0, [sp, #136]	; 0x88
 8014906:	2800      	cmp	r0, #0
 8014908:	d100      	bne.n	801490c <_strtod_l+0x6b0>
 801490a:	e6dd      	b.n	80146c8 <_strtod_l+0x46c>
 801490c:	2101      	movs	r1, #1
 801490e:	9804      	ldr	r0, [sp, #16]
 8014910:	f003 f9fd 	bl	8017d0e <__i2b>
 8014914:	9005      	str	r0, [sp, #20]
 8014916:	2800      	cmp	r0, #0
 8014918:	d100      	bne.n	801491c <_strtod_l+0x6c0>
 801491a:	e6d5      	b.n	80146c8 <_strtod_l+0x46c>
 801491c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801491e:	2b00      	cmp	r3, #0
 8014920:	da00      	bge.n	8014924 <_strtod_l+0x6c8>
 8014922:	e0c1      	b.n	8014aa8 <_strtod_l+0x84c>
 8014924:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014926:	189d      	adds	r5, r3, r2
 8014928:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801492a:	4694      	mov	ip, r2
 801492c:	9906      	ldr	r1, [sp, #24]
 801492e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014930:	1a5b      	subs	r3, r3, r1
 8014932:	2136      	movs	r1, #54	; 0x36
 8014934:	189b      	adds	r3, r3, r2
 8014936:	1a8a      	subs	r2, r1, r2
 8014938:	49b2      	ldr	r1, [pc, #712]	; (8014c04 <_strtod_l+0x9a8>)
 801493a:	3b01      	subs	r3, #1
 801493c:	2001      	movs	r0, #1
 801493e:	428b      	cmp	r3, r1
 8014940:	db00      	blt.n	8014944 <_strtod_l+0x6e8>
 8014942:	e0bd      	b.n	8014ac0 <_strtod_l+0x864>
 8014944:	1ac9      	subs	r1, r1, r3
 8014946:	1a52      	subs	r2, r2, r1
 8014948:	291f      	cmp	r1, #31
 801494a:	dd00      	ble.n	801494e <_strtod_l+0x6f2>
 801494c:	e0b1      	b.n	8014ab2 <_strtod_l+0x856>
 801494e:	4088      	lsls	r0, r1
 8014950:	2300      	movs	r3, #0
 8014952:	9014      	str	r0, [sp, #80]	; 0x50
 8014954:	9310      	str	r3, [sp, #64]	; 0x40
 8014956:	18ab      	adds	r3, r5, r2
 8014958:	9308      	str	r3, [sp, #32]
 801495a:	0013      	movs	r3, r2
 801495c:	9a06      	ldr	r2, [sp, #24]
 801495e:	4463      	add	r3, ip
 8014960:	18d3      	adds	r3, r2, r3
 8014962:	9a08      	ldr	r2, [sp, #32]
 8014964:	930c      	str	r3, [sp, #48]	; 0x30
 8014966:	002b      	movs	r3, r5
 8014968:	4295      	cmp	r5, r2
 801496a:	dd00      	ble.n	801496e <_strtod_l+0x712>
 801496c:	0013      	movs	r3, r2
 801496e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014970:	4293      	cmp	r3, r2
 8014972:	dd00      	ble.n	8014976 <_strtod_l+0x71a>
 8014974:	0013      	movs	r3, r2
 8014976:	2b00      	cmp	r3, #0
 8014978:	dd06      	ble.n	8014988 <_strtod_l+0x72c>
 801497a:	9a08      	ldr	r2, [sp, #32]
 801497c:	1aed      	subs	r5, r5, r3
 801497e:	1ad2      	subs	r2, r2, r3
 8014980:	9208      	str	r2, [sp, #32]
 8014982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014984:	1ad2      	subs	r2, r2, r3
 8014986:	920c      	str	r2, [sp, #48]	; 0x30
 8014988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801498a:	2b00      	cmp	r3, #0
 801498c:	d017      	beq.n	80149be <_strtod_l+0x762>
 801498e:	001a      	movs	r2, r3
 8014990:	9905      	ldr	r1, [sp, #20]
 8014992:	9804      	ldr	r0, [sp, #16]
 8014994:	f003 fa54 	bl	8017e40 <__pow5mult>
 8014998:	9005      	str	r0, [sp, #20]
 801499a:	2800      	cmp	r0, #0
 801499c:	d100      	bne.n	80149a0 <_strtod_l+0x744>
 801499e:	e693      	b.n	80146c8 <_strtod_l+0x46c>
 80149a0:	0001      	movs	r1, r0
 80149a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80149a4:	9804      	ldr	r0, [sp, #16]
 80149a6:	f003 f9bb 	bl	8017d20 <__multiply>
 80149aa:	9012      	str	r0, [sp, #72]	; 0x48
 80149ac:	2800      	cmp	r0, #0
 80149ae:	d100      	bne.n	80149b2 <_strtod_l+0x756>
 80149b0:	e68a      	b.n	80146c8 <_strtod_l+0x46c>
 80149b2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80149b4:	9804      	ldr	r0, [sp, #16]
 80149b6:	f003 f8db 	bl	8017b70 <_Bfree>
 80149ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80149bc:	9322      	str	r3, [sp, #136]	; 0x88
 80149be:	9b08      	ldr	r3, [sp, #32]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	dd00      	ble.n	80149c6 <_strtod_l+0x76a>
 80149c4:	e07f      	b.n	8014ac6 <_strtod_l+0x86a>
 80149c6:	9b07      	ldr	r3, [sp, #28]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	dd08      	ble.n	80149de <_strtod_l+0x782>
 80149cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80149ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80149d0:	9804      	ldr	r0, [sp, #16]
 80149d2:	f003 fa35 	bl	8017e40 <__pow5mult>
 80149d6:	900a      	str	r0, [sp, #40]	; 0x28
 80149d8:	2800      	cmp	r0, #0
 80149da:	d100      	bne.n	80149de <_strtod_l+0x782>
 80149dc:	e674      	b.n	80146c8 <_strtod_l+0x46c>
 80149de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	dd08      	ble.n	80149f6 <_strtod_l+0x79a>
 80149e4:	001a      	movs	r2, r3
 80149e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80149e8:	9804      	ldr	r0, [sp, #16]
 80149ea:	f003 fa6b 	bl	8017ec4 <__lshift>
 80149ee:	900a      	str	r0, [sp, #40]	; 0x28
 80149f0:	2800      	cmp	r0, #0
 80149f2:	d100      	bne.n	80149f6 <_strtod_l+0x79a>
 80149f4:	e668      	b.n	80146c8 <_strtod_l+0x46c>
 80149f6:	2d00      	cmp	r5, #0
 80149f8:	dd08      	ble.n	8014a0c <_strtod_l+0x7b0>
 80149fa:	002a      	movs	r2, r5
 80149fc:	9905      	ldr	r1, [sp, #20]
 80149fe:	9804      	ldr	r0, [sp, #16]
 8014a00:	f003 fa60 	bl	8017ec4 <__lshift>
 8014a04:	9005      	str	r0, [sp, #20]
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d100      	bne.n	8014a0c <_strtod_l+0x7b0>
 8014a0a:	e65d      	b.n	80146c8 <_strtod_l+0x46c>
 8014a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a0e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014a10:	9804      	ldr	r0, [sp, #16]
 8014a12:	f003 fac3 	bl	8017f9c <__mdiff>
 8014a16:	1e04      	subs	r4, r0, #0
 8014a18:	d100      	bne.n	8014a1c <_strtod_l+0x7c0>
 8014a1a:	e655      	b.n	80146c8 <_strtod_l+0x46c>
 8014a1c:	2500      	movs	r5, #0
 8014a1e:	68c3      	ldr	r3, [r0, #12]
 8014a20:	9905      	ldr	r1, [sp, #20]
 8014a22:	60c5      	str	r5, [r0, #12]
 8014a24:	9312      	str	r3, [sp, #72]	; 0x48
 8014a26:	f003 fa9f 	bl	8017f68 <__mcmp>
 8014a2a:	42a8      	cmp	r0, r5
 8014a2c:	da55      	bge.n	8014ada <_strtod_l+0x87e>
 8014a2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014a30:	42ab      	cmp	r3, r5
 8014a32:	d11b      	bne.n	8014a6c <_strtod_l+0x810>
 8014a34:	42ae      	cmp	r6, r5
 8014a36:	d119      	bne.n	8014a6c <_strtod_l+0x810>
 8014a38:	033b      	lsls	r3, r7, #12
 8014a3a:	42ab      	cmp	r3, r5
 8014a3c:	d116      	bne.n	8014a6c <_strtod_l+0x810>
 8014a3e:	22d6      	movs	r2, #214	; 0xd6
 8014a40:	4b71      	ldr	r3, [pc, #452]	; (8014c08 <_strtod_l+0x9ac>)
 8014a42:	04d2      	lsls	r2, r2, #19
 8014a44:	403b      	ands	r3, r7
 8014a46:	4293      	cmp	r3, r2
 8014a48:	d910      	bls.n	8014a6c <_strtod_l+0x810>
 8014a4a:	6963      	ldr	r3, [r4, #20]
 8014a4c:	42ab      	cmp	r3, r5
 8014a4e:	d102      	bne.n	8014a56 <_strtod_l+0x7fa>
 8014a50:	6923      	ldr	r3, [r4, #16]
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	dd0a      	ble.n	8014a6c <_strtod_l+0x810>
 8014a56:	0021      	movs	r1, r4
 8014a58:	2201      	movs	r2, #1
 8014a5a:	9804      	ldr	r0, [sp, #16]
 8014a5c:	f003 fa32 	bl	8017ec4 <__lshift>
 8014a60:	9905      	ldr	r1, [sp, #20]
 8014a62:	0004      	movs	r4, r0
 8014a64:	f003 fa80 	bl	8017f68 <__mcmp>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	dc6b      	bgt.n	8014b44 <_strtod_l+0x8e8>
 8014a6c:	9b06      	ldr	r3, [sp, #24]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d178      	bne.n	8014b64 <_strtod_l+0x908>
 8014a72:	e632      	b.n	80146da <_strtod_l+0x47e>
 8014a74:	2201      	movs	r2, #1
 8014a76:	4214      	tst	r4, r2
 8014a78:	d007      	beq.n	8014a8a <_strtod_l+0x82e>
 8014a7a:	4a64      	ldr	r2, [pc, #400]	; (8014c0c <_strtod_l+0x9b0>)
 8014a7c:	00eb      	lsls	r3, r5, #3
 8014a7e:	18d3      	adds	r3, r2, r3
 8014a80:	681a      	ldr	r2, [r3, #0]
 8014a82:	685b      	ldr	r3, [r3, #4]
 8014a84:	f7ed f9d6 	bl	8001e34 <__aeabi_dmul>
 8014a88:	2301      	movs	r3, #1
 8014a8a:	3501      	adds	r5, #1
 8014a8c:	1064      	asrs	r4, r4, #1
 8014a8e:	e6df      	b.n	8014850 <_strtod_l+0x5f4>
 8014a90:	2101      	movs	r1, #1
 8014a92:	3b20      	subs	r3, #32
 8014a94:	4249      	negs	r1, r1
 8014a96:	4099      	lsls	r1, r3
 8014a98:	400a      	ands	r2, r1
 8014a9a:	0017      	movs	r7, r2
 8014a9c:	e6f2      	b.n	8014884 <_strtod_l+0x628>
 8014a9e:	2201      	movs	r2, #1
 8014aa0:	4252      	negs	r2, r2
 8014aa2:	409a      	lsls	r2, r3
 8014aa4:	4016      	ands	r6, r2
 8014aa6:	e6ed      	b.n	8014884 <_strtod_l+0x628>
 8014aa8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014aaa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014aac:	1ad2      	subs	r2, r2, r3
 8014aae:	4694      	mov	ip, r2
 8014ab0:	e73c      	b.n	801492c <_strtod_l+0x6d0>
 8014ab2:	4957      	ldr	r1, [pc, #348]	; (8014c10 <_strtod_l+0x9b4>)
 8014ab4:	1acb      	subs	r3, r1, r3
 8014ab6:	0001      	movs	r1, r0
 8014ab8:	4099      	lsls	r1, r3
 8014aba:	9110      	str	r1, [sp, #64]	; 0x40
 8014abc:	9014      	str	r0, [sp, #80]	; 0x50
 8014abe:	e74a      	b.n	8014956 <_strtod_l+0x6fa>
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	9310      	str	r3, [sp, #64]	; 0x40
 8014ac4:	e7fa      	b.n	8014abc <_strtod_l+0x860>
 8014ac6:	9a08      	ldr	r2, [sp, #32]
 8014ac8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014aca:	9804      	ldr	r0, [sp, #16]
 8014acc:	f003 f9fa 	bl	8017ec4 <__lshift>
 8014ad0:	9022      	str	r0, [sp, #136]	; 0x88
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d000      	beq.n	8014ad8 <_strtod_l+0x87c>
 8014ad6:	e776      	b.n	80149c6 <_strtod_l+0x76a>
 8014ad8:	e5f6      	b.n	80146c8 <_strtod_l+0x46c>
 8014ada:	970c      	str	r7, [sp, #48]	; 0x30
 8014adc:	2800      	cmp	r0, #0
 8014ade:	d000      	beq.n	8014ae2 <_strtod_l+0x886>
 8014ae0:	e0a0      	b.n	8014c24 <_strtod_l+0x9c8>
 8014ae2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ae4:	033b      	lsls	r3, r7, #12
 8014ae6:	0b1b      	lsrs	r3, r3, #12
 8014ae8:	2a00      	cmp	r2, #0
 8014aea:	d027      	beq.n	8014b3c <_strtod_l+0x8e0>
 8014aec:	4a49      	ldr	r2, [pc, #292]	; (8014c14 <_strtod_l+0x9b8>)
 8014aee:	4293      	cmp	r3, r2
 8014af0:	d157      	bne.n	8014ba2 <_strtod_l+0x946>
 8014af2:	2201      	movs	r2, #1
 8014af4:	9b06      	ldr	r3, [sp, #24]
 8014af6:	4252      	negs	r2, r2
 8014af8:	0031      	movs	r1, r6
 8014afa:	0010      	movs	r0, r2
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d00b      	beq.n	8014b18 <_strtod_l+0x8bc>
 8014b00:	25d4      	movs	r5, #212	; 0xd4
 8014b02:	4b41      	ldr	r3, [pc, #260]	; (8014c08 <_strtod_l+0x9ac>)
 8014b04:	04ed      	lsls	r5, r5, #19
 8014b06:	403b      	ands	r3, r7
 8014b08:	0010      	movs	r0, r2
 8014b0a:	42ab      	cmp	r3, r5
 8014b0c:	d804      	bhi.n	8014b18 <_strtod_l+0x8bc>
 8014b0e:	306c      	adds	r0, #108	; 0x6c
 8014b10:	0d1b      	lsrs	r3, r3, #20
 8014b12:	1ac3      	subs	r3, r0, r3
 8014b14:	409a      	lsls	r2, r3
 8014b16:	0010      	movs	r0, r2
 8014b18:	4281      	cmp	r1, r0
 8014b1a:	d142      	bne.n	8014ba2 <_strtod_l+0x946>
 8014b1c:	4b3e      	ldr	r3, [pc, #248]	; (8014c18 <_strtod_l+0x9bc>)
 8014b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d102      	bne.n	8014b2a <_strtod_l+0x8ce>
 8014b24:	1c4b      	adds	r3, r1, #1
 8014b26:	d100      	bne.n	8014b2a <_strtod_l+0x8ce>
 8014b28:	e5ce      	b.n	80146c8 <_strtod_l+0x46c>
 8014b2a:	4b37      	ldr	r3, [pc, #220]	; (8014c08 <_strtod_l+0x9ac>)
 8014b2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b2e:	2600      	movs	r6, #0
 8014b30:	401a      	ands	r2, r3
 8014b32:	0013      	movs	r3, r2
 8014b34:	2280      	movs	r2, #128	; 0x80
 8014b36:	0352      	lsls	r2, r2, #13
 8014b38:	189f      	adds	r7, r3, r2
 8014b3a:	e797      	b.n	8014a6c <_strtod_l+0x810>
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d130      	bne.n	8014ba2 <_strtod_l+0x946>
 8014b40:	2e00      	cmp	r6, #0
 8014b42:	d12e      	bne.n	8014ba2 <_strtod_l+0x946>
 8014b44:	9906      	ldr	r1, [sp, #24]
 8014b46:	003b      	movs	r3, r7
 8014b48:	4a2f      	ldr	r2, [pc, #188]	; (8014c08 <_strtod_l+0x9ac>)
 8014b4a:	2900      	cmp	r1, #0
 8014b4c:	d020      	beq.n	8014b90 <_strtod_l+0x934>
 8014b4e:	0011      	movs	r1, r2
 8014b50:	20d6      	movs	r0, #214	; 0xd6
 8014b52:	4039      	ands	r1, r7
 8014b54:	04c0      	lsls	r0, r0, #19
 8014b56:	4281      	cmp	r1, r0
 8014b58:	dc1a      	bgt.n	8014b90 <_strtod_l+0x934>
 8014b5a:	23dc      	movs	r3, #220	; 0xdc
 8014b5c:	049b      	lsls	r3, r3, #18
 8014b5e:	4299      	cmp	r1, r3
 8014b60:	dc00      	bgt.n	8014b64 <_strtod_l+0x908>
 8014b62:	e646      	b.n	80147f2 <_strtod_l+0x596>
 8014b64:	4b2d      	ldr	r3, [pc, #180]	; (8014c1c <_strtod_l+0x9c0>)
 8014b66:	0030      	movs	r0, r6
 8014b68:	931b      	str	r3, [sp, #108]	; 0x6c
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8014b6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014b70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014b72:	0039      	movs	r1, r7
 8014b74:	f7ed f95e 	bl	8001e34 <__aeabi_dmul>
 8014b78:	0006      	movs	r6, r0
 8014b7a:	000f      	movs	r7, r1
 8014b7c:	1e0b      	subs	r3, r1, #0
 8014b7e:	d000      	beq.n	8014b82 <_strtod_l+0x926>
 8014b80:	e5ab      	b.n	80146da <_strtod_l+0x47e>
 8014b82:	2800      	cmp	r0, #0
 8014b84:	d000      	beq.n	8014b88 <_strtod_l+0x92c>
 8014b86:	e5a8      	b.n	80146da <_strtod_l+0x47e>
 8014b88:	9a04      	ldr	r2, [sp, #16]
 8014b8a:	3322      	adds	r3, #34	; 0x22
 8014b8c:	6013      	str	r3, [r2, #0]
 8014b8e:	e5a4      	b.n	80146da <_strtod_l+0x47e>
 8014b90:	2601      	movs	r6, #1
 8014b92:	4013      	ands	r3, r2
 8014b94:	4a22      	ldr	r2, [pc, #136]	; (8014c20 <_strtod_l+0x9c4>)
 8014b96:	4276      	negs	r6, r6
 8014b98:	189b      	adds	r3, r3, r2
 8014b9a:	4a1e      	ldr	r2, [pc, #120]	; (8014c14 <_strtod_l+0x9b8>)
 8014b9c:	431a      	orrs	r2, r3
 8014b9e:	0017      	movs	r7, r2
 8014ba0:	e764      	b.n	8014a6c <_strtod_l+0x810>
 8014ba2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d015      	beq.n	8014bd4 <_strtod_l+0x978>
 8014ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014baa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014bac:	4213      	tst	r3, r2
 8014bae:	d100      	bne.n	8014bb2 <_strtod_l+0x956>
 8014bb0:	e75c      	b.n	8014a6c <_strtod_l+0x810>
 8014bb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014bb4:	9a06      	ldr	r2, [sp, #24]
 8014bb6:	0030      	movs	r0, r6
 8014bb8:	0039      	movs	r1, r7
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d00f      	beq.n	8014bde <_strtod_l+0x982>
 8014bbe:	f7ff fb35 	bl	801422c <sulp>
 8014bc2:	0002      	movs	r2, r0
 8014bc4:	000b      	movs	r3, r1
 8014bc6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014bc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014bca:	f7ec fa0d 	bl	8000fe8 <__aeabi_dadd>
 8014bce:	0006      	movs	r6, r0
 8014bd0:	000f      	movs	r7, r1
 8014bd2:	e74b      	b.n	8014a6c <_strtod_l+0x810>
 8014bd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014bd6:	4233      	tst	r3, r6
 8014bd8:	d100      	bne.n	8014bdc <_strtod_l+0x980>
 8014bda:	e747      	b.n	8014a6c <_strtod_l+0x810>
 8014bdc:	e7e9      	b.n	8014bb2 <_strtod_l+0x956>
 8014bde:	f7ff fb25 	bl	801422c <sulp>
 8014be2:	0002      	movs	r2, r0
 8014be4:	000b      	movs	r3, r1
 8014be6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014be8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014bea:	f7ed fb95 	bl	8002318 <__aeabi_dsub>
 8014bee:	2200      	movs	r2, #0
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	0006      	movs	r6, r0
 8014bf4:	000f      	movs	r7, r1
 8014bf6:	f7eb fc31 	bl	800045c <__aeabi_dcmpeq>
 8014bfa:	2800      	cmp	r0, #0
 8014bfc:	d000      	beq.n	8014c00 <_strtod_l+0x9a4>
 8014bfe:	e5f8      	b.n	80147f2 <_strtod_l+0x596>
 8014c00:	e734      	b.n	8014a6c <_strtod_l+0x810>
 8014c02:	46c0      	nop			; (mov r8, r8)
 8014c04:	fffffc02 	.word	0xfffffc02
 8014c08:	7ff00000 	.word	0x7ff00000
 8014c0c:	0801bac0 	.word	0x0801bac0
 8014c10:	fffffbe2 	.word	0xfffffbe2
 8014c14:	000fffff 	.word	0x000fffff
 8014c18:	7fefffff 	.word	0x7fefffff
 8014c1c:	39500000 	.word	0x39500000
 8014c20:	fff00000 	.word	0xfff00000
 8014c24:	9905      	ldr	r1, [sp, #20]
 8014c26:	0020      	movs	r0, r4
 8014c28:	f003 fae2 	bl	80181f0 <__ratio>
 8014c2c:	2380      	movs	r3, #128	; 0x80
 8014c2e:	2200      	movs	r2, #0
 8014c30:	05db      	lsls	r3, r3, #23
 8014c32:	9008      	str	r0, [sp, #32]
 8014c34:	9109      	str	r1, [sp, #36]	; 0x24
 8014c36:	f7eb fc21 	bl	800047c <__aeabi_dcmple>
 8014c3a:	2800      	cmp	r0, #0
 8014c3c:	d100      	bne.n	8014c40 <_strtod_l+0x9e4>
 8014c3e:	e07f      	b.n	8014d40 <_strtod_l+0xae4>
 8014c40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d04b      	beq.n	8014cde <_strtod_l+0xa82>
 8014c46:	2200      	movs	r2, #0
 8014c48:	4b8a      	ldr	r3, [pc, #552]	; (8014e74 <_strtod_l+0xc18>)
 8014c4a:	9210      	str	r2, [sp, #64]	; 0x40
 8014c4c:	9311      	str	r3, [sp, #68]	; 0x44
 8014c4e:	4b89      	ldr	r3, [pc, #548]	; (8014e74 <_strtod_l+0xc18>)
 8014c50:	9308      	str	r3, [sp, #32]
 8014c52:	4a89      	ldr	r2, [pc, #548]	; (8014e78 <_strtod_l+0xc1c>)
 8014c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c56:	4013      	ands	r3, r2
 8014c58:	9314      	str	r3, [sp, #80]	; 0x50
 8014c5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c5c:	4b87      	ldr	r3, [pc, #540]	; (8014e7c <_strtod_l+0xc20>)
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d000      	beq.n	8014c64 <_strtod_l+0xa08>
 8014c62:	e0ba      	b.n	8014dda <_strtod_l+0xb7e>
 8014c64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c68:	921a      	str	r2, [sp, #104]	; 0x68
 8014c6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8014c6c:	4a84      	ldr	r2, [pc, #528]	; (8014e80 <_strtod_l+0xc24>)
 8014c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c70:	4694      	mov	ip, r2
 8014c72:	4463      	add	r3, ip
 8014c74:	001f      	movs	r7, r3
 8014c76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c7a:	0030      	movs	r0, r6
 8014c7c:	0039      	movs	r1, r7
 8014c7e:	920c      	str	r2, [sp, #48]	; 0x30
 8014c80:	930d      	str	r3, [sp, #52]	; 0x34
 8014c82:	f003 f9ef 	bl	8018064 <__ulp>
 8014c86:	0002      	movs	r2, r0
 8014c88:	000b      	movs	r3, r1
 8014c8a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014c8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c8e:	f7ed f8d1 	bl	8001e34 <__aeabi_dmul>
 8014c92:	0032      	movs	r2, r6
 8014c94:	003b      	movs	r3, r7
 8014c96:	f7ec f9a7 	bl	8000fe8 <__aeabi_dadd>
 8014c9a:	4a77      	ldr	r2, [pc, #476]	; (8014e78 <_strtod_l+0xc1c>)
 8014c9c:	4b79      	ldr	r3, [pc, #484]	; (8014e84 <_strtod_l+0xc28>)
 8014c9e:	0006      	movs	r6, r0
 8014ca0:	400a      	ands	r2, r1
 8014ca2:	429a      	cmp	r2, r3
 8014ca4:	d964      	bls.n	8014d70 <_strtod_l+0xb14>
 8014ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ca8:	4a77      	ldr	r2, [pc, #476]	; (8014e88 <_strtod_l+0xc2c>)
 8014caa:	4293      	cmp	r3, r2
 8014cac:	d103      	bne.n	8014cb6 <_strtod_l+0xa5a>
 8014cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	d100      	bne.n	8014cb6 <_strtod_l+0xa5a>
 8014cb4:	e508      	b.n	80146c8 <_strtod_l+0x46c>
 8014cb6:	2601      	movs	r6, #1
 8014cb8:	4f73      	ldr	r7, [pc, #460]	; (8014e88 <_strtod_l+0xc2c>)
 8014cba:	4276      	negs	r6, r6
 8014cbc:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014cbe:	9804      	ldr	r0, [sp, #16]
 8014cc0:	f002 ff56 	bl	8017b70 <_Bfree>
 8014cc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014cc6:	9804      	ldr	r0, [sp, #16]
 8014cc8:	f002 ff52 	bl	8017b70 <_Bfree>
 8014ccc:	9905      	ldr	r1, [sp, #20]
 8014cce:	9804      	ldr	r0, [sp, #16]
 8014cd0:	f002 ff4e 	bl	8017b70 <_Bfree>
 8014cd4:	0021      	movs	r1, r4
 8014cd6:	9804      	ldr	r0, [sp, #16]
 8014cd8:	f002 ff4a 	bl	8017b70 <_Bfree>
 8014cdc:	e5f4      	b.n	80148c8 <_strtod_l+0x66c>
 8014cde:	2e00      	cmp	r6, #0
 8014ce0:	d11e      	bne.n	8014d20 <_strtod_l+0xac4>
 8014ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ce4:	031b      	lsls	r3, r3, #12
 8014ce6:	d121      	bne.n	8014d2c <_strtod_l+0xad0>
 8014ce8:	9808      	ldr	r0, [sp, #32]
 8014cea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014cec:	2200      	movs	r2, #0
 8014cee:	4b61      	ldr	r3, [pc, #388]	; (8014e74 <_strtod_l+0xc18>)
 8014cf0:	f7eb fbba 	bl	8000468 <__aeabi_dcmplt>
 8014cf4:	2800      	cmp	r0, #0
 8014cf6:	d11f      	bne.n	8014d38 <_strtod_l+0xadc>
 8014cf8:	9808      	ldr	r0, [sp, #32]
 8014cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	4b63      	ldr	r3, [pc, #396]	; (8014e8c <_strtod_l+0xc30>)
 8014d00:	f7ed f898 	bl	8001e34 <__aeabi_dmul>
 8014d04:	0005      	movs	r5, r0
 8014d06:	9108      	str	r1, [sp, #32]
 8014d08:	2280      	movs	r2, #128	; 0x80
 8014d0a:	0612      	lsls	r2, r2, #24
 8014d0c:	4694      	mov	ip, r2
 8014d0e:	9b08      	ldr	r3, [sp, #32]
 8014d10:	951e      	str	r5, [sp, #120]	; 0x78
 8014d12:	4463      	add	r3, ip
 8014d14:	931f      	str	r3, [sp, #124]	; 0x7c
 8014d16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014d18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014d1a:	9210      	str	r2, [sp, #64]	; 0x40
 8014d1c:	9311      	str	r3, [sp, #68]	; 0x44
 8014d1e:	e798      	b.n	8014c52 <_strtod_l+0x9f6>
 8014d20:	2e01      	cmp	r6, #1
 8014d22:	d103      	bne.n	8014d2c <_strtod_l+0xad0>
 8014d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d100      	bne.n	8014d2c <_strtod_l+0xad0>
 8014d2a:	e562      	b.n	80147f2 <_strtod_l+0x596>
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	4b58      	ldr	r3, [pc, #352]	; (8014e90 <_strtod_l+0xc34>)
 8014d30:	2500      	movs	r5, #0
 8014d32:	9210      	str	r2, [sp, #64]	; 0x40
 8014d34:	9311      	str	r3, [sp, #68]	; 0x44
 8014d36:	e78a      	b.n	8014c4e <_strtod_l+0x9f2>
 8014d38:	4b54      	ldr	r3, [pc, #336]	; (8014e8c <_strtod_l+0xc30>)
 8014d3a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014d3c:	9308      	str	r3, [sp, #32]
 8014d3e:	e7e3      	b.n	8014d08 <_strtod_l+0xaac>
 8014d40:	4b52      	ldr	r3, [pc, #328]	; (8014e8c <_strtod_l+0xc30>)
 8014d42:	9808      	ldr	r0, [sp, #32]
 8014d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d46:	2200      	movs	r2, #0
 8014d48:	f7ed f874 	bl	8001e34 <__aeabi_dmul>
 8014d4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d4e:	0005      	movs	r5, r0
 8014d50:	9108      	str	r1, [sp, #32]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d107      	bne.n	8014d66 <_strtod_l+0xb0a>
 8014d56:	2380      	movs	r3, #128	; 0x80
 8014d58:	061b      	lsls	r3, r3, #24
 8014d5a:	18cb      	adds	r3, r1, r3
 8014d5c:	9016      	str	r0, [sp, #88]	; 0x58
 8014d5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014d60:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014d62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d64:	e7d9      	b.n	8014d1a <_strtod_l+0xabe>
 8014d66:	0002      	movs	r2, r0
 8014d68:	9b08      	ldr	r3, [sp, #32]
 8014d6a:	9216      	str	r2, [sp, #88]	; 0x58
 8014d6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8014d6e:	e7f7      	b.n	8014d60 <_strtod_l+0xb04>
 8014d70:	23d4      	movs	r3, #212	; 0xd4
 8014d72:	049b      	lsls	r3, r3, #18
 8014d74:	18cf      	adds	r7, r1, r3
 8014d76:	9b06      	ldr	r3, [sp, #24]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d19f      	bne.n	8014cbc <_strtod_l+0xa60>
 8014d7c:	4b3e      	ldr	r3, [pc, #248]	; (8014e78 <_strtod_l+0xc1c>)
 8014d7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014d80:	970c      	str	r7, [sp, #48]	; 0x30
 8014d82:	403b      	ands	r3, r7
 8014d84:	429a      	cmp	r2, r3
 8014d86:	d199      	bne.n	8014cbc <_strtod_l+0xa60>
 8014d88:	9908      	ldr	r1, [sp, #32]
 8014d8a:	0028      	movs	r0, r5
 8014d8c:	f7ed fe28 	bl	80029e0 <__aeabi_d2iz>
 8014d90:	f7ed fe5c 	bl	8002a4c <__aeabi_i2d>
 8014d94:	000b      	movs	r3, r1
 8014d96:	0002      	movs	r2, r0
 8014d98:	9908      	ldr	r1, [sp, #32]
 8014d9a:	0028      	movs	r0, r5
 8014d9c:	f7ed fabc 	bl	8002318 <__aeabi_dsub>
 8014da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014da2:	9008      	str	r0, [sp, #32]
 8014da4:	9109      	str	r1, [sp, #36]	; 0x24
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d104      	bne.n	8014db4 <_strtod_l+0xb58>
 8014daa:	2e00      	cmp	r6, #0
 8014dac:	d102      	bne.n	8014db4 <_strtod_l+0xb58>
 8014dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014db0:	031b      	lsls	r3, r3, #12
 8014db2:	d058      	beq.n	8014e66 <_strtod_l+0xc0a>
 8014db4:	9808      	ldr	r0, [sp, #32]
 8014db6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014db8:	4a36      	ldr	r2, [pc, #216]	; (8014e94 <_strtod_l+0xc38>)
 8014dba:	4b37      	ldr	r3, [pc, #220]	; (8014e98 <_strtod_l+0xc3c>)
 8014dbc:	f7eb fb54 	bl	8000468 <__aeabi_dcmplt>
 8014dc0:	2800      	cmp	r0, #0
 8014dc2:	d000      	beq.n	8014dc6 <_strtod_l+0xb6a>
 8014dc4:	e489      	b.n	80146da <_strtod_l+0x47e>
 8014dc6:	9808      	ldr	r0, [sp, #32]
 8014dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dca:	4a34      	ldr	r2, [pc, #208]	; (8014e9c <_strtod_l+0xc40>)
 8014dcc:	4b2f      	ldr	r3, [pc, #188]	; (8014e8c <_strtod_l+0xc30>)
 8014dce:	f7eb fb5f 	bl	8000490 <__aeabi_dcmpgt>
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	d100      	bne.n	8014dd8 <_strtod_l+0xb7c>
 8014dd6:	e771      	b.n	8014cbc <_strtod_l+0xa60>
 8014dd8:	e47f      	b.n	80146da <_strtod_l+0x47e>
 8014dda:	9b06      	ldr	r3, [sp, #24]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d02a      	beq.n	8014e36 <_strtod_l+0xbda>
 8014de0:	23d4      	movs	r3, #212	; 0xd4
 8014de2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014de4:	04db      	lsls	r3, r3, #19
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d825      	bhi.n	8014e36 <_strtod_l+0xbda>
 8014dea:	4a2d      	ldr	r2, [pc, #180]	; (8014ea0 <_strtod_l+0xc44>)
 8014dec:	4b2d      	ldr	r3, [pc, #180]	; (8014ea4 <_strtod_l+0xc48>)
 8014dee:	0028      	movs	r0, r5
 8014df0:	9908      	ldr	r1, [sp, #32]
 8014df2:	f7eb fb43 	bl	800047c <__aeabi_dcmple>
 8014df6:	2800      	cmp	r0, #0
 8014df8:	d016      	beq.n	8014e28 <_strtod_l+0xbcc>
 8014dfa:	0028      	movs	r0, r5
 8014dfc:	9908      	ldr	r1, [sp, #32]
 8014dfe:	f7eb fbf7 	bl	80005f0 <__aeabi_d2uiz>
 8014e02:	2800      	cmp	r0, #0
 8014e04:	d100      	bne.n	8014e08 <_strtod_l+0xbac>
 8014e06:	3001      	adds	r0, #1
 8014e08:	f7ed fe5a 	bl	8002ac0 <__aeabi_ui2d>
 8014e0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e0e:	0005      	movs	r5, r0
 8014e10:	9108      	str	r1, [sp, #32]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d122      	bne.n	8014e5c <_strtod_l+0xc00>
 8014e16:	2380      	movs	r3, #128	; 0x80
 8014e18:	061b      	lsls	r3, r3, #24
 8014e1a:	18cb      	adds	r3, r1, r3
 8014e1c:	9018      	str	r0, [sp, #96]	; 0x60
 8014e1e:	9319      	str	r3, [sp, #100]	; 0x64
 8014e20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014e22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e24:	9210      	str	r2, [sp, #64]	; 0x40
 8014e26:	9311      	str	r3, [sp, #68]	; 0x44
 8014e28:	22d6      	movs	r2, #214	; 0xd6
 8014e2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e2c:	04d2      	lsls	r2, r2, #19
 8014e2e:	189b      	adds	r3, r3, r2
 8014e30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e32:	1a9b      	subs	r3, r3, r2
 8014e34:	9311      	str	r3, [sp, #68]	; 0x44
 8014e36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014e38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014e3a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014e3c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014e3e:	f003 f911 	bl	8018064 <__ulp>
 8014e42:	0002      	movs	r2, r0
 8014e44:	000b      	movs	r3, r1
 8014e46:	0030      	movs	r0, r6
 8014e48:	0039      	movs	r1, r7
 8014e4a:	f7ec fff3 	bl	8001e34 <__aeabi_dmul>
 8014e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e52:	f7ec f8c9 	bl	8000fe8 <__aeabi_dadd>
 8014e56:	0006      	movs	r6, r0
 8014e58:	000f      	movs	r7, r1
 8014e5a:	e78c      	b.n	8014d76 <_strtod_l+0xb1a>
 8014e5c:	0002      	movs	r2, r0
 8014e5e:	9b08      	ldr	r3, [sp, #32]
 8014e60:	9218      	str	r2, [sp, #96]	; 0x60
 8014e62:	9319      	str	r3, [sp, #100]	; 0x64
 8014e64:	e7dc      	b.n	8014e20 <_strtod_l+0xbc4>
 8014e66:	4a0b      	ldr	r2, [pc, #44]	; (8014e94 <_strtod_l+0xc38>)
 8014e68:	4b0f      	ldr	r3, [pc, #60]	; (8014ea8 <_strtod_l+0xc4c>)
 8014e6a:	9808      	ldr	r0, [sp, #32]
 8014e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e6e:	f7eb fafb 	bl	8000468 <__aeabi_dcmplt>
 8014e72:	e7ae      	b.n	8014dd2 <_strtod_l+0xb76>
 8014e74:	3ff00000 	.word	0x3ff00000
 8014e78:	7ff00000 	.word	0x7ff00000
 8014e7c:	7fe00000 	.word	0x7fe00000
 8014e80:	fcb00000 	.word	0xfcb00000
 8014e84:	7c9fffff 	.word	0x7c9fffff
 8014e88:	7fefffff 	.word	0x7fefffff
 8014e8c:	3fe00000 	.word	0x3fe00000
 8014e90:	bff00000 	.word	0xbff00000
 8014e94:	94a03595 	.word	0x94a03595
 8014e98:	3fdfffff 	.word	0x3fdfffff
 8014e9c:	35afe535 	.word	0x35afe535
 8014ea0:	ffc00000 	.word	0xffc00000
 8014ea4:	41dfffff 	.word	0x41dfffff
 8014ea8:	3fcfffff 	.word	0x3fcfffff

08014eac <strtod>:
 8014eac:	4b06      	ldr	r3, [pc, #24]	; (8014ec8 <strtod+0x1c>)
 8014eae:	b510      	push	{r4, lr}
 8014eb0:	0004      	movs	r4, r0
 8014eb2:	6818      	ldr	r0, [r3, #0]
 8014eb4:	000a      	movs	r2, r1
 8014eb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d100      	bne.n	8014ebe <strtod+0x12>
 8014ebc:	4b03      	ldr	r3, [pc, #12]	; (8014ecc <strtod+0x20>)
 8014ebe:	0021      	movs	r1, r4
 8014ec0:	f7ff f9cc 	bl	801425c <_strtod_l>
 8014ec4:	bd10      	pop	{r4, pc}
 8014ec6:	46c0      	nop			; (mov r8, r8)
 8014ec8:	200000a8 	.word	0x200000a8
 8014ecc:	200004d8 	.word	0x200004d8

08014ed0 <strtok>:
 8014ed0:	4b03      	ldr	r3, [pc, #12]	; (8014ee0 <strtok+0x10>)
 8014ed2:	b510      	push	{r4, lr}
 8014ed4:	681a      	ldr	r2, [r3, #0]
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	325c      	adds	r2, #92	; 0x5c
 8014eda:	f000 f803 	bl	8014ee4 <__strtok_r>
 8014ede:	bd10      	pop	{r4, pc}
 8014ee0:	200000a8 	.word	0x200000a8

08014ee4 <__strtok_r>:
 8014ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	d104      	bne.n	8014ef4 <__strtok_r+0x10>
 8014eea:	6810      	ldr	r0, [r2, #0]
 8014eec:	2800      	cmp	r0, #0
 8014eee:	d101      	bne.n	8014ef4 <__strtok_r+0x10>
 8014ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ef2:	0020      	movs	r0, r4
 8014ef4:	000e      	movs	r6, r1
 8014ef6:	7805      	ldrb	r5, [r0, #0]
 8014ef8:	1c44      	adds	r4, r0, #1
 8014efa:	7837      	ldrb	r7, [r6, #0]
 8014efc:	2f00      	cmp	r7, #0
 8014efe:	d104      	bne.n	8014f0a <__strtok_r+0x26>
 8014f00:	2d00      	cmp	r5, #0
 8014f02:	d110      	bne.n	8014f26 <__strtok_r+0x42>
 8014f04:	6015      	str	r5, [r2, #0]
 8014f06:	0028      	movs	r0, r5
 8014f08:	e7f2      	b.n	8014ef0 <__strtok_r+0xc>
 8014f0a:	3601      	adds	r6, #1
 8014f0c:	42bd      	cmp	r5, r7
 8014f0e:	d1f4      	bne.n	8014efa <__strtok_r+0x16>
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d1ee      	bne.n	8014ef2 <__strtok_r+0xe>
 8014f14:	6014      	str	r4, [r2, #0]
 8014f16:	7003      	strb	r3, [r0, #0]
 8014f18:	e7ea      	b.n	8014ef0 <__strtok_r+0xc>
 8014f1a:	0033      	movs	r3, r6
 8014f1c:	e00d      	b.n	8014f3a <__strtok_r+0x56>
 8014f1e:	3501      	adds	r5, #1
 8014f20:	2f00      	cmp	r7, #0
 8014f22:	d103      	bne.n	8014f2c <__strtok_r+0x48>
 8014f24:	001c      	movs	r4, r3
 8014f26:	000d      	movs	r5, r1
 8014f28:	7826      	ldrb	r6, [r4, #0]
 8014f2a:	1c63      	adds	r3, r4, #1
 8014f2c:	782f      	ldrb	r7, [r5, #0]
 8014f2e:	42be      	cmp	r6, r7
 8014f30:	d1f5      	bne.n	8014f1e <__strtok_r+0x3a>
 8014f32:	2e00      	cmp	r6, #0
 8014f34:	d0f1      	beq.n	8014f1a <__strtok_r+0x36>
 8014f36:	2100      	movs	r1, #0
 8014f38:	7021      	strb	r1, [r4, #0]
 8014f3a:	6013      	str	r3, [r2, #0]
 8014f3c:	e7d8      	b.n	8014ef0 <__strtok_r+0xc>
	...

08014f40 <_strtol_l.isra.0>:
 8014f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f42:	001f      	movs	r7, r3
 8014f44:	000e      	movs	r6, r1
 8014f46:	b087      	sub	sp, #28
 8014f48:	9005      	str	r0, [sp, #20]
 8014f4a:	9101      	str	r1, [sp, #4]
 8014f4c:	9202      	str	r2, [sp, #8]
 8014f4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014f50:	7834      	ldrb	r4, [r6, #0]
 8014f52:	f7fe fc9f 	bl	8013894 <__locale_ctype_ptr_l>
 8014f56:	2208      	movs	r2, #8
 8014f58:	1900      	adds	r0, r0, r4
 8014f5a:	7843      	ldrb	r3, [r0, #1]
 8014f5c:	1c75      	adds	r5, r6, #1
 8014f5e:	4013      	ands	r3, r2
 8014f60:	d136      	bne.n	8014fd0 <_strtol_l.isra.0+0x90>
 8014f62:	2c2d      	cmp	r4, #45	; 0x2d
 8014f64:	d136      	bne.n	8014fd4 <_strtol_l.isra.0+0x94>
 8014f66:	1cb5      	adds	r5, r6, #2
 8014f68:	7874      	ldrb	r4, [r6, #1]
 8014f6a:	2601      	movs	r6, #1
 8014f6c:	2f00      	cmp	r7, #0
 8014f6e:	d062      	beq.n	8015036 <_strtol_l.isra.0+0xf6>
 8014f70:	2f10      	cmp	r7, #16
 8014f72:	d109      	bne.n	8014f88 <_strtol_l.isra.0+0x48>
 8014f74:	2c30      	cmp	r4, #48	; 0x30
 8014f76:	d107      	bne.n	8014f88 <_strtol_l.isra.0+0x48>
 8014f78:	2220      	movs	r2, #32
 8014f7a:	782b      	ldrb	r3, [r5, #0]
 8014f7c:	4393      	bics	r3, r2
 8014f7e:	2b58      	cmp	r3, #88	; 0x58
 8014f80:	d154      	bne.n	801502c <_strtol_l.isra.0+0xec>
 8014f82:	2710      	movs	r7, #16
 8014f84:	786c      	ldrb	r4, [r5, #1]
 8014f86:	3502      	adds	r5, #2
 8014f88:	4b2d      	ldr	r3, [pc, #180]	; (8015040 <_strtol_l.isra.0+0x100>)
 8014f8a:	0039      	movs	r1, r7
 8014f8c:	18f3      	adds	r3, r6, r3
 8014f8e:	0018      	movs	r0, r3
 8014f90:	9303      	str	r3, [sp, #12]
 8014f92:	f7eb f963 	bl	800025c <__aeabi_uidivmod>
 8014f96:	9104      	str	r1, [sp, #16]
 8014f98:	2101      	movs	r1, #1
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	4249      	negs	r1, r1
 8014f9e:	0002      	movs	r2, r0
 8014fa0:	468c      	mov	ip, r1
 8014fa2:	0018      	movs	r0, r3
 8014fa4:	0021      	movs	r1, r4
 8014fa6:	3930      	subs	r1, #48	; 0x30
 8014fa8:	2909      	cmp	r1, #9
 8014faa:	d81a      	bhi.n	8014fe2 <_strtol_l.isra.0+0xa2>
 8014fac:	000c      	movs	r4, r1
 8014fae:	42a7      	cmp	r7, r4
 8014fb0:	dd23      	ble.n	8014ffa <_strtol_l.isra.0+0xba>
 8014fb2:	1c59      	adds	r1, r3, #1
 8014fb4:	d009      	beq.n	8014fca <_strtol_l.isra.0+0x8a>
 8014fb6:	4663      	mov	r3, ip
 8014fb8:	4282      	cmp	r2, r0
 8014fba:	d306      	bcc.n	8014fca <_strtol_l.isra.0+0x8a>
 8014fbc:	d102      	bne.n	8014fc4 <_strtol_l.isra.0+0x84>
 8014fbe:	9904      	ldr	r1, [sp, #16]
 8014fc0:	42a1      	cmp	r1, r4
 8014fc2:	db02      	blt.n	8014fca <_strtol_l.isra.0+0x8a>
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	4378      	muls	r0, r7
 8014fc8:	1820      	adds	r0, r4, r0
 8014fca:	782c      	ldrb	r4, [r5, #0]
 8014fcc:	3501      	adds	r5, #1
 8014fce:	e7e9      	b.n	8014fa4 <_strtol_l.isra.0+0x64>
 8014fd0:	002e      	movs	r6, r5
 8014fd2:	e7bc      	b.n	8014f4e <_strtol_l.isra.0+0xe>
 8014fd4:	2c2b      	cmp	r4, #43	; 0x2b
 8014fd6:	d001      	beq.n	8014fdc <_strtol_l.isra.0+0x9c>
 8014fd8:	001e      	movs	r6, r3
 8014fda:	e7c7      	b.n	8014f6c <_strtol_l.isra.0+0x2c>
 8014fdc:	1cb5      	adds	r5, r6, #2
 8014fde:	7874      	ldrb	r4, [r6, #1]
 8014fe0:	e7fa      	b.n	8014fd8 <_strtol_l.isra.0+0x98>
 8014fe2:	0021      	movs	r1, r4
 8014fe4:	3941      	subs	r1, #65	; 0x41
 8014fe6:	2919      	cmp	r1, #25
 8014fe8:	d801      	bhi.n	8014fee <_strtol_l.isra.0+0xae>
 8014fea:	3c37      	subs	r4, #55	; 0x37
 8014fec:	e7df      	b.n	8014fae <_strtol_l.isra.0+0x6e>
 8014fee:	0021      	movs	r1, r4
 8014ff0:	3961      	subs	r1, #97	; 0x61
 8014ff2:	2919      	cmp	r1, #25
 8014ff4:	d801      	bhi.n	8014ffa <_strtol_l.isra.0+0xba>
 8014ff6:	3c57      	subs	r4, #87	; 0x57
 8014ff8:	e7d9      	b.n	8014fae <_strtol_l.isra.0+0x6e>
 8014ffa:	1c5a      	adds	r2, r3, #1
 8014ffc:	d108      	bne.n	8015010 <_strtol_l.isra.0+0xd0>
 8014ffe:	9a05      	ldr	r2, [sp, #20]
 8015000:	3323      	adds	r3, #35	; 0x23
 8015002:	6013      	str	r3, [r2, #0]
 8015004:	9b02      	ldr	r3, [sp, #8]
 8015006:	9803      	ldr	r0, [sp, #12]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d109      	bne.n	8015020 <_strtol_l.isra.0+0xe0>
 801500c:	b007      	add	sp, #28
 801500e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015010:	2e00      	cmp	r6, #0
 8015012:	d000      	beq.n	8015016 <_strtol_l.isra.0+0xd6>
 8015014:	4240      	negs	r0, r0
 8015016:	9a02      	ldr	r2, [sp, #8]
 8015018:	2a00      	cmp	r2, #0
 801501a:	d0f7      	beq.n	801500c <_strtol_l.isra.0+0xcc>
 801501c:	2b00      	cmp	r3, #0
 801501e:	d001      	beq.n	8015024 <_strtol_l.isra.0+0xe4>
 8015020:	1e6b      	subs	r3, r5, #1
 8015022:	9301      	str	r3, [sp, #4]
 8015024:	9b02      	ldr	r3, [sp, #8]
 8015026:	9a01      	ldr	r2, [sp, #4]
 8015028:	601a      	str	r2, [r3, #0]
 801502a:	e7ef      	b.n	801500c <_strtol_l.isra.0+0xcc>
 801502c:	2430      	movs	r4, #48	; 0x30
 801502e:	2f00      	cmp	r7, #0
 8015030:	d1aa      	bne.n	8014f88 <_strtol_l.isra.0+0x48>
 8015032:	2708      	movs	r7, #8
 8015034:	e7a8      	b.n	8014f88 <_strtol_l.isra.0+0x48>
 8015036:	2c30      	cmp	r4, #48	; 0x30
 8015038:	d09e      	beq.n	8014f78 <_strtol_l.isra.0+0x38>
 801503a:	270a      	movs	r7, #10
 801503c:	e7a4      	b.n	8014f88 <_strtol_l.isra.0+0x48>
 801503e:	46c0      	nop			; (mov r8, r8)
 8015040:	7fffffff 	.word	0x7fffffff

08015044 <strtol>:
 8015044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015046:	0013      	movs	r3, r2
 8015048:	4a06      	ldr	r2, [pc, #24]	; (8015064 <strtol+0x20>)
 801504a:	0005      	movs	r5, r0
 801504c:	6810      	ldr	r0, [r2, #0]
 801504e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8015050:	2c00      	cmp	r4, #0
 8015052:	d100      	bne.n	8015056 <strtol+0x12>
 8015054:	4c04      	ldr	r4, [pc, #16]	; (8015068 <strtol+0x24>)
 8015056:	000a      	movs	r2, r1
 8015058:	9400      	str	r4, [sp, #0]
 801505a:	0029      	movs	r1, r5
 801505c:	f7ff ff70 	bl	8014f40 <_strtol_l.isra.0>
 8015060:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8015062:	46c0      	nop			; (mov r8, r8)
 8015064:	200000a8 	.word	0x200000a8
 8015068:	200004d8 	.word	0x200004d8

0801506c <_svfprintf_r>:
 801506c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801506e:	b0d9      	sub	sp, #356	; 0x164
 8015070:	910b      	str	r1, [sp, #44]	; 0x2c
 8015072:	9209      	str	r2, [sp, #36]	; 0x24
 8015074:	001c      	movs	r4, r3
 8015076:	900a      	str	r0, [sp, #40]	; 0x28
 8015078:	f002 fd26 	bl	8017ac8 <_localeconv_r>
 801507c:	6803      	ldr	r3, [r0, #0]
 801507e:	0018      	movs	r0, r3
 8015080:	931c      	str	r3, [sp, #112]	; 0x70
 8015082:	f7eb f849 	bl	8000118 <strlen>
 8015086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015088:	9014      	str	r0, [sp, #80]	; 0x50
 801508a:	899b      	ldrh	r3, [r3, #12]
 801508c:	061b      	lsls	r3, r3, #24
 801508e:	d518      	bpl.n	80150c2 <_svfprintf_r+0x56>
 8015090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015092:	691b      	ldr	r3, [r3, #16]
 8015094:	9308      	str	r3, [sp, #32]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d113      	bne.n	80150c2 <_svfprintf_r+0x56>
 801509a:	2140      	movs	r1, #64	; 0x40
 801509c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801509e:	f7fe fc1f 	bl	80138e0 <_malloc_r>
 80150a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150a4:	6018      	str	r0, [r3, #0]
 80150a6:	6118      	str	r0, [r3, #16]
 80150a8:	2800      	cmp	r0, #0
 80150aa:	d107      	bne.n	80150bc <_svfprintf_r+0x50>
 80150ac:	230c      	movs	r3, #12
 80150ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150b0:	6013      	str	r3, [r2, #0]
 80150b2:	3b0d      	subs	r3, #13
 80150b4:	9315      	str	r3, [sp, #84]	; 0x54
 80150b6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80150b8:	b059      	add	sp, #356	; 0x164
 80150ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150bc:	2340      	movs	r3, #64	; 0x40
 80150be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80150c0:	6153      	str	r3, [r2, #20]
 80150c2:	2600      	movs	r6, #0
 80150c4:	af2f      	add	r7, sp, #188	; 0xbc
 80150c6:	972c      	str	r7, [sp, #176]	; 0xb0
 80150c8:	962e      	str	r6, [sp, #184]	; 0xb8
 80150ca:	962d      	str	r6, [sp, #180]	; 0xb4
 80150cc:	960d      	str	r6, [sp, #52]	; 0x34
 80150ce:	961a      	str	r6, [sp, #104]	; 0x68
 80150d0:	9619      	str	r6, [sp, #100]	; 0x64
 80150d2:	961e      	str	r6, [sp, #120]	; 0x78
 80150d4:	961d      	str	r6, [sp, #116]	; 0x74
 80150d6:	9613      	str	r6, [sp, #76]	; 0x4c
 80150d8:	961b      	str	r6, [sp, #108]	; 0x6c
 80150da:	961f      	str	r6, [sp, #124]	; 0x7c
 80150dc:	9615      	str	r6, [sp, #84]	; 0x54
 80150de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80150e0:	782b      	ldrb	r3, [r5, #0]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d002      	beq.n	80150ec <_svfprintf_r+0x80>
 80150e6:	2b25      	cmp	r3, #37	; 0x25
 80150e8:	d000      	beq.n	80150ec <_svfprintf_r+0x80>
 80150ea:	e095      	b.n	8015218 <_svfprintf_r+0x1ac>
 80150ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150ee:	1aee      	subs	r6, r5, r3
 80150f0:	d017      	beq.n	8015122 <_svfprintf_r+0xb6>
 80150f2:	603b      	str	r3, [r7, #0]
 80150f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80150f6:	607e      	str	r6, [r7, #4]
 80150f8:	199b      	adds	r3, r3, r6
 80150fa:	932e      	str	r3, [sp, #184]	; 0xb8
 80150fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150fe:	3708      	adds	r7, #8
 8015100:	9308      	str	r3, [sp, #32]
 8015102:	3301      	adds	r3, #1
 8015104:	932d      	str	r3, [sp, #180]	; 0xb4
 8015106:	2b07      	cmp	r3, #7
 8015108:	dd08      	ble.n	801511c <_svfprintf_r+0xb0>
 801510a:	aa2c      	add	r2, sp, #176	; 0xb0
 801510c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801510e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015110:	f003 f900 	bl	8018314 <__ssprint_r>
 8015114:	2800      	cmp	r0, #0
 8015116:	d000      	beq.n	801511a <_svfprintf_r+0xae>
 8015118:	e2d9      	b.n	80156ce <_svfprintf_r+0x662>
 801511a:	af2f      	add	r7, sp, #188	; 0xbc
 801511c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801511e:	199b      	adds	r3, r3, r6
 8015120:	9315      	str	r3, [sp, #84]	; 0x54
 8015122:	782b      	ldrb	r3, [r5, #0]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d101      	bne.n	801512c <_svfprintf_r+0xc0>
 8015128:	f001 f9e5 	bl	80164f6 <_svfprintf_r+0x148a>
 801512c:	1c6b      	adds	r3, r5, #1
 801512e:	221b      	movs	r2, #27
 8015130:	9311      	str	r3, [sp, #68]	; 0x44
 8015132:	2300      	movs	r3, #0
 8015134:	a91e      	add	r1, sp, #120	; 0x78
 8015136:	1852      	adds	r2, r2, r1
 8015138:	7013      	strb	r3, [r2, #0]
 801513a:	2201      	movs	r2, #1
 801513c:	001e      	movs	r6, r3
 801513e:	2520      	movs	r5, #32
 8015140:	4252      	negs	r2, r2
 8015142:	9208      	str	r2, [sp, #32]
 8015144:	9316      	str	r3, [sp, #88]	; 0x58
 8015146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	930e      	str	r3, [sp, #56]	; 0x38
 801514c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801514e:	3301      	adds	r3, #1
 8015150:	9311      	str	r3, [sp, #68]	; 0x44
 8015152:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015154:	3820      	subs	r0, #32
 8015156:	285a      	cmp	r0, #90	; 0x5a
 8015158:	d901      	bls.n	801515e <_svfprintf_r+0xf2>
 801515a:	f000 fe3d 	bl	8015dd8 <_svfprintf_r+0xd6c>
 801515e:	f7ea ffed 	bl	800013c <__gnu_thumb1_case_shi>
 8015162:	009e      	.short	0x009e
 8015164:	063b063b 	.word	0x063b063b
 8015168:	063b00a7 	.word	0x063b00a7
 801516c:	063b063b 	.word	0x063b063b
 8015170:	063b0080 	.word	0x063b0080
 8015174:	00a9063b 	.word	0x00a9063b
 8015178:	063b00b3 	.word	0x063b00b3
 801517c:	00b900b1 	.word	0x00b900b1
 8015180:	00dd063b 	.word	0x00dd063b
 8015184:	00df00df 	.word	0x00df00df
 8015188:	00df00df 	.word	0x00df00df
 801518c:	00df00df 	.word	0x00df00df
 8015190:	00df00df 	.word	0x00df00df
 8015194:	063b00df 	.word	0x063b00df
 8015198:	063b063b 	.word	0x063b063b
 801519c:	063b063b 	.word	0x063b063b
 80151a0:	063b063b 	.word	0x063b063b
 80151a4:	063b0240 	.word	0x063b0240
 80151a8:	01fd010a 	.word	0x01fd010a
 80151ac:	02400240 	.word	0x02400240
 80151b0:	063b0240 	.word	0x063b0240
 80151b4:	063b063b 	.word	0x063b063b
 80151b8:	00f1063b 	.word	0x00f1063b
 80151bc:	063b063b 	.word	0x063b063b
 80151c0:	063b04e2 	.word	0x063b04e2
 80151c4:	063b063b 	.word	0x063b063b
 80151c8:	063b0537 	.word	0x063b0537
 80151cc:	063b0557 	.word	0x063b0557
 80151d0:	005d063b 	.word	0x005d063b
 80151d4:	063b063b 	.word	0x063b063b
 80151d8:	063b063b 	.word	0x063b063b
 80151dc:	063b063b 	.word	0x063b063b
 80151e0:	063b063b 	.word	0x063b063b
 80151e4:	063b0240 	.word	0x063b0240
 80151e8:	01ff010a 	.word	0x01ff010a
 80151ec:	02400240 	.word	0x02400240
 80151f0:	00f30240 	.word	0x00f30240
 80151f4:	010601ff 	.word	0x010601ff
 80151f8:	00ff063b 	.word	0x00ff063b
 80151fc:	04c5063b 	.word	0x04c5063b
 8015200:	052704e4 	.word	0x052704e4
 8015204:	063b0106 	.word	0x063b0106
 8015208:	fff20537 	.word	0xfff20537
 801520c:	063b0559 	.word	0x063b0559
 8015210:	0582063b 	.word	0x0582063b
 8015214:	fff2063b 	.word	0xfff2063b
 8015218:	3501      	adds	r5, #1
 801521a:	e761      	b.n	80150e0 <_svfprintf_r+0x74>
 801521c:	4bcb      	ldr	r3, [pc, #812]	; (801554c <_svfprintf_r+0x4e0>)
 801521e:	2220      	movs	r2, #32
 8015220:	931e      	str	r3, [sp, #120]	; 0x78
 8015222:	4032      	ands	r2, r6
 8015224:	d101      	bne.n	801522a <_svfprintf_r+0x1be>
 8015226:	f000 fd21 	bl	8015c6c <_svfprintf_r+0xc00>
 801522a:	2307      	movs	r3, #7
 801522c:	3407      	adds	r4, #7
 801522e:	439c      	bics	r4, r3
 8015230:	0023      	movs	r3, r4
 8015232:	3308      	adds	r3, #8
 8015234:	9312      	str	r3, [sp, #72]	; 0x48
 8015236:	6823      	ldr	r3, [r4, #0]
 8015238:	6864      	ldr	r4, [r4, #4]
 801523a:	9306      	str	r3, [sp, #24]
 801523c:	9407      	str	r4, [sp, #28]
 801523e:	07f3      	lsls	r3, r6, #31
 8015240:	d50a      	bpl.n	8015258 <_svfprintf_r+0x1ec>
 8015242:	9b06      	ldr	r3, [sp, #24]
 8015244:	9a07      	ldr	r2, [sp, #28]
 8015246:	4313      	orrs	r3, r2
 8015248:	d006      	beq.n	8015258 <_svfprintf_r+0x1ec>
 801524a:	2230      	movs	r2, #48	; 0x30
 801524c:	ab25      	add	r3, sp, #148	; 0x94
 801524e:	701a      	strb	r2, [r3, #0]
 8015250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015252:	705a      	strb	r2, [r3, #1]
 8015254:	2302      	movs	r3, #2
 8015256:	431e      	orrs	r6, r3
 8015258:	4bbd      	ldr	r3, [pc, #756]	; (8015550 <_svfprintf_r+0x4e4>)
 801525a:	401e      	ands	r6, r3
 801525c:	2302      	movs	r3, #2
 801525e:	f000 fc74 	bl	8015b4a <_svfprintf_r+0xade>
 8015262:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015264:	f002 fc30 	bl	8017ac8 <_localeconv_r>
 8015268:	6843      	ldr	r3, [r0, #4]
 801526a:	0018      	movs	r0, r3
 801526c:	931f      	str	r3, [sp, #124]	; 0x7c
 801526e:	f7ea ff53 	bl	8000118 <strlen>
 8015272:	901b      	str	r0, [sp, #108]	; 0x6c
 8015274:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015276:	f002 fc27 	bl	8017ac8 <_localeconv_r>
 801527a:	6883      	ldr	r3, [r0, #8]
 801527c:	9313      	str	r3, [sp, #76]	; 0x4c
 801527e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015280:	2b00      	cmp	r3, #0
 8015282:	d100      	bne.n	8015286 <_svfprintf_r+0x21a>
 8015284:	e75f      	b.n	8015146 <_svfprintf_r+0xda>
 8015286:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015288:	2b00      	cmp	r3, #0
 801528a:	d100      	bne.n	801528e <_svfprintf_r+0x222>
 801528c:	e75b      	b.n	8015146 <_svfprintf_r+0xda>
 801528e:	781b      	ldrb	r3, [r3, #0]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d100      	bne.n	8015296 <_svfprintf_r+0x22a>
 8015294:	e757      	b.n	8015146 <_svfprintf_r+0xda>
 8015296:	2380      	movs	r3, #128	; 0x80
 8015298:	00db      	lsls	r3, r3, #3
 801529a:	431e      	orrs	r6, r3
 801529c:	e753      	b.n	8015146 <_svfprintf_r+0xda>
 801529e:	231b      	movs	r3, #27
 80152a0:	aa1e      	add	r2, sp, #120	; 0x78
 80152a2:	189b      	adds	r3, r3, r2
 80152a4:	781a      	ldrb	r2, [r3, #0]
 80152a6:	2a00      	cmp	r2, #0
 80152a8:	d000      	beq.n	80152ac <_svfprintf_r+0x240>
 80152aa:	e74c      	b.n	8015146 <_svfprintf_r+0xda>
 80152ac:	701d      	strb	r5, [r3, #0]
 80152ae:	e74a      	b.n	8015146 <_svfprintf_r+0xda>
 80152b0:	2301      	movs	r3, #1
 80152b2:	e7f2      	b.n	801529a <_svfprintf_r+0x22e>
 80152b4:	6823      	ldr	r3, [r4, #0]
 80152b6:	3404      	adds	r4, #4
 80152b8:	9316      	str	r3, [sp, #88]	; 0x58
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	db00      	blt.n	80152c0 <_svfprintf_r+0x254>
 80152be:	e742      	b.n	8015146 <_svfprintf_r+0xda>
 80152c0:	425b      	negs	r3, r3
 80152c2:	9316      	str	r3, [sp, #88]	; 0x58
 80152c4:	2304      	movs	r3, #4
 80152c6:	e7e8      	b.n	801529a <_svfprintf_r+0x22e>
 80152c8:	231b      	movs	r3, #27
 80152ca:	aa1e      	add	r2, sp, #120	; 0x78
 80152cc:	189b      	adds	r3, r3, r2
 80152ce:	222b      	movs	r2, #43	; 0x2b
 80152d0:	701a      	strb	r2, [r3, #0]
 80152d2:	e738      	b.n	8015146 <_svfprintf_r+0xda>
 80152d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80152d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80152d8:	7812      	ldrb	r2, [r2, #0]
 80152da:	3301      	adds	r3, #1
 80152dc:	920e      	str	r2, [sp, #56]	; 0x38
 80152de:	2a2a      	cmp	r2, #42	; 0x2a
 80152e0:	d008      	beq.n	80152f4 <_svfprintf_r+0x288>
 80152e2:	2200      	movs	r2, #0
 80152e4:	9208      	str	r2, [sp, #32]
 80152e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80152e8:	001a      	movs	r2, r3
 80152ea:	3930      	subs	r1, #48	; 0x30
 80152ec:	2909      	cmp	r1, #9
 80152ee:	d90c      	bls.n	801530a <_svfprintf_r+0x29e>
 80152f0:	9211      	str	r2, [sp, #68]	; 0x44
 80152f2:	e72e      	b.n	8015152 <_svfprintf_r+0xe6>
 80152f4:	6821      	ldr	r1, [r4, #0]
 80152f6:	1d22      	adds	r2, r4, #4
 80152f8:	9108      	str	r1, [sp, #32]
 80152fa:	2900      	cmp	r1, #0
 80152fc:	da02      	bge.n	8015304 <_svfprintf_r+0x298>
 80152fe:	2101      	movs	r1, #1
 8015300:	4249      	negs	r1, r1
 8015302:	9108      	str	r1, [sp, #32]
 8015304:	0014      	movs	r4, r2
 8015306:	9311      	str	r3, [sp, #68]	; 0x44
 8015308:	e71d      	b.n	8015146 <_svfprintf_r+0xda>
 801530a:	200a      	movs	r0, #10
 801530c:	9a08      	ldr	r2, [sp, #32]
 801530e:	4342      	muls	r2, r0
 8015310:	1852      	adds	r2, r2, r1
 8015312:	9208      	str	r2, [sp, #32]
 8015314:	781a      	ldrb	r2, [r3, #0]
 8015316:	3301      	adds	r3, #1
 8015318:	920e      	str	r2, [sp, #56]	; 0x38
 801531a:	e7e4      	b.n	80152e6 <_svfprintf_r+0x27a>
 801531c:	2380      	movs	r3, #128	; 0x80
 801531e:	e7bc      	b.n	801529a <_svfprintf_r+0x22e>
 8015320:	2300      	movs	r3, #0
 8015322:	9316      	str	r3, [sp, #88]	; 0x58
 8015324:	220a      	movs	r2, #10
 8015326:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015328:	4353      	muls	r3, r2
 801532a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801532c:	3a30      	subs	r2, #48	; 0x30
 801532e:	18d3      	adds	r3, r2, r3
 8015330:	9316      	str	r3, [sp, #88]	; 0x58
 8015332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015334:	1c5a      	adds	r2, r3, #1
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	9211      	str	r2, [sp, #68]	; 0x44
 801533a:	930e      	str	r3, [sp, #56]	; 0x38
 801533c:	3b30      	subs	r3, #48	; 0x30
 801533e:	2b09      	cmp	r3, #9
 8015340:	d9f0      	bls.n	8015324 <_svfprintf_r+0x2b8>
 8015342:	e7d5      	b.n	80152f0 <_svfprintf_r+0x284>
 8015344:	2308      	movs	r3, #8
 8015346:	e7a8      	b.n	801529a <_svfprintf_r+0x22e>
 8015348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	2b68      	cmp	r3, #104	; 0x68
 801534e:	d105      	bne.n	801535c <_svfprintf_r+0x2f0>
 8015350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015352:	3301      	adds	r3, #1
 8015354:	9311      	str	r3, [sp, #68]	; 0x44
 8015356:	2380      	movs	r3, #128	; 0x80
 8015358:	009b      	lsls	r3, r3, #2
 801535a:	e79e      	b.n	801529a <_svfprintf_r+0x22e>
 801535c:	2340      	movs	r3, #64	; 0x40
 801535e:	e79c      	b.n	801529a <_svfprintf_r+0x22e>
 8015360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015362:	781b      	ldrb	r3, [r3, #0]
 8015364:	2b6c      	cmp	r3, #108	; 0x6c
 8015366:	d104      	bne.n	8015372 <_svfprintf_r+0x306>
 8015368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801536a:	3301      	adds	r3, #1
 801536c:	9311      	str	r3, [sp, #68]	; 0x44
 801536e:	432e      	orrs	r6, r5
 8015370:	e6e9      	b.n	8015146 <_svfprintf_r+0xda>
 8015372:	2310      	movs	r3, #16
 8015374:	e791      	b.n	801529a <_svfprintf_r+0x22e>
 8015376:	1d23      	adds	r3, r4, #4
 8015378:	6822      	ldr	r2, [r4, #0]
 801537a:	9312      	str	r3, [sp, #72]	; 0x48
 801537c:	ab3f      	add	r3, sp, #252	; 0xfc
 801537e:	701a      	strb	r2, [r3, #0]
 8015380:	221b      	movs	r2, #27
 8015382:	2000      	movs	r0, #0
 8015384:	a91e      	add	r1, sp, #120	; 0x78
 8015386:	1852      	adds	r2, r2, r1
 8015388:	7010      	strb	r0, [r2, #0]
 801538a:	2201      	movs	r2, #1
 801538c:	0005      	movs	r5, r0
 801538e:	900c      	str	r0, [sp, #48]	; 0x30
 8015390:	9208      	str	r2, [sp, #32]
 8015392:	9017      	str	r0, [sp, #92]	; 0x5c
 8015394:	9010      	str	r0, [sp, #64]	; 0x40
 8015396:	900f      	str	r0, [sp, #60]	; 0x3c
 8015398:	9309      	str	r3, [sp, #36]	; 0x24
 801539a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801539c:	9a08      	ldr	r2, [sp, #32]
 801539e:	9318      	str	r3, [sp, #96]	; 0x60
 80153a0:	4293      	cmp	r3, r2
 80153a2:	da00      	bge.n	80153a6 <_svfprintf_r+0x33a>
 80153a4:	9218      	str	r2, [sp, #96]	; 0x60
 80153a6:	231b      	movs	r3, #27
 80153a8:	aa1e      	add	r2, sp, #120	; 0x78
 80153aa:	189b      	adds	r3, r3, r2
 80153ac:	781b      	ldrb	r3, [r3, #0]
 80153ae:	1e5a      	subs	r2, r3, #1
 80153b0:	4193      	sbcs	r3, r2
 80153b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80153b4:	18d3      	adds	r3, r2, r3
 80153b6:	9318      	str	r3, [sp, #96]	; 0x60
 80153b8:	2302      	movs	r3, #2
 80153ba:	4033      	ands	r3, r6
 80153bc:	9320      	str	r3, [sp, #128]	; 0x80
 80153be:	d002      	beq.n	80153c6 <_svfprintf_r+0x35a>
 80153c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80153c2:	3302      	adds	r3, #2
 80153c4:	9318      	str	r3, [sp, #96]	; 0x60
 80153c6:	2384      	movs	r3, #132	; 0x84
 80153c8:	4033      	ands	r3, r6
 80153ca:	9321      	str	r3, [sp, #132]	; 0x84
 80153cc:	d121      	bne.n	8015412 <_svfprintf_r+0x3a6>
 80153ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80153d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80153d2:	1a9c      	subs	r4, r3, r2
 80153d4:	2c00      	cmp	r4, #0
 80153d6:	dd1c      	ble.n	8015412 <_svfprintf_r+0x3a6>
 80153d8:	0039      	movs	r1, r7
 80153da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153dc:	485d      	ldr	r0, [pc, #372]	; (8015554 <_svfprintf_r+0x4e8>)
 80153de:	9322      	str	r3, [sp, #136]	; 0x88
 80153e0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80153e2:	3301      	adds	r3, #1
 80153e4:	3108      	adds	r1, #8
 80153e6:	6038      	str	r0, [r7, #0]
 80153e8:	2c10      	cmp	r4, #16
 80153ea:	dd01      	ble.n	80153f0 <_svfprintf_r+0x384>
 80153ec:	f000 fd08 	bl	8015e00 <_svfprintf_r+0xd94>
 80153f0:	607c      	str	r4, [r7, #4]
 80153f2:	18a4      	adds	r4, r4, r2
 80153f4:	942e      	str	r4, [sp, #184]	; 0xb8
 80153f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80153f8:	000f      	movs	r7, r1
 80153fa:	2b07      	cmp	r3, #7
 80153fc:	dd09      	ble.n	8015412 <_svfprintf_r+0x3a6>
 80153fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8015400:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015402:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015404:	f002 ff86 	bl	8018314 <__ssprint_r>
 8015408:	2800      	cmp	r0, #0
 801540a:	d001      	beq.n	8015410 <_svfprintf_r+0x3a4>
 801540c:	f001 f852 	bl	80164b4 <_svfprintf_r+0x1448>
 8015410:	af2f      	add	r7, sp, #188	; 0xbc
 8015412:	231b      	movs	r3, #27
 8015414:	aa1e      	add	r2, sp, #120	; 0x78
 8015416:	189b      	adds	r3, r3, r2
 8015418:	781a      	ldrb	r2, [r3, #0]
 801541a:	2a00      	cmp	r2, #0
 801541c:	d017      	beq.n	801544e <_svfprintf_r+0x3e2>
 801541e:	603b      	str	r3, [r7, #0]
 8015420:	2301      	movs	r3, #1
 8015422:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015424:	607b      	str	r3, [r7, #4]
 8015426:	0013      	movs	r3, r2
 8015428:	3301      	adds	r3, #1
 801542a:	932e      	str	r3, [sp, #184]	; 0xb8
 801542c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801542e:	3708      	adds	r7, #8
 8015430:	9322      	str	r3, [sp, #136]	; 0x88
 8015432:	3301      	adds	r3, #1
 8015434:	932d      	str	r3, [sp, #180]	; 0xb4
 8015436:	2b07      	cmp	r3, #7
 8015438:	dd09      	ble.n	801544e <_svfprintf_r+0x3e2>
 801543a:	aa2c      	add	r2, sp, #176	; 0xb0
 801543c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801543e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015440:	f002 ff68 	bl	8018314 <__ssprint_r>
 8015444:	2800      	cmp	r0, #0
 8015446:	d001      	beq.n	801544c <_svfprintf_r+0x3e0>
 8015448:	f001 f834 	bl	80164b4 <_svfprintf_r+0x1448>
 801544c:	af2f      	add	r7, sp, #188	; 0xbc
 801544e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015450:	2b00      	cmp	r3, #0
 8015452:	d019      	beq.n	8015488 <_svfprintf_r+0x41c>
 8015454:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015456:	9320      	str	r3, [sp, #128]	; 0x80
 8015458:	ab25      	add	r3, sp, #148	; 0x94
 801545a:	603b      	str	r3, [r7, #0]
 801545c:	2302      	movs	r3, #2
 801545e:	607b      	str	r3, [r7, #4]
 8015460:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015462:	3708      	adds	r7, #8
 8015464:	3302      	adds	r3, #2
 8015466:	932e      	str	r3, [sp, #184]	; 0xb8
 8015468:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801546a:	9320      	str	r3, [sp, #128]	; 0x80
 801546c:	3301      	adds	r3, #1
 801546e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015470:	2b07      	cmp	r3, #7
 8015472:	dd09      	ble.n	8015488 <_svfprintf_r+0x41c>
 8015474:	aa2c      	add	r2, sp, #176	; 0xb0
 8015476:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015478:	980a      	ldr	r0, [sp, #40]	; 0x28
 801547a:	f002 ff4b 	bl	8018314 <__ssprint_r>
 801547e:	2800      	cmp	r0, #0
 8015480:	d001      	beq.n	8015486 <_svfprintf_r+0x41a>
 8015482:	f001 f817 	bl	80164b4 <_svfprintf_r+0x1448>
 8015486:	af2f      	add	r7, sp, #188	; 0xbc
 8015488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801548a:	2b80      	cmp	r3, #128	; 0x80
 801548c:	d121      	bne.n	80154d2 <_svfprintf_r+0x466>
 801548e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015490:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015492:	1a9c      	subs	r4, r3, r2
 8015494:	2c00      	cmp	r4, #0
 8015496:	dd1c      	ble.n	80154d2 <_svfprintf_r+0x466>
 8015498:	0039      	movs	r1, r7
 801549a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801549c:	482e      	ldr	r0, [pc, #184]	; (8015558 <_svfprintf_r+0x4ec>)
 801549e:	9320      	str	r3, [sp, #128]	; 0x80
 80154a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80154a2:	3301      	adds	r3, #1
 80154a4:	3108      	adds	r1, #8
 80154a6:	6038      	str	r0, [r7, #0]
 80154a8:	2c10      	cmp	r4, #16
 80154aa:	dd01      	ble.n	80154b0 <_svfprintf_r+0x444>
 80154ac:	f000 fcbc 	bl	8015e28 <_svfprintf_r+0xdbc>
 80154b0:	607c      	str	r4, [r7, #4]
 80154b2:	18a4      	adds	r4, r4, r2
 80154b4:	942e      	str	r4, [sp, #184]	; 0xb8
 80154b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80154b8:	000f      	movs	r7, r1
 80154ba:	2b07      	cmp	r3, #7
 80154bc:	dd09      	ble.n	80154d2 <_svfprintf_r+0x466>
 80154be:	aa2c      	add	r2, sp, #176	; 0xb0
 80154c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154c4:	f002 ff26 	bl	8018314 <__ssprint_r>
 80154c8:	2800      	cmp	r0, #0
 80154ca:	d001      	beq.n	80154d0 <_svfprintf_r+0x464>
 80154cc:	f000 fff2 	bl	80164b4 <_svfprintf_r+0x1448>
 80154d0:	af2f      	add	r7, sp, #188	; 0xbc
 80154d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80154d4:	9a08      	ldr	r2, [sp, #32]
 80154d6:	1a9c      	subs	r4, r3, r2
 80154d8:	2c00      	cmp	r4, #0
 80154da:	dd1c      	ble.n	8015516 <_svfprintf_r+0x4aa>
 80154dc:	0039      	movs	r1, r7
 80154de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154e0:	481d      	ldr	r0, [pc, #116]	; (8015558 <_svfprintf_r+0x4ec>)
 80154e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80154e4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80154e6:	3301      	adds	r3, #1
 80154e8:	3108      	adds	r1, #8
 80154ea:	6038      	str	r0, [r7, #0]
 80154ec:	2c10      	cmp	r4, #16
 80154ee:	dd01      	ble.n	80154f4 <_svfprintf_r+0x488>
 80154f0:	f000 fcb4 	bl	8015e5c <_svfprintf_r+0xdf0>
 80154f4:	18a2      	adds	r2, r4, r2
 80154f6:	607c      	str	r4, [r7, #4]
 80154f8:	922e      	str	r2, [sp, #184]	; 0xb8
 80154fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80154fc:	000f      	movs	r7, r1
 80154fe:	2b07      	cmp	r3, #7
 8015500:	dd09      	ble.n	8015516 <_svfprintf_r+0x4aa>
 8015502:	aa2c      	add	r2, sp, #176	; 0xb0
 8015504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015506:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015508:	f002 ff04 	bl	8018314 <__ssprint_r>
 801550c:	2800      	cmp	r0, #0
 801550e:	d001      	beq.n	8015514 <_svfprintf_r+0x4a8>
 8015510:	f000 ffd0 	bl	80164b4 <_svfprintf_r+0x1448>
 8015514:	af2f      	add	r7, sp, #188	; 0xbc
 8015516:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015518:	9317      	str	r3, [sp, #92]	; 0x5c
 801551a:	05f3      	lsls	r3, r6, #23
 801551c:	d501      	bpl.n	8015522 <_svfprintf_r+0x4b6>
 801551e:	f000 fcb1 	bl	8015e84 <_svfprintf_r+0xe18>
 8015522:	9a08      	ldr	r2, [sp, #32]
 8015524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015526:	4694      	mov	ip, r2
 8015528:	603b      	str	r3, [r7, #0]
 801552a:	9b08      	ldr	r3, [sp, #32]
 801552c:	607b      	str	r3, [r7, #4]
 801552e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015530:	4463      	add	r3, ip
 8015532:	932e      	str	r3, [sp, #184]	; 0xb8
 8015534:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015536:	9308      	str	r3, [sp, #32]
 8015538:	3301      	adds	r3, #1
 801553a:	932d      	str	r3, [sp, #180]	; 0xb4
 801553c:	2b07      	cmp	r3, #7
 801553e:	dd01      	ble.n	8015544 <_svfprintf_r+0x4d8>
 8015540:	f000 fd94 	bl	801606c <_svfprintf_r+0x1000>
 8015544:	3708      	adds	r7, #8
 8015546:	f000 fce4 	bl	8015f12 <_svfprintf_r+0xea6>
 801554a:	46c0      	nop			; (mov r8, r8)
 801554c:	0801bb09 	.word	0x0801bb09
 8015550:	fffffbff 	.word	0xfffffbff
 8015554:	0801bb1c 	.word	0x0801bb1c
 8015558:	0801bb2c 	.word	0x0801bb2c
 801555c:	2310      	movs	r3, #16
 801555e:	431e      	orrs	r6, r3
 8015560:	06b3      	lsls	r3, r6, #26
 8015562:	d52c      	bpl.n	80155be <_svfprintf_r+0x552>
 8015564:	2307      	movs	r3, #7
 8015566:	3407      	adds	r4, #7
 8015568:	439c      	bics	r4, r3
 801556a:	0023      	movs	r3, r4
 801556c:	3308      	adds	r3, #8
 801556e:	9312      	str	r3, [sp, #72]	; 0x48
 8015570:	6823      	ldr	r3, [r4, #0]
 8015572:	6864      	ldr	r4, [r4, #4]
 8015574:	9306      	str	r3, [sp, #24]
 8015576:	9407      	str	r4, [sp, #28]
 8015578:	9b07      	ldr	r3, [sp, #28]
 801557a:	2b00      	cmp	r3, #0
 801557c:	da0b      	bge.n	8015596 <_svfprintf_r+0x52a>
 801557e:	9906      	ldr	r1, [sp, #24]
 8015580:	9a07      	ldr	r2, [sp, #28]
 8015582:	2400      	movs	r4, #0
 8015584:	424b      	negs	r3, r1
 8015586:	4194      	sbcs	r4, r2
 8015588:	9306      	str	r3, [sp, #24]
 801558a:	9407      	str	r4, [sp, #28]
 801558c:	231b      	movs	r3, #27
 801558e:	aa1e      	add	r2, sp, #120	; 0x78
 8015590:	189b      	adds	r3, r3, r2
 8015592:	222d      	movs	r2, #45	; 0x2d
 8015594:	701a      	strb	r2, [r3, #0]
 8015596:	9b08      	ldr	r3, [sp, #32]
 8015598:	3301      	adds	r3, #1
 801559a:	d000      	beq.n	801559e <_svfprintf_r+0x532>
 801559c:	e382      	b.n	8015ca4 <_svfprintf_r+0xc38>
 801559e:	9b07      	ldr	r3, [sp, #28]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d000      	beq.n	80155a6 <_svfprintf_r+0x53a>
 80155a4:	e3b0      	b.n	8015d08 <_svfprintf_r+0xc9c>
 80155a6:	9b06      	ldr	r3, [sp, #24]
 80155a8:	2b09      	cmp	r3, #9
 80155aa:	d900      	bls.n	80155ae <_svfprintf_r+0x542>
 80155ac:	e3ac      	b.n	8015d08 <_svfprintf_r+0xc9c>
 80155ae:	23e7      	movs	r3, #231	; 0xe7
 80155b0:	aa1e      	add	r2, sp, #120	; 0x78
 80155b2:	189b      	adds	r3, r3, r2
 80155b4:	9a06      	ldr	r2, [sp, #24]
 80155b6:	3230      	adds	r2, #48	; 0x30
 80155b8:	701a      	strb	r2, [r3, #0]
 80155ba:	9309      	str	r3, [sp, #36]	; 0x24
 80155bc:	e395      	b.n	8015cea <_svfprintf_r+0xc7e>
 80155be:	1d23      	adds	r3, r4, #4
 80155c0:	9312      	str	r3, [sp, #72]	; 0x48
 80155c2:	06f3      	lsls	r3, r6, #27
 80155c4:	d504      	bpl.n	80155d0 <_svfprintf_r+0x564>
 80155c6:	6823      	ldr	r3, [r4, #0]
 80155c8:	9306      	str	r3, [sp, #24]
 80155ca:	17db      	asrs	r3, r3, #31
 80155cc:	9307      	str	r3, [sp, #28]
 80155ce:	e7d3      	b.n	8015578 <_svfprintf_r+0x50c>
 80155d0:	6823      	ldr	r3, [r4, #0]
 80155d2:	0672      	lsls	r2, r6, #25
 80155d4:	d501      	bpl.n	80155da <_svfprintf_r+0x56e>
 80155d6:	b21b      	sxth	r3, r3
 80155d8:	e7f6      	b.n	80155c8 <_svfprintf_r+0x55c>
 80155da:	05b2      	lsls	r2, r6, #22
 80155dc:	d5f4      	bpl.n	80155c8 <_svfprintf_r+0x55c>
 80155de:	b25b      	sxtb	r3, r3
 80155e0:	e7f2      	b.n	80155c8 <_svfprintf_r+0x55c>
 80155e2:	2307      	movs	r3, #7
 80155e4:	3407      	adds	r4, #7
 80155e6:	439c      	bics	r4, r3
 80155e8:	0023      	movs	r3, r4
 80155ea:	2201      	movs	r2, #1
 80155ec:	3308      	adds	r3, #8
 80155ee:	9312      	str	r3, [sp, #72]	; 0x48
 80155f0:	6823      	ldr	r3, [r4, #0]
 80155f2:	4252      	negs	r2, r2
 80155f4:	931a      	str	r3, [sp, #104]	; 0x68
 80155f6:	6863      	ldr	r3, [r4, #4]
 80155f8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80155fa:	005c      	lsls	r4, r3, #1
 80155fc:	0864      	lsrs	r4, r4, #1
 80155fe:	9319      	str	r3, [sp, #100]	; 0x64
 8015600:	0028      	movs	r0, r5
 8015602:	4bcf      	ldr	r3, [pc, #828]	; (8015940 <_svfprintf_r+0x8d4>)
 8015604:	0021      	movs	r1, r4
 8015606:	f7ed f9cf 	bl	80029a8 <__aeabi_dcmpun>
 801560a:	2800      	cmp	r0, #0
 801560c:	d125      	bne.n	801565a <_svfprintf_r+0x5ee>
 801560e:	2201      	movs	r2, #1
 8015610:	4bcb      	ldr	r3, [pc, #812]	; (8015940 <_svfprintf_r+0x8d4>)
 8015612:	4252      	negs	r2, r2
 8015614:	0028      	movs	r0, r5
 8015616:	0021      	movs	r1, r4
 8015618:	f7ea ff30 	bl	800047c <__aeabi_dcmple>
 801561c:	2800      	cmp	r0, #0
 801561e:	d11c      	bne.n	801565a <_svfprintf_r+0x5ee>
 8015620:	2200      	movs	r2, #0
 8015622:	2300      	movs	r3, #0
 8015624:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015626:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015628:	f7ea ff1e 	bl	8000468 <__aeabi_dcmplt>
 801562c:	2800      	cmp	r0, #0
 801562e:	d004      	beq.n	801563a <_svfprintf_r+0x5ce>
 8015630:	231b      	movs	r3, #27
 8015632:	aa1e      	add	r2, sp, #120	; 0x78
 8015634:	189b      	adds	r3, r3, r2
 8015636:	222d      	movs	r2, #45	; 0x2d
 8015638:	701a      	strb	r2, [r3, #0]
 801563a:	4bc2      	ldr	r3, [pc, #776]	; (8015944 <_svfprintf_r+0x8d8>)
 801563c:	9309      	str	r3, [sp, #36]	; 0x24
 801563e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015640:	2b47      	cmp	r3, #71	; 0x47
 8015642:	dc01      	bgt.n	8015648 <_svfprintf_r+0x5dc>
 8015644:	4bc0      	ldr	r3, [pc, #768]	; (8015948 <_svfprintf_r+0x8dc>)
 8015646:	9309      	str	r3, [sp, #36]	; 0x24
 8015648:	2380      	movs	r3, #128	; 0x80
 801564a:	439e      	bics	r6, r3
 801564c:	2300      	movs	r3, #0
 801564e:	930c      	str	r3, [sp, #48]	; 0x30
 8015650:	3303      	adds	r3, #3
 8015652:	9308      	str	r3, [sp, #32]
 8015654:	2300      	movs	r3, #0
 8015656:	9317      	str	r3, [sp, #92]	; 0x5c
 8015658:	e34f      	b.n	8015cfa <_svfprintf_r+0xc8e>
 801565a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801565c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801565e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015660:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015662:	f7ed f9a1 	bl	80029a8 <__aeabi_dcmpun>
 8015666:	2800      	cmp	r0, #0
 8015668:	d00e      	beq.n	8015688 <_svfprintf_r+0x61c>
 801566a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801566c:	2b00      	cmp	r3, #0
 801566e:	da04      	bge.n	801567a <_svfprintf_r+0x60e>
 8015670:	231b      	movs	r3, #27
 8015672:	aa1e      	add	r2, sp, #120	; 0x78
 8015674:	189b      	adds	r3, r3, r2
 8015676:	222d      	movs	r2, #45	; 0x2d
 8015678:	701a      	strb	r2, [r3, #0]
 801567a:	4bb4      	ldr	r3, [pc, #720]	; (801594c <_svfprintf_r+0x8e0>)
 801567c:	9309      	str	r3, [sp, #36]	; 0x24
 801567e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015680:	2b47      	cmp	r3, #71	; 0x47
 8015682:	dce1      	bgt.n	8015648 <_svfprintf_r+0x5dc>
 8015684:	4bb2      	ldr	r3, [pc, #712]	; (8015950 <_svfprintf_r+0x8e4>)
 8015686:	e7de      	b.n	8015646 <_svfprintf_r+0x5da>
 8015688:	2320      	movs	r3, #32
 801568a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801568c:	439a      	bics	r2, r3
 801568e:	920f      	str	r2, [sp, #60]	; 0x3c
 8015690:	2a41      	cmp	r2, #65	; 0x41
 8015692:	d124      	bne.n	80156de <_svfprintf_r+0x672>
 8015694:	2230      	movs	r2, #48	; 0x30
 8015696:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015698:	ab25      	add	r3, sp, #148	; 0x94
 801569a:	701a      	strb	r2, [r3, #0]
 801569c:	3228      	adds	r2, #40	; 0x28
 801569e:	2961      	cmp	r1, #97	; 0x61
 80156a0:	d100      	bne.n	80156a4 <_svfprintf_r+0x638>
 80156a2:	3220      	adds	r2, #32
 80156a4:	705a      	strb	r2, [r3, #1]
 80156a6:	2302      	movs	r3, #2
 80156a8:	431e      	orrs	r6, r3
 80156aa:	9b08      	ldr	r3, [sp, #32]
 80156ac:	2b63      	cmp	r3, #99	; 0x63
 80156ae:	dc00      	bgt.n	80156b2 <_svfprintf_r+0x646>
 80156b0:	e09e      	b.n	80157f0 <_svfprintf_r+0x784>
 80156b2:	1c59      	adds	r1, r3, #1
 80156b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156b6:	f7fe f913 	bl	80138e0 <_malloc_r>
 80156ba:	9009      	str	r0, [sp, #36]	; 0x24
 80156bc:	2800      	cmp	r0, #0
 80156be:	d000      	beq.n	80156c2 <_svfprintf_r+0x656>
 80156c0:	e09b      	b.n	80157fa <_svfprintf_r+0x78e>
 80156c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156c4:	899a      	ldrh	r2, [r3, #12]
 80156c6:	2340      	movs	r3, #64	; 0x40
 80156c8:	4313      	orrs	r3, r2
 80156ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80156cc:	8193      	strh	r3, [r2, #12]
 80156ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156d0:	899b      	ldrh	r3, [r3, #12]
 80156d2:	065b      	lsls	r3, r3, #25
 80156d4:	d400      	bmi.n	80156d8 <_svfprintf_r+0x66c>
 80156d6:	e4ee      	b.n	80150b6 <_svfprintf_r+0x4a>
 80156d8:	2301      	movs	r3, #1
 80156da:	425b      	negs	r3, r3
 80156dc:	e4ea      	b.n	80150b4 <_svfprintf_r+0x48>
 80156de:	9b08      	ldr	r3, [sp, #32]
 80156e0:	900c      	str	r0, [sp, #48]	; 0x30
 80156e2:	3301      	adds	r3, #1
 80156e4:	d100      	bne.n	80156e8 <_svfprintf_r+0x67c>
 80156e6:	e08b      	b.n	8015800 <_svfprintf_r+0x794>
 80156e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156ea:	2b47      	cmp	r3, #71	; 0x47
 80156ec:	d103      	bne.n	80156f6 <_svfprintf_r+0x68a>
 80156ee:	9b08      	ldr	r3, [sp, #32]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d100      	bne.n	80156f6 <_svfprintf_r+0x68a>
 80156f4:	e087      	b.n	8015806 <_svfprintf_r+0x79a>
 80156f6:	2380      	movs	r3, #128	; 0x80
 80156f8:	005b      	lsls	r3, r3, #1
 80156fa:	4333      	orrs	r3, r6
 80156fc:	9320      	str	r3, [sp, #128]	; 0x80
 80156fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015700:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8015702:	2b00      	cmp	r3, #0
 8015704:	db00      	blt.n	8015708 <_svfprintf_r+0x69c>
 8015706:	e082      	b.n	801580e <_svfprintf_r+0x7a2>
 8015708:	2280      	movs	r2, #128	; 0x80
 801570a:	0612      	lsls	r2, r2, #24
 801570c:	4694      	mov	ip, r2
 801570e:	4463      	add	r3, ip
 8015710:	930d      	str	r3, [sp, #52]	; 0x34
 8015712:	232d      	movs	r3, #45	; 0x2d
 8015714:	9322      	str	r3, [sp, #136]	; 0x88
 8015716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015718:	2b41      	cmp	r3, #65	; 0x41
 801571a:	d000      	beq.n	801571e <_svfprintf_r+0x6b2>
 801571c:	e105      	b.n	801592a <_svfprintf_r+0x8be>
 801571e:	aa26      	add	r2, sp, #152	; 0x98
 8015720:	0020      	movs	r0, r4
 8015722:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015724:	f002 fdc4 	bl	80182b0 <frexp>
 8015728:	23ff      	movs	r3, #255	; 0xff
 801572a:	2200      	movs	r2, #0
 801572c:	059b      	lsls	r3, r3, #22
 801572e:	f7ec fb81 	bl	8001e34 <__aeabi_dmul>
 8015732:	2200      	movs	r2, #0
 8015734:	2300      	movs	r3, #0
 8015736:	0004      	movs	r4, r0
 8015738:	000d      	movs	r5, r1
 801573a:	f7ea fe8f 	bl	800045c <__aeabi_dcmpeq>
 801573e:	2800      	cmp	r0, #0
 8015740:	d001      	beq.n	8015746 <_svfprintf_r+0x6da>
 8015742:	2301      	movs	r3, #1
 8015744:	9326      	str	r3, [sp, #152]	; 0x98
 8015746:	4b83      	ldr	r3, [pc, #524]	; (8015954 <_svfprintf_r+0x8e8>)
 8015748:	9317      	str	r3, [sp, #92]	; 0x5c
 801574a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801574c:	2b61      	cmp	r3, #97	; 0x61
 801574e:	d101      	bne.n	8015754 <_svfprintf_r+0x6e8>
 8015750:	4b81      	ldr	r3, [pc, #516]	; (8015958 <_svfprintf_r+0x8ec>)
 8015752:	9317      	str	r3, [sp, #92]	; 0x5c
 8015754:	9b08      	ldr	r3, [sp, #32]
 8015756:	3b01      	subs	r3, #1
 8015758:	9310      	str	r3, [sp, #64]	; 0x40
 801575a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801575c:	9318      	str	r3, [sp, #96]	; 0x60
 801575e:	2200      	movs	r2, #0
 8015760:	4b7e      	ldr	r3, [pc, #504]	; (801595c <_svfprintf_r+0x8f0>)
 8015762:	0020      	movs	r0, r4
 8015764:	0029      	movs	r1, r5
 8015766:	f7ec fb65 	bl	8001e34 <__aeabi_dmul>
 801576a:	000d      	movs	r5, r1
 801576c:	0004      	movs	r4, r0
 801576e:	f7ed f937 	bl	80029e0 <__aeabi_d2iz>
 8015772:	9021      	str	r0, [sp, #132]	; 0x84
 8015774:	f7ed f96a 	bl	8002a4c <__aeabi_i2d>
 8015778:	0002      	movs	r2, r0
 801577a:	000b      	movs	r3, r1
 801577c:	0020      	movs	r0, r4
 801577e:	0029      	movs	r1, r5
 8015780:	f7ec fdca 	bl	8002318 <__aeabi_dsub>
 8015784:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015786:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015788:	3301      	adds	r3, #1
 801578a:	930d      	str	r3, [sp, #52]	; 0x34
 801578c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801578e:	0004      	movs	r4, r0
 8015790:	5c9b      	ldrb	r3, [r3, r2]
 8015792:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015794:	000d      	movs	r5, r1
 8015796:	7013      	strb	r3, [r2, #0]
 8015798:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801579a:	9323      	str	r3, [sp, #140]	; 0x8c
 801579c:	3301      	adds	r3, #1
 801579e:	d00a      	beq.n	80157b6 <_svfprintf_r+0x74a>
 80157a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157a2:	2200      	movs	r2, #0
 80157a4:	3b01      	subs	r3, #1
 80157a6:	9310      	str	r3, [sp, #64]	; 0x40
 80157a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157aa:	9318      	str	r3, [sp, #96]	; 0x60
 80157ac:	2300      	movs	r3, #0
 80157ae:	f7ea fe55 	bl	800045c <__aeabi_dcmpeq>
 80157b2:	2800      	cmp	r0, #0
 80157b4:	d0d3      	beq.n	801575e <_svfprintf_r+0x6f2>
 80157b6:	2200      	movs	r2, #0
 80157b8:	4b69      	ldr	r3, [pc, #420]	; (8015960 <_svfprintf_r+0x8f4>)
 80157ba:	0020      	movs	r0, r4
 80157bc:	0029      	movs	r1, r5
 80157be:	f7ea fe67 	bl	8000490 <__aeabi_dcmpgt>
 80157c2:	2800      	cmp	r0, #0
 80157c4:	d126      	bne.n	8015814 <_svfprintf_r+0x7a8>
 80157c6:	2200      	movs	r2, #0
 80157c8:	4b65      	ldr	r3, [pc, #404]	; (8015960 <_svfprintf_r+0x8f4>)
 80157ca:	0020      	movs	r0, r4
 80157cc:	0029      	movs	r1, r5
 80157ce:	f7ea fe45 	bl	800045c <__aeabi_dcmpeq>
 80157d2:	2800      	cmp	r0, #0
 80157d4:	d002      	beq.n	80157dc <_svfprintf_r+0x770>
 80157d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157d8:	07db      	lsls	r3, r3, #31
 80157da:	d41b      	bmi.n	8015814 <_svfprintf_r+0x7a8>
 80157dc:	2130      	movs	r1, #48	; 0x30
 80157de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157e0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80157e2:	1898      	adds	r0, r3, r2
 80157e4:	930d      	str	r3, [sp, #52]	; 0x34
 80157e6:	1ac2      	subs	r2, r0, r3
 80157e8:	d426      	bmi.n	8015838 <_svfprintf_r+0x7cc>
 80157ea:	7019      	strb	r1, [r3, #0]
 80157ec:	3301      	adds	r3, #1
 80157ee:	e7f9      	b.n	80157e4 <_svfprintf_r+0x778>
 80157f0:	2300      	movs	r3, #0
 80157f2:	930c      	str	r3, [sp, #48]	; 0x30
 80157f4:	ab3f      	add	r3, sp, #252	; 0xfc
 80157f6:	9309      	str	r3, [sp, #36]	; 0x24
 80157f8:	e77d      	b.n	80156f6 <_svfprintf_r+0x68a>
 80157fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157fc:	930c      	str	r3, [sp, #48]	; 0x30
 80157fe:	e77a      	b.n	80156f6 <_svfprintf_r+0x68a>
 8015800:	2306      	movs	r3, #6
 8015802:	9308      	str	r3, [sp, #32]
 8015804:	e777      	b.n	80156f6 <_svfprintf_r+0x68a>
 8015806:	9b08      	ldr	r3, [sp, #32]
 8015808:	930c      	str	r3, [sp, #48]	; 0x30
 801580a:	2301      	movs	r3, #1
 801580c:	e7f9      	b.n	8015802 <_svfprintf_r+0x796>
 801580e:	930d      	str	r3, [sp, #52]	; 0x34
 8015810:	2300      	movs	r3, #0
 8015812:	e77f      	b.n	8015714 <_svfprintf_r+0x6a8>
 8015814:	2030      	movs	r0, #48	; 0x30
 8015816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015818:	932a      	str	r3, [sp, #168]	; 0xa8
 801581a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801581c:	7bda      	ldrb	r2, [r3, #15]
 801581e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015820:	3b01      	subs	r3, #1
 8015822:	932a      	str	r3, [sp, #168]	; 0xa8
 8015824:	7819      	ldrb	r1, [r3, #0]
 8015826:	4291      	cmp	r1, r2
 8015828:	d07d      	beq.n	8015926 <_svfprintf_r+0x8ba>
 801582a:	1c4a      	adds	r2, r1, #1
 801582c:	b2d2      	uxtb	r2, r2
 801582e:	2939      	cmp	r1, #57	; 0x39
 8015830:	d101      	bne.n	8015836 <_svfprintf_r+0x7ca>
 8015832:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015834:	7a92      	ldrb	r2, [r2, #10]
 8015836:	701a      	strb	r2, [r3, #0]
 8015838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801583a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801583c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801583e:	1a9b      	subs	r3, r3, r2
 8015840:	930d      	str	r3, [sp, #52]	; 0x34
 8015842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015844:	2b47      	cmp	r3, #71	; 0x47
 8015846:	d000      	beq.n	801584a <_svfprintf_r+0x7de>
 8015848:	e0d2      	b.n	80159f0 <_svfprintf_r+0x984>
 801584a:	1ceb      	adds	r3, r5, #3
 801584c:	db03      	blt.n	8015856 <_svfprintf_r+0x7ea>
 801584e:	9b08      	ldr	r3, [sp, #32]
 8015850:	42ab      	cmp	r3, r5
 8015852:	db00      	blt.n	8015856 <_svfprintf_r+0x7ea>
 8015854:	e0fd      	b.n	8015a52 <_svfprintf_r+0x9e6>
 8015856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015858:	3b02      	subs	r3, #2
 801585a:	930e      	str	r3, [sp, #56]	; 0x38
 801585c:	2238      	movs	r2, #56	; 0x38
 801585e:	466b      	mov	r3, sp
 8015860:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015862:	189b      	adds	r3, r3, r2
 8015864:	3a18      	subs	r2, #24
 8015866:	4391      	bics	r1, r2
 8015868:	1e6c      	subs	r4, r5, #1
 801586a:	000a      	movs	r2, r1
 801586c:	9426      	str	r4, [sp, #152]	; 0x98
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	2100      	movs	r1, #0
 8015872:	2a41      	cmp	r2, #65	; 0x41
 8015874:	d102      	bne.n	801587c <_svfprintf_r+0x810>
 8015876:	330f      	adds	r3, #15
 8015878:	b2db      	uxtb	r3, r3
 801587a:	3101      	adds	r1, #1
 801587c:	aa28      	add	r2, sp, #160	; 0xa0
 801587e:	7013      	strb	r3, [r2, #0]
 8015880:	232b      	movs	r3, #43	; 0x2b
 8015882:	2c00      	cmp	r4, #0
 8015884:	da02      	bge.n	801588c <_svfprintf_r+0x820>
 8015886:	2401      	movs	r4, #1
 8015888:	232d      	movs	r3, #45	; 0x2d
 801588a:	1b64      	subs	r4, r4, r5
 801588c:	7053      	strb	r3, [r2, #1]
 801588e:	2c09      	cmp	r4, #9
 8015890:	dc00      	bgt.n	8015894 <_svfprintf_r+0x828>
 8015892:	e0c7      	b.n	8015a24 <_svfprintf_r+0x9b8>
 8015894:	2537      	movs	r5, #55	; 0x37
 8015896:	ab1e      	add	r3, sp, #120	; 0x78
 8015898:	18ed      	adds	r5, r5, r3
 801589a:	1e6b      	subs	r3, r5, #1
 801589c:	0020      	movs	r0, r4
 801589e:	210a      	movs	r1, #10
 80158a0:	9308      	str	r3, [sp, #32]
 80158a2:	f7ea fdc5 	bl	8000430 <__aeabi_idivmod>
 80158a6:	1e6b      	subs	r3, r5, #1
 80158a8:	3130      	adds	r1, #48	; 0x30
 80158aa:	7019      	strb	r1, [r3, #0]
 80158ac:	0020      	movs	r0, r4
 80158ae:	210a      	movs	r1, #10
 80158b0:	f7ea fcd8 	bl	8000264 <__divsi3>
 80158b4:	0004      	movs	r4, r0
 80158b6:	2809      	cmp	r0, #9
 80158b8:	dd00      	ble.n	80158bc <_svfprintf_r+0x850>
 80158ba:	e0ac      	b.n	8015a16 <_svfprintf_r+0x9aa>
 80158bc:	232a      	movs	r3, #42	; 0x2a
 80158be:	2137      	movs	r1, #55	; 0x37
 80158c0:	aa1e      	add	r2, sp, #120	; 0x78
 80158c2:	3d02      	subs	r5, #2
 80158c4:	3430      	adds	r4, #48	; 0x30
 80158c6:	702c      	strb	r4, [r5, #0]
 80158c8:	189b      	adds	r3, r3, r2
 80158ca:	1889      	adds	r1, r1, r2
 80158cc:	001a      	movs	r2, r3
 80158ce:	428d      	cmp	r5, r1
 80158d0:	d200      	bcs.n	80158d4 <_svfprintf_r+0x868>
 80158d2:	e0a2      	b.n	8015a1a <_svfprintf_r+0x9ae>
 80158d4:	ab28      	add	r3, sp, #160	; 0xa0
 80158d6:	1ad3      	subs	r3, r2, r3
 80158d8:	931d      	str	r3, [sp, #116]	; 0x74
 80158da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80158dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158de:	4694      	mov	ip, r2
 80158e0:	4463      	add	r3, ip
 80158e2:	9308      	str	r3, [sp, #32]
 80158e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	dc01      	bgt.n	80158ee <_svfprintf_r+0x882>
 80158ea:	07f3      	lsls	r3, r6, #31
 80158ec:	d504      	bpl.n	80158f8 <_svfprintf_r+0x88c>
 80158ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80158f0:	9b08      	ldr	r3, [sp, #32]
 80158f2:	4694      	mov	ip, r2
 80158f4:	4463      	add	r3, ip
 80158f6:	9308      	str	r3, [sp, #32]
 80158f8:	2280      	movs	r2, #128	; 0x80
 80158fa:	4b1a      	ldr	r3, [pc, #104]	; (8015964 <_svfprintf_r+0x8f8>)
 80158fc:	0052      	lsls	r2, r2, #1
 80158fe:	4033      	ands	r3, r6
 8015900:	431a      	orrs	r2, r3
 8015902:	2300      	movs	r3, #0
 8015904:	001d      	movs	r5, r3
 8015906:	9220      	str	r2, [sp, #128]	; 0x80
 8015908:	9310      	str	r3, [sp, #64]	; 0x40
 801590a:	930f      	str	r3, [sp, #60]	; 0x3c
 801590c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801590e:	2b00      	cmp	r3, #0
 8015910:	d100      	bne.n	8015914 <_svfprintf_r+0x8a8>
 8015912:	e270      	b.n	8015df6 <_svfprintf_r+0xd8a>
 8015914:	231b      	movs	r3, #27
 8015916:	aa1e      	add	r2, sp, #120	; 0x78
 8015918:	189b      	adds	r3, r3, r2
 801591a:	222d      	movs	r2, #45	; 0x2d
 801591c:	701a      	strb	r2, [r3, #0]
 801591e:	2300      	movs	r3, #0
 8015920:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015922:	9317      	str	r3, [sp, #92]	; 0x5c
 8015924:	e539      	b.n	801539a <_svfprintf_r+0x32e>
 8015926:	7018      	strb	r0, [r3, #0]
 8015928:	e779      	b.n	801581e <_svfprintf_r+0x7b2>
 801592a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801592c:	2b46      	cmp	r3, #70	; 0x46
 801592e:	d01b      	beq.n	8015968 <_svfprintf_r+0x8fc>
 8015930:	9d08      	ldr	r5, [sp, #32]
 8015932:	2b45      	cmp	r3, #69	; 0x45
 8015934:	d101      	bne.n	801593a <_svfprintf_r+0x8ce>
 8015936:	9b08      	ldr	r3, [sp, #32]
 8015938:	1c5d      	adds	r5, r3, #1
 801593a:	2302      	movs	r3, #2
 801593c:	e016      	b.n	801596c <_svfprintf_r+0x900>
 801593e:	46c0      	nop			; (mov r8, r8)
 8015940:	7fefffff 	.word	0x7fefffff
 8015944:	0801baec 	.word	0x0801baec
 8015948:	0801bae8 	.word	0x0801bae8
 801594c:	0801baf4 	.word	0x0801baf4
 8015950:	0801baf0 	.word	0x0801baf0
 8015954:	0801bb09 	.word	0x0801bb09
 8015958:	0801baf8 	.word	0x0801baf8
 801595c:	40300000 	.word	0x40300000
 8015960:	3fe00000 	.word	0x3fe00000
 8015964:	fffffbff 	.word	0xfffffbff
 8015968:	2303      	movs	r3, #3
 801596a:	9d08      	ldr	r5, [sp, #32]
 801596c:	aa2a      	add	r2, sp, #168	; 0xa8
 801596e:	9204      	str	r2, [sp, #16]
 8015970:	aa27      	add	r2, sp, #156	; 0x9c
 8015972:	9203      	str	r2, [sp, #12]
 8015974:	aa26      	add	r2, sp, #152	; 0x98
 8015976:	9202      	str	r2, [sp, #8]
 8015978:	9300      	str	r3, [sp, #0]
 801597a:	9501      	str	r5, [sp, #4]
 801597c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801597e:	0022      	movs	r2, r4
 8015980:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015982:	f000 fe79 	bl	8016678 <_dtoa_r>
 8015986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015988:	9009      	str	r0, [sp, #36]	; 0x24
 801598a:	2b47      	cmp	r3, #71	; 0x47
 801598c:	d101      	bne.n	8015992 <_svfprintf_r+0x926>
 801598e:	07f3      	lsls	r3, r6, #31
 8015990:	d524      	bpl.n	80159dc <_svfprintf_r+0x970>
 8015992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015994:	195b      	adds	r3, r3, r5
 8015996:	9310      	str	r3, [sp, #64]	; 0x40
 8015998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801599a:	2b46      	cmp	r3, #70	; 0x46
 801599c:	d113      	bne.n	80159c6 <_svfprintf_r+0x95a>
 801599e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159a0:	781b      	ldrb	r3, [r3, #0]
 80159a2:	2b30      	cmp	r3, #48	; 0x30
 80159a4:	d10a      	bne.n	80159bc <_svfprintf_r+0x950>
 80159a6:	2200      	movs	r2, #0
 80159a8:	2300      	movs	r3, #0
 80159aa:	0020      	movs	r0, r4
 80159ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80159ae:	f7ea fd55 	bl	800045c <__aeabi_dcmpeq>
 80159b2:	2800      	cmp	r0, #0
 80159b4:	d102      	bne.n	80159bc <_svfprintf_r+0x950>
 80159b6:	2301      	movs	r3, #1
 80159b8:	1b5d      	subs	r5, r3, r5
 80159ba:	9526      	str	r5, [sp, #152]	; 0x98
 80159bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80159be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159c0:	4694      	mov	ip, r2
 80159c2:	4463      	add	r3, ip
 80159c4:	9310      	str	r3, [sp, #64]	; 0x40
 80159c6:	2200      	movs	r2, #0
 80159c8:	2300      	movs	r3, #0
 80159ca:	0020      	movs	r0, r4
 80159cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80159ce:	f7ea fd45 	bl	800045c <__aeabi_dcmpeq>
 80159d2:	2230      	movs	r2, #48	; 0x30
 80159d4:	2800      	cmp	r0, #0
 80159d6:	d006      	beq.n	80159e6 <_svfprintf_r+0x97a>
 80159d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159da:	932a      	str	r3, [sp, #168]	; 0xa8
 80159dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80159de:	e72c      	b.n	801583a <_svfprintf_r+0x7ce>
 80159e0:	1c59      	adds	r1, r3, #1
 80159e2:	912a      	str	r1, [sp, #168]	; 0xa8
 80159e4:	701a      	strb	r2, [r3, #0]
 80159e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80159e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80159ea:	4299      	cmp	r1, r3
 80159ec:	d8f8      	bhi.n	80159e0 <_svfprintf_r+0x974>
 80159ee:	e7f5      	b.n	80159dc <_svfprintf_r+0x970>
 80159f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159f2:	2b46      	cmp	r3, #70	; 0x46
 80159f4:	d000      	beq.n	80159f8 <_svfprintf_r+0x98c>
 80159f6:	e731      	b.n	801585c <_svfprintf_r+0x7f0>
 80159f8:	9b08      	ldr	r3, [sp, #32]
 80159fa:	2d00      	cmp	r5, #0
 80159fc:	dd21      	ble.n	8015a42 <_svfprintf_r+0x9d6>
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d101      	bne.n	8015a06 <_svfprintf_r+0x99a>
 8015a02:	07f3      	lsls	r3, r6, #31
 8015a04:	d54a      	bpl.n	8015a9c <_svfprintf_r+0xa30>
 8015a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a08:	18eb      	adds	r3, r5, r3
 8015a0a:	9a08      	ldr	r2, [sp, #32]
 8015a0c:	18d3      	adds	r3, r2, r3
 8015a0e:	9308      	str	r3, [sp, #32]
 8015a10:	2366      	movs	r3, #102	; 0x66
 8015a12:	930e      	str	r3, [sp, #56]	; 0x38
 8015a14:	e034      	b.n	8015a80 <_svfprintf_r+0xa14>
 8015a16:	9d08      	ldr	r5, [sp, #32]
 8015a18:	e73f      	b.n	801589a <_svfprintf_r+0x82e>
 8015a1a:	782a      	ldrb	r2, [r5, #0]
 8015a1c:	3501      	adds	r5, #1
 8015a1e:	701a      	strb	r2, [r3, #0]
 8015a20:	3301      	adds	r3, #1
 8015a22:	e753      	b.n	80158cc <_svfprintf_r+0x860>
 8015a24:	232a      	movs	r3, #42	; 0x2a
 8015a26:	aa1e      	add	r2, sp, #120	; 0x78
 8015a28:	189b      	adds	r3, r3, r2
 8015a2a:	2900      	cmp	r1, #0
 8015a2c:	d105      	bne.n	8015a3a <_svfprintf_r+0x9ce>
 8015a2e:	2230      	movs	r2, #48	; 0x30
 8015a30:	ab28      	add	r3, sp, #160	; 0xa0
 8015a32:	709a      	strb	r2, [r3, #2]
 8015a34:	232b      	movs	r3, #43	; 0x2b
 8015a36:	aa1e      	add	r2, sp, #120	; 0x78
 8015a38:	189b      	adds	r3, r3, r2
 8015a3a:	3430      	adds	r4, #48	; 0x30
 8015a3c:	1c5a      	adds	r2, r3, #1
 8015a3e:	701c      	strb	r4, [r3, #0]
 8015a40:	e748      	b.n	80158d4 <_svfprintf_r+0x868>
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d102      	bne.n	8015a4c <_svfprintf_r+0x9e0>
 8015a46:	3301      	adds	r3, #1
 8015a48:	421e      	tst	r6, r3
 8015a4a:	d029      	beq.n	8015aa0 <_svfprintf_r+0xa34>
 8015a4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a4e:	3301      	adds	r3, #1
 8015a50:	e7db      	b.n	8015a0a <_svfprintf_r+0x99e>
 8015a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a54:	42ab      	cmp	r3, r5
 8015a56:	dc06      	bgt.n	8015a66 <_svfprintf_r+0x9fa>
 8015a58:	07f3      	lsls	r3, r6, #31
 8015a5a:	d524      	bpl.n	8015aa6 <_svfprintf_r+0xa3a>
 8015a5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a5e:	18eb      	adds	r3, r5, r3
 8015a60:	9308      	str	r3, [sp, #32]
 8015a62:	2367      	movs	r3, #103	; 0x67
 8015a64:	e7d5      	b.n	8015a12 <_svfprintf_r+0x9a6>
 8015a66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a6a:	4694      	mov	ip, r2
 8015a6c:	4463      	add	r3, ip
 8015a6e:	9308      	str	r3, [sp, #32]
 8015a70:	2367      	movs	r3, #103	; 0x67
 8015a72:	930e      	str	r3, [sp, #56]	; 0x38
 8015a74:	2d00      	cmp	r5, #0
 8015a76:	dc03      	bgt.n	8015a80 <_svfprintf_r+0xa14>
 8015a78:	9b08      	ldr	r3, [sp, #32]
 8015a7a:	1b5b      	subs	r3, r3, r5
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	9308      	str	r3, [sp, #32]
 8015a80:	2380      	movs	r3, #128	; 0x80
 8015a82:	00db      	lsls	r3, r3, #3
 8015a84:	401e      	ands	r6, r3
 8015a86:	2300      	movs	r3, #0
 8015a88:	960f      	str	r6, [sp, #60]	; 0x3c
 8015a8a:	9310      	str	r3, [sp, #64]	; 0x40
 8015a8c:	2e00      	cmp	r6, #0
 8015a8e:	d100      	bne.n	8015a92 <_svfprintf_r+0xa26>
 8015a90:	e73c      	b.n	801590c <_svfprintf_r+0x8a0>
 8015a92:	2d00      	cmp	r5, #0
 8015a94:	dc27      	bgt.n	8015ae6 <_svfprintf_r+0xa7a>
 8015a96:	2300      	movs	r3, #0
 8015a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a9a:	e737      	b.n	801590c <_svfprintf_r+0x8a0>
 8015a9c:	9508      	str	r5, [sp, #32]
 8015a9e:	e7b7      	b.n	8015a10 <_svfprintf_r+0x9a4>
 8015aa0:	2266      	movs	r2, #102	; 0x66
 8015aa2:	920e      	str	r2, [sp, #56]	; 0x38
 8015aa4:	e7eb      	b.n	8015a7e <_svfprintf_r+0xa12>
 8015aa6:	9508      	str	r5, [sp, #32]
 8015aa8:	e7db      	b.n	8015a62 <_svfprintf_r+0x9f6>
 8015aaa:	42ab      	cmp	r3, r5
 8015aac:	da0e      	bge.n	8015acc <_svfprintf_r+0xa60>
 8015aae:	1aed      	subs	r5, r5, r3
 8015ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ab2:	785b      	ldrb	r3, [r3, #1]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d012      	beq.n	8015ade <_svfprintf_r+0xa72>
 8015ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015aba:	3301      	adds	r3, #1
 8015abc:	930f      	str	r3, [sp, #60]	; 0x3c
 8015abe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ac0:	3301      	adds	r3, #1
 8015ac2:	9313      	str	r3, [sp, #76]	; 0x4c
 8015ac4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	2bff      	cmp	r3, #255	; 0xff
 8015aca:	d1ee      	bne.n	8015aaa <_svfprintf_r+0xa3e>
 8015acc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ad0:	189b      	adds	r3, r3, r2
 8015ad2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015ad4:	4353      	muls	r3, r2
 8015ad6:	9a08      	ldr	r2, [sp, #32]
 8015ad8:	189b      	adds	r3, r3, r2
 8015ada:	9308      	str	r3, [sp, #32]
 8015adc:	e716      	b.n	801590c <_svfprintf_r+0x8a0>
 8015ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	9310      	str	r3, [sp, #64]	; 0x40
 8015ae4:	e7ee      	b.n	8015ac4 <_svfprintf_r+0xa58>
 8015ae6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ae8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015aea:	e7eb      	b.n	8015ac4 <_svfprintf_r+0xa58>
 8015aec:	0022      	movs	r2, r4
 8015aee:	ca08      	ldmia	r2!, {r3}
 8015af0:	9212      	str	r2, [sp, #72]	; 0x48
 8015af2:	06b2      	lsls	r2, r6, #26
 8015af4:	d508      	bpl.n	8015b08 <_svfprintf_r+0xa9c>
 8015af6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015af8:	601a      	str	r2, [r3, #0]
 8015afa:	17d2      	asrs	r2, r2, #31
 8015afc:	605a      	str	r2, [r3, #4]
 8015afe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b00:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015b02:	9309      	str	r3, [sp, #36]	; 0x24
 8015b04:	f7ff faeb 	bl	80150de <_svfprintf_r+0x72>
 8015b08:	06f2      	lsls	r2, r6, #27
 8015b0a:	d502      	bpl.n	8015b12 <_svfprintf_r+0xaa6>
 8015b0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015b0e:	601a      	str	r2, [r3, #0]
 8015b10:	e7f5      	b.n	8015afe <_svfprintf_r+0xa92>
 8015b12:	0672      	lsls	r2, r6, #25
 8015b14:	d502      	bpl.n	8015b1c <_svfprintf_r+0xab0>
 8015b16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015b18:	801a      	strh	r2, [r3, #0]
 8015b1a:	e7f0      	b.n	8015afe <_svfprintf_r+0xa92>
 8015b1c:	05b2      	lsls	r2, r6, #22
 8015b1e:	d5f5      	bpl.n	8015b0c <_svfprintf_r+0xaa0>
 8015b20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015b22:	701a      	strb	r2, [r3, #0]
 8015b24:	e7eb      	b.n	8015afe <_svfprintf_r+0xa92>
 8015b26:	2310      	movs	r3, #16
 8015b28:	431e      	orrs	r6, r3
 8015b2a:	2220      	movs	r2, #32
 8015b2c:	4032      	ands	r2, r6
 8015b2e:	d025      	beq.n	8015b7c <_svfprintf_r+0xb10>
 8015b30:	2307      	movs	r3, #7
 8015b32:	3407      	adds	r4, #7
 8015b34:	439c      	bics	r4, r3
 8015b36:	0023      	movs	r3, r4
 8015b38:	3308      	adds	r3, #8
 8015b3a:	9312      	str	r3, [sp, #72]	; 0x48
 8015b3c:	6823      	ldr	r3, [r4, #0]
 8015b3e:	6864      	ldr	r4, [r4, #4]
 8015b40:	9306      	str	r3, [sp, #24]
 8015b42:	9407      	str	r4, [sp, #28]
 8015b44:	4bc2      	ldr	r3, [pc, #776]	; (8015e50 <_svfprintf_r+0xde4>)
 8015b46:	401e      	ands	r6, r3
 8015b48:	2300      	movs	r3, #0
 8015b4a:	221b      	movs	r2, #27
 8015b4c:	a91e      	add	r1, sp, #120	; 0x78
 8015b4e:	1852      	adds	r2, r2, r1
 8015b50:	2100      	movs	r1, #0
 8015b52:	7011      	strb	r1, [r2, #0]
 8015b54:	9a08      	ldr	r2, [sp, #32]
 8015b56:	3201      	adds	r2, #1
 8015b58:	d100      	bne.n	8015b5c <_svfprintf_r+0xaf0>
 8015b5a:	e0a6      	b.n	8015caa <_svfprintf_r+0xc3e>
 8015b5c:	0032      	movs	r2, r6
 8015b5e:	2180      	movs	r1, #128	; 0x80
 8015b60:	9807      	ldr	r0, [sp, #28]
 8015b62:	438e      	bics	r6, r1
 8015b64:	9906      	ldr	r1, [sp, #24]
 8015b66:	4301      	orrs	r1, r0
 8015b68:	d000      	beq.n	8015b6c <_svfprintf_r+0xb00>
 8015b6a:	e09e      	b.n	8015caa <_svfprintf_r+0xc3e>
 8015b6c:	9908      	ldr	r1, [sp, #32]
 8015b6e:	2900      	cmp	r1, #0
 8015b70:	d100      	bne.n	8015b74 <_svfprintf_r+0xb08>
 8015b72:	e125      	b.n	8015dc0 <_svfprintf_r+0xd54>
 8015b74:	2b01      	cmp	r3, #1
 8015b76:	d000      	beq.n	8015b7a <_svfprintf_r+0xb0e>
 8015b78:	e09a      	b.n	8015cb0 <_svfprintf_r+0xc44>
 8015b7a:	e518      	b.n	80155ae <_svfprintf_r+0x542>
 8015b7c:	1d23      	adds	r3, r4, #4
 8015b7e:	9312      	str	r3, [sp, #72]	; 0x48
 8015b80:	2310      	movs	r3, #16
 8015b82:	4033      	ands	r3, r6
 8015b84:	d003      	beq.n	8015b8e <_svfprintf_r+0xb22>
 8015b86:	6823      	ldr	r3, [r4, #0]
 8015b88:	9306      	str	r3, [sp, #24]
 8015b8a:	9207      	str	r2, [sp, #28]
 8015b8c:	e7da      	b.n	8015b44 <_svfprintf_r+0xad8>
 8015b8e:	2240      	movs	r2, #64	; 0x40
 8015b90:	4032      	ands	r2, r6
 8015b92:	d004      	beq.n	8015b9e <_svfprintf_r+0xb32>
 8015b94:	6822      	ldr	r2, [r4, #0]
 8015b96:	b292      	uxth	r2, r2
 8015b98:	9206      	str	r2, [sp, #24]
 8015b9a:	9307      	str	r3, [sp, #28]
 8015b9c:	e7d2      	b.n	8015b44 <_svfprintf_r+0xad8>
 8015b9e:	2380      	movs	r3, #128	; 0x80
 8015ba0:	009b      	lsls	r3, r3, #2
 8015ba2:	4033      	ands	r3, r6
 8015ba4:	d002      	beq.n	8015bac <_svfprintf_r+0xb40>
 8015ba6:	6823      	ldr	r3, [r4, #0]
 8015ba8:	b2db      	uxtb	r3, r3
 8015baa:	e7ed      	b.n	8015b88 <_svfprintf_r+0xb1c>
 8015bac:	6822      	ldr	r2, [r4, #0]
 8015bae:	e7f3      	b.n	8015b98 <_svfprintf_r+0xb2c>
 8015bb0:	1d23      	adds	r3, r4, #4
 8015bb2:	49a8      	ldr	r1, [pc, #672]	; (8015e54 <_svfprintf_r+0xde8>)
 8015bb4:	aa25      	add	r2, sp, #148	; 0x94
 8015bb6:	9312      	str	r3, [sp, #72]	; 0x48
 8015bb8:	6823      	ldr	r3, [r4, #0]
 8015bba:	8011      	strh	r1, [r2, #0]
 8015bbc:	4aa6      	ldr	r2, [pc, #664]	; (8015e58 <_svfprintf_r+0xdec>)
 8015bbe:	9306      	str	r3, [sp, #24]
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	921e      	str	r2, [sp, #120]	; 0x78
 8015bc4:	2278      	movs	r2, #120	; 0x78
 8015bc6:	9307      	str	r3, [sp, #28]
 8015bc8:	3302      	adds	r3, #2
 8015bca:	431e      	orrs	r6, r3
 8015bcc:	920e      	str	r2, [sp, #56]	; 0x38
 8015bce:	e7bc      	b.n	8015b4a <_svfprintf_r+0xade>
 8015bd0:	1d23      	adds	r3, r4, #4
 8015bd2:	9312      	str	r3, [sp, #72]	; 0x48
 8015bd4:	6823      	ldr	r3, [r4, #0]
 8015bd6:	2400      	movs	r4, #0
 8015bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8015bda:	231b      	movs	r3, #27
 8015bdc:	aa1e      	add	r2, sp, #120	; 0x78
 8015bde:	189b      	adds	r3, r3, r2
 8015be0:	701c      	strb	r4, [r3, #0]
 8015be2:	9b08      	ldr	r3, [sp, #32]
 8015be4:	3301      	adds	r3, #1
 8015be6:	d00e      	beq.n	8015c06 <_svfprintf_r+0xb9a>
 8015be8:	9a08      	ldr	r2, [sp, #32]
 8015bea:	0021      	movs	r1, r4
 8015bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015bee:	f001 ff79 	bl	8017ae4 <memchr>
 8015bf2:	900c      	str	r0, [sp, #48]	; 0x30
 8015bf4:	42a0      	cmp	r0, r4
 8015bf6:	d100      	bne.n	8015bfa <_svfprintf_r+0xb8e>
 8015bf8:	e100      	b.n	8015dfc <_svfprintf_r+0xd90>
 8015bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bfc:	1a83      	subs	r3, r0, r2
 8015bfe:	9308      	str	r3, [sp, #32]
 8015c00:	940c      	str	r4, [sp, #48]	; 0x30
 8015c02:	0023      	movs	r3, r4
 8015c04:	e527      	b.n	8015656 <_svfprintf_r+0x5ea>
 8015c06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c08:	f7ea fa86 	bl	8000118 <strlen>
 8015c0c:	9008      	str	r0, [sp, #32]
 8015c0e:	e7f7      	b.n	8015c00 <_svfprintf_r+0xb94>
 8015c10:	2310      	movs	r3, #16
 8015c12:	431e      	orrs	r6, r3
 8015c14:	2220      	movs	r2, #32
 8015c16:	4032      	ands	r2, r6
 8015c18:	d00b      	beq.n	8015c32 <_svfprintf_r+0xbc6>
 8015c1a:	2307      	movs	r3, #7
 8015c1c:	3407      	adds	r4, #7
 8015c1e:	439c      	bics	r4, r3
 8015c20:	0023      	movs	r3, r4
 8015c22:	3308      	adds	r3, #8
 8015c24:	9312      	str	r3, [sp, #72]	; 0x48
 8015c26:	6823      	ldr	r3, [r4, #0]
 8015c28:	6864      	ldr	r4, [r4, #4]
 8015c2a:	9306      	str	r3, [sp, #24]
 8015c2c:	9407      	str	r4, [sp, #28]
 8015c2e:	2301      	movs	r3, #1
 8015c30:	e78b      	b.n	8015b4a <_svfprintf_r+0xade>
 8015c32:	1d23      	adds	r3, r4, #4
 8015c34:	9312      	str	r3, [sp, #72]	; 0x48
 8015c36:	2310      	movs	r3, #16
 8015c38:	4033      	ands	r3, r6
 8015c3a:	d003      	beq.n	8015c44 <_svfprintf_r+0xbd8>
 8015c3c:	6823      	ldr	r3, [r4, #0]
 8015c3e:	9306      	str	r3, [sp, #24]
 8015c40:	9207      	str	r2, [sp, #28]
 8015c42:	e7f4      	b.n	8015c2e <_svfprintf_r+0xbc2>
 8015c44:	2240      	movs	r2, #64	; 0x40
 8015c46:	4032      	ands	r2, r6
 8015c48:	d004      	beq.n	8015c54 <_svfprintf_r+0xbe8>
 8015c4a:	6822      	ldr	r2, [r4, #0]
 8015c4c:	b292      	uxth	r2, r2
 8015c4e:	9206      	str	r2, [sp, #24]
 8015c50:	9307      	str	r3, [sp, #28]
 8015c52:	e7ec      	b.n	8015c2e <_svfprintf_r+0xbc2>
 8015c54:	2380      	movs	r3, #128	; 0x80
 8015c56:	009b      	lsls	r3, r3, #2
 8015c58:	4033      	ands	r3, r6
 8015c5a:	d002      	beq.n	8015c62 <_svfprintf_r+0xbf6>
 8015c5c:	6823      	ldr	r3, [r4, #0]
 8015c5e:	b2db      	uxtb	r3, r3
 8015c60:	e7ed      	b.n	8015c3e <_svfprintf_r+0xbd2>
 8015c62:	6822      	ldr	r2, [r4, #0]
 8015c64:	e7f3      	b.n	8015c4e <_svfprintf_r+0xbe2>
 8015c66:	4b7c      	ldr	r3, [pc, #496]	; (8015e58 <_svfprintf_r+0xdec>)
 8015c68:	f7ff fad9 	bl	801521e <_svfprintf_r+0x1b2>
 8015c6c:	1d23      	adds	r3, r4, #4
 8015c6e:	9312      	str	r3, [sp, #72]	; 0x48
 8015c70:	2310      	movs	r3, #16
 8015c72:	4033      	ands	r3, r6
 8015c74:	d004      	beq.n	8015c80 <_svfprintf_r+0xc14>
 8015c76:	6823      	ldr	r3, [r4, #0]
 8015c78:	9306      	str	r3, [sp, #24]
 8015c7a:	9207      	str	r2, [sp, #28]
 8015c7c:	f7ff fadf 	bl	801523e <_svfprintf_r+0x1d2>
 8015c80:	2240      	movs	r2, #64	; 0x40
 8015c82:	4032      	ands	r2, r6
 8015c84:	d005      	beq.n	8015c92 <_svfprintf_r+0xc26>
 8015c86:	6822      	ldr	r2, [r4, #0]
 8015c88:	b292      	uxth	r2, r2
 8015c8a:	9206      	str	r2, [sp, #24]
 8015c8c:	9307      	str	r3, [sp, #28]
 8015c8e:	f7ff fad6 	bl	801523e <_svfprintf_r+0x1d2>
 8015c92:	2380      	movs	r3, #128	; 0x80
 8015c94:	009b      	lsls	r3, r3, #2
 8015c96:	4033      	ands	r3, r6
 8015c98:	d002      	beq.n	8015ca0 <_svfprintf_r+0xc34>
 8015c9a:	6823      	ldr	r3, [r4, #0]
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	e7eb      	b.n	8015c78 <_svfprintf_r+0xc0c>
 8015ca0:	6822      	ldr	r2, [r4, #0]
 8015ca2:	e7f2      	b.n	8015c8a <_svfprintf_r+0xc1e>
 8015ca4:	0032      	movs	r2, r6
 8015ca6:	2301      	movs	r3, #1
 8015ca8:	e759      	b.n	8015b5e <_svfprintf_r+0xaf2>
 8015caa:	2b01      	cmp	r3, #1
 8015cac:	d100      	bne.n	8015cb0 <_svfprintf_r+0xc44>
 8015cae:	e476      	b.n	801559e <_svfprintf_r+0x532>
 8015cb0:	2b02      	cmp	r3, #2
 8015cb2:	d06b      	beq.n	8015d8c <_svfprintf_r+0xd20>
 8015cb4:	2507      	movs	r5, #7
 8015cb6:	ab58      	add	r3, sp, #352	; 0x160
 8015cb8:	1e5a      	subs	r2, r3, #1
 8015cba:	9209      	str	r2, [sp, #36]	; 0x24
 8015cbc:	9a06      	ldr	r2, [sp, #24]
 8015cbe:	1e59      	subs	r1, r3, #1
 8015cc0:	402a      	ands	r2, r5
 8015cc2:	3230      	adds	r2, #48	; 0x30
 8015cc4:	700a      	strb	r2, [r1, #0]
 8015cc6:	9907      	ldr	r1, [sp, #28]
 8015cc8:	074c      	lsls	r4, r1, #29
 8015cca:	9906      	ldr	r1, [sp, #24]
 8015ccc:	08c8      	lsrs	r0, r1, #3
 8015cce:	9907      	ldr	r1, [sp, #28]
 8015cd0:	4304      	orrs	r4, r0
 8015cd2:	08c9      	lsrs	r1, r1, #3
 8015cd4:	9107      	str	r1, [sp, #28]
 8015cd6:	0021      	movs	r1, r4
 8015cd8:	9807      	ldr	r0, [sp, #28]
 8015cda:	9406      	str	r4, [sp, #24]
 8015cdc:	4301      	orrs	r1, r0
 8015cde:	d111      	bne.n	8015d04 <_svfprintf_r+0xc98>
 8015ce0:	07f1      	lsls	r1, r6, #31
 8015ce2:	d502      	bpl.n	8015cea <_svfprintf_r+0xc7e>
 8015ce4:	3b02      	subs	r3, #2
 8015ce6:	2a30      	cmp	r2, #48	; 0x30
 8015ce8:	d173      	bne.n	8015dd2 <_svfprintf_r+0xd66>
 8015cea:	9b08      	ldr	r3, [sp, #32]
 8015cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015cee:	9317      	str	r3, [sp, #92]	; 0x5c
 8015cf0:	ab58      	add	r3, sp, #352	; 0x160
 8015cf2:	1a9b      	subs	r3, r3, r2
 8015cf4:	9308      	str	r3, [sp, #32]
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	930c      	str	r3, [sp, #48]	; 0x30
 8015cfa:	9310      	str	r3, [sp, #64]	; 0x40
 8015cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cfe:	001d      	movs	r5, r3
 8015d00:	f7ff fb4b 	bl	801539a <_svfprintf_r+0x32e>
 8015d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d06:	e7d7      	b.n	8015cb8 <_svfprintf_r+0xc4c>
 8015d08:	2480      	movs	r4, #128	; 0x80
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	00e4      	lsls	r4, r4, #3
 8015d0e:	930d      	str	r3, [sp, #52]	; 0x34
 8015d10:	4034      	ands	r4, r6
 8015d12:	ab58      	add	r3, sp, #352	; 0x160
 8015d14:	3b01      	subs	r3, #1
 8015d16:	9309      	str	r3, [sp, #36]	; 0x24
 8015d18:	220a      	movs	r2, #10
 8015d1a:	9806      	ldr	r0, [sp, #24]
 8015d1c:	9907      	ldr	r1, [sp, #28]
 8015d1e:	2300      	movs	r3, #0
 8015d20:	f7ea fc04 	bl	800052c <__aeabi_uldivmod>
 8015d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d26:	3230      	adds	r2, #48	; 0x30
 8015d28:	701a      	strb	r2, [r3, #0]
 8015d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d2c:	3301      	adds	r3, #1
 8015d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8015d30:	2c00      	cmp	r4, #0
 8015d32:	d01d      	beq.n	8015d70 <_svfprintf_r+0xd04>
 8015d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015d38:	781b      	ldrb	r3, [r3, #0]
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d118      	bne.n	8015d70 <_svfprintf_r+0xd04>
 8015d3e:	2aff      	cmp	r2, #255	; 0xff
 8015d40:	d016      	beq.n	8015d70 <_svfprintf_r+0xd04>
 8015d42:	9b07      	ldr	r3, [sp, #28]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d102      	bne.n	8015d4e <_svfprintf_r+0xce2>
 8015d48:	9b06      	ldr	r3, [sp, #24]
 8015d4a:	2b09      	cmp	r3, #9
 8015d4c:	d910      	bls.n	8015d70 <_svfprintf_r+0xd04>
 8015d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d50:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015d52:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8015d54:	1a9b      	subs	r3, r3, r2
 8015d56:	0018      	movs	r0, r3
 8015d58:	9309      	str	r3, [sp, #36]	; 0x24
 8015d5a:	f7fe fa52 	bl	8014202 <strncpy>
 8015d5e:	2200      	movs	r2, #0
 8015d60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d62:	920d      	str	r2, [sp, #52]	; 0x34
 8015d64:	785b      	ldrb	r3, [r3, #1]
 8015d66:	1e5a      	subs	r2, r3, #1
 8015d68:	4193      	sbcs	r3, r2
 8015d6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015d6c:	18d3      	adds	r3, r2, r3
 8015d6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015d70:	220a      	movs	r2, #10
 8015d72:	9806      	ldr	r0, [sp, #24]
 8015d74:	9907      	ldr	r1, [sp, #28]
 8015d76:	2300      	movs	r3, #0
 8015d78:	f7ea fbd8 	bl	800052c <__aeabi_uldivmod>
 8015d7c:	9006      	str	r0, [sp, #24]
 8015d7e:	9107      	str	r1, [sp, #28]
 8015d80:	9b06      	ldr	r3, [sp, #24]
 8015d82:	9a07      	ldr	r2, [sp, #28]
 8015d84:	4313      	orrs	r3, r2
 8015d86:	d0b0      	beq.n	8015cea <_svfprintf_r+0xc7e>
 8015d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d8a:	e7c3      	b.n	8015d14 <_svfprintf_r+0xca8>
 8015d8c:	200f      	movs	r0, #15
 8015d8e:	ab58      	add	r3, sp, #352	; 0x160
 8015d90:	9309      	str	r3, [sp, #36]	; 0x24
 8015d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015d96:	3b01      	subs	r3, #1
 8015d98:	9309      	str	r3, [sp, #36]	; 0x24
 8015d9a:	9b06      	ldr	r3, [sp, #24]
 8015d9c:	4003      	ands	r3, r0
 8015d9e:	5cd3      	ldrb	r3, [r2, r3]
 8015da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015da2:	7013      	strb	r3, [r2, #0]
 8015da4:	9b07      	ldr	r3, [sp, #28]
 8015da6:	0719      	lsls	r1, r3, #28
 8015da8:	9b06      	ldr	r3, [sp, #24]
 8015daa:	091a      	lsrs	r2, r3, #4
 8015dac:	9b07      	ldr	r3, [sp, #28]
 8015dae:	4311      	orrs	r1, r2
 8015db0:	091b      	lsrs	r3, r3, #4
 8015db2:	9307      	str	r3, [sp, #28]
 8015db4:	000b      	movs	r3, r1
 8015db6:	9a07      	ldr	r2, [sp, #28]
 8015db8:	9106      	str	r1, [sp, #24]
 8015dba:	4313      	orrs	r3, r2
 8015dbc:	d1e9      	bne.n	8015d92 <_svfprintf_r+0xd26>
 8015dbe:	e794      	b.n	8015cea <_svfprintf_r+0xc7e>
 8015dc0:	a958      	add	r1, sp, #352	; 0x160
 8015dc2:	9109      	str	r1, [sp, #36]	; 0x24
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d190      	bne.n	8015cea <_svfprintf_r+0xc7e>
 8015dc8:	07d3      	lsls	r3, r2, #31
 8015dca:	d58e      	bpl.n	8015cea <_svfprintf_r+0xc7e>
 8015dcc:	23e7      	movs	r3, #231	; 0xe7
 8015dce:	aa1e      	add	r2, sp, #120	; 0x78
 8015dd0:	189b      	adds	r3, r3, r2
 8015dd2:	2230      	movs	r2, #48	; 0x30
 8015dd4:	f7ff fbf0 	bl	80155b8 <_svfprintf_r+0x54c>
 8015dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d100      	bne.n	8015de0 <_svfprintf_r+0xd74>
 8015dde:	e38a      	b.n	80164f6 <_svfprintf_r+0x148a>
 8015de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015de2:	ab3f      	add	r3, sp, #252	; 0xfc
 8015de4:	701a      	strb	r2, [r3, #0]
 8015de6:	221b      	movs	r2, #27
 8015de8:	2000      	movs	r0, #0
 8015dea:	a91e      	add	r1, sp, #120	; 0x78
 8015dec:	1852      	adds	r2, r2, r1
 8015dee:	7010      	strb	r0, [r2, #0]
 8015df0:	9412      	str	r4, [sp, #72]	; 0x48
 8015df2:	f7ff faca 	bl	801538a <_svfprintf_r+0x31e>
 8015df6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015df8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015dfa:	e592      	b.n	8015922 <_svfprintf_r+0x8b6>
 8015dfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015dfe:	e42a      	b.n	8015656 <_svfprintf_r+0x5ea>
 8015e00:	2010      	movs	r0, #16
 8015e02:	1812      	adds	r2, r2, r0
 8015e04:	6078      	str	r0, [r7, #4]
 8015e06:	922e      	str	r2, [sp, #184]	; 0xb8
 8015e08:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e0a:	2b07      	cmp	r3, #7
 8015e0c:	dd08      	ble.n	8015e20 <_svfprintf_r+0xdb4>
 8015e0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e14:	f002 fa7e 	bl	8018314 <__ssprint_r>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d000      	beq.n	8015e1e <_svfprintf_r+0xdb2>
 8015e1c:	e34a      	b.n	80164b4 <_svfprintf_r+0x1448>
 8015e1e:	a92f      	add	r1, sp, #188	; 0xbc
 8015e20:	3c10      	subs	r4, #16
 8015e22:	000f      	movs	r7, r1
 8015e24:	f7ff fad8 	bl	80153d8 <_svfprintf_r+0x36c>
 8015e28:	2010      	movs	r0, #16
 8015e2a:	1812      	adds	r2, r2, r0
 8015e2c:	6078      	str	r0, [r7, #4]
 8015e2e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015e30:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e32:	2b07      	cmp	r3, #7
 8015e34:	dd08      	ble.n	8015e48 <_svfprintf_r+0xddc>
 8015e36:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e3c:	f002 fa6a 	bl	8018314 <__ssprint_r>
 8015e40:	2800      	cmp	r0, #0
 8015e42:	d000      	beq.n	8015e46 <_svfprintf_r+0xdda>
 8015e44:	e336      	b.n	80164b4 <_svfprintf_r+0x1448>
 8015e46:	a92f      	add	r1, sp, #188	; 0xbc
 8015e48:	3c10      	subs	r4, #16
 8015e4a:	000f      	movs	r7, r1
 8015e4c:	f7ff fb24 	bl	8015498 <_svfprintf_r+0x42c>
 8015e50:	fffffbff 	.word	0xfffffbff
 8015e54:	00007830 	.word	0x00007830
 8015e58:	0801baf8 	.word	0x0801baf8
 8015e5c:	2010      	movs	r0, #16
 8015e5e:	1812      	adds	r2, r2, r0
 8015e60:	6078      	str	r0, [r7, #4]
 8015e62:	922e      	str	r2, [sp, #184]	; 0xb8
 8015e64:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e66:	2b07      	cmp	r3, #7
 8015e68:	dd08      	ble.n	8015e7c <_svfprintf_r+0xe10>
 8015e6a:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e70:	f002 fa50 	bl	8018314 <__ssprint_r>
 8015e74:	2800      	cmp	r0, #0
 8015e76:	d000      	beq.n	8015e7a <_svfprintf_r+0xe0e>
 8015e78:	e31c      	b.n	80164b4 <_svfprintf_r+0x1448>
 8015e7a:	a92f      	add	r1, sp, #188	; 0xbc
 8015e7c:	3c10      	subs	r4, #16
 8015e7e:	000f      	movs	r7, r1
 8015e80:	f7ff fb2c 	bl	80154dc <_svfprintf_r+0x470>
 8015e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e86:	2b65      	cmp	r3, #101	; 0x65
 8015e88:	dc00      	bgt.n	8015e8c <_svfprintf_r+0xe20>
 8015e8a:	e259      	b.n	8016340 <_svfprintf_r+0x12d4>
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	2300      	movs	r3, #0
 8015e90:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015e92:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015e94:	f7ea fae2 	bl	800045c <__aeabi_dcmpeq>
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	d07c      	beq.n	8015f96 <_svfprintf_r+0xf2a>
 8015e9c:	4b81      	ldr	r3, [pc, #516]	; (80160a4 <_svfprintf_r+0x1038>)
 8015e9e:	603b      	str	r3, [r7, #0]
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	607b      	str	r3, [r7, #4]
 8015ea4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ea6:	3708      	adds	r7, #8
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	932e      	str	r3, [sp, #184]	; 0xb8
 8015eac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015eae:	9308      	str	r3, [sp, #32]
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	932d      	str	r3, [sp, #180]	; 0xb4
 8015eb4:	2b07      	cmp	r3, #7
 8015eb6:	dd08      	ble.n	8015eca <_svfprintf_r+0xe5e>
 8015eb8:	aa2c      	add	r2, sp, #176	; 0xb0
 8015eba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ebc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ebe:	f002 fa29 	bl	8018314 <__ssprint_r>
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	d000      	beq.n	8015ec8 <_svfprintf_r+0xe5c>
 8015ec6:	e2f5      	b.n	80164b4 <_svfprintf_r+0x1448>
 8015ec8:	af2f      	add	r7, sp, #188	; 0xbc
 8015eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015ecc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ece:	4293      	cmp	r3, r2
 8015ed0:	db01      	blt.n	8015ed6 <_svfprintf_r+0xe6a>
 8015ed2:	07f3      	lsls	r3, r6, #31
 8015ed4:	d51d      	bpl.n	8015f12 <_svfprintf_r+0xea6>
 8015ed6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ed8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015eda:	4694      	mov	ip, r2
 8015edc:	603b      	str	r3, [r7, #0]
 8015ede:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015ee0:	607b      	str	r3, [r7, #4]
 8015ee2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015ee4:	3708      	adds	r7, #8
 8015ee6:	4463      	add	r3, ip
 8015ee8:	932e      	str	r3, [sp, #184]	; 0xb8
 8015eea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015eec:	9308      	str	r3, [sp, #32]
 8015eee:	3301      	adds	r3, #1
 8015ef0:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ef2:	2b07      	cmp	r3, #7
 8015ef4:	dd08      	ble.n	8015f08 <_svfprintf_r+0xe9c>
 8015ef6:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015efa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015efc:	f002 fa0a 	bl	8018314 <__ssprint_r>
 8015f00:	2800      	cmp	r0, #0
 8015f02:	d000      	beq.n	8015f06 <_svfprintf_r+0xe9a>
 8015f04:	e2d6      	b.n	80164b4 <_svfprintf_r+0x1448>
 8015f06:	af2f      	add	r7, sp, #188	; 0xbc
 8015f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f0a:	2510      	movs	r5, #16
 8015f0c:	1e5c      	subs	r4, r3, #1
 8015f0e:	2c00      	cmp	r4, #0
 8015f10:	dc2f      	bgt.n	8015f72 <_svfprintf_r+0xf06>
 8015f12:	0773      	lsls	r3, r6, #29
 8015f14:	d500      	bpl.n	8015f18 <_svfprintf_r+0xeac>
 8015f16:	e2af      	b.n	8016478 <_svfprintf_r+0x140c>
 8015f18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015f1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015f1c:	4293      	cmp	r3, r2
 8015f1e:	da00      	bge.n	8015f22 <_svfprintf_r+0xeb6>
 8015f20:	0013      	movs	r3, r2
 8015f22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015f24:	18d3      	adds	r3, r2, r3
 8015f26:	9315      	str	r3, [sp, #84]	; 0x54
 8015f28:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015f2a:	9308      	str	r3, [sp, #32]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d007      	beq.n	8015f40 <_svfprintf_r+0xed4>
 8015f30:	aa2c      	add	r2, sp, #176	; 0xb0
 8015f32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f36:	f002 f9ed 	bl	8018314 <__ssprint_r>
 8015f3a:	2800      	cmp	r0, #0
 8015f3c:	d000      	beq.n	8015f40 <_svfprintf_r+0xed4>
 8015f3e:	e2b9      	b.n	80164b4 <_svfprintf_r+0x1448>
 8015f40:	2300      	movs	r3, #0
 8015f42:	932d      	str	r3, [sp, #180]	; 0xb4
 8015f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d000      	beq.n	8015f4c <_svfprintf_r+0xee0>
 8015f4a:	e2cf      	b.n	80164ec <_svfprintf_r+0x1480>
 8015f4c:	af2f      	add	r7, sp, #188	; 0xbc
 8015f4e:	e5d6      	b.n	8015afe <_svfprintf_r+0xa92>
 8015f50:	3210      	adds	r2, #16
 8015f52:	607d      	str	r5, [r7, #4]
 8015f54:	922e      	str	r2, [sp, #184]	; 0xb8
 8015f56:	932d      	str	r3, [sp, #180]	; 0xb4
 8015f58:	2b07      	cmp	r3, #7
 8015f5a:	dd08      	ble.n	8015f6e <_svfprintf_r+0xf02>
 8015f5c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015f5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f62:	f002 f9d7 	bl	8018314 <__ssprint_r>
 8015f66:	2800      	cmp	r0, #0
 8015f68:	d000      	beq.n	8015f6c <_svfprintf_r+0xf00>
 8015f6a:	e2a3      	b.n	80164b4 <_svfprintf_r+0x1448>
 8015f6c:	a92f      	add	r1, sp, #188	; 0xbc
 8015f6e:	000f      	movs	r7, r1
 8015f70:	3c10      	subs	r4, #16
 8015f72:	0039      	movs	r1, r7
 8015f74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015f76:	484c      	ldr	r0, [pc, #304]	; (80160a8 <_svfprintf_r+0x103c>)
 8015f78:	9308      	str	r3, [sp, #32]
 8015f7a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015f7c:	3301      	adds	r3, #1
 8015f7e:	3108      	adds	r1, #8
 8015f80:	6038      	str	r0, [r7, #0]
 8015f82:	2c10      	cmp	r4, #16
 8015f84:	dce4      	bgt.n	8015f50 <_svfprintf_r+0xee4>
 8015f86:	607c      	str	r4, [r7, #4]
 8015f88:	18a4      	adds	r4, r4, r2
 8015f8a:	942e      	str	r4, [sp, #184]	; 0xb8
 8015f8c:	932d      	str	r3, [sp, #180]	; 0xb4
 8015f8e:	000f      	movs	r7, r1
 8015f90:	2b07      	cmp	r3, #7
 8015f92:	ddbe      	ble.n	8015f12 <_svfprintf_r+0xea6>
 8015f94:	e06a      	b.n	801606c <_svfprintf_r+0x1000>
 8015f96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	dd00      	ble.n	8015f9e <_svfprintf_r+0xf32>
 8015f9c:	e086      	b.n	80160ac <_svfprintf_r+0x1040>
 8015f9e:	4b41      	ldr	r3, [pc, #260]	; (80160a4 <_svfprintf_r+0x1038>)
 8015fa0:	603b      	str	r3, [r7, #0]
 8015fa2:	2301      	movs	r3, #1
 8015fa4:	607b      	str	r3, [r7, #4]
 8015fa6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015fa8:	3708      	adds	r7, #8
 8015faa:	3301      	adds	r3, #1
 8015fac:	932e      	str	r3, [sp, #184]	; 0xb8
 8015fae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015fb0:	9308      	str	r3, [sp, #32]
 8015fb2:	3301      	adds	r3, #1
 8015fb4:	932d      	str	r3, [sp, #180]	; 0xb4
 8015fb6:	2b07      	cmp	r3, #7
 8015fb8:	dd08      	ble.n	8015fcc <_svfprintf_r+0xf60>
 8015fba:	aa2c      	add	r2, sp, #176	; 0xb0
 8015fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015fbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015fc0:	f002 f9a8 	bl	8018314 <__ssprint_r>
 8015fc4:	2800      	cmp	r0, #0
 8015fc6:	d000      	beq.n	8015fca <_svfprintf_r+0xf5e>
 8015fc8:	e274      	b.n	80164b4 <_svfprintf_r+0x1448>
 8015fca:	af2f      	add	r7, sp, #188	; 0xbc
 8015fcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d104      	bne.n	8015fdc <_svfprintf_r+0xf70>
 8015fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d101      	bne.n	8015fdc <_svfprintf_r+0xf70>
 8015fd8:	07f3      	lsls	r3, r6, #31
 8015fda:	d59a      	bpl.n	8015f12 <_svfprintf_r+0xea6>
 8015fdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015fde:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015fe0:	4694      	mov	ip, r2
 8015fe2:	603b      	str	r3, [r7, #0]
 8015fe4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fe6:	607b      	str	r3, [r7, #4]
 8015fe8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015fea:	3708      	adds	r7, #8
 8015fec:	4463      	add	r3, ip
 8015fee:	932e      	str	r3, [sp, #184]	; 0xb8
 8015ff0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015ff2:	9308      	str	r3, [sp, #32]
 8015ff4:	3301      	adds	r3, #1
 8015ff6:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ff8:	2b07      	cmp	r3, #7
 8015ffa:	dd08      	ble.n	801600e <_svfprintf_r+0xfa2>
 8015ffc:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ffe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016000:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016002:	f002 f987 	bl	8018314 <__ssprint_r>
 8016006:	2800      	cmp	r0, #0
 8016008:	d000      	beq.n	801600c <_svfprintf_r+0xfa0>
 801600a:	e253      	b.n	80164b4 <_svfprintf_r+0x1448>
 801600c:	af2f      	add	r7, sp, #188	; 0xbc
 801600e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8016010:	2c00      	cmp	r4, #0
 8016012:	da1a      	bge.n	801604a <_svfprintf_r+0xfde>
 8016014:	0039      	movs	r1, r7
 8016016:	2510      	movs	r5, #16
 8016018:	4264      	negs	r4, r4
 801601a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801601c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801601e:	9308      	str	r3, [sp, #32]
 8016020:	1c5a      	adds	r2, r3, #1
 8016022:	4b21      	ldr	r3, [pc, #132]	; (80160a8 <_svfprintf_r+0x103c>)
 8016024:	3708      	adds	r7, #8
 8016026:	600b      	str	r3, [r1, #0]
 8016028:	2c10      	cmp	r4, #16
 801602a:	dc29      	bgt.n	8016080 <_svfprintf_r+0x1014>
 801602c:	604c      	str	r4, [r1, #4]
 801602e:	1824      	adds	r4, r4, r0
 8016030:	942e      	str	r4, [sp, #184]	; 0xb8
 8016032:	922d      	str	r2, [sp, #180]	; 0xb4
 8016034:	2a07      	cmp	r2, #7
 8016036:	dd08      	ble.n	801604a <_svfprintf_r+0xfde>
 8016038:	aa2c      	add	r2, sp, #176	; 0xb0
 801603a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801603c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801603e:	f002 f969 	bl	8018314 <__ssprint_r>
 8016042:	2800      	cmp	r0, #0
 8016044:	d000      	beq.n	8016048 <_svfprintf_r+0xfdc>
 8016046:	e235      	b.n	80164b4 <_svfprintf_r+0x1448>
 8016048:	af2f      	add	r7, sp, #188	; 0xbc
 801604a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801604c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801604e:	468c      	mov	ip, r1
 8016050:	603b      	str	r3, [r7, #0]
 8016052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016054:	607b      	str	r3, [r7, #4]
 8016056:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016058:	4463      	add	r3, ip
 801605a:	932e      	str	r3, [sp, #184]	; 0xb8
 801605c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801605e:	1c5a      	adds	r2, r3, #1
 8016060:	9308      	str	r3, [sp, #32]
 8016062:	922d      	str	r2, [sp, #180]	; 0xb4
 8016064:	2a07      	cmp	r2, #7
 8016066:	dc01      	bgt.n	801606c <_svfprintf_r+0x1000>
 8016068:	f7ff fa6c 	bl	8015544 <_svfprintf_r+0x4d8>
 801606c:	aa2c      	add	r2, sp, #176	; 0xb0
 801606e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016070:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016072:	f002 f94f 	bl	8018314 <__ssprint_r>
 8016076:	2800      	cmp	r0, #0
 8016078:	d000      	beq.n	801607c <_svfprintf_r+0x1010>
 801607a:	e21b      	b.n	80164b4 <_svfprintf_r+0x1448>
 801607c:	af2f      	add	r7, sp, #188	; 0xbc
 801607e:	e748      	b.n	8015f12 <_svfprintf_r+0xea6>
 8016080:	3010      	adds	r0, #16
 8016082:	604d      	str	r5, [r1, #4]
 8016084:	902e      	str	r0, [sp, #184]	; 0xb8
 8016086:	922d      	str	r2, [sp, #180]	; 0xb4
 8016088:	2a07      	cmp	r2, #7
 801608a:	dd08      	ble.n	801609e <_svfprintf_r+0x1032>
 801608c:	aa2c      	add	r2, sp, #176	; 0xb0
 801608e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016090:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016092:	f002 f93f 	bl	8018314 <__ssprint_r>
 8016096:	2800      	cmp	r0, #0
 8016098:	d000      	beq.n	801609c <_svfprintf_r+0x1030>
 801609a:	e20b      	b.n	80164b4 <_svfprintf_r+0x1448>
 801609c:	af2f      	add	r7, sp, #188	; 0xbc
 801609e:	3c10      	subs	r4, #16
 80160a0:	0039      	movs	r1, r7
 80160a2:	e7ba      	b.n	801601a <_svfprintf_r+0xfae>
 80160a4:	0801bb1a 	.word	0x0801bb1a
 80160a8:	0801bb2c 	.word	0x0801bb2c
 80160ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160ae:	002c      	movs	r4, r5
 80160b0:	429d      	cmp	r5, r3
 80160b2:	dd00      	ble.n	80160b6 <_svfprintf_r+0x104a>
 80160b4:	001c      	movs	r4, r3
 80160b6:	2c00      	cmp	r4, #0
 80160b8:	dd15      	ble.n	80160e6 <_svfprintf_r+0x107a>
 80160ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160bc:	607c      	str	r4, [r7, #4]
 80160be:	603b      	str	r3, [r7, #0]
 80160c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80160c2:	3708      	adds	r7, #8
 80160c4:	18e3      	adds	r3, r4, r3
 80160c6:	932e      	str	r3, [sp, #184]	; 0xb8
 80160c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160ca:	9308      	str	r3, [sp, #32]
 80160cc:	3301      	adds	r3, #1
 80160ce:	932d      	str	r3, [sp, #180]	; 0xb4
 80160d0:	2b07      	cmp	r3, #7
 80160d2:	dd08      	ble.n	80160e6 <_svfprintf_r+0x107a>
 80160d4:	aa2c      	add	r2, sp, #176	; 0xb0
 80160d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160da:	f002 f91b 	bl	8018314 <__ssprint_r>
 80160de:	2800      	cmp	r0, #0
 80160e0:	d000      	beq.n	80160e4 <_svfprintf_r+0x1078>
 80160e2:	e1e7      	b.n	80164b4 <_svfprintf_r+0x1448>
 80160e4:	af2f      	add	r7, sp, #188	; 0xbc
 80160e6:	43e3      	mvns	r3, r4
 80160e8:	17db      	asrs	r3, r3, #31
 80160ea:	401c      	ands	r4, r3
 80160ec:	1b2c      	subs	r4, r5, r4
 80160ee:	2c00      	cmp	r4, #0
 80160f0:	dd1a      	ble.n	8016128 <_svfprintf_r+0x10bc>
 80160f2:	0039      	movs	r1, r7
 80160f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160f6:	48d4      	ldr	r0, [pc, #848]	; (8016448 <_svfprintf_r+0x13dc>)
 80160f8:	9308      	str	r3, [sp, #32]
 80160fa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80160fc:	3301      	adds	r3, #1
 80160fe:	3108      	adds	r1, #8
 8016100:	6038      	str	r0, [r7, #0]
 8016102:	2c10      	cmp	r4, #16
 8016104:	dd00      	ble.n	8016108 <_svfprintf_r+0x109c>
 8016106:	e089      	b.n	801621c <_svfprintf_r+0x11b0>
 8016108:	607c      	str	r4, [r7, #4]
 801610a:	18a4      	adds	r4, r4, r2
 801610c:	942e      	str	r4, [sp, #184]	; 0xb8
 801610e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016110:	000f      	movs	r7, r1
 8016112:	2b07      	cmp	r3, #7
 8016114:	dd08      	ble.n	8016128 <_svfprintf_r+0x10bc>
 8016116:	aa2c      	add	r2, sp, #176	; 0xb0
 8016118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801611a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801611c:	f002 f8fa 	bl	8018314 <__ssprint_r>
 8016120:	2800      	cmp	r0, #0
 8016122:	d000      	beq.n	8016126 <_svfprintf_r+0x10ba>
 8016124:	e1c6      	b.n	80164b4 <_svfprintf_r+0x1448>
 8016126:	af2f      	add	r7, sp, #188	; 0xbc
 8016128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801612a:	195d      	adds	r5, r3, r5
 801612c:	0573      	lsls	r3, r6, #21
 801612e:	d50d      	bpl.n	801614c <_svfprintf_r+0x10e0>
 8016130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016132:	2b00      	cmp	r3, #0
 8016134:	d000      	beq.n	8016138 <_svfprintf_r+0x10cc>
 8016136:	e084      	b.n	8016242 <_svfprintf_r+0x11d6>
 8016138:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801613a:	2b00      	cmp	r3, #0
 801613c:	d000      	beq.n	8016140 <_svfprintf_r+0x10d4>
 801613e:	e083      	b.n	8016248 <_svfprintf_r+0x11dc>
 8016140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016142:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016144:	189b      	adds	r3, r3, r2
 8016146:	429d      	cmp	r5, r3
 8016148:	d900      	bls.n	801614c <_svfprintf_r+0x10e0>
 801614a:	001d      	movs	r5, r3
 801614c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801614e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016150:	4293      	cmp	r3, r2
 8016152:	db01      	blt.n	8016158 <_svfprintf_r+0x10ec>
 8016154:	07f3      	lsls	r3, r6, #31
 8016156:	d518      	bpl.n	801618a <_svfprintf_r+0x111e>
 8016158:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801615a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801615c:	4694      	mov	ip, r2
 801615e:	603b      	str	r3, [r7, #0]
 8016160:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016162:	607b      	str	r3, [r7, #4]
 8016164:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016166:	3708      	adds	r7, #8
 8016168:	4463      	add	r3, ip
 801616a:	932e      	str	r3, [sp, #184]	; 0xb8
 801616c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801616e:	9308      	str	r3, [sp, #32]
 8016170:	3301      	adds	r3, #1
 8016172:	932d      	str	r3, [sp, #180]	; 0xb4
 8016174:	2b07      	cmp	r3, #7
 8016176:	dd08      	ble.n	801618a <_svfprintf_r+0x111e>
 8016178:	aa2c      	add	r2, sp, #176	; 0xb0
 801617a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801617c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801617e:	f002 f8c9 	bl	8018314 <__ssprint_r>
 8016182:	2800      	cmp	r0, #0
 8016184:	d000      	beq.n	8016188 <_svfprintf_r+0x111c>
 8016186:	e195      	b.n	80164b4 <_svfprintf_r+0x1448>
 8016188:	af2f      	add	r7, sp, #188	; 0xbc
 801618a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801618c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801618e:	4694      	mov	ip, r2
 8016190:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016192:	4463      	add	r3, ip
 8016194:	1b5b      	subs	r3, r3, r5
 8016196:	1a54      	subs	r4, r2, r1
 8016198:	429c      	cmp	r4, r3
 801619a:	dd00      	ble.n	801619e <_svfprintf_r+0x1132>
 801619c:	001c      	movs	r4, r3
 801619e:	2c00      	cmp	r4, #0
 80161a0:	dd14      	ble.n	80161cc <_svfprintf_r+0x1160>
 80161a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80161a4:	603d      	str	r5, [r7, #0]
 80161a6:	18e3      	adds	r3, r4, r3
 80161a8:	932e      	str	r3, [sp, #184]	; 0xb8
 80161aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80161ac:	607c      	str	r4, [r7, #4]
 80161ae:	9308      	str	r3, [sp, #32]
 80161b0:	3301      	adds	r3, #1
 80161b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80161b4:	3708      	adds	r7, #8
 80161b6:	2b07      	cmp	r3, #7
 80161b8:	dd08      	ble.n	80161cc <_svfprintf_r+0x1160>
 80161ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80161bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161c0:	f002 f8a8 	bl	8018314 <__ssprint_r>
 80161c4:	2800      	cmp	r0, #0
 80161c6:	d000      	beq.n	80161ca <_svfprintf_r+0x115e>
 80161c8:	e174      	b.n	80164b4 <_svfprintf_r+0x1448>
 80161ca:	af2f      	add	r7, sp, #188	; 0xbc
 80161cc:	43e3      	mvns	r3, r4
 80161ce:	17db      	asrs	r3, r3, #31
 80161d0:	401c      	ands	r4, r3
 80161d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80161d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161d6:	2510      	movs	r5, #16
 80161d8:	1a9b      	subs	r3, r3, r2
 80161da:	1b1c      	subs	r4, r3, r4
 80161dc:	2c00      	cmp	r4, #0
 80161de:	dc00      	bgt.n	80161e2 <_svfprintf_r+0x1176>
 80161e0:	e697      	b.n	8015f12 <_svfprintf_r+0xea6>
 80161e2:	0039      	movs	r1, r7
 80161e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80161e6:	4898      	ldr	r0, [pc, #608]	; (8016448 <_svfprintf_r+0x13dc>)
 80161e8:	9308      	str	r3, [sp, #32]
 80161ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80161ec:	3301      	adds	r3, #1
 80161ee:	3108      	adds	r1, #8
 80161f0:	6038      	str	r0, [r7, #0]
 80161f2:	2c10      	cmp	r4, #16
 80161f4:	dc00      	bgt.n	80161f8 <_svfprintf_r+0x118c>
 80161f6:	e6c6      	b.n	8015f86 <_svfprintf_r+0xf1a>
 80161f8:	3210      	adds	r2, #16
 80161fa:	607d      	str	r5, [r7, #4]
 80161fc:	922e      	str	r2, [sp, #184]	; 0xb8
 80161fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8016200:	2b07      	cmp	r3, #7
 8016202:	dd08      	ble.n	8016216 <_svfprintf_r+0x11aa>
 8016204:	aa2c      	add	r2, sp, #176	; 0xb0
 8016206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016208:	980a      	ldr	r0, [sp, #40]	; 0x28
 801620a:	f002 f883 	bl	8018314 <__ssprint_r>
 801620e:	2800      	cmp	r0, #0
 8016210:	d000      	beq.n	8016214 <_svfprintf_r+0x11a8>
 8016212:	e14f      	b.n	80164b4 <_svfprintf_r+0x1448>
 8016214:	a92f      	add	r1, sp, #188	; 0xbc
 8016216:	3c10      	subs	r4, #16
 8016218:	000f      	movs	r7, r1
 801621a:	e7e2      	b.n	80161e2 <_svfprintf_r+0x1176>
 801621c:	2010      	movs	r0, #16
 801621e:	1812      	adds	r2, r2, r0
 8016220:	6078      	str	r0, [r7, #4]
 8016222:	922e      	str	r2, [sp, #184]	; 0xb8
 8016224:	932d      	str	r3, [sp, #180]	; 0xb4
 8016226:	2b07      	cmp	r3, #7
 8016228:	dd08      	ble.n	801623c <_svfprintf_r+0x11d0>
 801622a:	aa2c      	add	r2, sp, #176	; 0xb0
 801622c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801622e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016230:	f002 f870 	bl	8018314 <__ssprint_r>
 8016234:	2800      	cmp	r0, #0
 8016236:	d000      	beq.n	801623a <_svfprintf_r+0x11ce>
 8016238:	e13c      	b.n	80164b4 <_svfprintf_r+0x1448>
 801623a:	a92f      	add	r1, sp, #188	; 0xbc
 801623c:	3c10      	subs	r4, #16
 801623e:	000f      	movs	r7, r1
 8016240:	e757      	b.n	80160f2 <_svfprintf_r+0x1086>
 8016242:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016244:	2b00      	cmp	r3, #0
 8016246:	d061      	beq.n	801630c <_svfprintf_r+0x12a0>
 8016248:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801624a:	3b01      	subs	r3, #1
 801624c:	9310      	str	r3, [sp, #64]	; 0x40
 801624e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016250:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016252:	4694      	mov	ip, r2
 8016254:	603b      	str	r3, [r7, #0]
 8016256:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016258:	607b      	str	r3, [r7, #4]
 801625a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801625c:	3708      	adds	r7, #8
 801625e:	4463      	add	r3, ip
 8016260:	932e      	str	r3, [sp, #184]	; 0xb8
 8016262:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016264:	9308      	str	r3, [sp, #32]
 8016266:	3301      	adds	r3, #1
 8016268:	932d      	str	r3, [sp, #180]	; 0xb4
 801626a:	2b07      	cmp	r3, #7
 801626c:	dd08      	ble.n	8016280 <_svfprintf_r+0x1214>
 801626e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016270:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016272:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016274:	f002 f84e 	bl	8018314 <__ssprint_r>
 8016278:	2800      	cmp	r0, #0
 801627a:	d000      	beq.n	801627e <_svfprintf_r+0x1212>
 801627c:	e11a      	b.n	80164b4 <_svfprintf_r+0x1448>
 801627e:	af2f      	add	r7, sp, #188	; 0xbc
 8016280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016284:	189b      	adds	r3, r3, r2
 8016286:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016288:	1b5b      	subs	r3, r3, r5
 801628a:	7814      	ldrb	r4, [r2, #0]
 801628c:	429c      	cmp	r4, r3
 801628e:	dd00      	ble.n	8016292 <_svfprintf_r+0x1226>
 8016290:	001c      	movs	r4, r3
 8016292:	2c00      	cmp	r4, #0
 8016294:	dd14      	ble.n	80162c0 <_svfprintf_r+0x1254>
 8016296:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016298:	603d      	str	r5, [r7, #0]
 801629a:	18e3      	adds	r3, r4, r3
 801629c:	932e      	str	r3, [sp, #184]	; 0xb8
 801629e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80162a0:	607c      	str	r4, [r7, #4]
 80162a2:	9308      	str	r3, [sp, #32]
 80162a4:	3301      	adds	r3, #1
 80162a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80162a8:	3708      	adds	r7, #8
 80162aa:	2b07      	cmp	r3, #7
 80162ac:	dd08      	ble.n	80162c0 <_svfprintf_r+0x1254>
 80162ae:	aa2c      	add	r2, sp, #176	; 0xb0
 80162b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162b4:	f002 f82e 	bl	8018314 <__ssprint_r>
 80162b8:	2800      	cmp	r0, #0
 80162ba:	d000      	beq.n	80162be <_svfprintf_r+0x1252>
 80162bc:	e0fa      	b.n	80164b4 <_svfprintf_r+0x1448>
 80162be:	af2f      	add	r7, sp, #188	; 0xbc
 80162c0:	43e3      	mvns	r3, r4
 80162c2:	17db      	asrs	r3, r3, #31
 80162c4:	401c      	ands	r4, r3
 80162c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80162c8:	781b      	ldrb	r3, [r3, #0]
 80162ca:	1b1c      	subs	r4, r3, r4
 80162cc:	2c00      	cmp	r4, #0
 80162ce:	dd19      	ble.n	8016304 <_svfprintf_r+0x1298>
 80162d0:	0039      	movs	r1, r7
 80162d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80162d4:	485c      	ldr	r0, [pc, #368]	; (8016448 <_svfprintf_r+0x13dc>)
 80162d6:	9308      	str	r3, [sp, #32]
 80162d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80162da:	3301      	adds	r3, #1
 80162dc:	3108      	adds	r1, #8
 80162de:	6038      	str	r0, [r7, #0]
 80162e0:	2c10      	cmp	r4, #16
 80162e2:	dc1a      	bgt.n	801631a <_svfprintf_r+0x12ae>
 80162e4:	607c      	str	r4, [r7, #4]
 80162e6:	18a4      	adds	r4, r4, r2
 80162e8:	942e      	str	r4, [sp, #184]	; 0xb8
 80162ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80162ec:	000f      	movs	r7, r1
 80162ee:	2b07      	cmp	r3, #7
 80162f0:	dd08      	ble.n	8016304 <_svfprintf_r+0x1298>
 80162f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80162f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162f8:	f002 f80c 	bl	8018314 <__ssprint_r>
 80162fc:	2800      	cmp	r0, #0
 80162fe:	d000      	beq.n	8016302 <_svfprintf_r+0x1296>
 8016300:	e0d8      	b.n	80164b4 <_svfprintf_r+0x1448>
 8016302:	af2f      	add	r7, sp, #188	; 0xbc
 8016304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016306:	781b      	ldrb	r3, [r3, #0]
 8016308:	18ed      	adds	r5, r5, r3
 801630a:	e711      	b.n	8016130 <_svfprintf_r+0x10c4>
 801630c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801630e:	3b01      	subs	r3, #1
 8016310:	9313      	str	r3, [sp, #76]	; 0x4c
 8016312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016314:	3b01      	subs	r3, #1
 8016316:	930f      	str	r3, [sp, #60]	; 0x3c
 8016318:	e799      	b.n	801624e <_svfprintf_r+0x11e2>
 801631a:	2010      	movs	r0, #16
 801631c:	1812      	adds	r2, r2, r0
 801631e:	6078      	str	r0, [r7, #4]
 8016320:	922e      	str	r2, [sp, #184]	; 0xb8
 8016322:	932d      	str	r3, [sp, #180]	; 0xb4
 8016324:	2b07      	cmp	r3, #7
 8016326:	dd08      	ble.n	801633a <_svfprintf_r+0x12ce>
 8016328:	aa2c      	add	r2, sp, #176	; 0xb0
 801632a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801632c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801632e:	f001 fff1 	bl	8018314 <__ssprint_r>
 8016332:	2800      	cmp	r0, #0
 8016334:	d000      	beq.n	8016338 <_svfprintf_r+0x12cc>
 8016336:	e0bd      	b.n	80164b4 <_svfprintf_r+0x1448>
 8016338:	a92f      	add	r1, sp, #188	; 0xbc
 801633a:	3c10      	subs	r4, #16
 801633c:	000f      	movs	r7, r1
 801633e:	e7c7      	b.n	80162d0 <_svfprintf_r+0x1264>
 8016340:	003c      	movs	r4, r7
 8016342:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016344:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016348:	9308      	str	r3, [sp, #32]
 801634a:	3101      	adds	r1, #1
 801634c:	3301      	adds	r3, #1
 801634e:	3408      	adds	r4, #8
 8016350:	2a01      	cmp	r2, #1
 8016352:	dc03      	bgt.n	801635c <_svfprintf_r+0x12f0>
 8016354:	2201      	movs	r2, #1
 8016356:	4216      	tst	r6, r2
 8016358:	d100      	bne.n	801635c <_svfprintf_r+0x12f0>
 801635a:	e088      	b.n	801646e <_svfprintf_r+0x1402>
 801635c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801635e:	912e      	str	r1, [sp, #184]	; 0xb8
 8016360:	603a      	str	r2, [r7, #0]
 8016362:	2201      	movs	r2, #1
 8016364:	932d      	str	r3, [sp, #180]	; 0xb4
 8016366:	607a      	str	r2, [r7, #4]
 8016368:	2b07      	cmp	r3, #7
 801636a:	dd08      	ble.n	801637e <_svfprintf_r+0x1312>
 801636c:	aa2c      	add	r2, sp, #176	; 0xb0
 801636e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016370:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016372:	f001 ffcf 	bl	8018314 <__ssprint_r>
 8016376:	2800      	cmp	r0, #0
 8016378:	d000      	beq.n	801637c <_svfprintf_r+0x1310>
 801637a:	e09b      	b.n	80164b4 <_svfprintf_r+0x1448>
 801637c:	ac2f      	add	r4, sp, #188	; 0xbc
 801637e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016380:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016382:	4694      	mov	ip, r2
 8016384:	6023      	str	r3, [r4, #0]
 8016386:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016388:	6063      	str	r3, [r4, #4]
 801638a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801638c:	3408      	adds	r4, #8
 801638e:	4463      	add	r3, ip
 8016390:	932e      	str	r3, [sp, #184]	; 0xb8
 8016392:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016394:	9308      	str	r3, [sp, #32]
 8016396:	3301      	adds	r3, #1
 8016398:	932d      	str	r3, [sp, #180]	; 0xb4
 801639a:	2b07      	cmp	r3, #7
 801639c:	dd08      	ble.n	80163b0 <_svfprintf_r+0x1344>
 801639e:	aa2c      	add	r2, sp, #176	; 0xb0
 80163a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163a4:	f001 ffb6 	bl	8018314 <__ssprint_r>
 80163a8:	2800      	cmp	r0, #0
 80163aa:	d000      	beq.n	80163ae <_svfprintf_r+0x1342>
 80163ac:	e082      	b.n	80164b4 <_svfprintf_r+0x1448>
 80163ae:	ac2f      	add	r4, sp, #188	; 0xbc
 80163b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163b2:	2200      	movs	r2, #0
 80163b4:	1e5d      	subs	r5, r3, #1
 80163b6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80163b8:	2300      	movs	r3, #0
 80163ba:	9919      	ldr	r1, [sp, #100]	; 0x64
 80163bc:	f7ea f84e 	bl	800045c <__aeabi_dcmpeq>
 80163c0:	2800      	cmp	r0, #0
 80163c2:	d12c      	bne.n	801641e <_svfprintf_r+0x13b2>
 80163c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80163c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80163c8:	9308      	str	r3, [sp, #32]
 80163ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80163cc:	6065      	str	r5, [r4, #4]
 80163ce:	1c5a      	adds	r2, r3, #1
 80163d0:	930e      	str	r3, [sp, #56]	; 0x38
 80163d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163d4:	922d      	str	r2, [sp, #180]	; 0xb4
 80163d6:	3301      	adds	r3, #1
 80163d8:	6023      	str	r3, [r4, #0]
 80163da:	9b08      	ldr	r3, [sp, #32]
 80163dc:	3408      	adds	r4, #8
 80163de:	3b01      	subs	r3, #1
 80163e0:	185b      	adds	r3, r3, r1
 80163e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80163e4:	2a07      	cmp	r2, #7
 80163e6:	dd07      	ble.n	80163f8 <_svfprintf_r+0x138c>
 80163e8:	aa2c      	add	r2, sp, #176	; 0xb0
 80163ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163ee:	f001 ff91 	bl	8018314 <__ssprint_r>
 80163f2:	2800      	cmp	r0, #0
 80163f4:	d15e      	bne.n	80164b4 <_svfprintf_r+0x1448>
 80163f6:	ac2f      	add	r4, sp, #188	; 0xbc
 80163f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80163fa:	ab28      	add	r3, sp, #160	; 0xa0
 80163fc:	4694      	mov	ip, r2
 80163fe:	6023      	str	r3, [r4, #0]
 8016400:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016402:	6063      	str	r3, [r4, #4]
 8016404:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016406:	4463      	add	r3, ip
 8016408:	932e      	str	r3, [sp, #184]	; 0xb8
 801640a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801640c:	9308      	str	r3, [sp, #32]
 801640e:	3301      	adds	r3, #1
 8016410:	932d      	str	r3, [sp, #180]	; 0xb4
 8016412:	2b07      	cmp	r3, #7
 8016414:	dd00      	ble.n	8016418 <_svfprintf_r+0x13ac>
 8016416:	e629      	b.n	801606c <_svfprintf_r+0x1000>
 8016418:	3408      	adds	r4, #8
 801641a:	0027      	movs	r7, r4
 801641c:	e579      	b.n	8015f12 <_svfprintf_r+0xea6>
 801641e:	2710      	movs	r7, #16
 8016420:	2d00      	cmp	r5, #0
 8016422:	dde9      	ble.n	80163f8 <_svfprintf_r+0x138c>
 8016424:	0021      	movs	r1, r4
 8016426:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016428:	4807      	ldr	r0, [pc, #28]	; (8016448 <_svfprintf_r+0x13dc>)
 801642a:	9308      	str	r3, [sp, #32]
 801642c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801642e:	3301      	adds	r3, #1
 8016430:	3108      	adds	r1, #8
 8016432:	6020      	str	r0, [r4, #0]
 8016434:	2d10      	cmp	r5, #16
 8016436:	dc09      	bgt.n	801644c <_svfprintf_r+0x13e0>
 8016438:	6065      	str	r5, [r4, #4]
 801643a:	000c      	movs	r4, r1
 801643c:	18ad      	adds	r5, r5, r2
 801643e:	952e      	str	r5, [sp, #184]	; 0xb8
 8016440:	932d      	str	r3, [sp, #180]	; 0xb4
 8016442:	2b07      	cmp	r3, #7
 8016444:	ddd8      	ble.n	80163f8 <_svfprintf_r+0x138c>
 8016446:	e7cf      	b.n	80163e8 <_svfprintf_r+0x137c>
 8016448:	0801bb2c 	.word	0x0801bb2c
 801644c:	3210      	adds	r2, #16
 801644e:	6067      	str	r7, [r4, #4]
 8016450:	922e      	str	r2, [sp, #184]	; 0xb8
 8016452:	932d      	str	r3, [sp, #180]	; 0xb4
 8016454:	2b07      	cmp	r3, #7
 8016456:	dd07      	ble.n	8016468 <_svfprintf_r+0x13fc>
 8016458:	aa2c      	add	r2, sp, #176	; 0xb0
 801645a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801645c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801645e:	f001 ff59 	bl	8018314 <__ssprint_r>
 8016462:	2800      	cmp	r0, #0
 8016464:	d126      	bne.n	80164b4 <_svfprintf_r+0x1448>
 8016466:	a92f      	add	r1, sp, #188	; 0xbc
 8016468:	3d10      	subs	r5, #16
 801646a:	000c      	movs	r4, r1
 801646c:	e7da      	b.n	8016424 <_svfprintf_r+0x13b8>
 801646e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016470:	912e      	str	r1, [sp, #184]	; 0xb8
 8016472:	c705      	stmia	r7!, {r0, r2}
 8016474:	932d      	str	r3, [sp, #180]	; 0xb4
 8016476:	e7e4      	b.n	8016442 <_svfprintf_r+0x13d6>
 8016478:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801647a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801647c:	2510      	movs	r5, #16
 801647e:	1a9c      	subs	r4, r3, r2
 8016480:	2c00      	cmp	r4, #0
 8016482:	dc00      	bgt.n	8016486 <_svfprintf_r+0x141a>
 8016484:	e548      	b.n	8015f18 <_svfprintf_r+0xeac>
 8016486:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016488:	4921      	ldr	r1, [pc, #132]	; (8016510 <_svfprintf_r+0x14a4>)
 801648a:	9308      	str	r3, [sp, #32]
 801648c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801648e:	3301      	adds	r3, #1
 8016490:	6039      	str	r1, [r7, #0]
 8016492:	2c10      	cmp	r4, #16
 8016494:	dc19      	bgt.n	80164ca <_svfprintf_r+0x145e>
 8016496:	607c      	str	r4, [r7, #4]
 8016498:	18a4      	adds	r4, r4, r2
 801649a:	942e      	str	r4, [sp, #184]	; 0xb8
 801649c:	932d      	str	r3, [sp, #180]	; 0xb4
 801649e:	2b07      	cmp	r3, #7
 80164a0:	dc00      	bgt.n	80164a4 <_svfprintf_r+0x1438>
 80164a2:	e539      	b.n	8015f18 <_svfprintf_r+0xeac>
 80164a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80164a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164aa:	f001 ff33 	bl	8018314 <__ssprint_r>
 80164ae:	2800      	cmp	r0, #0
 80164b0:	d100      	bne.n	80164b4 <_svfprintf_r+0x1448>
 80164b2:	e531      	b.n	8015f18 <_svfprintf_r+0xeac>
 80164b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d101      	bne.n	80164be <_svfprintf_r+0x1452>
 80164ba:	f7ff f908 	bl	80156ce <_svfprintf_r+0x662>
 80164be:	0019      	movs	r1, r3
 80164c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164c2:	f000 ff19 	bl	80172f8 <_free_r>
 80164c6:	f7ff f902 	bl	80156ce <_svfprintf_r+0x662>
 80164ca:	3210      	adds	r2, #16
 80164cc:	607d      	str	r5, [r7, #4]
 80164ce:	922e      	str	r2, [sp, #184]	; 0xb8
 80164d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80164d2:	3708      	adds	r7, #8
 80164d4:	2b07      	cmp	r3, #7
 80164d6:	dd07      	ble.n	80164e8 <_svfprintf_r+0x147c>
 80164d8:	aa2c      	add	r2, sp, #176	; 0xb0
 80164da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164de:	f001 ff19 	bl	8018314 <__ssprint_r>
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d1e6      	bne.n	80164b4 <_svfprintf_r+0x1448>
 80164e6:	af2f      	add	r7, sp, #188	; 0xbc
 80164e8:	3c10      	subs	r4, #16
 80164ea:	e7cc      	b.n	8016486 <_svfprintf_r+0x141a>
 80164ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80164ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164f0:	f000 ff02 	bl	80172f8 <_free_r>
 80164f4:	e52a      	b.n	8015f4c <_svfprintf_r+0xee0>
 80164f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80164f8:	9306      	str	r3, [sp, #24]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d101      	bne.n	8016502 <_svfprintf_r+0x1496>
 80164fe:	f7ff f8e6 	bl	80156ce <_svfprintf_r+0x662>
 8016502:	aa2c      	add	r2, sp, #176	; 0xb0
 8016504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016506:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016508:	f001 ff04 	bl	8018314 <__ssprint_r>
 801650c:	f7ff f8df 	bl	80156ce <_svfprintf_r+0x662>
 8016510:	0801bb1c 	.word	0x0801bb1c

08016514 <sysconf>:
 8016514:	2380      	movs	r3, #128	; 0x80
 8016516:	b510      	push	{r4, lr}
 8016518:	015b      	lsls	r3, r3, #5
 801651a:	2808      	cmp	r0, #8
 801651c:	d004      	beq.n	8016528 <sysconf+0x14>
 801651e:	f000 fe7d 	bl	801721c <__errno>
 8016522:	2316      	movs	r3, #22
 8016524:	6003      	str	r3, [r0, #0]
 8016526:	3b17      	subs	r3, #23
 8016528:	0018      	movs	r0, r3
 801652a:	bd10      	pop	{r4, pc}

0801652c <__ascii_wctomb>:
 801652c:	1e0b      	subs	r3, r1, #0
 801652e:	d004      	beq.n	801653a <__ascii_wctomb+0xe>
 8016530:	2aff      	cmp	r2, #255	; 0xff
 8016532:	d904      	bls.n	801653e <__ascii_wctomb+0x12>
 8016534:	238a      	movs	r3, #138	; 0x8a
 8016536:	6003      	str	r3, [r0, #0]
 8016538:	3b8b      	subs	r3, #139	; 0x8b
 801653a:	0018      	movs	r0, r3
 801653c:	4770      	bx	lr
 801653e:	700a      	strb	r2, [r1, #0]
 8016540:	2301      	movs	r3, #1
 8016542:	e7fa      	b.n	801653a <__ascii_wctomb+0xe>

08016544 <register_fini>:
 8016544:	4b03      	ldr	r3, [pc, #12]	; (8016554 <register_fini+0x10>)
 8016546:	b510      	push	{r4, lr}
 8016548:	2b00      	cmp	r3, #0
 801654a:	d002      	beq.n	8016552 <register_fini+0xe>
 801654c:	4802      	ldr	r0, [pc, #8]	; (8016558 <register_fini+0x14>)
 801654e:	f000 f805 	bl	801655c <atexit>
 8016552:	bd10      	pop	{r4, pc}
 8016554:	00000000 	.word	0x00000000
 8016558:	08017229 	.word	0x08017229

0801655c <atexit>:
 801655c:	2300      	movs	r3, #0
 801655e:	b510      	push	{r4, lr}
 8016560:	0001      	movs	r1, r0
 8016562:	001a      	movs	r2, r3
 8016564:	0018      	movs	r0, r3
 8016566:	f001 ff53 	bl	8018410 <__register_exitproc>
 801656a:	bd10      	pop	{r4, pc}

0801656c <quorem>:
 801656c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801656e:	6903      	ldr	r3, [r0, #16]
 8016570:	690c      	ldr	r4, [r1, #16]
 8016572:	b089      	sub	sp, #36	; 0x24
 8016574:	0007      	movs	r7, r0
 8016576:	9105      	str	r1, [sp, #20]
 8016578:	2600      	movs	r6, #0
 801657a:	42a3      	cmp	r3, r4
 801657c:	db65      	blt.n	801664a <quorem+0xde>
 801657e:	000b      	movs	r3, r1
 8016580:	3c01      	subs	r4, #1
 8016582:	3314      	adds	r3, #20
 8016584:	00a5      	lsls	r5, r4, #2
 8016586:	9303      	str	r3, [sp, #12]
 8016588:	195b      	adds	r3, r3, r5
 801658a:	9304      	str	r3, [sp, #16]
 801658c:	0003      	movs	r3, r0
 801658e:	3314      	adds	r3, #20
 8016590:	9302      	str	r3, [sp, #8]
 8016592:	195d      	adds	r5, r3, r5
 8016594:	9b04      	ldr	r3, [sp, #16]
 8016596:	6828      	ldr	r0, [r5, #0]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	1c59      	adds	r1, r3, #1
 801659c:	9301      	str	r3, [sp, #4]
 801659e:	f7e9 fdd7 	bl	8000150 <__udivsi3>
 80165a2:	9001      	str	r0, [sp, #4]
 80165a4:	42b0      	cmp	r0, r6
 80165a6:	d029      	beq.n	80165fc <quorem+0x90>
 80165a8:	9b03      	ldr	r3, [sp, #12]
 80165aa:	9802      	ldr	r0, [sp, #8]
 80165ac:	469c      	mov	ip, r3
 80165ae:	9606      	str	r6, [sp, #24]
 80165b0:	4662      	mov	r2, ip
 80165b2:	ca08      	ldmia	r2!, {r3}
 80165b4:	4694      	mov	ip, r2
 80165b6:	9a01      	ldr	r2, [sp, #4]
 80165b8:	b299      	uxth	r1, r3
 80165ba:	4351      	muls	r1, r2
 80165bc:	0c1b      	lsrs	r3, r3, #16
 80165be:	4353      	muls	r3, r2
 80165c0:	1989      	adds	r1, r1, r6
 80165c2:	0c0a      	lsrs	r2, r1, #16
 80165c4:	189b      	adds	r3, r3, r2
 80165c6:	9307      	str	r3, [sp, #28]
 80165c8:	0c1e      	lsrs	r6, r3, #16
 80165ca:	6803      	ldr	r3, [r0, #0]
 80165cc:	b289      	uxth	r1, r1
 80165ce:	b29a      	uxth	r2, r3
 80165d0:	9b06      	ldr	r3, [sp, #24]
 80165d2:	18d2      	adds	r2, r2, r3
 80165d4:	6803      	ldr	r3, [r0, #0]
 80165d6:	1a52      	subs	r2, r2, r1
 80165d8:	0c19      	lsrs	r1, r3, #16
 80165da:	466b      	mov	r3, sp
 80165dc:	8b9b      	ldrh	r3, [r3, #28]
 80165de:	1acb      	subs	r3, r1, r3
 80165e0:	1411      	asrs	r1, r2, #16
 80165e2:	185b      	adds	r3, r3, r1
 80165e4:	1419      	asrs	r1, r3, #16
 80165e6:	b292      	uxth	r2, r2
 80165e8:	041b      	lsls	r3, r3, #16
 80165ea:	431a      	orrs	r2, r3
 80165ec:	9b04      	ldr	r3, [sp, #16]
 80165ee:	9106      	str	r1, [sp, #24]
 80165f0:	c004      	stmia	r0!, {r2}
 80165f2:	4563      	cmp	r3, ip
 80165f4:	d2dc      	bcs.n	80165b0 <quorem+0x44>
 80165f6:	682b      	ldr	r3, [r5, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d02d      	beq.n	8016658 <quorem+0xec>
 80165fc:	9905      	ldr	r1, [sp, #20]
 80165fe:	0038      	movs	r0, r7
 8016600:	f001 fcb2 	bl	8017f68 <__mcmp>
 8016604:	2800      	cmp	r0, #0
 8016606:	db1f      	blt.n	8016648 <quorem+0xdc>
 8016608:	2500      	movs	r5, #0
 801660a:	9b01      	ldr	r3, [sp, #4]
 801660c:	9802      	ldr	r0, [sp, #8]
 801660e:	3301      	adds	r3, #1
 8016610:	9903      	ldr	r1, [sp, #12]
 8016612:	9301      	str	r3, [sp, #4]
 8016614:	6802      	ldr	r2, [r0, #0]
 8016616:	c908      	ldmia	r1!, {r3}
 8016618:	b292      	uxth	r2, r2
 801661a:	1955      	adds	r5, r2, r5
 801661c:	b29a      	uxth	r2, r3
 801661e:	1aaa      	subs	r2, r5, r2
 8016620:	6805      	ldr	r5, [r0, #0]
 8016622:	0c1b      	lsrs	r3, r3, #16
 8016624:	0c2d      	lsrs	r5, r5, #16
 8016626:	1aeb      	subs	r3, r5, r3
 8016628:	1415      	asrs	r5, r2, #16
 801662a:	195b      	adds	r3, r3, r5
 801662c:	141d      	asrs	r5, r3, #16
 801662e:	b292      	uxth	r2, r2
 8016630:	041b      	lsls	r3, r3, #16
 8016632:	4313      	orrs	r3, r2
 8016634:	c008      	stmia	r0!, {r3}
 8016636:	9b04      	ldr	r3, [sp, #16]
 8016638:	428b      	cmp	r3, r1
 801663a:	d2eb      	bcs.n	8016614 <quorem+0xa8>
 801663c:	9a02      	ldr	r2, [sp, #8]
 801663e:	00a3      	lsls	r3, r4, #2
 8016640:	18d3      	adds	r3, r2, r3
 8016642:	681a      	ldr	r2, [r3, #0]
 8016644:	2a00      	cmp	r2, #0
 8016646:	d011      	beq.n	801666c <quorem+0x100>
 8016648:	9e01      	ldr	r6, [sp, #4]
 801664a:	0030      	movs	r0, r6
 801664c:	b009      	add	sp, #36	; 0x24
 801664e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016650:	682b      	ldr	r3, [r5, #0]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d104      	bne.n	8016660 <quorem+0xf4>
 8016656:	3c01      	subs	r4, #1
 8016658:	9b02      	ldr	r3, [sp, #8]
 801665a:	3d04      	subs	r5, #4
 801665c:	42ab      	cmp	r3, r5
 801665e:	d3f7      	bcc.n	8016650 <quorem+0xe4>
 8016660:	613c      	str	r4, [r7, #16]
 8016662:	e7cb      	b.n	80165fc <quorem+0x90>
 8016664:	681a      	ldr	r2, [r3, #0]
 8016666:	2a00      	cmp	r2, #0
 8016668:	d104      	bne.n	8016674 <quorem+0x108>
 801666a:	3c01      	subs	r4, #1
 801666c:	9a02      	ldr	r2, [sp, #8]
 801666e:	3b04      	subs	r3, #4
 8016670:	429a      	cmp	r2, r3
 8016672:	d3f7      	bcc.n	8016664 <quorem+0xf8>
 8016674:	613c      	str	r4, [r7, #16]
 8016676:	e7e7      	b.n	8016648 <quorem+0xdc>

08016678 <_dtoa_r>:
 8016678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801667a:	0014      	movs	r4, r2
 801667c:	001d      	movs	r5, r3
 801667e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016680:	b09b      	sub	sp, #108	; 0x6c
 8016682:	9002      	str	r0, [sp, #8]
 8016684:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8016686:	9406      	str	r4, [sp, #24]
 8016688:	9507      	str	r5, [sp, #28]
 801668a:	2900      	cmp	r1, #0
 801668c:	d009      	beq.n	80166a2 <_dtoa_r+0x2a>
 801668e:	2301      	movs	r3, #1
 8016690:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016692:	4093      	lsls	r3, r2
 8016694:	604a      	str	r2, [r1, #4]
 8016696:	608b      	str	r3, [r1, #8]
 8016698:	f001 fa6a 	bl	8017b70 <_Bfree>
 801669c:	2300      	movs	r3, #0
 801669e:	9a02      	ldr	r2, [sp, #8]
 80166a0:	6413      	str	r3, [r2, #64]	; 0x40
 80166a2:	2d00      	cmp	r5, #0
 80166a4:	da20      	bge.n	80166e8 <_dtoa_r+0x70>
 80166a6:	2301      	movs	r3, #1
 80166a8:	6033      	str	r3, [r6, #0]
 80166aa:	006b      	lsls	r3, r5, #1
 80166ac:	085b      	lsrs	r3, r3, #1
 80166ae:	9307      	str	r3, [sp, #28]
 80166b0:	9c07      	ldr	r4, [sp, #28]
 80166b2:	4bb2      	ldr	r3, [pc, #712]	; (801697c <_dtoa_r+0x304>)
 80166b4:	0022      	movs	r2, r4
 80166b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80166b8:	401a      	ands	r2, r3
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d117      	bne.n	80166ee <_dtoa_r+0x76>
 80166be:	4bb0      	ldr	r3, [pc, #704]	; (8016980 <_dtoa_r+0x308>)
 80166c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80166c2:	6013      	str	r3, [r2, #0]
 80166c4:	9b06      	ldr	r3, [sp, #24]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d103      	bne.n	80166d2 <_dtoa_r+0x5a>
 80166ca:	0324      	lsls	r4, r4, #12
 80166cc:	d101      	bne.n	80166d2 <_dtoa_r+0x5a>
 80166ce:	f000 fd89 	bl	80171e4 <_dtoa_r+0xb6c>
 80166d2:	4bac      	ldr	r3, [pc, #688]	; (8016984 <_dtoa_r+0x30c>)
 80166d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80166d6:	9308      	str	r3, [sp, #32]
 80166d8:	2a00      	cmp	r2, #0
 80166da:	d002      	beq.n	80166e2 <_dtoa_r+0x6a>
 80166dc:	4baa      	ldr	r3, [pc, #680]	; (8016988 <_dtoa_r+0x310>)
 80166de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80166e0:	6013      	str	r3, [r2, #0]
 80166e2:	9808      	ldr	r0, [sp, #32]
 80166e4:	b01b      	add	sp, #108	; 0x6c
 80166e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166e8:	2300      	movs	r3, #0
 80166ea:	6033      	str	r3, [r6, #0]
 80166ec:	e7e0      	b.n	80166b0 <_dtoa_r+0x38>
 80166ee:	9e06      	ldr	r6, [sp, #24]
 80166f0:	9f07      	ldr	r7, [sp, #28]
 80166f2:	2200      	movs	r2, #0
 80166f4:	2300      	movs	r3, #0
 80166f6:	0030      	movs	r0, r6
 80166f8:	0039      	movs	r1, r7
 80166fa:	f7e9 feaf 	bl	800045c <__aeabi_dcmpeq>
 80166fe:	1e05      	subs	r5, r0, #0
 8016700:	d00b      	beq.n	801671a <_dtoa_r+0xa2>
 8016702:	2301      	movs	r3, #1
 8016704:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016706:	6013      	str	r3, [r2, #0]
 8016708:	4ba0      	ldr	r3, [pc, #640]	; (801698c <_dtoa_r+0x314>)
 801670a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801670c:	9308      	str	r3, [sp, #32]
 801670e:	2a00      	cmp	r2, #0
 8016710:	d0e7      	beq.n	80166e2 <_dtoa_r+0x6a>
 8016712:	4a9f      	ldr	r2, [pc, #636]	; (8016990 <_dtoa_r+0x318>)
 8016714:	9924      	ldr	r1, [sp, #144]	; 0x90
 8016716:	600a      	str	r2, [r1, #0]
 8016718:	e7e3      	b.n	80166e2 <_dtoa_r+0x6a>
 801671a:	ab18      	add	r3, sp, #96	; 0x60
 801671c:	9301      	str	r3, [sp, #4]
 801671e:	ab19      	add	r3, sp, #100	; 0x64
 8016720:	9300      	str	r3, [sp, #0]
 8016722:	0032      	movs	r2, r6
 8016724:	003b      	movs	r3, r7
 8016726:	9802      	ldr	r0, [sp, #8]
 8016728:	f001 fd0e 	bl	8018148 <__d2b>
 801672c:	0063      	lsls	r3, r4, #1
 801672e:	9003      	str	r0, [sp, #12]
 8016730:	0d5b      	lsrs	r3, r3, #21
 8016732:	d074      	beq.n	801681e <_dtoa_r+0x1a6>
 8016734:	033a      	lsls	r2, r7, #12
 8016736:	4c97      	ldr	r4, [pc, #604]	; (8016994 <_dtoa_r+0x31c>)
 8016738:	0b12      	lsrs	r2, r2, #12
 801673a:	4314      	orrs	r4, r2
 801673c:	0021      	movs	r1, r4
 801673e:	4a96      	ldr	r2, [pc, #600]	; (8016998 <_dtoa_r+0x320>)
 8016740:	0030      	movs	r0, r6
 8016742:	9516      	str	r5, [sp, #88]	; 0x58
 8016744:	189e      	adds	r6, r3, r2
 8016746:	2200      	movs	r2, #0
 8016748:	4b94      	ldr	r3, [pc, #592]	; (801699c <_dtoa_r+0x324>)
 801674a:	f7eb fde5 	bl	8002318 <__aeabi_dsub>
 801674e:	4a94      	ldr	r2, [pc, #592]	; (80169a0 <_dtoa_r+0x328>)
 8016750:	4b94      	ldr	r3, [pc, #592]	; (80169a4 <_dtoa_r+0x32c>)
 8016752:	f7eb fb6f 	bl	8001e34 <__aeabi_dmul>
 8016756:	4a94      	ldr	r2, [pc, #592]	; (80169a8 <_dtoa_r+0x330>)
 8016758:	4b94      	ldr	r3, [pc, #592]	; (80169ac <_dtoa_r+0x334>)
 801675a:	f7ea fc45 	bl	8000fe8 <__aeabi_dadd>
 801675e:	0004      	movs	r4, r0
 8016760:	0030      	movs	r0, r6
 8016762:	000d      	movs	r5, r1
 8016764:	f7ec f972 	bl	8002a4c <__aeabi_i2d>
 8016768:	4a91      	ldr	r2, [pc, #580]	; (80169b0 <_dtoa_r+0x338>)
 801676a:	4b92      	ldr	r3, [pc, #584]	; (80169b4 <_dtoa_r+0x33c>)
 801676c:	f7eb fb62 	bl	8001e34 <__aeabi_dmul>
 8016770:	0002      	movs	r2, r0
 8016772:	000b      	movs	r3, r1
 8016774:	0020      	movs	r0, r4
 8016776:	0029      	movs	r1, r5
 8016778:	f7ea fc36 	bl	8000fe8 <__aeabi_dadd>
 801677c:	0004      	movs	r4, r0
 801677e:	000d      	movs	r5, r1
 8016780:	f7ec f92e 	bl	80029e0 <__aeabi_d2iz>
 8016784:	2200      	movs	r2, #0
 8016786:	0007      	movs	r7, r0
 8016788:	2300      	movs	r3, #0
 801678a:	0020      	movs	r0, r4
 801678c:	0029      	movs	r1, r5
 801678e:	f7e9 fe6b 	bl	8000468 <__aeabi_dcmplt>
 8016792:	2800      	cmp	r0, #0
 8016794:	d009      	beq.n	80167aa <_dtoa_r+0x132>
 8016796:	0038      	movs	r0, r7
 8016798:	f7ec f958 	bl	8002a4c <__aeabi_i2d>
 801679c:	002b      	movs	r3, r5
 801679e:	0022      	movs	r2, r4
 80167a0:	f7e9 fe5c 	bl	800045c <__aeabi_dcmpeq>
 80167a4:	4243      	negs	r3, r0
 80167a6:	4158      	adcs	r0, r3
 80167a8:	1a3f      	subs	r7, r7, r0
 80167aa:	2301      	movs	r3, #1
 80167ac:	9314      	str	r3, [sp, #80]	; 0x50
 80167ae:	2f16      	cmp	r7, #22
 80167b0:	d80d      	bhi.n	80167ce <_dtoa_r+0x156>
 80167b2:	4981      	ldr	r1, [pc, #516]	; (80169b8 <_dtoa_r+0x340>)
 80167b4:	00fb      	lsls	r3, r7, #3
 80167b6:	18c9      	adds	r1, r1, r3
 80167b8:	6808      	ldr	r0, [r1, #0]
 80167ba:	6849      	ldr	r1, [r1, #4]
 80167bc:	9a06      	ldr	r2, [sp, #24]
 80167be:	9b07      	ldr	r3, [sp, #28]
 80167c0:	f7e9 fe66 	bl	8000490 <__aeabi_dcmpgt>
 80167c4:	2800      	cmp	r0, #0
 80167c6:	d046      	beq.n	8016856 <_dtoa_r+0x1de>
 80167c8:	2300      	movs	r3, #0
 80167ca:	3f01      	subs	r7, #1
 80167cc:	9314      	str	r3, [sp, #80]	; 0x50
 80167ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80167d0:	1b9e      	subs	r6, r3, r6
 80167d2:	2300      	movs	r3, #0
 80167d4:	930a      	str	r3, [sp, #40]	; 0x28
 80167d6:	0033      	movs	r3, r6
 80167d8:	3b01      	subs	r3, #1
 80167da:	930b      	str	r3, [sp, #44]	; 0x2c
 80167dc:	d504      	bpl.n	80167e8 <_dtoa_r+0x170>
 80167de:	2301      	movs	r3, #1
 80167e0:	1b9b      	subs	r3, r3, r6
 80167e2:	930a      	str	r3, [sp, #40]	; 0x28
 80167e4:	2300      	movs	r3, #0
 80167e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80167e8:	2f00      	cmp	r7, #0
 80167ea:	db36      	blt.n	801685a <_dtoa_r+0x1e2>
 80167ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167ee:	9711      	str	r7, [sp, #68]	; 0x44
 80167f0:	19db      	adds	r3, r3, r7
 80167f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80167f4:	2300      	movs	r3, #0
 80167f6:	9304      	str	r3, [sp, #16]
 80167f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80167fa:	2401      	movs	r4, #1
 80167fc:	2b09      	cmp	r3, #9
 80167fe:	d900      	bls.n	8016802 <_dtoa_r+0x18a>
 8016800:	e082      	b.n	8016908 <_dtoa_r+0x290>
 8016802:	2b05      	cmp	r3, #5
 8016804:	dd02      	ble.n	801680c <_dtoa_r+0x194>
 8016806:	2400      	movs	r4, #0
 8016808:	3b04      	subs	r3, #4
 801680a:	9320      	str	r3, [sp, #128]	; 0x80
 801680c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801680e:	1e98      	subs	r0, r3, #2
 8016810:	2803      	cmp	r0, #3
 8016812:	d900      	bls.n	8016816 <_dtoa_r+0x19e>
 8016814:	e082      	b.n	801691c <_dtoa_r+0x2a4>
 8016816:	f7e9 fc87 	bl	8000128 <__gnu_thumb1_case_uqi>
 801681a:	7573      	.short	0x7573
 801681c:	6828      	.short	0x6828
 801681e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016820:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016822:	189e      	adds	r6, r3, r2
 8016824:	4b65      	ldr	r3, [pc, #404]	; (80169bc <_dtoa_r+0x344>)
 8016826:	18f2      	adds	r2, r6, r3
 8016828:	2a20      	cmp	r2, #32
 801682a:	dd0f      	ble.n	801684c <_dtoa_r+0x1d4>
 801682c:	2340      	movs	r3, #64	; 0x40
 801682e:	1a9b      	subs	r3, r3, r2
 8016830:	409c      	lsls	r4, r3
 8016832:	4b63      	ldr	r3, [pc, #396]	; (80169c0 <_dtoa_r+0x348>)
 8016834:	9806      	ldr	r0, [sp, #24]
 8016836:	18f3      	adds	r3, r6, r3
 8016838:	40d8      	lsrs	r0, r3
 801683a:	4320      	orrs	r0, r4
 801683c:	f7ec f940 	bl	8002ac0 <__aeabi_ui2d>
 8016840:	2301      	movs	r3, #1
 8016842:	4c60      	ldr	r4, [pc, #384]	; (80169c4 <_dtoa_r+0x34c>)
 8016844:	3e01      	subs	r6, #1
 8016846:	1909      	adds	r1, r1, r4
 8016848:	9316      	str	r3, [sp, #88]	; 0x58
 801684a:	e77c      	b.n	8016746 <_dtoa_r+0xce>
 801684c:	2320      	movs	r3, #32
 801684e:	9806      	ldr	r0, [sp, #24]
 8016850:	1a9b      	subs	r3, r3, r2
 8016852:	4098      	lsls	r0, r3
 8016854:	e7f2      	b.n	801683c <_dtoa_r+0x1c4>
 8016856:	9014      	str	r0, [sp, #80]	; 0x50
 8016858:	e7b9      	b.n	80167ce <_dtoa_r+0x156>
 801685a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801685c:	1bdb      	subs	r3, r3, r7
 801685e:	930a      	str	r3, [sp, #40]	; 0x28
 8016860:	427b      	negs	r3, r7
 8016862:	9304      	str	r3, [sp, #16]
 8016864:	2300      	movs	r3, #0
 8016866:	9311      	str	r3, [sp, #68]	; 0x44
 8016868:	e7c6      	b.n	80167f8 <_dtoa_r+0x180>
 801686a:	2301      	movs	r3, #1
 801686c:	930d      	str	r3, [sp, #52]	; 0x34
 801686e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016870:	2b00      	cmp	r3, #0
 8016872:	dd57      	ble.n	8016924 <_dtoa_r+0x2ac>
 8016874:	930c      	str	r3, [sp, #48]	; 0x30
 8016876:	9309      	str	r3, [sp, #36]	; 0x24
 8016878:	2200      	movs	r2, #0
 801687a:	9902      	ldr	r1, [sp, #8]
 801687c:	644a      	str	r2, [r1, #68]	; 0x44
 801687e:	3204      	adds	r2, #4
 8016880:	0010      	movs	r0, r2
 8016882:	9902      	ldr	r1, [sp, #8]
 8016884:	3014      	adds	r0, #20
 8016886:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8016888:	4298      	cmp	r0, r3
 801688a:	d950      	bls.n	801692e <_dtoa_r+0x2b6>
 801688c:	9802      	ldr	r0, [sp, #8]
 801688e:	f001 f947 	bl	8017b20 <_Balloc>
 8016892:	9b02      	ldr	r3, [sp, #8]
 8016894:	9008      	str	r0, [sp, #32]
 8016896:	6418      	str	r0, [r3, #64]	; 0x40
 8016898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801689a:	2b0e      	cmp	r3, #14
 801689c:	d900      	bls.n	80168a0 <_dtoa_r+0x228>
 801689e:	e10c      	b.n	8016aba <_dtoa_r+0x442>
 80168a0:	2c00      	cmp	r4, #0
 80168a2:	d100      	bne.n	80168a6 <_dtoa_r+0x22e>
 80168a4:	e109      	b.n	8016aba <_dtoa_r+0x442>
 80168a6:	9b06      	ldr	r3, [sp, #24]
 80168a8:	9c07      	ldr	r4, [sp, #28]
 80168aa:	9312      	str	r3, [sp, #72]	; 0x48
 80168ac:	9413      	str	r4, [sp, #76]	; 0x4c
 80168ae:	2f00      	cmp	r7, #0
 80168b0:	dc00      	bgt.n	80168b4 <_dtoa_r+0x23c>
 80168b2:	e08b      	b.n	80169cc <_dtoa_r+0x354>
 80168b4:	210f      	movs	r1, #15
 80168b6:	003a      	movs	r2, r7
 80168b8:	4b3f      	ldr	r3, [pc, #252]	; (80169b8 <_dtoa_r+0x340>)
 80168ba:	400a      	ands	r2, r1
 80168bc:	00d2      	lsls	r2, r2, #3
 80168be:	189b      	adds	r3, r3, r2
 80168c0:	681d      	ldr	r5, [r3, #0]
 80168c2:	685e      	ldr	r6, [r3, #4]
 80168c4:	2302      	movs	r3, #2
 80168c6:	113c      	asrs	r4, r7, #4
 80168c8:	930e      	str	r3, [sp, #56]	; 0x38
 80168ca:	06e3      	lsls	r3, r4, #27
 80168cc:	d50b      	bpl.n	80168e6 <_dtoa_r+0x26e>
 80168ce:	4b3e      	ldr	r3, [pc, #248]	; (80169c8 <_dtoa_r+0x350>)
 80168d0:	400c      	ands	r4, r1
 80168d2:	6a1a      	ldr	r2, [r3, #32]
 80168d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80168d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80168da:	f7ea fea1 	bl	8001620 <__aeabi_ddiv>
 80168de:	2303      	movs	r3, #3
 80168e0:	9006      	str	r0, [sp, #24]
 80168e2:	9107      	str	r1, [sp, #28]
 80168e4:	930e      	str	r3, [sp, #56]	; 0x38
 80168e6:	2300      	movs	r3, #0
 80168e8:	e03b      	b.n	8016962 <_dtoa_r+0x2ea>
 80168ea:	2301      	movs	r3, #1
 80168ec:	930d      	str	r3, [sp, #52]	; 0x34
 80168ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80168f0:	18fb      	adds	r3, r7, r3
 80168f2:	930c      	str	r3, [sp, #48]	; 0x30
 80168f4:	3301      	adds	r3, #1
 80168f6:	9309      	str	r3, [sp, #36]	; 0x24
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	dcbd      	bgt.n	8016878 <_dtoa_r+0x200>
 80168fc:	2301      	movs	r3, #1
 80168fe:	e7bb      	b.n	8016878 <_dtoa_r+0x200>
 8016900:	2300      	movs	r3, #0
 8016902:	e7b3      	b.n	801686c <_dtoa_r+0x1f4>
 8016904:	2300      	movs	r3, #0
 8016906:	e7f1      	b.n	80168ec <_dtoa_r+0x274>
 8016908:	2300      	movs	r3, #0
 801690a:	940d      	str	r4, [sp, #52]	; 0x34
 801690c:	9320      	str	r3, [sp, #128]	; 0x80
 801690e:	3b01      	subs	r3, #1
 8016910:	2200      	movs	r2, #0
 8016912:	930c      	str	r3, [sp, #48]	; 0x30
 8016914:	9309      	str	r3, [sp, #36]	; 0x24
 8016916:	3313      	adds	r3, #19
 8016918:	9221      	str	r2, [sp, #132]	; 0x84
 801691a:	e7ad      	b.n	8016878 <_dtoa_r+0x200>
 801691c:	2301      	movs	r3, #1
 801691e:	930d      	str	r3, [sp, #52]	; 0x34
 8016920:	3b02      	subs	r3, #2
 8016922:	e7f5      	b.n	8016910 <_dtoa_r+0x298>
 8016924:	2301      	movs	r3, #1
 8016926:	930c      	str	r3, [sp, #48]	; 0x30
 8016928:	9309      	str	r3, [sp, #36]	; 0x24
 801692a:	001a      	movs	r2, r3
 801692c:	e7f4      	b.n	8016918 <_dtoa_r+0x2a0>
 801692e:	9802      	ldr	r0, [sp, #8]
 8016930:	3101      	adds	r1, #1
 8016932:	6441      	str	r1, [r0, #68]	; 0x44
 8016934:	0052      	lsls	r2, r2, #1
 8016936:	e7a3      	b.n	8016880 <_dtoa_r+0x208>
 8016938:	2301      	movs	r3, #1
 801693a:	421c      	tst	r4, r3
 801693c:	d00e      	beq.n	801695c <_dtoa_r+0x2e4>
 801693e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016940:	4a21      	ldr	r2, [pc, #132]	; (80169c8 <_dtoa_r+0x350>)
 8016942:	3301      	adds	r3, #1
 8016944:	930e      	str	r3, [sp, #56]	; 0x38
 8016946:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016948:	0028      	movs	r0, r5
 801694a:	00db      	lsls	r3, r3, #3
 801694c:	189b      	adds	r3, r3, r2
 801694e:	0031      	movs	r1, r6
 8016950:	681a      	ldr	r2, [r3, #0]
 8016952:	685b      	ldr	r3, [r3, #4]
 8016954:	f7eb fa6e 	bl	8001e34 <__aeabi_dmul>
 8016958:	0005      	movs	r5, r0
 801695a:	000e      	movs	r6, r1
 801695c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801695e:	1064      	asrs	r4, r4, #1
 8016960:	3301      	adds	r3, #1
 8016962:	9310      	str	r3, [sp, #64]	; 0x40
 8016964:	2c00      	cmp	r4, #0
 8016966:	d1e7      	bne.n	8016938 <_dtoa_r+0x2c0>
 8016968:	9806      	ldr	r0, [sp, #24]
 801696a:	9907      	ldr	r1, [sp, #28]
 801696c:	002a      	movs	r2, r5
 801696e:	0033      	movs	r3, r6
 8016970:	f7ea fe56 	bl	8001620 <__aeabi_ddiv>
 8016974:	9006      	str	r0, [sp, #24]
 8016976:	9107      	str	r1, [sp, #28]
 8016978:	e043      	b.n	8016a02 <_dtoa_r+0x38a>
 801697a:	46c0      	nop			; (mov r8, r8)
 801697c:	7ff00000 	.word	0x7ff00000
 8016980:	0000270f 	.word	0x0000270f
 8016984:	0801bc46 	.word	0x0801bc46
 8016988:	0801bc49 	.word	0x0801bc49
 801698c:	0801bb1a 	.word	0x0801bb1a
 8016990:	0801bb1b 	.word	0x0801bb1b
 8016994:	3ff00000 	.word	0x3ff00000
 8016998:	fffffc01 	.word	0xfffffc01
 801699c:	3ff80000 	.word	0x3ff80000
 80169a0:	636f4361 	.word	0x636f4361
 80169a4:	3fd287a7 	.word	0x3fd287a7
 80169a8:	8b60c8b3 	.word	0x8b60c8b3
 80169ac:	3fc68a28 	.word	0x3fc68a28
 80169b0:	509f79fb 	.word	0x509f79fb
 80169b4:	3fd34413 	.word	0x3fd34413
 80169b8:	0801bc78 	.word	0x0801bc78
 80169bc:	00000432 	.word	0x00000432
 80169c0:	00000412 	.word	0x00000412
 80169c4:	fe100000 	.word	0xfe100000
 80169c8:	0801bc50 	.word	0x0801bc50
 80169cc:	2302      	movs	r3, #2
 80169ce:	930e      	str	r3, [sp, #56]	; 0x38
 80169d0:	2f00      	cmp	r7, #0
 80169d2:	d016      	beq.n	8016a02 <_dtoa_r+0x38a>
 80169d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80169d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80169d8:	427c      	negs	r4, r7
 80169da:	330d      	adds	r3, #13
 80169dc:	4023      	ands	r3, r4
 80169de:	4acf      	ldr	r2, [pc, #828]	; (8016d1c <_dtoa_r+0x6a4>)
 80169e0:	00db      	lsls	r3, r3, #3
 80169e2:	18d3      	adds	r3, r2, r3
 80169e4:	681a      	ldr	r2, [r3, #0]
 80169e6:	685b      	ldr	r3, [r3, #4]
 80169e8:	f7eb fa24 	bl	8001e34 <__aeabi_dmul>
 80169ec:	2300      	movs	r3, #0
 80169ee:	2601      	movs	r6, #1
 80169f0:	001d      	movs	r5, r3
 80169f2:	9006      	str	r0, [sp, #24]
 80169f4:	9107      	str	r1, [sp, #28]
 80169f6:	1124      	asrs	r4, r4, #4
 80169f8:	2c00      	cmp	r4, #0
 80169fa:	d000      	beq.n	80169fe <_dtoa_r+0x386>
 80169fc:	e08c      	b.n	8016b18 <_dtoa_r+0x4a0>
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d1b8      	bne.n	8016974 <_dtoa_r+0x2fc>
 8016a02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d100      	bne.n	8016a0a <_dtoa_r+0x392>
 8016a08:	e096      	b.n	8016b38 <_dtoa_r+0x4c0>
 8016a0a:	9c06      	ldr	r4, [sp, #24]
 8016a0c:	9d07      	ldr	r5, [sp, #28]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	4bc3      	ldr	r3, [pc, #780]	; (8016d20 <_dtoa_r+0x6a8>)
 8016a12:	0020      	movs	r0, r4
 8016a14:	0029      	movs	r1, r5
 8016a16:	f7e9 fd27 	bl	8000468 <__aeabi_dcmplt>
 8016a1a:	2800      	cmp	r0, #0
 8016a1c:	d100      	bne.n	8016a20 <_dtoa_r+0x3a8>
 8016a1e:	e08b      	b.n	8016b38 <_dtoa_r+0x4c0>
 8016a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d100      	bne.n	8016a28 <_dtoa_r+0x3b0>
 8016a26:	e087      	b.n	8016b38 <_dtoa_r+0x4c0>
 8016a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	dd41      	ble.n	8016ab2 <_dtoa_r+0x43a>
 8016a2e:	4bbd      	ldr	r3, [pc, #756]	; (8016d24 <_dtoa_r+0x6ac>)
 8016a30:	2200      	movs	r2, #0
 8016a32:	0020      	movs	r0, r4
 8016a34:	0029      	movs	r1, r5
 8016a36:	f7eb f9fd 	bl	8001e34 <__aeabi_dmul>
 8016a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a3c:	9006      	str	r0, [sp, #24]
 8016a3e:	9107      	str	r1, [sp, #28]
 8016a40:	3301      	adds	r3, #1
 8016a42:	930e      	str	r3, [sp, #56]	; 0x38
 8016a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a46:	1e7e      	subs	r6, r7, #1
 8016a48:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016a4a:	9310      	str	r3, [sp, #64]	; 0x40
 8016a4c:	f7eb fffe 	bl	8002a4c <__aeabi_i2d>
 8016a50:	9a06      	ldr	r2, [sp, #24]
 8016a52:	9b07      	ldr	r3, [sp, #28]
 8016a54:	f7eb f9ee 	bl	8001e34 <__aeabi_dmul>
 8016a58:	2200      	movs	r2, #0
 8016a5a:	4bb3      	ldr	r3, [pc, #716]	; (8016d28 <_dtoa_r+0x6b0>)
 8016a5c:	f7ea fac4 	bl	8000fe8 <__aeabi_dadd>
 8016a60:	4ab2      	ldr	r2, [pc, #712]	; (8016d2c <_dtoa_r+0x6b4>)
 8016a62:	900e      	str	r0, [sp, #56]	; 0x38
 8016a64:	910f      	str	r1, [sp, #60]	; 0x3c
 8016a66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016a68:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016a6a:	4694      	mov	ip, r2
 8016a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a6e:	4463      	add	r3, ip
 8016a70:	9315      	str	r3, [sp, #84]	; 0x54
 8016a72:	001d      	movs	r5, r3
 8016a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d161      	bne.n	8016b3e <_dtoa_r+0x4c6>
 8016a7a:	9806      	ldr	r0, [sp, #24]
 8016a7c:	9907      	ldr	r1, [sp, #28]
 8016a7e:	2200      	movs	r2, #0
 8016a80:	4bab      	ldr	r3, [pc, #684]	; (8016d30 <_dtoa_r+0x6b8>)
 8016a82:	f7eb fc49 	bl	8002318 <__aeabi_dsub>
 8016a86:	0022      	movs	r2, r4
 8016a88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a8a:	9006      	str	r0, [sp, #24]
 8016a8c:	9107      	str	r1, [sp, #28]
 8016a8e:	f7e9 fcff 	bl	8000490 <__aeabi_dcmpgt>
 8016a92:	2800      	cmp	r0, #0
 8016a94:	d000      	beq.n	8016a98 <_dtoa_r+0x420>
 8016a96:	e2aa      	b.n	8016fee <_dtoa_r+0x976>
 8016a98:	48a6      	ldr	r0, [pc, #664]	; (8016d34 <_dtoa_r+0x6bc>)
 8016a9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016a9c:	4684      	mov	ip, r0
 8016a9e:	4461      	add	r1, ip
 8016aa0:	000b      	movs	r3, r1
 8016aa2:	9806      	ldr	r0, [sp, #24]
 8016aa4:	9907      	ldr	r1, [sp, #28]
 8016aa6:	0022      	movs	r2, r4
 8016aa8:	f7e9 fcde 	bl	8000468 <__aeabi_dcmplt>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	d000      	beq.n	8016ab2 <_dtoa_r+0x43a>
 8016ab0:	e297      	b.n	8016fe2 <_dtoa_r+0x96a>
 8016ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016ab4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016ab6:	9306      	str	r3, [sp, #24]
 8016ab8:	9407      	str	r4, [sp, #28]
 8016aba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	da00      	bge.n	8016ac2 <_dtoa_r+0x44a>
 8016ac0:	e15e      	b.n	8016d80 <_dtoa_r+0x708>
 8016ac2:	2f0e      	cmp	r7, #14
 8016ac4:	dd00      	ble.n	8016ac8 <_dtoa_r+0x450>
 8016ac6:	e15b      	b.n	8016d80 <_dtoa_r+0x708>
 8016ac8:	4b94      	ldr	r3, [pc, #592]	; (8016d1c <_dtoa_r+0x6a4>)
 8016aca:	00fa      	lsls	r2, r7, #3
 8016acc:	189b      	adds	r3, r3, r2
 8016ace:	685c      	ldr	r4, [r3, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	9304      	str	r3, [sp, #16]
 8016ad4:	9405      	str	r4, [sp, #20]
 8016ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	db00      	blt.n	8016ade <_dtoa_r+0x466>
 8016adc:	e0da      	b.n	8016c94 <_dtoa_r+0x61c>
 8016ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	dd00      	ble.n	8016ae6 <_dtoa_r+0x46e>
 8016ae4:	e0d6      	b.n	8016c94 <_dtoa_r+0x61c>
 8016ae6:	d000      	beq.n	8016aea <_dtoa_r+0x472>
 8016ae8:	e27f      	b.n	8016fea <_dtoa_r+0x972>
 8016aea:	9804      	ldr	r0, [sp, #16]
 8016aec:	9905      	ldr	r1, [sp, #20]
 8016aee:	2200      	movs	r2, #0
 8016af0:	4b8f      	ldr	r3, [pc, #572]	; (8016d30 <_dtoa_r+0x6b8>)
 8016af2:	f7eb f99f 	bl	8001e34 <__aeabi_dmul>
 8016af6:	9a06      	ldr	r2, [sp, #24]
 8016af8:	9b07      	ldr	r3, [sp, #28]
 8016afa:	f7e9 fcd3 	bl	80004a4 <__aeabi_dcmpge>
 8016afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b00:	9304      	str	r3, [sp, #16]
 8016b02:	001e      	movs	r6, r3
 8016b04:	2800      	cmp	r0, #0
 8016b06:	d000      	beq.n	8016b0a <_dtoa_r+0x492>
 8016b08:	e251      	b.n	8016fae <_dtoa_r+0x936>
 8016b0a:	9b08      	ldr	r3, [sp, #32]
 8016b0c:	9a08      	ldr	r2, [sp, #32]
 8016b0e:	1c5d      	adds	r5, r3, #1
 8016b10:	2331      	movs	r3, #49	; 0x31
 8016b12:	3701      	adds	r7, #1
 8016b14:	7013      	strb	r3, [r2, #0]
 8016b16:	e24d      	b.n	8016fb4 <_dtoa_r+0x93c>
 8016b18:	4234      	tst	r4, r6
 8016b1a:	d00a      	beq.n	8016b32 <_dtoa_r+0x4ba>
 8016b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b1e:	4a86      	ldr	r2, [pc, #536]	; (8016d38 <_dtoa_r+0x6c0>)
 8016b20:	3301      	adds	r3, #1
 8016b22:	930e      	str	r3, [sp, #56]	; 0x38
 8016b24:	00eb      	lsls	r3, r5, #3
 8016b26:	189b      	adds	r3, r3, r2
 8016b28:	681a      	ldr	r2, [r3, #0]
 8016b2a:	685b      	ldr	r3, [r3, #4]
 8016b2c:	f7eb f982 	bl	8001e34 <__aeabi_dmul>
 8016b30:	0033      	movs	r3, r6
 8016b32:	1064      	asrs	r4, r4, #1
 8016b34:	3501      	adds	r5, #1
 8016b36:	e75f      	b.n	80169f8 <_dtoa_r+0x380>
 8016b38:	003e      	movs	r6, r7
 8016b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b3c:	e784      	b.n	8016a48 <_dtoa_r+0x3d0>
 8016b3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b40:	1e5a      	subs	r2, r3, #1
 8016b42:	4b76      	ldr	r3, [pc, #472]	; (8016d1c <_dtoa_r+0x6a4>)
 8016b44:	00d2      	lsls	r2, r2, #3
 8016b46:	189b      	adds	r3, r3, r2
 8016b48:	6818      	ldr	r0, [r3, #0]
 8016b4a:	6859      	ldr	r1, [r3, #4]
 8016b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d04b      	beq.n	8016bea <_dtoa_r+0x572>
 8016b52:	0002      	movs	r2, r0
 8016b54:	000b      	movs	r3, r1
 8016b56:	2000      	movs	r0, #0
 8016b58:	4978      	ldr	r1, [pc, #480]	; (8016d3c <_dtoa_r+0x6c4>)
 8016b5a:	f7ea fd61 	bl	8001620 <__aeabi_ddiv>
 8016b5e:	002b      	movs	r3, r5
 8016b60:	0022      	movs	r2, r4
 8016b62:	f7eb fbd9 	bl	8002318 <__aeabi_dsub>
 8016b66:	9b08      	ldr	r3, [sp, #32]
 8016b68:	900e      	str	r0, [sp, #56]	; 0x38
 8016b6a:	910f      	str	r1, [sp, #60]	; 0x3c
 8016b6c:	9315      	str	r3, [sp, #84]	; 0x54
 8016b6e:	9806      	ldr	r0, [sp, #24]
 8016b70:	9907      	ldr	r1, [sp, #28]
 8016b72:	f7eb ff35 	bl	80029e0 <__aeabi_d2iz>
 8016b76:	0004      	movs	r4, r0
 8016b78:	f7eb ff68 	bl	8002a4c <__aeabi_i2d>
 8016b7c:	0002      	movs	r2, r0
 8016b7e:	000b      	movs	r3, r1
 8016b80:	9806      	ldr	r0, [sp, #24]
 8016b82:	9907      	ldr	r1, [sp, #28]
 8016b84:	f7eb fbc8 	bl	8002318 <__aeabi_dsub>
 8016b88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016b8a:	3430      	adds	r4, #48	; 0x30
 8016b8c:	1c5d      	adds	r5, r3, #1
 8016b8e:	701c      	strb	r4, [r3, #0]
 8016b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b94:	9006      	str	r0, [sp, #24]
 8016b96:	9107      	str	r1, [sp, #28]
 8016b98:	f7e9 fc66 	bl	8000468 <__aeabi_dcmplt>
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	d16c      	bne.n	8016c7a <_dtoa_r+0x602>
 8016ba0:	9a06      	ldr	r2, [sp, #24]
 8016ba2:	9b07      	ldr	r3, [sp, #28]
 8016ba4:	2000      	movs	r0, #0
 8016ba6:	495e      	ldr	r1, [pc, #376]	; (8016d20 <_dtoa_r+0x6a8>)
 8016ba8:	f7eb fbb6 	bl	8002318 <__aeabi_dsub>
 8016bac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bb0:	f7e9 fc5a 	bl	8000468 <__aeabi_dcmplt>
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	d000      	beq.n	8016bba <_dtoa_r+0x542>
 8016bb8:	e0c3      	b.n	8016d42 <_dtoa_r+0x6ca>
 8016bba:	9b08      	ldr	r3, [sp, #32]
 8016bbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016bbe:	1aeb      	subs	r3, r5, r3
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	dc00      	bgt.n	8016bc6 <_dtoa_r+0x54e>
 8016bc4:	e775      	b.n	8016ab2 <_dtoa_r+0x43a>
 8016bc6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016bc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016bca:	2200      	movs	r2, #0
 8016bcc:	4b55      	ldr	r3, [pc, #340]	; (8016d24 <_dtoa_r+0x6ac>)
 8016bce:	f7eb f931 	bl	8001e34 <__aeabi_dmul>
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	900e      	str	r0, [sp, #56]	; 0x38
 8016bd6:	910f      	str	r1, [sp, #60]	; 0x3c
 8016bd8:	9806      	ldr	r0, [sp, #24]
 8016bda:	9907      	ldr	r1, [sp, #28]
 8016bdc:	4b51      	ldr	r3, [pc, #324]	; (8016d24 <_dtoa_r+0x6ac>)
 8016bde:	f7eb f929 	bl	8001e34 <__aeabi_dmul>
 8016be2:	9515      	str	r5, [sp, #84]	; 0x54
 8016be4:	9006      	str	r0, [sp, #24]
 8016be6:	9107      	str	r1, [sp, #28]
 8016be8:	e7c1      	b.n	8016b6e <_dtoa_r+0x4f6>
 8016bea:	0022      	movs	r2, r4
 8016bec:	002b      	movs	r3, r5
 8016bee:	f7eb f921 	bl	8001e34 <__aeabi_dmul>
 8016bf2:	9c08      	ldr	r4, [sp, #32]
 8016bf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016bf6:	0023      	movs	r3, r4
 8016bf8:	4694      	mov	ip, r2
 8016bfa:	900e      	str	r0, [sp, #56]	; 0x38
 8016bfc:	910f      	str	r1, [sp, #60]	; 0x3c
 8016bfe:	4463      	add	r3, ip
 8016c00:	9315      	str	r3, [sp, #84]	; 0x54
 8016c02:	9806      	ldr	r0, [sp, #24]
 8016c04:	9907      	ldr	r1, [sp, #28]
 8016c06:	f7eb feeb 	bl	80029e0 <__aeabi_d2iz>
 8016c0a:	0005      	movs	r5, r0
 8016c0c:	f7eb ff1e 	bl	8002a4c <__aeabi_i2d>
 8016c10:	000b      	movs	r3, r1
 8016c12:	0002      	movs	r2, r0
 8016c14:	9806      	ldr	r0, [sp, #24]
 8016c16:	9907      	ldr	r1, [sp, #28]
 8016c18:	f7eb fb7e 	bl	8002318 <__aeabi_dsub>
 8016c1c:	3530      	adds	r5, #48	; 0x30
 8016c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016c20:	7025      	strb	r5, [r4, #0]
 8016c22:	3401      	adds	r4, #1
 8016c24:	9006      	str	r0, [sp, #24]
 8016c26:	9107      	str	r1, [sp, #28]
 8016c28:	42a3      	cmp	r3, r4
 8016c2a:	d12a      	bne.n	8016c82 <_dtoa_r+0x60a>
 8016c2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016c2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016c30:	9a08      	ldr	r2, [sp, #32]
 8016c32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c34:	4694      	mov	ip, r2
 8016c36:	4463      	add	r3, ip
 8016c38:	2200      	movs	r2, #0
 8016c3a:	001d      	movs	r5, r3
 8016c3c:	4b3f      	ldr	r3, [pc, #252]	; (8016d3c <_dtoa_r+0x6c4>)
 8016c3e:	f7ea f9d3 	bl	8000fe8 <__aeabi_dadd>
 8016c42:	0002      	movs	r2, r0
 8016c44:	000b      	movs	r3, r1
 8016c46:	9806      	ldr	r0, [sp, #24]
 8016c48:	9907      	ldr	r1, [sp, #28]
 8016c4a:	f7e9 fc21 	bl	8000490 <__aeabi_dcmpgt>
 8016c4e:	2800      	cmp	r0, #0
 8016c50:	d000      	beq.n	8016c54 <_dtoa_r+0x5dc>
 8016c52:	e076      	b.n	8016d42 <_dtoa_r+0x6ca>
 8016c54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c58:	2000      	movs	r0, #0
 8016c5a:	4938      	ldr	r1, [pc, #224]	; (8016d3c <_dtoa_r+0x6c4>)
 8016c5c:	f7eb fb5c 	bl	8002318 <__aeabi_dsub>
 8016c60:	0002      	movs	r2, r0
 8016c62:	000b      	movs	r3, r1
 8016c64:	9806      	ldr	r0, [sp, #24]
 8016c66:	9907      	ldr	r1, [sp, #28]
 8016c68:	f7e9 fbfe 	bl	8000468 <__aeabi_dcmplt>
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d100      	bne.n	8016c72 <_dtoa_r+0x5fa>
 8016c70:	e71f      	b.n	8016ab2 <_dtoa_r+0x43a>
 8016c72:	1e6b      	subs	r3, r5, #1
 8016c74:	781a      	ldrb	r2, [r3, #0]
 8016c76:	2a30      	cmp	r2, #48	; 0x30
 8016c78:	d001      	beq.n	8016c7e <_dtoa_r+0x606>
 8016c7a:	0037      	movs	r7, r6
 8016c7c:	e03f      	b.n	8016cfe <_dtoa_r+0x686>
 8016c7e:	001d      	movs	r5, r3
 8016c80:	e7f7      	b.n	8016c72 <_dtoa_r+0x5fa>
 8016c82:	9806      	ldr	r0, [sp, #24]
 8016c84:	9907      	ldr	r1, [sp, #28]
 8016c86:	2200      	movs	r2, #0
 8016c88:	4b26      	ldr	r3, [pc, #152]	; (8016d24 <_dtoa_r+0x6ac>)
 8016c8a:	f7eb f8d3 	bl	8001e34 <__aeabi_dmul>
 8016c8e:	9006      	str	r0, [sp, #24]
 8016c90:	9107      	str	r1, [sp, #28]
 8016c92:	e7b6      	b.n	8016c02 <_dtoa_r+0x58a>
 8016c94:	9e08      	ldr	r6, [sp, #32]
 8016c96:	9a04      	ldr	r2, [sp, #16]
 8016c98:	9b05      	ldr	r3, [sp, #20]
 8016c9a:	9806      	ldr	r0, [sp, #24]
 8016c9c:	9907      	ldr	r1, [sp, #28]
 8016c9e:	f7ea fcbf 	bl	8001620 <__aeabi_ddiv>
 8016ca2:	f7eb fe9d 	bl	80029e0 <__aeabi_d2iz>
 8016ca6:	0004      	movs	r4, r0
 8016ca8:	f7eb fed0 	bl	8002a4c <__aeabi_i2d>
 8016cac:	9a04      	ldr	r2, [sp, #16]
 8016cae:	9b05      	ldr	r3, [sp, #20]
 8016cb0:	f7eb f8c0 	bl	8001e34 <__aeabi_dmul>
 8016cb4:	0002      	movs	r2, r0
 8016cb6:	000b      	movs	r3, r1
 8016cb8:	9806      	ldr	r0, [sp, #24]
 8016cba:	9907      	ldr	r1, [sp, #28]
 8016cbc:	f7eb fb2c 	bl	8002318 <__aeabi_dsub>
 8016cc0:	0023      	movs	r3, r4
 8016cc2:	3330      	adds	r3, #48	; 0x30
 8016cc4:	7033      	strb	r3, [r6, #0]
 8016cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cc8:	9b08      	ldr	r3, [sp, #32]
 8016cca:	1c75      	adds	r5, r6, #1
 8016ccc:	1aeb      	subs	r3, r5, r3
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d148      	bne.n	8016d64 <_dtoa_r+0x6ec>
 8016cd2:	0002      	movs	r2, r0
 8016cd4:	000b      	movs	r3, r1
 8016cd6:	f7ea f987 	bl	8000fe8 <__aeabi_dadd>
 8016cda:	9a04      	ldr	r2, [sp, #16]
 8016cdc:	9b05      	ldr	r3, [sp, #20]
 8016cde:	9006      	str	r0, [sp, #24]
 8016ce0:	9107      	str	r1, [sp, #28]
 8016ce2:	f7e9 fbd5 	bl	8000490 <__aeabi_dcmpgt>
 8016ce6:	2800      	cmp	r0, #0
 8016ce8:	d12a      	bne.n	8016d40 <_dtoa_r+0x6c8>
 8016cea:	9a04      	ldr	r2, [sp, #16]
 8016cec:	9b05      	ldr	r3, [sp, #20]
 8016cee:	9806      	ldr	r0, [sp, #24]
 8016cf0:	9907      	ldr	r1, [sp, #28]
 8016cf2:	f7e9 fbb3 	bl	800045c <__aeabi_dcmpeq>
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	d001      	beq.n	8016cfe <_dtoa_r+0x686>
 8016cfa:	07e3      	lsls	r3, r4, #31
 8016cfc:	d420      	bmi.n	8016d40 <_dtoa_r+0x6c8>
 8016cfe:	9903      	ldr	r1, [sp, #12]
 8016d00:	9802      	ldr	r0, [sp, #8]
 8016d02:	f000 ff35 	bl	8017b70 <_Bfree>
 8016d06:	2300      	movs	r3, #0
 8016d08:	702b      	strb	r3, [r5, #0]
 8016d0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016d0c:	3701      	adds	r7, #1
 8016d0e:	601f      	str	r7, [r3, #0]
 8016d10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d100      	bne.n	8016d18 <_dtoa_r+0x6a0>
 8016d16:	e4e4      	b.n	80166e2 <_dtoa_r+0x6a>
 8016d18:	601d      	str	r5, [r3, #0]
 8016d1a:	e4e2      	b.n	80166e2 <_dtoa_r+0x6a>
 8016d1c:	0801bc78 	.word	0x0801bc78
 8016d20:	3ff00000 	.word	0x3ff00000
 8016d24:	40240000 	.word	0x40240000
 8016d28:	401c0000 	.word	0x401c0000
 8016d2c:	fcc00000 	.word	0xfcc00000
 8016d30:	40140000 	.word	0x40140000
 8016d34:	7cc00000 	.word	0x7cc00000
 8016d38:	0801bc50 	.word	0x0801bc50
 8016d3c:	3fe00000 	.word	0x3fe00000
 8016d40:	003e      	movs	r6, r7
 8016d42:	1e6b      	subs	r3, r5, #1
 8016d44:	781a      	ldrb	r2, [r3, #0]
 8016d46:	2a39      	cmp	r2, #57	; 0x39
 8016d48:	d106      	bne.n	8016d58 <_dtoa_r+0x6e0>
 8016d4a:	9a08      	ldr	r2, [sp, #32]
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d107      	bne.n	8016d60 <_dtoa_r+0x6e8>
 8016d50:	2330      	movs	r3, #48	; 0x30
 8016d52:	7013      	strb	r3, [r2, #0]
 8016d54:	0013      	movs	r3, r2
 8016d56:	3601      	adds	r6, #1
 8016d58:	781a      	ldrb	r2, [r3, #0]
 8016d5a:	3201      	adds	r2, #1
 8016d5c:	701a      	strb	r2, [r3, #0]
 8016d5e:	e78c      	b.n	8016c7a <_dtoa_r+0x602>
 8016d60:	001d      	movs	r5, r3
 8016d62:	e7ee      	b.n	8016d42 <_dtoa_r+0x6ca>
 8016d64:	2200      	movs	r2, #0
 8016d66:	4ba4      	ldr	r3, [pc, #656]	; (8016ff8 <_dtoa_r+0x980>)
 8016d68:	f7eb f864 	bl	8001e34 <__aeabi_dmul>
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	2300      	movs	r3, #0
 8016d70:	9006      	str	r0, [sp, #24]
 8016d72:	9107      	str	r1, [sp, #28]
 8016d74:	002e      	movs	r6, r5
 8016d76:	f7e9 fb71 	bl	800045c <__aeabi_dcmpeq>
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	d08b      	beq.n	8016c96 <_dtoa_r+0x61e>
 8016d7e:	e7be      	b.n	8016cfe <_dtoa_r+0x686>
 8016d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016d82:	2a00      	cmp	r2, #0
 8016d84:	d100      	bne.n	8016d88 <_dtoa_r+0x710>
 8016d86:	e0da      	b.n	8016f3e <_dtoa_r+0x8c6>
 8016d88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016d8a:	2a01      	cmp	r2, #1
 8016d8c:	dd00      	ble.n	8016d90 <_dtoa_r+0x718>
 8016d8e:	e0bd      	b.n	8016f0c <_dtoa_r+0x894>
 8016d90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016d92:	2a00      	cmp	r2, #0
 8016d94:	d100      	bne.n	8016d98 <_dtoa_r+0x720>
 8016d96:	e0b5      	b.n	8016f04 <_dtoa_r+0x88c>
 8016d98:	4a98      	ldr	r2, [pc, #608]	; (8016ffc <_dtoa_r+0x984>)
 8016d9a:	189b      	adds	r3, r3, r2
 8016d9c:	9d04      	ldr	r5, [sp, #16]
 8016d9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016da2:	2101      	movs	r1, #1
 8016da4:	18d2      	adds	r2, r2, r3
 8016da6:	920a      	str	r2, [sp, #40]	; 0x28
 8016da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016daa:	9802      	ldr	r0, [sp, #8]
 8016dac:	18d3      	adds	r3, r2, r3
 8016dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8016db0:	f000 ffad 	bl	8017d0e <__i2b>
 8016db4:	0006      	movs	r6, r0
 8016db6:	2c00      	cmp	r4, #0
 8016db8:	dd0e      	ble.n	8016dd8 <_dtoa_r+0x760>
 8016dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	dd0b      	ble.n	8016dd8 <_dtoa_r+0x760>
 8016dc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016dc2:	0023      	movs	r3, r4
 8016dc4:	4294      	cmp	r4, r2
 8016dc6:	dd00      	ble.n	8016dca <_dtoa_r+0x752>
 8016dc8:	0013      	movs	r3, r2
 8016dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016dcc:	1ae4      	subs	r4, r4, r3
 8016dce:	1ad2      	subs	r2, r2, r3
 8016dd0:	920a      	str	r2, [sp, #40]	; 0x28
 8016dd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016dd4:	1ad3      	subs	r3, r2, r3
 8016dd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016dd8:	9b04      	ldr	r3, [sp, #16]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d01f      	beq.n	8016e1e <_dtoa_r+0x7a6>
 8016dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d100      	bne.n	8016de6 <_dtoa_r+0x76e>
 8016de4:	e0af      	b.n	8016f46 <_dtoa_r+0x8ce>
 8016de6:	2d00      	cmp	r5, #0
 8016de8:	d011      	beq.n	8016e0e <_dtoa_r+0x796>
 8016dea:	0031      	movs	r1, r6
 8016dec:	002a      	movs	r2, r5
 8016dee:	9802      	ldr	r0, [sp, #8]
 8016df0:	f001 f826 	bl	8017e40 <__pow5mult>
 8016df4:	9a03      	ldr	r2, [sp, #12]
 8016df6:	0001      	movs	r1, r0
 8016df8:	0006      	movs	r6, r0
 8016dfa:	9802      	ldr	r0, [sp, #8]
 8016dfc:	f000 ff90 	bl	8017d20 <__multiply>
 8016e00:	9903      	ldr	r1, [sp, #12]
 8016e02:	9010      	str	r0, [sp, #64]	; 0x40
 8016e04:	9802      	ldr	r0, [sp, #8]
 8016e06:	f000 feb3 	bl	8017b70 <_Bfree>
 8016e0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e0c:	9303      	str	r3, [sp, #12]
 8016e0e:	9b04      	ldr	r3, [sp, #16]
 8016e10:	1b5a      	subs	r2, r3, r5
 8016e12:	d004      	beq.n	8016e1e <_dtoa_r+0x7a6>
 8016e14:	9903      	ldr	r1, [sp, #12]
 8016e16:	9802      	ldr	r0, [sp, #8]
 8016e18:	f001 f812 	bl	8017e40 <__pow5mult>
 8016e1c:	9003      	str	r0, [sp, #12]
 8016e1e:	2101      	movs	r1, #1
 8016e20:	9802      	ldr	r0, [sp, #8]
 8016e22:	f000 ff74 	bl	8017d0e <__i2b>
 8016e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016e28:	9004      	str	r0, [sp, #16]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d100      	bne.n	8016e30 <_dtoa_r+0x7b8>
 8016e2e:	e1e3      	b.n	80171f8 <_dtoa_r+0xb80>
 8016e30:	001a      	movs	r2, r3
 8016e32:	0001      	movs	r1, r0
 8016e34:	9802      	ldr	r0, [sp, #8]
 8016e36:	f001 f803 	bl	8017e40 <__pow5mult>
 8016e3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016e3c:	9004      	str	r0, [sp, #16]
 8016e3e:	2b01      	cmp	r3, #1
 8016e40:	dd00      	ble.n	8016e44 <_dtoa_r+0x7cc>
 8016e42:	e082      	b.n	8016f4a <_dtoa_r+0x8d2>
 8016e44:	2500      	movs	r5, #0
 8016e46:	9b06      	ldr	r3, [sp, #24]
 8016e48:	42ab      	cmp	r3, r5
 8016e4a:	d10e      	bne.n	8016e6a <_dtoa_r+0x7f2>
 8016e4c:	9b07      	ldr	r3, [sp, #28]
 8016e4e:	031b      	lsls	r3, r3, #12
 8016e50:	42ab      	cmp	r3, r5
 8016e52:	d10a      	bne.n	8016e6a <_dtoa_r+0x7f2>
 8016e54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e56:	9a07      	ldr	r2, [sp, #28]
 8016e58:	4213      	tst	r3, r2
 8016e5a:	d006      	beq.n	8016e6a <_dtoa_r+0x7f2>
 8016e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e5e:	3501      	adds	r5, #1
 8016e60:	3301      	adds	r3, #1
 8016e62:	930a      	str	r3, [sp, #40]	; 0x28
 8016e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e66:	3301      	adds	r3, #1
 8016e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016e6c:	2001      	movs	r0, #1
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d16c      	bne.n	8016f4c <_dtoa_r+0x8d4>
 8016e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e74:	1818      	adds	r0, r3, r0
 8016e76:	231f      	movs	r3, #31
 8016e78:	4018      	ands	r0, r3
 8016e7a:	d07e      	beq.n	8016f7a <_dtoa_r+0x902>
 8016e7c:	3301      	adds	r3, #1
 8016e7e:	1a1b      	subs	r3, r3, r0
 8016e80:	2b04      	cmp	r3, #4
 8016e82:	dd70      	ble.n	8016f66 <_dtoa_r+0x8ee>
 8016e84:	231c      	movs	r3, #28
 8016e86:	1a18      	subs	r0, r3, r0
 8016e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e8a:	1824      	adds	r4, r4, r0
 8016e8c:	181b      	adds	r3, r3, r0
 8016e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8016e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e92:	181b      	adds	r3, r3, r0
 8016e94:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	dd05      	ble.n	8016ea8 <_dtoa_r+0x830>
 8016e9c:	001a      	movs	r2, r3
 8016e9e:	9903      	ldr	r1, [sp, #12]
 8016ea0:	9802      	ldr	r0, [sp, #8]
 8016ea2:	f001 f80f 	bl	8017ec4 <__lshift>
 8016ea6:	9003      	str	r0, [sp, #12]
 8016ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	dd05      	ble.n	8016eba <_dtoa_r+0x842>
 8016eae:	001a      	movs	r2, r3
 8016eb0:	9904      	ldr	r1, [sp, #16]
 8016eb2:	9802      	ldr	r0, [sp, #8]
 8016eb4:	f001 f806 	bl	8017ec4 <__lshift>
 8016eb8:	9004      	str	r0, [sp, #16]
 8016eba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d05e      	beq.n	8016f7e <_dtoa_r+0x906>
 8016ec0:	9904      	ldr	r1, [sp, #16]
 8016ec2:	9803      	ldr	r0, [sp, #12]
 8016ec4:	f001 f850 	bl	8017f68 <__mcmp>
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	da58      	bge.n	8016f7e <_dtoa_r+0x906>
 8016ecc:	2300      	movs	r3, #0
 8016ece:	220a      	movs	r2, #10
 8016ed0:	9903      	ldr	r1, [sp, #12]
 8016ed2:	9802      	ldr	r0, [sp, #8]
 8016ed4:	f000 fe56 	bl	8017b84 <__multadd>
 8016ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016eda:	3f01      	subs	r7, #1
 8016edc:	9003      	str	r0, [sp, #12]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d100      	bne.n	8016ee4 <_dtoa_r+0x86c>
 8016ee2:	e190      	b.n	8017206 <_dtoa_r+0xb8e>
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	0031      	movs	r1, r6
 8016ee8:	220a      	movs	r2, #10
 8016eea:	9802      	ldr	r0, [sp, #8]
 8016eec:	f000 fe4a 	bl	8017b84 <__multadd>
 8016ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ef2:	0006      	movs	r6, r0
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	dd00      	ble.n	8016efa <_dtoa_r+0x882>
 8016ef8:	e088      	b.n	801700c <_dtoa_r+0x994>
 8016efa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016efc:	2b02      	cmp	r3, #2
 8016efe:	dc00      	bgt.n	8016f02 <_dtoa_r+0x88a>
 8016f00:	e084      	b.n	801700c <_dtoa_r+0x994>
 8016f02:	e044      	b.n	8016f8e <_dtoa_r+0x916>
 8016f04:	2336      	movs	r3, #54	; 0x36
 8016f06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016f08:	1a9b      	subs	r3, r3, r2
 8016f0a:	e747      	b.n	8016d9c <_dtoa_r+0x724>
 8016f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f0e:	1e5d      	subs	r5, r3, #1
 8016f10:	9b04      	ldr	r3, [sp, #16]
 8016f12:	42ab      	cmp	r3, r5
 8016f14:	db08      	blt.n	8016f28 <_dtoa_r+0x8b0>
 8016f16:	1b5d      	subs	r5, r3, r5
 8016f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	da0c      	bge.n	8016f38 <_dtoa_r+0x8c0>
 8016f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f22:	1a9c      	subs	r4, r3, r2
 8016f24:	2300      	movs	r3, #0
 8016f26:	e73b      	b.n	8016da0 <_dtoa_r+0x728>
 8016f28:	9b04      	ldr	r3, [sp, #16]
 8016f2a:	9504      	str	r5, [sp, #16]
 8016f2c:	1aea      	subs	r2, r5, r3
 8016f2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f30:	2500      	movs	r5, #0
 8016f32:	189b      	adds	r3, r3, r2
 8016f34:	9311      	str	r3, [sp, #68]	; 0x44
 8016f36:	e7ef      	b.n	8016f18 <_dtoa_r+0x8a0>
 8016f38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f3c:	e730      	b.n	8016da0 <_dtoa_r+0x728>
 8016f3e:	9d04      	ldr	r5, [sp, #16]
 8016f40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016f42:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8016f44:	e737      	b.n	8016db6 <_dtoa_r+0x73e>
 8016f46:	9a04      	ldr	r2, [sp, #16]
 8016f48:	e764      	b.n	8016e14 <_dtoa_r+0x79c>
 8016f4a:	2500      	movs	r5, #0
 8016f4c:	9b04      	ldr	r3, [sp, #16]
 8016f4e:	9a04      	ldr	r2, [sp, #16]
 8016f50:	691b      	ldr	r3, [r3, #16]
 8016f52:	9310      	str	r3, [sp, #64]	; 0x40
 8016f54:	3303      	adds	r3, #3
 8016f56:	009b      	lsls	r3, r3, #2
 8016f58:	18d3      	adds	r3, r2, r3
 8016f5a:	6858      	ldr	r0, [r3, #4]
 8016f5c:	f000 fe8e 	bl	8017c7c <__hi0bits>
 8016f60:	2320      	movs	r3, #32
 8016f62:	1a18      	subs	r0, r3, r0
 8016f64:	e785      	b.n	8016e72 <_dtoa_r+0x7fa>
 8016f66:	2b04      	cmp	r3, #4
 8016f68:	d095      	beq.n	8016e96 <_dtoa_r+0x81e>
 8016f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f6c:	331c      	adds	r3, #28
 8016f6e:	18d2      	adds	r2, r2, r3
 8016f70:	920a      	str	r2, [sp, #40]	; 0x28
 8016f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016f74:	18e4      	adds	r4, r4, r3
 8016f76:	18d3      	adds	r3, r2, r3
 8016f78:	e78c      	b.n	8016e94 <_dtoa_r+0x81c>
 8016f7a:	0003      	movs	r3, r0
 8016f7c:	e7f5      	b.n	8016f6a <_dtoa_r+0x8f2>
 8016f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	dc3d      	bgt.n	8017000 <_dtoa_r+0x988>
 8016f84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016f86:	2b02      	cmp	r3, #2
 8016f88:	dd3a      	ble.n	8017000 <_dtoa_r+0x988>
 8016f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f8c:	930c      	str	r3, [sp, #48]	; 0x30
 8016f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d10c      	bne.n	8016fae <_dtoa_r+0x936>
 8016f94:	9904      	ldr	r1, [sp, #16]
 8016f96:	2205      	movs	r2, #5
 8016f98:	9802      	ldr	r0, [sp, #8]
 8016f9a:	f000 fdf3 	bl	8017b84 <__multadd>
 8016f9e:	9004      	str	r0, [sp, #16]
 8016fa0:	0001      	movs	r1, r0
 8016fa2:	9803      	ldr	r0, [sp, #12]
 8016fa4:	f000 ffe0 	bl	8017f68 <__mcmp>
 8016fa8:	2800      	cmp	r0, #0
 8016faa:	dd00      	ble.n	8016fae <_dtoa_r+0x936>
 8016fac:	e5ad      	b.n	8016b0a <_dtoa_r+0x492>
 8016fae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016fb0:	9d08      	ldr	r5, [sp, #32]
 8016fb2:	43df      	mvns	r7, r3
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8016fb8:	9904      	ldr	r1, [sp, #16]
 8016fba:	9802      	ldr	r0, [sp, #8]
 8016fbc:	f000 fdd8 	bl	8017b70 <_Bfree>
 8016fc0:	2e00      	cmp	r6, #0
 8016fc2:	d100      	bne.n	8016fc6 <_dtoa_r+0x94e>
 8016fc4:	e69b      	b.n	8016cfe <_dtoa_r+0x686>
 8016fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d005      	beq.n	8016fd8 <_dtoa_r+0x960>
 8016fcc:	42b3      	cmp	r3, r6
 8016fce:	d003      	beq.n	8016fd8 <_dtoa_r+0x960>
 8016fd0:	0019      	movs	r1, r3
 8016fd2:	9802      	ldr	r0, [sp, #8]
 8016fd4:	f000 fdcc 	bl	8017b70 <_Bfree>
 8016fd8:	0031      	movs	r1, r6
 8016fda:	9802      	ldr	r0, [sp, #8]
 8016fdc:	f000 fdc8 	bl	8017b70 <_Bfree>
 8016fe0:	e68d      	b.n	8016cfe <_dtoa_r+0x686>
 8016fe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fe4:	9304      	str	r3, [sp, #16]
 8016fe6:	001e      	movs	r6, r3
 8016fe8:	e7e1      	b.n	8016fae <_dtoa_r+0x936>
 8016fea:	2300      	movs	r3, #0
 8016fec:	e7fa      	b.n	8016fe4 <_dtoa_r+0x96c>
 8016fee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ff0:	0037      	movs	r7, r6
 8016ff2:	9304      	str	r3, [sp, #16]
 8016ff4:	001e      	movs	r6, r3
 8016ff6:	e588      	b.n	8016b0a <_dtoa_r+0x492>
 8016ff8:	40240000 	.word	0x40240000
 8016ffc:	00000433 	.word	0x00000433
 8017000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017002:	2b00      	cmp	r3, #0
 8017004:	d100      	bne.n	8017008 <_dtoa_r+0x990>
 8017006:	e0b2      	b.n	801716e <_dtoa_r+0xaf6>
 8017008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801700a:	930c      	str	r3, [sp, #48]	; 0x30
 801700c:	2c00      	cmp	r4, #0
 801700e:	dd05      	ble.n	801701c <_dtoa_r+0x9a4>
 8017010:	0031      	movs	r1, r6
 8017012:	0022      	movs	r2, r4
 8017014:	9802      	ldr	r0, [sp, #8]
 8017016:	f000 ff55 	bl	8017ec4 <__lshift>
 801701a:	0006      	movs	r6, r0
 801701c:	0030      	movs	r0, r6
 801701e:	2d00      	cmp	r5, #0
 8017020:	d011      	beq.n	8017046 <_dtoa_r+0x9ce>
 8017022:	6871      	ldr	r1, [r6, #4]
 8017024:	9802      	ldr	r0, [sp, #8]
 8017026:	f000 fd7b 	bl	8017b20 <_Balloc>
 801702a:	0031      	movs	r1, r6
 801702c:	0004      	movs	r4, r0
 801702e:	6933      	ldr	r3, [r6, #16]
 8017030:	310c      	adds	r1, #12
 8017032:	1c9a      	adds	r2, r3, #2
 8017034:	0092      	lsls	r2, r2, #2
 8017036:	300c      	adds	r0, #12
 8017038:	f7fc fe8b 	bl	8013d52 <memcpy>
 801703c:	2201      	movs	r2, #1
 801703e:	0021      	movs	r1, r4
 8017040:	9802      	ldr	r0, [sp, #8]
 8017042:	f000 ff3f 	bl	8017ec4 <__lshift>
 8017046:	9609      	str	r6, [sp, #36]	; 0x24
 8017048:	0006      	movs	r6, r0
 801704a:	9b08      	ldr	r3, [sp, #32]
 801704c:	930a      	str	r3, [sp, #40]	; 0x28
 801704e:	9904      	ldr	r1, [sp, #16]
 8017050:	9803      	ldr	r0, [sp, #12]
 8017052:	f7ff fa8b 	bl	801656c <quorem>
 8017056:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017058:	900d      	str	r0, [sp, #52]	; 0x34
 801705a:	0004      	movs	r4, r0
 801705c:	9803      	ldr	r0, [sp, #12]
 801705e:	f000 ff83 	bl	8017f68 <__mcmp>
 8017062:	0032      	movs	r2, r6
 8017064:	9010      	str	r0, [sp, #64]	; 0x40
 8017066:	9904      	ldr	r1, [sp, #16]
 8017068:	9802      	ldr	r0, [sp, #8]
 801706a:	f000 ff97 	bl	8017f9c <__mdiff>
 801706e:	2301      	movs	r3, #1
 8017070:	930b      	str	r3, [sp, #44]	; 0x2c
 8017072:	68c3      	ldr	r3, [r0, #12]
 8017074:	3430      	adds	r4, #48	; 0x30
 8017076:	0005      	movs	r5, r0
 8017078:	2b00      	cmp	r3, #0
 801707a:	d104      	bne.n	8017086 <_dtoa_r+0xa0e>
 801707c:	0001      	movs	r1, r0
 801707e:	9803      	ldr	r0, [sp, #12]
 8017080:	f000 ff72 	bl	8017f68 <__mcmp>
 8017084:	900b      	str	r0, [sp, #44]	; 0x2c
 8017086:	0029      	movs	r1, r5
 8017088:	9802      	ldr	r0, [sp, #8]
 801708a:	f000 fd71 	bl	8017b70 <_Bfree>
 801708e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017090:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017092:	4313      	orrs	r3, r2
 8017094:	d10e      	bne.n	80170b4 <_dtoa_r+0xa3c>
 8017096:	9a06      	ldr	r2, [sp, #24]
 8017098:	3301      	adds	r3, #1
 801709a:	4213      	tst	r3, r2
 801709c:	d10a      	bne.n	80170b4 <_dtoa_r+0xa3c>
 801709e:	2c39      	cmp	r4, #57	; 0x39
 80170a0:	d026      	beq.n	80170f0 <_dtoa_r+0xa78>
 80170a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	dd01      	ble.n	80170ac <_dtoa_r+0xa34>
 80170a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80170aa:	3431      	adds	r4, #49	; 0x31
 80170ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170ae:	1c5d      	adds	r5, r3, #1
 80170b0:	701c      	strb	r4, [r3, #0]
 80170b2:	e781      	b.n	8016fb8 <_dtoa_r+0x940>
 80170b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	db07      	blt.n	80170ca <_dtoa_r+0xa52>
 80170ba:	001d      	movs	r5, r3
 80170bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80170be:	431d      	orrs	r5, r3
 80170c0:	d122      	bne.n	8017108 <_dtoa_r+0xa90>
 80170c2:	2301      	movs	r3, #1
 80170c4:	9a06      	ldr	r2, [sp, #24]
 80170c6:	4213      	tst	r3, r2
 80170c8:	d11e      	bne.n	8017108 <_dtoa_r+0xa90>
 80170ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	dded      	ble.n	80170ac <_dtoa_r+0xa34>
 80170d0:	9903      	ldr	r1, [sp, #12]
 80170d2:	2201      	movs	r2, #1
 80170d4:	9802      	ldr	r0, [sp, #8]
 80170d6:	f000 fef5 	bl	8017ec4 <__lshift>
 80170da:	9904      	ldr	r1, [sp, #16]
 80170dc:	9003      	str	r0, [sp, #12]
 80170de:	f000 ff43 	bl	8017f68 <__mcmp>
 80170e2:	2800      	cmp	r0, #0
 80170e4:	dc02      	bgt.n	80170ec <_dtoa_r+0xa74>
 80170e6:	d1e1      	bne.n	80170ac <_dtoa_r+0xa34>
 80170e8:	07e3      	lsls	r3, r4, #31
 80170ea:	d5df      	bpl.n	80170ac <_dtoa_r+0xa34>
 80170ec:	2c39      	cmp	r4, #57	; 0x39
 80170ee:	d1db      	bne.n	80170a8 <_dtoa_r+0xa30>
 80170f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170f4:	1c5d      	adds	r5, r3, #1
 80170f6:	2339      	movs	r3, #57	; 0x39
 80170f8:	7013      	strb	r3, [r2, #0]
 80170fa:	1e6b      	subs	r3, r5, #1
 80170fc:	781a      	ldrb	r2, [r3, #0]
 80170fe:	2a39      	cmp	r2, #57	; 0x39
 8017100:	d067      	beq.n	80171d2 <_dtoa_r+0xb5a>
 8017102:	3201      	adds	r2, #1
 8017104:	701a      	strb	r2, [r3, #0]
 8017106:	e757      	b.n	8016fb8 <_dtoa_r+0x940>
 8017108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801710a:	1c5d      	adds	r5, r3, #1
 801710c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801710e:	2b00      	cmp	r3, #0
 8017110:	dd04      	ble.n	801711c <_dtoa_r+0xaa4>
 8017112:	2c39      	cmp	r4, #57	; 0x39
 8017114:	d0ec      	beq.n	80170f0 <_dtoa_r+0xa78>
 8017116:	3401      	adds	r4, #1
 8017118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801711a:	e7c9      	b.n	80170b0 <_dtoa_r+0xa38>
 801711c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801711e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017120:	701c      	strb	r4, [r3, #0]
 8017122:	9b08      	ldr	r3, [sp, #32]
 8017124:	1aeb      	subs	r3, r5, r3
 8017126:	4293      	cmp	r3, r2
 8017128:	d03e      	beq.n	80171a8 <_dtoa_r+0xb30>
 801712a:	2300      	movs	r3, #0
 801712c:	220a      	movs	r2, #10
 801712e:	9903      	ldr	r1, [sp, #12]
 8017130:	9802      	ldr	r0, [sp, #8]
 8017132:	f000 fd27 	bl	8017b84 <__multadd>
 8017136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017138:	9003      	str	r0, [sp, #12]
 801713a:	42b3      	cmp	r3, r6
 801713c:	d109      	bne.n	8017152 <_dtoa_r+0xada>
 801713e:	2300      	movs	r3, #0
 8017140:	220a      	movs	r2, #10
 8017142:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017144:	9802      	ldr	r0, [sp, #8]
 8017146:	f000 fd1d 	bl	8017b84 <__multadd>
 801714a:	9009      	str	r0, [sp, #36]	; 0x24
 801714c:	0006      	movs	r6, r0
 801714e:	950a      	str	r5, [sp, #40]	; 0x28
 8017150:	e77d      	b.n	801704e <_dtoa_r+0x9d6>
 8017152:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017154:	2300      	movs	r3, #0
 8017156:	220a      	movs	r2, #10
 8017158:	9802      	ldr	r0, [sp, #8]
 801715a:	f000 fd13 	bl	8017b84 <__multadd>
 801715e:	2300      	movs	r3, #0
 8017160:	9009      	str	r0, [sp, #36]	; 0x24
 8017162:	220a      	movs	r2, #10
 8017164:	0031      	movs	r1, r6
 8017166:	9802      	ldr	r0, [sp, #8]
 8017168:	f000 fd0c 	bl	8017b84 <__multadd>
 801716c:	e7ee      	b.n	801714c <_dtoa_r+0xad4>
 801716e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017170:	930c      	str	r3, [sp, #48]	; 0x30
 8017172:	9b08      	ldr	r3, [sp, #32]
 8017174:	9306      	str	r3, [sp, #24]
 8017176:	9904      	ldr	r1, [sp, #16]
 8017178:	9803      	ldr	r0, [sp, #12]
 801717a:	f7ff f9f7 	bl	801656c <quorem>
 801717e:	9b06      	ldr	r3, [sp, #24]
 8017180:	3030      	adds	r0, #48	; 0x30
 8017182:	1c5d      	adds	r5, r3, #1
 8017184:	7018      	strb	r0, [r3, #0]
 8017186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017188:	9b08      	ldr	r3, [sp, #32]
 801718a:	0004      	movs	r4, r0
 801718c:	1aeb      	subs	r3, r5, r3
 801718e:	429a      	cmp	r2, r3
 8017190:	dd08      	ble.n	80171a4 <_dtoa_r+0xb2c>
 8017192:	2300      	movs	r3, #0
 8017194:	220a      	movs	r2, #10
 8017196:	9903      	ldr	r1, [sp, #12]
 8017198:	9802      	ldr	r0, [sp, #8]
 801719a:	f000 fcf3 	bl	8017b84 <__multadd>
 801719e:	9506      	str	r5, [sp, #24]
 80171a0:	9003      	str	r0, [sp, #12]
 80171a2:	e7e8      	b.n	8017176 <_dtoa_r+0xafe>
 80171a4:	2300      	movs	r3, #0
 80171a6:	9309      	str	r3, [sp, #36]	; 0x24
 80171a8:	9903      	ldr	r1, [sp, #12]
 80171aa:	2201      	movs	r2, #1
 80171ac:	9802      	ldr	r0, [sp, #8]
 80171ae:	f000 fe89 	bl	8017ec4 <__lshift>
 80171b2:	9904      	ldr	r1, [sp, #16]
 80171b4:	9003      	str	r0, [sp, #12]
 80171b6:	f000 fed7 	bl	8017f68 <__mcmp>
 80171ba:	2800      	cmp	r0, #0
 80171bc:	dc9d      	bgt.n	80170fa <_dtoa_r+0xa82>
 80171be:	d101      	bne.n	80171c4 <_dtoa_r+0xb4c>
 80171c0:	07e3      	lsls	r3, r4, #31
 80171c2:	d49a      	bmi.n	80170fa <_dtoa_r+0xa82>
 80171c4:	1e6b      	subs	r3, r5, #1
 80171c6:	781a      	ldrb	r2, [r3, #0]
 80171c8:	2a30      	cmp	r2, #48	; 0x30
 80171ca:	d000      	beq.n	80171ce <_dtoa_r+0xb56>
 80171cc:	e6f4      	b.n	8016fb8 <_dtoa_r+0x940>
 80171ce:	001d      	movs	r5, r3
 80171d0:	e7f8      	b.n	80171c4 <_dtoa_r+0xb4c>
 80171d2:	9a08      	ldr	r2, [sp, #32]
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d103      	bne.n	80171e0 <_dtoa_r+0xb68>
 80171d8:	2331      	movs	r3, #49	; 0x31
 80171da:	3701      	adds	r7, #1
 80171dc:	7013      	strb	r3, [r2, #0]
 80171de:	e6eb      	b.n	8016fb8 <_dtoa_r+0x940>
 80171e0:	001d      	movs	r5, r3
 80171e2:	e78a      	b.n	80170fa <_dtoa_r+0xa82>
 80171e4:	4b0b      	ldr	r3, [pc, #44]	; (8017214 <_dtoa_r+0xb9c>)
 80171e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80171e8:	9308      	str	r3, [sp, #32]
 80171ea:	4b0b      	ldr	r3, [pc, #44]	; (8017218 <_dtoa_r+0xba0>)
 80171ec:	2a00      	cmp	r2, #0
 80171ee:	d001      	beq.n	80171f4 <_dtoa_r+0xb7c>
 80171f0:	f7ff fa75 	bl	80166de <_dtoa_r+0x66>
 80171f4:	f7ff fa75 	bl	80166e2 <_dtoa_r+0x6a>
 80171f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80171fa:	2b01      	cmp	r3, #1
 80171fc:	dc00      	bgt.n	8017200 <_dtoa_r+0xb88>
 80171fe:	e621      	b.n	8016e44 <_dtoa_r+0x7cc>
 8017200:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017202:	2001      	movs	r0, #1
 8017204:	e635      	b.n	8016e72 <_dtoa_r+0x7fa>
 8017206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017208:	2b00      	cmp	r3, #0
 801720a:	dcb2      	bgt.n	8017172 <_dtoa_r+0xafa>
 801720c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801720e:	2b02      	cmp	r3, #2
 8017210:	ddaf      	ble.n	8017172 <_dtoa_r+0xafa>
 8017212:	e6bc      	b.n	8016f8e <_dtoa_r+0x916>
 8017214:	0801bc3d 	.word	0x0801bc3d
 8017218:	0801bc45 	.word	0x0801bc45

0801721c <__errno>:
 801721c:	4b01      	ldr	r3, [pc, #4]	; (8017224 <__errno+0x8>)
 801721e:	6818      	ldr	r0, [r3, #0]
 8017220:	4770      	bx	lr
 8017222:	46c0      	nop			; (mov r8, r8)
 8017224:	200000a8 	.word	0x200000a8

08017228 <__libc_fini_array>:
 8017228:	b570      	push	{r4, r5, r6, lr}
 801722a:	4d07      	ldr	r5, [pc, #28]	; (8017248 <__libc_fini_array+0x20>)
 801722c:	4c07      	ldr	r4, [pc, #28]	; (801724c <__libc_fini_array+0x24>)
 801722e:	1b64      	subs	r4, r4, r5
 8017230:	10a4      	asrs	r4, r4, #2
 8017232:	2c00      	cmp	r4, #0
 8017234:	d102      	bne.n	801723c <__libc_fini_array+0x14>
 8017236:	f001 f987 	bl	8018548 <_fini>
 801723a:	bd70      	pop	{r4, r5, r6, pc}
 801723c:	3c01      	subs	r4, #1
 801723e:	00a3      	lsls	r3, r4, #2
 8017240:	58eb      	ldr	r3, [r5, r3]
 8017242:	4798      	blx	r3
 8017244:	e7f5      	b.n	8017232 <__libc_fini_array+0xa>
 8017246:	46c0      	nop			; (mov r8, r8)
 8017248:	0801bd5c 	.word	0x0801bd5c
 801724c:	0801bd60 	.word	0x0801bd60

08017250 <_malloc_trim_r>:
 8017250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017252:	0005      	movs	r5, r0
 8017254:	2008      	movs	r0, #8
 8017256:	000c      	movs	r4, r1
 8017258:	f7ff f95c 	bl	8016514 <sysconf>
 801725c:	0007      	movs	r7, r0
 801725e:	0028      	movs	r0, r5
 8017260:	f7fc fd88 	bl	8013d74 <__malloc_lock>
 8017264:	2203      	movs	r2, #3
 8017266:	4e21      	ldr	r6, [pc, #132]	; (80172ec <_malloc_trim_r+0x9c>)
 8017268:	0039      	movs	r1, r7
 801726a:	68b3      	ldr	r3, [r6, #8]
 801726c:	685b      	ldr	r3, [r3, #4]
 801726e:	4393      	bics	r3, r2
 8017270:	1b18      	subs	r0, r3, r4
 8017272:	3811      	subs	r0, #17
 8017274:	19c0      	adds	r0, r0, r7
 8017276:	9301      	str	r3, [sp, #4]
 8017278:	f7e8 ff6a 	bl	8000150 <__udivsi3>
 801727c:	1e44      	subs	r4, r0, #1
 801727e:	437c      	muls	r4, r7
 8017280:	42a7      	cmp	r7, r4
 8017282:	dd04      	ble.n	801728e <_malloc_trim_r+0x3e>
 8017284:	0028      	movs	r0, r5
 8017286:	f7fc fd7d 	bl	8013d84 <__malloc_unlock>
 801728a:	2000      	movs	r0, #0
 801728c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801728e:	2100      	movs	r1, #0
 8017290:	0028      	movs	r0, r5
 8017292:	f7fc ff4f 	bl	8014134 <_sbrk_r>
 8017296:	68b3      	ldr	r3, [r6, #8]
 8017298:	9a01      	ldr	r2, [sp, #4]
 801729a:	189b      	adds	r3, r3, r2
 801729c:	4298      	cmp	r0, r3
 801729e:	d1f1      	bne.n	8017284 <_malloc_trim_r+0x34>
 80172a0:	4261      	negs	r1, r4
 80172a2:	0028      	movs	r0, r5
 80172a4:	f7fc ff46 	bl	8014134 <_sbrk_r>
 80172a8:	1c43      	adds	r3, r0, #1
 80172aa:	d110      	bne.n	80172ce <_malloc_trim_r+0x7e>
 80172ac:	2100      	movs	r1, #0
 80172ae:	0028      	movs	r0, r5
 80172b0:	f7fc ff40 	bl	8014134 <_sbrk_r>
 80172b4:	68b2      	ldr	r2, [r6, #8]
 80172b6:	1a81      	subs	r1, r0, r2
 80172b8:	290f      	cmp	r1, #15
 80172ba:	dde3      	ble.n	8017284 <_malloc_trim_r+0x34>
 80172bc:	4b0c      	ldr	r3, [pc, #48]	; (80172f0 <_malloc_trim_r+0xa0>)
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	1ac0      	subs	r0, r0, r3
 80172c2:	4b0c      	ldr	r3, [pc, #48]	; (80172f4 <_malloc_trim_r+0xa4>)
 80172c4:	6018      	str	r0, [r3, #0]
 80172c6:	2301      	movs	r3, #1
 80172c8:	430b      	orrs	r3, r1
 80172ca:	6053      	str	r3, [r2, #4]
 80172cc:	e7da      	b.n	8017284 <_malloc_trim_r+0x34>
 80172ce:	68b2      	ldr	r2, [r6, #8]
 80172d0:	2601      	movs	r6, #1
 80172d2:	9b01      	ldr	r3, [sp, #4]
 80172d4:	0028      	movs	r0, r5
 80172d6:	1b1b      	subs	r3, r3, r4
 80172d8:	4333      	orrs	r3, r6
 80172da:	6053      	str	r3, [r2, #4]
 80172dc:	4b05      	ldr	r3, [pc, #20]	; (80172f4 <_malloc_trim_r+0xa4>)
 80172de:	681a      	ldr	r2, [r3, #0]
 80172e0:	1b14      	subs	r4, r2, r4
 80172e2:	601c      	str	r4, [r3, #0]
 80172e4:	f7fc fd4e 	bl	8013d84 <__malloc_unlock>
 80172e8:	0030      	movs	r0, r6
 80172ea:	e7cf      	b.n	801728c <_malloc_trim_r+0x3c>
 80172ec:	20000644 	.word	0x20000644
 80172f0:	20000a4c 	.word	0x20000a4c
 80172f4:	200069ec 	.word	0x200069ec

080172f8 <_free_r>:
 80172f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172fa:	1e0d      	subs	r5, r1, #0
 80172fc:	9001      	str	r0, [sp, #4]
 80172fe:	d02d      	beq.n	801735c <_free_r+0x64>
 8017300:	f7fc fd38 	bl	8013d74 <__malloc_lock>
 8017304:	2301      	movs	r3, #1
 8017306:	0029      	movs	r1, r5
 8017308:	469c      	mov	ip, r3
 801730a:	3908      	subs	r1, #8
 801730c:	684f      	ldr	r7, [r1, #4]
 801730e:	4662      	mov	r2, ip
 8017310:	003b      	movs	r3, r7
 8017312:	4666      	mov	r6, ip
 8017314:	4393      	bics	r3, r2
 8017316:	18c8      	adds	r0, r1, r3
 8017318:	6845      	ldr	r5, [r0, #4]
 801731a:	3202      	adds	r2, #2
 801731c:	4395      	bics	r5, r2
 801731e:	4a4a      	ldr	r2, [pc, #296]	; (8017448 <_free_r+0x150>)
 8017320:	4037      	ands	r7, r6
 8017322:	6896      	ldr	r6, [r2, #8]
 8017324:	4286      	cmp	r6, r0
 8017326:	d11a      	bne.n	801735e <_free_r+0x66>
 8017328:	195b      	adds	r3, r3, r5
 801732a:	2f00      	cmp	r7, #0
 801732c:	d106      	bne.n	801733c <_free_r+0x44>
 801732e:	6808      	ldr	r0, [r1, #0]
 8017330:	1a09      	subs	r1, r1, r0
 8017332:	688d      	ldr	r5, [r1, #8]
 8017334:	181b      	adds	r3, r3, r0
 8017336:	68c8      	ldr	r0, [r1, #12]
 8017338:	60e8      	str	r0, [r5, #12]
 801733a:	6085      	str	r5, [r0, #8]
 801733c:	2001      	movs	r0, #1
 801733e:	4318      	orrs	r0, r3
 8017340:	6048      	str	r0, [r1, #4]
 8017342:	6091      	str	r1, [r2, #8]
 8017344:	4a41      	ldr	r2, [pc, #260]	; (801744c <_free_r+0x154>)
 8017346:	6812      	ldr	r2, [r2, #0]
 8017348:	429a      	cmp	r2, r3
 801734a:	d804      	bhi.n	8017356 <_free_r+0x5e>
 801734c:	4b40      	ldr	r3, [pc, #256]	; (8017450 <_free_r+0x158>)
 801734e:	9801      	ldr	r0, [sp, #4]
 8017350:	6819      	ldr	r1, [r3, #0]
 8017352:	f7ff ff7d 	bl	8017250 <_malloc_trim_r>
 8017356:	9801      	ldr	r0, [sp, #4]
 8017358:	f7fc fd14 	bl	8013d84 <__malloc_unlock>
 801735c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801735e:	2600      	movs	r6, #0
 8017360:	6045      	str	r5, [r0, #4]
 8017362:	42b7      	cmp	r7, r6
 8017364:	d109      	bne.n	801737a <_free_r+0x82>
 8017366:	680f      	ldr	r7, [r1, #0]
 8017368:	4c3a      	ldr	r4, [pc, #232]	; (8017454 <_free_r+0x15c>)
 801736a:	1bc9      	subs	r1, r1, r7
 801736c:	19db      	adds	r3, r3, r7
 801736e:	688f      	ldr	r7, [r1, #8]
 8017370:	42a7      	cmp	r7, r4
 8017372:	d02b      	beq.n	80173cc <_free_r+0xd4>
 8017374:	68cc      	ldr	r4, [r1, #12]
 8017376:	60fc      	str	r4, [r7, #12]
 8017378:	60a7      	str	r7, [r4, #8]
 801737a:	1947      	adds	r7, r0, r5
 801737c:	687c      	ldr	r4, [r7, #4]
 801737e:	2701      	movs	r7, #1
 8017380:	423c      	tst	r4, r7
 8017382:	d10b      	bne.n	801739c <_free_r+0xa4>
 8017384:	195b      	adds	r3, r3, r5
 8017386:	6885      	ldr	r5, [r0, #8]
 8017388:	2e00      	cmp	r6, #0
 801738a:	d121      	bne.n	80173d0 <_free_r+0xd8>
 801738c:	4c31      	ldr	r4, [pc, #196]	; (8017454 <_free_r+0x15c>)
 801738e:	42a5      	cmp	r5, r4
 8017390:	d11e      	bne.n	80173d0 <_free_r+0xd8>
 8017392:	003e      	movs	r6, r7
 8017394:	6151      	str	r1, [r2, #20]
 8017396:	6111      	str	r1, [r2, #16]
 8017398:	60cd      	str	r5, [r1, #12]
 801739a:	608d      	str	r5, [r1, #8]
 801739c:	2001      	movs	r0, #1
 801739e:	0005      	movs	r5, r0
 80173a0:	431d      	orrs	r5, r3
 80173a2:	604d      	str	r5, [r1, #4]
 80173a4:	50cb      	str	r3, [r1, r3]
 80173a6:	2e00      	cmp	r6, #0
 80173a8:	d1d5      	bne.n	8017356 <_free_r+0x5e>
 80173aa:	4d2b      	ldr	r5, [pc, #172]	; (8017458 <_free_r+0x160>)
 80173ac:	42ab      	cmp	r3, r5
 80173ae:	d813      	bhi.n	80173d8 <_free_r+0xe0>
 80173b0:	08db      	lsrs	r3, r3, #3
 80173b2:	109d      	asrs	r5, r3, #2
 80173b4:	40a8      	lsls	r0, r5
 80173b6:	6854      	ldr	r4, [r2, #4]
 80173b8:	00db      	lsls	r3, r3, #3
 80173ba:	4320      	orrs	r0, r4
 80173bc:	6050      	str	r0, [r2, #4]
 80173be:	189a      	adds	r2, r3, r2
 80173c0:	6893      	ldr	r3, [r2, #8]
 80173c2:	60ca      	str	r2, [r1, #12]
 80173c4:	608b      	str	r3, [r1, #8]
 80173c6:	6091      	str	r1, [r2, #8]
 80173c8:	60d9      	str	r1, [r3, #12]
 80173ca:	e7c4      	b.n	8017356 <_free_r+0x5e>
 80173cc:	4666      	mov	r6, ip
 80173ce:	e7d4      	b.n	801737a <_free_r+0x82>
 80173d0:	68c0      	ldr	r0, [r0, #12]
 80173d2:	60e8      	str	r0, [r5, #12]
 80173d4:	6085      	str	r5, [r0, #8]
 80173d6:	e7e1      	b.n	801739c <_free_r+0xa4>
 80173d8:	0a5d      	lsrs	r5, r3, #9
 80173da:	2d04      	cmp	r5, #4
 80173dc:	d812      	bhi.n	8017404 <_free_r+0x10c>
 80173de:	0998      	lsrs	r0, r3, #6
 80173e0:	3038      	adds	r0, #56	; 0x38
 80173e2:	00c6      	lsls	r6, r0, #3
 80173e4:	18b6      	adds	r6, r6, r2
 80173e6:	68b5      	ldr	r5, [r6, #8]
 80173e8:	2703      	movs	r7, #3
 80173ea:	42ae      	cmp	r6, r5
 80173ec:	d125      	bne.n	801743a <_free_r+0x142>
 80173ee:	2301      	movs	r3, #1
 80173f0:	1080      	asrs	r0, r0, #2
 80173f2:	4083      	lsls	r3, r0
 80173f4:	6850      	ldr	r0, [r2, #4]
 80173f6:	4303      	orrs	r3, r0
 80173f8:	6053      	str	r3, [r2, #4]
 80173fa:	60ce      	str	r6, [r1, #12]
 80173fc:	608d      	str	r5, [r1, #8]
 80173fe:	60b1      	str	r1, [r6, #8]
 8017400:	60e9      	str	r1, [r5, #12]
 8017402:	e7a8      	b.n	8017356 <_free_r+0x5e>
 8017404:	2d14      	cmp	r5, #20
 8017406:	d802      	bhi.n	801740e <_free_r+0x116>
 8017408:	0028      	movs	r0, r5
 801740a:	305b      	adds	r0, #91	; 0x5b
 801740c:	e7e9      	b.n	80173e2 <_free_r+0xea>
 801740e:	2d54      	cmp	r5, #84	; 0x54
 8017410:	d802      	bhi.n	8017418 <_free_r+0x120>
 8017412:	0b18      	lsrs	r0, r3, #12
 8017414:	306e      	adds	r0, #110	; 0x6e
 8017416:	e7e4      	b.n	80173e2 <_free_r+0xea>
 8017418:	20aa      	movs	r0, #170	; 0xaa
 801741a:	0040      	lsls	r0, r0, #1
 801741c:	4285      	cmp	r5, r0
 801741e:	d802      	bhi.n	8017426 <_free_r+0x12e>
 8017420:	0bd8      	lsrs	r0, r3, #15
 8017422:	3077      	adds	r0, #119	; 0x77
 8017424:	e7dd      	b.n	80173e2 <_free_r+0xea>
 8017426:	4e0d      	ldr	r6, [pc, #52]	; (801745c <_free_r+0x164>)
 8017428:	207e      	movs	r0, #126	; 0x7e
 801742a:	42b5      	cmp	r5, r6
 801742c:	d8d9      	bhi.n	80173e2 <_free_r+0xea>
 801742e:	0c98      	lsrs	r0, r3, #18
 8017430:	307c      	adds	r0, #124	; 0x7c
 8017432:	e7d6      	b.n	80173e2 <_free_r+0xea>
 8017434:	68ad      	ldr	r5, [r5, #8]
 8017436:	42ae      	cmp	r6, r5
 8017438:	d003      	beq.n	8017442 <_free_r+0x14a>
 801743a:	686a      	ldr	r2, [r5, #4]
 801743c:	43ba      	bics	r2, r7
 801743e:	429a      	cmp	r2, r3
 8017440:	d8f8      	bhi.n	8017434 <_free_r+0x13c>
 8017442:	68ee      	ldr	r6, [r5, #12]
 8017444:	e7d9      	b.n	80173fa <_free_r+0x102>
 8017446:	46c0      	nop			; (mov r8, r8)
 8017448:	20000644 	.word	0x20000644
 801744c:	20000a50 	.word	0x20000a50
 8017450:	20006a1c 	.word	0x20006a1c
 8017454:	2000064c 	.word	0x2000064c
 8017458:	000001ff 	.word	0x000001ff
 801745c:	00000554 	.word	0x00000554

08017460 <rshift>:
 8017460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017462:	0004      	movs	r4, r0
 8017464:	6905      	ldr	r5, [r0, #16]
 8017466:	3414      	adds	r4, #20
 8017468:	114b      	asrs	r3, r1, #5
 801746a:	0026      	movs	r6, r4
 801746c:	429d      	cmp	r5, r3
 801746e:	dd14      	ble.n	801749a <rshift+0x3a>
 8017470:	221f      	movs	r2, #31
 8017472:	00ad      	lsls	r5, r5, #2
 8017474:	009b      	lsls	r3, r3, #2
 8017476:	4011      	ands	r1, r2
 8017478:	1965      	adds	r5, r4, r5
 801747a:	18e3      	adds	r3, r4, r3
 801747c:	0022      	movs	r2, r4
 801747e:	2900      	cmp	r1, #0
 8017480:	d01e      	beq.n	80174c0 <rshift+0x60>
 8017482:	cb04      	ldmia	r3!, {r2}
 8017484:	2720      	movs	r7, #32
 8017486:	40ca      	lsrs	r2, r1
 8017488:	46a4      	mov	ip, r4
 801748a:	1a7f      	subs	r7, r7, r1
 801748c:	4666      	mov	r6, ip
 801748e:	429d      	cmp	r5, r3
 8017490:	d80b      	bhi.n	80174aa <rshift+0x4a>
 8017492:	6032      	str	r2, [r6, #0]
 8017494:	2a00      	cmp	r2, #0
 8017496:	d000      	beq.n	801749a <rshift+0x3a>
 8017498:	3604      	adds	r6, #4
 801749a:	1b33      	subs	r3, r6, r4
 801749c:	109b      	asrs	r3, r3, #2
 801749e:	6103      	str	r3, [r0, #16]
 80174a0:	42a6      	cmp	r6, r4
 80174a2:	d101      	bne.n	80174a8 <rshift+0x48>
 80174a4:	2300      	movs	r3, #0
 80174a6:	6143      	str	r3, [r0, #20]
 80174a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174aa:	681e      	ldr	r6, [r3, #0]
 80174ac:	40be      	lsls	r6, r7
 80174ae:	4332      	orrs	r2, r6
 80174b0:	4666      	mov	r6, ip
 80174b2:	c604      	stmia	r6!, {r2}
 80174b4:	cb04      	ldmia	r3!, {r2}
 80174b6:	46b4      	mov	ip, r6
 80174b8:	40ca      	lsrs	r2, r1
 80174ba:	e7e7      	b.n	801748c <rshift+0x2c>
 80174bc:	cb02      	ldmia	r3!, {r1}
 80174be:	c202      	stmia	r2!, {r1}
 80174c0:	0016      	movs	r6, r2
 80174c2:	429d      	cmp	r5, r3
 80174c4:	d8fa      	bhi.n	80174bc <rshift+0x5c>
 80174c6:	e7e8      	b.n	801749a <rshift+0x3a>

080174c8 <__hexdig_fun>:
 80174c8:	0003      	movs	r3, r0
 80174ca:	3b30      	subs	r3, #48	; 0x30
 80174cc:	2b09      	cmp	r3, #9
 80174ce:	d803      	bhi.n	80174d8 <__hexdig_fun+0x10>
 80174d0:	3820      	subs	r0, #32
 80174d2:	b2c3      	uxtb	r3, r0
 80174d4:	0018      	movs	r0, r3
 80174d6:	4770      	bx	lr
 80174d8:	0003      	movs	r3, r0
 80174da:	3b61      	subs	r3, #97	; 0x61
 80174dc:	2b05      	cmp	r3, #5
 80174de:	d801      	bhi.n	80174e4 <__hexdig_fun+0x1c>
 80174e0:	3847      	subs	r0, #71	; 0x47
 80174e2:	e7f6      	b.n	80174d2 <__hexdig_fun+0xa>
 80174e4:	0002      	movs	r2, r0
 80174e6:	3a41      	subs	r2, #65	; 0x41
 80174e8:	2300      	movs	r3, #0
 80174ea:	2a05      	cmp	r2, #5
 80174ec:	d8f2      	bhi.n	80174d4 <__hexdig_fun+0xc>
 80174ee:	3827      	subs	r0, #39	; 0x27
 80174f0:	e7ef      	b.n	80174d2 <__hexdig_fun+0xa>

080174f2 <__gethex>:
 80174f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174f4:	b08d      	sub	sp, #52	; 0x34
 80174f6:	9005      	str	r0, [sp, #20]
 80174f8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80174fa:	9109      	str	r1, [sp, #36]	; 0x24
 80174fc:	9202      	str	r2, [sp, #8]
 80174fe:	930a      	str	r3, [sp, #40]	; 0x28
 8017500:	f000 fadf 	bl	8017ac2 <__localeconv_l>
 8017504:	6803      	ldr	r3, [r0, #0]
 8017506:	0018      	movs	r0, r3
 8017508:	9307      	str	r3, [sp, #28]
 801750a:	f7e8 fe05 	bl	8000118 <strlen>
 801750e:	2202      	movs	r2, #2
 8017510:	9b07      	ldr	r3, [sp, #28]
 8017512:	4252      	negs	r2, r2
 8017514:	181b      	adds	r3, r3, r0
 8017516:	3b01      	subs	r3, #1
 8017518:	781b      	ldrb	r3, [r3, #0]
 801751a:	9004      	str	r0, [sp, #16]
 801751c:	930b      	str	r3, [sp, #44]	; 0x2c
 801751e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017520:	6819      	ldr	r1, [r3, #0]
 8017522:	1c8b      	adds	r3, r1, #2
 8017524:	1a52      	subs	r2, r2, r1
 8017526:	18d1      	adds	r1, r2, r3
 8017528:	9301      	str	r3, [sp, #4]
 801752a:	9108      	str	r1, [sp, #32]
 801752c:	9901      	ldr	r1, [sp, #4]
 801752e:	3301      	adds	r3, #1
 8017530:	7808      	ldrb	r0, [r1, #0]
 8017532:	2830      	cmp	r0, #48	; 0x30
 8017534:	d0f7      	beq.n	8017526 <__gethex+0x34>
 8017536:	f7ff ffc7 	bl	80174c8 <__hexdig_fun>
 801753a:	1e07      	subs	r7, r0, #0
 801753c:	d000      	beq.n	8017540 <__gethex+0x4e>
 801753e:	e06f      	b.n	8017620 <__gethex+0x12e>
 8017540:	9a04      	ldr	r2, [sp, #16]
 8017542:	9907      	ldr	r1, [sp, #28]
 8017544:	9801      	ldr	r0, [sp, #4]
 8017546:	f7fc fe4b 	bl	80141e0 <strncmp>
 801754a:	2800      	cmp	r0, #0
 801754c:	d000      	beq.n	8017550 <__gethex+0x5e>
 801754e:	e06d      	b.n	801762c <__gethex+0x13a>
 8017550:	9b01      	ldr	r3, [sp, #4]
 8017552:	9a04      	ldr	r2, [sp, #16]
 8017554:	189c      	adds	r4, r3, r2
 8017556:	7820      	ldrb	r0, [r4, #0]
 8017558:	f7ff ffb6 	bl	80174c8 <__hexdig_fun>
 801755c:	2800      	cmp	r0, #0
 801755e:	d069      	beq.n	8017634 <__gethex+0x142>
 8017560:	9401      	str	r4, [sp, #4]
 8017562:	9b01      	ldr	r3, [sp, #4]
 8017564:	7818      	ldrb	r0, [r3, #0]
 8017566:	2830      	cmp	r0, #48	; 0x30
 8017568:	d009      	beq.n	801757e <__gethex+0x8c>
 801756a:	f7ff ffad 	bl	80174c8 <__hexdig_fun>
 801756e:	4243      	negs	r3, r0
 8017570:	4143      	adcs	r3, r0
 8017572:	9303      	str	r3, [sp, #12]
 8017574:	2301      	movs	r3, #1
 8017576:	0026      	movs	r6, r4
 8017578:	9308      	str	r3, [sp, #32]
 801757a:	9c01      	ldr	r4, [sp, #4]
 801757c:	e004      	b.n	8017588 <__gethex+0x96>
 801757e:	9b01      	ldr	r3, [sp, #4]
 8017580:	3301      	adds	r3, #1
 8017582:	9301      	str	r3, [sp, #4]
 8017584:	e7ed      	b.n	8017562 <__gethex+0x70>
 8017586:	3401      	adds	r4, #1
 8017588:	7820      	ldrb	r0, [r4, #0]
 801758a:	f7ff ff9d 	bl	80174c8 <__hexdig_fun>
 801758e:	2800      	cmp	r0, #0
 8017590:	d1f9      	bne.n	8017586 <__gethex+0x94>
 8017592:	9a04      	ldr	r2, [sp, #16]
 8017594:	9907      	ldr	r1, [sp, #28]
 8017596:	0020      	movs	r0, r4
 8017598:	f7fc fe22 	bl	80141e0 <strncmp>
 801759c:	2800      	cmp	r0, #0
 801759e:	d109      	bne.n	80175b4 <__gethex+0xc2>
 80175a0:	2e00      	cmp	r6, #0
 80175a2:	d10a      	bne.n	80175ba <__gethex+0xc8>
 80175a4:	9b04      	ldr	r3, [sp, #16]
 80175a6:	18e4      	adds	r4, r4, r3
 80175a8:	0026      	movs	r6, r4
 80175aa:	7820      	ldrb	r0, [r4, #0]
 80175ac:	f7ff ff8c 	bl	80174c8 <__hexdig_fun>
 80175b0:	2800      	cmp	r0, #0
 80175b2:	d139      	bne.n	8017628 <__gethex+0x136>
 80175b4:	2700      	movs	r7, #0
 80175b6:	42be      	cmp	r6, r7
 80175b8:	d001      	beq.n	80175be <__gethex+0xcc>
 80175ba:	1b37      	subs	r7, r6, r4
 80175bc:	00bf      	lsls	r7, r7, #2
 80175be:	7823      	ldrb	r3, [r4, #0]
 80175c0:	2b50      	cmp	r3, #80	; 0x50
 80175c2:	d001      	beq.n	80175c8 <__gethex+0xd6>
 80175c4:	2b70      	cmp	r3, #112	; 0x70
 80175c6:	d142      	bne.n	801764e <__gethex+0x15c>
 80175c8:	7863      	ldrb	r3, [r4, #1]
 80175ca:	2b2b      	cmp	r3, #43	; 0x2b
 80175cc:	d034      	beq.n	8017638 <__gethex+0x146>
 80175ce:	2b2d      	cmp	r3, #45	; 0x2d
 80175d0:	d036      	beq.n	8017640 <__gethex+0x14e>
 80175d2:	2300      	movs	r3, #0
 80175d4:	1c66      	adds	r6, r4, #1
 80175d6:	9306      	str	r3, [sp, #24]
 80175d8:	7830      	ldrb	r0, [r6, #0]
 80175da:	f7ff ff75 	bl	80174c8 <__hexdig_fun>
 80175de:	1e43      	subs	r3, r0, #1
 80175e0:	b2db      	uxtb	r3, r3
 80175e2:	2b18      	cmp	r3, #24
 80175e4:	d833      	bhi.n	801764e <__gethex+0x15c>
 80175e6:	3810      	subs	r0, #16
 80175e8:	0005      	movs	r5, r0
 80175ea:	3601      	adds	r6, #1
 80175ec:	7830      	ldrb	r0, [r6, #0]
 80175ee:	f7ff ff6b 	bl	80174c8 <__hexdig_fun>
 80175f2:	1e43      	subs	r3, r0, #1
 80175f4:	b2db      	uxtb	r3, r3
 80175f6:	2b18      	cmp	r3, #24
 80175f8:	d924      	bls.n	8017644 <__gethex+0x152>
 80175fa:	9b06      	ldr	r3, [sp, #24]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d000      	beq.n	8017602 <__gethex+0x110>
 8017600:	426d      	negs	r5, r5
 8017602:	197f      	adds	r7, r7, r5
 8017604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017606:	601e      	str	r6, [r3, #0]
 8017608:	9b03      	ldr	r3, [sp, #12]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d021      	beq.n	8017652 <__gethex+0x160>
 801760e:	9b08      	ldr	r3, [sp, #32]
 8017610:	2606      	movs	r6, #6
 8017612:	425a      	negs	r2, r3
 8017614:	4153      	adcs	r3, r2
 8017616:	425b      	negs	r3, r3
 8017618:	401e      	ands	r6, r3
 801761a:	0030      	movs	r0, r6
 801761c:	b00d      	add	sp, #52	; 0x34
 801761e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017620:	2300      	movs	r3, #0
 8017622:	9303      	str	r3, [sp, #12]
 8017624:	001e      	movs	r6, r3
 8017626:	e7a8      	b.n	801757a <__gethex+0x88>
 8017628:	3401      	adds	r4, #1
 801762a:	e7be      	b.n	80175aa <__gethex+0xb8>
 801762c:	9c01      	ldr	r4, [sp, #4]
 801762e:	2301      	movs	r3, #1
 8017630:	9303      	str	r3, [sp, #12]
 8017632:	e7c4      	b.n	80175be <__gethex+0xcc>
 8017634:	0007      	movs	r7, r0
 8017636:	e7fa      	b.n	801762e <__gethex+0x13c>
 8017638:	2300      	movs	r3, #0
 801763a:	9306      	str	r3, [sp, #24]
 801763c:	1ca6      	adds	r6, r4, #2
 801763e:	e7cb      	b.n	80175d8 <__gethex+0xe6>
 8017640:	2301      	movs	r3, #1
 8017642:	e7fa      	b.n	801763a <__gethex+0x148>
 8017644:	230a      	movs	r3, #10
 8017646:	435d      	muls	r5, r3
 8017648:	182d      	adds	r5, r5, r0
 801764a:	3d10      	subs	r5, #16
 801764c:	e7cd      	b.n	80175ea <__gethex+0xf8>
 801764e:	0026      	movs	r6, r4
 8017650:	e7d8      	b.n	8017604 <__gethex+0x112>
 8017652:	9b01      	ldr	r3, [sp, #4]
 8017654:	9903      	ldr	r1, [sp, #12]
 8017656:	1ae3      	subs	r3, r4, r3
 8017658:	3b01      	subs	r3, #1
 801765a:	2b07      	cmp	r3, #7
 801765c:	dc47      	bgt.n	80176ee <__gethex+0x1fc>
 801765e:	9805      	ldr	r0, [sp, #20]
 8017660:	f000 fa5e 	bl	8017b20 <_Balloc>
 8017664:	0003      	movs	r3, r0
 8017666:	3314      	adds	r3, #20
 8017668:	9303      	str	r3, [sp, #12]
 801766a:	9308      	str	r3, [sp, #32]
 801766c:	2300      	movs	r3, #0
 801766e:	0005      	movs	r5, r0
 8017670:	001e      	movs	r6, r3
 8017672:	9306      	str	r3, [sp, #24]
 8017674:	9b01      	ldr	r3, [sp, #4]
 8017676:	42a3      	cmp	r3, r4
 8017678:	d33c      	bcc.n	80176f4 <__gethex+0x202>
 801767a:	9c08      	ldr	r4, [sp, #32]
 801767c:	9b03      	ldr	r3, [sp, #12]
 801767e:	c440      	stmia	r4!, {r6}
 8017680:	1ae4      	subs	r4, r4, r3
 8017682:	10a4      	asrs	r4, r4, #2
 8017684:	612c      	str	r4, [r5, #16]
 8017686:	0030      	movs	r0, r6
 8017688:	f000 faf8 	bl	8017c7c <__hi0bits>
 801768c:	9b02      	ldr	r3, [sp, #8]
 801768e:	0164      	lsls	r4, r4, #5
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	1a26      	subs	r6, r4, r0
 8017694:	9301      	str	r3, [sp, #4]
 8017696:	429e      	cmp	r6, r3
 8017698:	dd5f      	ble.n	801775a <__gethex+0x268>
 801769a:	1af6      	subs	r6, r6, r3
 801769c:	0031      	movs	r1, r6
 801769e:	0028      	movs	r0, r5
 80176a0:	f000 fde3 	bl	801826a <__any_on>
 80176a4:	1e04      	subs	r4, r0, #0
 80176a6:	d00f      	beq.n	80176c8 <__gethex+0x1d6>
 80176a8:	2401      	movs	r4, #1
 80176aa:	211f      	movs	r1, #31
 80176ac:	0020      	movs	r0, r4
 80176ae:	1e73      	subs	r3, r6, #1
 80176b0:	4019      	ands	r1, r3
 80176b2:	4088      	lsls	r0, r1
 80176b4:	0001      	movs	r1, r0
 80176b6:	115a      	asrs	r2, r3, #5
 80176b8:	9803      	ldr	r0, [sp, #12]
 80176ba:	0092      	lsls	r2, r2, #2
 80176bc:	5812      	ldr	r2, [r2, r0]
 80176be:	420a      	tst	r2, r1
 80176c0:	d002      	beq.n	80176c8 <__gethex+0x1d6>
 80176c2:	42a3      	cmp	r3, r4
 80176c4:	dc41      	bgt.n	801774a <__gethex+0x258>
 80176c6:	2402      	movs	r4, #2
 80176c8:	0031      	movs	r1, r6
 80176ca:	0028      	movs	r0, r5
 80176cc:	f7ff fec8 	bl	8017460 <rshift>
 80176d0:	19bf      	adds	r7, r7, r6
 80176d2:	9b02      	ldr	r3, [sp, #8]
 80176d4:	689b      	ldr	r3, [r3, #8]
 80176d6:	9304      	str	r3, [sp, #16]
 80176d8:	42bb      	cmp	r3, r7
 80176da:	da4e      	bge.n	801777a <__gethex+0x288>
 80176dc:	0029      	movs	r1, r5
 80176de:	9805      	ldr	r0, [sp, #20]
 80176e0:	f000 fa46 	bl	8017b70 <_Bfree>
 80176e4:	2300      	movs	r3, #0
 80176e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80176e8:	26a3      	movs	r6, #163	; 0xa3
 80176ea:	6013      	str	r3, [r2, #0]
 80176ec:	e795      	b.n	801761a <__gethex+0x128>
 80176ee:	3101      	adds	r1, #1
 80176f0:	105b      	asrs	r3, r3, #1
 80176f2:	e7b2      	b.n	801765a <__gethex+0x168>
 80176f4:	1e63      	subs	r3, r4, #1
 80176f6:	9309      	str	r3, [sp, #36]	; 0x24
 80176f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80176fa:	781b      	ldrb	r3, [r3, #0]
 80176fc:	4293      	cmp	r3, r2
 80176fe:	d015      	beq.n	801772c <__gethex+0x23a>
 8017700:	9b06      	ldr	r3, [sp, #24]
 8017702:	2b20      	cmp	r3, #32
 8017704:	d105      	bne.n	8017712 <__gethex+0x220>
 8017706:	9b08      	ldr	r3, [sp, #32]
 8017708:	601e      	str	r6, [r3, #0]
 801770a:	2600      	movs	r6, #0
 801770c:	3304      	adds	r3, #4
 801770e:	9308      	str	r3, [sp, #32]
 8017710:	9606      	str	r6, [sp, #24]
 8017712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017714:	7818      	ldrb	r0, [r3, #0]
 8017716:	f7ff fed7 	bl	80174c8 <__hexdig_fun>
 801771a:	230f      	movs	r3, #15
 801771c:	4018      	ands	r0, r3
 801771e:	9b06      	ldr	r3, [sp, #24]
 8017720:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017722:	4098      	lsls	r0, r3
 8017724:	3304      	adds	r3, #4
 8017726:	4306      	orrs	r6, r0
 8017728:	9306      	str	r3, [sp, #24]
 801772a:	e7a3      	b.n	8017674 <__gethex+0x182>
 801772c:	2301      	movs	r3, #1
 801772e:	9a04      	ldr	r2, [sp, #16]
 8017730:	1a9c      	subs	r4, r3, r2
 8017732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017734:	191c      	adds	r4, r3, r4
 8017736:	9b01      	ldr	r3, [sp, #4]
 8017738:	429c      	cmp	r4, r3
 801773a:	d3e1      	bcc.n	8017700 <__gethex+0x20e>
 801773c:	9907      	ldr	r1, [sp, #28]
 801773e:	0020      	movs	r0, r4
 8017740:	f7fc fd4e 	bl	80141e0 <strncmp>
 8017744:	2800      	cmp	r0, #0
 8017746:	d1db      	bne.n	8017700 <__gethex+0x20e>
 8017748:	e794      	b.n	8017674 <__gethex+0x182>
 801774a:	1eb1      	subs	r1, r6, #2
 801774c:	0028      	movs	r0, r5
 801774e:	f000 fd8c 	bl	801826a <__any_on>
 8017752:	2800      	cmp	r0, #0
 8017754:	d0b7      	beq.n	80176c6 <__gethex+0x1d4>
 8017756:	2403      	movs	r4, #3
 8017758:	e7b6      	b.n	80176c8 <__gethex+0x1d6>
 801775a:	9b01      	ldr	r3, [sp, #4]
 801775c:	2400      	movs	r4, #0
 801775e:	429e      	cmp	r6, r3
 8017760:	dab7      	bge.n	80176d2 <__gethex+0x1e0>
 8017762:	1b9e      	subs	r6, r3, r6
 8017764:	0029      	movs	r1, r5
 8017766:	0032      	movs	r2, r6
 8017768:	9805      	ldr	r0, [sp, #20]
 801776a:	f000 fbab 	bl	8017ec4 <__lshift>
 801776e:	0003      	movs	r3, r0
 8017770:	3314      	adds	r3, #20
 8017772:	0005      	movs	r5, r0
 8017774:	1bbf      	subs	r7, r7, r6
 8017776:	9303      	str	r3, [sp, #12]
 8017778:	e7ab      	b.n	80176d2 <__gethex+0x1e0>
 801777a:	9b02      	ldr	r3, [sp, #8]
 801777c:	685e      	ldr	r6, [r3, #4]
 801777e:	42be      	cmp	r6, r7
 8017780:	dd6b      	ble.n	801785a <__gethex+0x368>
 8017782:	9b01      	ldr	r3, [sp, #4]
 8017784:	1bf6      	subs	r6, r6, r7
 8017786:	42b3      	cmp	r3, r6
 8017788:	dc32      	bgt.n	80177f0 <__gethex+0x2fe>
 801778a:	9b02      	ldr	r3, [sp, #8]
 801778c:	68db      	ldr	r3, [r3, #12]
 801778e:	2b02      	cmp	r3, #2
 8017790:	d026      	beq.n	80177e0 <__gethex+0x2ee>
 8017792:	2b03      	cmp	r3, #3
 8017794:	d028      	beq.n	80177e8 <__gethex+0x2f6>
 8017796:	2b01      	cmp	r3, #1
 8017798:	d119      	bne.n	80177ce <__gethex+0x2dc>
 801779a:	9b01      	ldr	r3, [sp, #4]
 801779c:	42b3      	cmp	r3, r6
 801779e:	d116      	bne.n	80177ce <__gethex+0x2dc>
 80177a0:	2b01      	cmp	r3, #1
 80177a2:	dc0d      	bgt.n	80177c0 <__gethex+0x2ce>
 80177a4:	9b02      	ldr	r3, [sp, #8]
 80177a6:	2662      	movs	r6, #98	; 0x62
 80177a8:	685b      	ldr	r3, [r3, #4]
 80177aa:	9301      	str	r3, [sp, #4]
 80177ac:	9a01      	ldr	r2, [sp, #4]
 80177ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177b0:	601a      	str	r2, [r3, #0]
 80177b2:	2301      	movs	r3, #1
 80177b4:	9a03      	ldr	r2, [sp, #12]
 80177b6:	612b      	str	r3, [r5, #16]
 80177b8:	6013      	str	r3, [r2, #0]
 80177ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80177bc:	601d      	str	r5, [r3, #0]
 80177be:	e72c      	b.n	801761a <__gethex+0x128>
 80177c0:	9901      	ldr	r1, [sp, #4]
 80177c2:	0028      	movs	r0, r5
 80177c4:	3901      	subs	r1, #1
 80177c6:	f000 fd50 	bl	801826a <__any_on>
 80177ca:	2800      	cmp	r0, #0
 80177cc:	d1ea      	bne.n	80177a4 <__gethex+0x2b2>
 80177ce:	0029      	movs	r1, r5
 80177d0:	9805      	ldr	r0, [sp, #20]
 80177d2:	f000 f9cd 	bl	8017b70 <_Bfree>
 80177d6:	2300      	movs	r3, #0
 80177d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80177da:	2650      	movs	r6, #80	; 0x50
 80177dc:	6013      	str	r3, [r2, #0]
 80177de:	e71c      	b.n	801761a <__gethex+0x128>
 80177e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d0de      	beq.n	80177a4 <__gethex+0x2b2>
 80177e6:	e7f2      	b.n	80177ce <__gethex+0x2dc>
 80177e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d1da      	bne.n	80177a4 <__gethex+0x2b2>
 80177ee:	e7ee      	b.n	80177ce <__gethex+0x2dc>
 80177f0:	1e77      	subs	r7, r6, #1
 80177f2:	2c00      	cmp	r4, #0
 80177f4:	d12f      	bne.n	8017856 <__gethex+0x364>
 80177f6:	2f00      	cmp	r7, #0
 80177f8:	d004      	beq.n	8017804 <__gethex+0x312>
 80177fa:	0039      	movs	r1, r7
 80177fc:	0028      	movs	r0, r5
 80177fe:	f000 fd34 	bl	801826a <__any_on>
 8017802:	0004      	movs	r4, r0
 8017804:	231f      	movs	r3, #31
 8017806:	117a      	asrs	r2, r7, #5
 8017808:	401f      	ands	r7, r3
 801780a:	3b1e      	subs	r3, #30
 801780c:	40bb      	lsls	r3, r7
 801780e:	9903      	ldr	r1, [sp, #12]
 8017810:	0092      	lsls	r2, r2, #2
 8017812:	5852      	ldr	r2, [r2, r1]
 8017814:	421a      	tst	r2, r3
 8017816:	d001      	beq.n	801781c <__gethex+0x32a>
 8017818:	2302      	movs	r3, #2
 801781a:	431c      	orrs	r4, r3
 801781c:	9b01      	ldr	r3, [sp, #4]
 801781e:	0031      	movs	r1, r6
 8017820:	1b9b      	subs	r3, r3, r6
 8017822:	2602      	movs	r6, #2
 8017824:	0028      	movs	r0, r5
 8017826:	9301      	str	r3, [sp, #4]
 8017828:	f7ff fe1a 	bl	8017460 <rshift>
 801782c:	9b02      	ldr	r3, [sp, #8]
 801782e:	685f      	ldr	r7, [r3, #4]
 8017830:	2c00      	cmp	r4, #0
 8017832:	d040      	beq.n	80178b6 <__gethex+0x3c4>
 8017834:	9b02      	ldr	r3, [sp, #8]
 8017836:	68db      	ldr	r3, [r3, #12]
 8017838:	2b02      	cmp	r3, #2
 801783a:	d010      	beq.n	801785e <__gethex+0x36c>
 801783c:	2b03      	cmp	r3, #3
 801783e:	d012      	beq.n	8017866 <__gethex+0x374>
 8017840:	2b01      	cmp	r3, #1
 8017842:	d106      	bne.n	8017852 <__gethex+0x360>
 8017844:	07a2      	lsls	r2, r4, #30
 8017846:	d504      	bpl.n	8017852 <__gethex+0x360>
 8017848:	9a03      	ldr	r2, [sp, #12]
 801784a:	6812      	ldr	r2, [r2, #0]
 801784c:	4314      	orrs	r4, r2
 801784e:	421c      	tst	r4, r3
 8017850:	d10c      	bne.n	801786c <__gethex+0x37a>
 8017852:	2310      	movs	r3, #16
 8017854:	e02e      	b.n	80178b4 <__gethex+0x3c2>
 8017856:	2401      	movs	r4, #1
 8017858:	e7d4      	b.n	8017804 <__gethex+0x312>
 801785a:	2601      	movs	r6, #1
 801785c:	e7e8      	b.n	8017830 <__gethex+0x33e>
 801785e:	2301      	movs	r3, #1
 8017860:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017862:	1a9b      	subs	r3, r3, r2
 8017864:	9313      	str	r3, [sp, #76]	; 0x4c
 8017866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017868:	2b00      	cmp	r3, #0
 801786a:	d0f2      	beq.n	8017852 <__gethex+0x360>
 801786c:	692c      	ldr	r4, [r5, #16]
 801786e:	00a3      	lsls	r3, r4, #2
 8017870:	9304      	str	r3, [sp, #16]
 8017872:	002b      	movs	r3, r5
 8017874:	00a2      	lsls	r2, r4, #2
 8017876:	3314      	adds	r3, #20
 8017878:	1899      	adds	r1, r3, r2
 801787a:	2200      	movs	r2, #0
 801787c:	4694      	mov	ip, r2
 801787e:	681a      	ldr	r2, [r3, #0]
 8017880:	1c50      	adds	r0, r2, #1
 8017882:	d01d      	beq.n	80178c0 <__gethex+0x3ce>
 8017884:	3201      	adds	r2, #1
 8017886:	601a      	str	r2, [r3, #0]
 8017888:	002b      	movs	r3, r5
 801788a:	3314      	adds	r3, #20
 801788c:	2e02      	cmp	r6, #2
 801788e:	d13a      	bne.n	8017906 <__gethex+0x414>
 8017890:	9a02      	ldr	r2, [sp, #8]
 8017892:	9901      	ldr	r1, [sp, #4]
 8017894:	6812      	ldr	r2, [r2, #0]
 8017896:	3a01      	subs	r2, #1
 8017898:	428a      	cmp	r2, r1
 801789a:	d10a      	bne.n	80178b2 <__gethex+0x3c0>
 801789c:	114a      	asrs	r2, r1, #5
 801789e:	211f      	movs	r1, #31
 80178a0:	9801      	ldr	r0, [sp, #4]
 80178a2:	0092      	lsls	r2, r2, #2
 80178a4:	4001      	ands	r1, r0
 80178a6:	2001      	movs	r0, #1
 80178a8:	0004      	movs	r4, r0
 80178aa:	408c      	lsls	r4, r1
 80178ac:	58d3      	ldr	r3, [r2, r3]
 80178ae:	4223      	tst	r3, r4
 80178b0:	d148      	bne.n	8017944 <__gethex+0x452>
 80178b2:	2320      	movs	r3, #32
 80178b4:	431e      	orrs	r6, r3
 80178b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80178b8:	601d      	str	r5, [r3, #0]
 80178ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178bc:	601f      	str	r7, [r3, #0]
 80178be:	e6ac      	b.n	801761a <__gethex+0x128>
 80178c0:	4662      	mov	r2, ip
 80178c2:	c304      	stmia	r3!, {r2}
 80178c4:	4299      	cmp	r1, r3
 80178c6:	d8da      	bhi.n	801787e <__gethex+0x38c>
 80178c8:	68ab      	ldr	r3, [r5, #8]
 80178ca:	429c      	cmp	r4, r3
 80178cc:	db12      	blt.n	80178f4 <__gethex+0x402>
 80178ce:	686b      	ldr	r3, [r5, #4]
 80178d0:	9805      	ldr	r0, [sp, #20]
 80178d2:	1c59      	adds	r1, r3, #1
 80178d4:	f000 f924 	bl	8017b20 <_Balloc>
 80178d8:	0029      	movs	r1, r5
 80178da:	692b      	ldr	r3, [r5, #16]
 80178dc:	9003      	str	r0, [sp, #12]
 80178de:	1c9a      	adds	r2, r3, #2
 80178e0:	0092      	lsls	r2, r2, #2
 80178e2:	310c      	adds	r1, #12
 80178e4:	300c      	adds	r0, #12
 80178e6:	f7fc fa34 	bl	8013d52 <memcpy>
 80178ea:	0029      	movs	r1, r5
 80178ec:	9805      	ldr	r0, [sp, #20]
 80178ee:	f000 f93f 	bl	8017b70 <_Bfree>
 80178f2:	9d03      	ldr	r5, [sp, #12]
 80178f4:	692b      	ldr	r3, [r5, #16]
 80178f6:	1c5a      	adds	r2, r3, #1
 80178f8:	612a      	str	r2, [r5, #16]
 80178fa:	2201      	movs	r2, #1
 80178fc:	3304      	adds	r3, #4
 80178fe:	009b      	lsls	r3, r3, #2
 8017900:	18eb      	adds	r3, r5, r3
 8017902:	605a      	str	r2, [r3, #4]
 8017904:	e7c0      	b.n	8017888 <__gethex+0x396>
 8017906:	692a      	ldr	r2, [r5, #16]
 8017908:	42a2      	cmp	r2, r4
 801790a:	dd0a      	ble.n	8017922 <__gethex+0x430>
 801790c:	2101      	movs	r1, #1
 801790e:	0028      	movs	r0, r5
 8017910:	f7ff fda6 	bl	8017460 <rshift>
 8017914:	9b02      	ldr	r3, [sp, #8]
 8017916:	3701      	adds	r7, #1
 8017918:	689b      	ldr	r3, [r3, #8]
 801791a:	2601      	movs	r6, #1
 801791c:	42bb      	cmp	r3, r7
 801791e:	dac8      	bge.n	80178b2 <__gethex+0x3c0>
 8017920:	e6dc      	b.n	80176dc <__gethex+0x1ea>
 8017922:	241f      	movs	r4, #31
 8017924:	9a01      	ldr	r2, [sp, #4]
 8017926:	2601      	movs	r6, #1
 8017928:	4022      	ands	r2, r4
 801792a:	1e14      	subs	r4, r2, #0
 801792c:	d0c1      	beq.n	80178b2 <__gethex+0x3c0>
 801792e:	9a04      	ldr	r2, [sp, #16]
 8017930:	189b      	adds	r3, r3, r2
 8017932:	3b04      	subs	r3, #4
 8017934:	6818      	ldr	r0, [r3, #0]
 8017936:	f000 f9a1 	bl	8017c7c <__hi0bits>
 801793a:	2120      	movs	r1, #32
 801793c:	1b0c      	subs	r4, r1, r4
 801793e:	42a0      	cmp	r0, r4
 8017940:	dbe4      	blt.n	801790c <__gethex+0x41a>
 8017942:	e7b6      	b.n	80178b2 <__gethex+0x3c0>
 8017944:	0006      	movs	r6, r0
 8017946:	e7b4      	b.n	80178b2 <__gethex+0x3c0>

08017948 <L_shift>:
 8017948:	2308      	movs	r3, #8
 801794a:	b570      	push	{r4, r5, r6, lr}
 801794c:	2520      	movs	r5, #32
 801794e:	1a9a      	subs	r2, r3, r2
 8017950:	0092      	lsls	r2, r2, #2
 8017952:	1aad      	subs	r5, r5, r2
 8017954:	6843      	ldr	r3, [r0, #4]
 8017956:	6806      	ldr	r6, [r0, #0]
 8017958:	001c      	movs	r4, r3
 801795a:	40ac      	lsls	r4, r5
 801795c:	40d3      	lsrs	r3, r2
 801795e:	4334      	orrs	r4, r6
 8017960:	6004      	str	r4, [r0, #0]
 8017962:	6043      	str	r3, [r0, #4]
 8017964:	3004      	adds	r0, #4
 8017966:	4288      	cmp	r0, r1
 8017968:	d3f4      	bcc.n	8017954 <L_shift+0xc>
 801796a:	bd70      	pop	{r4, r5, r6, pc}

0801796c <__match>:
 801796c:	b530      	push	{r4, r5, lr}
 801796e:	6803      	ldr	r3, [r0, #0]
 8017970:	780c      	ldrb	r4, [r1, #0]
 8017972:	3301      	adds	r3, #1
 8017974:	2c00      	cmp	r4, #0
 8017976:	d102      	bne.n	801797e <__match+0x12>
 8017978:	6003      	str	r3, [r0, #0]
 801797a:	2001      	movs	r0, #1
 801797c:	bd30      	pop	{r4, r5, pc}
 801797e:	781a      	ldrb	r2, [r3, #0]
 8017980:	0015      	movs	r5, r2
 8017982:	3d41      	subs	r5, #65	; 0x41
 8017984:	2d19      	cmp	r5, #25
 8017986:	d800      	bhi.n	801798a <__match+0x1e>
 8017988:	3220      	adds	r2, #32
 801798a:	3101      	adds	r1, #1
 801798c:	42a2      	cmp	r2, r4
 801798e:	d0ef      	beq.n	8017970 <__match+0x4>
 8017990:	2000      	movs	r0, #0
 8017992:	e7f3      	b.n	801797c <__match+0x10>

08017994 <__hexnan>:
 8017994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017996:	b08b      	sub	sp, #44	; 0x2c
 8017998:	9201      	str	r2, [sp, #4]
 801799a:	680a      	ldr	r2, [r1, #0]
 801799c:	9901      	ldr	r1, [sp, #4]
 801799e:	1153      	asrs	r3, r2, #5
 80179a0:	009b      	lsls	r3, r3, #2
 80179a2:	18cb      	adds	r3, r1, r3
 80179a4:	9304      	str	r3, [sp, #16]
 80179a6:	231f      	movs	r3, #31
 80179a8:	401a      	ands	r2, r3
 80179aa:	9008      	str	r0, [sp, #32]
 80179ac:	9206      	str	r2, [sp, #24]
 80179ae:	d002      	beq.n	80179b6 <__hexnan+0x22>
 80179b0:	9b04      	ldr	r3, [sp, #16]
 80179b2:	3304      	adds	r3, #4
 80179b4:	9304      	str	r3, [sp, #16]
 80179b6:	9b04      	ldr	r3, [sp, #16]
 80179b8:	2500      	movs	r5, #0
 80179ba:	1f1e      	subs	r6, r3, #4
 80179bc:	0037      	movs	r7, r6
 80179be:	0034      	movs	r4, r6
 80179c0:	9b08      	ldr	r3, [sp, #32]
 80179c2:	6035      	str	r5, [r6, #0]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	9507      	str	r5, [sp, #28]
 80179c8:	9305      	str	r3, [sp, #20]
 80179ca:	9502      	str	r5, [sp, #8]
 80179cc:	9b05      	ldr	r3, [sp, #20]
 80179ce:	3301      	adds	r3, #1
 80179d0:	9309      	str	r3, [sp, #36]	; 0x24
 80179d2:	9b05      	ldr	r3, [sp, #20]
 80179d4:	785b      	ldrb	r3, [r3, #1]
 80179d6:	9303      	str	r3, [sp, #12]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d028      	beq.n	8017a2e <__hexnan+0x9a>
 80179dc:	9803      	ldr	r0, [sp, #12]
 80179de:	f7ff fd73 	bl	80174c8 <__hexdig_fun>
 80179e2:	2800      	cmp	r0, #0
 80179e4:	d145      	bne.n	8017a72 <__hexnan+0xde>
 80179e6:	9b03      	ldr	r3, [sp, #12]
 80179e8:	2b20      	cmp	r3, #32
 80179ea:	d819      	bhi.n	8017a20 <__hexnan+0x8c>
 80179ec:	9b02      	ldr	r3, [sp, #8]
 80179ee:	9a07      	ldr	r2, [sp, #28]
 80179f0:	4293      	cmp	r3, r2
 80179f2:	dd12      	ble.n	8017a1a <__hexnan+0x86>
 80179f4:	42bc      	cmp	r4, r7
 80179f6:	d206      	bcs.n	8017a06 <__hexnan+0x72>
 80179f8:	2d07      	cmp	r5, #7
 80179fa:	dc04      	bgt.n	8017a06 <__hexnan+0x72>
 80179fc:	002a      	movs	r2, r5
 80179fe:	0039      	movs	r1, r7
 8017a00:	0020      	movs	r0, r4
 8017a02:	f7ff ffa1 	bl	8017948 <L_shift>
 8017a06:	9b01      	ldr	r3, [sp, #4]
 8017a08:	2508      	movs	r5, #8
 8017a0a:	429c      	cmp	r4, r3
 8017a0c:	d905      	bls.n	8017a1a <__hexnan+0x86>
 8017a0e:	1f27      	subs	r7, r4, #4
 8017a10:	2500      	movs	r5, #0
 8017a12:	003c      	movs	r4, r7
 8017a14:	9b02      	ldr	r3, [sp, #8]
 8017a16:	603d      	str	r5, [r7, #0]
 8017a18:	9307      	str	r3, [sp, #28]
 8017a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a1c:	9305      	str	r3, [sp, #20]
 8017a1e:	e7d5      	b.n	80179cc <__hexnan+0x38>
 8017a20:	9b03      	ldr	r3, [sp, #12]
 8017a22:	2b29      	cmp	r3, #41	; 0x29
 8017a24:	d14a      	bne.n	8017abc <__hexnan+0x128>
 8017a26:	9b05      	ldr	r3, [sp, #20]
 8017a28:	9a08      	ldr	r2, [sp, #32]
 8017a2a:	3302      	adds	r3, #2
 8017a2c:	6013      	str	r3, [r2, #0]
 8017a2e:	9b02      	ldr	r3, [sp, #8]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d043      	beq.n	8017abc <__hexnan+0x128>
 8017a34:	42bc      	cmp	r4, r7
 8017a36:	d206      	bcs.n	8017a46 <__hexnan+0xb2>
 8017a38:	2d07      	cmp	r5, #7
 8017a3a:	dc04      	bgt.n	8017a46 <__hexnan+0xb2>
 8017a3c:	002a      	movs	r2, r5
 8017a3e:	0039      	movs	r1, r7
 8017a40:	0020      	movs	r0, r4
 8017a42:	f7ff ff81 	bl	8017948 <L_shift>
 8017a46:	9b01      	ldr	r3, [sp, #4]
 8017a48:	429c      	cmp	r4, r3
 8017a4a:	d926      	bls.n	8017a9a <__hexnan+0x106>
 8017a4c:	cc04      	ldmia	r4!, {r2}
 8017a4e:	601a      	str	r2, [r3, #0]
 8017a50:	3304      	adds	r3, #4
 8017a52:	42a6      	cmp	r6, r4
 8017a54:	d2fa      	bcs.n	8017a4c <__hexnan+0xb8>
 8017a56:	2200      	movs	r2, #0
 8017a58:	c304      	stmia	r3!, {r2}
 8017a5a:	429e      	cmp	r6, r3
 8017a5c:	d2fc      	bcs.n	8017a58 <__hexnan+0xc4>
 8017a5e:	6833      	ldr	r3, [r6, #0]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d104      	bne.n	8017a6e <__hexnan+0xda>
 8017a64:	9b01      	ldr	r3, [sp, #4]
 8017a66:	429e      	cmp	r6, r3
 8017a68:	d126      	bne.n	8017ab8 <__hexnan+0x124>
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	6033      	str	r3, [r6, #0]
 8017a6e:	2005      	movs	r0, #5
 8017a70:	e025      	b.n	8017abe <__hexnan+0x12a>
 8017a72:	9b02      	ldr	r3, [sp, #8]
 8017a74:	3501      	adds	r5, #1
 8017a76:	3301      	adds	r3, #1
 8017a78:	9302      	str	r3, [sp, #8]
 8017a7a:	2d08      	cmp	r5, #8
 8017a7c:	dd06      	ble.n	8017a8c <__hexnan+0xf8>
 8017a7e:	9b01      	ldr	r3, [sp, #4]
 8017a80:	429c      	cmp	r4, r3
 8017a82:	d9ca      	bls.n	8017a1a <__hexnan+0x86>
 8017a84:	2300      	movs	r3, #0
 8017a86:	2501      	movs	r5, #1
 8017a88:	3c04      	subs	r4, #4
 8017a8a:	6023      	str	r3, [r4, #0]
 8017a8c:	220f      	movs	r2, #15
 8017a8e:	6823      	ldr	r3, [r4, #0]
 8017a90:	4010      	ands	r0, r2
 8017a92:	011b      	lsls	r3, r3, #4
 8017a94:	4318      	orrs	r0, r3
 8017a96:	6020      	str	r0, [r4, #0]
 8017a98:	e7bf      	b.n	8017a1a <__hexnan+0x86>
 8017a9a:	9b06      	ldr	r3, [sp, #24]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d0de      	beq.n	8017a5e <__hexnan+0xca>
 8017aa0:	2120      	movs	r1, #32
 8017aa2:	9a06      	ldr	r2, [sp, #24]
 8017aa4:	9b04      	ldr	r3, [sp, #16]
 8017aa6:	1a89      	subs	r1, r1, r2
 8017aa8:	2201      	movs	r2, #1
 8017aaa:	4252      	negs	r2, r2
 8017aac:	40ca      	lsrs	r2, r1
 8017aae:	3b04      	subs	r3, #4
 8017ab0:	6819      	ldr	r1, [r3, #0]
 8017ab2:	400a      	ands	r2, r1
 8017ab4:	601a      	str	r2, [r3, #0]
 8017ab6:	e7d2      	b.n	8017a5e <__hexnan+0xca>
 8017ab8:	3e04      	subs	r6, #4
 8017aba:	e7d0      	b.n	8017a5e <__hexnan+0xca>
 8017abc:	2004      	movs	r0, #4
 8017abe:	b00b      	add	sp, #44	; 0x2c
 8017ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017ac2 <__localeconv_l>:
 8017ac2:	30f0      	adds	r0, #240	; 0xf0
 8017ac4:	4770      	bx	lr
	...

08017ac8 <_localeconv_r>:
 8017ac8:	4b03      	ldr	r3, [pc, #12]	; (8017ad8 <_localeconv_r+0x10>)
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017ace:	2800      	cmp	r0, #0
 8017ad0:	d100      	bne.n	8017ad4 <_localeconv_r+0xc>
 8017ad2:	4802      	ldr	r0, [pc, #8]	; (8017adc <_localeconv_r+0x14>)
 8017ad4:	30f0      	adds	r0, #240	; 0xf0
 8017ad6:	4770      	bx	lr
 8017ad8:	200000a8 	.word	0x200000a8
 8017adc:	200004d8 	.word	0x200004d8

08017ae0 <__retarget_lock_acquire_recursive>:
 8017ae0:	4770      	bx	lr

08017ae2 <__retarget_lock_release_recursive>:
 8017ae2:	4770      	bx	lr

08017ae4 <memchr>:
 8017ae4:	b2c9      	uxtb	r1, r1
 8017ae6:	1882      	adds	r2, r0, r2
 8017ae8:	4290      	cmp	r0, r2
 8017aea:	d101      	bne.n	8017af0 <memchr+0xc>
 8017aec:	2000      	movs	r0, #0
 8017aee:	4770      	bx	lr
 8017af0:	7803      	ldrb	r3, [r0, #0]
 8017af2:	428b      	cmp	r3, r1
 8017af4:	d0fb      	beq.n	8017aee <memchr+0xa>
 8017af6:	3001      	adds	r0, #1
 8017af8:	e7f6      	b.n	8017ae8 <memchr+0x4>

08017afa <memmove>:
 8017afa:	b510      	push	{r4, lr}
 8017afc:	4288      	cmp	r0, r1
 8017afe:	d902      	bls.n	8017b06 <memmove+0xc>
 8017b00:	188b      	adds	r3, r1, r2
 8017b02:	4298      	cmp	r0, r3
 8017b04:	d303      	bcc.n	8017b0e <memmove+0x14>
 8017b06:	2300      	movs	r3, #0
 8017b08:	e007      	b.n	8017b1a <memmove+0x20>
 8017b0a:	5c8b      	ldrb	r3, [r1, r2]
 8017b0c:	5483      	strb	r3, [r0, r2]
 8017b0e:	3a01      	subs	r2, #1
 8017b10:	d2fb      	bcs.n	8017b0a <memmove+0x10>
 8017b12:	bd10      	pop	{r4, pc}
 8017b14:	5ccc      	ldrb	r4, [r1, r3]
 8017b16:	54c4      	strb	r4, [r0, r3]
 8017b18:	3301      	adds	r3, #1
 8017b1a:	429a      	cmp	r2, r3
 8017b1c:	d1fa      	bne.n	8017b14 <memmove+0x1a>
 8017b1e:	e7f8      	b.n	8017b12 <memmove+0x18>

08017b20 <_Balloc>:
 8017b20:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017b22:	b570      	push	{r4, r5, r6, lr}
 8017b24:	0004      	movs	r4, r0
 8017b26:	000d      	movs	r5, r1
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d012      	beq.n	8017b52 <_Balloc+0x32>
 8017b2c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8017b2e:	00ab      	lsls	r3, r5, #2
 8017b30:	18d3      	adds	r3, r2, r3
 8017b32:	6818      	ldr	r0, [r3, #0]
 8017b34:	2800      	cmp	r0, #0
 8017b36:	d115      	bne.n	8017b64 <_Balloc+0x44>
 8017b38:	2101      	movs	r1, #1
 8017b3a:	000e      	movs	r6, r1
 8017b3c:	40ae      	lsls	r6, r5
 8017b3e:	1d72      	adds	r2, r6, #5
 8017b40:	0092      	lsls	r2, r2, #2
 8017b42:	0020      	movs	r0, r4
 8017b44:	f000 fcbe 	bl	80184c4 <_calloc_r>
 8017b48:	2800      	cmp	r0, #0
 8017b4a:	d009      	beq.n	8017b60 <_Balloc+0x40>
 8017b4c:	6045      	str	r5, [r0, #4]
 8017b4e:	6086      	str	r6, [r0, #8]
 8017b50:	e00a      	b.n	8017b68 <_Balloc+0x48>
 8017b52:	2221      	movs	r2, #33	; 0x21
 8017b54:	2104      	movs	r1, #4
 8017b56:	f000 fcb5 	bl	80184c4 <_calloc_r>
 8017b5a:	64e0      	str	r0, [r4, #76]	; 0x4c
 8017b5c:	2800      	cmp	r0, #0
 8017b5e:	d1e5      	bne.n	8017b2c <_Balloc+0xc>
 8017b60:	2000      	movs	r0, #0
 8017b62:	bd70      	pop	{r4, r5, r6, pc}
 8017b64:	6802      	ldr	r2, [r0, #0]
 8017b66:	601a      	str	r2, [r3, #0]
 8017b68:	2300      	movs	r3, #0
 8017b6a:	6103      	str	r3, [r0, #16]
 8017b6c:	60c3      	str	r3, [r0, #12]
 8017b6e:	e7f8      	b.n	8017b62 <_Balloc+0x42>

08017b70 <_Bfree>:
 8017b70:	2900      	cmp	r1, #0
 8017b72:	d006      	beq.n	8017b82 <_Bfree+0x12>
 8017b74:	684b      	ldr	r3, [r1, #4]
 8017b76:	009a      	lsls	r2, r3, #2
 8017b78:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017b7a:	189b      	adds	r3, r3, r2
 8017b7c:	681a      	ldr	r2, [r3, #0]
 8017b7e:	600a      	str	r2, [r1, #0]
 8017b80:	6019      	str	r1, [r3, #0]
 8017b82:	4770      	bx	lr

08017b84 <__multadd>:
 8017b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b86:	001e      	movs	r6, r3
 8017b88:	2314      	movs	r3, #20
 8017b8a:	469c      	mov	ip, r3
 8017b8c:	0007      	movs	r7, r0
 8017b8e:	000c      	movs	r4, r1
 8017b90:	2000      	movs	r0, #0
 8017b92:	690d      	ldr	r5, [r1, #16]
 8017b94:	448c      	add	ip, r1
 8017b96:	4663      	mov	r3, ip
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	3001      	adds	r0, #1
 8017b9c:	b299      	uxth	r1, r3
 8017b9e:	4663      	mov	r3, ip
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	4351      	muls	r1, r2
 8017ba4:	0c1b      	lsrs	r3, r3, #16
 8017ba6:	4353      	muls	r3, r2
 8017ba8:	1989      	adds	r1, r1, r6
 8017baa:	0c0e      	lsrs	r6, r1, #16
 8017bac:	199b      	adds	r3, r3, r6
 8017bae:	b289      	uxth	r1, r1
 8017bb0:	0c1e      	lsrs	r6, r3, #16
 8017bb2:	041b      	lsls	r3, r3, #16
 8017bb4:	185b      	adds	r3, r3, r1
 8017bb6:	4661      	mov	r1, ip
 8017bb8:	c108      	stmia	r1!, {r3}
 8017bba:	468c      	mov	ip, r1
 8017bbc:	4285      	cmp	r5, r0
 8017bbe:	dcea      	bgt.n	8017b96 <__multadd+0x12>
 8017bc0:	2e00      	cmp	r6, #0
 8017bc2:	d01b      	beq.n	8017bfc <__multadd+0x78>
 8017bc4:	68a3      	ldr	r3, [r4, #8]
 8017bc6:	42ab      	cmp	r3, r5
 8017bc8:	dc12      	bgt.n	8017bf0 <__multadd+0x6c>
 8017bca:	6863      	ldr	r3, [r4, #4]
 8017bcc:	0038      	movs	r0, r7
 8017bce:	1c59      	adds	r1, r3, #1
 8017bd0:	f7ff ffa6 	bl	8017b20 <_Balloc>
 8017bd4:	0021      	movs	r1, r4
 8017bd6:	6923      	ldr	r3, [r4, #16]
 8017bd8:	9001      	str	r0, [sp, #4]
 8017bda:	1c9a      	adds	r2, r3, #2
 8017bdc:	0092      	lsls	r2, r2, #2
 8017bde:	310c      	adds	r1, #12
 8017be0:	300c      	adds	r0, #12
 8017be2:	f7fc f8b6 	bl	8013d52 <memcpy>
 8017be6:	0021      	movs	r1, r4
 8017be8:	0038      	movs	r0, r7
 8017bea:	f7ff ffc1 	bl	8017b70 <_Bfree>
 8017bee:	9c01      	ldr	r4, [sp, #4]
 8017bf0:	1d2b      	adds	r3, r5, #4
 8017bf2:	009b      	lsls	r3, r3, #2
 8017bf4:	18e3      	adds	r3, r4, r3
 8017bf6:	3501      	adds	r5, #1
 8017bf8:	605e      	str	r6, [r3, #4]
 8017bfa:	6125      	str	r5, [r4, #16]
 8017bfc:	0020      	movs	r0, r4
 8017bfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08017c00 <__s2b>:
 8017c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017c02:	0006      	movs	r6, r0
 8017c04:	0018      	movs	r0, r3
 8017c06:	000c      	movs	r4, r1
 8017c08:	3008      	adds	r0, #8
 8017c0a:	2109      	movs	r1, #9
 8017c0c:	9301      	str	r3, [sp, #4]
 8017c0e:	0015      	movs	r5, r2
 8017c10:	f7e8 fb28 	bl	8000264 <__divsi3>
 8017c14:	2301      	movs	r3, #1
 8017c16:	2100      	movs	r1, #0
 8017c18:	4283      	cmp	r3, r0
 8017c1a:	db1f      	blt.n	8017c5c <__s2b+0x5c>
 8017c1c:	0030      	movs	r0, r6
 8017c1e:	f7ff ff7f 	bl	8017b20 <_Balloc>
 8017c22:	9b08      	ldr	r3, [sp, #32]
 8017c24:	6143      	str	r3, [r0, #20]
 8017c26:	2301      	movs	r3, #1
 8017c28:	6103      	str	r3, [r0, #16]
 8017c2a:	2d09      	cmp	r5, #9
 8017c2c:	dd19      	ble.n	8017c62 <__s2b+0x62>
 8017c2e:	0023      	movs	r3, r4
 8017c30:	3309      	adds	r3, #9
 8017c32:	001f      	movs	r7, r3
 8017c34:	9300      	str	r3, [sp, #0]
 8017c36:	1964      	adds	r4, r4, r5
 8017c38:	783b      	ldrb	r3, [r7, #0]
 8017c3a:	0001      	movs	r1, r0
 8017c3c:	3b30      	subs	r3, #48	; 0x30
 8017c3e:	220a      	movs	r2, #10
 8017c40:	0030      	movs	r0, r6
 8017c42:	3701      	adds	r7, #1
 8017c44:	f7ff ff9e 	bl	8017b84 <__multadd>
 8017c48:	42a7      	cmp	r7, r4
 8017c4a:	d1f5      	bne.n	8017c38 <__s2b+0x38>
 8017c4c:	9b00      	ldr	r3, [sp, #0]
 8017c4e:	195c      	adds	r4, r3, r5
 8017c50:	3c08      	subs	r4, #8
 8017c52:	002f      	movs	r7, r5
 8017c54:	9b01      	ldr	r3, [sp, #4]
 8017c56:	429f      	cmp	r7, r3
 8017c58:	db06      	blt.n	8017c68 <__s2b+0x68>
 8017c5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017c5c:	005b      	lsls	r3, r3, #1
 8017c5e:	3101      	adds	r1, #1
 8017c60:	e7da      	b.n	8017c18 <__s2b+0x18>
 8017c62:	340a      	adds	r4, #10
 8017c64:	2509      	movs	r5, #9
 8017c66:	e7f4      	b.n	8017c52 <__s2b+0x52>
 8017c68:	1b63      	subs	r3, r4, r5
 8017c6a:	5ddb      	ldrb	r3, [r3, r7]
 8017c6c:	0001      	movs	r1, r0
 8017c6e:	3b30      	subs	r3, #48	; 0x30
 8017c70:	220a      	movs	r2, #10
 8017c72:	0030      	movs	r0, r6
 8017c74:	f7ff ff86 	bl	8017b84 <__multadd>
 8017c78:	3701      	adds	r7, #1
 8017c7a:	e7eb      	b.n	8017c54 <__s2b+0x54>

08017c7c <__hi0bits>:
 8017c7c:	0003      	movs	r3, r0
 8017c7e:	0c02      	lsrs	r2, r0, #16
 8017c80:	2000      	movs	r0, #0
 8017c82:	4282      	cmp	r2, r0
 8017c84:	d101      	bne.n	8017c8a <__hi0bits+0xe>
 8017c86:	041b      	lsls	r3, r3, #16
 8017c88:	3010      	adds	r0, #16
 8017c8a:	0e1a      	lsrs	r2, r3, #24
 8017c8c:	d101      	bne.n	8017c92 <__hi0bits+0x16>
 8017c8e:	3008      	adds	r0, #8
 8017c90:	021b      	lsls	r3, r3, #8
 8017c92:	0f1a      	lsrs	r2, r3, #28
 8017c94:	d101      	bne.n	8017c9a <__hi0bits+0x1e>
 8017c96:	3004      	adds	r0, #4
 8017c98:	011b      	lsls	r3, r3, #4
 8017c9a:	0f9a      	lsrs	r2, r3, #30
 8017c9c:	d101      	bne.n	8017ca2 <__hi0bits+0x26>
 8017c9e:	3002      	adds	r0, #2
 8017ca0:	009b      	lsls	r3, r3, #2
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	db03      	blt.n	8017cae <__hi0bits+0x32>
 8017ca6:	3001      	adds	r0, #1
 8017ca8:	005b      	lsls	r3, r3, #1
 8017caa:	d400      	bmi.n	8017cae <__hi0bits+0x32>
 8017cac:	2020      	movs	r0, #32
 8017cae:	4770      	bx	lr

08017cb0 <__lo0bits>:
 8017cb0:	2207      	movs	r2, #7
 8017cb2:	6803      	ldr	r3, [r0, #0]
 8017cb4:	b510      	push	{r4, lr}
 8017cb6:	0001      	movs	r1, r0
 8017cb8:	401a      	ands	r2, r3
 8017cba:	d00d      	beq.n	8017cd8 <__lo0bits+0x28>
 8017cbc:	2401      	movs	r4, #1
 8017cbe:	2000      	movs	r0, #0
 8017cc0:	4223      	tst	r3, r4
 8017cc2:	d105      	bne.n	8017cd0 <__lo0bits+0x20>
 8017cc4:	3002      	adds	r0, #2
 8017cc6:	4203      	tst	r3, r0
 8017cc8:	d003      	beq.n	8017cd2 <__lo0bits+0x22>
 8017cca:	40e3      	lsrs	r3, r4
 8017ccc:	0020      	movs	r0, r4
 8017cce:	600b      	str	r3, [r1, #0]
 8017cd0:	bd10      	pop	{r4, pc}
 8017cd2:	089b      	lsrs	r3, r3, #2
 8017cd4:	600b      	str	r3, [r1, #0]
 8017cd6:	e7fb      	b.n	8017cd0 <__lo0bits+0x20>
 8017cd8:	b29c      	uxth	r4, r3
 8017cda:	0010      	movs	r0, r2
 8017cdc:	2c00      	cmp	r4, #0
 8017cde:	d101      	bne.n	8017ce4 <__lo0bits+0x34>
 8017ce0:	2010      	movs	r0, #16
 8017ce2:	0c1b      	lsrs	r3, r3, #16
 8017ce4:	b2da      	uxtb	r2, r3
 8017ce6:	2a00      	cmp	r2, #0
 8017ce8:	d101      	bne.n	8017cee <__lo0bits+0x3e>
 8017cea:	3008      	adds	r0, #8
 8017cec:	0a1b      	lsrs	r3, r3, #8
 8017cee:	071a      	lsls	r2, r3, #28
 8017cf0:	d101      	bne.n	8017cf6 <__lo0bits+0x46>
 8017cf2:	3004      	adds	r0, #4
 8017cf4:	091b      	lsrs	r3, r3, #4
 8017cf6:	079a      	lsls	r2, r3, #30
 8017cf8:	d101      	bne.n	8017cfe <__lo0bits+0x4e>
 8017cfa:	3002      	adds	r0, #2
 8017cfc:	089b      	lsrs	r3, r3, #2
 8017cfe:	07da      	lsls	r2, r3, #31
 8017d00:	d4e8      	bmi.n	8017cd4 <__lo0bits+0x24>
 8017d02:	085b      	lsrs	r3, r3, #1
 8017d04:	d001      	beq.n	8017d0a <__lo0bits+0x5a>
 8017d06:	3001      	adds	r0, #1
 8017d08:	e7e4      	b.n	8017cd4 <__lo0bits+0x24>
 8017d0a:	2020      	movs	r0, #32
 8017d0c:	e7e0      	b.n	8017cd0 <__lo0bits+0x20>

08017d0e <__i2b>:
 8017d0e:	b510      	push	{r4, lr}
 8017d10:	000c      	movs	r4, r1
 8017d12:	2101      	movs	r1, #1
 8017d14:	f7ff ff04 	bl	8017b20 <_Balloc>
 8017d18:	2301      	movs	r3, #1
 8017d1a:	6144      	str	r4, [r0, #20]
 8017d1c:	6103      	str	r3, [r0, #16]
 8017d1e:	bd10      	pop	{r4, pc}

08017d20 <__multiply>:
 8017d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d22:	690b      	ldr	r3, [r1, #16]
 8017d24:	0014      	movs	r4, r2
 8017d26:	6912      	ldr	r2, [r2, #16]
 8017d28:	b089      	sub	sp, #36	; 0x24
 8017d2a:	000d      	movs	r5, r1
 8017d2c:	4293      	cmp	r3, r2
 8017d2e:	da01      	bge.n	8017d34 <__multiply+0x14>
 8017d30:	0025      	movs	r5, r4
 8017d32:	000c      	movs	r4, r1
 8017d34:	692f      	ldr	r7, [r5, #16]
 8017d36:	6926      	ldr	r6, [r4, #16]
 8017d38:	6869      	ldr	r1, [r5, #4]
 8017d3a:	19bb      	adds	r3, r7, r6
 8017d3c:	9302      	str	r3, [sp, #8]
 8017d3e:	68ab      	ldr	r3, [r5, #8]
 8017d40:	19ba      	adds	r2, r7, r6
 8017d42:	4293      	cmp	r3, r2
 8017d44:	da00      	bge.n	8017d48 <__multiply+0x28>
 8017d46:	3101      	adds	r1, #1
 8017d48:	f7ff feea 	bl	8017b20 <_Balloc>
 8017d4c:	0002      	movs	r2, r0
 8017d4e:	19bb      	adds	r3, r7, r6
 8017d50:	3214      	adds	r2, #20
 8017d52:	009b      	lsls	r3, r3, #2
 8017d54:	18d3      	adds	r3, r2, r3
 8017d56:	469c      	mov	ip, r3
 8017d58:	2100      	movs	r1, #0
 8017d5a:	0013      	movs	r3, r2
 8017d5c:	9004      	str	r0, [sp, #16]
 8017d5e:	4563      	cmp	r3, ip
 8017d60:	d31d      	bcc.n	8017d9e <__multiply+0x7e>
 8017d62:	3514      	adds	r5, #20
 8017d64:	00bf      	lsls	r7, r7, #2
 8017d66:	19eb      	adds	r3, r5, r7
 8017d68:	3414      	adds	r4, #20
 8017d6a:	00b6      	lsls	r6, r6, #2
 8017d6c:	9305      	str	r3, [sp, #20]
 8017d6e:	19a3      	adds	r3, r4, r6
 8017d70:	9503      	str	r5, [sp, #12]
 8017d72:	9401      	str	r4, [sp, #4]
 8017d74:	9307      	str	r3, [sp, #28]
 8017d76:	9b07      	ldr	r3, [sp, #28]
 8017d78:	9901      	ldr	r1, [sp, #4]
 8017d7a:	4299      	cmp	r1, r3
 8017d7c:	d311      	bcc.n	8017da2 <__multiply+0x82>
 8017d7e:	9b02      	ldr	r3, [sp, #8]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	dd06      	ble.n	8017d92 <__multiply+0x72>
 8017d84:	2304      	movs	r3, #4
 8017d86:	425b      	negs	r3, r3
 8017d88:	449c      	add	ip, r3
 8017d8a:	4663      	mov	r3, ip
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d051      	beq.n	8017e36 <__multiply+0x116>
 8017d92:	9b04      	ldr	r3, [sp, #16]
 8017d94:	9a02      	ldr	r2, [sp, #8]
 8017d96:	0018      	movs	r0, r3
 8017d98:	611a      	str	r2, [r3, #16]
 8017d9a:	b009      	add	sp, #36	; 0x24
 8017d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d9e:	c302      	stmia	r3!, {r1}
 8017da0:	e7dd      	b.n	8017d5e <__multiply+0x3e>
 8017da2:	9b01      	ldr	r3, [sp, #4]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	b298      	uxth	r0, r3
 8017da8:	2800      	cmp	r0, #0
 8017daa:	d01c      	beq.n	8017de6 <__multiply+0xc6>
 8017dac:	0015      	movs	r5, r2
 8017dae:	2600      	movs	r6, #0
 8017db0:	9f03      	ldr	r7, [sp, #12]
 8017db2:	cf02      	ldmia	r7!, {r1}
 8017db4:	682c      	ldr	r4, [r5, #0]
 8017db6:	b28b      	uxth	r3, r1
 8017db8:	4343      	muls	r3, r0
 8017dba:	0c09      	lsrs	r1, r1, #16
 8017dbc:	4341      	muls	r1, r0
 8017dbe:	b2a4      	uxth	r4, r4
 8017dc0:	191b      	adds	r3, r3, r4
 8017dc2:	199b      	adds	r3, r3, r6
 8017dc4:	000e      	movs	r6, r1
 8017dc6:	6829      	ldr	r1, [r5, #0]
 8017dc8:	9506      	str	r5, [sp, #24]
 8017dca:	0c09      	lsrs	r1, r1, #16
 8017dcc:	1871      	adds	r1, r6, r1
 8017dce:	0c1e      	lsrs	r6, r3, #16
 8017dd0:	1989      	adds	r1, r1, r6
 8017dd2:	0c0e      	lsrs	r6, r1, #16
 8017dd4:	b29b      	uxth	r3, r3
 8017dd6:	0409      	lsls	r1, r1, #16
 8017dd8:	430b      	orrs	r3, r1
 8017dda:	c508      	stmia	r5!, {r3}
 8017ddc:	9b05      	ldr	r3, [sp, #20]
 8017dde:	42bb      	cmp	r3, r7
 8017de0:	d8e7      	bhi.n	8017db2 <__multiply+0x92>
 8017de2:	9b06      	ldr	r3, [sp, #24]
 8017de4:	605e      	str	r6, [r3, #4]
 8017de6:	9b01      	ldr	r3, [sp, #4]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	0c1d      	lsrs	r5, r3, #16
 8017dec:	d01e      	beq.n	8017e2c <__multiply+0x10c>
 8017dee:	0010      	movs	r0, r2
 8017df0:	2700      	movs	r7, #0
 8017df2:	6813      	ldr	r3, [r2, #0]
 8017df4:	9e03      	ldr	r6, [sp, #12]
 8017df6:	6831      	ldr	r1, [r6, #0]
 8017df8:	6804      	ldr	r4, [r0, #0]
 8017dfa:	b289      	uxth	r1, r1
 8017dfc:	4369      	muls	r1, r5
 8017dfe:	0c24      	lsrs	r4, r4, #16
 8017e00:	1909      	adds	r1, r1, r4
 8017e02:	19c9      	adds	r1, r1, r7
 8017e04:	040f      	lsls	r7, r1, #16
 8017e06:	b29b      	uxth	r3, r3
 8017e08:	433b      	orrs	r3, r7
 8017e0a:	6003      	str	r3, [r0, #0]
 8017e0c:	ce80      	ldmia	r6!, {r7}
 8017e0e:	6843      	ldr	r3, [r0, #4]
 8017e10:	0c3f      	lsrs	r7, r7, #16
 8017e12:	436f      	muls	r7, r5
 8017e14:	b29b      	uxth	r3, r3
 8017e16:	18fb      	adds	r3, r7, r3
 8017e18:	0c09      	lsrs	r1, r1, #16
 8017e1a:	185b      	adds	r3, r3, r1
 8017e1c:	9905      	ldr	r1, [sp, #20]
 8017e1e:	9006      	str	r0, [sp, #24]
 8017e20:	0c1f      	lsrs	r7, r3, #16
 8017e22:	3004      	adds	r0, #4
 8017e24:	42b1      	cmp	r1, r6
 8017e26:	d8e6      	bhi.n	8017df6 <__multiply+0xd6>
 8017e28:	9906      	ldr	r1, [sp, #24]
 8017e2a:	604b      	str	r3, [r1, #4]
 8017e2c:	9b01      	ldr	r3, [sp, #4]
 8017e2e:	3204      	adds	r2, #4
 8017e30:	3304      	adds	r3, #4
 8017e32:	9301      	str	r3, [sp, #4]
 8017e34:	e79f      	b.n	8017d76 <__multiply+0x56>
 8017e36:	9b02      	ldr	r3, [sp, #8]
 8017e38:	3b01      	subs	r3, #1
 8017e3a:	9302      	str	r3, [sp, #8]
 8017e3c:	e79f      	b.n	8017d7e <__multiply+0x5e>
	...

08017e40 <__pow5mult>:
 8017e40:	2303      	movs	r3, #3
 8017e42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e44:	4013      	ands	r3, r2
 8017e46:	0006      	movs	r6, r0
 8017e48:	000f      	movs	r7, r1
 8017e4a:	0015      	movs	r5, r2
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d008      	beq.n	8017e62 <__pow5mult+0x22>
 8017e50:	491a      	ldr	r1, [pc, #104]	; (8017ebc <__pow5mult+0x7c>)
 8017e52:	3b01      	subs	r3, #1
 8017e54:	009a      	lsls	r2, r3, #2
 8017e56:	5852      	ldr	r2, [r2, r1]
 8017e58:	2300      	movs	r3, #0
 8017e5a:	0039      	movs	r1, r7
 8017e5c:	f7ff fe92 	bl	8017b84 <__multadd>
 8017e60:	0007      	movs	r7, r0
 8017e62:	10ad      	asrs	r5, r5, #2
 8017e64:	d027      	beq.n	8017eb6 <__pow5mult+0x76>
 8017e66:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8017e68:	2c00      	cmp	r4, #0
 8017e6a:	d107      	bne.n	8017e7c <__pow5mult+0x3c>
 8017e6c:	4914      	ldr	r1, [pc, #80]	; (8017ec0 <__pow5mult+0x80>)
 8017e6e:	0030      	movs	r0, r6
 8017e70:	f7ff ff4d 	bl	8017d0e <__i2b>
 8017e74:	2300      	movs	r3, #0
 8017e76:	0004      	movs	r4, r0
 8017e78:	64b0      	str	r0, [r6, #72]	; 0x48
 8017e7a:	6003      	str	r3, [r0, #0]
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	421d      	tst	r5, r3
 8017e80:	d00a      	beq.n	8017e98 <__pow5mult+0x58>
 8017e82:	0039      	movs	r1, r7
 8017e84:	0022      	movs	r2, r4
 8017e86:	0030      	movs	r0, r6
 8017e88:	f7ff ff4a 	bl	8017d20 <__multiply>
 8017e8c:	0039      	movs	r1, r7
 8017e8e:	9001      	str	r0, [sp, #4]
 8017e90:	0030      	movs	r0, r6
 8017e92:	f7ff fe6d 	bl	8017b70 <_Bfree>
 8017e96:	9f01      	ldr	r7, [sp, #4]
 8017e98:	106d      	asrs	r5, r5, #1
 8017e9a:	d00c      	beq.n	8017eb6 <__pow5mult+0x76>
 8017e9c:	6820      	ldr	r0, [r4, #0]
 8017e9e:	2800      	cmp	r0, #0
 8017ea0:	d107      	bne.n	8017eb2 <__pow5mult+0x72>
 8017ea2:	0022      	movs	r2, r4
 8017ea4:	0021      	movs	r1, r4
 8017ea6:	0030      	movs	r0, r6
 8017ea8:	f7ff ff3a 	bl	8017d20 <__multiply>
 8017eac:	2300      	movs	r3, #0
 8017eae:	6020      	str	r0, [r4, #0]
 8017eb0:	6003      	str	r3, [r0, #0]
 8017eb2:	0004      	movs	r4, r0
 8017eb4:	e7e2      	b.n	8017e7c <__pow5mult+0x3c>
 8017eb6:	0038      	movs	r0, r7
 8017eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017eba:	46c0      	nop			; (mov r8, r8)
 8017ebc:	0801bd40 	.word	0x0801bd40
 8017ec0:	00000271 	.word	0x00000271

08017ec4 <__lshift>:
 8017ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ec6:	000d      	movs	r5, r1
 8017ec8:	0017      	movs	r7, r2
 8017eca:	692b      	ldr	r3, [r5, #16]
 8017ecc:	1154      	asrs	r4, r2, #5
 8017ece:	b085      	sub	sp, #20
 8017ed0:	18e3      	adds	r3, r4, r3
 8017ed2:	9301      	str	r3, [sp, #4]
 8017ed4:	3301      	adds	r3, #1
 8017ed6:	9300      	str	r3, [sp, #0]
 8017ed8:	6849      	ldr	r1, [r1, #4]
 8017eda:	68ab      	ldr	r3, [r5, #8]
 8017edc:	9002      	str	r0, [sp, #8]
 8017ede:	9a00      	ldr	r2, [sp, #0]
 8017ee0:	4293      	cmp	r3, r2
 8017ee2:	db35      	blt.n	8017f50 <__lshift+0x8c>
 8017ee4:	9802      	ldr	r0, [sp, #8]
 8017ee6:	f7ff fe1b 	bl	8017b20 <_Balloc>
 8017eea:	2300      	movs	r3, #0
 8017eec:	0002      	movs	r2, r0
 8017eee:	0006      	movs	r6, r0
 8017ef0:	0019      	movs	r1, r3
 8017ef2:	3214      	adds	r2, #20
 8017ef4:	42a3      	cmp	r3, r4
 8017ef6:	db2e      	blt.n	8017f56 <__lshift+0x92>
 8017ef8:	43e3      	mvns	r3, r4
 8017efa:	17db      	asrs	r3, r3, #31
 8017efc:	401c      	ands	r4, r3
 8017efe:	002b      	movs	r3, r5
 8017f00:	00a4      	lsls	r4, r4, #2
 8017f02:	1914      	adds	r4, r2, r4
 8017f04:	692a      	ldr	r2, [r5, #16]
 8017f06:	3314      	adds	r3, #20
 8017f08:	0092      	lsls	r2, r2, #2
 8017f0a:	189a      	adds	r2, r3, r2
 8017f0c:	4694      	mov	ip, r2
 8017f0e:	221f      	movs	r2, #31
 8017f10:	4017      	ands	r7, r2
 8017f12:	d024      	beq.n	8017f5e <__lshift+0x9a>
 8017f14:	3201      	adds	r2, #1
 8017f16:	1bd2      	subs	r2, r2, r7
 8017f18:	9203      	str	r2, [sp, #12]
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	6819      	ldr	r1, [r3, #0]
 8017f1e:	0020      	movs	r0, r4
 8017f20:	40b9      	lsls	r1, r7
 8017f22:	430a      	orrs	r2, r1
 8017f24:	c404      	stmia	r4!, {r2}
 8017f26:	cb04      	ldmia	r3!, {r2}
 8017f28:	9903      	ldr	r1, [sp, #12]
 8017f2a:	40ca      	lsrs	r2, r1
 8017f2c:	459c      	cmp	ip, r3
 8017f2e:	d8f5      	bhi.n	8017f1c <__lshift+0x58>
 8017f30:	6042      	str	r2, [r0, #4]
 8017f32:	2a00      	cmp	r2, #0
 8017f34:	d002      	beq.n	8017f3c <__lshift+0x78>
 8017f36:	9b01      	ldr	r3, [sp, #4]
 8017f38:	3302      	adds	r3, #2
 8017f3a:	9300      	str	r3, [sp, #0]
 8017f3c:	9b00      	ldr	r3, [sp, #0]
 8017f3e:	9802      	ldr	r0, [sp, #8]
 8017f40:	3b01      	subs	r3, #1
 8017f42:	6133      	str	r3, [r6, #16]
 8017f44:	0029      	movs	r1, r5
 8017f46:	f7ff fe13 	bl	8017b70 <_Bfree>
 8017f4a:	0030      	movs	r0, r6
 8017f4c:	b005      	add	sp, #20
 8017f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f50:	3101      	adds	r1, #1
 8017f52:	005b      	lsls	r3, r3, #1
 8017f54:	e7c3      	b.n	8017ede <__lshift+0x1a>
 8017f56:	0098      	lsls	r0, r3, #2
 8017f58:	5011      	str	r1, [r2, r0]
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	e7ca      	b.n	8017ef4 <__lshift+0x30>
 8017f5e:	cb04      	ldmia	r3!, {r2}
 8017f60:	c404      	stmia	r4!, {r2}
 8017f62:	459c      	cmp	ip, r3
 8017f64:	d8fb      	bhi.n	8017f5e <__lshift+0x9a>
 8017f66:	e7e9      	b.n	8017f3c <__lshift+0x78>

08017f68 <__mcmp>:
 8017f68:	690a      	ldr	r2, [r1, #16]
 8017f6a:	6903      	ldr	r3, [r0, #16]
 8017f6c:	b530      	push	{r4, r5, lr}
 8017f6e:	1a9b      	subs	r3, r3, r2
 8017f70:	d10d      	bne.n	8017f8e <__mcmp+0x26>
 8017f72:	0092      	lsls	r2, r2, #2
 8017f74:	3014      	adds	r0, #20
 8017f76:	3114      	adds	r1, #20
 8017f78:	1884      	adds	r4, r0, r2
 8017f7a:	1889      	adds	r1, r1, r2
 8017f7c:	3c04      	subs	r4, #4
 8017f7e:	3904      	subs	r1, #4
 8017f80:	6825      	ldr	r5, [r4, #0]
 8017f82:	680a      	ldr	r2, [r1, #0]
 8017f84:	4295      	cmp	r5, r2
 8017f86:	d004      	beq.n	8017f92 <__mcmp+0x2a>
 8017f88:	2301      	movs	r3, #1
 8017f8a:	4295      	cmp	r5, r2
 8017f8c:	d304      	bcc.n	8017f98 <__mcmp+0x30>
 8017f8e:	0018      	movs	r0, r3
 8017f90:	bd30      	pop	{r4, r5, pc}
 8017f92:	42a0      	cmp	r0, r4
 8017f94:	d3f2      	bcc.n	8017f7c <__mcmp+0x14>
 8017f96:	e7fa      	b.n	8017f8e <__mcmp+0x26>
 8017f98:	425b      	negs	r3, r3
 8017f9a:	e7f8      	b.n	8017f8e <__mcmp+0x26>

08017f9c <__mdiff>:
 8017f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f9e:	000d      	movs	r5, r1
 8017fa0:	b085      	sub	sp, #20
 8017fa2:	0007      	movs	r7, r0
 8017fa4:	0011      	movs	r1, r2
 8017fa6:	0028      	movs	r0, r5
 8017fa8:	0014      	movs	r4, r2
 8017faa:	f7ff ffdd 	bl	8017f68 <__mcmp>
 8017fae:	1e06      	subs	r6, r0, #0
 8017fb0:	d108      	bne.n	8017fc4 <__mdiff+0x28>
 8017fb2:	0001      	movs	r1, r0
 8017fb4:	0038      	movs	r0, r7
 8017fb6:	f7ff fdb3 	bl	8017b20 <_Balloc>
 8017fba:	2301      	movs	r3, #1
 8017fbc:	6146      	str	r6, [r0, #20]
 8017fbe:	6103      	str	r3, [r0, #16]
 8017fc0:	b005      	add	sp, #20
 8017fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	9301      	str	r3, [sp, #4]
 8017fc8:	2800      	cmp	r0, #0
 8017fca:	db04      	blt.n	8017fd6 <__mdiff+0x3a>
 8017fcc:	0023      	movs	r3, r4
 8017fce:	002c      	movs	r4, r5
 8017fd0:	001d      	movs	r5, r3
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	9301      	str	r3, [sp, #4]
 8017fd6:	6861      	ldr	r1, [r4, #4]
 8017fd8:	0038      	movs	r0, r7
 8017fda:	f7ff fda1 	bl	8017b20 <_Balloc>
 8017fde:	002f      	movs	r7, r5
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	9b01      	ldr	r3, [sp, #4]
 8017fe4:	6926      	ldr	r6, [r4, #16]
 8017fe6:	60c3      	str	r3, [r0, #12]
 8017fe8:	3414      	adds	r4, #20
 8017fea:	00b3      	lsls	r3, r6, #2
 8017fec:	18e3      	adds	r3, r4, r3
 8017fee:	9302      	str	r3, [sp, #8]
 8017ff0:	692b      	ldr	r3, [r5, #16]
 8017ff2:	3714      	adds	r7, #20
 8017ff4:	009b      	lsls	r3, r3, #2
 8017ff6:	18fb      	adds	r3, r7, r3
 8017ff8:	9303      	str	r3, [sp, #12]
 8017ffa:	0003      	movs	r3, r0
 8017ffc:	4694      	mov	ip, r2
 8017ffe:	3314      	adds	r3, #20
 8018000:	cc20      	ldmia	r4!, {r5}
 8018002:	cf04      	ldmia	r7!, {r2}
 8018004:	9201      	str	r2, [sp, #4]
 8018006:	b2aa      	uxth	r2, r5
 8018008:	4494      	add	ip, r2
 801800a:	466a      	mov	r2, sp
 801800c:	4661      	mov	r1, ip
 801800e:	8892      	ldrh	r2, [r2, #4]
 8018010:	0c2d      	lsrs	r5, r5, #16
 8018012:	1a8a      	subs	r2, r1, r2
 8018014:	9901      	ldr	r1, [sp, #4]
 8018016:	0c09      	lsrs	r1, r1, #16
 8018018:	1a69      	subs	r1, r5, r1
 801801a:	1415      	asrs	r5, r2, #16
 801801c:	1949      	adds	r1, r1, r5
 801801e:	140d      	asrs	r5, r1, #16
 8018020:	b292      	uxth	r2, r2
 8018022:	0409      	lsls	r1, r1, #16
 8018024:	430a      	orrs	r2, r1
 8018026:	601a      	str	r2, [r3, #0]
 8018028:	9a03      	ldr	r2, [sp, #12]
 801802a:	46ac      	mov	ip, r5
 801802c:	3304      	adds	r3, #4
 801802e:	42ba      	cmp	r2, r7
 8018030:	d8e6      	bhi.n	8018000 <__mdiff+0x64>
 8018032:	9902      	ldr	r1, [sp, #8]
 8018034:	001a      	movs	r2, r3
 8018036:	428c      	cmp	r4, r1
 8018038:	d305      	bcc.n	8018046 <__mdiff+0xaa>
 801803a:	3a04      	subs	r2, #4
 801803c:	6813      	ldr	r3, [r2, #0]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d00e      	beq.n	8018060 <__mdiff+0xc4>
 8018042:	6106      	str	r6, [r0, #16]
 8018044:	e7bc      	b.n	8017fc0 <__mdiff+0x24>
 8018046:	cc04      	ldmia	r4!, {r2}
 8018048:	b291      	uxth	r1, r2
 801804a:	4461      	add	r1, ip
 801804c:	140d      	asrs	r5, r1, #16
 801804e:	0c12      	lsrs	r2, r2, #16
 8018050:	1952      	adds	r2, r2, r5
 8018052:	1415      	asrs	r5, r2, #16
 8018054:	b289      	uxth	r1, r1
 8018056:	0412      	lsls	r2, r2, #16
 8018058:	430a      	orrs	r2, r1
 801805a:	46ac      	mov	ip, r5
 801805c:	c304      	stmia	r3!, {r2}
 801805e:	e7e8      	b.n	8018032 <__mdiff+0x96>
 8018060:	3e01      	subs	r6, #1
 8018062:	e7ea      	b.n	801803a <__mdiff+0x9e>

08018064 <__ulp>:
 8018064:	000b      	movs	r3, r1
 8018066:	4910      	ldr	r1, [pc, #64]	; (80180a8 <__ulp+0x44>)
 8018068:	b510      	push	{r4, lr}
 801806a:	4019      	ands	r1, r3
 801806c:	4b0f      	ldr	r3, [pc, #60]	; (80180ac <__ulp+0x48>)
 801806e:	18c9      	adds	r1, r1, r3
 8018070:	2900      	cmp	r1, #0
 8018072:	dd04      	ble.n	801807e <__ulp+0x1a>
 8018074:	2200      	movs	r2, #0
 8018076:	000b      	movs	r3, r1
 8018078:	0010      	movs	r0, r2
 801807a:	0019      	movs	r1, r3
 801807c:	bd10      	pop	{r4, pc}
 801807e:	4249      	negs	r1, r1
 8018080:	1509      	asrs	r1, r1, #20
 8018082:	2200      	movs	r2, #0
 8018084:	2300      	movs	r3, #0
 8018086:	2913      	cmp	r1, #19
 8018088:	dc04      	bgt.n	8018094 <__ulp+0x30>
 801808a:	2080      	movs	r0, #128	; 0x80
 801808c:	0300      	lsls	r0, r0, #12
 801808e:	4108      	asrs	r0, r1
 8018090:	0003      	movs	r3, r0
 8018092:	e7f1      	b.n	8018078 <__ulp+0x14>
 8018094:	3914      	subs	r1, #20
 8018096:	2001      	movs	r0, #1
 8018098:	291e      	cmp	r1, #30
 801809a:	dc02      	bgt.n	80180a2 <__ulp+0x3e>
 801809c:	241f      	movs	r4, #31
 801809e:	1a61      	subs	r1, r4, r1
 80180a0:	4088      	lsls	r0, r1
 80180a2:	0002      	movs	r2, r0
 80180a4:	e7e8      	b.n	8018078 <__ulp+0x14>
 80180a6:	46c0      	nop			; (mov r8, r8)
 80180a8:	7ff00000 	.word	0x7ff00000
 80180ac:	fcc00000 	.word	0xfcc00000

080180b0 <__b2d>:
 80180b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180b2:	0006      	movs	r6, r0
 80180b4:	6903      	ldr	r3, [r0, #16]
 80180b6:	3614      	adds	r6, #20
 80180b8:	009b      	lsls	r3, r3, #2
 80180ba:	18f3      	adds	r3, r6, r3
 80180bc:	1f1d      	subs	r5, r3, #4
 80180be:	682c      	ldr	r4, [r5, #0]
 80180c0:	000f      	movs	r7, r1
 80180c2:	0020      	movs	r0, r4
 80180c4:	9301      	str	r3, [sp, #4]
 80180c6:	f7ff fdd9 	bl	8017c7c <__hi0bits>
 80180ca:	2320      	movs	r3, #32
 80180cc:	1a1b      	subs	r3, r3, r0
 80180ce:	603b      	str	r3, [r7, #0]
 80180d0:	491c      	ldr	r1, [pc, #112]	; (8018144 <__b2d+0x94>)
 80180d2:	280a      	cmp	r0, #10
 80180d4:	dc16      	bgt.n	8018104 <__b2d+0x54>
 80180d6:	230b      	movs	r3, #11
 80180d8:	0027      	movs	r7, r4
 80180da:	1a1b      	subs	r3, r3, r0
 80180dc:	40df      	lsrs	r7, r3
 80180de:	4339      	orrs	r1, r7
 80180e0:	469c      	mov	ip, r3
 80180e2:	000b      	movs	r3, r1
 80180e4:	2100      	movs	r1, #0
 80180e6:	42ae      	cmp	r6, r5
 80180e8:	d202      	bcs.n	80180f0 <__b2d+0x40>
 80180ea:	9901      	ldr	r1, [sp, #4]
 80180ec:	3908      	subs	r1, #8
 80180ee:	6809      	ldr	r1, [r1, #0]
 80180f0:	3015      	adds	r0, #21
 80180f2:	4084      	lsls	r4, r0
 80180f4:	4660      	mov	r0, ip
 80180f6:	40c1      	lsrs	r1, r0
 80180f8:	430c      	orrs	r4, r1
 80180fa:	0022      	movs	r2, r4
 80180fc:	0010      	movs	r0, r2
 80180fe:	0019      	movs	r1, r3
 8018100:	b003      	add	sp, #12
 8018102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018104:	2700      	movs	r7, #0
 8018106:	42ae      	cmp	r6, r5
 8018108:	d202      	bcs.n	8018110 <__b2d+0x60>
 801810a:	9d01      	ldr	r5, [sp, #4]
 801810c:	3d08      	subs	r5, #8
 801810e:	682f      	ldr	r7, [r5, #0]
 8018110:	380b      	subs	r0, #11
 8018112:	4684      	mov	ip, r0
 8018114:	1e03      	subs	r3, r0, #0
 8018116:	d012      	beq.n	801813e <__b2d+0x8e>
 8018118:	409c      	lsls	r4, r3
 801811a:	2020      	movs	r0, #32
 801811c:	4321      	orrs	r1, r4
 801811e:	003c      	movs	r4, r7
 8018120:	1ac0      	subs	r0, r0, r3
 8018122:	40c4      	lsrs	r4, r0
 8018124:	4321      	orrs	r1, r4
 8018126:	000b      	movs	r3, r1
 8018128:	2100      	movs	r1, #0
 801812a:	42b5      	cmp	r5, r6
 801812c:	d901      	bls.n	8018132 <__b2d+0x82>
 801812e:	3d04      	subs	r5, #4
 8018130:	6829      	ldr	r1, [r5, #0]
 8018132:	4664      	mov	r4, ip
 8018134:	40c1      	lsrs	r1, r0
 8018136:	40a7      	lsls	r7, r4
 8018138:	430f      	orrs	r7, r1
 801813a:	003a      	movs	r2, r7
 801813c:	e7de      	b.n	80180fc <__b2d+0x4c>
 801813e:	4321      	orrs	r1, r4
 8018140:	000b      	movs	r3, r1
 8018142:	e7fa      	b.n	801813a <__b2d+0x8a>
 8018144:	3ff00000 	.word	0x3ff00000

08018148 <__d2b>:
 8018148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801814a:	001d      	movs	r5, r3
 801814c:	2101      	movs	r1, #1
 801814e:	0014      	movs	r4, r2
 8018150:	9f08      	ldr	r7, [sp, #32]
 8018152:	f7ff fce5 	bl	8017b20 <_Balloc>
 8018156:	032b      	lsls	r3, r5, #12
 8018158:	006d      	lsls	r5, r5, #1
 801815a:	0006      	movs	r6, r0
 801815c:	0b1b      	lsrs	r3, r3, #12
 801815e:	0d6d      	lsrs	r5, r5, #21
 8018160:	d124      	bne.n	80181ac <__d2b+0x64>
 8018162:	9301      	str	r3, [sp, #4]
 8018164:	2c00      	cmp	r4, #0
 8018166:	d027      	beq.n	80181b8 <__d2b+0x70>
 8018168:	4668      	mov	r0, sp
 801816a:	9400      	str	r4, [sp, #0]
 801816c:	f7ff fda0 	bl	8017cb0 <__lo0bits>
 8018170:	9c00      	ldr	r4, [sp, #0]
 8018172:	2800      	cmp	r0, #0
 8018174:	d01e      	beq.n	80181b4 <__d2b+0x6c>
 8018176:	9b01      	ldr	r3, [sp, #4]
 8018178:	2120      	movs	r1, #32
 801817a:	001a      	movs	r2, r3
 801817c:	1a09      	subs	r1, r1, r0
 801817e:	408a      	lsls	r2, r1
 8018180:	40c3      	lsrs	r3, r0
 8018182:	4322      	orrs	r2, r4
 8018184:	6172      	str	r2, [r6, #20]
 8018186:	9301      	str	r3, [sp, #4]
 8018188:	9c01      	ldr	r4, [sp, #4]
 801818a:	61b4      	str	r4, [r6, #24]
 801818c:	1e63      	subs	r3, r4, #1
 801818e:	419c      	sbcs	r4, r3
 8018190:	3401      	adds	r4, #1
 8018192:	6134      	str	r4, [r6, #16]
 8018194:	2d00      	cmp	r5, #0
 8018196:	d018      	beq.n	80181ca <__d2b+0x82>
 8018198:	4b12      	ldr	r3, [pc, #72]	; (80181e4 <__d2b+0x9c>)
 801819a:	18ed      	adds	r5, r5, r3
 801819c:	2335      	movs	r3, #53	; 0x35
 801819e:	182d      	adds	r5, r5, r0
 80181a0:	603d      	str	r5, [r7, #0]
 80181a2:	1a18      	subs	r0, r3, r0
 80181a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181a6:	6018      	str	r0, [r3, #0]
 80181a8:	0030      	movs	r0, r6
 80181aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80181ac:	2280      	movs	r2, #128	; 0x80
 80181ae:	0352      	lsls	r2, r2, #13
 80181b0:	4313      	orrs	r3, r2
 80181b2:	e7d6      	b.n	8018162 <__d2b+0x1a>
 80181b4:	6174      	str	r4, [r6, #20]
 80181b6:	e7e7      	b.n	8018188 <__d2b+0x40>
 80181b8:	a801      	add	r0, sp, #4
 80181ba:	f7ff fd79 	bl	8017cb0 <__lo0bits>
 80181be:	2401      	movs	r4, #1
 80181c0:	9b01      	ldr	r3, [sp, #4]
 80181c2:	6134      	str	r4, [r6, #16]
 80181c4:	6173      	str	r3, [r6, #20]
 80181c6:	3020      	adds	r0, #32
 80181c8:	e7e4      	b.n	8018194 <__d2b+0x4c>
 80181ca:	4b07      	ldr	r3, [pc, #28]	; (80181e8 <__d2b+0xa0>)
 80181cc:	18c0      	adds	r0, r0, r3
 80181ce:	4b07      	ldr	r3, [pc, #28]	; (80181ec <__d2b+0xa4>)
 80181d0:	6038      	str	r0, [r7, #0]
 80181d2:	18e3      	adds	r3, r4, r3
 80181d4:	009b      	lsls	r3, r3, #2
 80181d6:	18f3      	adds	r3, r6, r3
 80181d8:	6958      	ldr	r0, [r3, #20]
 80181da:	f7ff fd4f 	bl	8017c7c <__hi0bits>
 80181de:	0164      	lsls	r4, r4, #5
 80181e0:	1a20      	subs	r0, r4, r0
 80181e2:	e7df      	b.n	80181a4 <__d2b+0x5c>
 80181e4:	fffffbcd 	.word	0xfffffbcd
 80181e8:	fffffbce 	.word	0xfffffbce
 80181ec:	3fffffff 	.word	0x3fffffff

080181f0 <__ratio>:
 80181f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181f2:	b085      	sub	sp, #20
 80181f4:	000f      	movs	r7, r1
 80181f6:	a902      	add	r1, sp, #8
 80181f8:	0006      	movs	r6, r0
 80181fa:	f7ff ff59 	bl	80180b0 <__b2d>
 80181fe:	0004      	movs	r4, r0
 8018200:	000d      	movs	r5, r1
 8018202:	0038      	movs	r0, r7
 8018204:	a903      	add	r1, sp, #12
 8018206:	9400      	str	r4, [sp, #0]
 8018208:	9501      	str	r5, [sp, #4]
 801820a:	f7ff ff51 	bl	80180b0 <__b2d>
 801820e:	6936      	ldr	r6, [r6, #16]
 8018210:	693f      	ldr	r7, [r7, #16]
 8018212:	0002      	movs	r2, r0
 8018214:	1bf7      	subs	r7, r6, r7
 8018216:	017e      	lsls	r6, r7, #5
 8018218:	46b4      	mov	ip, r6
 801821a:	9f03      	ldr	r7, [sp, #12]
 801821c:	9e02      	ldr	r6, [sp, #8]
 801821e:	000b      	movs	r3, r1
 8018220:	1bf6      	subs	r6, r6, r7
 8018222:	4466      	add	r6, ip
 8018224:	0537      	lsls	r7, r6, #20
 8018226:	2e00      	cmp	r6, #0
 8018228:	dd07      	ble.n	801823a <__ratio+0x4a>
 801822a:	1979      	adds	r1, r7, r5
 801822c:	9101      	str	r1, [sp, #4]
 801822e:	9800      	ldr	r0, [sp, #0]
 8018230:	9901      	ldr	r1, [sp, #4]
 8018232:	f7e9 f9f5 	bl	8001620 <__aeabi_ddiv>
 8018236:	b005      	add	sp, #20
 8018238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801823a:	1bcb      	subs	r3, r1, r7
 801823c:	e7f7      	b.n	801822e <__ratio+0x3e>

0801823e <__copybits>:
 801823e:	0013      	movs	r3, r2
 8018240:	3901      	subs	r1, #1
 8018242:	b510      	push	{r4, lr}
 8018244:	1149      	asrs	r1, r1, #5
 8018246:	6912      	ldr	r2, [r2, #16]
 8018248:	3101      	adds	r1, #1
 801824a:	0089      	lsls	r1, r1, #2
 801824c:	3314      	adds	r3, #20
 801824e:	0092      	lsls	r2, r2, #2
 8018250:	1841      	adds	r1, r0, r1
 8018252:	189a      	adds	r2, r3, r2
 8018254:	429a      	cmp	r2, r3
 8018256:	d803      	bhi.n	8018260 <__copybits+0x22>
 8018258:	2300      	movs	r3, #0
 801825a:	4281      	cmp	r1, r0
 801825c:	d803      	bhi.n	8018266 <__copybits+0x28>
 801825e:	bd10      	pop	{r4, pc}
 8018260:	cb10      	ldmia	r3!, {r4}
 8018262:	c010      	stmia	r0!, {r4}
 8018264:	e7f6      	b.n	8018254 <__copybits+0x16>
 8018266:	c008      	stmia	r0!, {r3}
 8018268:	e7f7      	b.n	801825a <__copybits+0x1c>

0801826a <__any_on>:
 801826a:	0002      	movs	r2, r0
 801826c:	6900      	ldr	r0, [r0, #16]
 801826e:	b510      	push	{r4, lr}
 8018270:	3214      	adds	r2, #20
 8018272:	114b      	asrs	r3, r1, #5
 8018274:	4298      	cmp	r0, r3
 8018276:	db12      	blt.n	801829e <__any_on+0x34>
 8018278:	dd0b      	ble.n	8018292 <__any_on+0x28>
 801827a:	201f      	movs	r0, #31
 801827c:	4001      	ands	r1, r0
 801827e:	d008      	beq.n	8018292 <__any_on+0x28>
 8018280:	0098      	lsls	r0, r3, #2
 8018282:	5884      	ldr	r4, [r0, r2]
 8018284:	0020      	movs	r0, r4
 8018286:	40c8      	lsrs	r0, r1
 8018288:	4088      	lsls	r0, r1
 801828a:	0001      	movs	r1, r0
 801828c:	2001      	movs	r0, #1
 801828e:	428c      	cmp	r4, r1
 8018290:	d104      	bne.n	801829c <__any_on+0x32>
 8018292:	009b      	lsls	r3, r3, #2
 8018294:	18d3      	adds	r3, r2, r3
 8018296:	4293      	cmp	r3, r2
 8018298:	d803      	bhi.n	80182a2 <__any_on+0x38>
 801829a:	2000      	movs	r0, #0
 801829c:	bd10      	pop	{r4, pc}
 801829e:	0003      	movs	r3, r0
 80182a0:	e7f7      	b.n	8018292 <__any_on+0x28>
 80182a2:	3b04      	subs	r3, #4
 80182a4:	6819      	ldr	r1, [r3, #0]
 80182a6:	2900      	cmp	r1, #0
 80182a8:	d0f5      	beq.n	8018296 <__any_on+0x2c>
 80182aa:	2001      	movs	r0, #1
 80182ac:	e7f6      	b.n	801829c <__any_on+0x32>
	...

080182b0 <frexp>:
 80182b0:	b570      	push	{r4, r5, r6, lr}
 80182b2:	0014      	movs	r4, r2
 80182b4:	2500      	movs	r5, #0
 80182b6:	6025      	str	r5, [r4, #0]
 80182b8:	4d10      	ldr	r5, [pc, #64]	; (80182fc <frexp+0x4c>)
 80182ba:	004b      	lsls	r3, r1, #1
 80182bc:	000a      	movs	r2, r1
 80182be:	085b      	lsrs	r3, r3, #1
 80182c0:	42ab      	cmp	r3, r5
 80182c2:	dc1a      	bgt.n	80182fa <frexp+0x4a>
 80182c4:	001d      	movs	r5, r3
 80182c6:	4305      	orrs	r5, r0
 80182c8:	d017      	beq.n	80182fa <frexp+0x4a>
 80182ca:	4d0d      	ldr	r5, [pc, #52]	; (8018300 <frexp+0x50>)
 80182cc:	42ab      	cmp	r3, r5
 80182ce:	dc09      	bgt.n	80182e4 <frexp+0x34>
 80182d0:	2200      	movs	r2, #0
 80182d2:	4b0c      	ldr	r3, [pc, #48]	; (8018304 <frexp+0x54>)
 80182d4:	f7e9 fdae 	bl	8001e34 <__aeabi_dmul>
 80182d8:	2536      	movs	r5, #54	; 0x36
 80182da:	000a      	movs	r2, r1
 80182dc:	004b      	lsls	r3, r1, #1
 80182de:	426d      	negs	r5, r5
 80182e0:	085b      	lsrs	r3, r3, #1
 80182e2:	6025      	str	r5, [r4, #0]
 80182e4:	4d08      	ldr	r5, [pc, #32]	; (8018308 <frexp+0x58>)
 80182e6:	151b      	asrs	r3, r3, #20
 80182e8:	195b      	adds	r3, r3, r5
 80182ea:	6825      	ldr	r5, [r4, #0]
 80182ec:	18eb      	adds	r3, r5, r3
 80182ee:	6023      	str	r3, [r4, #0]
 80182f0:	4b06      	ldr	r3, [pc, #24]	; (801830c <frexp+0x5c>)
 80182f2:	401a      	ands	r2, r3
 80182f4:	4b06      	ldr	r3, [pc, #24]	; (8018310 <frexp+0x60>)
 80182f6:	4313      	orrs	r3, r2
 80182f8:	0019      	movs	r1, r3
 80182fa:	bd70      	pop	{r4, r5, r6, pc}
 80182fc:	7fefffff 	.word	0x7fefffff
 8018300:	000fffff 	.word	0x000fffff
 8018304:	43500000 	.word	0x43500000
 8018308:	fffffc02 	.word	0xfffffc02
 801830c:	800fffff 	.word	0x800fffff
 8018310:	3fe00000 	.word	0x3fe00000

08018314 <__ssprint_r>:
 8018314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018316:	6893      	ldr	r3, [r2, #8]
 8018318:	b087      	sub	sp, #28
 801831a:	9002      	str	r0, [sp, #8]
 801831c:	000c      	movs	r4, r1
 801831e:	0016      	movs	r6, r2
 8018320:	2b00      	cmp	r3, #0
 8018322:	d063      	beq.n	80183ec <__ssprint_r+0xd8>
 8018324:	6813      	ldr	r3, [r2, #0]
 8018326:	9303      	str	r3, [sp, #12]
 8018328:	2300      	movs	r3, #0
 801832a:	001f      	movs	r7, r3
 801832c:	9305      	str	r3, [sp, #20]
 801832e:	2f00      	cmp	r7, #0
 8018330:	d02e      	beq.n	8018390 <__ssprint_r+0x7c>
 8018332:	68a5      	ldr	r5, [r4, #8]
 8018334:	42af      	cmp	r7, r5
 8018336:	d347      	bcc.n	80183c8 <__ssprint_r+0xb4>
 8018338:	2390      	movs	r3, #144	; 0x90
 801833a:	89a2      	ldrh	r2, [r4, #12]
 801833c:	00db      	lsls	r3, r3, #3
 801833e:	421a      	tst	r2, r3
 8018340:	d042      	beq.n	80183c8 <__ssprint_r+0xb4>
 8018342:	2003      	movs	r0, #3
 8018344:	6921      	ldr	r1, [r4, #16]
 8018346:	6823      	ldr	r3, [r4, #0]
 8018348:	1a5b      	subs	r3, r3, r1
 801834a:	9304      	str	r3, [sp, #16]
 801834c:	6963      	ldr	r3, [r4, #20]
 801834e:	4343      	muls	r3, r0
 8018350:	0fd8      	lsrs	r0, r3, #31
 8018352:	18c3      	adds	r3, r0, r3
 8018354:	105b      	asrs	r3, r3, #1
 8018356:	9301      	str	r3, [sp, #4]
 8018358:	9b04      	ldr	r3, [sp, #16]
 801835a:	9801      	ldr	r0, [sp, #4]
 801835c:	3301      	adds	r3, #1
 801835e:	19db      	adds	r3, r3, r7
 8018360:	4283      	cmp	r3, r0
 8018362:	d900      	bls.n	8018366 <__ssprint_r+0x52>
 8018364:	9301      	str	r3, [sp, #4]
 8018366:	0553      	lsls	r3, r2, #21
 8018368:	d544      	bpl.n	80183f4 <__ssprint_r+0xe0>
 801836a:	9901      	ldr	r1, [sp, #4]
 801836c:	9802      	ldr	r0, [sp, #8]
 801836e:	f7fb fab7 	bl	80138e0 <_malloc_r>
 8018372:	1e05      	subs	r5, r0, #0
 8018374:	d114      	bne.n	80183a0 <__ssprint_r+0x8c>
 8018376:	230c      	movs	r3, #12
 8018378:	9a02      	ldr	r2, [sp, #8]
 801837a:	2001      	movs	r0, #1
 801837c:	6013      	str	r3, [r2, #0]
 801837e:	2340      	movs	r3, #64	; 0x40
 8018380:	89a2      	ldrh	r2, [r4, #12]
 8018382:	4240      	negs	r0, r0
 8018384:	4313      	orrs	r3, r2
 8018386:	81a3      	strh	r3, [r4, #12]
 8018388:	2300      	movs	r3, #0
 801838a:	60b3      	str	r3, [r6, #8]
 801838c:	6073      	str	r3, [r6, #4]
 801838e:	e02f      	b.n	80183f0 <__ssprint_r+0xdc>
 8018390:	9b03      	ldr	r3, [sp, #12]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	9305      	str	r3, [sp, #20]
 8018396:	9b03      	ldr	r3, [sp, #12]
 8018398:	685f      	ldr	r7, [r3, #4]
 801839a:	3308      	adds	r3, #8
 801839c:	9303      	str	r3, [sp, #12]
 801839e:	e7c6      	b.n	801832e <__ssprint_r+0x1a>
 80183a0:	9a04      	ldr	r2, [sp, #16]
 80183a2:	6921      	ldr	r1, [r4, #16]
 80183a4:	f7fb fcd5 	bl	8013d52 <memcpy>
 80183a8:	89a3      	ldrh	r3, [r4, #12]
 80183aa:	4a18      	ldr	r2, [pc, #96]	; (801840c <__ssprint_r+0xf8>)
 80183ac:	401a      	ands	r2, r3
 80183ae:	2380      	movs	r3, #128	; 0x80
 80183b0:	4313      	orrs	r3, r2
 80183b2:	81a3      	strh	r3, [r4, #12]
 80183b4:	9b04      	ldr	r3, [sp, #16]
 80183b6:	6125      	str	r5, [r4, #16]
 80183b8:	18ed      	adds	r5, r5, r3
 80183ba:	6025      	str	r5, [r4, #0]
 80183bc:	003d      	movs	r5, r7
 80183be:	9b01      	ldr	r3, [sp, #4]
 80183c0:	9a04      	ldr	r2, [sp, #16]
 80183c2:	6163      	str	r3, [r4, #20]
 80183c4:	1a9b      	subs	r3, r3, r2
 80183c6:	60a3      	str	r3, [r4, #8]
 80183c8:	42bd      	cmp	r5, r7
 80183ca:	d900      	bls.n	80183ce <__ssprint_r+0xba>
 80183cc:	003d      	movs	r5, r7
 80183ce:	002a      	movs	r2, r5
 80183d0:	9905      	ldr	r1, [sp, #20]
 80183d2:	6820      	ldr	r0, [r4, #0]
 80183d4:	f7ff fb91 	bl	8017afa <memmove>
 80183d8:	68a3      	ldr	r3, [r4, #8]
 80183da:	1b5b      	subs	r3, r3, r5
 80183dc:	60a3      	str	r3, [r4, #8]
 80183de:	6823      	ldr	r3, [r4, #0]
 80183e0:	195d      	adds	r5, r3, r5
 80183e2:	68b3      	ldr	r3, [r6, #8]
 80183e4:	6025      	str	r5, [r4, #0]
 80183e6:	1bdb      	subs	r3, r3, r7
 80183e8:	60b3      	str	r3, [r6, #8]
 80183ea:	d1d1      	bne.n	8018390 <__ssprint_r+0x7c>
 80183ec:	2000      	movs	r0, #0
 80183ee:	6070      	str	r0, [r6, #4]
 80183f0:	b007      	add	sp, #28
 80183f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183f4:	9a01      	ldr	r2, [sp, #4]
 80183f6:	9802      	ldr	r0, [sp, #8]
 80183f8:	f7fb fcf0 	bl	8013ddc <_realloc_r>
 80183fc:	1e05      	subs	r5, r0, #0
 80183fe:	d1d9      	bne.n	80183b4 <__ssprint_r+0xa0>
 8018400:	6921      	ldr	r1, [r4, #16]
 8018402:	9802      	ldr	r0, [sp, #8]
 8018404:	f7fe ff78 	bl	80172f8 <_free_r>
 8018408:	e7b5      	b.n	8018376 <__ssprint_r+0x62>
 801840a:	46c0      	nop			; (mov r8, r8)
 801840c:	fffffb7f 	.word	0xfffffb7f

08018410 <__register_exitproc>:
 8018410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018412:	4d29      	ldr	r5, [pc, #164]	; (80184b8 <__register_exitproc+0xa8>)
 8018414:	0006      	movs	r6, r0
 8018416:	6828      	ldr	r0, [r5, #0]
 8018418:	9301      	str	r3, [sp, #4]
 801841a:	9100      	str	r1, [sp, #0]
 801841c:	0017      	movs	r7, r2
 801841e:	f7ff fb5f 	bl	8017ae0 <__retarget_lock_acquire_recursive>
 8018422:	4b26      	ldr	r3, [pc, #152]	; (80184bc <__register_exitproc+0xac>)
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	001c      	movs	r4, r3
 8018428:	34fc      	adds	r4, #252	; 0xfc
 801842a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801842c:	2800      	cmp	r0, #0
 801842e:	d103      	bne.n	8018438 <__register_exitproc+0x28>
 8018430:	334d      	adds	r3, #77	; 0x4d
 8018432:	33ff      	adds	r3, #255	; 0xff
 8018434:	0018      	movs	r0, r3
 8018436:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018438:	6843      	ldr	r3, [r0, #4]
 801843a:	2b1f      	cmp	r3, #31
 801843c:	dd18      	ble.n	8018470 <__register_exitproc+0x60>
 801843e:	4b20      	ldr	r3, [pc, #128]	; (80184c0 <__register_exitproc+0xb0>)
 8018440:	2b00      	cmp	r3, #0
 8018442:	d105      	bne.n	8018450 <__register_exitproc+0x40>
 8018444:	6828      	ldr	r0, [r5, #0]
 8018446:	f7ff fb4c 	bl	8017ae2 <__retarget_lock_release_recursive>
 801844a:	2001      	movs	r0, #1
 801844c:	4240      	negs	r0, r0
 801844e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018450:	20c8      	movs	r0, #200	; 0xc8
 8018452:	0040      	lsls	r0, r0, #1
 8018454:	f7fb fa30 	bl	80138b8 <malloc>
 8018458:	2800      	cmp	r0, #0
 801845a:	d0f3      	beq.n	8018444 <__register_exitproc+0x34>
 801845c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801845e:	2300      	movs	r3, #0
 8018460:	6002      	str	r2, [r0, #0]
 8018462:	22c4      	movs	r2, #196	; 0xc4
 8018464:	0052      	lsls	r2, r2, #1
 8018466:	6043      	str	r3, [r0, #4]
 8018468:	64e0      	str	r0, [r4, #76]	; 0x4c
 801846a:	5083      	str	r3, [r0, r2]
 801846c:	3204      	adds	r2, #4
 801846e:	5083      	str	r3, [r0, r2]
 8018470:	6843      	ldr	r3, [r0, #4]
 8018472:	2e00      	cmp	r6, #0
 8018474:	d014      	beq.n	80184a0 <__register_exitproc+0x90>
 8018476:	009a      	lsls	r2, r3, #2
 8018478:	1882      	adds	r2, r0, r2
 801847a:	0011      	movs	r1, r2
 801847c:	3188      	adds	r1, #136	; 0x88
 801847e:	600f      	str	r7, [r1, #0]
 8018480:	2101      	movs	r1, #1
 8018482:	0004      	movs	r4, r0
 8018484:	4099      	lsls	r1, r3
 8018486:	3485      	adds	r4, #133	; 0x85
 8018488:	34ff      	adds	r4, #255	; 0xff
 801848a:	6865      	ldr	r5, [r4, #4]
 801848c:	32fc      	adds	r2, #252	; 0xfc
 801848e:	430d      	orrs	r5, r1
 8018490:	6065      	str	r5, [r4, #4]
 8018492:	9d01      	ldr	r5, [sp, #4]
 8018494:	60d5      	str	r5, [r2, #12]
 8018496:	2e02      	cmp	r6, #2
 8018498:	d102      	bne.n	80184a0 <__register_exitproc+0x90>
 801849a:	68a2      	ldr	r2, [r4, #8]
 801849c:	4311      	orrs	r1, r2
 801849e:	60a1      	str	r1, [r4, #8]
 80184a0:	1c5a      	adds	r2, r3, #1
 80184a2:	6042      	str	r2, [r0, #4]
 80184a4:	3302      	adds	r3, #2
 80184a6:	9a00      	ldr	r2, [sp, #0]
 80184a8:	009b      	lsls	r3, r3, #2
 80184aa:	501a      	str	r2, [r3, r0]
 80184ac:	4b02      	ldr	r3, [pc, #8]	; (80184b8 <__register_exitproc+0xa8>)
 80184ae:	6818      	ldr	r0, [r3, #0]
 80184b0:	f7ff fb17 	bl	8017ae2 <__retarget_lock_release_recursive>
 80184b4:	2000      	movs	r0, #0
 80184b6:	e7ca      	b.n	801844e <__register_exitproc+0x3e>
 80184b8:	20000a54 	.word	0x20000a54
 80184bc:	0801ba88 	.word	0x0801ba88
 80184c0:	080138b9 	.word	0x080138b9

080184c4 <_calloc_r>:
 80184c4:	b510      	push	{r4, lr}
 80184c6:	4351      	muls	r1, r2
 80184c8:	f7fb fa0a 	bl	80138e0 <_malloc_r>
 80184cc:	1e04      	subs	r4, r0, #0
 80184ce:	d01a      	beq.n	8018506 <_calloc_r+0x42>
 80184d0:	0003      	movs	r3, r0
 80184d2:	3b08      	subs	r3, #8
 80184d4:	685a      	ldr	r2, [r3, #4]
 80184d6:	2303      	movs	r3, #3
 80184d8:	439a      	bics	r2, r3
 80184da:	3a04      	subs	r2, #4
 80184dc:	2a24      	cmp	r2, #36	; 0x24
 80184de:	d819      	bhi.n	8018514 <_calloc_r+0x50>
 80184e0:	0003      	movs	r3, r0
 80184e2:	2a13      	cmp	r2, #19
 80184e4:	d90b      	bls.n	80184fe <_calloc_r+0x3a>
 80184e6:	2100      	movs	r1, #0
 80184e8:	3308      	adds	r3, #8
 80184ea:	6001      	str	r1, [r0, #0]
 80184ec:	6041      	str	r1, [r0, #4]
 80184ee:	2a1b      	cmp	r2, #27
 80184f0:	d905      	bls.n	80184fe <_calloc_r+0x3a>
 80184f2:	6081      	str	r1, [r0, #8]
 80184f4:	60c1      	str	r1, [r0, #12]
 80184f6:	2a24      	cmp	r2, #36	; 0x24
 80184f8:	d007      	beq.n	801850a <_calloc_r+0x46>
 80184fa:	0003      	movs	r3, r0
 80184fc:	3310      	adds	r3, #16
 80184fe:	2200      	movs	r2, #0
 8018500:	601a      	str	r2, [r3, #0]
 8018502:	605a      	str	r2, [r3, #4]
 8018504:	609a      	str	r2, [r3, #8]
 8018506:	0020      	movs	r0, r4
 8018508:	bd10      	pop	{r4, pc}
 801850a:	0003      	movs	r3, r0
 801850c:	6101      	str	r1, [r0, #16]
 801850e:	3318      	adds	r3, #24
 8018510:	6141      	str	r1, [r0, #20]
 8018512:	e7f4      	b.n	80184fe <_calloc_r+0x3a>
 8018514:	2100      	movs	r1, #0
 8018516:	f7fb fc25 	bl	8013d64 <memset>
 801851a:	e7f4      	b.n	8018506 <_calloc_r+0x42>

0801851c <_sbrk>:
 801851c:	4b05      	ldr	r3, [pc, #20]	; (8018534 <_sbrk+0x18>)
 801851e:	0002      	movs	r2, r0
 8018520:	6819      	ldr	r1, [r3, #0]
 8018522:	2900      	cmp	r1, #0
 8018524:	d101      	bne.n	801852a <_sbrk+0xe>
 8018526:	4904      	ldr	r1, [pc, #16]	; (8018538 <_sbrk+0x1c>)
 8018528:	6019      	str	r1, [r3, #0]
 801852a:	6818      	ldr	r0, [r3, #0]
 801852c:	1882      	adds	r2, r0, r2
 801852e:	601a      	str	r2, [r3, #0]
 8018530:	4770      	bx	lr
 8018532:	46c0      	nop			; (mov r8, r8)
 8018534:	20006a20 	.word	0x20006a20
 8018538:	20006fc0 	.word	0x20006fc0

0801853c <_init>:
 801853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801853e:	46c0      	nop			; (mov r8, r8)
 8018540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018542:	bc08      	pop	{r3}
 8018544:	469e      	mov	lr, r3
 8018546:	4770      	bx	lr

08018548 <_fini>:
 8018548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801854a:	46c0      	nop			; (mov r8, r8)
 801854c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801854e:	bc08      	pop	{r3}
 8018550:	469e      	mov	lr, r3
 8018552:	4770      	bx	lr
